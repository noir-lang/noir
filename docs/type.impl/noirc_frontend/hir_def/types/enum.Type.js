(function() {
    var type_impls = Object.fromEntries([["noirc_frontend",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#31\">Source</a><a href=\"#impl-Clone-for-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#31\">Source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/clone.rs.html#174\">Source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/1.85.0/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2662-2761\">Source</a><a href=\"#impl-Debug-for-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2663-2760\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#943-1047\">Source</a><a href=\"#impl-Display-for-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#944-1046\">Source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/1.85.0/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/1.85.0/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Hash-for-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2786-2863\">Source</a><a href=\"#impl-Hash-for-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html\" title=\"trait core::hash::Hash\">Hash</a> for <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2787-2862\">Source</a><a href=\"#method.hash\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html#tymethod.hash\" class=\"fn\">hash</a>&lt;H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>&gt;(&amp;self, state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;mut H</a>)</h4></section></summary><div class='docblock'>Feeds this value into the given <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html#tymethod.hash\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.hash_slice\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/hash/mod.rs.html#235-237\">Source</a></span><a href=\"#method.hash_slice\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html#method.hash_slice\" class=\"fn\">hash_slice</a>&lt;H&gt;(data: &amp;[Self], state: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;mut H</a>)<div class=\"where\">where\n    H: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\">Hasher</a>,\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Feeds a slice of this type into the given <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hasher.html\" title=\"trait core::hash::Hasher\"><code>Hasher</code></a>. <a href=\"https://doc.rust-lang.org/1.85.0/core/hash/trait.Hash.html#method.hash_slice\">Read more</a></div></details></div></details>","Hash","noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Ord-for-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#31\">Source</a><a href=\"#impl-Ord-for-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Ord.html\" title=\"trait core::cmp::Ord\">Ord</a> for <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#31\">Source</a><a href=\"#method.cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Ord.html#tymethod.cmp\" class=\"fn\">cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a></h4></section></summary><div class='docblock'>This method returns an <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\"><code>Ordering</code></a> between <code>self</code> and <code>other</code>. <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Ord.html#tymethod.cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.max\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#980-982\">Source</a></span><a href=\"#method.max\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Ord.html#method.max\" class=\"fn\">max</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the maximum of two values. <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Ord.html#method.max\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.min\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.21.0\">1.21.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#1001-1003\">Source</a></span><a href=\"#method.min\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Ord.html#method.min\" class=\"fn\">min</a>(self, other: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Compares and returns the minimum of two values. <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Ord.html#method.min\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clamp\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.50.0\">1.50.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#1027-1029\">Source</a></span><a href=\"#method.clamp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Ord.html#method.clamp\" class=\"fn\">clamp</a>(self, min: Self, max: Self) -&gt; Self<div class=\"where\">where\n    Self: <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/marker/trait.Sized.html\" title=\"trait core::marker::Sized\">Sized</a>,</div></h4></section></summary><div class='docblock'>Restrict a value to a certain interval. <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Ord.html#method.clamp\">Read more</a></div></details></div></details>","Ord","noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialEq-for-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2865-2950\">Source</a><a href=\"#impl-PartialEq-for-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html\" title=\"trait core::cmp::PartialEq\">PartialEq</a> for <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.eq\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2866-2949\">Source</a><a href=\"#method.eq\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html#tymethod.eq\" class=\"fn\">eq</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>self</code> and <code>other</code> values to be equal, and is used by <code>==</code>.</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ne\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#261\">Source</a></span><a href=\"#method.ne\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialEq.html#method.ne\" class=\"fn\">ne</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests for <code>!=</code>. The default implementation is almost always sufficient,\nand should not be overridden without very good reason.</div></details></div></details>","PartialEq","noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-PartialOrd-for-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#31\">Source</a><a href=\"#impl-PartialOrd-for-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html\" title=\"trait core::cmp::PartialOrd\">PartialOrd</a> for <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.partial_cmp\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#31\">Source</a><a href=\"#method.partial_cmp\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\" class=\"fn\">partial_cmp</a>(&amp;self, other: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/enum.Ordering.html\" title=\"enum core::cmp::Ordering\">Ordering</a>&gt;</h4></section></summary><div class='docblock'>This method returns an ordering between <code>self</code> and <code>other</code> values if one exists. <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#tymethod.partial_cmp\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.lt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#1335\">Source</a></span><a href=\"#method.lt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#method.lt\" class=\"fn\">lt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than (for <code>self</code> and <code>other</code>) and is used by the <code>&lt;</code> operator. <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#method.lt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.le\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#1353\">Source</a></span><a href=\"#method.le\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#method.le\" class=\"fn\">le</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests less than or equal to (for <code>self</code> and <code>other</code>) and is used by the\n<code>&lt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#method.le\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.gt\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#1371\">Source</a></span><a href=\"#method.gt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#method.gt\" class=\"fn\">gt</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than (for <code>self</code> and <code>other</code>) and is used by the <code>&gt;</code>\noperator. <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#method.gt\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.ge\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/1.85.0/src/core/cmp.rs.html#1389\">Source</a></span><a href=\"#method.ge\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#method.ge\" class=\"fn\">ge</a>(&amp;self, other: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.reference.html\">&amp;Rhs</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class='docblock'>Tests greater than or equal to (for <code>self</code> and <code>other</code>) and is used by\nthe <code>&gt;=</code> operator. <a href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.PartialOrd.html#method.ge\">Read more</a></div></details></div></details>","PartialOrd","noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/comptime/hir_to_display_ast.rs.html#375-495\">Source</a><a href=\"#impl-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_display_ast\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/comptime/hir_to_display_ast.rs.html#377-479\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.to_display_ast\" class=\"fn\">to_display_ast</a>(&amp;self) -&gt; <a class=\"struct\" href=\"noirc_frontend/ast/struct.UnresolvedType.html\" title=\"struct noirc_frontend::ast::UnresolvedType\">UnresolvedType</a></h4></section></summary><div class=\"docblock\"><p>Convert to AST for display (some details lost)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.to_type_expression\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir/comptime/hir_to_display_ast.rs.html#482-494\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.to_type_expression\" class=\"fn\">to_type_expression</a>(&amp;self) -&gt; <a class=\"enum\" href=\"noirc_frontend/ast/enum.UnresolvedTypeExpression.html\" title=\"enum noirc_frontend::ast::UnresolvedTypeExpression\">UnresolvedTypeExpression</a></h4></section></summary><div class=\"docblock\"><p>Convert to AST for display (some details lost)</p>\n</div></details></div></details>",0,"noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1096-2507\">Source</a><a href=\"#impl-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><section id=\"method.default_int_or_field_type\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1097-1099\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.default_int_or_field_type\" class=\"fn\">default_int_or_field_type</a>() -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section><section id=\"method.default_int_type\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1101-1103\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.default_int_type\" class=\"fn\">default_int_type</a>() -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section><section id=\"method.type_variable_with_kind\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1105-1109\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.type_variable_with_kind\" class=\"fn\">type_variable_with_kind</a>(\n    interner: &amp;<a class=\"struct\" href=\"noirc_frontend/node_interner/struct.NodeInterner.html\" title=\"struct noirc_frontend::node_interner::NodeInterner\">NodeInterner</a>,\n    type_var_kind: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Kind.html\" title=\"enum noirc_frontend::hir_def::types::Kind\">Kind</a>,\n) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section><section id=\"method.type_variable\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1111-1114\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.type_variable\" class=\"fn\">type_variable</a>(id: <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.TypeVariableId.html\" title=\"struct noirc_frontend::hir_def::types::TypeVariableId\">TypeVariableId</a>) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section><section id=\"method.polymorphic_integer_or_field\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1116-1119\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.polymorphic_integer_or_field\" class=\"fn\">polymorphic_integer_or_field</a>(interner: &amp;<a class=\"struct\" href=\"noirc_frontend/node_interner/struct.NodeInterner.html\" title=\"struct noirc_frontend::node_interner::NodeInterner\">NodeInterner</a>) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section><section id=\"method.polymorphic_integer\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1121-1124\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.polymorphic_integer\" class=\"fn\">polymorphic_integer</a>(interner: &amp;<a class=\"struct\" href=\"noirc_frontend/node_interner/struct.NodeInterner.html\" title=\"struct noirc_frontend::node_interner::NodeInterner\">NodeInterner</a>) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_bindable\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1130-1139\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_bindable\" class=\"fn\">is_bindable</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>A bit of an awkward name for this function - this function returns\ntrue for type variables or polymorphic integers which are unbound.\nNamedGenerics will always be false as although they are bindable,\nthey shouldn’t be bound over until monomorphization.</p>\n</div></details><section id=\"method.is_field\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1141-1143\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_field\" class=\"fn\">is_field</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.is_bool\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1145-1147\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_bool\" class=\"fn\">is_bool</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.is_integer\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1149-1151\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_integer\" class=\"fn\">is_integer</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_field_element\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1155-1162\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_field_element\" class=\"fn\">is_field_element</a>(&amp;self, value_level: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>If value_level, only check for Type::FieldElement,\nelse only check for a type-level FieldElement</p>\n</div></details><section id=\"method.is_signed\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1164-1166\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_signed\" class=\"fn\">is_signed</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.is_unsigned\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1168-1170\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_unsigned\" class=\"fn\">is_unsigned</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_numeric_value\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1174-1189\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_numeric_value\" class=\"fn\">is_numeric_value</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>While Kind::is_numeric refers to numeric <em>types</em>,\nthis method checks for numeric <em>values</em></p>\n</div></details><section id=\"method.is_primitive\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1191-1218\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_primitive\" class=\"fn\">is_primitive</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.is_function\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1220-1226\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_function\" class=\"fn\">is_function</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.is_mutable_ref\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1228-1230\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_mutable_ref\" class=\"fn\">is_mutable_ref</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_for_program_input\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1239-1291\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_valid_for_program_input\" class=\"fn\">is_valid_for_program_input</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>True if this type can be used as a parameter to <code>main</code> or a contract function.\nThis is only false for unsized types like slices or slices that do not make sense\nas a program input such as named generics or mutable references.</p>\n<p>This function should match the same check done in <code>create_value_from_type</code> in acir_gen.\nIf this function does not catch a case where a type should be valid, it will later lead to a\npanic in that function instead of a user-facing compiler error message.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.array_or_string_len_is_not_zero\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1299-1307\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.array_or_string_len_is_not_zero\" class=\"fn\">array_or_string_len_is_not_zero</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Empty arrays and strings (which are arrays under the hood) are disallowed\nas input to program entry points.</p>\n<p>The point of inputs to entry points is to process input data.\nThus, passing empty arrays is pointless and adds extra complexity to the compiler\nfor handling them.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_non_inlined_function_input\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1315-1361\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_valid_non_inlined_function_input\" class=\"fn\">is_valid_non_inlined_function_input</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>True if this type can be used as a parameter to an ACIR function that is not <code>main</code> or a contract function.\nThis encapsulates functions for which we may not want to inline during compilation.</p>\n<p>The inputs allowed for a function entry point differ from those allowed as input to a program as there are\ncertain types which through compilation we know what their size should be.\nThis includes types such as numeric generics.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.is_valid_for_unconstrained_boundary\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1365-1417\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_valid_for_unconstrained_boundary\" class=\"fn\">is_valid_for_unconstrained_boundary</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Returns true if a value of this type can safely pass between constrained and\nunconstrained functions (and vice-versa).</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_count\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1421-1434\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.generic_count\" class=\"fn\">generic_count</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of <code>Forall</code>-quantified type variables on this type.\nReturns 0 if this is not a Type::Forall</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generalize_from_substitutions\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1439-1442\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.generalize_from_substitutions\" class=\"fn\">generalize_from_substitutions</a>(\n    self,\n    type_bindings: <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Takes a monomorphic type and generalizes it over each of the type variables in the\ngiven type bindings, ignoring what each type variable is bound to in the TypeBindings\nand their Kind’s</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.as_monotype\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1447-1452\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.as_monotype\" class=\"fn\">as_monotype</a>(&amp;self) -&gt; &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Return this type as a monomorphic type - without a <code>Type::Forall</code> if there is one.\nThis is only a shallow check since Noir’s type system prohibits <code>Type::Forall</code> anywhere\ninside other types.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unwrap_forall\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1456-1461\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.unwrap_forall\" class=\"fn\">unwrap_forall</a>(&amp;self) -&gt; (<a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.GenericTypeVars.html\" title=\"type noirc_frontend::hir_def::types::GenericTypeVars\">GenericTypeVars</a>&gt;, &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>)</h4></section></summary><div class=\"docblock\"><p>Return the generics and type within this <code>Type::Forall</code>.\nPanics if <code>self</code> is not <code>Type::Forall</code></p>\n</div></details><section id=\"method.kind\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1463-1492\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.kind\" class=\"fn\">kind</a>(&amp;self) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Kind.html\" title=\"enum noirc_frontend::hir_def::types::Kind\">Kind</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.infix_kind\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1495-1499\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.infix_kind\" class=\"fn\">infix_kind</a>(&amp;self, other: &amp;Self) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Kind.html\" title=\"enum noirc_frontend::hir_def::types::Kind\">Kind</a></h4></section></summary><div class=\"docblock\"><p>Unifies self and other kinds or fails with a Kind error</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.infix_expr\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1502-1504\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.infix_expr\" class=\"fn\">infix_expr</a>(\n    lhs: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;,\n    op: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.BinaryTypeOperator.html\" title=\"enum noirc_frontend::hir_def::types::BinaryTypeOperator\">BinaryTypeOperator</a>,\n    rhs: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Creates an <code>InfixExpr</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.inverted_infix_expr\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1508-1510\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.inverted_infix_expr\" class=\"fn\">inverted_infix_expr</a>(\n    lhs: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;,\n    op: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.BinaryTypeOperator.html\" title=\"enum noirc_frontend::hir_def::types::BinaryTypeOperator\">BinaryTypeOperator</a>,\n    rhs: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Creates an <code>InfixExpr</code> that results from the compiler trying to unify something like\n<code>4 = a * b</code> into <code>a = 4 / b</code> (where <code>4 / b</code> is the “inverted” expression).</p>\n</div></details><section id=\"method.new_infix_expr\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1512-1546\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.new_infix_expr\" class=\"fn\">new_infix_expr</a>(\n    lhs: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;,\n    op: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.BinaryTypeOperator.html\" title=\"enum noirc_frontend::hir_def::types::BinaryTypeOperator\">BinaryTypeOperator</a>,\n    rhs: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;,\n    inversion: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.field_count\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1549-1597\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.field_count\" class=\"fn\">field_count</a>(&amp;self, location: &amp;<a class=\"struct\" href=\"noirc_errors/position/struct.Location.html\" title=\"struct noirc_errors::position::Location\">Location</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u32.html\">u32</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of field elements required to represent the type once encoded.</p>\n</div></details><section id=\"method.is_nested_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1599-1606\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.is_nested_slice\" class=\"fn\">is_nested_slice</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><section id=\"method.contains_slice\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1608-1634\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.contains_slice\" class=\"fn\">contains_slice</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_bind_to_polymorphic_int\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1639-1709\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_bind_to_polymorphic_int\" class=\"fn\">try_bind_to_polymorphic_int</a>(\n    &amp;self,\n    var: &amp;<a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.TypeVariable.html\" title=\"struct noirc_frontend::hir_def::types::TypeVariable\">TypeVariable</a>,\n    bindings: &amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n    only_integer: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to bind a PolymorphicInt variable to self, succeeding if self is an integer, field,\nother PolymorphicInt type, or type variable. If successful, the binding is placed in the\ngiven TypeBindings map rather than linked immediately.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_bind_to\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1717-1750\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_bind_to\" class=\"fn\">try_bind_to</a>(\n    &amp;self,\n    var: &amp;<a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.TypeVariable.html\" title=\"struct noirc_frontend::hir_def::types::TypeVariable\">TypeVariable</a>,\n    bindings: &amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n    kind: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Kind.html\" title=\"enum noirc_frontend::hir_def::types::Kind\">Kind</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to bind the given type variable to self. Although the given type variable\nis expected to be of Kind::Normal, this binding can still fail\nif the given type variable occurs within <code>self</code> as that would create a recursive type.</p>\n<p>If successful, the binding is placed in the\ngiven TypeBindings map rather than linked immediately.</p>\n</div></details><section id=\"method.get_inner_type_variable\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1752-1761\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.get_inner_type_variable\" class=\"fn\">get_inner_type_variable</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.Shared.html\" title=\"struct noirc_frontend::hir_def::types::Shared\">Shared</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.TypeBinding.html\" title=\"enum noirc_frontend::hir_def::types::TypeBinding\">TypeBinding</a>&gt;, <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Kind.html\" title=\"enum noirc_frontend::hir_def::types::Kind\">Kind</a>)&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.apply_type_bindings\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1765-1769\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.apply_type_bindings\" class=\"fn\">apply_type_bindings</a>(bindings: <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>)</h4></section></summary><div class=\"docblock\"><p>Apply the given type bindings, making them permanently visible for each\nclone of each type variable bound.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.evaluate_to_u32\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1773-1779\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.evaluate_to_u32\" class=\"fn\">evaluate_to_u32</a>(&amp;self, location: <a class=\"struct\" href=\"noirc_errors/position/struct.Location.html\" title=\"struct noirc_errors::position::Location\">Location</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.u32.html\">u32</a>, <a class=\"enum\" href=\"noirc_frontend/hir/type_check/enum.TypeCheckError.html\" title=\"enum noirc_frontend::hir::type_check::TypeCheckError\">TypeCheckError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>If this type is a Type::Constant (used in array lengths), or is bound\nto a Type::Constant, return the constant as a u32.</p>\n</div></details><section id=\"method.evaluate_to_field_element\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1783-1790\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.evaluate_to_field_element\" class=\"fn\">evaluate_to_field_element</a>(\n    &amp;self,\n    kind: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Kind.html\" title=\"enum noirc_frontend::hir_def::types::Kind\">Kind</a>,\n    location: <a class=\"struct\" href=\"noirc_errors/position/struct.Location.html\" title=\"struct noirc_errors::position::Location\">Location</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FieldElement, <a class=\"enum\" href=\"noirc_frontend/hir/type_check/enum.TypeCheckError.html\" title=\"enum noirc_frontend::hir::type_check::TypeCheckError\">TypeCheckError</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.evaluate_to_field_element_helper\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1793-1873\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.evaluate_to_field_element_helper\" class=\"fn\">evaluate_to_field_element_helper</a>(\n    &amp;self,\n    kind: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Kind.html\" title=\"enum noirc_frontend::hir_def::types::Kind\">Kind</a>,\n    location: <a class=\"struct\" href=\"noirc_errors/position/struct.Location.html\" title=\"struct noirc_errors::position::Location\">Location</a>,\n    run_simplifications: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;FieldElement, <a class=\"enum\" href=\"noirc_frontend/hir/type_check/enum.TypeCheckError.html\" title=\"enum noirc_frontend::hir::type_check::TypeCheckError\">TypeCheckError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>evaluate_to_field_element with optional generic arithmetic simplifications</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_field_type_and_visibility\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1877-1894\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.get_field_type_and_visibility\" class=\"fn\">get_field_type_and_visibility</a>(\n    &amp;self,\n    field_name: &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.str.html\">str</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>, <a class=\"enum\" href=\"noirc_frontend/ast/enum.ItemVisibility.html\" title=\"enum noirc_frontend::ast::ItemVisibility\">ItemVisibility</a>)&gt;</h4></section></summary><div class=\"docblock\"><p>Retrieves the type of the given field name\nPanics if the type is not a struct or tuple.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.instantiate_with_bindings\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1899-1917\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.instantiate_with_bindings\" class=\"fn\">instantiate_with_bindings</a>(\n    &amp;self,\n    bindings: <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n    interner: &amp;<a class=\"struct\" href=\"noirc_frontend/node_interner/struct.NodeInterner.html\" title=\"struct noirc_frontend::node_interner::NodeInterner\">NodeInterner</a>,\n) -&gt; (<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>, <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>)</h4></section></summary><div class=\"docblock\"><p>Instantiate this type with the given type bindings.\nIf any type variables which would be instantiated are contained in the\ngiven type bindings instead, the value from the type bindings is used.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.instantiate\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1922-1938\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.instantiate\" class=\"fn\">instantiate</a>(&amp;self, interner: &amp;<a class=\"struct\" href=\"noirc_frontend/node_interner/struct.NodeInterner.html\" title=\"struct noirc_frontend::node_interner::NodeInterner\">NodeInterner</a>) -&gt; (<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>, <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>)</h4></section></summary><div class=\"docblock\"><p>Instantiate this type, replacing any type variables it is quantified\nover with fresh type variables. If this type is not a Type::Forall,\nit is unchanged.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.instantiate_with\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1947-1975\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.instantiate_with\" class=\"fn\">instantiate_with</a>(\n    &amp;self,\n    types: <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;,\n    interner: &amp;<a class=\"struct\" href=\"noirc_frontend/node_interner/struct.NodeInterner.html\" title=\"struct noirc_frontend::node_interner::NodeInterner\">NodeInterner</a>,\n    implicit_generic_count: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.usize.html\">usize</a>,\n) -&gt; (<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>, <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>)</h4></section></summary><div class=\"docblock\"><p>Instantiates a type with the given types.\nThis differs from substitute in that only the quantified type variables\nare matched against the type list and are eligible for substitution - similar\nto normal instantiation. This function is used when the turbofish operator\nis used and generic substitutions are provided manually by users.</p>\n<p>Expects the given type vector to be the same length as the Forall type variables.</p>\n</div></details><section id=\"method.type_variable_id\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1977-1984\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.type_variable_id\" class=\"fn\">type_variable_id</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.TypeVariableId.html\" title=\"struct noirc_frontend::hir_def::types::TypeVariableId\">TypeVariableId</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.substitute\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#1989-1991\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.substitute\" class=\"fn\">substitute</a>(&amp;self, type_bindings: &amp;<a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Substitute any type variables found within this type with the\ngiven bindings if found. If a type variable is not found within\nthe given TypeBindings, it is unchanged.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.force_substitute\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2002-2004\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.force_substitute\" class=\"fn\">force_substitute</a>(&amp;self, type_bindings: &amp;<a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Forcibly substitute any type variables found within this type with the\ngiven bindings if found. If a type variable is not found within\nthe given TypeBindings, it is unchanged.</p>\n<p>Compared to <code>substitute</code>, this function will also substitute any type variables\nfrom type_bindings, even if they are bound in <code>self</code>. Since this can undo previous\nbindings, this function should be avoided unless necessary. Currently, it is only\nneeded when handling bindings between trait methods and their corresponding impl\nmethod during monomorphization.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.substitute_helper\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2011-2152\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.substitute_helper\" class=\"fn\">substitute_helper</a>(\n    &amp;self,\n    type_bindings: &amp;<a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n    substitute_bound_typevars: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>This helper function only differs in the additional parameter which, if set,\nallows substitutions on already-bound type variables. This should be <code>false</code>\nfor most uses, but is currently needed during monomorphization when instantiating\ntrait functions to shed any previous bindings from recursive parent calls to the\nsame trait.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.occurs\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2155-2201\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.occurs\" class=\"fn\">occurs</a>(&amp;self, target_id: <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.TypeVariableId.html\" title=\"struct noirc_frontend::hir_def::types::TypeVariableId\">TypeVariableId</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>True if the given TypeVariableId is free anywhere within self</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.follow_bindings\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2209-2272\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.follow_bindings\" class=\"fn\">follow_bindings</a>(&amp;self) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Follow any TypeVariable bindings within this type. Doing so ensures\nthat if the bindings are rebound or unbound from under the type then the\nreturned type will not change (because it will no longer contain the\nlinks that may be unbound).</p>\n<p>Expected to be called on an instantiated type (with no Type::Foralls)</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.follow_bindings_shallow\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2277-2291\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.follow_bindings_shallow\" class=\"fn\">follow_bindings_shallow</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/alloc/borrow/enum.Cow.html\" title=\"enum alloc::borrow::Cow\">Cow</a>&lt;'_, <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Follow bindings if this is a type variable or generic to the first non-typevariable\ntype. Unlike <code>follow_bindings</code>, this won’t recursively follow any bindings on any\nfields or arguments of this type.</p>\n</div></details><section id=\"method.from_generics\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2293-2295\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.from_generics\" class=\"fn\">from_generics</a>(generics: &amp;<a class=\"type\" href=\"noirc_frontend/hir_def/types/type.GenericTypeVars.html\" title=\"type noirc_frontend::hir_def::types::GenericTypeVars\">GenericTypeVars</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.replace_named_generics_with_type_variables\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2300-2382\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.replace_named_generics_with_type_variables\" class=\"fn\">replace_named_generics_with_type_variables</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Replace any <code>Type::NamedGeneric</code> in this type with a <code>Type::TypeVariable</code>\nusing to the same inner <code>TypeVariable</code>. This is used during monomorphization\nto bind to named generics since they are unbindable during type checking.</p>\n</div></details><section id=\"method.slice_element_type\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2384-2389\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.slice_element_type\" class=\"fn\">slice_element_type</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;</h4></section><section id=\"method.integral_maximum_size\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2391-2436\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.integral_maximum_size\" class=\"fn\">integral_maximum_size</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;FieldElement&gt;</h4></section><section id=\"method.integral_minimum_size\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2438-2466\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.integral_minimum_size\" class=\"fn\">integral_minimum_size</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"noirc_frontend/signed_field/struct.SignedField.html\" title=\"struct noirc_frontend::signed_field::SignedField\">SignedField</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.substitute_kind_any_with_kind\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#2470-2506\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.substitute_kind_any_with_kind\" class=\"fn\">substitute_kind_any_with_kind</a>(self, kind: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Kind.html\" title=\"enum noirc_frontend::hir_def::types::Kind\">Kind</a>) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Substitute any <a href=\"noirc_frontend/hir_def/types/enum.Kind.html#variant.Any\" title=\"variant noirc_frontend::hir_def::types::Kind::Any\"><code>Kind::Any</code></a> in this type, for types that hold kinds (like <a href=\"noirc_frontend/hir_def/types/enum.Type.html#variant.Constant\" title=\"variant noirc_frontend::hir_def::types::Type::Constant\"><code>Type::Constant</code></a>)\nwith the given <code>kind</code>.</p>\n</div></details></div></details>",0,"noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#8-338\">Source</a><a href=\"#impl-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.canonicalize\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#18-31\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.canonicalize\" class=\"fn\">canonicalize</a>(&amp;self) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Try to canonicalize the representation of this type.\nCurrently the only type with a canonical representation is\n<code>Type::Infix</code> where for each consecutive commutative operator\nwe sort the non-constant operands by <code>Type: Ord</code> and place all constant\noperands at the end, constant folded.</p>\n<p>For example:</p>\n<ul>\n<li><code>canonicalize[((1 + N) + M) + 2] = (M + N) + 3</code></li>\n<li><code>canonicalize[A + 2 * B + 3 - 2] = A + (B * 2) + 3 - 2</code></li>\n</ul>\n</div></details><section id=\"method.canonicalize_with_simplifications\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#33-35\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.canonicalize_with_simplifications\" class=\"fn\">canonicalize_with_simplifications</a>(\n    &amp;self,\n    run_simplifications: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.canonicalize_checked\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#38-40\">Source</a><h4 class=\"code-header\">pub(crate) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.canonicalize_checked\" class=\"fn\">canonicalize_checked</a>(&amp;self) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Only simplify constants and drop/skip any CheckedCast’s</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.canonicalize_checked_helper\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#43-48\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.canonicalize_checked_helper\" class=\"fn\">canonicalize_checked_helper</a>(&amp;self) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Only simplify constants and drop/skip any CheckedCast’s</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.canonicalize_unchecked\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#51-56\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.canonicalize_unchecked\" class=\"fn\">canonicalize_unchecked</a>(&amp;self) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>Run all simplifications and drop/skip any CheckedCast’s</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.canonicalize_helper\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#66-129\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.canonicalize_helper\" class=\"fn\">canonicalize_helper</a>(\n    &amp;self,\n    found_checked_cast: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>,\n    run_simplifications: <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a>,\n) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section></summary><div class=\"docblock\"><p>If <code>found_checked_cast</code>, then drop additional CheckedCast’s</p>\n<p>If <code>run_simplifications</code> is false, then only:</p>\n<ul>\n<li>Attempt to evaluate each sub-expression to a constant</li>\n<li>Drop nested CheckedCast’s</li>\n</ul>\n<p>Otherwise also attempt try_simplify_partial_constants, sort_commutative,\nand other simplifications</p>\n</div></details><section id=\"method.sort_commutative\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#131-192\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.sort_commutative\" class=\"fn\">sort_commutative</a>(lhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>, op: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.BinaryTypeOperator.html\" title=\"enum noirc_frontend::hir_def::types::BinaryTypeOperator\">BinaryTypeOperator</a>, rhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_simplify_non_constants_in_lhs\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#200-226\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_simplify_non_constants_in_lhs\" class=\"fn\">try_simplify_non_constants_in_lhs</a>(\n    lhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    op: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.BinaryTypeOperator.html\" title=\"enum noirc_frontend::hir_def::types::BinaryTypeOperator\">BinaryTypeOperator</a>,\n    rhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to simplify non-constant expressions in the form <code>(N op1 M) op2 M</code>\nwhere the two <code>M</code> terms are expected to cancel out.\nPrecondition: <code>lhs &amp; rhs are in canonical form</code></p>\n<ul>\n<li>Simplifies <code>(N +/- M) -/+ M</code> to <code>N</code></li>\n<li>Simplifies <code>(N * M) ÷ M</code> to <code>N</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_simplify_non_constants_in_rhs\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#237-267\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_simplify_non_constants_in_rhs\" class=\"fn\">try_simplify_non_constants_in_rhs</a>(\n    lhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    op: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.BinaryTypeOperator.html\" title=\"enum noirc_frontend::hir_def::types::BinaryTypeOperator\">BinaryTypeOperator</a>,\n    rhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to simplify non-constant expressions in the form <code>N op1 (M op1 N)</code>\nwhere the two <code>M</code> terms are expected to cancel out.\nPrecondition: <code>lhs &amp; rhs are in canonical form</code></p>\n<p>Unlike <code>try_simplify_non_constants_in_lhs</code> we can’t simplify <code>N / (M * N)</code>\nSince that should simplify to <code>1 / M</code> instead of <code>M</code>.</p>\n<ul>\n<li>Simplifies <code>N +/- (M -/+ N)</code> to <code>M</code></li>\n<li>Simplifies <code>N * (M ÷ N)</code> to <code>M</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.parse_partial_constant_expr\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#276-290\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.parse_partial_constant_expr\" class=\"fn\">parse_partial_constant_expr</a>(\n    lhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    rhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;(<a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;, <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.BinaryTypeOperator.html\" title=\"enum noirc_frontend::hir_def::types::BinaryTypeOperator\">BinaryTypeOperator</a>, FieldElement, FieldElement)&gt;</h4></section></summary><div class=\"docblock\"><p>Given:\nlhs = <code>N op C1</code>\nrhs = C2\nReturns: <code>(N, op, C1, C2)</code> if C1 and C2 are constants.\nNote that the operator here is within the <code>lhs</code> term, the operator\nseparating lhs and rhs is not needed.\nPrecondition: <code>lhs &amp; rhs are in canonical form</code></p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_simplify_partial_constants\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/arithmetic.rs.html#299-337\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_simplify_partial_constants\" class=\"fn\">try_simplify_partial_constants</a>(\n    lhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    op: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.BinaryTypeOperator.html\" title=\"enum noirc_frontend::hir_def::types::BinaryTypeOperator\">BinaryTypeOperator</a>,\n    rhs: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to simplify partially constant expressions in the form <code>(N op1 C1) op2 C2</code>\nwhere C1 and C2 are constants that can be combined (e.g. N + 5 - 3 = N + 2)\nPrecondition: <code>lhs &amp; rhs are in canonical form</code></p>\n<ul>\n<li>Simplifies <code>(N +/- C1) +/- C2</code> to <code>N +/- (C1 +/- C2)</code> if C1 and C2 are constants.</li>\n<li>Simplifies <code>(N * C1) ÷ C2</code> to <code>N * (C1 ÷ C2)</code> if C1 and C2 are constants which divide\nwithout a remainder.</li>\n</ul>\n</div></details></div></details>",0,"noirc_frontend::monomorphization::HirType"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#70-611\">Source</a><a href=\"#impl-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.unify\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#75-82\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.unify\" class=\"fn\">unify</a>(&amp;self, expected: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to unify this type with another, setting any type variables found\nequal to the other type in the process. When comparing types, unification\n(including try_unify) are almost always preferred over Type::eq as unification\nwill correctly handle generic types.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_unify\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#86-92\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_unify\" class=\"fn\">try_unify</a>(\n    &amp;self,\n    other: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    bindings: &amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section></summary><div class=\"docblock\"><p><code>try_unify</code> is a bit of a misnomer since although errors are not committed,\nany unified bindings are on success.</p>\n</div></details><section id=\"method.try_unify_with_flags\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#94-308\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_unify_with_flags\" class=\"fn\">try_unify_with_flags</a>(\n    &amp;self,\n    other: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    flags: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/unification/enum.UnificationFlags.html\" title=\"enum noirc_frontend::hir_def::types::unification::UnificationFlags\">UnificationFlags</a>,\n    bindings: &amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_unify_to_type_variable\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#312-342\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_unify_to_type_variable\" class=\"fn\">try_unify_to_type_variable</a>(\n    &amp;self,\n    type_variable: &amp;<a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.TypeVariable.html\" title=\"struct noirc_frontend::hir_def::types::TypeVariable\">TypeVariable</a>,\n    flags: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/unification/enum.UnificationFlags.html\" title=\"enum noirc_frontend::hir_def::types::unification::UnificationFlags\">UnificationFlags</a>,\n    bindings: &amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n    bind_variable: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>(&amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to unify a type variable to <code>self</code>.\nThis is a helper function factored out from try_unify.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_unify_by_isolating_an_unbound_type_variable\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#353-361\">Source</a><h4 class=\"code-header\">pub(super) fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_unify_by_isolating_an_unbound_type_variable\" class=\"fn\">try_unify_by_isolating_an_unbound_type_variable</a>(\n    &amp;self,\n    other: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    bindings: &amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to unify the following equations:</p>\n<ul>\n<li><code>A + rhs = other</code> -&gt; <code>A = other - rhs</code></li>\n<li><code>A - rhs = other</code> -&gt; <code>A = other + rhs</code></li>\n<li><code>lhs + B = other</code> -&gt; <code>B = other - lhs</code></li>\n<li><code>lhs - B = other</code> -&gt; <code>B = lhs - other</code></li>\n<li><code>other = A + rhs</code> -&gt; <code>A = other - rhs</code></li>\n<li><code>other = A - rhs</code> -&gt; <code>A = other + rhs</code></li>\n<li><code>other = lhs + B</code> -&gt; <code>B = other - lhs</code></li>\n<li><code>other = lhs - B</code> -&gt; <code>B = lhs - other</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_unify_by_isolating_an_unbound_type_variable_in_self\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#368-435\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_unify_by_isolating_an_unbound_type_variable_in_self\" class=\"fn\">try_unify_by_isolating_an_unbound_type_variable_in_self</a>(\n    &amp;self,\n    other: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    bindings: &amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to unify the following equations:</p>\n<ul>\n<li><code>A + rhs = other</code> -&gt; <code>A = other - rhs</code></li>\n<li><code>A - rhs = other</code> -&gt; <code>A = other + rhs</code></li>\n<li><code>lhs + B = other</code> -&gt; <code>B = other - lhs</code></li>\n<li><code>lhs - B = other</code> -&gt; <code>B = lhs - other</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_unify_by_moving_single_constant_term\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#442-461\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_unify_by_moving_single_constant_term\" class=\"fn\">try_unify_by_moving_single_constant_term</a>(\n    &amp;self,\n    other: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    flags: <a class=\"enum\" href=\"noirc_frontend/hir_def/types/unification/enum.UnificationFlags.html\" title=\"enum noirc_frontend::hir_def::types::unification::UnificationFlags\">UnificationFlags</a>,\n    bindings: &amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to unify the following equations:</p>\n<ul>\n<li><code>(..a..) + 1 = (..b..)</code> -&gt; <code>(..a..) = (..b..) - 1</code></li>\n<li><code>(..a..) - 1 = (..b..)</code> -&gt; <code>(..a..) = (..b..) + 1</code></li>\n<li><code>(..a..) = (..b..) + 1</code> -&gt; <code>(..b..) = (..a..) - 1</code></li>\n<li><code>(..a..) = (..b..) - 1</code> -&gt; <code>(..b..) = (..a..) + 1</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_unify_by_moving_single_constant_term_in_self\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#466-494\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_unify_by_moving_single_constant_term_in_self\" class=\"fn\">try_unify_by_moving_single_constant_term_in_self</a>(\n    &amp;self,\n    other: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    bindings: &amp;mut <a class=\"type\" href=\"noirc_frontend/hir_def/types/type.TypeBindings.html\" title=\"type noirc_frontend::hir_def::types::TypeBindings\">TypeBindings</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/1.85.0/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"noirc_frontend/hir_def/types/struct.UnificationError.html\" title=\"struct noirc_frontend::hir_def::types::UnificationError\">UnificationError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Try to unify the following equations:</p>\n<ul>\n<li><code>(..a..) + 1 = (..b..)</code> -&gt; <code>(..a..) = (..b..) - 1</code></li>\n<li><code>(..a..) - 1 = (..b..)</code> -&gt; <code>(..a..) = (..b..) + 1</code></li>\n</ul>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.unify_with_coercions\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#501-541\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.unify_with_coercions\" class=\"fn\">unify_with_coercions</a>(\n    &amp;self,\n    expected: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    expression: <a class=\"struct\" href=\"noirc_frontend/node_interner/struct.ExprId.html\" title=\"struct noirc_frontend::node_interner::ExprId\">ExprId</a>,\n    location: <a class=\"struct\" href=\"noirc_errors/position/struct.Location.html\" title=\"struct noirc_errors::position::Location\">Location</a>,\n    interner: &amp;mut <a class=\"struct\" href=\"noirc_frontend/node_interner/struct.NodeInterner.html\" title=\"struct noirc_frontend::node_interner::NodeInterner\">NodeInterner</a>,\n    errors: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/1.85.0/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"enum\" href=\"noirc_frontend/hir/type_check/enum.TypeCheckError.html\" title=\"enum noirc_frontend::hir::type_check::TypeCheckError\">TypeCheckError</a>&gt;,\n    make_error: impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/ops/function/trait.FnOnce.html\" title=\"trait core::ops::function::FnOnce\">FnOnce</a>() -&gt; <a class=\"enum\" href=\"noirc_frontend/hir/type_check/enum.TypeCheckError.html\" title=\"enum noirc_frontend::hir::type_check::TypeCheckError\">TypeCheckError</a>,\n)</h4></section></summary><div class=\"docblock\"><p>Similar to <code>unify</code> but if the check fails this will attempt to coerce the\nargument to the target type. When this happens, the given expression is wrapped in\na new expression to convert its type. E.g. <code>array</code> -&gt; <code>array.as_slice()</code></p>\n<p>Currently the only type coercion in Noir is <code>[T; N]</code> into <code>[T]</code> via <code>.as_slice()</code>.</p>\n</div></details><section id=\"method.try_fn_to_unconstrained_fn_coercion\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#545-563\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_fn_to_unconstrained_fn_coercion\" class=\"fn\">try_fn_to_unconstrained_fn_coercion</a>(\n    &amp;self,\n    expected: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n) -&gt; <a class=\"enum\" href=\"noirc_frontend/hir_def/types/unification/enum.FunctionCoercionResult.html\" title=\"enum noirc_frontend::hir_def::types::unification::FunctionCoercionResult\">FunctionCoercionResult</a></h4></section><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_array_to_slice_coercion\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#567-591\">Source</a><h4 class=\"code-header\">fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_array_to_slice_coercion\" class=\"fn\">try_array_to_slice_coercion</a>(\n    &amp;self,\n    target: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>,\n    expression: <a class=\"struct\" href=\"noirc_frontend/node_interner/struct.ExprId.html\" title=\"struct noirc_frontend::node_interner::ExprId\">ExprId</a>,\n    interner: &amp;mut <a class=\"struct\" href=\"noirc_frontend/node_interner/struct.NodeInterner.html\" title=\"struct noirc_frontend::node_interner::NodeInterner\">NodeInterner</a>,\n) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Try to apply the array to slice coercion to this given type pair and expression.\nIf self can be converted to target this way, do so and return true to indicate success.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.try_reference_coercion\" class=\"method\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types/unification.rs.html#594-610\">Source</a><h4 class=\"code-header\">pub fn <a href=\"noirc_frontend/hir_def/types/enum.Type.html#tymethod.try_reference_coercion\" class=\"fn\">try_reference_coercion</a>(&amp;self, target: &amp;<a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a>) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/1.85.0/std/primitive.bool.html\">bool</a></h4></section></summary><div class=\"docblock\"><p>Attempt to coerce <code>&amp;mut T</code> to <code>&amp;T</code>, returning true if this is possible.</p>\n</div></details></div></details>",0,"noirc_frontend::monomorphization::HirType"],["<section id=\"impl-Eq-for-Type\" class=\"impl\"><a class=\"src rightside\" href=\"src/noirc_frontend/hir_def/types.rs.html#31\">Source</a><a href=\"#impl-Eq-for-Type\" class=\"anchor\">§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/1.85.0/core/cmp/trait.Eq.html\" title=\"trait core::cmp::Eq\">Eq</a> for <a class=\"enum\" href=\"noirc_frontend/hir_def/types/enum.Type.html\" title=\"enum noirc_frontend::hir_def::types::Type\">Type</a></h3></section>","Eq","noirc_frontend::monomorphization::HirType"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[104187]}