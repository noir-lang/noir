searchState.loadedDescShard("nargo_toml", 0, "Contains all the information about a package, as loaded …\nEnum representing the different types of ways to supply a …\nEncountered error while downloading git repository.\nPackage manifest is unreadable.\nErrors covering situations where a package is either …\nPackage doesn’t have a manifest file\nTracks the root_dir of a <code>Nargo.toml</code> and the contents …\nRepresents a <code>Nargo.toml</code> with package fields.\nRepresents a <code>Nargo.toml</code> with workspace fields.\nList of unstable features we want the compiler to enable …\nSpecifies the default crate to interact with in the …\nSearches for a <code>Nargo.toml</code> file in the current directory …\nReturns the PathBuf of the directory containing the …\nReturns the PathBuf of the <code>Nargo.toml</code> file by searching …\nReturns the PathBuf of the directory containing the …\nReturns the PathBuf of the directory containing the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the PathBuf of the <code>Nargo.toml</code> file in the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nList of members in this workspace.\nGet the root of path, for example:\nAttempts to read the file at the provided <code>toml_path</code> as a …\nResolves a Nargo.toml file into a <code>Package</code> struct as …\nResolves a Nargo.toml _ into a <code>Workspace</code> struct as defined …\nResolves a Nargo.toml file into a <code>Workspace</code> struct as …\nEncountered error while downloading git repository.\nPackage manifest is unreadable.\nErrors covering situations where a package is either …\nPackage doesn’t have a manifest file\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nXXX: I’d prefer to use a GitHub library however, there …\nTarget directory to download dependencies into, e.g. …\nPath to the <code>nargo</code> directory under <code>$HOME</code>.\nCreates a unique folder name for a GitHub repo by using …")