searchState.loadedDescShard("acir", 0, "C++ code generation for ACIR format, to be used by …\nThis trait is extremely unstable and WILL have breaking …\nThe Abstract Circuit Intermediate Representation (ACIR)\nReturns the closest number of bytes to the bits specified …\nConverts bytes into a FieldElement and applies a reduction …\nConverts bytes in little-endian order into a FieldElement …\nComputes the inverse or returns zero if the inverse does …\nMaximum number of bits needed to represent a field element …\nMaximum numbers of bytes needed to represent a field …\nLow-level native types used within the crate::circuit …\nThis is the number of bits required to represent this …\nSerialization formats we consider using for the bytecode …\nReturns the vale of this field as a hex string without the …\nConverts the field element to a vector of bytes in …\nReturns the value of this field as a hex string with …\nOpcodes are locatable so that callers can map opcodes to …\nPayload tied to an assertion failure. This data allows …\nIndex of Brillig opcode within a list of Brillig opcodes. …\nRepresentation of a single ACIR circuit. The execution …\nValue for differentiating error types. Used internally by …\nEnumeration of either an expression or a memory identifier.\nSpecifies the maximum width of the expressions which will …\nOpcodes are locatable so that callers can map opcodes to …\nA program represented by multiple ACIR circuit’s. The …\nMaps opcode locations to failed assertion payloads. The …\nBlack box functions are ACIR opcodes which rely on …\nThis module contains Brillig structures for integration …\nReturns all witnesses which are required to execute the …\ncurrent_witness_index is the highest witness index in the …\nDeserialize bytecode.\nDeserialize and base64 decode program\nSelector that maps a hash of either a constant string or …\nMaximum width of the expression’s which will be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the witness index of each public input\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nACIR opcodes\nThe circuit opcodes representing the relationship between …\nThe dynamic payload data.\nThe set of private inputs to the circuit.\nReturns all public inputs. This includes those provided as …\nThe set of public inputs provided by the prover.\nDecompress and deserialize bytes into a Program.\nThe set of public inputs calculated within the circuit.\nSerialize and base64 encode program\nSerialize and compress the Program into bytes.\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nRepresentation of available black box function names. This …\nAn iterator over the variants of Self\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nMore details can be found at …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThis is purely a wrapper struct around a list of Brillig …\nId for the function being called. Indexes into the table …\nInputs for the Brillig VM. These are the initial inputs …\nOutputs for the Brillig VM. Once the VM has completed …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCiphers (encrypts) the provided plaintext using AES128 in …\nPerforms the bitwise AND of <code>lhs</code> and <code>rhs</code>. <code>bit_size</code> must be …\nAn <code>AssertZero</code> opcode adds the constraint that <code>P(w) = 0</code>, …\nBigInt addition\nBigInt division\nBigInt from le bytes\nBigInt multiplication\nBigInt subtraction\nBigInt to le bytes\nThese opcodes represent a specialized computation. Even if …\nCalls to “gadgets” which rely on backends implementing …\nComputes the Blake2s hash of the inputs, as specified in …\nComputes the Blake3 hash of the inputs\nIdentifier for a block of memory\nType for a memory block\nCalls to unconstrained functions. Unconstrained functions …\nCalls to functions represented as a separate circuit. A …\nIndicate to the backend that this memory comes from a …\nA constant field element\nEnumeration for black box function inputs\nVerifies a ECDSA signature over the secp256k1 curve.\nVerifies a ECDSA signature over the secp256r1 curve.\nAddition over the embedded curve on which the witness is …\nInput to a black box call\nKeccak Permutation function of width 1600\nOperation on a block of memory We can either write or read …\nThe default type of memory block. Virtually all user …\nInitialize an ACIR array from a vector of witnesses.\nAtomic operation on a block of memory\nMultiple scalar multiplication (MSM) with a variable …\nDefines an operation within an ACIR circuit\nApplies the Poseidon2 permutation function to the given …\nRange constraint to ensure that a witness can be …\nComputes a recursive aggregation object when verifying a …\nSimilar to calldata except it states that this memory is …\nApplies the SHA-256 compression function to the input …\nA witness element, representing dynamic inputs\nPerforms the bitwise XOR of <code>lhs</code> and <code>rhs</code>. <code>bit_size</code> must be …\nBlack box functions are ACIR opcodes which rely on …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\narray index, it must be less than the array length\nThe actual input value\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA constant representing the bit size of the input value …\nA constant expression that can be 0 (read) or 1 (write)\nthe value we are reading, when operation is 0, or the …\nVector of 8 u32s used to compress the input\nInput state for the permutation of Poseidon2\n512 bits of the input message, represented by 16 u32s\nA key hash is used to check the validity of the …\nState length (in number of field elements) It is the …\nPermuted state\nOutput of the compression, represented by 8 u32s\nBackend-specific proof type constant. The proof field is …\nThese represent the public inputs of the proof we are …\nVerification key of the circuit being verified\nIdentifier of the array\nIdentifier of the array\nSpecify what type of memory we should initialize\nId for the function being called. It is the responsibility …\nId for the function being called. It is the responsibility …\nVector of witnesses specifying the initial value of the …\nInputs to the function call\nInputs to the function call\nDescribe the memory operation to perform\nOutputs to the function call\nOutputs of the function call\nPredicate of the memory operation - indicates if it should …\nPredicate of the Brillig execution - indicates if it …\nPredicate of the circuit execution - indicates if it …\nCiphers (encrypts) the provided plaintext using AES128 in …\nPerforms the bitwise AND of <code>lhs</code> and <code>rhs</code>. <code>bit_size</code> must be …\nBigInt addition\nBigInt division\nBigInt from le bytes\nBigInt multiplication\nBigInt subtraction\nBigInt to le bytes\nThese opcodes represent a specialized computation. Even if …\nComputes the Blake2s hash of the inputs, as specified in …\nComputes the Blake3 hash of the inputs\nA constant field element\nEnumeration for black box function inputs\nVerifies a ECDSA signature over the secp256k1 curve.\nVerifies a ECDSA signature over the secp256r1 curve.\nAddition over the embedded curve on which the witness is …\nInput to a black box call\nKeccak Permutation function of width 1600\nMultiple scalar multiplication (MSM) with a variable …\nApplies the Poseidon2 permutation function to the given …\nRange constraint to ensure that a witness can be …\nComputes a recursive aggregation object when verifying a …\nApplies the SHA-256 compression function to the input …\nA witness element, representing dynamic inputs\nPerforms the bitwise XOR of <code>lhs</code> and <code>rhs</code>. <code>bit_size</code> must be …\nThe actual input value\nA constant representing the bit size of the input value …\nVector of 8 u32s used to compress the input\nInput state for the permutation of Poseidon2\n512 bits of the input message, represented by 16 u32s\nA key hash is used to check the validity of the …\nState length (in number of field elements) It is the …\nPermuted state\nOutput of the compression, represented by 8 u32s\nBackend-specific proof type constant. The proof field is …\nThese represent the public inputs of the proof we are …\nVerification key of the circuit being verified\nId for the function being called. Indexes into the table …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIdentifier for a block of memory\nOperation on a block of memory We can either write or read …\narray index, it must be less than the array length\nA constant expression that can be 0 (read) or 1 (write)\nCreates a <code>MemOp</code> which reads from memory at <code>index</code> and …\nthe value we are reading, when operation is 0, or the …\nCreates a <code>MemOp</code> which writes the <code>Expression</code> <code>value</code> into …\nAn expression representing a quadratic polynomial.\nAn index that represents the position a witness value will …\nA map from the witnesses in a constraint system to the …\nAn ordered set of witness maps for separate circuits\nNative error for serializing/deserializing a witness stack.\nReturns the argument unchanged.\nCreates an Expression from a Witness.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the maximum witness at the provided position, and …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCollection of linear terms in the expression.\nCollection of multiplication terms.\nA constant term in the expression\nAn expression representing a quadratic polynomial.\nReturns <code>self + k*b</code>\nReturns <code>true</code> if the expression represents a constant …\nReturns <code>true</code> if the expression can be seen as a degree-1 …\nReturns <code>true</code> if highest degree term in the expression is …\nCollection of linear terms in the expression.\nCollection of multiplication terms.\nReturns the number of multiplication terms\nAdds a new linear term to the <code>Expression</code>.\nAdds a new quadratic term to the <code>Expression</code>.\nA constant term in the expression\nSorts opcode in a deterministic order XXX: We can probably …\nReturns a <code>FieldElement</code> if the expression represents a …\nReturns a <code>Witness</code> if the <code>Expression</code> can be represented as …\nDetermine the width of this expression. The width meaning …\nReturns <code>w*b.linear_combinations</code>\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn index that represents the position a witness value will …\nA map from the witnesses in a constraint system to the …\nDecompress and deserialize.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSerialize and compress.\nAn ordered set of witness maps for separate circuits\nNative error for serializing/deserializing a witness stack.\nDecompress and deserialize.\nReturns the argument unchanged.\nReturns the argument unchanged.\nIndex into a crate::circuit::Program function list for …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the size of the stack\nReturns the top element of the stack, or <code>None</code> if it is …\nRemoves the top element from the stack and return its\nAppend an element to the top of the stack\nSerialize and compress.\nA full witness for the respective constraint system …\nNested message and enum types in <code>BlackBoxFuncCall</code>.\nNested message and enum types in <code>BlockType</code>.\nNested message and enum types in <code>BrilligInputs</code>.\nNested message and enum types in <code>BrilligOutputs</code>.\nNested message and enum types in <code>ConstantOrWitnessEnum</code>.\nNested message and enum types in <code>ExpressionOrMemory</code>.\nNested message and enum types in <code>ExpressionWidth</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>Opcode</code>.\nNested message and enum types in <code>OpcodeLocation</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nNested message and enum types in <code>Expression</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nNested message and enum types in <code>WitnessMap</code>.\nNested message and enum types in <code>WitnessStack</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nString value of the enum field names used in the ProtoBuf …\nNested message and enum types in <code>BitSize</code>.\nNested message and enum types in <code>BlackBoxOp</code>.\nNested message and enum types in <code>BrilligOpcode</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts an <code>i32</code> to a <code>BinaryFieldOpKind</code>, or <code>None</code> if <code>value</code> …\nConverts an <code>i32</code> to a <code>BinaryIntOpKind</code>, or <code>None</code> if <code>value</code> is …\nConverts an <code>i32</code> to a <code>IntegerBitSize</code>, or <code>None</code> if <code>value</code> is …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nCreates an enum from field names used in the ProtoBuf …\nNested message and enum types in <code>HeapValueType</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>BinaryFieldOpKind</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>BinaryIntOpKind</code>.\nReturns <code>true</code> if <code>value</code> is a variant of <code>IntegerBitSize</code>.\nNested message and enum types in <code>MemoryAddress</code>.\nNested message and enum types in <code>ValueOrArray</code>.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the enum value of <code>bit_size</code>, or the default if the …\nReturns the enum value of <code>bit_size</code>, or the default if the …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the enum value of <code>op</code>, or the default if the field …\nReturns the enum value of <code>op</code>, or the default if the field …\nSets <code>bit_size</code> to the provided enum value.\nSets <code>bit_size</code> to the provided enum value.\nSets <code>op</code> to the provided enum value.\nSets <code>op</code> to the provided enum value.\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nEncodes the message to a buffer.\nReturns the encoded length of the message without a length …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nDecodes an instance of the message from a buffer, and …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA program represents an entire circuit with ACIR and …\nReturns the argument unchanged.\nACIR circuits\nCalls <code>U::from(self)</code>.\nBrillig functions\nBincode with format marker.\nBincode without format marker. This does not actually …\nA marker byte for the serialization format.\nMsgpack with named structs.\nMsgpack with tuple structs.\nDeserialize a value using <code>bincode</code>, based on <code>serde</code>.\nSerialize a value using <code>bincode</code>, based on <code>serde</code>.\nDeserialize any of the supported formats. Try go guess the …\nReturns the argument unchanged.\nLook for a <code>NOIR_SERIALIZATION_FORMAT</code> env var to turn on …\nCalls <code>U::from(self)</code>.\nDeserialize a value using MessagePack, based on <code>serde</code>.\nSerialize a value using MessagePack, based on <code>serde</code>.\nDeserialize a value using <code>protobuf</code>.\nSerialize a value using <code>protobuf</code>.")