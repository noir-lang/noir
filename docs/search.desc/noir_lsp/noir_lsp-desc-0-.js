searchState.loadedDescShard("noir_lsp", 0, "Error while Resolving Workspace.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrepares a package from a source string This is useful for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe module ID in scope. This might change as we traverse …\nFinds a visible reexport for any ancestor module of the …\nLSP client will send initialization request after the …\nRepresents a trait reexported from a given module with a …\nControls whether code lens is enabled by the server By …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe line where an auto_import must be inserted\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nThe module ID in scope. This might change as we traverse …\nHow many nested <code>mod</code> we are in deep\nText edits for the “Remove all unused imports” code …\nReturns a new <code>UseTree</code> with all the unused imports removed, …\nThe line where an auto_import must be inserted\nTry to suggest the name of a module to declare based on …\nCompletion items we find along the way.\nReturns the argument unchanged.\nThe function we are in, if any\nCalls <code>U::from(self)</code>.\nLocal variables in the current scope, mapped to their …\nThe module ID in scope. This might change as we traverse …\nReturns true if name matches a prefix written in code. …\nHow many nested <code>mod</code> we are in deep\nModuleDefIds we already suggested, so we don’t offer …\nType parameters in the current scope. These are collected …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIf a keyword corresponds to a built-in function, returns …\nNo requirement: any function is okay to suggest.\nWhen suggest a function as a result of completion, whether …\nIs there a requirement for suggesting functions?\nWhen requesting completions, whether to list all items or …\nOnly show functions that have the given self type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSort text for auto-import items. We want these to show up …\nWe want crates and modules to show up after other things …\nThis is the default sort text.\nSort text for “new” methods: we want these to show up …\nWe want to show operator methods last.\nWhen completing something like <code>Foo::</code>, we want to show …\nIf a name begins with underscore it’s likely something …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhenever a file changes we’ll add it to this set. Then, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAppends a pattern and returns true if this was not the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSets the body to include in the stub method. By default an …\nA code lens represents a command that should be shown …\nCode Lens options.\nRepresents a reference to a command. Provides a title …\nRepresents a diagnostic, such as a compiler error or …\nThe protocol currently supports the following diagnostic …\nReports an error.\nReports a hint.\nReports an information.\nNo value.\nNo value.\nNo value.\nNo value.\nPosition in a text document expressed as zero-based line …\nA range in a text document expressed as (zero-based) start …\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nSome value of type <code>T</code>.\nA parsed URL record.\nReports a warning.\nArguments that the command handler should be invoked with.\nReturn the serialization of this URL.\nReturn the authority of this URL as an ASCII string.\nReturn whether this URL is a cannot-be-a-base URL, meaning …\nThe capabilities the language server provides.\nThe capabilities provided by the client (editor or tool)\nCharacter offset on a line in a document (zero-based). The …\nInformation about the client.\nThe diagnostic’s code. Can be omitted.\nThe server provides code action support.\nAn optional property to describe the error code.\nThe server provides code lens.\nThe command this code lens represents.\nThe identifier of the actual command handler.\nThe server provides completion support.\nThe actual content changes.\nA data entry field that is preserved on a code lens item …\nA data entry field that is preserved between a …\nThe server provides go to declaration support.\nThe server provides goto definition support.\nSerialize with Serde using the internal representation of …\nAn array of diagnostic information items.\nThe server provides document formatting.\nThe server provides document symbol support.\nIf this URL has a host and it is a domain name (not an IP …\nThe range’s end position.\nTests can be requested from the server.\nReturn this URL’s fragment identifier, if any.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert a directory name as <code>std::path::Path</code> into an URL in …\nConvert a file name as <code>std::path::Path</code> into an URL in the …\nReturn whether the URL has an ‘authority’, which can …\nEquivalent to <code>url.host().is_some()</code>.\nReturn the parsed representation of the host for this URL. …\nReturn the string representation of the host (domain or IP …\nThe server provides hover support.\nUser provided initialization options.\nThe server provides inlay hints support.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturn the serialization of this URL.\nReturn whether the URL is special (has a special scheme)\nParse a string as an URL, with this URL as the base URL.\nFully-qualified path to the test within the crate\nLine position in a document (zero-based).\nThe locale the client is currently showing the user …\nCreates a relative URL if possible, with this URL as the …\nThe diagnostic’s message.\nThe name of the server as defined by the server.\nThe server handles and provides custom nargo messages.\nReturn a default <code>ParseOptions</code> that can fully configure the …\nReturn the origin of this URL (…\nParse an absolute URL from a string.\nParse an absolute URL from a string and add params to its …\nReturn the password for this URL, if any, as a …\nReturn the path for this URL, as a percent-encoded ASCII …\nUnless this URL is cannot-be-a-base, return an iterator of …\nReturn an object with methods to manipulate this URL’s …\nReturn the port number for this URL, if any.\nReturn the port number for this URL, or the default port …\nThe process Id of the parent process that started the …\nReturn this URL’s query string, if any, as a …\nParse the URL’s query string, if any, as …\nManipulate this URL’s query string, viewed as a sequence …\nThe range in which this code lens is valid. Should only …\nThe range at which the message applies.\nThe server provides references support.\nAn array of related diagnostic information, e.g. when …\nThe server provides rename support.\nCode lens has a resolve provider as well.\nThe rootPath of the workspace. Is null if no folder is …\nThe rootUri of the workspace. Is null if no folder is …\nTests runs can be requested from the server.\nReturn the scheme of this URL, lower-cased, as an ASCII …\nSerialize with Serde using the internal representation of …\nInformation about the server.\nChange this URL’s fragment identifier.\nChange this URL’s host.\nChange this URL’s host to the given IP address.\nChange this URL’s password.\nChange this URL’s path.\nChange this URL’s port number.\nChange this URL’s query string. If <code>query</code> is <code>None</code>, this …\nChange this URL’s scheme.\nChange this URL’s username.\nThe actual changed settings\nThe diagnostic’s severity. Can be omitted. If omitted it …\nThe server provides signature help support.\nResolve a URL’s host and port number to <code>SocketAddr</code>.\nA human-readable string describing the source of this …\nThe range’s start position.\nAdditional metadata about the diagnostic.\nThe server will provide various features related to …\nOptional the content when saved. Depends on the …\nThe document to request code lens for.\nThe document that was opened.\nThe document that did change. The version number points to …\nThe document that was closed.\nThe document that was saved.\nDefines how text documents are synced.\nTitle of the command, like <code>save</code>.\nAssuming the URL is in the <code>file</code> scheme or similar, convert …\nThe initial trace setting. If omitted trace is disabled (…\nThe server provides goto type definition support.\nThe server will send notifications to update tests.\nThe URI for which diagnostic information is reported.\nReturn the username for this URL (typically the empty …\nThe servers’s version as defined by the server.\nOptional the version number of the document the …\nThe LSP server may report about initialization progress to …\nThe workspace folders configured in the client when the …\nThe server provides workspace symbol support.\nA notification sent from the client to the server to …\nThe document change notification is sent from the client …\nThe document close notification is sent from the client to …\nThe document open notification is sent from the client to …\nThe document save notification is sent from the client to …\nA notification to ask the server to exit its process. The …\nThe initialized notification is sent from the client to …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe code lens request is sent from the client to the …\nThe document formatting request is sent from the server to …\nThe goto definition request is sent from the client to the …\nThe goto type definition request is sent from the client …\nThe shutdown request is sent from the client to the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nThe segment happens before a list:\nThe segment happens before another simple (ident) segment:\nThe segment is the last one in the <code>use</code> statement (or …\nThe segment either doesn’t exist in the source code or …\nThe position of a segment in a <code>use</code> statement. We use this …\nRemembers where each segment in a <code>use</code> statement is located.\nThe line where an auto_import must be inserted\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nThe full path of the use statement to insert\nGiven a full path like <code>foo::bar::baz</code>, returns the first …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAll of the current source lines\nHow many nested <code>mod</code> we are in deep\nReturns the text edits needed to add an auto-import for a …\nReturns a copy of the given ParsedModule with all FileIds …")