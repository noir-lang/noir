searchState.loadedDescShard("brillig", 0, "The Brillig bytecode is distinct from regular ACIR in that …\nEncrypts a message using AES128.\n(&amp;) Bitwise AND\nBinary fixed-length field expressions\nTakes the fields in addresses <code>lhs</code> and <code>rhs</code> Performs the …\nBinary fixed-length integer expressions\nTakes the <code>bit_size</code> size integers in addresses <code>lhs</code> and <code>rhs</code> …\nNative functions in the VM. These are equivalent to the …\nThese opcodes provide an equivalent of ACIR blackbox …\nCalculates the Blake2s hash of the inputs.\nCalculates the Blake3 hash of the inputs.\nWe don’t support dynamic jumps or calls See …\nCopies calldata after the offset to the specified address …\ndestination = condition &gt; 0 ? source_a : source_b\nStores a constant <code>value</code> with a <code>bit_size</code> in the <code>destination</code> …\nSpecifies an exact index in the VM’s memory\nField division\nVerifies a ECDSA signature over the secp256k1 curve.\nVerifies a ECDSA signature over the secp256r1 curve.\nPerforms addition over the embedded curve.\n(==) equal\n(==) equal\nUsed to get data from an outside source. Also referred to …\nSingle input or output of a foreign call.\nRepresents the full output of a foreign call.\nA fixed-sized array starting from a Brillig memory …\nAn array passed to or from an external call In the case of …\nDescribes the memory layout for an array/vector element\nA memory-sized vector passed starting from a Brillig …\nA vector passed to or from an external call In the case of …\nReads the address from <code>destination_pointer</code>, then stores a …\nUnsigned integer division\nSets the program counter to the value of <code>location</code>.\nSets the program counter to the value of <code>location</code> If the …\nKeccak Permutation function of 1600 width\n(&lt;) Field less than\n(&lt;) Field less than\n(&lt;=) field less or equal\n(&lt;=) field less or equal\nReads the <code>source_pointer</code> to obtain a memory address, then …\nRepresents an address in the VM’s memory. Supports both …\nA single value passed to or from an external call It is an …\nMoves the content in the <code>source</code> address to the <code>destination</code> …\nPerforms multi scalar multiplication over the embedded …\n(|) Bitwise OR\nApplies the Poseidon2 permutation function to the given …\nSpecifies an index relative to the stack pointer.\nPops the top element from the call stack, which represents …\nApplies the SHA-256 compression function to the input …\n(&lt;&lt;) Shift left\n(&gt;&gt;) Shift right\nHalts execution and returns data specified by a …\nReads the <code>destination_pointer</code> to obtain a memory address, …\nReturns a decomposition in <code>num_limbs</code> limbs of the given …\nUsed to denote execution failure, halting the VM and …\nLays out various ways an external foreign call’s input …\n(^) Bitwise XOR\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nResolved output values of the foreign call.\nDestination value types\nDestination addresses (may be single values or memory …\nInterpreted by caller context, ie this will have different …\nInput value types (for heap allocated structures indicates …\nInput addresses (may be single values or memory pointers).\nEncrypts a message using AES128.\nThese opcodes provide an equivalent of ACIR blackbox …\nCalculates the Blake2s hash of the inputs.\nCalculates the Blake3 hash of the inputs.\nVerifies a ECDSA signature over the secp256k1 curve.\nVerifies a ECDSA signature over the secp256r1 curve.\nPerforms addition over the embedded curve.\nKeccak Permutation function of 1600 width\nPerforms multi scalar multiplication over the embedded …\nApplies the Poseidon2 permutation function to the given …\nApplies the SHA-256 compression function to the input …\nReturns a decomposition in <code>num_limbs</code> limbs of the given …\nSingle input or output of a foreign call.\nRepresents the full output of a foreign call.\nConvert the fields in the parameter into a vector, used to …\nResolved output values of the foreign call.\n(&amp;) Bitwise AND\nBinary fixed-length field expressions\nTakes the fields in addresses <code>lhs</code> and <code>rhs</code> Performs the …\nBinary fixed-length integer expressions\nTakes the <code>bit_size</code> size integers in addresses <code>lhs</code> and <code>rhs</code> …\nNative functions in the VM. These are equivalent to the …\nWe don’t support dynamic jumps or calls See …\nCopies calldata after the offset to the specified address …\ndestination = condition &gt; 0 ? source_a : source_b\nStores a constant <code>value</code> with a <code>bit_size</code> in the <code>destination</code> …\nSpecifies an exact index in the VM’s memory\nField division\n(==) equal\n(==) equal\nUsed to get data from an outside source. Also referred to …\nA fixed-sized array starting from a Brillig memory …\nAn array passed to or from an external call In the case of …\nDescribes the memory layout for an array/vector element\nA memory-sized vector passed starting from a Brillig …\nA vector passed to or from an external call In the case of …\nReads the address from <code>destination_pointer</code>, then stores a …\nUnsigned integer division\nSets the program counter to the value of <code>location</code>.\nSets the program counter to the value of <code>location</code> If the …\n(&lt;) Field less than\n(&lt;) Field less than\n(&lt;=) field less or equal\n(&lt;=) field less or equal\nReads the <code>source_pointer</code> to obtain a memory address, then …\nRepresents an address in the VM’s memory. Supports both …\nA single value passed to or from an external call It is an …\nMoves the content in the <code>source</code> address to the <code>destination</code> …\n(|) Bitwise OR\nSpecifies an index relative to the stack pointer.\nPops the top element from the call stack, which represents …\n(&lt;&lt;) Shift left\n(&gt;&gt;) Shift right\nHalts execution and returns data specified by a …\nReads the <code>destination_pointer</code> to obtain a memory address, …\nUsed to denote execution failure, halting the VM and …\nLays out various ways an external foreign call’s input …\n(^) Bitwise XOR\nReturns the total number of field elements required to …\nDestination value types\nDestination addresses (may be single values or memory …\nInterpreted by caller context, ie this will have different …\nInput value types (for heap allocated structures indicates …\nInput addresses (may be single values or memory pointers).")