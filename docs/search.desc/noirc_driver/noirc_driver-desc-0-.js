searchState.loadedDescShard("noirc_driver", 0, "Helper type for connecting a compilation artifact to the …\nA ‘contract’ in Noir source code with a given name, …\nEach function in the contract will be compiled as a …\nSpecifies a contract function and extra metadata that one …\nDefault expression width used for Noir compilation. The …\nFor a given file, we store the source code and the path to …\nContains the error value\nHelper type used to signify where errors or warnings are …\nVersion string that gets placed in artifacts that Noir …\nContains the success value\nThe special case of running the compiler against the …\nHelper type used to signify where only warnings are …\nAdds the source code of the debug crate needed to support …\nAdds a edge in the crate graph for two crates\nAdds the source code for the stdlib into the file manager\nPretty print benchmark times of each code generation pass\nGenerate ACIR with the target backend expression width. …\nNames of the unconstrained functions in the program.\nNames of the unconstrained functions in the program.\nRun the lexing, parsing, name resolution, and type …\nRun the frontend to check the crate for errors then …\nCompile all of the functions associated with a Noir …\nRun the frontend to check the crate for errors then …\nCompile the current crate using <code>main_function</code> as the …\nCount the number of arrays that are copied in an …\nSkip reading files/folders from the root directory and …\nEnable printing results of comptime evaluation: provide a …\nTreat all warnings as errors\nUsed internally to avoid comptime println from producing …\nEmit the unoptimized SSA IR to file. The IR will be dumped …\nFlag to turn on the lookback feature of the Brillig call …\nFlag to turn on extra Brillig bytecode to be generated to …\nSpecify the backend expression width that should be …\nHelper method to return a file manager instance with the …\nForce Brillig output (for step debugging)\nForce a full recompilation.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nEach of the contract’s functions are compiled into a …\nArranges a function signature and a generated circuit’s …\nTrue if there are (non-warning) errors present and we …\nHash of the <code>Program</code> from which this <code>CompiledProgram</code> was …\nSetting to decide on an inlining strategy for Brillig …\nInsert debug symbols to inspect variables\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIndicates whether the function is an entry point\nSetting the maximum acceptable increase in Brillig …\nOnly perform the minimum number of SSA passes.\nTo keep <code>name</code> semi-unique, it is prefixed with the names of …\nThe name of the contract.\nNames of the functions in the program. These are used for …\nNames of the functions in the program. These are used for …\nDo not emit source file locations when emitting debug …\nUse pedantic ACVM solving, i.e. double-check some …\nAdds the file from the file system at <code>Path</code> to the crate …\nDisplay the ACIR for compiled circuit\nReturn a Vec of all <code>contract</code> declarations in the source …\nOutputs the paths to any modified artifacts\nOnly show the SSA and ACIR for the contract function with …\nOutputs the monomorphized IR to stdout for debugging\nEmit debug information for the intermediate SSA IR to …\nOnly show SSA passes whose name contains the provided …\nSuppress warnings\nFlag to turn off the compiler check for missing Brillig …\nSkip SSA passes whose name contains the provided string(s).\nFlag to turn off the compiler check for under constrained …\nUnstable features to enable for this current build\nArranges a function signature and a generated circuit’s …\nAttempts to retrieve the name of this parameter. Returns …\nEach function in the contract will be compiled as a …\nNames of the unconstrained functions in the program.\nEach of the contract’s functions are compiled into a …\nThe name of the contract.\nNames of the functions in the program. These are used for …\nFor a given file, we store the source code and the path to …\nNames of the unconstrained functions in the program.\nHash of the <code>Program</code> from which this <code>CompiledProgram</code> was …\nNames of the functions in the program. These are used for …\nReturns the argument unchanged.\nGet an embedded file and its metadata.\nCalls <code>U::from(self)</code>.\nIterates over the file paths in the folder.")