searchState.loadedDescShard("noir_ssa", 0, "Parse and (optionally) validate the SSA. Prints the …\nList the SSA passes we can apply.\nCommon SSA command parameters.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTurn off validation of the source SSA.\nParse the SSA.\nRead the SSA from a file or stdin.\nPath to the source SSA.\nList of the SSA passes in the primary pipeline, enriched …\nWrite the output to a file or stdout.\nParse the input SSA and it arguments, run the SSA …\nDerive an ABI description from the SSA parameters.\nCreate an ABI type from multiple SSA types, for example …\nCreate an ABI type from a single SSA type.\nReturns the argument unchanged.\nVerbatim inputs in JSON format.\nPath to the input arguments to the SSA interpreter.\nVerbatim inputs in TOML format.\nCalls <code>U::from(self)</code>.\nTurn on tracing in the SSA interpreter.\nParse the input SSA, run some SSA passes on it, then write …\nRender the SSA to a string.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nPath to write the output SSA to.\nRun an SSA pass, and optionally print to <code>stderr</code>, distinct …\nName of the SSA pass(es) to apply.\nParse the SSA and render the CFG for visualization with …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSurround the output with brackets for direct embedding in …\nPath to write the output to.\nRender the SSA as a Mermaid flowchart.\nEncode the Mermaid markup as it is expected by the Mermaid …\nEncode the data to be included in a URL as expected by …")