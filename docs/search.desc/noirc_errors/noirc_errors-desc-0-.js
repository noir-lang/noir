searchState.loadedDescShard("noirc_errors", 0, "Returns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nUnlike Span::empty, Span::initial always starts at index 0\nReturns <code>true</code> if any point of <code>self</code> intersects a point of …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPrint the input to stderr, and exit gracefully if <code>SIGPIPE</code> …\nMacro to print formatted output to stderr\nPrint the input to stdout, and exit gracefully if <code>SIGPIPE</code> …\nMacro to print formatted output to stdout\nMacro to print formatted output to stderr\nMacro to print formatted output to stdout\nAdds a location to the call stack, maintaining the …\nGenerates a new helper, with an empty location tree\nReturns a new CallStackId which extends the <code>call_stack</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConstruct a CallStack from a CallStackId\nConstruct a CallStack from a CallStackId\nGet (or create) a CallStackId corresponding to the given …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieve the CallStackId corresponding to call_stack with …\nMap opcode index of an ACIR circuit into the source code …\nThis a map per brillig function representing the range of …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUpdates the locations map when the <code>Circuit</code> is modified.\nA count of errors that have been already reported to stderr\nAn optional call stack to display the full runtime call …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReport the given diagnostic, and return true if it was an …\nPrint the report; return true if it was an error.\nWrites the given diagnostics to stderr and returns the …")