#[cfg(test)]
mod tests {
    // Some of these imports are consumed by the injected tests
    use assert_cmd::cargo::cargo_bin;

    use rexpect::spawn_bash;

    test_binary::build_test_binary_once!(mock_backend, "../backend_interface/test-binaries");

    // include tests generated by `build.rs`
    include!(concat!(env!("OUT_DIR"), "/debug.rs"));

    pub fn debugger_execution_success(test_program_dir: &str) {
        let nargo_bin =
            cargo_bin("nargo").into_os_string().into_string().expect("Cannot parse nargo path");

        let mock_backend_path =
            path_to_mock_backend().into_string().expect("Cannot parse mock_backend path");

        let mut dbg_session = spawn_bash(Some(10000)).expect("Could not start bash session");

        dbg_session
            .send_line(&format!("export NARGO_BACKEND_PATH={}", mock_backend_path))
            .expect("Could not export NARGO_BACKEND_PATH.");
        dbg_session.wait_for_prompt().expect("Could not export NARGO_BACKEND_PATH.");

        // Start debugger and test that it loads for the given program.
        dbg_session
            .execute(
                &format!("{} debug --program-dir {} --force-brillig", nargo_bin, test_program_dir),
                ".*\\Starting debugger.*",
            )
            .expect("Could not start debugger");

        // While running the debugger, issue a "continue" cmd,
        // which should run to the program to end given
        // we haven't set any breakpoints.
        // ">" is the debugger's prompt, so finding one
        // after running "continue" indicates that the
        // debugger has not panicked until the end of the program.
        dbg_session
            .send_line("c")
            .expect("Debugger panicked while attempting to step through program.");
        dbg_session
            .exp_string(">")
            .expect("Failed while waiting for debugger to step through program.");

        // Run the "quit" command, then check that the debugger confirms
        // having successfully solved the circuit witness.
        dbg_session.send_line("quit").expect("Failed to quit debugger");
        dbg_session
            .exp_regex(".*Circuit witness successfully solved.*")
            .expect("Expected circuit witness to be successfully solved.");
    }
}
