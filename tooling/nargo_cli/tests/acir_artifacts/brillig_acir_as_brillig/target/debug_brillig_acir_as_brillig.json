{"debug_symbols":[{"locations":{"1":[{"span":{"start":29,"end":43},"file":1}],"2":[{"span":{"start":29,"end":48},"file":1}],"3":[{"span":{"start":75,"end":80},"file":1}],"4":[{"span":{"start":75,"end":80},"file":1}],"5":[{"span":{"start":75,"end":80},"file":1}],"6":[{"span":{"start":75,"end":80},"file":1}],"7":[{"span":{"start":55,"end":81},"file":1}],"8":[{"span":{"start":94,"end":113},"file":1}],"9":[{"span":{"start":94,"end":118},"file":1}],"1.6":[{"span":{"start":221,"end":226},"file":1}],"1.7":[{"span":{"start":221,"end":226},"file":1}],"1.8":[{"span":{"start":221,"end":226},"file":1}],"1.9":[{"span":{"start":215,"end":227},"file":1},{"span":{"start":155,"end":160},"file":1}],"1.10":[{"span":{"start":215,"end":227},"file":1},{"span":{"start":155,"end":160},"file":1}],"8.6":[{"span":{"start":753,"end":758},"file":1}],"8.7":[{"span":{"start":753,"end":758},"file":1}],"8.8":[{"span":{"start":753,"end":758},"file":1}],"8.9":[{"span":{"start":745,"end":759},"file":1},{"span":{"start":679,"end":684},"file":1}],"8.10":[{"span":{"start":745,"end":759},"file":1},{"span":{"start":679,"end":684},"file":1}],"8.11":[{"span":{"start":745,"end":759},"file":1},{"span":{"start":671,"end":685},"file":1},{"span":{"start":628,"end":633},"file":1}],"8.12":[{"span":{"start":745,"end":759},"file":1},{"span":{"start":671,"end":685},"file":1},{"span":{"start":628,"end":633},"file":1}],"8.13":[{"span":{"start":745,"end":759},"file":1},{"span":{"start":671,"end":685},"file":1},{"span":{"start":620,"end":634},"file":1},{"span":{"start":578,"end":583},"file":1}],"8.14":[{"span":{"start":745,"end":759},"file":1},{"span":{"start":671,"end":685},"file":1},{"span":{"start":620,"end":634},"file":1},{"span":{"start":578,"end":583},"file":1}]}}],"file_map":{"1":{"source":"fn main(x: u32) {\n    assert(entry_point(x) == 2);\n    swap_entry_point(x, x + 1);\n    assert(deep_entry_point(x) == 4);\n}\n\nfn inner(x : u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn entry_point(x : u32) -> u32 {\n    inner(x + 1)\n}\n\nfn swap(x: u32, y:u32) -> (u32, u32) {\n    (y, x)\n}\n\nunconstrained fn swap_entry_point(x: u32, y: u32) {\n    let swapped = swap(x, y);\n    assert(swapped.0 == y);\n    assert(swapped.1 == x);\n    let swapped_twice = swap(swapped.0, swapped.1);\n    assert(swapped_twice.0 == x);\n    assert(swapped_twice.1 == y);\n}\n\nfn level_3(x : u32) -> u32 {\n    x + 1\n}\n\nfn level_2(x : u32) -> u32 {\n    level_3(x + 1)\n}\n\nfn level_1(x : u32) -> u32 {\n    level_2(x + 1)\n}\n\nunconstrained fn deep_entry_point(x : u32) -> u32 {\n    level_1(x + 1)\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/brillig_acir_as_brillig/src/main.nr"}}}