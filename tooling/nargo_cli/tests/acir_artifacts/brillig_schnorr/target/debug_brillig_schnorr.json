{"debug_symbols":[{"locations":{"0.9":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.10":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.11":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.12":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.13":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.14":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.15":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.16":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.17":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.18":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.19":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.20":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.21":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.22":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.23":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.24":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.25":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.26":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.27":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.28":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.29":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.30":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.31":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.32":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.33":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.34":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.35":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.36":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.37":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.38":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.39":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.40":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.41":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.42":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.43":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.44":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.45":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.46":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.47":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.48":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.49":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.50":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.51":[{"span":{"start":424,"end":453},"file":1},{"span":{"start":664,"end":696},"file":19},{"span":{"start":1080,"end":1117},"file":19}],"0.55":[{"span":{"start":471,"end":473},"file":1}],"0.56":[{"span":{"start":471,"end":473},"file":1}],"0.59":[{"span":{"start":726,"end":808},"file":1}],"0.60":[{"span":{"start":726,"end":808},"file":1}],"0.61":[{"span":{"start":821,"end":836},"file":1}],"0.62":[{"span":{"start":821,"end":836},"file":1}],"0.63":[{"span":{"start":821,"end":836},"file":1}],"0.64":[{"span":{"start":821,"end":836},"file":1}],"0.65":[{"span":{"start":925,"end":995},"file":1}],"0.66":[{"span":{"start":925,"end":995},"file":1}],"0.67":[{"span":{"start":925,"end":995},"file":1}],"0.68":[{"span":{"start":1008,"end":1023},"file":1}],"0.69":[{"span":{"start":1008,"end":1023},"file":1}],"0.70":[{"span":{"start":1008,"end":1023},"file":1}],"0.72":[{"span":{"start":491,"end":501},"file":1}],"0.73":[{"span":{"start":491,"end":501},"file":1}],"0.74":[{"span":{"start":505,"end":527},"file":1}],"0.75":[{"span":{"start":505,"end":527},"file":1}],"0.76":[{"span":{"start":505,"end":527},"file":1}],"0.77":[{"span":{"start":505,"end":527},"file":1}],"0.78":[{"span":{"start":505,"end":527},"file":1}],"0.79":[{"span":{"start":505,"end":527},"file":1}],"0.80":[{"span":{"start":505,"end":527},"file":1}],"0.81":[{"span":{"start":491,"end":527},"file":1}],"0.82":[{"span":{"start":491,"end":527},"file":1}],"0.83":[{"span":{"start":491,"end":527},"file":1}],"0.84":[{"span":{"start":491,"end":527},"file":1}],"0.85":[{"span":{"start":491,"end":527},"file":1}]}}],"file_map":{"1":{"source":"use dep::std;\n\n// Note: If main has any unsized types, then the verifier will never be able\n// to figure out the circuit instance\nunconstrained fn main(message: [u8; 10], message_field: Field, pub_key_x: Field, pub_key_y: Field, signature: [u8; 64]) {\n    // Regression for issue #2421\n    // We want to make sure that we can accurately verify a signature whose message is a slice vs. an array\n    let message_field_bytes = message_field.to_be_bytes(10);\n    for i in 0..10 {\n        assert(message[i] == message_field_bytes[i]);\n    }\n    // Is there ever a situation where someone would want \n    // to ensure that a signature was invalid?\n    // Check that passing a slice as the message is valid\n    let valid_signature = std::schnorr::verify_signature(pub_key_x,pub_key_y,signature, message_field_bytes);\n    assert(valid_signature);\n\n    // Check that passing an array as the message is valid\n    let valid_signature = std::schnorr::verify_signature(pub_key_x,pub_key_y,signature, message);\n    assert(valid_signature);\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/brillig_schnorr/src/main.nr"},"19":{"source":"\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n","path":"std/field.nr"}}}