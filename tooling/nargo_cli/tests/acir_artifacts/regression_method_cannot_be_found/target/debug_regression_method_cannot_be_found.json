{"debug_symbols":[{"locations":{"0":[{"span":{"start":325,"end":332},"file":1},{"span":{"start":111,"end":127},"file":1}],"0.5":[{"span":{"start":566,"end":587},"file":0}],"0.6":[{"span":{"start":566,"end":587},"file":0}],"0.7":[{"span":{"start":566,"end":587},"file":0}],"0.8":[{"span":{"start":566,"end":587},"file":0}],"0.9":[{"span":{"start":566,"end":587},"file":0}],"0.10":[{"span":{"start":566,"end":587},"file":0}],"0.11":[{"span":{"start":566,"end":587},"file":0}],"0.12":[{"span":{"start":566,"end":587},"file":0}],"0.13":[{"span":{"start":566,"end":587},"file":0}],"0.14":[{"span":{"start":566,"end":587},"file":0}],"0.15":[{"span":{"start":566,"end":587},"file":0}],"0.16":[{"span":{"start":566,"end":587},"file":0}],"0.17":[{"span":{"start":566,"end":587},"file":0}],"0.18":[{"span":{"start":566,"end":587},"file":0}],"0.19":[{"span":{"start":566,"end":587},"file":0}],"0.20":[{"span":{"start":566,"end":587},"file":0}],"0.21":[{"span":{"start":566,"end":587},"file":0}],"0.22":[{"span":{"start":566,"end":587},"file":0}],"0.23":[{"span":{"start":566,"end":587},"file":0}],"0.24":[{"span":{"start":566,"end":587},"file":0}],"0.25":[{"span":{"start":566,"end":587},"file":0}],"0.26":[{"span":{"start":566,"end":587},"file":0}],"0.27":[{"span":{"start":566,"end":587},"file":0}],"0.28":[{"span":{"start":566,"end":587},"file":0}],"0.29":[{"span":{"start":566,"end":587},"file":0}],"0.30":[{"span":{"start":566,"end":587},"file":0}],"0.31":[{"span":{"start":566,"end":587},"file":0}],"0.32":[{"span":{"start":566,"end":587},"file":0}],"0.33":[{"span":{"start":566,"end":587},"file":0}],"0.34":[{"span":{"start":566,"end":587},"file":0}],"0.35":[{"span":{"start":566,"end":587},"file":0}],"0.36":[{"span":{"start":566,"end":587},"file":0}],"0.37":[{"span":{"start":566,"end":587},"file":0}],"0.38":[{"span":{"start":566,"end":587},"file":0}],"0.39":[{"span":{"start":566,"end":587},"file":0}],"0.40":[{"span":{"start":566,"end":587},"file":0}],"0.41":[{"span":{"start":566,"end":587},"file":0}],"0.42":[{"span":{"start":566,"end":587},"file":0}],"0.43":[{"span":{"start":566,"end":587},"file":0}],"0.44":[{"span":{"start":566,"end":587},"file":0}],"0.45":[{"span":{"start":566,"end":587},"file":0}],"0.46":[{"span":{"start":566,"end":587},"file":0}],"0.47":[{"span":{"start":566,"end":587},"file":0}],"0.48":[{"span":{"start":566,"end":587},"file":0}],"0.49":[{"span":{"start":566,"end":587},"file":0}],"0.50":[{"span":{"start":566,"end":587},"file":0}],"0.51":[{"span":{"start":566,"end":587},"file":0}],"0.52":[{"span":{"start":566,"end":587},"file":0}],"0.53":[{"span":{"start":566,"end":587},"file":0}],"0.54":[{"span":{"start":566,"end":587},"file":0}],"0.55":[{"span":{"start":566,"end":587},"file":0}],"0.56":[{"span":{"start":566,"end":587},"file":0}],"0.57":[{"span":{"start":566,"end":587},"file":0}],"0.58":[{"span":{"start":566,"end":587},"file":0}],"0.59":[{"span":{"start":566,"end":587},"file":0}],"0.60":[{"span":{"start":566,"end":587},"file":0}],"0.61":[{"span":{"start":566,"end":587},"file":0}],"0.62":[{"span":{"start":566,"end":587},"file":0}],"0.63":[{"span":{"start":566,"end":587},"file":0}],"0.64":[{"span":{"start":566,"end":587},"file":0}],"0.65":[{"span":{"start":566,"end":587},"file":0}],"0.66":[{"span":{"start":566,"end":587},"file":0}],"0.67":[{"span":{"start":566,"end":587},"file":0}],"0.68":[{"span":{"start":566,"end":587},"file":0}],"0.69":[{"span":{"start":566,"end":587},"file":0}],"0.70":[{"span":{"start":566,"end":587},"file":0}],"0.71":[{"span":{"start":566,"end":587},"file":0}],"0.72":[{"span":{"start":566,"end":587},"file":0}],"0.73":[{"span":{"start":566,"end":587},"file":0}],"0.74":[{"span":{"start":566,"end":587},"file":0}],"0.75":[{"span":{"start":566,"end":587},"file":0}],"0.76":[{"span":{"start":566,"end":587},"file":0}],"0.77":[{"span":{"start":566,"end":587},"file":0}],"0.78":[{"span":{"start":566,"end":587},"file":0}],"0.79":[{"span":{"start":566,"end":587},"file":0}],"0.80":[{"span":{"start":566,"end":587},"file":0}],"0.81":[{"span":{"start":566,"end":587},"file":0}],"0.82":[{"span":{"start":566,"end":587},"file":0}],"0.83":[{"span":{"start":566,"end":587},"file":0}],"0.84":[{"span":{"start":566,"end":587},"file":0}],"0.85":[{"span":{"start":566,"end":587},"file":0}]}}],"file_map":{"0":{"source":"mod hash;\nmod array;\nmod slice;\nmod merkle;\nmod schnorr;\nmod ecdsa_secp256k1;\nmod ecdsa_secp256r1;\nmod eddsa;\nmod grumpkin_scalar;\nmod grumpkin_scalar_mul;\nmod scalar_mul;\nmod sha256;\nmod sha512;\nmod field;\nmod ec;\nmod unsafe;\nmod collections;\nmod compat;\nmod option;\nmod string;\nmod test;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident \n#[oracle(println)]\nunconstrained fn println_oracle<T>(_input: T) {}\n\nunconstrained pub fn println<T>(input: T) {\n    println_oracle(input);\n}\n\n#[foreign(recursive_aggregation)]\npub fn verify_proof<N>(_verification_key : [Field], _proof : [Field], _public_inputs : [Field], _key_hash : Field, _input_aggregation_object : [Field; N]) -> [Field; N] {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(_x: T) {}\n\n// from_field and as_field are private since they are not valid for every type.\n// `as` should be the default for users to cast between primitive types, and in the future\n// traits can be used to work with generic types.\n#[builtin(from_field)]\nfn from_field<T>(_x : Field) -> T {}\n\n#[builtin(as_field)]\nfn as_field<T>(_x : T) -> Field {}\n\n\npub fn wrapping_add<T>(x : T, y: T) -> T {\n    crate::from_field(crate::as_field(x) + crate::as_field(y))\n}\n\npub fn wrapping_sub<T>(x : T, y: T) -> T {\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    crate::from_field(crate::as_field(x) + 340282366920938463463374607431768211456 - crate::as_field(y))\n}\n\npub fn wrapping_mul<T>(x : T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * crate::as_field(y))\n}\n\npub fn wrapping_shift_left<T>(x : T, y: T) -> T {\n    crate::from_field(crate::as_field(x) * 2.pow_32(crate::as_field(y)))\n}\n","path":"std/lib.nr"},"1":{"source":"use dep::std;\nstruct Item {\n    id: Field,\n}\n\nimpl Item {\n    fn log(self) {\n        let id = self.id;\n        std::println(id);\n    }\n}\n\nfn create<V>(something: V) -> V {\n    something\n}\n\nfn main() {\n    let a = Item { id: 1 };\n    let b = create(a);\n    let _id = b.id; \n    // Regression for:  cannot find this method\n    b.log();\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/regression_method_cannot_be_found/src/main.nr"}}}