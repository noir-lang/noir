{"debug_symbols":[{"locations":{"198":[{"span":{"start":218,"end":244},"file":1}],"199":[{"span":{"start":258,"end":284},"file":1}],"200":[{"span":{"start":258,"end":284},"file":1}],"201":[{"span":{"start":258,"end":284},"file":1}],"202":[{"span":{"start":258,"end":284},"file":1}],"203":[{"span":{"start":258,"end":284},"file":1}],"204":[{"span":{"start":258,"end":284},"file":1}],"205":[{"span":{"start":258,"end":284},"file":1}],"206":[{"span":{"start":258,"end":284},"file":1}],"207":[{"span":{"start":258,"end":284},"file":1}],"208":[{"span":{"start":258,"end":284},"file":1}],"209":[{"span":{"start":258,"end":284},"file":1}],"210":[{"span":{"start":258,"end":284},"file":1}],"211":[{"span":{"start":258,"end":284},"file":1}],"212":[{"span":{"start":258,"end":284},"file":1}],"213":[{"span":{"start":258,"end":284},"file":1}],"214":[{"span":{"start":258,"end":284},"file":1}],"215":[{"span":{"start":258,"end":284},"file":1}],"216":[{"span":{"start":258,"end":284},"file":1}],"217":[{"span":{"start":258,"end":284},"file":1}],"218":[{"span":{"start":258,"end":284},"file":1}],"219":[{"span":{"start":258,"end":284},"file":1}],"220":[{"span":{"start":258,"end":284},"file":1}],"221":[{"span":{"start":258,"end":284},"file":1}],"222":[{"span":{"start":258,"end":284},"file":1}],"223":[{"span":{"start":258,"end":284},"file":1}],"224":[{"span":{"start":258,"end":284},"file":1}],"225":[{"span":{"start":258,"end":284},"file":1}],"226":[{"span":{"start":258,"end":284},"file":1}],"227":[{"span":{"start":258,"end":284},"file":1}],"228":[{"span":{"start":258,"end":284},"file":1}],"229":[{"span":{"start":258,"end":284},"file":1}],"230":[{"span":{"start":258,"end":284},"file":1}],"231":[{"span":{"start":314,"end":401},"file":1}],"232":[{"span":{"start":415,"end":430},"file":1}]}}],"file_map":{"1":{"source":"use dep::std;\n\nfn main(message : [u8;38],hashed_message : [u8;32], pub_key_x : [u8;32], pub_key_y : [u8;32], signature : [u8;64]) {\n     // Hash the message, since secp256k1 expects a hashed_message\n    let expected = std::hash::sha256(message);\n     assert(hashed_message == expected);\n\n    let valid_signature = std::ecdsa_secp256k1::verify_signature(pub_key_x, pub_key_y, signature, hashed_message);\n     assert(valid_signature);\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/ecdsa_secp256k1/src/main.nr"}}}