{"debug_symbols":[{"locations":{"16":[{"span":{"start":281,"end":305},"file":1},{"span":{"start":734,"end":759},"file":1}],"17":[{"span":{"start":281,"end":305},"file":1},{"span":{"start":821,"end":856},"file":1}],"18":[{"span":{"start":281,"end":305},"file":1},{"span":{"start":821,"end":856},"file":1}],"19":[{"span":{"start":371,"end":409},"file":1}],"20":[{"span":{"start":371,"end":409},"file":1}],"21":[{"span":{"start":429,"end":457},"file":1}],"22":[{"span":{"start":517,"end":527},"file":1}],"23":[{"span":{"start":517,"end":527},"file":1}],"24":[{"span":{"start":517,"end":527},"file":1}],"25":[{"span":{"start":517,"end":527},"file":1}],"26":[{"span":{"start":517,"end":527},"file":1}],"27":[{"span":{"start":542,"end":562},"file":1}],"28":[{"span":{"start":542,"end":562},"file":1}],"29":[{"span":{"start":542,"end":562},"file":1}],"30":[{"span":{"start":542,"end":562},"file":1}],"31":[{"span":{"start":542,"end":562},"file":1}],"32":[{"span":{"start":576,"end":623},"file":1}],"33":[{"span":{"start":576,"end":623},"file":1}],"34":[{"span":{"start":576,"end":623},"file":1}],"35":[{"span":{"start":576,"end":623},"file":1}],"36":[{"span":{"start":576,"end":623},"file":1}]}}],"file_map":{"1":{"source":"mod foo;\n\nstruct myStruct {\n    foo: u32,\n    bar: Field,\n    message: str<5>,\n}\n\nfn main(x : Field, y : pub myStruct, z: pub foo::bar::barStruct, a: pub foo::fooStruct) -> pub Field {\n    let struct_from_bar = foo::bar::barStruct { val: 1, array: [0, 1], message: \"hello\" };\n\n    check_inner_struct(a, z);\n\n    for i in 0 .. struct_from_bar.array.len() {\n        assert(struct_from_bar.array[i] == z.array[i]);\n    }\n    assert(z.val == struct_from_bar.val);\n\n    assert((struct_from_bar.val * x) == x);\n\n    assert(x != y.bar);\n\n    assert(y.message == \"hello\");\n    assert(a.bar_struct.message == struct_from_bar.message);\n\n    a.bar_struct.array[1]\n}\n\nfn check_inner_struct(a: foo::fooStruct, z: foo::bar::barStruct) {\n    assert(a.bar_struct.val == z.val);\n    for i in 0.. a.bar_struct.array.len() {\n        assert(a.bar_struct.array[i] == z.array[i]);\n    }\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/struct_inputs/src/main.nr"}}}