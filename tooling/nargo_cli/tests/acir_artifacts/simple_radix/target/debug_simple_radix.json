{"debug_symbols":[{"locations":{"0":[{"span":{"start":71,"end":86},"file":1},{"span":{"start":123,"end":150},"file":19}],"1":[{"span":{"start":71,"end":86},"file":1},{"span":{"start":123,"end":150},"file":19}],"2":[{"span":{"start":71,"end":86},"file":1},{"span":{"start":123,"end":150},"file":19}],"3":[{"span":{"start":71,"end":86},"file":1},{"span":{"start":123,"end":150},"file":19}],"4":[{"span":{"start":71,"end":86},"file":1},{"span":{"start":123,"end":150},"file":19}],"5":[{"span":{"start":71,"end":86},"file":1},{"span":{"start":123,"end":150},"file":19}],"6":[{"span":{"start":71,"end":86},"file":1},{"span":{"start":123,"end":150},"file":19}],"7":[{"span":{"start":99,"end":106},"file":1}],"8":[{"span":{"start":99,"end":106},"file":1}],"9":[{"span":{"start":99,"end":106},"file":1}],"10":[{"span":{"start":99,"end":106},"file":1}],"11":[{"span":{"start":99,"end":106},"file":1}],"12":[{"span":{"start":99,"end":106},"file":1}],"13":[{"span":{"start":99,"end":106},"file":1}],"14":[{"span":{"start":99,"end":111},"file":1}],"15":[{"span":{"start":125,"end":132},"file":1}],"16":[{"span":{"start":125,"end":132},"file":1}],"17":[{"span":{"start":125,"end":132},"file":1}],"18":[{"span":{"start":125,"end":132},"file":1}],"19":[{"span":{"start":125,"end":137},"file":1}],"20":[{"span":{"start":151,"end":158},"file":1}],"21":[{"span":{"start":151,"end":158},"file":1}],"22":[{"span":{"start":151,"end":158},"file":1}],"23":[{"span":{"start":151,"end":158},"file":1}],"24":[{"span":{"start":151,"end":163},"file":1}]}}],"file_map":{"1":{"source":"// Simple program to test to_radix\nfn main(x : Field) {\n    let bits = x.to_le_bits(3);\n    assert(bits[0] == 0);\n    assert(bits[1] == 1);\n    assert(bits[2] == 0);\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/simple_radix/src/main.nr"},"19":{"source":"\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x âˆˆ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n","path":"std/field.nr"}}}