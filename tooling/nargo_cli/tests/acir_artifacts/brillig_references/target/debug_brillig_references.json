{"debug_symbols":[{"locations":{"0.14":[{"span":{"start":42,"end":54},"file":1}],"0.15":[{"span":{"start":42,"end":54},"file":1}],"0.16":[{"span":{"start":42,"end":54},"file":1}],"0.17":[{"span":{"start":42,"end":54},"file":1}],"0.18":[{"span":{"start":42,"end":54},"file":1}],"0.19":[{"span":{"start":42,"end":54},"file":1}],"0.20":[{"span":{"start":42,"end":54},"file":1}],"0.21":[{"span":{"start":42,"end":54},"file":1}],"0.22":[{"span":{"start":42,"end":54},"file":1}],"0.23":[{"span":{"start":42,"end":54},"file":1}],"0.24":[{"span":{"start":42,"end":54},"file":1}],"0.25":[{"span":{"start":42,"end":54},"file":1}],"0.26":[{"span":{"start":42,"end":54},"file":1}],"0.27":[{"span":{"start":42,"end":54},"file":1}],"0.28":[{"span":{"start":42,"end":54},"file":1}],"0.29":[{"span":{"start":42,"end":54},"file":1}],"0.30":[{"span":{"start":42,"end":54},"file":1}],"0.31":[{"span":{"start":42,"end":54},"file":1}],"0.32":[{"span":{"start":67,"end":73},"file":1}],"0.33":[{"span":{"start":67,"end":73},"file":1}],"0.34":[{"span":{"start":67,"end":73},"file":1}],"0.35":[{"span":{"start":67,"end":73},"file":1}],"0.36":[{"span":{"start":286,"end":300},"file":1}],"0.37":[{"span":{"start":286,"end":300},"file":1}],"0.38":[{"span":{"start":286,"end":300},"file":1}],"0.39":[{"span":{"start":286,"end":300},"file":1}],"0.40":[{"span":{"start":286,"end":300},"file":1}],"0.41":[{"span":{"start":286,"end":300},"file":1}],"0.42":[{"span":{"start":286,"end":300},"file":1}],"0.43":[{"span":{"start":286,"end":300},"file":1}],"0.44":[{"span":{"start":286,"end":300},"file":1}],"0.45":[{"span":{"start":286,"end":300},"file":1}],"0.46":[{"span":{"start":286,"end":300},"file":1}],"0.47":[{"span":{"start":286,"end":300},"file":1}],"0.48":[{"span":{"start":419,"end":420},"file":1}],"0.49":[{"span":{"start":419,"end":420},"file":1}],"0.50":[{"span":{"start":419,"end":420},"file":1}],"0.51":[{"span":{"start":419,"end":420},"file":1}],"0.52":[{"span":{"start":419,"end":420},"file":1}],"0.53":[{"span":{"start":419,"end":420},"file":1}],"0.54":[{"span":{"start":419,"end":420},"file":1}],"0.55":[{"span":{"start":419,"end":420},"file":1}],"0.56":[{"span":{"start":419,"end":420},"file":1}],"0.57":[{"span":{"start":419,"end":420},"file":1}],"0.58":[{"span":{"start":428,"end":455},"file":1}],"0.59":[{"span":{"start":428,"end":455},"file":1}],"0.60":[{"span":{"start":428,"end":455},"file":1}],"0.61":[{"span":{"start":428,"end":455},"file":1}],"0.62":[{"span":{"start":428,"end":455},"file":1}],"0.63":[{"span":{"start":428,"end":455},"file":1}],"0.64":[{"span":{"start":428,"end":455},"file":1}],"0.65":[{"span":{"start":428,"end":455},"file":1}],"0.66":[{"span":{"start":428,"end":455},"file":1}],"0.67":[{"span":{"start":428,"end":455},"file":1}],"0.68":[{"span":{"start":428,"end":455},"file":1}],"0.69":[{"span":{"start":428,"end":455},"file":1}],"0.70":[{"span":{"start":428,"end":455},"file":1}],"0.71":[{"span":{"start":428,"end":455},"file":1}],"0.72":[{"span":{"start":428,"end":455},"file":1}],"0.73":[{"span":{"start":428,"end":455},"file":1}],"0.74":[{"span":{"start":428,"end":455},"file":1}],"0.75":[{"span":{"start":428,"end":455},"file":1}],"0.76":[{"span":{"start":468,"end":495},"file":1}],"0.77":[{"span":{"start":468,"end":495},"file":1}],"0.78":[{"span":{"start":468,"end":495},"file":1}],"0.79":[{"span":{"start":468,"end":495},"file":1}],"0.81":[{"span":{"start":1141,"end":1142},"file":1}],"0.82":[{"span":{"start":847,"end":854},"file":1}],"0.83":[{"span":{"start":847,"end":854},"file":1}],"0.84":[{"span":{"start":847,"end":854},"file":1}],"0.85":[{"span":{"start":847,"end":854},"file":1}],"0.86":[{"span":{"start":847,"end":854},"file":1}],"0.87":[{"span":{"start":847,"end":854},"file":1}],"0.88":[{"span":{"start":847,"end":854},"file":1}],"0.89":[{"span":{"start":847,"end":854},"file":1}]}}],"file_map":{"1":{"source":"unconstrained fn main(mut x: Field) {\n    add1(&mut x);\n    assert(x == 3);\n\n    // https://github.com/noir-lang/noir/issues/1899\n    // let mut s = S { y: x };\n    // s.add2();\n    // assert(s.y == 5);\n\n    // Test that normal mutable variables are still copied\n    let mut a = 0;\n    mutate_copy(a);\n    assert(a == 0);\n\n    // Test something 3 allocations deep\n    let mut nested_allocations = Nested { y: &mut &mut 0 };\n    add1(*nested_allocations.y);\n    assert(**nested_allocations.y == 1);\n\n    // Test nested struct allocations with a mutable reference to an array.\n    let mut c = C {\n        foo: 0,\n        bar: &mut C2 {\n            array: &mut [1, 2],\n        },\n    };\n    *c.bar.array = [3, 4];\n    let arr: [Field; 2] = *c.bar.array;\n    assert(arr[0] == 3);\n    assert(arr[1] == 4);\n}\n\nunconstrained fn add1(x: &mut Field) {\n    *x += 1;\n}\n\nstruct S { y: Field }\n\nstruct Nested { y: &mut &mut Field }\n\nstruct C {\n    foo: Field,\n    bar: &mut C2,\n}\n\nstruct C2 {\n    array: &mut [Field; 2]\n}\n\nimpl S {\n    unconstrained fn add2(&mut self) {\n        self.y += 2;\n    }\n}\n\nunconstrained fn mutate_copy(mut a: Field) {\n    a = 7;\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/brillig_references/src/main.nr"}}}