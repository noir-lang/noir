{"debug_symbols":[{"locations":{"3":[{"span":{"start":485,"end":506},"file":1}],"4":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"5":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"6":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"7":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"8":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"9":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"10":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"11":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"12":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"13":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"14":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"15":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"16":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"17":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"18":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}],"19":[{"span":{"start":767,"end":783},"file":1},{"span":{"start":555,"end":587},"file":19},{"span":{"start":870,"end":907},"file":19}]}}],"file_map":{"1":{"source":"fn len_plus_1<T, N>(array: [T; N]) -> Field {\n    array.len() + 1\n}\n\nfn add_lens<T, N, M>(a: [T; N], b: [Field; M]) -> Field {\n    a.len() + b.len()\n}\n\nfn nested_call<N>(b: [Field; N]) -> Field {\n    len_plus_1(b)\n}\n\nfn main(x: Field, len3: [u8; 3], len4: [Field; 4]) {\n    assert(len_plus_1(len3) == 4);\n    assert(len_plus_1(len4) == 5);\n    assert(add_lens(len3, len4) == 7);\n    assert(nested_call(len4) == 5);\n\n    // std::array::len returns a compile-time known value\n    assert(len4[len3.len()] == 4);\n\n    // Regression for #1023, ensure .len still works after calling to_le_bytes on a witness.\n    // This was needed because normally .len is evaluated before acir-gen where to_le_bytes\n    // on a witness is only evaluated during/after acir-gen.\n    assert(x.to_le_bytes(8).len() != 0);\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/array_len/src/main.nr"},"19":{"source":"\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x âˆˆ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n","path":"std/field.nr"}}}