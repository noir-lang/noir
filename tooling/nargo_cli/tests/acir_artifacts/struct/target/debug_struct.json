{"debug_symbols":[{"locations":{"0":[{"span":{"start":960,"end":972},"file":1}],"1":[{"span":{"start":986,"end":999},"file":1}]}}],"file_map":{"1":{"source":"struct Foo {\n    bar: Field,\n    array: [Field; 2],\n}\n\nstruct Pair {\n    first: Foo,\n    second: Field,\n}\n\nimpl Foo {\n    fn default(x: Field,y: Field) -> Self {\n        Self { bar: 0, array: [x,y] }\n    }\n}\n\nimpl Pair {\n    fn foo(p: Self) -> Foo {\n        p.first\n    }\n\n    fn bar(self) -> Field {\n        self.foo().bar\n    }\n}\n\nstruct Nested {\n    a: Field,\n    b: Field\n}\nstruct MyStruct {\n    my_bool: bool,\n    my_int: u32,\n    my_nest: Nested,\n}\nfn test_struct_in_tuple(a_bool : bool,x:Field, y:Field) -> (MyStruct, bool) {\n    let my_struct = MyStruct {\n        my_bool: a_bool,\n        my_int: 5,\n        my_nest: Nested{a:x,b:y},\n    };\n    (my_struct, a_bool)\n}\n\nstruct Animal {\n    legs: Field,\n    eyes: u8,\n}\n\nfn get_dog() -> Animal {\n    let dog = Animal { legs: 4, eyes: 2 };\n    dog\n}\n\nstruct Unit;\n\nfn main(x: Field, y: Field) {\n    let unit = Unit {};\n\n    let first = Foo::default(x,y);\n    let p = Pair { first, second: 1 };\n\n    assert(p.bar() == x);\n    assert(p.second == y);\n    assert(p.first.array[0] != p.first.array[1]);\n\n    // Nested structs\n    let (struct_from_tuple, a_bool) = test_struct_in_tuple(true,x,y);\n    assert(struct_from_tuple.my_bool == true);\n    assert(a_bool == true);\n    assert(struct_from_tuple.my_int == 5);\n    assert(struct_from_tuple.my_nest.a == 0);\n\n    // Regression test for issue #670\n    let Animal { legs, eyes } = get_dog();\n    let six = legs + eyes as Field;\n\n    assert(six == 6);\n\n    let Animal { legs: _, eyes: _ } = get_dog();\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/struct/src/main.nr"}}}