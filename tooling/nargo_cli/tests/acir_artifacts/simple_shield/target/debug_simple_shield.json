{"debug_symbols":[{"locations":{"0":[{"span":{"start":383,"end":438},"file":1}],"1":[{"span":{"start":383,"end":438},"file":1}],"2":[{"span":{"start":564,"end":605},"file":1},{"span":{"start":216,"end":249},"file":2}],"3":[{"span":{"start":668,"end":726},"file":1},{"span":{"start":216,"end":249},"file":2}],"4":[{"span":{"start":801,"end":848},"file":1},{"span":{"start":216,"end":249},"file":2}],"5":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":530,"end":556},"file":9},{"span":{"start":123,"end":150},"file":19}],"6":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":530,"end":556},"file":9},{"span":{"start":123,"end":150},"file":19}],"7":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":530,"end":556},"file":9},{"span":{"start":123,"end":150},"file":19}],"8":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":530,"end":556},"file":9},{"span":{"start":123,"end":150},"file":19}],"9":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":530,"end":556},"file":9},{"span":{"start":123,"end":150},"file":19}],"10":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":530,"end":556},"file":9},{"span":{"start":123,"end":150},"file":19}],"11":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":530,"end":556},"file":9},{"span":{"start":123,"end":150},"file":19}],"12":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"13":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"14":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"15":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"16":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"17":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"18":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":717,"end":729},"file":9}],"19":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"20":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"21":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"22":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"23":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"24":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"25":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"26":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"27":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"28":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"29":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"30":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":717,"end":729},"file":9}],"31":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"32":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"33":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"34":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"35":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"36":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"37":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"38":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"39":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"40":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"41":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":629,"end":642},"file":9}],"42":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":717,"end":729},"file":9}],"43":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"44":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"45":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"46":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"47":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"48":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"49":[{"span":{"start":933,"end":1008},"file":1},{"span":{"start":823,"end":869},"file":9},{"span":{"start":216,"end":249},"file":2}],"50":[{"span":{"start":920,"end":1008},"file":1}]}}],"file_map":{"1":{"source":"use dep::std;\n\nfn main(\n  // Public key of note\n  // all notes have the same denomination\n  priv_key: Field, \n\n  // Merkle membership proof\n  note_root: pub Field, \n  index: Field,\n  note_hash_path: [Field; 3],\n\n  // Receiver public key\n  to_pubkey_x: Field, \n  to_pubkey_y: Field, \n) -> pub [Field; 2] {\n    // Compute public key from private key to show ownership\n    let pubkey = std::scalar_mul::fixed_base_embedded_curve(priv_key, 0);\n    let pubkey_x = pubkey[0];\n    let pubkey_y = pubkey[1];\n\n    // Compute input note commitment\n    let note_commitment = std::hash::pedersen([pubkey_x, pubkey_y]);\n    \n    // Compute input note nullifier\n    let nullifier = std::hash::pedersen([note_commitment[0], index, priv_key]);\n\n    // Compute output note nullifier\n    let receiver_note_commitment = std::hash::pedersen([to_pubkey_x, to_pubkey_y]);\n\n    // Check that the input note nullifier is in the root\n    assert(note_root == std::merkle::compute_merkle_root(note_commitment[0], index, note_hash_path));\n\n    [nullifier[0], receiver_note_commitment[0]]\n}\n","path":"/mnt/user-data/kev/noir/tooling/nargo_cli/tests/execution_success/simple_shield/src/main.nr"},"2":{"source":"mod poseidon;\n\n#[foreign(sha256)]\npub fn sha256<N>(_input : [u8; N]) -> [u8; 32] {}\n\n#[foreign(blake2s)]\npub fn blake2s<N>(_input : [u8; N]) -> [u8; 32] {}\n\npub fn pedersen<N>(input : [Field; N]) -> [Field; 2] {\n    pedersen_with_separator(input, 0)\n}\n\n#[foreign(pedersen)]\npub fn pedersen_with_separator<N>(_input : [Field; N], _separator : u32) -> [Field; 2] {}\n\npub fn pedersen_hash<N>(input : [Field; N]) -> Field {\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(_input : [Field; N], _separator : u32) -> Field {}\n\n#[foreign(hash_to_field_128_security)]\npub fn hash_to_field<N>(_input : [Field; N]) -> Field {}\n\n#[foreign(keccak256)]\npub fn keccak256<N>(_input : [u8; N], _message_size: u32) -> [u8; 32] {}\n\n// mimc-p/p implementation\n// constants are (publicly generated) random numbers, for instance using keccak as a ROM.\n// You must use constants generated for the native field\n// Rounds number should be ~ log(p)/log(exp)\n// For 254 bit primes, exponent 7 and 91 rounds seems to be recommended\nfn mimc<N>(x: Field, k: Field, constants: [Field; N], exp : Field) -> Field {\n    //round 0\n    let mut t = x + k;\n    let mut h = t.pow_32(exp);\n    //next rounds\n    for i in 1 .. constants.len() {\n        t = h + k + constants[i];\n        h = t.pow_32(exp);\n    };\n    h + k\n}\n\nglobal MIMC_BN254_ROUNDS = 91;\n\n//mimc implementation with hardcoded parameters for BN254 curve.\npub fn mimc_bn254<N>(array: [Field; N]) -> Field {\n    //mimc parameters\n    let exponent = 7;\n    //generated from seed \"mimc\" using keccak256 \n    let constants: [Field; MIMC_BN254_ROUNDS] = [\n        0, \n        20888961410941983456478427210666206549300505294776164667214940546594746570981,\n        15265126113435022738560151911929040668591755459209400716467504685752745317193,\n        8334177627492981984476504167502758309043212251641796197711684499645635709656,\n        1374324219480165500871639364801692115397519265181803854177629327624133579404,\n        11442588683664344394633565859260176446561886575962616332903193988751292992472,\n        2558901189096558760448896669327086721003508630712968559048179091037845349145,\n        11189978595292752354820141775598510151189959177917284797737745690127318076389,\n        3262966573163560839685415914157855077211340576201936620532175028036746741754,\n        17029914891543225301403832095880481731551830725367286980611178737703889171730,\n        4614037031668406927330683909387957156531244689520944789503628527855167665518,\n        19647356996769918391113967168615123299113119185942498194367262335168397100658,\n        5040699236106090655289931820723926657076483236860546282406111821875672148900,\n        2632385916954580941368956176626336146806721642583847728103570779270161510514,\n        17691411851977575435597871505860208507285462834710151833948561098560743654671,\n        11482807709115676646560379017491661435505951727793345550942389701970904563183,\n        8360838254132998143349158726141014535383109403565779450210746881879715734773,\n        12663821244032248511491386323242575231591777785787269938928497649288048289525,\n        3067001377342968891237590775929219083706800062321980129409398033259904188058,\n        8536471869378957766675292398190944925664113548202769136103887479787957959589,\n        19825444354178182240559170937204690272111734703605805530888940813160705385792,\n        16703465144013840124940690347975638755097486902749048533167980887413919317592,\n        13061236261277650370863439564453267964462486225679643020432589226741411380501,\n        10864774797625152707517901967943775867717907803542223029967000416969007792571,\n        10035653564014594269791753415727486340557376923045841607746250017541686319774,\n        3446968588058668564420958894889124905706353937375068998436129414772610003289,\n        4653317306466493184743870159523234588955994456998076243468148492375236846006,\n        8486711143589723036499933521576871883500223198263343024003617825616410932026,\n        250710584458582618659378487568129931785810765264752039738223488321597070280,\n        2104159799604932521291371026105311735948154964200596636974609406977292675173,\n        16313562605837709339799839901240652934758303521543693857533755376563489378839,\n        6032365105133504724925793806318578936233045029919447519826248813478479197288,\n        14025118133847866722315446277964222215118620050302054655768867040006542798474,\n        7400123822125662712777833064081316757896757785777291653271747396958201309118,\n        1744432620323851751204287974553233986555641872755053103823939564833813704825,\n        8316378125659383262515151597439205374263247719876250938893842106722210729522,\n        6739722627047123650704294650168547689199576889424317598327664349670094847386,\n        21211457866117465531949733809706514799713333930924902519246949506964470524162,\n        13718112532745211817410303291774369209520657938741992779396229864894885156527,\n        5264534817993325015357427094323255342713527811596856940387954546330728068658,\n        18884137497114307927425084003812022333609937761793387700010402412840002189451,\n        5148596049900083984813839872929010525572543381981952060869301611018636120248,\n        19799686398774806587970184652860783461860993790013219899147141137827718662674,\n        19240878651604412704364448729659032944342952609050243268894572835672205984837,\n        10546185249390392695582524554167530669949955276893453512788278945742408153192,\n        5507959600969845538113649209272736011390582494851145043668969080335346810411,\n        18177751737739153338153217698774510185696788019377850245260475034576050820091,\n        19603444733183990109492724100282114612026332366576932662794133334264283907557,\n        10548274686824425401349248282213580046351514091431715597441736281987273193140,\n        1823201861560942974198127384034483127920205835821334101215923769688644479957,\n        11867589662193422187545516240823411225342068709600734253659804646934346124945,\n        18718569356736340558616379408444812528964066420519677106145092918482774343613,\n        10530777752259630125564678480897857853807637120039176813174150229243735996839,\n        20486583726592018813337145844457018474256372770211860618687961310422228379031,\n        12690713110714036569415168795200156516217175005650145422920562694422306200486,\n        17386427286863519095301372413760745749282643730629659997153085139065756667205,\n        2216432659854733047132347621569505613620980842043977268828076165669557467682,\n        6309765381643925252238633914530877025934201680691496500372265330505506717193,\n        20806323192073945401862788605803131761175139076694468214027227878952047793390,\n        4037040458505567977365391535756875199663510397600316887746139396052445718861,\n        19948974083684238245321361840704327952464170097132407924861169241740046562673,\n        845322671528508199439318170916419179535949348988022948153107378280175750024,\n        16222384601744433420585982239113457177459602187868460608565289920306145389382,\n        10232118865851112229330353999139005145127746617219324244541194256766741433339,\n        6699067738555349409504843460654299019000594109597429103342076743347235369120,\n        6220784880752427143725783746407285094967584864656399181815603544365010379208,\n        6129250029437675212264306655559561251995722990149771051304736001195288083309,\n        10773245783118750721454994239248013870822765715268323522295722350908043393604,\n        4490242021765793917495398271905043433053432245571325177153467194570741607167,\n        19596995117319480189066041930051006586888908165330319666010398892494684778526,\n        837850695495734270707668553360118467905109360511302468085569220634750561083,\n        11803922811376367215191737026157445294481406304781326649717082177394185903907,\n        10201298324909697255105265958780781450978049256931478989759448189112393506592,\n        13564695482314888817576351063608519127702411536552857463682060761575100923924,\n        9262808208636973454201420823766139682381973240743541030659775288508921362724,\n        173271062536305557219323722062711383294158572562695717740068656098441040230,\n        18120430890549410286417591505529104700901943324772175772035648111937818237369,\n        20484495168135072493552514219686101965206843697794133766912991150184337935627,\n        19155651295705203459475805213866664350848604323501251939850063308319753686505,\n        11971299749478202793661982361798418342615500543489781306376058267926437157297,\n        18285310723116790056148596536349375622245669010373674803854111592441823052978,\n        7069216248902547653615508023941692395371990416048967468982099270925308100727,\n        6465151453746412132599596984628739550147379072443683076388208843341824127379,\n        16143532858389170960690347742477978826830511669766530042104134302796355145785,\n        19362583304414853660976404410208489566967618125972377176980367224623492419647,\n        1702213613534733786921602839210290505213503664731919006932367875629005980493,\n        10781825404476535814285389902565833897646945212027592373510689209734812292327,\n        4212716923652881254737947578600828255798948993302968210248673545442808456151,\n        7594017890037021425366623750593200398174488805473151513558919864633711506220,\n        18979889247746272055963929241596362599320706910852082477600815822482192194401,\n        13602139229813231349386885113156901793661719180900395818909719758150455500533,\n    ];\n\n    let mut r = 0;\n    for elem in array {\n        let h = mimc(elem, r, constants, exponent);\n        r = r + elem + h;\n    }\n    r\n}\n","path":"std/hash.nr"},"9":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n         } else {\n            (current, hash_path[i])\n         };\n\n      current = crate::hash::pedersen([hash_left, hash_right])[0];\n    };\n    current\n}\n","path":"std/merkle.nr"},"19":{"source":"\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(_self: Self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(_self: Self, _bit_size: u32) -> [u1] {}\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(_self: Self, _radix: u32, _result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n","path":"std/field.nr"}}}