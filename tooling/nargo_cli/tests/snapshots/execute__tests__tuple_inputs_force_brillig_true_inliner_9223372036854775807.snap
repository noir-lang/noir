---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "8049150810078413822",
  "abi": {
    "parameters": [
      {
        "name": "pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "field"
            },
            {
              "kind": "field"
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "struct_pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "struct",
              "path": "Foo",
              "fields": [
                {
                  "name": "a",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "bar",
                  "type": {
                    "kind": "struct",
                    "path": "Bar",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "array",
                          "length": 3,
                          "type": {
                            "kind": "field"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "kind": "struct",
              "path": "Bar",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZvRbtswDEX/xc95EEVKFPsrwzCkbToECNIibQcMRf99Thenga1pu1P4UtSFz0mda5O2ZL0N95vb1+/ftvuHx+fh5svbsHu8W79sH/fj1tv7arg9bHe77fdvl38ewvFH4Y/9n5/W++Pm88v68DLcxCirYbO/P/6WRv5hu9sMNym8f10NRWAiwURGCasTwhMhMiesRkgoJ0JimREUAo4QjkQcYRypxij5jGhYIAlHMo4ojhQcMRihgCOEIxFHGEfw9AlPn/D0CU+f6ulLPCN0iawWu2pOp11V48JunvYYXO3kapdOO5nSaV+ycrHzb7126y1P1T/EPNdjZ80HYjDCAUeqoaU4dbJ0eSgnJOII44jgSMKRjCOKIwVHDEYk4AievuDpC56+4OlLvWOUdEa0o/xIdrWrpz2FTnu7dCbu1rdKZxJI/4EkHMk4Ui8EekZ0cRucCo4YjOSAI4QjEUcYRwRHEo5kHMHTz3j6GU9f8fS1nr7QGbGO8qPR1c6u9txpb5dOtW59q3SWAOk/EMKRiCPV0HKY2numRXuvDwS1kYQj+S9IXDwQlmqGWafRo1zmY0Fk9cOXMCFp8SlWLTdK05OqLsdcrNQRbiCGIrE+StVGCEeq55ien2w08QJhHBEcSThSPcdaZSjWR6naSIERip7FLlJvpR7Ptc9iRzzXi68++eqzr1599cVXb676GLr1pJ9dOM315KuPvnr21YuvPvnqs6/+ulft5e1h5T5Yz/235Pk/Uro7Q+M+NUbX2+DIwVffP/7Rapssnfp28ePkq8++evXVF1+9ueol+OqpW98qfvWB5uvp2Vcvvvrkq8++evXVX/eq/f+2KdbdGVqN5wrj+k09+erFc0I3/mEO4N/17eL3h/mCq+nVV1989eaqz8FXT7762K1vFb/6HMv19OKrT7767KtXX33x1V/3qv3/tqmhuzO0Go+Srz766uuvt+ZJP57j77Nx3fokVhtRHCk4YjBSn9JqI4QjEUcYRwRH8PQLnn7B0y94+gVP3/D0DU/f8PQNT9/w9A1P3/D0DU/f8PQNTp/D39IvtEAIRyKOMI5U0+dgJ4RjXCAJRzKOKI7U07cWYjBSfyG+jRCOVNPnNE3Nc+YFwjgiOJJwpJ6+tBDFkYIjBiP1OTo+v2XBpSwQwpGII4wjgiMJQ97HrR/rw3Z9u9ucVmU9vO7vLhZpvfx82szWaz0dHu8296+HzXHl1ueireMBaliV8PW4kmXc4FhWzHzcPH7FzDpu2viZ4+f+Ag==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(pair: (Field, Field), x: [(u8, u8, u8); 2], struct_pair: (Foo, Bar)) -> pub (Field, u8) {\n    let mut start_val = 0;\n    for i in 0..2 {\n        assert(x[i].0 == start_val);\n        assert(x[i].1 == start_val + 1);\n        assert(x[i].2 == start_val + 2);\n        start_val += 3;\n    }\n\n    assert(struct_pair.0.a == 1);\n    assert(struct_pair.0.b == [2, 3, 20]);\n    assert(struct_pair.0.bar.inner == [100, 101, 102]);\n    assert(struct_pair.1.inner == [103, 104, 105]);\n\n    let (u, v) = if pair.0 as u32 < 1 {\n        (pair.0, pair.0 + 1)\n    } else {\n        (pair.0 + 1, pair.0)\n    };\n\n    assert(u == pair.0 + 1);\n    assert(v == pair.0);\n\n    (u, v as u8)\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/tuple_inputs/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
