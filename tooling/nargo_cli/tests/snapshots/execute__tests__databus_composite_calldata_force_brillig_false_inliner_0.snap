---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "17053811144686172435",
  "abi": {
    "parameters": [
      {
        "name": "foos",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "x",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              },
              {
                "name": "y",
                "type": {
                  "kind": "array",
                  "length": 10,
                  "type": {
                    "kind": "integer",
                    "sign": "unsigned",
                    "width": 32
                  }
                }
              }
            ]
          }
        },
        "visibility": "databus"
      },
      {
        "name": "values",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "array",
            "length": 2,
            "type": {
              "kind": "array",
              "length": 2,
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            }
          }
        },
        "visibility": "databus"
      },
      {
        "name": "zero",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "one",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2d+VITSxTGDwHkwt0X773eRSO4r9OTSZggIuKKiIiIuCvB4K6Iuz6A5ZP4Lj6HDyInzlgttPwzX1f5VXVXpQIn1OQ3p385p2eYmrTJp/F66fE2+7lt6dGePesoL4u1OWIlR6zdEetwxDodsTWOWJcj9p0j1u2I9Thi3ztiPzhiPzpiPzliPztivzhivzpivzlivztifzhiax2xPx2xvxyxvx2xdY7YP47Yv47Yf47Y/47YekdsgyNWdsQ2ZjF75K4OZ8+VqJYkzf64aSpmNorrjbQaJdVGLTWpqabVG3FaqTTTJO2vN+r9Ud0klaaZr9Yr89GnsdnaVlRw+OTcguM0Pjm34jgbPjm34TjnfHJuh3Gamn6utH53ZttT99UrnTPNx3ZZOUrL9icqNuJeYG524LiikrWv9kBt/2t+RMWGQebAF+NOJKNKrI9ea5LyhYnGdeGhguvCQhcSunDQhYIuDHQhoI1fG702dm3k2ri1UWtj1kasjVcbrTZWbaTaOLVRamPURqiNTxudNra8kW20kpZzsIkEnSRPjLs8MH6eNCSo/aksWuV2A7lYq9xuAsY9SEbWKgJNgifGvUJSRexkFq0ikWCrCKOcEQGjERI5I6CccZDTxASMFSGRMwbKmQQ5TULAWBUSOROgnLUgp6kRMPYLiZw1oJxpkNOkBIx1IZEzBco5EOQ0AwSM+4REzgGgnINBTjNIwLhfSOQcBMo5FOQ0QwSMB4REziGgnMNBTjNMwHhQSOTcBZRzBMhlXyil2y2L+MxD3AfMwyEcF+2FG8gc+GI8jGRkrabQJHhiPOKBsTXQ1dS2vmgVOSrYVs9YRY4SMB6TUEWwSfDEeFxIqoidzKJVZFSwVYRRzlECxhNCIucoUM6xIKcZI2A8KSRyjgHlHA9ymnECxlNCIuc4UM6JIKeZIGA8LSRyTgDlnAxymkkCxjNCIuckUM6pIKeZImA8KyRyTgHlnA5ymmkCxnNCIuc0UM6ZIKeZIWA8LyRyzgDlvBDkNBcIGC8KiZwjQDl9/f8Svc9V4D5fwnHF9sUgut2yyKpzX5QdeNRugHnwegeeyzjOxCfnFRxnmt9QoyPbnt4xRvOg77HNcqtDVg4Qg7dC20vAeFVImsFVoMDXYFymxrpSweXAH+N1IZHzGlDOWSAXq5yzBIwNIZFzFijnXJDTzBEw3hASOeeAcjaDnKZJwDiPZNRJ0rvx5QcI15ceWpr1EzAvKwf6YOgmbmdi3Zc1lnh6MKTbv5z9XspeXz5A7+9twvsIGG8hGXWiOoVvoqBJ8MR42wNja6Bbm53MolXmjmBbG6OcdwgY7wq4tXVZYqr5dy1Zu4RvEhnOid0TcCtgPHnJ0LPve2BsjZJH0KKt4AGMi/fkJS4H/hgfComcD4ByLgh2ncIo5wIB4yMhkXMBKOdikNMsEjA+FhI5F4FyPglymicEjE+RjDpJ+vUh+QGCrhm0NOsn4GkW07/pltVPCnYL32QzHAk+QzKWsslmmyhoEjwxPvfA2BrolmEns2jLeCHYlsEo5wsCxpcCbhk9lphq/ktL1h7hm0SGc02vhKTC2Gcvi1YYXzvdDt5n4Nd2fXGPmqL5ew3Mn30Ftm63LOLVo03fcB7y9fIma/+/ha/o0zVt3zKmnNM+IBvJntd+OLju0ft3R6yXWlc+f+21N6u8puMjmslhn4R5AAA=",
  "debug_symbols": "ldjdasIwGIDhe8mxB/n7ki/eyhijapVCqVJ1MMR7n8oK0naU9zAJT6C8pIHczK7eXA9fTbc/ns3642ba47a6NMfuMbqZEF9z51PVPYfnS9VfzNoVtzJ1tzNrb919ZfZNW5u12PvnygTBImGRsVAsChXRYuGw8FgELHDziJtH3Dzi5hE3j7i54OaCmwtuLri54OaCmwtuLri54OaCmyfcPOHmCTdPuHnCzdNi8zwWCYvZ5t6WQTgdC8WiUJEtFg4Lj0XAImIhWCQscPOMm2fcXHFzxc0VN1fcXHFzxc0VN1fcXHFzxc0Lbl6W/u3ejsV885AHIWksAhZxQWQ/FvPNdfjyMLkNSsIiY6FYFCqctZw4TjwngZPIiXCSOFlsnyZEOSmYOMuJ48RzEjhZqu/8hAgns/WDiwPxMiGZE+WkYOItJ44Tz0ngJHIiCyRMDrJPnGROlJOCSbCcLNUPk1MZPCdLZ3+GzNePYSCTK9/Nv9X9Tx6DTd+0bXP4en8lfEx/V31Tbdr6b7i/dtu31cvPaVgZ/Kk/buvdta+fO73WHtv/Ag==",
  "file_map": {
    "50": {
      "source": "struct Foo {\n    x: u32,\n    y: [u32; 10],\n}\n\nfn main(\n    foos: call_data(0) [Foo; 2],\n    values: call_data(0) [[[u32; 2]; 2]; 3],\n    zero: u32,\n    one: u32,\n) -> pub u32 {\n    assert_eq(foos[zero].x + 1, foos[one].x);\n    assert_eq(foos[zero].y[3] + 2, foos[one].y[4]);\n    assert_eq(values[zero][one][zero], values[one][zero][one]);\n    foos[zero].x + foos[one].y[0]\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/databus_composite_calldata/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
