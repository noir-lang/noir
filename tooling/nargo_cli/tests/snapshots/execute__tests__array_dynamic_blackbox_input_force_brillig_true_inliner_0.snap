---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "5783250799995673734",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zdthayIxEAbg/7Kf90NmJplJ/CvHUWy7LYJosfbgKP3vt3quijmW44bXy5dCSnx4MTuaHbOf3fPw+PH6sNq8bN+7xbfPbr19Wu5X2804+vzqu8fdar1evT5c/7sLhz9UwvEF72/LzWH8vl/u9t3CYt8Nm+duQUTj619W66FbpPDV//XM7/1oE9BmoC1AOwLtBLQVaBvQzkC7wGwOAWgT0GagLUDbWZcS+DRVglR4QuKKxA2JZyRegDgFJE5InJG4IHFkhRKyQglZoYSsUEJWKDvfFtZ8mspaKtxZ/mrhNFVzuMXF++Us01SL5R+nHnNQIzm4kRzSSA69W45x80wTW/KV+ztIuWOQolM5BtabIBFVMUeckDgj8djIhRLT3YKMtzaXC4XkNoi2EsRaCZJbCVIaCZJCK0GolSB8xyBkl8/5dBtEWgkSWwmSWgmirQSxVoLkVoL8r0/W623aH7YMY1dsijDeZ96E1tDI3lKplSDcShBkN0OR3QxFdjMU2c1QZL/RkP1GQ/YbDdlvNGS/0SISR1aoeStUpjtFEatwQ+LeClWZcOMKL0A8eytUzwtqucIJiTvf81jSaWos1YJ6jwCkNH3NJauuc+8ZAOVpQTVVC+o9BDCPRySekLgicUPiGYkXHC7eswDzOCFxRuKCxCMST0hckbgh8YzEkRXqPQ8w92ujeM8DzOOMxBNuayHeX9XTeUET5wo3JJ6ReAHiHJC4d68o0y43xapCmZG4IPGIxBMSVyRuSNxboXTGuVR4AeLeoynzOCFxRuKCxCMST0hckbghcWSFeo/NJLVz16L6bPEehZnHCYkzEvdWaJ76iqlQhUcknpC4InFvhdq5O1fqBc1IvABx7/mSeZyQOCNxQeLeCp1pFIv3DMY8rkjckHhG4gWIe88ezOOExBmJCxJHVqgiK1RhFfo1jn4sd6vl43o4PWv78rF5unr0dv/zbbh5Cvdtt30anj92w+F53MujuIdLWnLsY0iH0OOIzHrKNo6O/UXR0ovFw5COc6mXLGOGMccv",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/array_dynamic_blackbox_input/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
