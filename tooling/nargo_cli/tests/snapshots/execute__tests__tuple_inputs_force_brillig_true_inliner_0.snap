---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "8049150810078413822",
  "abi": {
    "parameters": [
      {
        "name": "pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "field"
            },
            {
              "kind": "field"
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "struct_pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "struct",
              "path": "Foo",
              "fields": [
                {
                  "name": "a",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "bar",
                  "type": {
                    "kind": "struct",
                    "path": "Bar",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "array",
                          "length": 3,
                          "type": {
                            "kind": "field"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "kind": "struct",
              "path": "Bar",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrdTuMwEIbhe8lxD+wZ/3IrqxUqUFClqkWlrLRC3PsmCwlVPBv2zQnCiEdW+8WOZ+S37mF39/p0uz8+nl66mx9v3eF0v73sT8d+9Pa+6e7O+8Nh/3R7/efODT9K/vv/L8/b4zB8uWzPl+5GJGy63fFh+C32/nF/2HU30b3/3HSlYFGpqA4L+3MEHUUIM+GdOUlw5ZMEKQ3xnAgnykngJJokTSS7hiROMieFk4qJd5x4ToQT5SRwwtP3PH3P0/c8fW+nH2Qifk7EceI5EU6Uk8BJ5CRxkjkpnPD01Uw/yviyiJIa4jkRTpSTwEnkJHGSOSmcVEwCTz/w9ANPP/D0g732S5xIbkjkJHGSOSmcVEyi48RzIpwoJzz9aK/9PJHcHBRj4iRzUjipmCTHiedEOFFOAic8/cTTTzz9xNNPdvrBT6TOSXaceE6EE+UkcBI5SZxkTgonPP1ipp/c+HpNvnm9Fs+JcKLfEGlKnmLmkvLYIEmlaXfYPZUU3EhiM0s1n7Hsx1ost12FGm2iCyRxkjkpnJjPWJ4qixx1RsTuKS0Tz4lwYj5jOY0bbM7SkMBJ5MRuDqbxs0iarxexWzfLxHMinCgngZPISeIkc1I44ekLT194+sLTF56+8PSFpy88feHpC09fePrK01eevvL0laev36VffEMiJ4mTzImZvrr6SVSand9u3SwSu3WzTDwndvp1iSgngZPIiZm+xvHUp6k5Ktitm2VSOKmY2K0bDUvEcyKcKCdm+jod4LWUhkROEieZk8JJxcSu9xfPlna9v0w8J2aUfY0y1qJ97XG1X36YbJuaxi3WXTd7P0zl89g1b1+mfM3jdW78CiMrjK4wYYWJK0xaYey3pvP5K9M4N2WFqdz840LFsvErjKwwusL8x3NwvX427ZLOU+Vf5ivNbmIsr067i/GNobvAez/4tT3vt3eH3efVnsfX4/3VTZ/L7+fd7NLP8/l0v3t4Pe+G6z9fN3+Gbz27TXE/hwsU/WA430nKw3BIXvv+k7rYz9nP+wc=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(pair: (Field, Field), x: [(u8, u8, u8); 2], struct_pair: (Foo, Bar)) -> pub (Field, u8) {\n    let mut start_val = 0;\n    for i in 0..2 {\n        assert(x[i].0 == start_val);\n        assert(x[i].1 == start_val + 1);\n        assert(x[i].2 == start_val + 2);\n        start_val += 3;\n    }\n\n    assert(struct_pair.0.a == 1);\n    assert(struct_pair.0.b == [2, 3, 20]);\n    assert(struct_pair.0.bar.inner == [100, 101, 102]);\n    assert(struct_pair.1.inner == [103, 104, 105]);\n\n    let (u, v) = if pair.0 as u32 < 1 {\n        (pair.0, pair.0 + 1)\n    } else {\n        (pair.0 + 1, pair.0)\n    };\n\n    assert(u == pair.0 + 1);\n    assert(v == pair.0);\n\n    (u, v as u8)\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/tuple_inputs/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
