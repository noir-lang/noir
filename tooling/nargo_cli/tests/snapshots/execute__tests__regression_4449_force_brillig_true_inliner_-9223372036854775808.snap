---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "16199062689838786201",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndjdquIwFIbhe+lxD7LyH29lGDb+1E2hVKk6MIj3Pu2e3Spthf3mRIzkMdUvq6zmXhyq3e3zo26Pp0ux+XUvmtN+e61PbT+6P8pi19VNU39+vH5cqOElyNf8y3nbDsPLddtdi03UZVG1h/5N7PWxbqpi49Tjd1kEDecbON/C+W5tvsgIRMxceCwCFhGLREVUWAgWGguDhcUCZx5x5hFnHnHmEWeecOYJZ55w5qLWL8v4kZi4IKv7RE9EO78gqxtFh4kkvSCOE89J4CRykjARxYlwojkxnPD0Zb3qXRi3pV+SwEnkJGGi10ss2ZGktCDCiebEcLIepZIxSrWofe048ZwETtYLWcWRLO+WOmFiFCfCyXohi5vI4ucbw4nlxHHiOQmcRE4SJlZxIpzw9C1P3/L0LU/f8vQtT9/y9C1P3/H0HU/f8fQdb+Gc5cRx4jkJnEROEiZecSKcaE54+p6n73n6nqfvefqep+95+oGnH3nPH3nPH3nP/+b5OAWZOsUoT/Rl3jy9pjSto7SfG5OxzpuOVD3XeW2X/huXYXyGCRkmZpiEjVYqw7xpTCU8M3VzozOMyTA2w7gM4zNMyDA/2Aev9VMu66b/T8a60RLm359wfWpRGYbeBx794M+2q7e7pvo+Az/e2v3Lkfj177manY6fu9O+Oty6ajgnfx6RD/uofzT3YaiS4eIlmFJCHIbDdfV/S6kl9Wv26/4D",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Regression test for issue #4449\nfn main(x: u8, result: [u8; 32]) {\n    let x = x % 31;\n    let mut digest = [0; 32];\n    for i in 0..70 {\n        let y = x + i;\n        let a = [y, x, 32, 0, y + 1, y - 1, y - 2, 5];\n        digest = std::hash::blake3(a);\n    }\n\n    assert(digest == result);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/regression_4449/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
