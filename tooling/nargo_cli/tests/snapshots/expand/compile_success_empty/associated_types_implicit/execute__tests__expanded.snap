---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
trait Foo {
    type Bar;

    fn foo(self) -> Bar;
}

impl Foo for u64 {
    type Bar = u8;

    fn foo(self) -> u8 {
        self as u8
    }
}

impl<T> Foo for Option<T>
where
    T: Foo,
    <T as Foo>::Bar: Eq,
{
    type Bar = <T as Foo>::Bar;

    fn foo(self) -> <T as Foo>::Bar
    where
        T: Foo,
        <T as Foo>::Bar: Eq,
    {
        Foo::foo(self.unwrap())
    }
}

fn main() {
    let three: u64 = 3;
    call_foo(three);
    let x: Option<Option<u64>> = Option::some(Option::some(0));
    let x_foo: u8 = x.foo();
    assert(x_foo == x_foo);
    assert(x.foo() == (0 as u8));
}

fn call_foo<T>(x: T)
where
    T: Foo,
    <T as Foo>::Bar: Eq,
{
    let y: <T as Foo>::Bar = Foo::foo(x);
    assert(y == y);
}
