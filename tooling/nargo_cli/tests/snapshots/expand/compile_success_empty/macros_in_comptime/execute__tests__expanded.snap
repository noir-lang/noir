---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::{field::modulus_num_bits, meta::unquote};

global three_field: Field = 3;

fn main() {
    ()
}

comptime fn foo<let N: Field>(x: Field) {
    assert(modulus_num_bits() != 0);
    let cond: Quoted = quote { modulus_num_bits() != 0 };
    assert(unquote!(cond));
    assert(5 == x);
    assert(5 == unquote!(quote { x }));
    assert(3 == N);
    assert(3 == unquote!(quote { N }));
    for _ in 0..0 {
        break;
    }
    let loop_: Quoted = quote {
        for _ in 0..0 {
            break;
        }
    };
    unquote!(loop_);
}

mod submodule {
    use std::{field::modulus_be_bytes, meta::unquote};

    pub comptime fn bar() {
        assert(modulus_be_bytes().len() != 0);
        let cond: Quoted = quote { modulus_be_bytes().len() != 0 };
        assert(unquote!(cond));
    }
}
