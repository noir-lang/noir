---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main() {
    primitive_tests();
    foo_tests();
    option_tests();
    abc_tests();
    match_on_structs();
}

fn primitive_tests() {
    let x: i32 = -2;
    {
        let internal___variable: i32 = x;
        match internal___variable {
            -3 => fail(),
            -2 => (),
            0 => fail(),
            2 => fail(),
            _ => {
                let _: i32 = internal___variable;
                fail()
            },
        }
    };
    {
        let internal___variable: bool = true;
        match internal___variable {
            false => fail(),
            true => (),
        }
    };
    let i64_min: i64 = I64_MIN;
    {
        let internal___variable: i64 = i64_min;
        match internal___variable {
            9223372036854775807 => fail(),
            -9223372036854775807 => fail(),
            0 => fail(),
            -9223372036854775808 => (),
            _ => {
                let _: i64 = internal___variable;
                fail()
            },
        }
    }
}

global I64_MIN: i64 = -9223372036854775808;

enum Foo<T> {
    A(Field, Field),
    B(u32),
    C(T),
    D(),
    E,
}

fn foo_tests() {
    let _a: Foo<u8> = Foo::A::<u8>(1, 2);
    let _b: Foo<u16> = Foo::B(3);
    let _c: Foo<Field> = Foo::C(4);
    let _d: fn() -> Foo<(i32, i32)> = Foo::D;
    let _d: Foo<(i32, i32)> = Foo::D();
    let _e: Foo<u16> = Foo::<T>::E;
    let _e: Foo<u32> = Foo::<T>::E;
    let _many_cs: [Foo<Field>; 3] = [1, 2, 3].map(Foo::C);
    {
        let internal___variable: Foo<u16> = _b;
        match internal___variable {
            Foo::<u16>::B(internal_match_variable_0) => {
                let x: u32 = internal_match_variable_0;
                {
                    assert(x == 3);
                }
            },
            Foo::<u16>::C(internal_match_variable_0) => {
                let _: u16 = internal_match_variable_0;
                fail()
            },
            _ => {
                let _: Foo<u16> = internal___variable;
                fail()
            },
        }
    };
    {
        let internal___variable: Foo<Field> = _c;
        match internal___variable {
            Foo::<Field>::A(internal_match_variable_0, internal_match_variable_1) => match internal_match_variable_0 {
                1 => {
                    let _: Field = internal_match_variable_1;
                    fail()
                },
                _ => {
                    let _: Foo<Field> = internal___variable;
                    fail()
                },
            },
            Foo::<Field>::B(internal_match_variable_0) => {
                let _: Foo<Field> = internal___variable;
                fail()
            },
            Foo::<Field>::C(internal_match_variable_0) => match internal_match_variable_0 {
                4 => (),
                _ => {
                    let _: Field = internal_match_variable_0;
                    fail()
                },
            },
            Foo::<Field>::D => {
                let _: Foo<Field> = internal___variable;
                fail()
            },
            Foo::<Field>::E => fail(),
        }
    }
}

fn fail() {
    assert(false);
}

enum MyOption<T> {
    None,
    Maybe,
    Some(T),
}

fn option_tests() {
    let opt: MyOption<ABC> = MyOption::Some(ABC::C);
    {
        let internal___variable: MyOption<ABC> = opt;
        match internal___variable {
            MyOption::<ABC>::Some(internal_match_variable_0) => match internal_match_variable_0 {
                ABC::D => fail(),
                _ => {
                    let x: ABC = internal_match_variable_0;
                    {
                        assert(x == ABC::C);
                    }
                },
            },
            _ => {
                let _: MyOption<ABC> = internal___variable;
                ()
            },
        }
    }
}

enum ABC {
    A,
    B,
    C,
    D,
    E,
    F,
}

impl Eq for ABC {
    fn eq(self, other: Self) -> bool {
        {
            let internal___variable: (Self, Self) = (self, other);
            match internal___variable {
                (internal_match_variable_0, internal_match_variable_1) => match internal_match_variable_1 {
                    Self::A => match internal_match_variable_0 {
                        Self::A => true,
                        _ => {
                            let _: (Self, Self) = internal___variable;
                            false
                        },
                    },
                    Self::B => match internal_match_variable_0 {
                        Self::B => true,
                        _ => {
                            let _: (Self, Self) = internal___variable;
                            false
                        },
                    },
                    Self::C => match internal_match_variable_0 {
                        Self::C => true,
                        _ => {
                            let _: (Self, Self) = internal___variable;
                            false
                        },
                    },
                    Self::D => match internal_match_variable_0 {
                        Self::D => true,
                        _ => {
                            let _: (Self, Self) = internal___variable;
                            false
                        },
                    },
                    Self::E => match internal_match_variable_0 {
                        Self::E => true,
                        Self::F => {
                            let _: (Self, Self) = internal___variable;
                            false
                        },
                        _ => {
                            let _: (Self, Self) = internal___variable;
                            false
                        },
                    },
                    Self::F => match internal_match_variable_0 {
                        Self::F => true,
                        _ => {
                            let _: (Self, Self) = internal___variable;
                            false
                        },
                    },
                },
            }
        }
    }
}

fn abc_tests() {
    let mut tuple: (ABC, ABC) = (ABC::A, ABC::B);
    let _: Field = {
        let internal___variable: (ABC, ABC) = tuple;
        match internal___variable {
            (internal_match_variable_0, internal_match_variable_1) => match internal_match_variable_0 {
                ABC::A => {
                    let _: ABC = internal_match_variable_1;
                    1
                },
                ABC::B => match internal_match_variable_1 {
                    ABC::A => {
                        let _: ABC = internal_match_variable_0;
                        2
                    },
                    ABC::B => {
                        let _: ABC = internal_match_variable_0;
                        3
                    },
                    ABC::C => {
                        let _: ABC = internal_match_variable_0;
                        4
                    },
                    ABC::D => {
                        let _: ABC = internal_match_variable_0;
                        5
                    },
                    ABC::E => 6,
                    ABC::F => {
                        let _: (ABC, ABC) = internal___variable;
                        0
                    },
                },
                ABC::C => match internal_match_variable_1 {
                    ABC::A => {
                        let _: ABC = internal_match_variable_0;
                        2
                    },
                    ABC::B => {
                        let _: ABC = internal_match_variable_0;
                        3
                    },
                    ABC::C => {
                        let _: ABC = internal_match_variable_0;
                        4
                    },
                    ABC::D => {
                        let _: ABC = internal_match_variable_0;
                        5
                    },
                    ABC::E => {
                        let _: (ABC, ABC) = internal___variable;
                        0
                    },
                    ABC::F => 7,
                },
                _ => match internal_match_variable_1 {
                    ABC::A => {
                        let _: ABC = internal_match_variable_0;
                        2
                    },
                    ABC::B => {
                        let _: ABC = internal_match_variable_0;
                        3
                    },
                    ABC::C => {
                        let _: ABC = internal_match_variable_0;
                        4
                    },
                    ABC::D => {
                        let _: ABC = internal_match_variable_0;
                        5
                    },
                    _ => {
                        let _: (ABC, ABC) = internal___variable;
                        0
                    },
                },
            },
        }
    };
}

fn match_on_structs() {
    let foo: MyStruct = MyStruct { x: 10, y: 20 };
    {
        let internal___variable: MyStruct = foo;
        match internal___variable {
            MyStruct { x: internal_match_variable_0, y: internal_match_variable_1 } => {
                let y: Field = internal_match_variable_1;
                {
                    let x: i32 = internal_match_variable_0;
                    {
                        assert(x == 10);
                        assert(y == 20);
                    }
                }
            },
        }
    };
    {
        let internal___variable: MyOption<MyStruct> = MyOption::Some(foo);
        match internal___variable {
            MyOption::<MyStruct>::None => fail(),
            MyOption::<MyStruct>::Maybe => fail(),
            MyOption::<MyStruct>::Some(internal_match_variable_0) => match internal_match_variable_0 {
                MyStruct { x: internal_match_variable_0, y: internal_match_variable_1 } => {
                    let y2: Field = internal_match_variable_1;
                    {
                        let x2: i32 = internal_match_variable_0;
                        {
                            assert(x2 == 10);
                            assert(y2 == 20);
                        }
                    }
                },
            },
        }
    }
}

struct MyStruct {
    x: i32,
    y: Field,
}
