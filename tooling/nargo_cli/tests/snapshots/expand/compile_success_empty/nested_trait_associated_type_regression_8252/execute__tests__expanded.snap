---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
trait TraitWithAssociatedConstant {
    type N;

    fn foo(_: Self) -> bool {
        true
    }
}

struct Foo {
}

impl TraitWithAssociatedConstant for Foo {
    type N = 42;

    fn foo(_: Self) -> bool {
        true
    }
}

struct Bar {
}

impl TraitWithAssociatedConstant for Bar {
    type N = 43;

    fn foo(_: Self) -> bool {
        true
    }
}

struct Wrapper<T> {
    inner: T,
}

impl<V> TraitWithAssociatedConstant for Wrapper<V> where V: TraitWithAssociatedConstant {
    type N = <V as TraitWithAssociatedConstant>::N;

    fn foo(_: Self) -> bool where V: TraitWithAssociatedConstant {
        true
    }
}

impl<U> Eq for Wrapper<U> where U: TraitWithAssociatedConstant {
    fn eq(self, _other: Self) -> bool where U: TraitWithAssociatedConstant {
        TraitWithAssociatedConstant::foo(self.inner)
    }
}

fn main() {
    let wrapper: Wrapper<Foo> = Wrapper::<Foo> { inner: Foo { }};
    assert(wrapper == wrapper);
    assert(wrapper.eq(wrapper));
    assert(Eq::eq(wrapper, wrapper));
    assert(wrapper == wrapper);
    let wrapper: Wrapper<Bar> = Wrapper::<Bar> { inner: Bar { }};
    assert(wrapper == wrapper);
    let wrapper: Wrapper<Wrapper<Foo>> = Wrapper::<Wrapper<Foo>> { inner: Wrapper::<Foo> { inner: Foo { }}};
    assert(wrapper == wrapper);
    let wrapper: Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Foo>>>>>>>> = Wrapper::<Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Foo>>>>>>>> { inner: Wrapper::<Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Foo>>>>>>> { inner: Wrapper::<Wrapper<Wrapper<Wrapper<Wrapper<Wrapper<Foo>>>>>> { inner: Wrapper::<Wrapper<Wrapper<Wrapper<Wrapper<Foo>>>>> { inner: Wrapper::<Wrapper<Wrapper<Wrapper<Foo>>>> { inner: Wrapper::<Wrapper<Wrapper<Foo>>> { inner: wrapper}}}}}};
    assert(wrapper == wrapper);
}

// Warning: the generated code has syntax errors
