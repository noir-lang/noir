---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::append::Append;

fn main() {
    let slice: [u32] = &[1, 2, 3, 4, 5];
    let odds: [u32] = slice.filter(|x: u32| -> bool { (x % 2) == 1 });
    assert(odds == &[1, 3, 5]);
    let odds_and_evens: [u32] = append_three(odds, &[100], &[2, 4]);
    assert(odds_and_evens == &[1, 3, 5, 100, 2, 4]);
}

fn append_three<T>(one: T, two: T, three: T) -> T
where
    T: Append,
{
    Append::append(
        Append::append(
            Append::append(Append::append(Append::empty(), one), two),
            three,
        ),
        Append::empty(),
    )
}
