---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn ret_normal_lambda1() -> fn() -> Field {
    || -> Field 10
}

fn ret_closure1() -> fn[(Field,)]() -> Field {
    let x: Field = 20;
    || -> Field { x + 10 }
}

fn ret_closure2() -> fn[(Field, Field)]() -> Field {
    let x: Field = 20;
    let y: Field = 10;
    || -> Field { (x + y) + 10 }
}

fn ret_closure3() -> fn[(u32, u64)]() -> u64 {
    let x: u32 = 20;
    let y: u64 = 10;
    || -> u64 { ((x as u64) + y) + 10 }
}

fn accepts_closure1(f: fn[(Field,)]() -> Field) -> Field {
    f()
}

fn accepts_closure2(f: fn[(Field,)]() -> Field) -> fn[(Field,)]() -> Field {
    f
}

fn accepts_closure3(f: fn[(u32, u64)]() -> u64) -> u64 {
    f()
}

fn add_results<Env1, Env2>(f1: fn[Env1]() -> Field, f2: fn[Env2]() -> Field) -> Field {
    f1() + f2()
}

fn map<T, U, let N: u32, Env>(arr: [T; N], f: fn[Env](T) -> U) -> [U; N] {
    let first_elem: U = f(arr[0]);
    let mut ret: [U; N] = [first_elem; N];
    for i in 1..N {
        ret[i] = f(arr[i]);
    }
    ret
}

fn main() {
    assert(ret_normal_lambda1()() == 10);
    assert(ret_closure1()() == 30);
    assert(ret_closure2()() == 40);
    assert(ret_closure3()() == 40);
    let x: Field = 50;
    assert(accepts_closure1(|| -> Field x) == 50);
    assert(accepts_closure2(|| -> Field { x + 10 })() == 60);
    let y: u32 = 30;
    let z: u64 = 40;
    assert(accepts_closure3(|| -> u64 { (y as u64) + z }) == 70);
    let w: Field = 50;
    assert(add_results(|| -> Field 100, || -> Field x) == 150);
    assert(add_results(|| -> Field { x + 100 }, || -> Field { w + x }) == 250);
    let arr: [Field; 4] = [1, 2, 3, 4];
    assert(map(arr, |n: Field| -> Field { n + 1 }) == [2, 3, 4, 5]);
    assert(map(arr, |n: Field| -> Field { n + x }) == [51, 52, 53, 54]);
}
