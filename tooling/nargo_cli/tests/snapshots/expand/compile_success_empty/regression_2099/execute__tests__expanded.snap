---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use ec::tecurve::affine::{Curve as AffineCurve, Point as Gaffine};

fn main() {
    let bjj_affine: AffineCurve = AffineCurve::new(
        168700,
        168696,
        Gaffine::new(
            995203441582195749578291179787384436505546430278305826713579947235728471134,
            5472060717959818805561601436314318772137091100104008585924551046643952123905,
        ),
    );
    let p1_affine: Gaffine = Gaffine::new(
        -4110690748039341266466498965601542846832621488231095686958631064837293627349,
        2626589144620713026669568689430873010625803728049924121243784502389097019475,
    );
    let p2_affine: Gaffine = Gaffine::new(
        -5347602748265119087809529706465792281576595710921647260864572264588803456682,
        -1069197497168313054811045710160399830141371506782274462422079281019300523306,
    );
    let _p3_affine: Gaffine = bjj_affine.add(p1_affine, p2_affine);
    let bjj_swcurve_affine: ec::swcurve::affine::Curve = bjj_affine.into_swcurve();
    let p1_swcurve_affine: ec::swcurve::affine::Point = bjj_affine.map_into_swcurve(p1_affine);
    let p2_swcurve_affine: ec::swcurve::affine::Point = bjj_affine.map_into_swcurve(p2_affine);
    let _p3_swcurve_affine_from_add: ec::swcurve::affine::Point =
        bjj_swcurve_affine.add(p1_swcurve_affine, p2_swcurve_affine);
    assert(bjj_swcurve_affine.contains(p1_swcurve_affine));
}
