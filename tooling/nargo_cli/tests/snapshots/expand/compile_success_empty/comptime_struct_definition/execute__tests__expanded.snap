---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
pub struct MyType<A, B, C> {
    field1: [A; 10],
    field2: (B, C),
}

pub struct I32AndField {
    x: i32,
    y: Field,
}

comptime fn my_comptime_fn(typ: TypeDefinition) {
    let _: Type = typ.as_type();
    assert(typ.generics().len() == 3);
    assert(typ.fields_as_written().len() == 2);
    assert(typ.name() == quote { MyType });
}

comptime fn mutate_struct_fields(s: TypeDefinition) {
    let fields: [(Quoted, Type)] =
        &[(quote { x }, quote { i32 }.as_type()), (quote { y }, quote { Field }.as_type())];
    s.set_fields(fields);
}

mod foo {
    pub struct Foo {}

    comptime fn attr(s: TypeDefinition) {
        assert(s.module().name() == quote { foo });
    }

    pub struct Bar<T> {}

    comptime fn add_generic(s: TypeDefinition) {
        assert(s.generics().len() == 0);
        let new_generic: Type = s.add_generic("T");
        let generics: [(Type, Option<Type>)] = s.generics();
        assert(generics.len() == 1);
        let (typ, numeric): (Type, Option<Type>) = generics[0];
        assert(typ == new_generic);
        assert(numeric.is_none());
    }
}

fn main() {
    ()
}
