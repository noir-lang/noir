---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::hash::poseidon2::Poseidon2;

global NUM_HASHES: u32 = 2;

global HASH_LENGTH: u32 = 10;

#[fold]
pub fn poseidon_hash<let N: u32>(inputs: [Field; N]) -> Field {
    Poseidon2::hash(inputs, inputs.len())
}

fn main(to_hash: [[Field; 10]; 2], enable: [bool; 2]) -> pub [Field; 3] {
    let mut result: [Field; 3] = [0; 3];
    for i in 0..NUM_HASHES {
        let enable: bool = enable[i];
        let to_hash: [Field; 10] = to_hash[i];
        if enable {
            result[i] = poseidon_hash(to_hash);
        }
    }
    let mut double_preimage: [Field; 20] = [0; 20];
    for i in 0..HASH_LENGTH * 2 {
        double_preimage[i] = to_hash[0][i % HASH_LENGTH];
    }
    result[NUM_HASHES] = poseidon_hash(double_preimage);
    result
}
