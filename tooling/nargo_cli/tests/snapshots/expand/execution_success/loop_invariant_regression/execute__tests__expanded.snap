---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
global U32_MAX: u32 = 4294967295;

fn main(x: u32, y: u32) {
    simple_loop(4, x, y);
    loop_with_predicate(4, x, y);
    array_read_loop(4, x);
    // Safety: comment added by `nargo expand`
    unsafe {
        loop_with_break_under_predicate(4, y, x);
    }
}

fn simple_loop(upper_bound: u32, x: u32, y: u32) {
    for _ in 0..upper_bound {
        let mut z: u32 = x * y;
        z = z * x;
        assert(z == 12);
    }
}

fn loop_with_predicate(upper_bound: u32, x: u32, y: u32) {
    for _ in 0..upper_bound {
        if x == 5 {
            let mut z: u32 = U32_MAX * y;
            assert(z == 12);
        }
    }
}

fn array_read_loop(upper_bound: u32, x: u32) {
    let arr: [u32; 5] = [2; 5];
    for i in 0..upper_bound {
        for j in 0..upper_bound {
            for _ in 0..upper_bound {
                assert(arr[i] == x);
                assert(arr[j] == x);
            }
        }
    }
}

unconstrained fn loop_with_break_under_predicate(upper_bound: u32, x: u32, y: u32) {
    for _ in 0..upper_bound {
        if x == 3 { break; };
        let mut z: u32 = U32_MAX * y;
        assert(z == 12);
    }
}
