---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main(mut x: Field) {
    add1(&mut x);
    assert(x == 3);
    let mut s: S = S { y: x };
    s.add2();
    assert(s.y == 5);
    let s_ref: &mut S = &mut s;
    s_ref.add2();
    assert(s.y == 7);
    let mut a: Field = 0;
    mutate_copy(a);
    assert(a == 0);
    let mut nested_allocations: Nested = Nested { y: &mut &mut 0 };
    add1(*nested_allocations.y);
    assert(**nested_allocations.y == 1);
    let mut c: C = C { foo: 0, bar: &mut C2 { array: &mut [1, 2] } };
    *(c.bar.array) = [3, 4];
    assert(*c.bar.array == [3, 4]);
    regression_1887();
    regression_2054();
    regression_2030();
    regression_2255();
    regression_6443();
    assert(x == 3);
    regression_2218_if_inner_if(x, 10);
    regression_2218_if_inner_else(20, x);
    regression_2218_else(x, 3);
    regression_2218_loop(x, 10);
    regression_2560(s_ref);
}

fn add1(x: &mut Field) {
    *(x) = *x + 1;
}

struct S {
    y: Field,
}

impl S {
    fn add2(&mut self) {
        self.y = self.y + 2;
    }

    fn get_y(self) -> Field {
        self.y
    }
}

struct Nested {
    y: &mut &mut Field,
}

struct C {
    foo: Field,
    bar: &mut C2,
}

struct C2 {
    array: &mut [Field; 2],
}

fn mutate_copy(mut a: Field) {
    a = 7;
}

fn regression_1887() {
    let foo: &mut Foo = &mut Foo { bar: Bar { x: 0 } };
    foo.bar.mutate();
    assert(foo.bar.x == 32);
}

struct Foo {
    bar: Bar,
}

struct Bar {
    x: Field,
}

impl Bar {
    fn mutate(&mut self) {
        self.x = 32;
    }
}

fn regression_2054() {
    let mut x: Field = 2;
    let z: Field = x;
    x = x + 1;
    assert(z == 2);
}

fn regression_2030() {
    let ref: &mut Field = &mut 0;
    let mut array: [&mut Field; 2] = [ref, ref];
    let _: Field = *array[0];
    *(array[0]) = 1;
}

fn regression_2255() {
    let x: &mut Field = &mut 0;
    regression_2255_helper(x);
    assert(*x == 1);
}

fn regression_2255_helper(mut x: &mut Field) {
    *(x) = 1;
}

fn regression_6443() {
    let x: &mut Field = &mut 0;
    regression_6443_helper(x);
    assert(*x == 1);
}

fn regression_6443_helper(x: &mut Field) {
    *(x) = 1;
}

fn regression_2218(x: Field, y: Field) -> Field {
    let q: &mut &mut Field = &mut &mut 0;
    let q1: &mut Field = *q;
    let q2: &mut Field = *q;
    if x != y {
        *(q1) = 1;
        if x != 20 {
            *(q1) = 10;
            *(q2) = 2;
            assert(*q1 == 2);
        } else {
            *(q2) = 15;
            assert(*q1 == 15);
        }
    } else {
        *(q2) = 20;
        assert(*q1 == 20);
    };
    let value: Field = *q1;
    value
}

fn regression_2218_if_inner_if(x: Field, y: Field) {
    let value: Field = regression_2218(x, y);
    assert(value == 2);
}

fn regression_2218_if_inner_else(x: Field, y: Field) {
    let value: Field = regression_2218(x, y);
    assert(value == 15);
}

fn regression_2218_else(x: Field, y: Field) {
    let value: Field = regression_2218(x, y);
    assert(value == 20);
}

fn regression_2218_loop(x: Field, y: Field) {
    let q: &mut &mut Field = &mut &mut 0;
    let q1: &mut Field = *q;
    let q2: &mut Field = *q;
    for _ in 0..1 {
        if x != y {
            *(q1) = 10;
            *(q2) = 2;
            assert(*q1 == 2);
        } else {
            *(q2) = 20;
            assert(*q1 == 20);
        }
    }
    assert(*q1 == 2);
    for _ in 0..1 {
        for _ in 0..5 {
            if x != y {
                *(q1) = 1;
                if x != 20 {
                    *(q1) = 10;
                    *(q2) = 2;
                    assert(*q1 == 2);
                }
            } else {
                *(q2) = 20;
                assert(*q1 == 20);
            }
        }
        if x != y {
            *(q1) = 1;
            for _ in 0..5 {
                if x != 20 {
                    *(q1) = 10;
                    *(q2) = 2;
                    assert(*q1 == 2);
                }
            }
        } else {
            *(q2) = 20;
            assert(*q1 == 20);
        }
    }
    assert(*q1 == 2);
    if x != y {
        for _ in 0..5 {
            if x != y {
                *(q1) = 1;
                if x != 20 {
                    *(q1) = 10;
                    *(q2) = 2;
                    assert(*q1 == 2);
                }
            }
        }
    } else {
        *(q2) = 20;
        assert(*q1 == 20);
    };
    assert(*q1 == 2);
}

fn regression_2560(s_ref: &mut S) {
    assert(s_ref.get_y() == 7);
}
