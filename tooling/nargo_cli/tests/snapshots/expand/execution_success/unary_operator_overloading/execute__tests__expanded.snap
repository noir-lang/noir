---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::ops::{arith::Neg, bit::Not};

fn main(x: u32) {
    let wx: Wrapper = Wrapper::new(x as i32);
    let ex: i32 = 3;
    assert(-wx.inner == -ex);
    assert(!wx.inner == !ex);
    let x: Field = 3;
    assert(-3 == -x);
}

struct Wrapper {
    inner: i32,
}

impl Wrapper {
    fn new(inner: i32) -> Self {
        Self { inner: inner }
    }
}

impl Neg for Wrapper {
    fn neg(self) -> Self {
        Wrapper::new(-self.inner)
    }
}

impl Not for Wrapper {
    fn not(self) -> Self {
        Wrapper::new(!self.inner)
    }
}
