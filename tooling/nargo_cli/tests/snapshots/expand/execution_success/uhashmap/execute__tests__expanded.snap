---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::{collections::umap::UHashMap, hash::{BuildHasherDefault, poseidon2::Poseidon2Hasher}};

type K = Field;

type V = Field;

struct Entry {
    key: Field,
    value: Field,
}

global HASHMAP_LEN: u32 = 6;

global FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| -> bool a.lt(b);

global K_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| -> bool a.lt(b);

global V_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| -> bool a.lt(b);

global KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| -> bool a.0.lt(b.0);

global ALLOCATE_HASHMAP: fn() -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> =
    || -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> Default::default();

unconstrained fn main(input: [Entry; 6]) {
    test_sequential(input[0].key, input[0].value);
    test_multiple_equal_insert(input[1].key, input[1].value);
    test_value_override(input[2].key, input[2].value, input[3].value);
    test_insert_and_methods(input);
    test_hashmaps_equality(input);
    test_retain();
    test_iterators();
    test_mut_iterators();
    doc_tests();
}

unconstrained fn test_sequential(key: K, value: V) {
    let mut hashmap: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =
        ALLOCATE_HASHMAP();
    assert(hashmap.is_empty(), "New UHashMap should be empty.");
    hashmap.insert(key, value);
    assert(hashmap.len() == 1, "UHashMap after one insert should have a length of 1 element.");
    let got: Option<Field> = hashmap.get(key);
    assert(got.is_some(), "Got none value.");
    let got: Field = got.unwrap_unchecked();
    assert(value == got, f"Inserted {value} but got {got} for the same key.");
    hashmap.remove(key);
    assert(
        hashmap.is_empty(),
        "UHashMap after one insert and corresponding removal should be empty.",
    );
    let got: Option<Field> = hashmap.get(key);
    assert(got.is_none(), "Value has been removed, but is still available (not none).");
}

unconstrained fn test_multiple_equal_insert(key: K, value: V) {
    let mut hashmap: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =
        ALLOCATE_HASHMAP();
    assert(hashmap.is_empty(), "New UHashMap should be empty.");
    for _ in 0..HASHMAP_LEN {
        hashmap.insert(key, value);
    }
    let len: u32 = hashmap.len();
    assert(len == 1, f"UHashMap length must be 1, got {len}.");
    let got: Option<Field> = hashmap.get(key);
    assert(got.is_some(), "Got none value.");
    let got: Field = got.unwrap_unchecked();
    assert(value == got, f"Inserted {value} but got {got} for the same key.");
}

unconstrained fn test_value_override(key: K, value: V, new_value: V) {
    let mut hashmap: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =
        ALLOCATE_HASHMAP();
    assert(hashmap.is_empty(), "New hashmap should be empty.");
    hashmap.insert(key, value);
    hashmap.insert(key, new_value);
    assert(hashmap.len() == 1, "UHashMap length is invalid.");
    let got: Option<Field> = hashmap.get(key);
    assert(got.is_some(), "Got none value.");
    let got: Field = got.unwrap_unchecked();
    assert(got == new_value, f"Expected {new_value}, but got {got}.");
}

unconstrained fn test_insert_and_methods(input: [Entry; 6]) {
    let mut hashmap: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =
        ALLOCATE_HASHMAP();
    assert(hashmap.is_empty(), "New UHashMap should be empty.");
    {
        let ___i0: [Entry; 6] = input;
        for ___i1 in 0..___i0.len() {
            let entry: Entry = ___i0[___i1];
            {
                println(f"Inserting {entry}");
                hashmap.insert(entry.key, entry.value);
            }
        }
    };
    println(hashmap.len());
    assert(hashmap.len() == HASHMAP_LEN, "hashmap.len() does not match input length.");
    {
        let ___i0: [Entry; 6] = input;
        for ___i1 in 0..___i0.len() {
            let entry: Entry = ___i0[___i1];
            {
                let entry_key: Field = entry.key;
                assert(hashmap.contains_key(entry.key), f"Not found inserted key {entry_key}.");
            }
        }
    };
    hashmap.clear();
    assert(hashmap.is_empty(), "UHashMap after clear() should be empty.");
}

unconstrained fn test_retain() {
    let mut hashmap: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =
        ALLOCATE_HASHMAP();
    assert(hashmap.is_empty(), "New UHashMap should be empty.");
    let (key, value): (Field, Field) = (5, 11);
    hashmap.insert(key, value);
    let (key, value): (Field, Field) = (2, 13);
    hashmap.insert(key, value);
    let (key, value): (Field, Field) = (11, 5);
    hashmap.insert(key, value);
    let predicate: fn(Field, Field) -> bool = |key: K, value: V| -> bool { (key * value) == 55 };
    hashmap.retain(predicate);
    assert(hashmap.len() == 2, "UHashMap should have retained 2 elements.");
    assert(
        hashmap.get(2).is_none(),
        "Pair should have been removed, since it does not match predicate.",
    );
}

unconstrained fn test_hashmaps_equality(input: [Entry; 6]) {
    let mut hashmap_1: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =
        ALLOCATE_HASHMAP();
    let mut hashmap_2: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =
        ALLOCATE_HASHMAP();
    {
        let ___i0: [Entry; 6] = input;
        for ___i1 in 0..___i0.len() {
            let entry: Entry = ___i0[___i1];
            {
                hashmap_1.insert(entry.key, entry.value);
                hashmap_2.insert(entry.key, entry.value);
            }
        }
    };
    assert(hashmap_1 == hashmap_2, "CtHashMaps should be equal.");
    hashmap_2.remove(input[0].key);
    assert(hashmap_1 != hashmap_2, "CtHashMaps should not be equal.");
}

unconstrained fn test_iterators() {
    let mut hashmap: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =
        ALLOCATE_HASHMAP();
    hashmap.insert(2, 3);
    hashmap.insert(5, 7);
    hashmap.insert(11, 13);
    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);
    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);
    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);
    assert(keys == [2, 5, 11], "Got incorrect iteration of keys.");
    assert(values == [3, 7, 13], "Got incorrect iteration of values.");
    assert(entries == [(2, 3), (5, 7), (11, 13)], "Got incorrect iteration of entries.");
}

unconstrained fn test_mut_iterators() {
    let mut hashmap: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =
        ALLOCATE_HASHMAP();
    hashmap.insert(2, 3);
    hashmap.insert(5, 7);
    hashmap.insert(11, 13);
    let f: fn(Field) -> Field = |k: K| -> K { k * 3 };
    hashmap.iter_keys_mut(f);
    let f: fn(Field) -> Field = |v: V| -> V { v * 5 };
    hashmap.iter_values_mut(f);
    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);
    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);
    assert(keys == [6, 15, 33], f"Got incorrect iteration of keys: {keys}");
    assert(values == [15, 35, 65], "Got incorrect iteration of values.");
    let f: fn(Field, Field) -> (Field, Field) = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };
    hashmap.iter_mut(f);
    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);
    assert(entries == [(12, 30), (30, 70), (66, 130)], "Got incorrect iteration of entries.");
}

type MyMap = UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>>;

/// Tests examples from the stdlib cthashmap documentation
unconstrained fn doc_tests() {
    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> = Default::default();
    assert(hashmap.is_empty());
    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();
    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> =
        UHashMap::with_hasher(my_hasher);
    assert(hashmap.is_empty());
    let mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> = Default::default();
    map.insert(12, 42);
    assert(map.len() == 1);
    get_example(map);
    map.remove(12);
    assert(map.is_empty());
    map.remove(12);
    assert(map.is_empty());
    assert(map.is_empty());
    map.insert(1, 2);
    assert(!map.is_empty());
    map.remove(1);
    assert(map.is_empty());
    assert(map.len() == 0);
    map.insert(1, 2);
    map.insert(3, 4);
    map.insert(5, 6);
    assert(map.len() == 3);
    map.insert(3, 7);
    assert(map.len() == 3);
    map.remove(1);
    assert(map.len() == 2);
    let empty_map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> = Default::default();
    assert(empty_map.len() == 0);
    println(empty_map.capacity());
    assert(!map.is_empty());
    map.clear();
    assert(map.is_empty());
    if map.contains_key(7) {
        let value: Option<Field> = map.get(7);
        assert(value.is_some());
    } else {
        println("No value for key 7!");
    };
    entries_examples(map);
    iter_examples(map);
    map.retain(|k: Field, v: Field| -> bool { (k != 0) & (v != 0) });
    let mut map1: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = Default::default();
    let mut map2: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = Default::default();
    map1.insert(1, 2);
    map1.insert(3, 4);
    map2.insert(3, 4);
    map2.insert(1, 2);
    assert(map1 == map2);
}

fn get_example(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {
    // Safety: comment added by `nargo expand`
    let x: Option<Field> = unsafe { map.get(12) };
    if x.is_some() {
        assert(x.unwrap() == 42);
    }
}

fn entries_examples(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {
    let entries: [(Field, Field)] = map.entries();
    for i in 0..map.capacity() {
        if i < entries.len() {
            let (key, value): (Field, Field) = entries[i];
            println(f"{key} -> {value}");
        }
    }
    let keys: [Field] = map.keys();
    {
        let ___i0: [Field] = keys;
        for ___i1 in 0..___i0.len() {
            let key: Field = ___i0[___i1];
            {
                // Safety: comment added by `nargo expand`
                let value: Field = unsafe { map.get(key) }.unwrap_unchecked();
                println(f"{key} -> {value}");
            }
        }
    };
    let values: [Field] = map.values();
    {
        let ___i0: [Field] = values;
        for ___i1 in 0..___i0.len() {
            let value: Field = ___i0[___i1];
            {
                println(f"Found value {value}");
            }
        }
    }
}

unconstrained fn iter_examples(
    mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>,
) {
    map.iter_mut(|k: Field, v: Field| -> (Field, Field) (k + 1, v * 2));
    map.iter_keys_mut(|k: Field| -> Field { k * 2 });
    map.iter_values_mut(|v: Field| -> Field { v / 2 });
}
