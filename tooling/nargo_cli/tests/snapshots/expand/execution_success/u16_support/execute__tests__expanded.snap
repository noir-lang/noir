---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main(x: u16) {
    test_u16(x);
    // Safety: comment added by `nargo expand`
    unsafe {
        test_u16_unconstrained(x);
    }
}

unconstrained fn test_u16_unconstrained(x: u16) {
    test_u16(x)
}

fn test_u16(x: u16) {
    let t1: u16 = 1234;
    let t2: u16 = 4321;
    let t: u16 = t1 + t2;
    let t4: u16 = t - t2;
    assert(t4 == t1);
    let mut small_int: u16 = x as u16;
    let shift: u16 = small_int << (x as u8);
    assert(shift == 8);
    assert((shift >> (x as u8)) == small_int);
    assert((shift >> 15) == 0);
    assert((shift << 15) == 0);
}
