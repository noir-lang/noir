---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
global TX_EFFECTS_HASH_INPUT_FIELDS: u32 = 256;

pub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {
    let mut v: Field = 1;
    let mut high: Field = 0 as Field;
    let mut low: Field = 0 as Field;
    for i in 0..15 {
        low = low + ((bytes32[(15 + 15) - i] as Field) * v);
        v = v * 256;
        high = high + ((bytes32[14 - i] as Field) * v);
    }
    low = low + ((bytes32[15] as Field) * v);
    low + (high * v)
}

pub fn blake3_to_field<let N: u32>(bytes_to_hash: [u8; N]) -> Field {
    let blake3_hashed: [u8; 32] = std::hash::blake3(bytes_to_hash);
    let hash_in_a_field: Field = field_from_bytes_32_trunc(blake3_hashed);
    hash_in_a_field
}

fn main(tx_effects_hash_input: [Field; 256]) -> pub Field {
    let mut hash_input_flattened: [u8; 8192] = [0; 8192];
    for offset in 0..TX_EFFECTS_HASH_INPUT_FIELDS {
        let input_as_bytes: [u8; 32] = tx_effects_hash_input[offset].to_be_bytes();
        for byte_index in 0..32 {
            {
                let i_3785: u32 = (offset * 32) + byte_index;
                hash_input_flattened[i_3785] = input_as_bytes[byte_index];
            }
        }
    }
    let blake3_digest: Field = blake3_to_field(hash_input_flattened);
    blake3_digest
}
