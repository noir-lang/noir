---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::hint::black_box;

fn main(a: u32, b: u32) {
    assert(loop_(5, a) == b);
    assert(loop_(5, 10) == b);
    assert(loop_(5, black_box(10)) == b);
    let arr: [u32; 5] = [a, a, a, a, a];
    assert(array_sum(arr) == b);
    assert(array_sum(black_box(arr)) == b);
    assert(slice_sum(arr.as_slice()) == b);
    assert(slice_sum(black_box(arr).as_slice()) == b);
    // Safety: comment added by `nargo expand`
    let s: u32 = unsafe { brillig_slice_sum(black_box(arr.as_slice())) };
    assert(s == b);
    let mut d: u32 = b;
    let mut c: u32 = 0;
    set_ref(&mut c, &mut d);
    assert(c == b);
    let mut c: u32 = 0;
    set_ref(&mut c, &mut black_box(d));
    assert(c == b);
    let mut c: u32 = 0;
    set_ref(&mut black_box(c), &mut d);
    assert(c == 0);
}

fn loop_(n: u32, k: u32) -> u32 {
    let mut sum: u32 = 0;
    for _ in 0..n {
        sum = sum + k;
    }
    sum
}

fn array_sum<let N: u32>(xs: [u32; N]) -> u32 {
    let mut sum: u32 = 0;
    for i in 0..N {
        sum = sum + xs[i];
    }
    sum
}

fn slice_sum(xs: [u32]) -> u32 {
    let mut sum: u32 = 0;
    {
        let ___i0: [u32] = xs;
        for ___i1 in 0..___i0.len() {
            let x: u32 = ___i0[___i1];
            {
                sum = sum + x;
            }
        }
    };
    sum
}

unconstrained fn brillig_slice_sum(xs: [u32]) -> u32 {
    let mut sum: u32 = 0;
    {
        let ___i0: [u32] = xs;
        for ___i1 in 0..___i0.len() {
            let x: u32 = ___i0[___i1];
            {
                sum = sum + x;
            }
        }
    };
    sum
}

fn set_ref(c: &mut u32, b: &mut u32) {
    *(c) = *b;
}
