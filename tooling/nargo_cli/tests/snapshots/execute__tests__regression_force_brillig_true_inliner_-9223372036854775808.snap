---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "3111179132618517644",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
