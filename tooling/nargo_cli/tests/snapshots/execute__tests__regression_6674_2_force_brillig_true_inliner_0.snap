---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "2516730096184199632",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VYzY7TMBCetPlz0lUreALeINm2tHsrEheOvAFhu70icQGJS8QZCYSExIUbdyQOiAs3JHgsNouHTr9M0i21V1pLkWN7PN/M58nYTkDbEtg6pCMKK/lta2PrgRgfXj4r2y6OK6UBXJf6l8VsZhT/HNo/NVZn4Ed/wfo98V8kVs/Deqtf+sK46eWTi/cRbePDl/+8fj79v9vjc259fd7hKzm04wSwSeAY4bcHDuYB4BFgEeBnftekDACP7UF++J25CxVbJ8pYAO+hghMqOLdR15jascPzDOm8rWy7OLKwHZHVFyp+SNsGIC/fyb7Lvnu2br7Rl+C7FjvDHu4wliU/ct7KDTelUfxzpPuUdcfudU/5W0uEbsxTKXDpCPvaeYrxM7DVV55KwR7kB/OUUWydKGOYD4yCYxQcTdfQoa7IoS6O0TF178Oe97/ePIW8sT+H5KkzW2t5CmMZ+/ryFOZ4yV0C3EWeuYsV7iLq5i4WY7HCHfc9IHfcJXQ97jDuYs/cpQp3MXVzJ/NrqnDHfY/IHXf/G3ee9oICc4/kLqVu7mTuMQp33PeY3HGnxZ0hPUev3PBT8V6TUbvwWC6w5fpiGUJb2t3w80roRTnElLHC+GPqjjHPPP2LI+ZJxpFR+BmAPHIcQd8T2vKEcSTvMn33mwntz1Ge7mIHx5GMdSxaHMn/CzcRR57Ogr1xlCj+HhpHzwRPPuIoJ5FLa/ccLZZ/Obqysd76iDEh8SOQf2HbkjOuwyPs3CyqcjOtNtW8Wq9n59Ud0E/Ak2v8ajFdnp/OzhdP59Nqen8vvvwnpd3vMeZv6/3+ta1d3O8DxZ4TZV7QURO175oaTt86eDqDl57PqTPfuRP/fUquGp/eAKccW5w/cG4sxqX8O6HzrX1vvift/2EiZN8Dfqrgy7kDwGf5j0Lnhw6fqMMn5kPjKhR6masxYMvY5PXMYGxl28VxZcY+5Xt4yoAnlv9k68b2L7TLU6bwJO9AuPfninymcMd8yTNfDnzlnvkaKXwNFHsikP9Mbb74DMV7p+TJ5z5/WeYNzldhR+tsI3D3rRFRe01Hirx2l5mAvFxfLV9ngKP915Pxi9+kHOO5Mn+4PjdcLM/WxdnmoirL8nRdXOw7N4zZplr4Ve/OSWyb93KUl7lNyn8T/n6nLS9XsnUbr5H71SN36D4c1rt9pm7LD+u2PGNnddtGHsvFmIzdpoxsW/IldbEdEcj/tG1ek1TM4fkTBT8F/B27lT681+eKfK7IN+vzg/XZWvru+j/6FSbol31oG8dOE9d/AM1MlUYFIQAA",
  "debug_symbols": "zZvbiiJBDIbfpa/7opJKJVW+yrIMHtpBEBUPC4v47muLJ3ScYYM/1I1YkuRL6f9HqKb2zaQb7T4/ZovpctMMfu2b+XI83M6Wi+Nqf2ib0Xo2n88+P+4/bkL/QvEUv1kNF/1ysx2ut82AzELbdItJ/7bQscJ0Nu+aQQqH9ilYWc6xGvk+9HfbkGDLJ2x5xZY3bPmMLV+g5TlgyxO2PGPLY13LWNcy1rWMdS2/cG2xS/ks4fvymfQcm0W/D2WhcyhrfOwkV9NJqaWTGKrphKrphKvpJFbTiVTTSaqmE62mk2pmbKxmxsZqZqxUM2Olmhkr1cxYqWbGSjUzVqqZsVLNjJVqZqxUM2Olmhmbqpmx6esZW4QvnRR5ymFHTnTkiCMnOXLUkWOOnOzIKf+fo8GR49CBOnSgDh2oQwfq0IE6dKAOHahDB+rQgTl0YA4dmEMH5tCBOXRgDh2YQwfm0IE5dGAOHWSHDrJDB9mhg/ylDjjEy78bB/vhOI84pwsg0uOBXhY0IKEBigYYGpDRgAIGlIAGEBrAaADayQXt5IJ2ckE7uaCdXN7g5Jiuj2pilkdAAQMoBDiB4ASGEyKcIHBCghMUTjA4IcMJcE8T3NME9zTBPf3iwb/k66lTop8Iqeg1uNgTIcEJCicYnJDhhIImvHgS/04CwQkMJ0Q4Ae5pecMvrbcjAH06AiB5g6dVr3tQfd7DG/yg+baHrI+ExOg9pPiOPZQroTz9DknghAQnKJxgcEKGEwqaoAHtOCU4geGECCcInJDgBIUTDE7IcAL8P87gnja4pw3r6cNx9We4ng1H8+58O2O6W4zvLmts/666h3sbq/Vy3E12666/wXG7vNF/22S5pVL6zk9LkpbotOy/KeLQEvOReiT/Aw==",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/regression_6674_2/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
