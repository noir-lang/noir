---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "3111179132618517644",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
