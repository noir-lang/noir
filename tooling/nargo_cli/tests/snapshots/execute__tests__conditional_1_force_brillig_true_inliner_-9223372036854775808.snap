---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "6472674703204639686",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndzRblQ5DAbgd5nrXiRxYju8ymqFCgyoUtWiUlZaId6dM6iTQdhJ9PtmtYP0MeHYyYmdaH6cPp0/fP/y/uHp8/O307t/fpwenz/evz48Px2ffvy8O314eXh8fPjy/s8/PqXLf3LW3+Db1/uny+dvr/cvr6d3Ncnd6fz06fi/3I6/4PPD4/n0rqWf/94dpMOkJJxknBScEE4qThpOGCeCEzz6BY8+4dEnPPqER5/w6BMefcKjT3j0CY9+9f/5Ta+EkyHuwITSGxGqhrgD03QlmtQQxUnfkEx/k5ZwknFScEI4cdNSyzX6Sib6reGEcSI4UZx0mHDCiRv9TvWNdIcUnBBOKk4aThgnghPFSYeJJJzg0Rc8+oJHX/Doix/93AcRQxgnghPFSYeJJpxknBScEE4qTvDoKx59xaOvePQVj373o9+ur9fezB6mZ5yUHemGEE4qThpO/OjLIMKGuHHJqdKbyan9vYkrKUVQjqASQRRBNYJaBHEEiY9YB5JikEZQD6CcIihHUIkgiqBJRvRbnLoY1CKIdyinbJCfEUceDZSTQRpBPYD8VtIO5e2DcFCJIIqgGkGTjFC+ZYRFHEESQRpBPYAoRVCOoBJBfkYcjbQRXOoG+RlxVOADMRnUIoj3yLw1SCJII6gHUE0RlCPI37KpjIRIZv2vNWBawHDASMBowHTctMk8z2WgzAblCCoRRBFUI6hFEEeQRFBkyvJkyurYSR0VlUE5gsoemZ0UUwTVCGoR5Af32Mtd0bFDM0giSAPIb50dJzYDUbGoRJD/yI9EHsMT8/T8btgOcQRJBGkE9QDy+2I7lCOoRBBFUCQjNJIRGskIjWSERjJCIxnRJxnR85iEyex4e46gEkE1sEb4DbDjmHa81IhNVey3wHbIDy5VWSGNoI4jmrTbNihH0GQtl9vTk24QRVCNoBZBHEESQRpBPYAm7bYNyhEUyYgcyYgcyYgcyYgcyYgcyYhJu436DXU2qAfQpN32B6qmhUiTdtsGlQiiCPIzotLYYlfTkaFJu22DOIL8OHEeHU42d3lo0gTbIP+RV25jeGyGN+lnbVCNoBZBHEESQRpBPYAm/awN8uPUbrV7M/eIyO9N7ZD/yFsdWd6qHZ7/9JjGNzGpQZOp0W5Zbo64aNI32qC8RaaXSpNuDst4EGzX8kljZoP8hOU+kKRqkEZQD6BJN2eD/Ecut52lVBOnSTdng/ypIe02PBvcSY9FdBQoosUg/+lpGWmkZN65/uWkrLfprmJeapMeywaVCKIIqhHUIogjSCJII6gHkEYyQiMZMemxrLN80mORPjq+amp3mvRYNogjSCJII6gH0KTHskF5j8x+b9IuWa9Gk3bJBgmOqt+PaONkv+VqiDu4Vq/Z2moxxI3R6gp79YvV5bf4pWrja3iamXrVL1TXpOGEcSI4cWdPk+tbuamJvl+eLolfnK5JxokffWmDiCGEk4qThhPGieBEceJHn8cUM/eoql/yrknGScEJ4aTipOGEcSI4UZzg0a949P2KmMfRJZuTy+qXtlyvS5+tHKt/hYL79VskmeT3K9Q1yf5brIy3GBlS4Beff6dhTSpOGk4YJ4ITxQm+u+CMkwpnsn+vYE385G95nvz+nYI1UZx0mPg19ZpknBScELzC+LX0mjSc4EufX0WvicLEL33KODApYknBCeGk4qThhHEiOFGcdJQ0v+Jbk4wTf3M1dqNswKR6HT3Fng1RnHSYTM5nlyTjpOCEcFJx0nCCx8UvEeV6XVuTAYyCyS3b65jM3ddWFBYdFX49tRQZFgUWBAs/sdJoe6ZuSMMJ40RwojjpMJmcLy7JLvRW4KvK7Nb74ksmVzBGV7SayVgFJ4qTDpPJueWSZJwUnPiL/e1cwRxGt9nJ6Io0nDBOBCeKkw6TyRHq7YiSzcI3OUBdkoITwknFScMJ40RwojjpMBE8+oJv9ARfkgXf6Am+0RN8ozc79l0RfJsv+HZS8G2+4tt8xaOvePQVLiSbKk7wQrKDheTP49N/9y8P9x8ez28/kvf5+9PHP34z7/X/r+e/fj7v68vzx/On7y/nyw/p3X5D7/LVrZc7znQM5TI/errLKR0fftdr9Tg7r8qXj5cgcUl3XMoxhGMYvwA=",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/conditional_1/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
