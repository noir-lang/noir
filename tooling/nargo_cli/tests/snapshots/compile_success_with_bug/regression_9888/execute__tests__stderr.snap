---
source: tooling/nargo_cli/tests/execute.rs
expression: stderr
---
warning: Unnecessary `unsafe` block
   ┌─ src/main.nr:14:75
   │
14 │                         (item_c, _item_d, _item_e, _item_f, item_g) => if unsafe {
   │                                                                           ------ Because it's nested inside another `unsafe` block
   │

warning: Unnecessary `unsafe` block
   ┌─ src/main.nr:22:60
   │
22 │                                             if (item_c.2 > unsafe { func_4([]) }[1532016929_u32].3) {
   │                                                            ------ Because it's nested inside another `unsafe` block
   │

warning: Unnecessary `unsafe` block
   ┌─ src/main.nr:25:52
   │
25 │                                                 if unsafe { func_3(G_B, [G_A, G_A], item_g.2) } {
   │                                                    ------ Because it's nested inside another `unsafe` block
   │

warning: Unsafe block must have a safety comment above it
  ┌─ src/main.nr:8:14
  │
8 │     let _n = unsafe {
  │              ------ The comment must start with the "Safety: " word
  │

warning: Unsafe block must have a safety comment above it
   ┌─ src/main.nr:14:75
   │
14 │                         (item_c, _item_d, _item_e, _item_f, item_g) => if unsafe {
   │                                                                           ------ The comment must start with the "Safety: " word
   │

warning: Unsafe block must have a safety comment above it
   ┌─ src/main.nr:22:60
   │
22 │                                             if (item_c.2 > unsafe { func_4([]) }[1532016929_u32].3) {
   │                                                            ------ The comment must start with the "Safety: " word
   │

warning: Unsafe block must have a safety comment above it
   ┌─ src/main.nr:25:52
   │
25 │                                                 if unsafe { func_3(G_B, [G_A, G_A], item_g.2) } {
   │                                                    ------ The comment must start with the "Safety: " word
   │

warning: Return variable contains a constant value
   ┌─ src/main.nr:54:5
   │
54 │     G_B.4
   │     ----- This variable contains a value which is constrained to be a constant. Consider removing this value as additional return values increase proving/verification time
   │
   = Call stack:
     1. src/main.nr:54:5

bug: Assertion is always false: Index out of bounds
   ┌─ src/main.nr:22:60
   │
22 │                                             if (item_c.2 > unsafe { func_4([]) }[1532016929_u32].3) {
   │                                                            ------------------------------------- As a result, the compiled circuit is ensured to fail. Other assertions may also fail during execution
   │
   = Call stack:
     1. src/main.nr:22:60
