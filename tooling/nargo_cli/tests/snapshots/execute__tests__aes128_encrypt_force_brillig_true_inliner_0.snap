---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "10355665750043800061",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2dW3Nb1RXHz7El2ZIvUqD3G6H03tLqSLIlt6V1ISEXh3AnEC5Blm1CuIQQLiEEIgIkIRAgnU7bmX6Bvvepr33rTN/6BfrUmT51+tRXvJyz5L+W1pLj8dkmi2HPaM7R2T/t/d/rrH3fceLoalhY/cTpfU5c6flk1B+YnU+v1a2FJMO0qqE0xg40jjjQOOpAY86BxrwDjQUHGsccaBx3oLHoQGPJgcaJDDWStkrUH7LWO+nAplMONE470Fh2oLHiQOMOBxpvcKDxRgcav+BA4xcdaPySA41fdqDxKw40ftWBxq850Pj1yNdY8hsObPpNBxq/5UDjTQ407nSg8WYHGr/tQOMtDjR+x4HG7zrQ+D0HGr/vQOMPHGj8oQONP3Kg8cdRtmPJnVF/yFrvTxzY9FYHGn/qQOPPHGisOtCYONBYc6Cx7kBjw4HGGQcaZx1obDrQ2HKgcc6Bxp870PgLBxp/6UDjbQ40/sqBxl870DjvQONvHGi83YHGOxxo3OVA424HGu90oHGPA417HWjc50DjfgcaFwJoXAsH4J5Ej6x+6MA6HQinA9d0oJkODNOBXDrwSgdK6cAmHYKkQ4Z0iI8OyVVWP3TIiw5R0SElOgREh2zoEAsdEqFDGHTIgQ4R0CY9bXzTxjJt3NLG6M7Vz82rH9o4o40p2vihjRXauKCNAVp4p4VtWjimhVla7KTFRFqso8UwKhUt5tBiCS1G0GSfJtM0WaXJIE22aDJDkwUajNNglwaTNFjjwRB15tRZUmdEjT01ptRYUWNAlY2cmZxlIbIDv/g/pTfF9PsIxGf4DwKSosg3y/Rb1blaUSlfhvrrxTTNfJD0Gx1OvxBGf3UsTefO7nr6WBbOd1Rw8jcxMHuA2WMwe4HZazD7gNlnMPuB2W8wC8AsGMwBYA4YzF3A3GUwB4E5aDB3A3O3wdwDzD0Gcy8w9xrMfcDcZzD3A3O/wTwAzAMG8yAwDxrMQ8A8ZDCHgDlkMA8D87DBPALMIwZzGJjDBvMoMI8azGPAPGYwjwPzuME8AcwTBnMEmCMG8yQwTxpMG5i2wSwCs2gwHWA6BrMEzJLBLAOzbDArwKwYzFPAPGUwR4E5ajBPA/O0wRwD5pjBPAPMMwbzLDDPGsxzwDxnMM8D87zBHAfmuMG8AMwLBnMCmBMG8yIwLxrMSWBOGsxLwLxkMC8D87LBvALMKwbzKjCvGswpYE4ZzGvAvGYwp4E5bTCvA/O6wZwB5ozBvAHMGwbzJjBvGsxZYM4aTBeYrsG8BcxbBnMOmHMG8zYwbxvMO8C8YzDvAvOuwZwH5rzBXADmgsFcBOaiwbwHzHsGcwmYSwbzPjDvG8wHwHxgMJeBuWwwHwLzocF8BMxHBvMxMB8bzBVgrgimCPcR/G4+/V7dQmhVG7OBx+WdqTTN/HoRe2XhvMfC5L0Ui/yiaN3mGMf5l4TWjPUksciP9Uj78Bx1ipnuup5YxOW6g+XguDzE8ful9YMLwEnfYh38bkLMl1vVmVpYv0uqn57fJcln0e9kXK47WI7N+h36lvS70QC2aFVnP/e7yJffjYq4XHewHJv1O7SJ9LtcAFu0qs3Aflf7FP2u9pn0u5yIy3UHy7FZv0PfygP3W7j/fXofdtw3VwvZv1O4UdGPeVEY60a9wP4yCs/YrmznceRFXBHict3+fErp9xzkg2mxjrzgr6Tfy+m1AL/h31eU/Asi/z7dyjNpl6LCFxWefO1Sek97QbxHcEd3Pb0s3ymnvwvSj7JLv7eHsjuM/rU/cEJ17NZUONdLrrNYpuu1rw40TxvaZqLGEWGf8TB6OpxvUdEzouhhvqTwo0P4CYUvDCnvZJDyJtUdkC76HNqXbVGBZyXl2QTcs95yNNgeF0TZQvUFcdT/HrgdlnnGYHNtDsAhL579Ob2Srepxf3qyfln+XIkG65dsC2IRN5+RfeS4NIqu/3YoxPysukE7pNXjsO1Q0vPdcUXPuGIffpdFJU62UXlIC/lxKCPysn3Li2d/Ta8VJU3pu1q7is9wjPEXUTb0ldi4crrymaxvcnxLoRwN+hiPnQOvGQ68b2yrxhStI9GgL6Cv5MWzv6VXra1C/x7m8xVhE+RCrp/QPDNwv9+bl0jfzSZ9fX2Gx8vk638X+bLNsa7KeSvHI/+faD3Nf6T35cju87T+WbZxgdrcns/jH+AdVfKU/TP6H9+jLfjZP9NrFv2zZruQazerock+g30SB47D+lAQcejLcq4XifJjwDJR+rPxerqSk3rQj1hbXsT9K72GHv/dIHRiXtfDuFTz+2Hj0mv1+3+n11Dj0olI75uwfYqMMsm+LBbPNVtQwLUFGaetse1O+bxI/3/plcr13/R+StGP4xBum8tKGWJxXwJNWrvNdSLsvK7W87HeWqGhZzLqtxPz/0+vpPeQ8CH84+icJvqj9OEphcdysx62L84je+ts4nvGdXKZfWA6GgwcV4a8UaMMWnvaW0tc/RzeRHuKdsL8UcNINPhusP0virIxO59+r24xyPecgzymFT3S14rCv3hNYVQpK6YTC7vklDQ0Hy+LfOmdnLkGH9faF1n2QrS5ejYFGs6m99r7CtE2lEGTVi+nDbvtAM2ybZhW7DasbSgr/LRit3I0WP977zGovaorU4pWDhyH/oYaZdDaBta9lbYB85dtrlaHJkUcaygYPPYjyN80xH9DrVlKzei/JaWMUvMtiv9qe3Hcz3N7k+sGKc/aH7s/BzrQ9mv6IV+rbUJe1jGtTuK7wbVcWY+mRFwMcZzntY6fQtqx2braD62VMU2f/UKGHMQjX0sTQB/i61b+g4yVZjtZqbdX2jPtpaVGpy3nJRHYayJA/u1mvdWpNTrNxZl6uz67Yf7aXhW24bFxXbPlkLQrSlq7ulevYf8dUKKudeP6y22iH+N5D7Yt2vmNvOBvj9fTnE/vtbkm22AC4gtK/HatMxc3KK+cyzO/Z8hYQFu71vxCakBeljuK9HmYHOsWA9urtIG95FiX+YND7JXFnqMsN9oLbVmK9LxxDG3tB2Icaioo5dfWjOX8uaCUA+vp7u7Vq3aOin+LdTjr9nO5NbdUnVtZbidJUluqLm+m/dTWUOMoK3+st+Oo37641obll+vFzJ+E9uqI0JwLornR5PTyG2iWZWL+GGjubIvmmQHN8QaapW/juFoyWEbmj0I78UfRF2v9EP3uxLbYor7ttji+BVtoZ35HgTu9PfW0apXXqqexUqbYYNBmzJ8aYjO0RU6xhbaWH3J8OtuYTVqtdqsz21mZa3QWt3t83JhpNzvtZpLMNZLlRjKzUf7auTycN1Lgs3149g953N9D/jy0bRfhfayxSn7E/WEIFxvXtTSUZ7lu/zPtTCCelWSe8y51BzVy3ATE5UU+k+l3tBemxTrygv9dmgC/EzzfyL+vKPmPi/z7dCvP5P7ZhMJPKDy9n8tiXIJlz/oMy1qeIn18JrWx74SoV7VWa3autrja4y91VpYa9Y3q1ScwSFVanXUAAA==",
  "debug_symbols": "tZvRbuIwEEX/Jc88eDz2eMyvrFYr2tIKCUFF6Uqrqv++AZEUYS/asXtfKrnyOYRMbpJ66o/haf3w/vJrs3vevw3LHx/Ddv+4Om72u3H08bkYHg6b7Xbz8uv614M7/aBIZ+DtdbU7jd+Oq8NxWCZ1i2G9exqWGtMoeN5s18Myus+fixHxdoTtSLAj0Y6IHUl2RO1INiPi7Ii9+mKvvtirL/bqi736Yq++2Ksv9uqLvfqpWv3MfEFypGtkUUz16i9TvXJhJ6jdQ+0MtQeoPULtArUnqF2h9oy0KzSrCs2qQrOq0KwqNKsKzapCs6rQrGpvVtnpZSqTFvaMtGcHtRPU7qF2htoD1B6Bdu+6q8qznXNh7z0zwcllaqDSbjszZ0TsSLIjakeyGSFnR8iOeDtST5tMpcxaXIYU7Ei0I2JHkh1RO5LNiHd2hOyItyP26vtq9cnJdJERlen3sQWSFii1QNoC5QaIXQtELVD3YzROUzkWVwEHqD1+n124sAvSHghq7331CsTzQ7o476H3mgkcJ3uQwh6g9gi1C9SeoHaF2jPSHnv/TArez/ZU2Alq91A7Q+0Bao9Qu0Dt6fvs0Rd2hdoz0i4Oaieo3UPtDLUHqL07qylNdi3tArUnqF2h9u6sis724j2yu613305Qu4faGWoPUHuE2ruzGuc3PQ2FPUHtCrVnpL27rXffTlC7h9q/8blasQeoPULtArV3Z/Veq6C7rXffnpH27rbefTtB7R5qZ6g9QO0RaheoHZrVjMwq11tgQnRBpFg65noL7D7CdqTeZchpYijr1Rc/M/UmEOU8nQDvvNwyvuFzql/HO/f1OcS3TGhgYgMjDUxqYLSByXam3s4ZJ6avmsZbhhoY38BwAxMamNjASAPzH9fBdX7Kew15F6bcjM3iW7/a88nZzoSG+0C9QRAnQm7Xzbm+5n8HiP/oMU5vgUS+QLwdqfeB53d8klggYkeSHVE7ks1IfZWR/NzHZS4QtiPBjkQ7Imakviw0L4JpKgBvBdgKBCsQLcDnOPq9OmxWD9v1ZdPM8/vu8WoPzfHP6/pmO83rYf+4fno/rE8ba7721JxuG6yyCC6dDmQc0dg5oxDH0fnfi9jRgp2chqcTHZwuArnxGMbj+As=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/aes128_encrypt/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
