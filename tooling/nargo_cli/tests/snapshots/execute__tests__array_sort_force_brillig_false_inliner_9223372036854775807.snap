---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "13151743274538842029",
  "abi": {
    "parameters": [
      {
        "name": "xs",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "15544221083219072719": {
        "error_kind": "string",
        "string": "check_shuffle, lhs and rhs arrays do not contain equivalent values"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17679955115386040593": {
        "error_kind": "string",
        "string": "Array has not been sorted correctly according to `ordering`."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "2": {
      "source": "use crate::cmp::Eq;\n\nunconstrained fn __get_shuffle_indices<T, let N: u32>(lhs: [T; N], rhs: [T; N]) -> [u32; N]\nwhere\n    T: Eq,\n{\n    let mut shuffle_indices: [u32; N] = [0; N];\n\n    let mut shuffle_mask: [bool; N] = [false; N];\n    for i in 0..N {\n        let mut found = false;\n        for j in 0..N {\n            if ((shuffle_mask[j] == false) & (!found)) {\n                if (lhs[i] == rhs[j]) {\n                    found = true;\n                    shuffle_indices[i] = j;\n                    shuffle_mask[j] = true;\n                }\n            }\n            if (found) {\n                continue;\n            }\n        }\n        assert(found == true, \"check_shuffle, lhs and rhs arrays do not contain equivalent values\");\n    }\n\n    shuffle_indices\n}\n\nunconstrained fn __get_index<let N: u32>(indices: [u32; N], idx: u32) -> u32 {\n    let mut result = 0;\n    for i in 0..N {\n        if (indices[i] == idx) {\n            result = i;\n            break;\n        }\n    }\n    result\n}\n\npub(crate) fn check_shuffle<T, let N: u32>(lhs: [T; N], rhs: [T; N])\nwhere\n    T: Eq,\n{\n    // Safety: shuffle_indices is ensured to be a permutation of 0..N, and then\n    // shuffle_indices is ensured to map lhs to rhs: assert(lhs[i] == rhs[shuffle_indices[i]]), for all i in 0..N\n    unsafe {\n        let shuffle_indices = __get_shuffle_indices(lhs, rhs);\n\n        for i in 0..N {\n            let idx = __get_index(shuffle_indices, i);\n            assert_eq(shuffle_indices[idx], i);\n        }\n        for i in 0..N {\n            let idx = shuffle_indices[i];\n            let expected = rhs[idx];\n            let result = lhs[i];\n            assert_eq(expected, result);\n        }\n    }\n}\n\nmod test {\n    use crate::cmp::Eq;\n    use super::check_shuffle;\n\n    struct CompoundStruct {\n        a: bool,\n        b: Field,\n        c: u64,\n    }\n    impl Eq for CompoundStruct {\n        fn eq(self, other: Self) -> bool {\n            (self.a == other.a) & (self.b == other.b) & (self.c == other.c)\n        }\n    }\n\n    #[test]\n    fn test_shuffle() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [2, 0, 3, 1, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_identity() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 4];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_fail() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 5];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test(should_fail_with = \"check_shuffle, lhs and rhs arrays do not contain equivalent values\")]\n    fn test_shuffle_duplicates() {\n        let lhs: [Field; 5] = [0, 1, 2, 3, 4];\n        let rhs: [Field; 5] = [0, 1, 2, 3, 3];\n        check_shuffle(lhs, rhs);\n    }\n\n    #[test]\n    fn test_shuffle_compound_struct() {\n        let lhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n        ];\n        let rhs: [CompoundStruct; 5] = [\n            CompoundStruct { a: false, b: 0x155, c: 0 },\n            CompoundStruct { a: false, b: 0, c: 12345 },\n            CompoundStruct { a: false, b: -100, c: 54321 },\n            CompoundStruct { a: true, b: 9814, c: 0xeeffee0011001133 },\n            CompoundStruct { a: true, b: 5, c: 0xffffffffffffffff },\n        ];\n        check_shuffle(lhs, rhs);\n    }\n}\n",
      "path": "std/array/check_shuffle.nr"
    },
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(xs: [u8; 3]) {\n    let sorted = xs.sort();\n    assert(sorted[0] == 1);\n    assert(sorted[1] == 2);\n    assert(sorted[2] == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "quicksort",
    "__get_shuffle_indices",
    "__get_index",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
