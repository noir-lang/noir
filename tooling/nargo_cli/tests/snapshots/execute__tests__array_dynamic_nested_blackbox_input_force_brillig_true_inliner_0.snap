---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "4450009109511397893",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "hash_result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdnbiiIxFIXhd6nrukiys3PwVYah8VA2BaLiYWAQ331SjraiddE/dm7EiN+icCWxqJyaRTc7fn706+Vm30x+nZrVZj499Jt1GZ3ObTPb9atV//nx+HFjhhdn3AXst9P1MN4fprtDM3EibdOtF8O7VAKW/aprJmrOv9tChBPPiY4T+0XyCwmcRE4SJxkTazixnDhOhBPPCW/fjrcfvuZY0BcSOUmcZEyc4cRy4jgRTjwnyglv3/H2HW/f8faFr33ha1/42he+9oWvfeFrX/jOL3znF77zC9/5PW/f8/b9ePv5Ni3F2BcinHhOlJPASeQkcZIxUcOJ5YS3r7x95e0rb195+zravtdwJT7KC0mcZEyC4cRy4jgRTjwnyknghLcfePthvP3sr0TdC4mGE8uJ40Q48ZwoJ4GTyEnihLefePuJt594+4m3n3j7abR9lXwjGh5J+/2vXtJD1fRYMz27N9Ntjrc7QZvTw7/h/3h9Oz7f9sHyOCk8x7Nf/kIiJ4mTTIkYw4nlxHEinHhOlJPASao53cXkN+OdMffpbuUp3pq68bZuvKsbL3Xjfd14rRsf3o638b4P63N8rBuf6sbnqvHO1I23deNd3fifXbWPNwgjm3c5K7pt3uX5/POl+Jr3KuK0bnyoF38ugz/TXT+drbrrqd/yuJ4/HAIe/m67p/PA7W4z7xbHXTecDN4PBYfFIN63EnS47DKyybY22zK6/L+Jy62IH4bDzBbRMozlGsp1/AM=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [u8; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(mut x: [Foo; 3], y: pub Field, hash_result: pub [u8; 32]) {\n    // Simple dynamic array set for entire inner most array\n    x[y - 1].bar.inner = [106, 107, 10];\n    let mut hash_input = x[y - 1].bar.inner;\n    // Make sure that we are passing a dynamic array to the black box function call\n    // by setting the array using a dynamic index here\n    hash_input[y - 1] = 0;\n    let hash = std::hash::blake3(hash_input);\n    assert_eq(hash, hash_result);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/array_dynamic_nested_blackbox_input/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
