---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "14991988209205674160",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "7dvRTttMEIbhe/FxDnZ3ZnZnuZVfv6oAaRUpCihApQrl3mtHOKj2yu7bo0rNGSZ5IOYjjj/P+r173N2/ffuyP359eunu/nvvDk8P29f907Hfeu/C5Vsvz9vjsPXyuj29dncxeNl0u+Nj/2VM6bzpvu4Pu+7Owvn/TRdXicYJSU0Sq48kyfS3SJMkTVfi4RfSb9yf9ofD/tuX6R6+dzGU1s+zML5oCz7dzeAtkkL9ICmWGamYxMBJ5CRxIpwoJ8ZJ5qRwwtOPPP3E0088/cTTTzz9xNNPPP3E0088/cTTT2vppzwlEjiJnCROhBPlxDhpp5+uRGa5SOHEOamYaOAkcpI4EU6UE+OEp688feXpK0/fePrG0zeevq2lr7N3pSknxknmpHDinFRM8tqRv0HWjvxZZqSdfs4jqXFGhBPlxDjJnBROnJO1z/0JOV8a1FBJmnuURT9gzmHWLwonzknFpN1ilknkJHEinCgntkJKPf9Wi1kmhRPnpGLSPlteLNeJdyXhXUl4VxLelYR3pdWz5QbhXUl4VxLelYR3JeHpK09fefrK01eevvL0laevPH3l6StPX3n6xpuy8aZsvCkbb8rGm7LxpmyZE96VjHcl410p866UeVfKvCtl3pQzb8qZN+XMm3Lm6WeefubpF55+4ekXnn7h6RfelAtvyoU35cKbcuFNufCm7IGTtSN/g6wd+efl2nlTdt6UnTdl503ZeVN23pS9YlLXPvfn5TpdynXzz1ZcPpyH+fUVLAoWjkWloj1RWhTNt0vJcRRx+r/fnictCsFCsTAsMhYFC6eiXcGkjgVcqk2FY1GpaPevRRGxSFgIFoqFYZGxwJkrzlxx5oYzb5culfEQr7NTonbnWhSChWJhWGQsChaORaWi3bW0XkWdiYhFwkKwUCwMi4xFwcKxqFQUnHm7YC1d8W33q0UhWCgWhkXGAi89K/h6ertYLYl2r1oUOHPHmTvO3HHmjjN3nLnjzB1nXvE0rOJhWFUsDAs8B614DFrxFLTyIWjgQ9CwNgSdD9tC4kQ4UU74EDTwweFtiS0mtyW2lNyW2FLydyyx/YNFA7cltlPCB4e3JbaY3JbYUvIvLbFtkLX0b0tsJyTzwWHmg8PMB4e3JbaY8MFhoYPDfuv79rTf3h92w22Dw4Nvx4fxLsJ+8/XH8/jIeJ/h8+npYff4dtoNdxx+3mw45NtfI+871PBKhhcSS9r0I/bLGexl0zf9YPu6FPgCpAdyBSlu+vOwKxgerfY53hyeI2Ej9vkj+2eU/hnnfl9+Ag==",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/brillig_nested_arrays/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested",
    "assert_inside_brillig",
    "create_and_assert_inside_brillig"
  ]
}
