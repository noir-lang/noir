---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main() {
    let numerator: [u64; 6] = [
        790096867046896348_u64,
        1063071665130103641_u64,
        602707730209562162_u64,
        996751591622961462_u64,
        28650_u64,
        0_u64,
    ];
    // Safety: comment added by `nargo expand`
    unsafe { __udiv_mod(numerator) };
    let denominator: [u64; 6] = [12_u64, 0_u64, 0_u64, 0_u64, 0_u64, 0_u64];
    // Safety: comment added by `nargo expand`
    let result: [u64; 6] = unsafe { __validate_gt_remainder(denominator) };
    assert(result[4_u32] == 0_u64);
    assert(result[5_u32] == 0_u64);
}

unconstrained fn __udiv_mod(remainder_u60: [u64; 6]) {
    let bit_difference: u32 = get_msb(remainder_u60);
    let _accumulator_u60: [u64; 6] = shl(bit_difference);
}

unconstrained fn __validate_gt_remainder(a_u60: [u64; 6]) -> [u64; 6] {
    let mut addend_u60: [u64; 6] = [0_u64; 6];
    let mut result_u60: [u64; 6] = [0_u64; 6];
    for i in 0_u32..6_u32 {
        result_u60[i] = a_u60[i] + addend_u60[i];
    }
    result_u60
}

unconstrained fn get_msb(val: [u64; 6]) -> u32 {
    let mut count: u32 = 0_u32;
    for i in 0_u32..6_u32 {
        let v: u64 = val[(6_u32 - 1_u32) - i];
        if v > 0_u64 {
            count = 60_u32 * ((6_u32 - 1_u32) - i);
            break;
        }
    }
    count
}

unconstrained fn shl(shift: u32) -> [u64; 6] {
    let num_shifted_limbs: u32 = shift / 60_u32;
    let limb_shift: u8 = (shift % 60_u32) as u8;
    let mut result: [u64; 6] = [0_u64; 6];
    result[num_shifted_limbs] = 1_u64 << limb_shift;
    for i in 1_u32..6_u32 - num_shifted_limbs {
        {
            let i_3796: u32 = i + num_shifted_limbs;
            result[i_3796] = 0_u64;
        }
    }
    result
}
