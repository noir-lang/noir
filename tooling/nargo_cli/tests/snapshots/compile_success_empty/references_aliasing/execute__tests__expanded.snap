---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main() {
    let mut x: Field = 100_Field;
    let mut xref: &mut Field = &mut x;
    increment(xref);
    assert(*xref == 101_Field);
    let mut x_three_refs: &mut &mut &mut Field = &mut &mut &mut x;
    increment_deeper_ref(x_three_refs);
    assert(***x_three_refs == 102_Field);
    regression_2445();
    regression_2445_deeper_ref();
    struct_alias_in_array();
    single_alias_inside_loop();
    assert(5_Field == struct_field_refs_across_blocks(MyStruct { a: 5_Field, b: 10_u32 })[0_u32]);
}

fn increment(mut r: &mut Field) {
    *(r) = *r + 1_Field;
}

fn increment_deeper_ref(mut r: &mut &mut &mut Field) {
    *(*(*(r))) = ***r + 1_Field;
}

fn regression_2445() {
    let mut var: Field = 0_Field;
    let ref: &mut &mut Field = &mut &mut var;
    let mut array: [&mut &mut Field; 2] = [ref, ref];
    assert(**array[0_u32] == 0_Field);
    {
        let i_3829: u32 = 0_Field as u32;
        *(*(array[i_3829])) = 1_Field;
    };
    {
        let i_3830: u32 = 1_Field as u32;
        *(*(array[i_3830])) = 2_Field;
    };
    assert(var == 2_Field);
    assert(**ref == 2_Field);
    assert(**array[0_u32] == 2_Field);
    assert(**array[1_u32] == 2_Field);
}

fn regression_2445_deeper_ref() {
    let mut var: Field = 0_Field;
    let ref: &mut &mut &mut Field = &mut &mut &mut var;
    let mut array: [&mut &mut &mut Field; 2] = [ref, ref];
    {
        let i_3834: u32 = 0_Field as u32;
        *(*(*(array[i_3834]))) = 1_Field;
    };
    {
        let i_3835: u32 = 1_Field as u32;
        *(*(*(array[i_3835]))) = 2_Field;
    };
    assert(var == 2_Field);
    assert(***ref == 2_Field);
    assert(***array[0_u32] == 2_Field);
    assert(***array[1_u32] == 2_Field);
}

struct Foo {
    inner: u32,
}

fn struct_alias_in_array() {
    let mut var: Foo = Foo { inner: 0_u32 };
    let ref: &mut &mut Foo = &mut &mut var;
    let mut array: [&mut &mut Foo; 2] = [ref, ref];
    assert((**array[0_u32]).inner == 0_u32);
    {
        let i_3839: u32 = 0_Field as u32;
        (*(*(array[i_3839]))).inner = 1_u32;
    };
    {
        let i_3840: u32 = 1_Field as u32;
        (*(*(array[i_3840]))).inner = 2_u32;
    };
    assert(var.inner == 2_u32);
    assert((**ref).inner == 2_u32);
    assert((**array[0_u32]).inner == 2_u32);
    assert((**array[0_u32]).inner == 2_u32);
}

fn single_alias_inside_loop() {
    let mut var: Field = 0_Field;
    let ref: &mut &mut Field = &mut &mut var;
    for _ in 0_u32..1_u32 {
        *(*(ref)) = 2_Field;
    }
    assert(var == 2_Field);
    assert(**ref == 2_Field);
}

struct MyStruct {
    a: Field,
    b: u32,
}

fn struct_field_refs_across_blocks(mut my_struct: MyStruct) -> [Field; 1] {
    [compute_dummy_hash(my_struct.a, my_struct.b, 20_u32)]
}

fn compute_dummy_hash(input: Field, rhs: u32, in_len: u32) -> Field {
    let mut res: Field = 0_Field;
    if rhs < in_len { res = res + input; };
    res
}
