---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main() {
    let mut x: Field = 100_Field;
    let mut xref: &mut Field = &mut x;
    increment(xref);
    assert(*xref == 101_Field);
    regression_2445();
    single_alias_inside_loop();
    assert(5_Field == struct_field_refs_across_blocks(MyStruct { a: 5_Field, b: 10_u32 })[0_u32]);
}

fn increment(mut r: &mut Field) {
    *(r) = *r + 1_Field;
}

fn regression_2445() {
    let mut var: Field = 0_Field;
    let ref: &mut &mut Field = &mut &mut var;
    let mut array: [&mut &mut Field; 2] = [ref, ref];
    *(*(array[0_u32])) = 1_Field;
    *(*(array[1_u32])) = 2_Field;
    assert(var == 2_Field);
    assert(**ref == 2_Field);
    assert(**array[0_u32] == 2_Field);
    assert(**array[1_u32] == 2_Field);
}

fn single_alias_inside_loop() {
    let mut var: Field = 0_Field;
    let ref: &mut &mut Field = &mut &mut var;
    for _ in 0_u32..1_u32 {
        *(*(ref)) = 2_Field;
    }
    assert(var == 2_Field);
    assert(**ref == 2_Field);
}

struct MyStruct {
    a: Field,
    b: u32,
}

fn struct_field_refs_across_blocks(mut my_struct: MyStruct) -> [Field; 1] {
    [compute_dummy_hash(my_struct.a, my_struct.b, 20_u32)]
}

fn compute_dummy_hash(input: Field, rhs: u32, in_len: u32) -> Field {
    let mut res: Field = 0_Field;
    if rhs < in_len { res = res + input; };
    res
}
