---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
trait Collection {
    type Elem;

    fn cget(self, index: u32) -> Option<Elem>;

    fn ctake(self, index: u32) -> Elem {
        self.cget(index).unwrap()
    }
}

impl<let N: u32, T> Collection for [T; N] {
    type Elem = T;

    fn cget(self, index: u32) -> Option<T> {
        if index < self.len() {
            Option::some(self[index])
        } else {
            Option::none()
        }
    }

    fn ctake(self, index: u32) -> T {
        self.cget(index).unwrap()
    }
}

fn main() {
    let array: [Field; 5] = [1_Field, 2_Field, 3_Field, 0_Field, 5_Field];
    assert(array.ctake(3_u32) == std::mem::zeroed());
}
