---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn make_counter() -> fn[(&mut Field,)]() -> Field {
    let mut x: &mut Field = &mut 0;
    || -> Field {
        *(x) = *x + 1;
        *x
    }
}

fn fibonacci_generator() -> fn[(&mut Field, &mut Field)]() -> Field {
    let mut x: &mut Field = &mut 1;
    let mut y: &mut Field = &mut 2;
    || -> Field {
        let old_x: Field = *x;
        let old_y: Field = *y;
        *(y) = *x + *y;
        *(x) = old_y;
        old_x
    }
}

fn get_some<Env>(generator: fn[Env]() -> Field) -> [Field; 5] {
    [0, 0, 0, 0, 0].map(|_: Field| -> Field generator())
}

fn test_fib() {
    let fib: fn[(&mut Field, &mut Field)]() -> Field = fibonacci_generator();
    assert(fib() == 1);
    assert(fib() == 2);
    assert(fib() == 3);
    assert(fib() == 5);
    assert(get_some(fib) == [8, 13, 21, 34, 55]);
}

fn test_counter() {
    let counter: fn[(&mut Field,)]() -> Field = make_counter();
    assert(counter() == 1);
    assert(counter() == 2);
    assert(counter() == 3);
    assert(get_some(counter) == [4, 5, 6, 7, 8]);
}

fn main() {
    test_fib();
    test_counter();
}
