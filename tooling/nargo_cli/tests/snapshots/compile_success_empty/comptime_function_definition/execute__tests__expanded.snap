---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::meta::type_of;

pub struct Foo {
    x: Field,
    field: Field,
}

pub fn foo(
    w: i32,
    y: Field,
    Foo { x, field: some_field }: Foo,
    mut a: bool,
    (b, c): (i32, i32),
) -> i32 {
    let _: (i32, Field, Field, Field, bool, i32, i32) = (w, y, x, some_field, a, b, c);
    1
}

#[test]
#[deprecated]
fn some_test() {}

comptime fn function_attr(f: FunctionDefinition) {
    let parameters: [(Quoted, Type)] = f.parameters();
    assert(parameters.len() == 5);
    assert(parameters[0].0 == quote { w });
    assert(parameters[1].0 == quote { y });
    assert(
        parameters[2].0
            == quote {
        Foo {
            x, field: some_field
        }
    },
    );
    assert(parameters[3].0 == quote { mut a });
    assert(parameters[4].0 == quote { (b, c) });
    let an_i32: i32 = 0;
    assert(parameters[0].1 == type_of(an_i32));
    assert(parameters[1].1 == type_of(0));
    assert(parameters[2].1 == type_of(Foo { x: 0, field: 1 }));
    assert(parameters[3].1 == type_of(true));
    assert(parameters[4].1 == type_of((an_i32, an_i32)));
    assert(f.return_type() == type_of(an_i32));
    assert(f.name() == quote { foo });
    assert(f.has_named_attribute("function_attr"));
}

comptime fn check_named_attribute(f: FunctionDefinition) {
    assert(f.has_named_attribute("test"));
    assert(f.has_named_attribute("deprecated"));
}

fn add_one(x: Field) -> Field {
    x + 1
}

comptime fn mutate_add_one(f: FunctionDefinition) {
    assert(f.parameters().len() == 0);
    f.set_parameters(&[(quote { x }, type_of(0))]);
    assert(f.parameters().len() == 1);
    assert(f.return_type() == type_of(()));
    f.set_return_type(type_of(0));
    assert(f.return_type() == type_of(0));
    f.set_body(quote { x + 1 }.as_expr().unwrap());
}

fn main() {
    assert(add_one(41) == 42);
}

contract some_contract {
    pub fn bar() -> pub Field {
        1
    }
}

comptime fn set_pub_return(f: FunctionDefinition) {
    f.set_return_public(true);
}

mod foo {
    pub fn some() {}

    comptime fn attr(f: FunctionDefinition) {
        assert(f.module().name() == quote { foo });
        assert(!f.is_unconstrained());
        f.set_unconstrained(true);
        assert(f.is_unconstrained());
        f.set_unconstrained(false);
        assert(!f.is_unconstrained());
    }
}

mod test_as_typed_expr_1 {
    pub fn method<T>(x: T) -> T {
        x
    }

    comptime fn foo(module: Module) -> Quoted {
        let method: FunctionDefinition = module.functions().filter(|f: FunctionDefinition| -> bool {
            f.name() == quote { method }
        })[0];
        let func: TypedExpr = method.as_typed_expr();
        quote {
            pub fn bar() -> i32 {
                func(1)
            }
        }
    }

    pub fn bar() -> i32 {
        method(1)
    }

    pub fn test() {
        ()
    }
}

mod test_as_typed_expr_2 {
    unconstrained fn method<T, let N: u32>(xs: [T; N]) -> u32 {
        xs.len()
    }

    comptime fn foo(module: Module) -> Quoted {
        let method: FunctionDefinition = module.functions().filter(|f: FunctionDefinition| -> bool {
            f.name() == quote { method }
        })[0];
        let func: TypedExpr = method.as_typed_expr();
        quote {
            pub fn bar() -> u32 {
                // Safety: test program
                unsafe {
                    func([1, 2, 3, 0])
                }
            }
        }
    }

    pub fn bar() -> u32 {
        // Safety: comment added by `nargo expand`
        unsafe {
            method([1, 2, 3, 0])
        }
    }

    pub fn test() {
        ()
    }
}

mod test_as_typed_expr_3 {
    pub comptime fn method<T, U, let N: u32>(xs_ys: ([T; N], U)) -> u32 {
        let (xs, _ys): ([T; N], U) = xs_ys;
        xs.len()
    }

    comptime fn foo(module: Module) -> Quoted {
        let method: FunctionDefinition = module.functions().filter(|f: FunctionDefinition| -> bool {
            f.name() == quote { method }
        })[0];
        let func: TypedExpr = method.as_typed_expr();
        quote {
            pub fn bar() -> u32 {
                // Safety: test program
                comptime {
                    func(([1, 2, 3, 0], "a"))
                }
            }
        }
    }

    pub fn bar() -> u32 {
        4
    }

    pub fn test() {
        ()
    }
}

mod test_as_typed_expr_4 {
    comptime fn foo(f: TypedExpr) -> Quoted {
        quote { f() }
    }

    fn bar() -> Field {
        1
    }

    fn baz() -> Field {
        let x: Field = { bar() };
        x
    }

    pub fn test() {
        ()
    }
}

mod test_as_typed_expr_5 {
    trait Trait {}

    impl Trait for i32 {}

    trait Packable<let N: u32> {
        fn pack(self);
    }

    pub struct Foo<T> {}

    impl<T> Packable<10> for Foo<T>
    where
        T: Trait,
    {
        fn pack(self)
        where
            T: Trait,
        {}
    }

    fn foo() {
        ()
    }
}
