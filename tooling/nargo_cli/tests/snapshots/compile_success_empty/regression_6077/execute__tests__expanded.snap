---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
pub struct WeirdStruct<T, U> {
    a: T,
    b: U,
}

pub fn my_fn() -> WeirdStruct<Field, [u8; 3]> {
    {
        WeirdStruct::<Field, [u8; 3]> { a: 1, b: [0; 3] }
    }
}

comptime fn mangle_fn(f: FunctionDefinition) {
    let return_type: Type = f.return_type();
    let generics: Quoted = f"Field,{return_type}".quoted_contents();
    let new_return_type: Type = quote { WeirdStruct < generics >  }.as_type();
    let new_body: Expr = quote {
        {
            WeirdStruct {
                a: 1, b: [0; 3]
            }
        }
    }
        .as_expr()
        .unwrap();
    f.set_return_type(new_return_type);
    f.set_body(new_body);
}

fn main() {}
