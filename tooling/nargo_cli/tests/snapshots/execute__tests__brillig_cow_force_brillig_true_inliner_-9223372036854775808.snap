---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "9558946300811596045",
  "abi": {
    "parameters": [
      {
        "name": "original",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "expected_result",
        "type": {
          "kind": "struct",
          "path": "ExecutionResult",
          "fields": [
            {
              "name": "original",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_once",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "modified_twice",
              "type": {
                "kind": "array",
                "length": 5,
                "type": {
                  "kind": "field"
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndvbTttAGATgd/F1Lvb4H3iVqqoCBBQpCihApQrx7rUpSSC7Np25QRjlwxYzaza78etwu7l+uf+13d89PA1XP16H3cPN+nn7sB+PXt9Ww/Vhu9tt7399/vEQpi+q769/elzvp8On5/XhebiKOfhq2Oxvp2+Lj7/hbrvbDFc1vP1cDWqEcdxYIEwkTCJMJkwhTCWMEKbfg2TlZIJdGiOM48YDYSJhEmEyYQphKmGEMEQPnOiBf9+D8YVfTQyBQZFBM7cEOw2hkmuDMoMKgyqDhEHKIGOQEygGBkUGzTRCzjUya1BmUGFQZZAwSBlkDHICpcCgyCCmEYlpRPq2ESVLgyqDhEC5eyYt9mFUtCGCE8WJ4cRhUgJOIk4STvpdC+kUZkhNmKXftRDkjGKDKoOEQcogY5ATqAYGRQYlBmUGMY2oTCMq04jKNKIyjahMI4RphDCNEKYRMtMI1ROy5h4hhUGVQcKgmUZ4OCFPDZpphNj5TM0dVpxAGhgUGZQYlBlUGFQZJAxSBjGNUKYRxjTCmEYY0whjGmFMI4xphDGNMKYRxjTCmEY40whnGuFMI5xphDONcKYRzjTCmUY40wgnGpFCYFBkUGJQ90+ePX6YklJDFCeGE4dJf1FpmUScJJxknHQHXcnHpa5ioSEVJ4ITxYnhxGHSX0BaJhEnM+mHE4kN6aZf/DgVrqU9S8FJxYngRHFiOHGY5ICTuBxlLU2UmVibS1kYpAwyBjmBSmBQZFBiUHfIaTgaDS3pDjkxOZGmDf3Vs2UiOFGcGE4cJv01s2UScZJwknGCp1/x9CuefsXTr3j6FU9f8PQFT1/w9PsrY1r1tODejP3+utgyqTgRnPT3TvT4L0q1mTgKvHeSBN47SRpwEnGScJJxUnBScSI4UZzg6SuevuHpG56+4ekbnr7h6RuevuHpG56+4ekbnr7j6TuevuPpO56+4+k7nr7j6TuevuPpO5x+DgEnESdw+jkr+nYuZ8OJw2Rmk931uPwzrkZ+Qv9M/52c+3Hik758BODdzOxhL56nPyFP573HcSkyX5pEmEyYQphKGCGMEsb6Juo503ppHDf9mfk3JhImESYTphDmP3rwefysOpPsfLzX2OVIm9ndXhydM5vbywa9C7yNB7/Xh+36erf5eITg7mV/8+mJguc/j5uLhwseDw83m9uXw2Z6zOD8hMHUohzjKuc0Xct4JHGl8ef0kc/xICZbxZynw6k7OefxlXW8gvEq/gI=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "// Tests the copy on write optimization for arrays. We look for cases where we are modifying an array in place when we shouldn't.\nglobal ARRAY_SIZE: u32 = 5;\n\nstruct ExecutionResult {\n    original: [Field; ARRAY_SIZE],\n    modified_once: [Field; ARRAY_SIZE],\n    modified_twice: [Field; ARRAY_SIZE],\n}\n\nimpl ExecutionResult {\n    fn is_equal(self, other: ExecutionResult) -> bool {\n        (self.original == other.original)\n            & (self.modified_once == other.modified_once)\n            & (self.modified_twice == other.modified_twice)\n    }\n}\n\nfn modify_in_inlined_constrained(original: [Field; ARRAY_SIZE], index: u64) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn modify_in_unconstrained(\n    original: [Field; ARRAY_SIZE],\n    index: u64,\n) -> ExecutionResult {\n    let mut modified = original;\n\n    modified[index] = 27;\n\n    let modified_once = modified;\n\n    modified[index + 1] = 27;\n\n    ExecutionResult { original, modified_once, modified_twice: modified }\n}\n\nunconstrained fn main(original: [Field; ARRAY_SIZE], index: u64, expected_result: ExecutionResult) {\n    assert(expected_result.is_equal(modify_in_unconstrained(original, index)));\n    assert(expected_result.is_equal(modify_in_inlined_constrained(original, index)));\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/brillig_cow/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
