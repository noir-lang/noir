---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "9173613327436987849",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ldzbSuRKFIDhd+lrL2rVOpavshkGDz2DICoeNmzEd9/dgxmlU0b+GzHqj21/qZIsQl531/vLl98/b+5+3T/tzv953d3eX10839zfHY5e3852l483t7c3v39+/vKuHT9Y/vn5p4eLu+Ph0/PF4/PuvFc/2+3vro+fxaH/dXO73517e/txtrPCxaCFN1wILjouFBeGC8dF4AKbOzZ3bB7fmGuT00Jw0XGhuDBcOC4CF4mLwsWgRWLzxOY5NVfPpfA6LRQXhgvHReAicVG4GLSohgvBBTYvbF7YvLB5YfPC5oXNC5sPbD6w+cDmA5sPbD6w+cDmA5sPbD6wubTGE+FJ54nyxHjiPAmeJE+KJ1xfuL5wfeH6wvWF6wvXF64vXF+4vkz1rY/3xLSdJr3xRHjSeaI8MZ44T4InyZPiCddXrq9cX7m+cn3l+sr1lesr11eur1zfuL5xfeP6xvWN6xvXN65vXN+4vnF95/rO9Z3rO9d3ru9c37m+c33n+s71g+sH1w+uH1x/Ps4yryXxcZrMZ00x4j3J1lfJ9IRJXX5Lmq+S4EnypL5JYvWOzYdBm8l8GrSdCE+mLlm6JJWrRHliPHGeBE+SJ8WTuX7W18l8LrSdCE86T5QnxpOpfpm9J+WySqb65R/J6vJtPh7aToongyZ9PiDaToQnnSfKE+OJ8yR4kjwpnnB94frC9YXrC9cXri9cX7i+cP35gOjTphSxSgZO5gOi7UR4MtUfbUmGyCqZ6g/5SFbv2HxAtJ04T4InyZPiycDJfEC0nQhPOk+4vnJ95frK9ZXrK9dXrm9c37i+cX3j+sb15wOiT5tSX+1j8wHRdpI8KZzMpz1Dl8vqYbpKhCdGr8T7F3OYbEuStkqCJ8mT4snAyRdzmM1EeNJ5ojwxnsz1/1692uparM9vqdpOkifFk4GT+W1V24nwpPNEeWI84frJ9ZPrJ9dPrl9cv7h+cf3i+sX1i+sX3/mL7/zFd/7iO//gO//gO//gO//gO//gO//g//cH1x9cf3D9gfW1NZ4ITzpPlCfGE+dJ8CR5UjyZ6ntb9jFvp/uYzkdq24nwpPNEeWI8cZ4ET5InxROu37l+5/qd689Ham7Lye+2OvnnI7XtxHkSPEmeFE8GTuYjte1EeNJ5wvWV6yvXV66vXF+5vnJ94/rG9Y3rG9e37/RdV4nzJHiSPCmeDJx44wnXd67vXN/52ne+9p2vfedr3/nad772g6/94PrB9YPrB9cPrh9cP7h+cP3g+sn1k+sn10+un1w/uX5y/eT6yfWT6xfXL65fXL+4fnH94vrzWZ/ncoumV1slyZPiycDJfNa3nQhPOk+UJ8YT5wnXH1x/cP2B9a01nghPOk+UJ8YT50nwJHlSPOH6wvWF6wvXF64vXH8+64u23EUQoqskeJI8KZ4MnMxnfduJ8KTzRHliPOH6net3rt+5/nzWF7ac/OGrk38+69tOhCedJ8oT44nzJHiSPCmecH3j+sb1jesb1zeub1zfuL5xfeP6xvXns76I5QFIUbJKvtUfq6TzRHliPHGeBE+SJ1zfuX7wtR987Qdf+8HXfvC1H3ztB1/7wdd+cP3g+sn1k+sn10+un1w/uX5y/eT6yfWT6xfXL65fXL+4fnH94vrF9YvrF9cvrj+4/uD6A+q/HY7+vXi8ubi83R8fKnv85svd1adHzz7/97A/eQrtw+P91f765XF/fB7tx6Noj3+gtzzzXoeXcjyn1M7MfhyfP3U4sOFn3trxUP78pB0O4/AKDq/ifw==",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/regression_struct_array_conditional/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
