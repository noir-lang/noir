---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "5783250799995673734",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrRatswFMbxd/G1L6RzpCMprzJGSVu3BEJS0nQwSt99dhcnIRLZ/r4pqPCLLH/2iSLps3seHj9eHza7l/17t/rx2W33T+vjZr8bW59fffd42Gy3m9eH6393bvrjS/gG72/r3dR+P64Px26VQt8Nu+du5b0f/ctmO3Sr6L5+9qOIWBgWCYuMRYFCnMPCYyFUeNyH530oFgGLiIVhkbDIWODnSvBzJThzwZkLzlxw5tLMXJ2ciDqtiHGSOMmcFEzUceI5EU6Uk8AJT195+srTV56+8vRD846J5RMRKxVpjsWSOxHLriLtAqbzW5lC3UvBJDpOPCfCiXISOImcGCeJE56+8aJkvCgZL0rGi5LxomS8KBkvSsaLkvGiZLwoJZ5+aqevfiaaKiKctNM3nUmSigRO2unbefgpV8Qwyc2xhBJPJJRq+LnZS4x2IjFVueT2l4XMw7dYDT9nTgomxXHiORFOlJPASeTEOOHpF55+wemrc5x4ToQT5SRwEukUTp1xgieK6h0tStpeeojn4UfJFRFOlJPASeSkXZN1rvwxVOm3FyDuk8xJwaS9BnGfeE6Ek3b6/kykVCRwEjkxThInmZOCSXsh4j7xnAgnPP32QkS0dJ4pVc9YeyHiPjFOEift9PM8T47FV6RgEhwnnpN2+uk8gy3V8INyEjiJnBgniZPMSaE/E7S9dHOfeE6EE+UkcBI5MU4SJ5kTnr7x9I2nb3gZSg0vQmpynDSfsXH/cS5k48biVSX7a6xtynwDxk08uzV5QT/NOzDuQl768Xpjsltg/AIjC4wuMGGBiQuMtY1Pl0zjrUkLTF5gCjfFLTB+gZEF5j+eg+v3p6/fG3HnTcVxT/f28wN/P9trMv8wtA58jY1f68Nm/bgdTiczXj52T1cHNY6/34abMxtvh/3T8PxxGKbTG5eDG1O+wcU+iE3XMrZ8Sr3PaWx9/5KfbpG4MjWnXLWUPjg/XsN4HX8A",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": "/Users/asterite/Projects/noir/test_programs/execution_success/array_dynamic_blackbox_input/src/main.nr"
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
