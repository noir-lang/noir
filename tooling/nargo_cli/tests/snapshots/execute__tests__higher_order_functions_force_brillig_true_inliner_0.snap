---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "11201131350698255217",
  "abi": {
    "parameters": [
      {
        "name": "w",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(w: Field) -> pub Field {\n    let f = if 3 * 7 > 200 as u32 { foo } else { bar };\n    assert(f()[1] == 2);\n    // Lambdas:\n    assert(twice(|x| x * 2, 5) == 20);\n    assert((|x, y| x + y + 1)(2, 3) == 6);\n    // nested lambdas\n    assert((|a, b| a + (|c| c + 2)(b))(0, 1) == 3);\n    // Closures:\n    let a = 42;\n    let g = || a;\n    assert(g() == 42);\n    // When you copy mutable variables,\n    // the capture of the copies shouldn't change:\n    let mut x = 2;\n    x = x + 1;\n    let z = x;\n    // Add extra mutations to ensure we can mutate x without the\n    // captured z changing.\n    x = x + 1;\n    assert((|y| y + z)(1) == 4);\n    // When you capture mutable variables,\n    // again, the captured variable doesn't change:\n    let closure_capturing_mutable = (|y| y + x);\n    assert(closure_capturing_mutable(1) == 5);\n    x += 1;\n    assert(closure_capturing_mutable(1) == 5);\n\n    regression_2154();\n\n    let ret = twice(add1, 3);\n\n    test_array_functions();\n    w + ret\n}\n/// Test the array functions in std::array\nfn test_array_functions() {\n    let two = 2; // giving this a name, to ensure that the Option functions work with closures\n    let myarray: [i32; 3] = [1, 2, 3];\n    assert(myarray.any(|n| n > 2));\n    assert(myarray.any(|n| n > two));\n\n    let evens: [i32; 3] = myarray.map(|n| n * two); // [2, 4, 6]\n    assert(evens.all(|n| n > 1));\n    assert(evens.all(|n| n >= two));\n\n    assert(evens.fold(0, |a, b| a + b) == 12);\n    assert(evens.fold(0, |a, b| a + b + two) == 18);\n    assert(evens.reduce(|a, b| a + b) == 12);\n    assert(evens.reduce(|a, b| a + b + two) == 16);\n    // TODO: is this a sort_via issue with the new backend,\n    // or something more general?\n    //\n    // currently it fails only with `--experimental-ssa` with\n    //  \"not yet implemented: Cast into signed\"\n    // but it worked with the original ssa backend\n    // (before dropping it)\n    //\n    // opened #2121 for it\n    // https://github.com/noir-lang/noir/issues/2121\n    // let descending = myarray.sort_via(|a, b| a >= b);\n    // assert(descending == [3, 2, 1]);\n    assert(evens.map(|n| n / 2) == myarray);\n    assert(evens.map(|n| n / two) == myarray);\n}\n\nfn foo() -> [u32; 2] {\n    [1, 3]\n}\n\nfn bar() -> [u32; 2] {\n    [3, 2]\n}\n\nfn add1(x: Field) -> Field {\n    x + 1\n}\n\nfn twice(f: fn(Field) -> Field, x: Field) -> Field {\n    f(f(x))\n}\n// Fixing an ICE, where rewriting the closures\n// during monomorphization didn't correspond\n// to an internal `if` type\n// found by @jfecher:\n// https://github.com/noir-lang/noir/pull/1959#issuecomment-1658992989\n// issue https://github.com/noir-lang/noir/issues/2154\nfn regression_2154() {\n    let x: u32 = 32;\n\n    let closure_if_else = if x > 2 { || x } else { || x + 2342 };\n\n    assert(closure_if_else() == 32);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
