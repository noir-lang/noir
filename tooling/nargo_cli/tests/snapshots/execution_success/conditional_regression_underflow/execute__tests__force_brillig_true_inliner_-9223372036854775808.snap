---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "361444214588792908": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "1998584279744703196": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14990209321349310352": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "15764276373176857197": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 53 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 10 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 19 }, Jump { location: 25 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 255 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U8, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 24 }, Call { location: 59 }, Jump { location: 25 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 9 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 7 }, JumpIf { condition: Relative(3), location: 30 }, Jump { location: 32 }, BinaryIntOp { destination: Relative(3), op: Shl, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, Jump { location: 32 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U8, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 36 }, Jump { location: 43 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 3 }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U8, lhs: Relative(1), rhs: Relative(3) }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U8, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 42 }, Call { location: 62 }, Jump { location: 43 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 46 }, Jump { location: 52 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U8, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 51 }, Call { location: 65 }, Jump { location: 52 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 58 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15764276373176857197 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14990209321349310352 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 361444214588792908 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 1998584279744703196 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
