---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndndTuMwEAXgd8l1LuIZ/8z0VVYrVKCgSlWLSllphXj3dRDJimZwc+bSJB9ycybJ2HnvHnf3b893++PT6bXb/HrvDqeH7WV/OtbRe1fy599eX7bHcfh62Z4v3abI0He742O3kVQ++u5pf9h1mzR8/O67UiyhzF9CU7gWAgtFhQywCLAgWDAsIiwSLDIs4MwFzlzgzBXOXOHMFc5c4czVzjznSYhciwSLDIsCC4GFoiIMA04CTggnjJOIk4STjJOCE8EJnn4w068/cbq7Qgi6QMGDyIPYg6IHJQ/KHlQ8SDxIHYg8FUGeiiBPRZCnIshTEeSpCPJUBNkVETjOqAwLJB6kDsSDBwUPIg9iD4oelDwoe5CnIthTEeypiOipiOipiAhXRB3cn/eHw/757tvCbPhcnZkJktDXfyPhqxnY67mmKLAQWCgq7PVcUwRYECwYFhEWcOYCZy5w5gJnLnDmCmeucOYKZ/7DWoBZvgizruvS4zB1tnH5UrVbbk7Ti5jTypa7TfQGybyu5W6ThBOzhmPg+YrJusa0TQQn5hWLnCYS87qWtE0CTsyyjEQzKeua0TaJOEk4yTgpOBGc6A2SaF372SYBJ4QTxknEScJJxomdfikTEVrXbraJwsRuNdsk4IRwwjix088yk8VjPCacZJzY6af5aSlxQQQnCpM04CTghHDCOLl17xsk4STjpOBEcKIwyQNOAtwoZsIJ4yTiBG96c8ZJwYnAxF5MpknkRTdmryVb4IftOpo3ChbPY8k4sbdL5vu+hnZN7FVYmwScEE4YJ/YVo3l3kxfvFvuzV5sIThQlZH/4ahOzxuZXvpQFyCgoKBAUKALqIIyn/fDNJ4cw3ZDLtbH9xadNGCcRJwknGScFJ4IThYm9nG4TMP2POvqzPe+394fduPs6Hnw7PkybsXV4+fsyHZm2a1/Op4fd49t5N27c/t+zHWdLNPQUQ53KWCCZ+kLjtMZDoYQ+lPx5LcYzI9Uz41y44/kqfd3bmQHFvq5D6xzrPP8B",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
