---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndndTttAEIbhe/GxD3Zn/2a5laqqAgQUKUpQCJUqxL3XRthV8WL8zuFiP8j4G5sZ72t3v799efx1OD2cn7ubH6/d8Xy3ux7Op2H12pX8/rPnp91pXD5fd5drd1PU9d3+dN/daCpvffdwOO67m+TefvZdKS1RQ/gQNfnPQrGoVKjDwmMhWAQsIhYJi4wFzlxx5oozrzjzijOvOPOKM6/tzHOehOpnkbDIWBQsFItKhXeOE8+JcBI4iZwkTjInhRPlhKfvm+kPf+L0dHnv6wJ5CxILChYULShZULagYkFqQdWAxFIRYqkIsVSEWCpCLBUhlooQS0VIuyJ8iDMqboHUgqoBBWdB3oLEgoIFRQtKFpQtyFIRwVIRwVIR0VIR0VIREVfEsLi9HI7Hw+Ov/wYz9z6dNRMUlY/fJho+XUF7nlsVBQvFolLRnudWhcdCsAhYRCxw5oozV5y54swVZ15x5hVnXnHm7XkuOP0QwS+mmohFwiJjUbBQLCoVX8xzq6Q9BIQwk7CxMY9uGjXi1g47pKkzCkm39dfrpHxDctjWW6+Sdhe6TppFHH2Y75hu60DXSeakecdiSBOJeVvvuU4qJu2+M4rMpGzrOteJcBI4iZwkTjIn5RuSZFufuU4qJtFx4jlpp1/KRHRJAieRk8RJ5qRwopy00886k8XbMjlOPCft9NP8UtK4IIGTyEniJHNSOFFOvnv2lyQ7TjwnwkngJHKSOMm4H8uFE+WkYlIcJ54T4YQ3ve2hLU0iL5qe9sy2Br74ICrzB5LF+7hGTtofpObnfqjZBVFOKiXSHnfWieekfcdk/qobwoIkTjInhRPFpD3tzf/ytSxApCBRkCkoBAwLP572xV5X9n56IBsjqHASOImcJE4yJ4UT5aRi0t7ZWic8feHpC09fePrC0xeevvD0hacvMP23YfV7dznsbo/7cTdgPPhyups2B4bl9c/TdGTaPni6nO/29y+X/biR8G8PYawiEe0l1uFSxuiy9EXGyxoP+ZJ7r/69Rsczk+slyfxCGc+v2g/b+zMI0g9j+ASG8bofht/hkofL/gs=",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
