---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfNbuJAEITfxWcOMz3/eZUIRYQ4kSXLIAdWWkW8+3bPdDnZA6vN5EJ9BlcZetrj5mN4GZ+vb0/T8np6Hx4eP4bndZrn6e1pPh0Pl+m08Lsfg5GXFIYHuxtSbJKa5CalSjZNbBNq4pr4Ji0lt5TcUnJLyS2ltJTSUkpLsYaVRDnAibLVi2ZVNgdWa1T5vCgaVZMqn59ES1Myqny5LEqqTtWrBtWomlQ5r4iWps6oWlVSlTIYAQ8IgAhIgAwoCl6KInXwFkAASZbSeA8IgAhIgAwoCkGSpaLBAgjgAB4QABGQALktTChNo1G1qqTqVL2qLmhtJVm52kwCtYFkzWoLVZCrymrVxqmQAUWhtk8FcckSFQ8IgAhIDUjayxYBB/CAABBXubFN7gdrpV7SepYADuABARABCZABRUFasUFNvvGVcBs+XdZxlKt+uS/5bj0f1nG5DA/LdZ53w6/DfK0nvZ8PS9XLYeVPuX/G5YWVA1+neRS67T7d5r6VMqmZstvs4b/9zmX1O1c6/N5E9Xvb43fB4foh/8wfe36/t277/j3X9y7A72OPn2jzp5/5A/X4U4I/d/lj3vxd9Q9b/bL/2e/v8kfZoas/dvVfQPvHntXnh6baeY/q8W/V4126x0/ofn78dfi35sk9vZsyNr4cevzF4duXYHv8EYtX8t21l/66u/mabfcjY78U8BsJNm0JFO4k/LOD4raEtmsH5oei3xKSuVuH2FWHPR8cjtP697wqMyqZNqSSTqmkYyrpnEo6qJJOqqSjKumsSjqskk6rpOMq6bxKOrCSTqykIyvpzFpV82QAkWWS+aNqVE2qWbU0tcYALIAADuABARABCZABSJbxmOp8bAEEcAAPCIAISIAMKAqEZEIyIZmQTEgmJBOSZZ6WJqgDdYOiICN1AwsggAN4QABEAJIdkh2SPZI9kn1NvkkzrtPheR6loaTjrssR/cWHl99nfIJ/TOf1dBxfrusovfj5t4lfHonvQnJ5vxv46z5G2iXay6LwgeUHnE1ODq2c6cqOvN1jyJTzC59h8mYgv+PS7G/S/H8A",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
