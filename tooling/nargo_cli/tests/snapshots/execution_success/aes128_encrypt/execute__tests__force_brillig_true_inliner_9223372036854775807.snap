---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "rZhdbuM4EITvomc/kGz+NHOVQRA4iTIwYDiBx15gEfju2yV2K9kBJGjoeUl9itQlqlkibX8Or+Pz9efT4fT2/mt4+PE5PJ8Px+Ph59Px/WV/Obyf5L+fg8Mfn/Lw4HeiRZVVa9PsVL1qUCXVODwEaFLNqkWVVWvT4lS9qvgRlFSjalLNqkWVVWtTdqpeVf1Y/BI0qibVrFpUWbU2rU7VqwZV9avqV9Wvql9Vv6p+tfkF1/yCl+szVM4XqJyPosGpetWgSqpRNalmVblfhbJqbUqYLwfwBsGADKJBMsgGRSGaT0SVB0gVQ5NqVkUJAdigKiSYYLTJGwQDMogGySAbFIVsPlPq0E7EzgdAMsgGbBdjGOg5MtfAG2AYmAbErkE0gCE6ieRN90L0GrACW2+RtjABGUQDvBDoGxLXoBjgnUB/ELqpt0hdA28AHzwFgtYAPrg7oiYjJRfaP8jh5hkQDZIBiqaLiwEb4I2UByWPV8YB8M55QDYoBqyAnFIABAMyiAZ4N+X5CGFs4A2CAe4VAdmgGLBBVUAYCU8avUEwIINokAyyAZzRDSS0QVVAQokB8EE3kL6IbiB9DdigKmARjOgG8tggGiQFhC6iGwhdg2BABrgXuoGINWCDqoAFroE3CAbUgoDMTZpUs6oGhVm1NkXayu22G2w/eLqcxxHbwbcNQraNj/15PF2Gh9P1eNwN/+yP1+miXx/706SX/VnOSkPG06uoGL4djiPotvuqdsul7FiLOdBcnrbXI8itnrijvrANnlPpqK+I8lRfk1+qj8v1sn5ovSwgHfVE1j95Vzrqo8taH33tef5s9ZUX+8/L9RlL3VSfU0+97LpmIBvvtxnYblDtCYILecFgpQPeY4FqI5DPNkvPgI3priasGWzrwrrDljasOcjnnC8HT10OvnyNId09hsWnWItDcPNsBl/+PE/b2sD3doHvbUII9zZhbVVKtirScqC31eeeVTF6mle1nvtHfGho9TH31Icw1y/uKmFlDpPNYM495d6FeUkKXQbJGiBf67oMgs2AJ+oxKPO+Xu6bgBR66ufbR+6qzzzXdwV47n/kuFRP5a4ArZVvCtCqwZYArRpsCdCawV8L0G8T8ChH+5fD+X8/pdzgdD7sn4+jHr5dTy/fzl7+/bAz9lPMx/n9ZXy9nkc4ff0eI39+RPn2KmvQo3xSlyMvq5GPOPI4SZV2VBmHHte6tIuuPN4wtP8A",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
