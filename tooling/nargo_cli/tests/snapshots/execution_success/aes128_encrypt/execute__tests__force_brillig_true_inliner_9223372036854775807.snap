---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZvRbuMgEEX/xc95YBgYhvzKalWlbVpFipIqTVdaVf33dbKxmw1eS5hci5dKVNzDFcNgmJbP5nn9+PH6sNm97N+b5Y/PZrt/Wh03+13b+vxaNI+HzXa7eX24/nVjTj/I6Vnw/rbandrvx9Xh2CyDmkWz3j03S/WhBbxstutm6c3Xz0UridkSb/IllC+x+RLOl7h8ic+XSL4k5Evyo+/zoy/50Zf86Et+9CU/+pIffcmPvuRHXwajH5kvkujpWrJIulq1l65WOaErlB6R9GCgdILSLZTOULqD0j2ULlA6NFcDNFcDNFcVmqsKzVWF5qpCc1WhuaqlucpGL12ZNKELlB6gdIXSI5IeDZROULoF0q0pXjPc0zne0ql03p2RS1dHKT1v3s8Smy/hfInLl/h8ieRLQr5E8yXDuSxdKKPqeNSF6NJVfLJirYHSCUp3hXSKocNT1KuZ/4sPxfjY9bXGyi1es/BnScyWsMmXDAaNjHSLlCjdPdhOEfEUkZsi8lNEMkUUpoh0imhwNRCx60XBFKSXM2A+gfmumD++QbhwhwHGtojhGu3IAGdRnCDyZorIgid4uEibNYA15nuCiW8HcOgBPHoAucMAFL7XoL8dIKAHUPQA8c4xuE7TgSVtTQ9uj4g3ZsSA9wwh9AAWPYCHHuuGS+wZ+PGElIDFKxYfi/FjqRgMFk9YvL3r3JdsI/8p4N/rbhIcFu+x+OLamu+6cnqsLK6Dj9KL6+BXdOGEXlpbG60glddjR72X1tYcce89nXeF0iOSXlyPdew7upOETlC6hdJL/3birO3pYbyr7zJDUhsynw0ytj+H2cRInNGI7wJD4m+MsDG1GKFajNhajPgZjdi+wMWcGJFajIRajGglRmjGfTV0J3INiQ1Xhw1fhw2pw8YdvzH+9gvG1kDpBKVbKJ2hdAeleyhdoPTir0OfTE5TukLpEUlnA6UTlG6hdIbSi3NVtKcn3372ULpA6cW52p+cnbqp90F2Zj4bY/dBdjyjkbFLh3O1GPG1GJFajMQZjYxdOrypxQjVYsTWYmTGfXXk6uG1DhuxChti6rBxx3vJvzbOdAeleyhdoPQApSuUHpH0gPw/ag4EpVsonaF0B6V7KF2g9ACjf7WtX6vDZvW4XV9ehb987J6uHokff7+tb96Lvx32T+vnj8P69HL8+9H4KW+coUWbXSfXbYvav76R823r/DiB1SxYz81TFnC0C46u9dD6+AM=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
