---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "361444214588792908": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "986260048197077973": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "1998584279744703196": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14990209321349310352": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "15764276373176857197": {
        "error_kind": "string",
        "string": "Stack too deep"
      },
      "16431471497789672479": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _75",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [[EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], EXPR [ (1, _7) 0 ], EXPR [ (1, _8) 0 ], EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ]], [EXPR [ (1, _12) 0 ], EXPR [ (1, _13) 0 ], EXPR [ (1, _14) 0 ], EXPR [ (1, _15) 0 ], EXPR [ (1, _16) 0 ], EXPR [ (1, _17) 0 ], EXPR [ (1, _18) 0 ], EXPR [ (1, _19) 0 ], EXPR [ (1, _20) 0 ], EXPR [ (1, _21) 0 ], EXPR [ (1, _22) 0 ], EXPR [ (1, _23) 0 ], EXPR [ (1, _24) 0 ], EXPR [ (1, _25) 0 ], EXPR [ (1, _26) 0 ], EXPR [ (1, _27) 0 ]], [EXPR [ (1, _28) 0 ], EXPR [ (1, _29) 0 ], EXPR [ (1, _30) 0 ], EXPR [ (1, _31) 0 ], EXPR [ (1, _32) 0 ], EXPR [ (1, _33) 0 ], EXPR [ (1, _34) 0 ], EXPR [ (1, _35) 0 ], EXPR [ (1, _36) 0 ], EXPR [ (1, _37) 0 ], EXPR [ (1, _38) 0 ], EXPR [ (1, _39) 0 ], EXPR [ (1, _40) 0 ], EXPR [ (1, _41) 0 ], EXPR [ (1, _42) 0 ], EXPR [ (1, _43) 0 ]], [EXPR [ (1, _44) 0 ], EXPR [ (1, _45) 0 ], EXPR [ (1, _46) 0 ], EXPR [ (1, _47) 0 ], EXPR [ (1, _48) 0 ], EXPR [ (1, _49) 0 ], EXPR [ (1, _50) 0 ], EXPR [ (1, _51) 0 ], EXPR [ (1, _52) 0 ], EXPR [ (1, _53) 0 ], EXPR [ (1, _54) 0 ], EXPR [ (1, _55) 0 ], EXPR [ (1, _56) 0 ], EXPR [ (1, _57) 0 ], EXPR [ (1, _58) 0 ], EXPR [ (1, _59) 0 ], EXPR [ (1, _60) 0 ], EXPR [ (1, _61) 0 ], EXPR [ (1, _62) 0 ], EXPR [ (1, _63) 0 ], EXPR [ (1, _64) 0 ], EXPR [ (1, _65) 0 ], EXPR [ (1, _66) 0 ], EXPR [ (1, _67) 0 ], EXPR [ (1, _68) 0 ], EXPR [ (1, _69) 0 ], EXPR [ (1, _70) 0 ], EXPR [ (1, _71) 0 ], EXPR [ (1, _72) 0 ], EXPR [ (1, _73) 0 ], EXPR [ (1, _74) 0 ], EXPR [ (1, _75) 0 ]]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32912 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 76 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U8) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U8) }, Cast { destination: Direct(32840), source: Direct(32840), bit_size: Integer(U8) }, Cast { destination: Direct(32841), source: Direct(32841), bit_size: Integer(U8) }, Cast { destination: Direct(32842), source: Direct(32842), bit_size: Integer(U8) }, Cast { destination: Direct(32843), source: Direct(32843), bit_size: Integer(U8) }, Cast { destination: Direct(32844), source: Direct(32844), bit_size: Integer(U8) }, Cast { destination: Direct(32845), source: Direct(32845), bit_size: Integer(U8) }, Cast { destination: Direct(32846), source: Direct(32846), bit_size: Integer(U8) }, Cast { destination: Direct(32847), source: Direct(32847), bit_size: Integer(U8) }, Cast { destination: Direct(32848), source: Direct(32848), bit_size: Integer(U8) }, Cast { destination: Direct(32849), source: Direct(32849), bit_size: Integer(U8) }, Cast { destination: Direct(32850), source: Direct(32850), bit_size: Integer(U8) }, Cast { destination: Direct(32851), source: Direct(32851), bit_size: Integer(U8) }, Cast { destination: Direct(32852), source: Direct(32852), bit_size: Integer(U8) }, Cast { destination: Direct(32853), source: Direct(32853), bit_size: Integer(U8) }, Cast { destination: Direct(32854), source: Direct(32854), bit_size: Integer(U8) }, Cast { destination: Direct(32855), source: Direct(32855), bit_size: Integer(U8) }, Cast { destination: Direct(32856), source: Direct(32856), bit_size: Integer(U8) }, Cast { destination: Direct(32857), source: Direct(32857), bit_size: Integer(U8) }, Cast { destination: Direct(32858), source: Direct(32858), bit_size: Integer(U8) }, Cast { destination: Direct(32859), source: Direct(32859), bit_size: Integer(U8) }, Cast { destination: Direct(32860), source: Direct(32860), bit_size: Integer(U8) }, Cast { destination: Direct(32861), source: Direct(32861), bit_size: Integer(U8) }, Cast { destination: Direct(32862), source: Direct(32862), bit_size: Integer(U8) }, Cast { destination: Direct(32863), source: Direct(32863), bit_size: Integer(U8) }, Cast { destination: Direct(32864), source: Direct(32864), bit_size: Integer(U8) }, Cast { destination: Direct(32865), source: Direct(32865), bit_size: Integer(U8) }, Cast { destination: Direct(32866), source: Direct(32866), bit_size: Integer(U8) }, Cast { destination: Direct(32867), source: Direct(32867), bit_size: Integer(U8) }, Cast { destination: Direct(32868), source: Direct(32868), bit_size: Integer(U8) }, Cast { destination: Direct(32869), source: Direct(32869), bit_size: Integer(U8) }, Cast { destination: Direct(32870), source: Direct(32870), bit_size: Integer(U8) }, Cast { destination: Direct(32871), source: Direct(32871), bit_size: Integer(U8) }, Cast { destination: Direct(32872), source: Direct(32872), bit_size: Integer(U8) }, Cast { destination: Direct(32873), source: Direct(32873), bit_size: Integer(U8) }, Cast { destination: Direct(32874), source: Direct(32874), bit_size: Integer(U8) }, Cast { destination: Direct(32875), source: Direct(32875), bit_size: Integer(U8) }, Cast { destination: Direct(32876), source: Direct(32876), bit_size: Integer(U8) }, Cast { destination: Direct(32877), source: Direct(32877), bit_size: Integer(U8) }, Cast { destination: Direct(32878), source: Direct(32878), bit_size: Integer(U8) }, Cast { destination: Direct(32879), source: Direct(32879), bit_size: Integer(U8) }, Cast { destination: Direct(32880), source: Direct(32880), bit_size: Integer(U8) }, Cast { destination: Direct(32881), source: Direct(32881), bit_size: Integer(U8) }, Cast { destination: Direct(32882), source: Direct(32882), bit_size: Integer(U8) }, Cast { destination: Direct(32883), source: Direct(32883), bit_size: Integer(U8) }, Cast { destination: Direct(32884), source: Direct(32884), bit_size: Integer(U8) }, Cast { destination: Direct(32885), source: Direct(32885), bit_size: Integer(U8) }, Cast { destination: Direct(32886), source: Direct(32886), bit_size: Integer(U8) }, Cast { destination: Direct(32887), source: Direct(32887), bit_size: Integer(U8) }, Cast { destination: Direct(32888), source: Direct(32888), bit_size: Integer(U8) }, Cast { destination: Direct(32889), source: Direct(32889), bit_size: Integer(U8) }, Cast { destination: Direct(32890), source: Direct(32890), bit_size: Integer(U8) }, Cast { destination: Direct(32891), source: Direct(32891), bit_size: Integer(U8) }, Cast { destination: Direct(32892), source: Direct(32892), bit_size: Integer(U8) }, Cast { destination: Direct(32893), source: Direct(32893), bit_size: Integer(U8) }, Cast { destination: Direct(32894), source: Direct(32894), bit_size: Integer(U8) }, Cast { destination: Direct(32895), source: Direct(32895), bit_size: Integer(U8) }, Cast { destination: Direct(32896), source: Direct(32896), bit_size: Integer(U8) }, Cast { destination: Direct(32897), source: Direct(32897), bit_size: Integer(U8) }, Cast { destination: Direct(32898), source: Direct(32898), bit_size: Integer(U8) }, Cast { destination: Direct(32899), source: Direct(32899), bit_size: Integer(U8) }, Cast { destination: Direct(32900), source: Direct(32900), bit_size: Integer(U8) }, Cast { destination: Direct(32901), source: Direct(32901), bit_size: Integer(U8) }, Cast { destination: Direct(32902), source: Direct(32902), bit_size: Integer(U8) }, Cast { destination: Direct(32903), source: Direct(32903), bit_size: Integer(U8) }, Cast { destination: Direct(32904), source: Direct(32904), bit_size: Integer(U8) }, Cast { destination: Direct(32905), source: Direct(32905), bit_size: Integer(U8) }, Cast { destination: Direct(32906), source: Direct(32906), bit_size: Integer(U8) }, Cast { destination: Direct(32907), source: Direct(32907), bit_size: Integer(U8) }, Cast { destination: Direct(32908), source: Direct(32908), bit_size: Integer(U8) }, Cast { destination: Direct(32909), source: Direct(32909), bit_size: Integer(U8) }, Cast { destination: Direct(32910), source: Direct(32910), bit_size: Integer(U8) }, Cast { destination: Direct(32911), source: Direct(32911), bit_size: Integer(U8) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(7) }, Mov { destination: Direct(32773), source: Relative(6) }, Call { location: 135 }, Mov { destination: Relative(1), source: Relative(5) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32848 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 16 }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(7) }, Mov { destination: Direct(32773), source: Relative(6) }, Call { location: 135 }, Mov { destination: Relative(2), source: Relative(5) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32864 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 16 }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(3) }, Mov { destination: Direct(32772), source: Relative(7) }, Mov { destination: Direct(32773), source: Relative(6) }, Call { location: 135 }, Mov { destination: Relative(3), source: Relative(5) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 32880 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 32 }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(4) }, Mov { destination: Direct(32772), source: Relative(7) }, Mov { destination: Direct(32773), source: Relative(6) }, Call { location: 135 }, Mov { destination: Relative(4), source: Relative(5) }, Call { location: 146 }, Call { location: 147 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32912 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 145 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 138 }, Return, Return, Call { location: 385 }, Load { destination: Relative(6), source_pointer: Relative(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 154 }, Call { location: 391 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(2) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(6) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 162 }, Call { location: 391 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(3) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(6) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 170 }, Call { location: 391 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 16 }, BlackBox(AES128Encrypt { inputs: HeapVector { pointer: Relative(10), size: Relative(11) }, iv: HeapArray { pointer: Relative(12), size: 16 }, key: HeapArray { pointer: Relative(13), size: 16 }, outputs: HeapVector { pointer: Relative(14), size: Relative(15) } }), Const { destination: Relative(1), bit_size: Integer(U8), value: 0 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 16 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Mov { destination: Relative(11), source: Relative(3) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 198 }, Store { destination_pointer: Relative(11), source: Relative(1) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Jump { location: 192 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32 }, Const { destination: Relative(10), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 16 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 48 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 71 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 16 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 55 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 87 }, Mov { destination: Relative(5), source: Relative(2) }, Jump { location: 215 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 286 }, Jump { location: 218 }, Load { destination: Relative(4), source_pointer: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(4) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(1) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 225 }, Call { location: 391 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(1) }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(10) }, Mov { destination: Relative(3), source: Relative(2) }, Jump { location: 232 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(14) }, JumpIf { condition: Relative(5), location: 273 }, Jump { location: 235 }, Load { destination: Relative(5), source_pointer: Relative(1) }, JumpIf { condition: Relative(5), location: 239 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(1) } }, Load { destination: Relative(1), source_pointer: Relative(6) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(1) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 245 }, Call { location: 391 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(1) }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(10) }, Mov { destination: Relative(3), source: Relative(2) }, Jump { location: 252 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(14) }, JumpIf { condition: Relative(2), location: 260 }, Jump { location: 255 }, Load { destination: Relative(2), source_pointer: Relative(1) }, JumpIf { condition: Relative(2), location: 259 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(1) } }, Return, Load { destination: Relative(2), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(5), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(7) }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(2), rhs: Relative(8) }, Store { destination_pointer: Relative(1), source: Relative(5) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(13) }, Mov { destination: Relative(3), source: Relative(2) }, Jump { location: 252 }, Load { destination: Relative(5), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, Load { destination: Relative(8), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(9) }, Store { destination_pointer: Relative(1), source: Relative(7) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(13) }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 232 }, Cast { destination: Relative(9), source: Relative(5), bit_size: Integer(U1) }, Cast { destination: Relative(8), source: Relative(9), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(13) }, JumpIf { condition: Relative(9), location: 294 }, Jump { location: 292 }, Mov { destination: Relative(5), source: Relative(8) }, Jump { location: 215 }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(5), rhs: Relative(11) }, JumpIf { condition: Relative(7), location: 297 }, Call { location: 394 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(5) }, Load { destination: Relative(7), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(12) }, JumpIf { condition: Relative(21), location: 320 }, Jump { location: 303 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(16) }, JumpIf { condition: Relative(22), location: 312 }, Jump { location: 306 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U8, lhs: Relative(7), rhs: Relative(19) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U8, lhs: Relative(19), rhs: Relative(7) }, JumpIf { condition: Relative(23), location: 310 }, Call { location: 397 }, Mov { destination: Relative(21), source: Relative(22) }, Jump { location: 318 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U8, lhs: Relative(7), rhs: Relative(18) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U8, lhs: Relative(18), rhs: Relative(7) }, JumpIf { condition: Relative(23), location: 316 }, Call { location: 397 }, Mov { destination: Relative(21), source: Relative(22) }, Jump { location: 318 }, Mov { destination: Relative(9), source: Relative(21) }, Jump { location: 326 }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U8, lhs: Relative(7), rhs: Relative(15) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U8, lhs: Relative(15), rhs: Relative(7) }, JumpIf { condition: Relative(22), location: 324 }, Call { location: 397 }, Mov { destination: Relative(9), source: Relative(21) }, Jump { location: 326 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U8, lhs: Relative(9), rhs: Relative(17) }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U8, lhs: Relative(21), rhs: Relative(17) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U8, lhs: Relative(23), rhs: Relative(9) }, JumpIf { condition: Relative(22), location: 331 }, Call { location: 400 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(13) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(9) }, JumpIf { condition: Relative(22), location: 335 }, Call { location: 403 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, JumpIf { condition: Relative(22), location: 338 }, Call { location: 394 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(9) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(22), rhs: Relative(12) }, JumpIf { condition: Relative(9), location: 361 }, Jump { location: 344 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U8, lhs: Relative(22), rhs: Relative(16) }, JumpIf { condition: Relative(23), location: 353 }, Jump { location: 347 }, BinaryIntOp { destination: Relative(23), op: Sub, bit_size: U8, lhs: Relative(22), rhs: Relative(19) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U8, lhs: Relative(19), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 351 }, Call { location: 397 }, Mov { destination: Relative(9), source: Relative(23) }, Jump { location: 359 }, BinaryIntOp { destination: Relative(23), op: Sub, bit_size: U8, lhs: Relative(22), rhs: Relative(18) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U8, lhs: Relative(18), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 357 }, Call { location: 397 }, Mov { destination: Relative(9), source: Relative(23) }, Jump { location: 359 }, Mov { destination: Relative(7), source: Relative(9) }, Jump { location: 367 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(22), rhs: Relative(15) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U8, lhs: Relative(15), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 365 }, Call { location: 397 }, Mov { destination: Relative(7), source: Relative(9) }, Jump { location: 367 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(21), rhs: Relative(7) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U8, lhs: Relative(21), rhs: Relative(9) }, JumpIf { condition: Relative(22), location: 371 }, Call { location: 403 }, Load { destination: Relative(7), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(14) }, JumpIf { condition: Relative(21), location: 375 }, Call { location: 394 }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 406 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(20) }, Store { destination_pointer: Relative(23), source: Relative(9) }, Store { destination_pointer: Relative(1), source: Relative(21) }, Mov { destination: Relative(5), source: Relative(8) }, Jump { location: 215 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 390 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15764276373176857197 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 986260048197077973 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16431471497789672479 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 1998584279744703196 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 361444214588792908 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14990209321349310352 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 410 }, Jump { location: 412 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 427 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 424 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 417 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 427 }, Return]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
