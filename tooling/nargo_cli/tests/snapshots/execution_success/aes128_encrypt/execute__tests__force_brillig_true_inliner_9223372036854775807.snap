---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZvRbuIwEEX/Jc88eDz2eMyvrFYVbWmFhKCidKVV1X/fwJKUxawlx1zkl0qpfM9cZTxOPMGf3fPy8eP1YbV52b538x+f3Xr7tNivtpv+6vNr1j3uVuv16vXh/N+dOfwhp0fB+9tic7h+3y92+24e1My65ea5m6sPPeBltV52c2++fs56SSyWeFMuoXKJLZdwucSVS3y5RMoloVxSnn1fnn0pz76UZ1/Ksy/l2Zfy7Et59qU8+3I1+5H5JImeziWzZKhVexpqlRO6QukRSQ8GSico3ULpDKU7KN1D6QKlQ2s1QGs1QGtVobWq0FpVaK0qtFYVWqtaW6ts9DSUSRO6QOkBSlcoPSLp0UDpBKVbIN2a6hnJI51jQq/NqjNyGuoooVNZVo8SKpfYcgmXS1y5xJdLpFwSyiXXVwoZUhlV81kXotNQ8cmMpYikWwOlu0o6xTDgKerZnf+LD9X4OIy1xsolviyvR0kslrApl1ytajIyTFKidPVgO0XEU0RuishPEckUUZgi0imiq7OBiN0oCqaivJwB8wnMd9X8/ALhwg0C5JaI6z3aTICjKE4QeTNFZME3+HqTtiiANeb7BhNfBnDoAB4dQG4QgML3HPSXAQI6gKIDxBvn4LxMr0xpa0Zw/753YUYMeM0QQgew6AAe+lp3vcVegM8XpAQsXrH4WI3PlWIwWDxh8fam975mGflPA/9We5PgsHiPxVf31vwwlNPXyuo+eJZe3Qc/owsn9NreWraDVN+PzXqv7cc64tF7et8VSo9IenU/1rEf6E4SOkHpFkqv/XbirB3pIT/UD5UhqQ25nw0ydnwPs4mReEcjfkgMib8wwsa0YoRaMWJbMeLvaMSODS7mxIi0YiS0YkQbMUJ3XFfD8EauIbHh2rDh27Ahbdi44TPGXz7B2BoonaB0C6UzlO6gdA+lC5Re/XQYi8lpSlcoPSLpbKB0gtItlM5QenWtio705NnPHkoXKL26Vsc3Z6du6n6Qnbmfjdx+kB3f0Uhu0+FcK0Z8K0akFSPxjkZymw5vWjFCrRixrRi547qa2Xp4bcNGbMKGmDZs3HBf8q+NI91B6R5KFyi9uiYz33q4+lxYno78pTNXnwvL0wlKt1A6Q+kORv/qr34tdqvF43p5Ovv88rF5OjsKvf/9trw4Ff222z4tnz92y8P56O+j0YfZwVFnfYyD6/6K+m9M5Hx/dfyRPPerHas9XB5yzRpnHKn30Pv4Aw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
