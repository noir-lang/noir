---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "rZhdbuM4EITvomc/sNn8zVUGQeAkysCA4QQee4FF4Ltvl9itZAeQoKHnJfUpUpeoZom0/Tm8js/Xn0+H09v7r+Hhx+fwfD4cj4efT8f3l/3l8H6S/34ODn8opuGBdqJZtajWpsmpkqpXZdUwPHhoVE2qWbWo1qbZqZKq+DGUVYNqVE2qWbWo1qbFqZKq+hXxi9CgGlWTalYtqrVpdaqk6lXVr6pfVb+qflX9qvrV5udd8/Mk1yeonM9QOR9EvVMlVa/KqkE1qiZVuV+FFtXalDFfDkAG3oANgkE0SAZZIZhPQBUBpKpAo2pSRQkDikFViDDBaCMZeAM2CAbRIBlkhWQ+U+rQTsSOPCAaJINiF2MY6Dky14AMMAxMA2LXIBjAEJ1E8qZ7IXoNikKx3iJtfgI2CAZ4IdA3JK5BNsA7gf4gdFNvkboGZAAfPAWC1gA+uDuiJiNlh5snABsEAxRN1ySDbICby/Mx4Y1xALxyBIgGySArIKbsAWTgDdgAryYDqgLC2IAMcK8AiAbJIBsUA/jIEzPC2IAMvAEbBINoAGd0AwltUAzgLOFl5JHRDaQvoBtIX4NsUBSwBgZ0A4tgAzYIBniv0Q2ErgEZeAPcC91AxBpkg2JQFbDANSADb8AtCMjcpFE1qWpQSlGtTZG2fLvtBtsPni7nccR28G2DkG3jY38eT5fh4XQ9HnfDP/vjdbro18f+NOllf5az0pnx9Coqhm+H4wi67b6q3XJpcUWLi+e5PG6vR6JbPZeO+lxs8CXmjvqKTE/1NdJSfViul/VD62UB6ahntv7Ju9JRH1zS+kC15/mT1dey2P+yXJ+w1E31KfbUy65rBrLxfpuB7QbVnsA7nxYMVjpAhJWqjUA+2yw9Azamu5qwZrCtC+sOW9qw5iCfc74ciLscKH+NId49hsWnWIuDd/Nsesp/nqdtbSj3dqHc2wTv723C2qoUbVXk5UBvq089q2Ignle1nvsHfHpo9SH11Hs/1y/uKn5lDqPNYEo95eT8vCT5LoNoDZCvdV0G3maAmHsM8ryv5/smIPqe+vn2oXTVpzLXdwV47n8oYame810BWivfFKBVgy0BWjXYEqA1g78WoN8m4FGO9i+H8/9+SrnB6XzYPx9HPXy7nl6+nb38+2Fn7KeYj/P7y/h6PY9w+vo9Rv78CPLtVdagR/mkLkckqxEFHBFOcuUd14JDwrUu7oLLjzcM7T8=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
