---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZzRTis5DIbfpde9iBPbcXiV1eqoQDmqVBVUYKUV4t13hu2UnqYayaR/lRtEIP/nX0nsmUza+Vg8ru/ff//a7J6eXxd3f30sts8Pq7fN825ofXwuF/f7zXa7+f3r9M+LMP4g0S/B68tqN7Zf31b7t8WdBVsu1rvH4beYBsDTZrte3En4/Hs5SLJfYn5JcUs0+CXkl0S/JPklfFES8yRJVknEL1G/JPsl5pcUtyQHv4T8kouzny1MEsmVJPkl7JeIX6J+SfZLzC8pbokFv4T8Ev/s28XZLykdJEXoVLKsukaLh67RqjJhDKULlK5QeobSDUovSHoJUDpB6RFKh+ZqgeZqgeZqgeZqgeZqgeZqQeZqDMhcjdS6ZlKabmFTKhW9ddw56KErU033jfsoicEvIb8k+iXJL2G/RPwS9Usu57JOU1nM5mddiQ5dVayiG5RekPQUGulDnZzwQ1E7Gfn/8YTFRyw+YfGMxQsWr1h8huIZu+65feWUqW8MUc/xvpXzJRG/RP2Si7NGlHgaq+GRSEO5YgPzC5YvoZk/v/CE0AEiOkBCB2B0AEEHUHSADA6g6DzQa6yiuRKs3lX0JZKfiPQnIkMPcHulHDaS3wNM6SxADugAhA4QrxCA8vcalPMACR2A0QHkynNwmqYXlnQMR3CkfG5GwTUjZ3QAAwcw7H7OWvdz8wlpCYtnLF6a8XOpaIrFZyzerjr2LWXESnOOzKVgCVg8YfHc+nRXpq6p3l41nzfM0/V6dK2eezefN8w9mU4hAr2n0HpGxZSO3q2iM5QuUHrrmuEkE521omco3aD01jMqjvFIz/NdZcoMrWxQvJ0NCvF4HxYrI3JDIzJNDKlURrQXI7kXI9aJkUg3NBInKqWq4MfYi5HUixHuxcgN62o+fijx/CNmKYU+bFAfNmIfNq54jZHqCpYUSs9QukHpBUnnAKUTlB6h9OarwzGZ2Go6Q+kCpSuUnqF0g9ILki7Nuap2pFfXfiEoPULpzbl6vHNm4x/vB0VvZ2N2PyjlhkbmNh0aejFCvRiJvRiRGxqZ23So9mIk92LEOjGSb1hXZ7YemfuwIX3Y0D5sXHFf8qeNkW4BSicoPULpCUpnKF2g9ObEmDsFM+gZmxmUXpD05u/fzdMJSo9QeoLRP4fWP6v9ZnW/XR/eivD0vns4eUnC278v67P3Jbzsnx/Wj+/79fjmhO+XJozzx5SXnGx0PbRoOH0jlqFF4z/TcCzPgcbmOBscbMkUBg+Dj/8A",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
