---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "rZjdbuIwEIXfJddc2B7/9lWqqqI0XSEhQCmstKp4950Tz4T2IlHW7A3nC2FOnPGJDXx17/3b9dfr/vhx+uyenr+6t2F/OOx/vR5Ou+1lfzryu1+dwYsNsXuyG9YkmkVL1WhEragTJVHfPTloEI2iSTSLlqrJiFpR9iMoiXrRIBpFk2gWLVWzEbWi4pfZL0C9aBCNokk0i5aqxYhaUScqfkX8ivgV8SviV8SvVD9nqp+z/PkI5fMJyuc9qzOiVtSJkqgXDaJRlK9XoFm0VCXMlwFYBadACl4hKESFJODVx6PKArgqQ4NoFEUJAbJCEQgwwWiDVXAKpOAVgkJUSAJRfcbUoZ2InXWAoBAVsn4Yw0DPkbkKVgHDwDQgdhW8AgzRSSRvvBaiVyELZO0t0uZGIAWvgAcCfUPiKiQFPBPoD0I39hapq2AV4IO7QNAqwAdXR9R4pGRcfYMMKaAoAoJCVMDFebrI4gEsADxxBuAVgkJUwFPGwyHEtIJVcAp4Mh0gKxQBhLECrkUArxAUokJSgI8HFAGEsYJVcAqk4BXgjG4goBWSApzROuSR0A2kj9ANpK9CVEgCSJ9HN7AGVnAKpMDOHt1A6EZA6CpYBTzK6AYiViEqJIWsAB90AwtcBavgFKgGAZkbNYhGUQlKzqKlKtKWbrdNp/vB62Xoe2wH3zYI3jbO26E/Xrqn4/Vw2HS/t4fr+KHP8/Y46mU78Fm+/f74zsqGH/tDD7pt7tVmvjSbLMXZ0VQe1te7pPWUG+pT1sHnkBrqC/I61pdg5+r9fD2vH1LPC0hDPZH2j5+VhnpvotR7W1ruP2p9ybP9z/P1EUvdWB9DSz3vumrAG++3GVhvUPQOnHFxxmChA9Zizakj4O82c/eAjemhJiwZrOvCssOaNiw58Pecu4OlJgeb7mMID49h9i6W4uDMNJvOpn/P07o25Ee7kB9tgnOPNmFpVQq6KtJ8oNfVx5ZV0WOvr6uajy31zk31s7sCdp45g6AzEGNLuTVuWlJck0HQBvDPsiYDpzNgiVoM0rQvp8cmILiW+unyPjfVxzzVNwVw6r/Pfq6e4kMBWipfFaBFgzUBWjRYE6Alg/8WoPkJWKq3NH0v+rmCvfDRdrcffvyVcoPTsN++HXo5/Lged9/OXv6c9Yz+FXMeTrv+/Tr0cLr/H8Mvz55/vfIa9sLf1PnI8mpmPY7wy+2ZCm2oZBxafNaEjTfp5Yah/QU=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
