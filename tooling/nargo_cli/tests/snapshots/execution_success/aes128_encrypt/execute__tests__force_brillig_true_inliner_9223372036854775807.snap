---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZvRauMwEEX/xc950Gik0Si/siwlbdMSCElJ04Wl9N/XycZuNvYKZOUavRRcdM9cNBpZHsefzfP68eP1YbN72b83yx+fzXb/tDpu9rv26vNr0TweNtvt5vXh+t+NOf0hp2fB+9tqd7p+P64Ox2YZ1Cya9e65WaoPLeBls103S2++fi5aScyWeJMvoXyJzZdwvsTlS3y+RPIlIV+Sn32fn33Jz77kZ1/ysy/52Zf87Et+9iU/+zKa/ch8kURP15LFYKhVexlqlQd0hdIjkh4MlE5QuoXSGUp3ULqH0gVKh9ZqgNZqgNaqQmtVobWq0FpVaK0qtFa1tFbZ6GUokw7oAqUHKF2h9IikRwOlE5RugXRritcM93SOt3QqnXdn5DLU0ZCeN+9nic2XcL7E5Ut8vkTyJSFfovmS8VqWLpVRNZ11IboMFT9YsdZA6QSlu0I6xdDhKerVzP/Fh2J87MZaY+UWr1n4syRmS9jkS0aTRka6RUo03D3YThHxFJGbIvJTRDJFFKaIdIpodDUQsetFwRSUlzNgPoH5rpif3iBcuEOA1BYx3qNNBDiL4gSRN1NEFjzB403arADWmO8JJr4N4NABPDqA3CEAhe816G8DBHQARQeId87BdZmOLGlrenB7RLwxIwa8ZwihA1h0AA891o232DPw6YKUgMUrFh+L8alSDAaLJyze3nXuS7aR/zTw7/VsEhwW77H44t6a74by8FhZ3AdP0ov74Fd04QG9tLeW7CCV92OT3kt7a4649z6cd4XSI5Je3I917Du6kwGdoHQLpZe+O3HW9vSQHuq7ypChDZnPBhnbn8PswEic0YjvEkPib4ywMbUYoVqM2FqM+BmN2L7BxTwwIrUYCbUY0UqM0Iz7auhO5BoGNlwdNnwdNqQOG3e8x/jbOxhbA6UTlG6hdIbSi0utXzJOh3QPpQuUHqB0hdIjks4GSi+uVdGePrjDsYXSGUovrtX+fOjUTX3qYQ7z2Ug99bAzMxpJHa0d1WLE1mKEazEiMxpJHa1dqMWI1mIkVmLEz7ivJg7Y3tdhQ+qwEaqwIXd8LvnXxplOULqF0hlKd1C6h9IFSi8ujMS7Hi7+LixNj0h6MFA6QekWSmco3cHoX+3Vr9Vhs3rcri/fPr987J6uPoU+/n5b33wV/XbYP62fPw7r0/fR359Gn1YHR120MU6u2ytq3zGR8+3V+Sf43N4HWO3p8pRr1rjgSK2H1scf",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
