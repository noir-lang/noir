---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndndTttAEIbhe/GxD3Zn9meWW6mqKkBAkaIEhVCpQtx7bYRdFS/G7x4u8QPG39iZ8b529/vbl8dfh9PD+bm7+fHaHc93u+vhfBpWr11O7z97ftqdxuXzdXe5djfZXN/tT/fdjcX81ncPh+O+u4nu7Wff5VwTRfVDlOg/C8OiUGEOC4+FYKFYBCwiFgkLnLnhzA1nXnDmBWdecOYFZ17qmac0CbPPImKRsMhYGBaFCu8cJ54T4UQ5CZxEThInmRPjhKfvq+kP/+J0d3nvywL5FiQtSFtQaEGxBaUWlFuQtaDSgKSlIqSlIqSlIqSlIqSlIqSlIqSlIqReEV7DjLJbIGtBpQGpa0G+BUkL0hYUWlBsQakFtVSEtlSEtlREaKmI0FIRAVfEsLi9HI7Hw+Ov/wYz9z6dVRMUk4/fJqafzqA+z62KjIVhUaioz3OrwmMhWCgWAQucueHMDWduOHPDmRececGZF5x5fZ5TZx9C/WKqCVhELBIWGQvDolDxxTy3Tup/RWeiG7v54KZRI2xtyzVOnZFG29aUr5P0DUm6rSFfJfXWdZ1Uyz54na+YbWtb10nkpHrFgsaJhLStYV0nxkm1LIPITPK2VnWdeE6EE+UkcBI5Sd+QKNua03VinBRMguPEcyKcKCf19HOeiC1J5CRxkjkxTgom0XFSTz/ZTBaP8SicKCf19OP8tLSwIJGTxEnmxDgpmCTHyXf3foUIJ8pJ4CTifiwlTjInxknBJDtOPCe86a2PeXESadH01Ke8FVC+eIsq8wuSxWOvKCf1t1jz7TUU4IJkToyTQonUJ6R1Ur9iMr/VVV2QwEnkJHGSMalPe/M3q+UFUAoCBZGCRMCw8ONhX+x1Je+nG7IyggonykngJHKSOMmcGCcFk/rO1jrh6QtPX3j6wtMXnr7w9IWnLzx9gem/Davfu8thd3vcj7sB44cvp7tpc2BYXv88TZ9M2wdPl/Pd/v7lsh83Ev7tIYxVJJJ7CTacyhhdkj7LeFrjRz7H3pt7r9HxyFB6iX5+oIzHF+uH7f0ZqPTDTD2BYVbuh0l2OOXhtP8C",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
