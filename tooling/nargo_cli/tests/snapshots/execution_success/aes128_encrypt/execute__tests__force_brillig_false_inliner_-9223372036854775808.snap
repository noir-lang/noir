---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1dSW8cxxWu5izkcESRkryvkld5756FM/QiU7aofRe1UeusEkWR2vccJjnkECDIDwiQcy4xkEsOuQS5BEEugRHAQA5BLrkFSAD/AtcTu8hval6RsllN+xlq4KG7v/666nvV1W+6qx+LgZpfHmj7VbwdaEvFa1oGLCxgsD4GSzFYmsEyDJZlsH4GG2CwHIMNMliewdYw2BCDrWWwYQYbYbB1DLaewTYw2BMM9iSDPcVgTzPYMwz2LIM9x2DPM9gLDPYig73EYC8z2EYG28RgrzDYqwz2GoO9zmBvMNibDLaZwd5isLcZ7B0Ge5fB3mOw9xnsAwYLGSxisAKDFRmsxGBlBhtlsAqDVRlsjME+ZLCPGOxjBvuEwbYw2KcMNs5gWxnsMwb7nMG2MdgEg21nsB0MtpPBdjHYbgbbAxgta+K12TfHAti247zZxriO8RzjOMZvjNsYrzFOY3zGuIzxGOMwxl+MuxhvMc5ifMW4ivEU4yjGT4ybGC8xTmJ8xLiI8RDjIMa/jbC9CbYxzmF8w7iG8QzjGMavzbCN8QrjlIlP1Ja07NW2T9t+bQe0HdR2SNthbUe0TWo7qu2YtuPaTmg7qW1K2yk130eUWuxfxk9czLHxeB2ubIne9VdWmJTG9wRofF+Axg8EaAwFaIwEaCwI0FgUoLEkQGNZgMZRARorAjRWBWgcE6DxQwEaPxKg8WMBGj8RoHGLAI2fCtA4LkDjVgEaPxOg8XMBGrcJ0DghQON2ARp3CNC4U4DGXQI07hagcY9HjTgmacY7T2s7o+2stnPazmuraatra2hramtpa2u7oO2itmltl7TNmMLMYDsVZg/An2Gwswx2jsHOM1iNweoM1mCwJoO1GKzNYBcY7CKDTTPYJQabiTFc+uL1eLwOV7ZEe6GsYjhaKrUqhVZUjGphYaxeLYelcn20GlWjcrXcLFSLxVa1VK2M1ccq4VhUKraidnms2I4LO6383yxJ+LzPo89nhPi836PPZ4X4fMCjz+eE+HzQo8/nhfh8yKPPNSE+H/boc12Iz0c8+twQ4vOkR5+bQnw+6tHnlhCfj3n0uS3E5+Mefb4gxOcTHn2+KMTnkx59nhbi85RHny8J8fmUR59nPPpMCVfmvVqpxUQ6XHwPyngsK7GBo0CAxj4BGlMCNKYFaMwI0JgVoLFfgMYBARpzAjQOCtCY96gRP0wkpXeNgDYdEqBxrQCNwwI0jgjQuE6AxvUCNG4QoPEJARqfFKDxKQEanxag8RkBGp8VoPE5ARqfV7KeJV8Q0KYvCtD4kgCNLwvQuFGAxk0CNL4iQOOrAjS+JkDj6wI0viFA45sCNG4WoPEtARrfFqDxHeX3WdJoNM+Ul7XNapvTdkXbVW3XtF3XdkPbTW23tN3WdkfbXW33tN1X8xNRdSUDU2F2gvAsg80x2BUGu8pg1xjsOoPdYLCbDHaLwW4z2B0Gu8tg9xjsPoM9UMsnTq/0AzUmTocrW6LLyv/NkoTP+zz6PCvE5/0efZ4T4vMBjz5fEeLzQY8+XxXi8yGPPl8T4vNhjz5fF+LzEY8+3xDi86RHn28K8fmoR59vCfH5mEefbwvx+bhHn+8I8fmER5/vCvH5pEef7wnxecqjz/eF+HzKo88PPPpM79Jmtsq94H8Qt0EqPk6Jm5QYaWY2pcQ5SkyjxC9KpqJkJUoGomQbGhyhZBFKxqBkB0omoI/19DGcPjbTx1z6WEofI+ljH31Aow9U9AGIPrBsVPMzgdIAPA1w0wAyDdDSACgNMNIAHg2Q0QAUDfDQzJc0syTN3EgzI9KFpOxsmjmPZqajmd9oZjWauYxmBqOZt2hmK5o5imZmopmPaGYhmrnHzIyzVc3PdEszk9DMHzSzBs1cQTND0MwLNLMBzRywR7kX04e+jtc5CzfjGePxfriyJcpBub7Lr4aVUs7yz7P+Yk4t9jv/5RfCnOr9IwGfid39cTnbOovl274oWBuefQ5yJ4Az4eBsB852B2cHcHY4ODuBs9PB2QWcXQ7ObuDsdnD2AGePg7MXOHsdnH3A2efg7AfOfgfnAHAOODgHgXPQwTkEnEMOzmHgHHZwjgDniIMzCZxJB+cocI46OMeAc8zBOQ6c4w7OCeCccHBOAuekgzMFnCkH5xRwTjk4p4Fz2sE5A5wzDs5Z4Jx1cM4B55yDcx445x2cGnBqDk4dOHUHpwGchsXJwbZSvn8nSqVk42whHFLdsVWBL6budDJ1R4FVn7L8VFb9gyrJ37T5P/DC+oweu33M9pDhdBb1BNaxdKfXD3Ms0+n2gxZ6HtwCPLtv9QFvF2zvVt0a+hgfAsaHJPtXVT/nJ9uHopC7Bvb1SXe668ZjeA3S0J5brPZJos9h+yRzf0fhBod+s01Lf0ctLCmrPbGNTJsNIN86loNj6U53PYPxfhrqwbKMjozF3xnvD8frLJxjzh9h6s9a9XfpZjBsI7usFIMZPr3LbY2382rxP1D81pyjetudbDzeD1e4mDiBccuO4RnAPfavR47hC9dUJRkPFmN4xtJjt48d/7LJtE8YWOWjnizTPuZa9jPHTFnmW30GykJ+FnxEPm6b8xGbitcjTJl23+1Xvf4ghvfGpOVbCniBY61Ubz/CckcYXeb6JvubE4bJ3lOL79bJ9MmwkFO911f5Kz8y5WO/8xfvooX2ySXTPgv6BxMpP+p55sa+Ste8bbVbPt7H+x3PzcBx5M9AmdPx9jCUi76p+DxT/hAct38XDQf/89OQVV5g4WnHeWnLV5xogvM1Z/lqyr8Bvl6Lt7l2XgO8ttUmtg+oay1o4nRlLV3mGtyJ13QvfGGVaZ5n0Fcu1hl8hOEPA6fP8icPxxaej6x9388Dps3Xqd7FHFsPdaNGe0lZ+6ib2vP3UK7Ns+vEdsL6UUOf6r02XBxbB/oCxg+bbzSnmTKwrozF/zn4+g+rTK7vcPeJrSHr4Ls0/AI0fOUoE+MStlvGUeYvoUz7nljH+LXUPbGe4XNtO6x6+705N8ec5/GeKAwxWs1ijm2AulGjvXD3hNG9knsC67djDdfHh61jRkPWwce+gvxfg/avHPVh/1oLnEGrTMP/DZT5BfhMC44TLLyzxus0HPMZE0nHP0EHan2ov9PtN3dvI9++B7h7Bq+PabMR1dvPR6xj+LuXtzQv9zuaZDtWqotJ4+YaZlTv/YD1Zyz+7+J9fK4z65VM+NOu1KJ2sdaulWvNZqlRW2+Vr6Dt8gnU3yiP1hulci1sRbRbWK7+1RubKNYC8M9ckwBMWfVnLP7f4jX1sz9YmtOJaC5VTHmZZTTbPhn+n0HzH1dFc7lHc7CMZoNnQWvg4KCPhv+neE196f/xtv1+j3rovL+uSlsUV70t/rKCtuBiawp4X1ptltB9Grr8dd2nAeNT4OBgmxn+35doM9d78ZcWD3UlGV9HS6NRtVqrNkYb7bFSo77a8V2H9kqjVomisVLUKkXl5ernxsnxuYcWM9aOY/HIN+VlLP6/DFfbv+Nt+1sK1ke8/y3BCxzrh2UwWLrTjXFj9PjtwvBN3YOdXo3mWB6OZax61sT72F5YltGRsfj/jffNNcHvDeb8Eab+Aav+Lt0MZo/R5Bl+nuHT9fmPKS9eo+++x+Yf1mmVj5itzfSdJO6rQrU6Olao61/8ZqPdLBWXu69+Fm/Lzj2rhquVe5ZQ3kAj2fF3PvcMfVl4r7B49jnYvyeAM+HgPM496962OY9zz7q3bc7j3LPubZvzY8s9M5wmcJoOTgs4LQenDZy2g3MBOBccnIvAuejgTANn2sG5BJxLDs4McGYcnMvAuezgzAJn1sGZA86cg3MFOFcszmrlCib0u9h4lDyThL5ZNwOrPqV63w+w/tXKM+HyOrg8k2+bK5i1jmXgmLm+9O5cB57dt+x8iGRy2MoJ50NE4ffX7x49v0lSv1sqP/K79jtuzCbh3NLH/U7J6ncp61i60+vHt+132CaYvzsL23PAwb6KPgSMD8n230ooNTe6brVPMr8rlYT/xuzHkRt9Od7/IedGt+JtzI3+SYw9zl1eFBRY9Rk9y8WnhJ65G6ZeLte3j9Fj+AMMP7UEP8fwl8rVTiovE/MisM9h+5q2wBydAQbDMVyjd6ln9Lz64edP/DTe/77zJ74Bo3xDun6aAAA=",
  "debug_symbols": "pZfdbuIwEIXfJddc2OO/cV+lQhVtsxUSApTCSquKd98Ze07avWC1695wvkDOCYwnzvAxvc7P17en/fHH6X16ePyYnpf94bB/ezqcXnaX/eko735MTl9Kmh78Ziq5S+nCXWoTdl18F+oSusQuPYV7CvcU7incU2pPqT2l9hTvRElVAoKqWKMqm4o5iXpnmkzlSlm1mLKpnF9EyZl6U7kOqwbTaJpMs2kxZVPJq6LBmXpTMg2mWgenkAAZUAAMqAbRAbQqWo9IgADQZC1RTIAMKAAGVIPkAJqslU0ECIAISIAMKADu65Jq1+xMvSmZBtNoauvZOkkXrPWSQusfXarWQQ30qrpIrW8aMKAatO5poC5dmRoBCZABpQNpd/mqEAARkADqqjex6e3gvdZLO88TIAAiIAEyoAAYUA20Ezu05JtcCXfh02WZZ73ql9tSbtbzbpmPl+nheD0cNtPP3eHaTno/745NL7tFPpW2mY+vohL4Y3+YlW6bT7e7byUmMxOH1Z7+2R8Cmz+EOuCPLps/+hF/SAHXT/w9fx75/dGH9fuPXD+GBH/MI36i1V++50804i8Ffh7yZ179Q/VPa/04fu/3D/mzbszNn4f6L6H988jqyzPT7LJHjfjX6skuPeIndL88/Qb8a/PwSO8WxsbHacRfA759TX7En7F4le+uvfbX3c3XrbsfOf+lgP+R4MuaQOlOwl87KK9L6Id2YHkoxjWhuLt1yEN12MrB7mW//Dmu6ohKrs+oZEMq2ZRKNqaSzalkgyrZpEo2qpLNqmTDKtm0Sjauks2rZAMr2cRKNrI2tTwdQHSZdP5omk2LKZvWrt45gAcQIAAiIAEyoAAYgGSdjqmNxR5AgACIgATIgAJgQDUgJBOSCcmEZEIyIZmQrOO0NkGbpztUA52oO3gAAQIgAhIgA5AckByQHJEckRxb8k2bcdnvng+zNpR23PX4gv6Sw8uvMz7BH6bzcnqZX6/LrL34+a9JXh5J7kIKvN1M8nUfM20KbXVR5MDLA86XoIdezwx1Q9FvMWTq+VXOcLwaKG6kNNubNv9v",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
