---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _123",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:8 bits []",
    "BLACKBOX::RANGE [_1]:8 bits []",
    "BLACKBOX::RANGE [_2]:8 bits []",
    "BLACKBOX::RANGE [_3]:8 bits []",
    "BLACKBOX::RANGE [_4]:8 bits []",
    "BLACKBOX::RANGE [_5]:8 bits []",
    "BLACKBOX::RANGE [_6]:8 bits []",
    "BLACKBOX::RANGE [_7]:8 bits []",
    "BLACKBOX::RANGE [_8]:8 bits []",
    "BLACKBOX::RANGE [_9]:8 bits []",
    "BLACKBOX::RANGE [_10]:8 bits []",
    "BLACKBOX::RANGE [_11]:8 bits []",
    "BLACKBOX::RANGE [_12]:8 bits []",
    "BLACKBOX::RANGE [_13]:8 bits []",
    "BLACKBOX::RANGE [_14]:8 bits []",
    "BLACKBOX::RANGE [_15]:8 bits []",
    "BLACKBOX::RANGE [_16]:8 bits []",
    "BLACKBOX::RANGE [_17]:8 bits []",
    "BLACKBOX::RANGE [_18]:8 bits []",
    "BLACKBOX::RANGE [_19]:8 bits []",
    "BLACKBOX::RANGE [_20]:8 bits []",
    "BLACKBOX::RANGE [_21]:8 bits []",
    "BLACKBOX::RANGE [_22]:8 bits []",
    "BLACKBOX::RANGE [_23]:8 bits []",
    "BLACKBOX::RANGE [_24]:8 bits []",
    "BLACKBOX::RANGE [_25]:8 bits []",
    "BLACKBOX::RANGE [_26]:8 bits []",
    "BLACKBOX::RANGE [_27]:8 bits []",
    "BLACKBOX::RANGE [_28]:8 bits []",
    "BLACKBOX::RANGE [_29]:8 bits []",
    "BLACKBOX::RANGE [_30]:8 bits []",
    "BLACKBOX::RANGE [_31]:8 bits []",
    "BLACKBOX::RANGE [_32]:8 bits []",
    "BLACKBOX::RANGE [_33]:8 bits []",
    "BLACKBOX::RANGE [_34]:8 bits []",
    "BLACKBOX::RANGE [_35]:8 bits []",
    "BLACKBOX::RANGE [_36]:8 bits []",
    "BLACKBOX::RANGE [_37]:8 bits []",
    "BLACKBOX::RANGE [_38]:8 bits []",
    "BLACKBOX::RANGE [_39]:8 bits []",
    "BLACKBOX::RANGE [_40]:8 bits []",
    "BLACKBOX::RANGE [_41]:8 bits []",
    "BLACKBOX::RANGE [_42]:8 bits []",
    "BLACKBOX::RANGE [_43]:8 bits []",
    "BLACKBOX::RANGE [_44]:8 bits []",
    "BLACKBOX::RANGE [_45]:8 bits []",
    "BLACKBOX::RANGE [_46]:8 bits []",
    "BLACKBOX::RANGE [_47]:8 bits []",
    "BLACKBOX::RANGE [_48]:8 bits []",
    "BLACKBOX::RANGE [_49]:8 bits []",
    "BLACKBOX::RANGE [_50]:8 bits []",
    "BLACKBOX::RANGE [_51]:8 bits []",
    "BLACKBOX::RANGE [_52]:8 bits []",
    "BLACKBOX::RANGE [_53]:8 bits []",
    "BLACKBOX::RANGE [_54]:8 bits []",
    "BLACKBOX::RANGE [_55]:8 bits []",
    "BLACKBOX::RANGE [_56]:8 bits []",
    "BLACKBOX::RANGE [_57]:8 bits []",
    "BLACKBOX::RANGE [_58]:8 bits []",
    "BLACKBOX::RANGE [_59]:8 bits []",
    "BLACKBOX::RANGE [_60]:8 bits []",
    "BLACKBOX::RANGE [_61]:8 bits []",
    "BLACKBOX::RANGE [_62]:8 bits []",
    "BLACKBOX::RANGE [_63]:8 bits []",
    "BLACKBOX::RANGE [_64]:8 bits []",
    "BLACKBOX::RANGE [_65]:8 bits []",
    "BLACKBOX::RANGE [_66]:8 bits []",
    "BLACKBOX::RANGE [_67]:8 bits []",
    "BLACKBOX::RANGE [_68]:8 bits []",
    "BLACKBOX::RANGE [_69]:8 bits []",
    "BLACKBOX::RANGE [_70]:8 bits []",
    "BLACKBOX::RANGE [_71]:8 bits []",
    "BLACKBOX::RANGE [_72]:8 bits []",
    "BLACKBOX::RANGE [_73]:8 bits []",
    "BLACKBOX::RANGE [_74]:8 bits []",
    "BLACKBOX::RANGE [_75]:8 bits []",
    "BLACKBOX::AES128_ENCRYPT [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11] [_76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91]",
    "BRILLIG CALL func 0: inputs: [Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(44))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(46))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(47))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(48))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(50))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(52))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(53))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(54))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(55))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(56))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(57))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(58))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(59))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(60))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(61))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(63))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(64))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(65))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(66))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(67))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(70))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(71))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(72))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(73))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(74))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(75))], q_c: 0 }])], outputs: [Array([Witness(92), Witness(93), Witness(94), Witness(95), Witness(96), Witness(97), Witness(98), Witness(99), Witness(100), Witness(101), Witness(102), Witness(103), Witness(104), Witness(105), Witness(106), Witness(107)])]",
    "BLACKBOX::RANGE [_92]:8 bits []",
    "BLACKBOX::RANGE [_93]:8 bits []",
    "BLACKBOX::RANGE [_94]:8 bits []",
    "BLACKBOX::RANGE [_95]:8 bits []",
    "BLACKBOX::RANGE [_96]:8 bits []",
    "BLACKBOX::RANGE [_97]:8 bits []",
    "BLACKBOX::RANGE [_98]:8 bits []",
    "BLACKBOX::RANGE [_99]:8 bits []",
    "BLACKBOX::RANGE [_100]:8 bits []",
    "BLACKBOX::RANGE [_101]:8 bits []",
    "BLACKBOX::RANGE [_102]:8 bits []",
    "BLACKBOX::RANGE [_103]:8 bits []",
    "BLACKBOX::RANGE [_104]:8 bits []",
    "BLACKBOX::RANGE [_105]:8 bits []",
    "BLACKBOX::RANGE [_106]:8 bits []",
    "BLACKBOX::RANGE [_107]:8 bits []",
    "EXPR [ (1, _76) (-1, _92) 0 ]",
    "EXPR [ (1, _77) (-1, _93) 0 ]",
    "EXPR [ (1, _78) (-1, _94) 0 ]",
    "EXPR [ (1, _79) (-1, _95) 0 ]",
    "EXPR [ (1, _80) (-1, _96) 0 ]",
    "EXPR [ (1, _81) (-1, _97) 0 ]",
    "EXPR [ (1, _82) (-1, _98) 0 ]",
    "EXPR [ (1, _83) (-1, _99) 0 ]",
    "EXPR [ (1, _84) (-1, _100) 0 ]",
    "EXPR [ (1, _85) (-1, _101) 0 ]",
    "EXPR [ (1, _86) (-1, _102) 0 ]",
    "EXPR [ (1, _87) (-1, _103) 0 ]",
    "EXPR [ (1, _88) (-1, _104) 0 ]",
    "EXPR [ (1, _89) (-1, _105) 0 ]",
    "EXPR [ (1, _90) (-1, _106) 0 ]",
    "EXPR [ (1, _91) (-1, _107) 0 ]",
    "BRILLIG CALL func 1: inputs: [Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(34))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(36))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(37))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(38))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(39))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(40))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(41))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(42))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(43))], q_c: 0 }])], outputs: [Array([Witness(108), Witness(109), Witness(110), Witness(111), Witness(112), Witness(113), Witness(114), Witness(115), Witness(116), Witness(117), Witness(118), Witness(119), Witness(120), Witness(121), Witness(122), Witness(123)])]",
    "BLACKBOX::RANGE [_108]:8 bits []",
    "BLACKBOX::RANGE [_109]:8 bits []",
    "BLACKBOX::RANGE [_110]:8 bits []",
    "BLACKBOX::RANGE [_111]:8 bits []",
    "BLACKBOX::RANGE [_112]:8 bits []",
    "BLACKBOX::RANGE [_113]:8 bits []",
    "BLACKBOX::RANGE [_114]:8 bits []",
    "BLACKBOX::RANGE [_115]:8 bits []",
    "BLACKBOX::RANGE [_116]:8 bits []",
    "BLACKBOX::RANGE [_117]:8 bits []",
    "BLACKBOX::RANGE [_118]:8 bits []",
    "BLACKBOX::RANGE [_119]:8 bits []",
    "BLACKBOX::RANGE [_120]:8 bits []",
    "BLACKBOX::RANGE [_121]:8 bits []",
    "BLACKBOX::RANGE [_122]:8 bits []",
    "BLACKBOX::RANGE [_123]:8 bits []",
    "EXPR [ (-1, _76) (1, _108) 0 ]",
    "EXPR [ (-1, _77) (1, _109) 0 ]",
    "EXPR [ (-1, _78) (1, _110) 0 ]",
    "EXPR [ (-1, _79) (1, _111) 0 ]",
    "EXPR [ (-1, _80) (1, _112) 0 ]",
    "EXPR [ (-1, _81) (1, _113) 0 ]",
    "EXPR [ (-1, _82) (1, _114) 0 ]",
    "EXPR [ (-1, _83) (1, _115) 0 ]",
    "EXPR [ (-1, _84) (1, _116) 0 ]",
    "EXPR [ (-1, _85) (1, _117) 0 ]",
    "EXPR [ (-1, _86) (1, _118) 0 ]",
    "EXPR [ (-1, _87) (1, _119) 0 ]",
    "EXPR [ (-1, _88) (1, _120) 0 ]",
    "EXPR [ (-1, _89) (1, _121) 0 ]",
    "EXPR [ (-1, _90) (1, _122) 0 ]",
    "EXPR [ (-1, _91) (1, _123) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32884 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U8) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U8) }, Cast { destination: Direct(32840), source: Direct(32840), bit_size: Integer(U8) }, Cast { destination: Direct(32841), source: Direct(32841), bit_size: Integer(U8) }, Cast { destination: Direct(32842), source: Direct(32842), bit_size: Integer(U8) }, Cast { destination: Direct(32843), source: Direct(32843), bit_size: Integer(U8) }, Cast { destination: Direct(32844), source: Direct(32844), bit_size: Integer(U8) }, Cast { destination: Direct(32845), source: Direct(32845), bit_size: Integer(U8) }, Cast { destination: Direct(32846), source: Direct(32846), bit_size: Integer(U8) }, Cast { destination: Direct(32847), source: Direct(32847), bit_size: Integer(U8) }, Cast { destination: Direct(32848), source: Direct(32848), bit_size: Integer(U8) }, Cast { destination: Direct(32849), source: Direct(32849), bit_size: Integer(U8) }, Cast { destination: Direct(32850), source: Direct(32850), bit_size: Integer(U8) }, Cast { destination: Direct(32851), source: Direct(32851), bit_size: Integer(U8) }, Cast { destination: Direct(32852), source: Direct(32852), bit_size: Integer(U8) }, Cast { destination: Direct(32853), source: Direct(32853), bit_size: Integer(U8) }, Cast { destination: Direct(32854), source: Direct(32854), bit_size: Integer(U8) }, Cast { destination: Direct(32855), source: Direct(32855), bit_size: Integer(U8) }, Cast { destination: Direct(32856), source: Direct(32856), bit_size: Integer(U8) }, Cast { destination: Direct(32857), source: Direct(32857), bit_size: Integer(U8) }, Cast { destination: Direct(32858), source: Direct(32858), bit_size: Integer(U8) }, Cast { destination: Direct(32859), source: Direct(32859), bit_size: Integer(U8) }, Cast { destination: Direct(32860), source: Direct(32860), bit_size: Integer(U8) }, Cast { destination: Direct(32861), source: Direct(32861), bit_size: Integer(U8) }, Cast { destination: Direct(32862), source: Direct(32862), bit_size: Integer(U8) }, Cast { destination: Direct(32863), source: Direct(32863), bit_size: Integer(U8) }, Cast { destination: Direct(32864), source: Direct(32864), bit_size: Integer(U8) }, Cast { destination: Direct(32865), source: Direct(32865), bit_size: Integer(U8) }, Cast { destination: Direct(32866), source: Direct(32866), bit_size: Integer(U8) }, Cast { destination: Direct(32867), source: Direct(32867), bit_size: Integer(U8) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(4) }, Mov { destination: Direct(32773), source: Relative(3) }, Call { location: 62 }, Mov { destination: Relative(1), source: Relative(2) }, Call { location: 73 }, Call { location: 74 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32868 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 16 }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(3) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 62 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32868 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 16 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 72 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 65 }, Return, Return, Call { location: 168 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 0 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 16 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Mov { destination: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 90 }, Store { destination_pointer: Relative(7), source: Relative(3) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Jump { location: 84 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 32 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(7), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 16 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 16 }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 102 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(11), location: 107 }, Jump { location: 105 }, Load { destination: Relative(1), source_pointer: Relative(3) }, Return, Cast { destination: Relative(13), source: Relative(2), bit_size: Integer(U1) }, Cast { destination: Relative(12), source: Relative(13), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(4) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(13), location: 115 }, Jump { location: 113 }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 102 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U32, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(11), location: 118 }, Call { location: 174 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, Load { destination: Relative(11), source_pointer: Relative(15) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 16 }, Mov { destination: Relative(16), source: Direct(0) }, Mov { destination: Relative(17), source: Relative(11) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(15) }, Call { location: 177 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(14), source: Relative(17) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U8, lhs: Relative(14), rhs: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U8, lhs: Relative(11), rhs: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U8, lhs: Relative(16), rhs: Relative(14) }, JumpIf { condition: Relative(15), location: 133 }, Call { location: 211 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, BinaryIntOp { destination: Relative(15), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(14) }, JumpIf { condition: Relative(15), location: 137 }, Call { location: 214 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(5) }, JumpIf { condition: Relative(15), location: 140 }, Call { location: 174 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 17 }, Mov { destination: Relative(17), source: Direct(0) }, Mov { destination: Relative(18), source: Relative(15) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(16) }, Call { location: 177 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(14), source: Relative(18) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U8, lhs: Relative(11), rhs: Relative(14) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U8, lhs: Relative(11), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 154 }, Call { location: 214 }, Load { destination: Relative(11), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(10) }, JumpIf { condition: Relative(14), location: 158 }, Call { location: 174 }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 217 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(13) }, Store { destination_pointer: Relative(17), source: Relative(15) }, Store { destination_pointer: Relative(3), source: Relative(14) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 102 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 173 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 168 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 58 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U8, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 202 }, Jump { location: 182 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 71 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U8, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 193 }, Jump { location: 186 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 87 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(1), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U8, lhs: Relative(4), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 191 }, Call { location: 239 }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 200 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 55 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(1), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U8, lhs: Relative(4), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 198 }, Call { location: 239 }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 200 }, Mov { destination: Relative(2), source: Relative(3) }, Jump { location: 209 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 48 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U8, lhs: Relative(1), rhs: Relative(3) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U8, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 207 }, Call { location: 239 }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 209 }, Mov { destination: Relative(1), source: Relative(2) }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 221 }, Jump { location: 223 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 238 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 235 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 228 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 238 }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32896 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 44 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U8) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U8) }, Cast { destination: Direct(32840), source: Direct(32840), bit_size: Integer(U8) }, Cast { destination: Direct(32841), source: Direct(32841), bit_size: Integer(U8) }, Cast { destination: Direct(32842), source: Direct(32842), bit_size: Integer(U8) }, Cast { destination: Direct(32843), source: Direct(32843), bit_size: Integer(U8) }, Cast { destination: Direct(32844), source: Direct(32844), bit_size: Integer(U8) }, Cast { destination: Direct(32845), source: Direct(32845), bit_size: Integer(U8) }, Cast { destination: Direct(32846), source: Direct(32846), bit_size: Integer(U8) }, Cast { destination: Direct(32847), source: Direct(32847), bit_size: Integer(U8) }, Cast { destination: Direct(32848), source: Direct(32848), bit_size: Integer(U8) }, Cast { destination: Direct(32849), source: Direct(32849), bit_size: Integer(U8) }, Cast { destination: Direct(32850), source: Direct(32850), bit_size: Integer(U8) }, Cast { destination: Direct(32851), source: Direct(32851), bit_size: Integer(U8) }, Cast { destination: Direct(32852), source: Direct(32852), bit_size: Integer(U8) }, Cast { destination: Direct(32853), source: Direct(32853), bit_size: Integer(U8) }, Cast { destination: Direct(32854), source: Direct(32854), bit_size: Integer(U8) }, Cast { destination: Direct(32855), source: Direct(32855), bit_size: Integer(U8) }, Cast { destination: Direct(32856), source: Direct(32856), bit_size: Integer(U8) }, Cast { destination: Direct(32857), source: Direct(32857), bit_size: Integer(U8) }, Cast { destination: Direct(32858), source: Direct(32858), bit_size: Integer(U8) }, Cast { destination: Direct(32859), source: Direct(32859), bit_size: Integer(U8) }, Cast { destination: Direct(32860), source: Direct(32860), bit_size: Integer(U8) }, Cast { destination: Direct(32861), source: Direct(32861), bit_size: Integer(U8) }, Cast { destination: Direct(32862), source: Direct(32862), bit_size: Integer(U8) }, Cast { destination: Direct(32863), source: Direct(32863), bit_size: Integer(U8) }, Cast { destination: Direct(32864), source: Direct(32864), bit_size: Integer(U8) }, Cast { destination: Direct(32865), source: Direct(32865), bit_size: Integer(U8) }, Cast { destination: Direct(32866), source: Direct(32866), bit_size: Integer(U8) }, Cast { destination: Direct(32867), source: Direct(32867), bit_size: Integer(U8) }, Cast { destination: Direct(32868), source: Direct(32868), bit_size: Integer(U8) }, Cast { destination: Direct(32869), source: Direct(32869), bit_size: Integer(U8) }, Cast { destination: Direct(32870), source: Direct(32870), bit_size: Integer(U8) }, Cast { destination: Direct(32871), source: Direct(32871), bit_size: Integer(U8) }, Cast { destination: Direct(32872), source: Direct(32872), bit_size: Integer(U8) }, Cast { destination: Direct(32873), source: Direct(32873), bit_size: Integer(U8) }, Cast { destination: Direct(32874), source: Direct(32874), bit_size: Integer(U8) }, Cast { destination: Direct(32875), source: Direct(32875), bit_size: Integer(U8) }, Cast { destination: Direct(32876), source: Direct(32876), bit_size: Integer(U8) }, Cast { destination: Direct(32877), source: Direct(32877), bit_size: Integer(U8) }, Cast { destination: Direct(32878), source: Direct(32878), bit_size: Integer(U8) }, Cast { destination: Direct(32879), source: Direct(32879), bit_size: Integer(U8) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(6) }, Mov { destination: Direct(32773), source: Relative(5) }, Call { location: 98 }, Mov { destination: Relative(1), source: Relative(4) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32848 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 16 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(6) }, Mov { destination: Direct(32773), source: Relative(5) }, Call { location: 98 }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32864 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 16 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(3) }, Mov { destination: Direct(32772), source: Relative(6) }, Mov { destination: Direct(32773), source: Relative(5) }, Call { location: 98 }, Mov { destination: Relative(3), source: Relative(4) }, Call { location: 109 }, Call { location: 110 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32880 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 16 }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(3) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 98 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32880 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 16 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 108 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 101 }, Return, Return, Call { location: 124 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 16 }, BlackBox(AES128Encrypt { inputs: HeapVector { pointer: Relative(5), size: Relative(6) }, iv: HeapArray { pointer: Relative(7), size: 16 }, key: HeapArray { pointer: Relative(8), size: 16 }, outputs: HeapVector { pointer: Relative(9), size: Relative(10) } }), Mov { destination: Relative(1), source: Relative(4) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 129 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pZfNbuJAEITfxWcOMz3/eZUIRYQ4kSXLIAdWWkW8+3bPdDnZA6vN5EJ9BlcZetrj5mN4GZ+vb0/T8np6Hx4eP4bndZrn6e1pPh0Pl+m08Lsfg5GXFIYHuxtSbJKa5CalSjZNbBNq4pr4Ji0lt5TcUnJLyS2ltJTSUkpLsYaVRDnAibLVi2ZVNgdWa1T5vCgaVZMqn59ES1Myqny5LEqqTtWrBtWomlQ5r4iWps6oWlVSlTIYAQ8IgAhIgAwoCl6KInXwFkAASZbSeA8IgAhIgAwoCkGSpaLBAgjgAB4QABGQALktTChNo1G1qqTqVL2qLmhtJVm52kwCtYFkzWoLVZCrymrVxqmQAUWhtk8FcckSFQ8IgAhIDUjayxYBB/CAABBXubFN7gdrpV7SepYADuABARABCZABRUFasUFNvvGVcBs+XdZxlKt+uS/5bj0f1nG5DA/LdZ53w6/DfK0nvZ8PS9XLYeVPuX/G5YWVA1+neRS67T7d5r6VMqmZstvs4b/9zmX1O1c6/N5E9Xvb43fB4foh/8wfe36/t277/j3X9y7A72OPn2jzp5/5A/X4U4I/d/lj3vxd9Q9b/bL/2e/v8kfZoas/dvVfQPvHntXnh6baeY/q8W/V4126x0/ofn78dfi35sk9vZsyNr4cevzF4duXYHv8EYtX8t21l/66u/mabfcjY78U8BsJNm0JFO4k/LOD4raEtmsH5oei3xKSuVuH2FWHPR8cjtP697wqMyqZNqSSTqmkYyrpnEo6qJJOqqSjKumsSjqskk6rpOMq6bxKOrCSTqykIyvpzFpV82QAkWWS+aNqVE2qWbU0tcYALIAADuABARABCZABSJbxmOp8bAEEcAAPCIAISIAMKAqEZEIyIZmQTEgmJBOSZZ6WJqgDdYOiICN1AwsggAN4QABEAJIdkh2SPZI9kn1NvkkzrtPheR6loaTjrssR/cWHl99nfIJ/TOf1dBxfrusovfj5t4lfHonvQnJ5vxv46z5G2iXay6LwgeUHnE1ODq2c6cqOvN1jyJTzC59h8mYgv+PS7G/S/H8A",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
