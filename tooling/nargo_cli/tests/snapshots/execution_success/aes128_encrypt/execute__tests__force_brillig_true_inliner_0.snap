---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZrRauMwEEX/xc950Gik0Si/siwlbd0SCElJ04Wl9N/X7sZuiBSXsXtfCio6x7ZGgxSN3pvH9v7t+W67fzq8Nutf783u8LA5bQ/7rvX+sWruj9vdbvt8d/nvxvV/KNIn8Pqy2fft19PmeGrWSd2qafePzVpj6gRP213brKP7+L3qEG9H2I4EOxLtiNiRZEfUjmQzIs6O2KMv9uiLPfpij77Yoy/26Is9+mKPvtijn6rRz8xnJEe6RFZFV6/+3NUrF3aC2j3UzlB7gNoj1C5Qe4LaFWrPSLtCc1WhuarQXFVorio0VxWaqwrNVYXmqi7NVXZ67sqkhT0j7dlB7QS1e6idofYAtUeg3bvFUeXRzrmwLx2Z4OTcNVBpt43MJyJ2JNkRtSPZjJCzI2RHvB2pZ5sMocxaTEMKdiTaEbEjyY6oHclmxDs7QnbE2xF79H01+uRkmGREZfb7OAeSOVCaA+kcKM+A2M2BaA60eBmNQ1eOxSzgALXHn7MLF3ZB2gNB7Uu3XoF4XKSLcQ8MtQeofemcCRwHe5DCLlB7gtqX/kwK3o/2VNgz0h4d1E5Qu4faGWoPUHv8OXv0hV2g9gS1K9SekXZxUDtB7R5qX5yrKQ12Le0Bao9Qu0DtCWpXqD0j7YvLekF0tBe71MVlvWm7h9oX52oc92IaCnuA2iPULlB7gtoVas9Iu/7gulqxE9TuoXaG2hfn6tSB+OKy3rRdoPYEtSvUnpH2xWW9aTsB7eyq812IzogUB3Vcr+pMI2JG6sUTymlgKOvFh/9nuM7kYQC883LNxBnPqX6Od+7rOcTXTJrB6Awm1xlKX2MQr5h6qeIbhmYw/vvvuYxPOZepq1gOcelKP9f+GfG/UdqYZqKd4eq3x4GQ6xM8rp/lTwE3SifDakfkCySZkVDPy3EvQxILhOyItyNsR4IdqY+YH6syzAWidiSbkfqh6TRCdqR+y3XIeU0FkKyAWoFsBG7cbb4BfHStP5vjdnO/a89X4J/e9g8XN+JPf1/aq8vxL8fDQ/v4dmz7a/JfN+T7B3O3sHD2/Yt0LerO8CnErvW53vkcVj7nvtnHhjN3fWP3Dt17/AM=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
