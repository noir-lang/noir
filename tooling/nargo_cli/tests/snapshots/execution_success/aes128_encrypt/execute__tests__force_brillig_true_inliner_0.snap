---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZvRbuIwEEX/Jc88eDz2eNxfWa0q2tIKCUFF6Uqrqv++SZdQFLupJu59QTLyOQSPBwdP/NY9bO5en263+8fDS3fz663bHe7Xp+1h37fe3lfd3XG7222fbq/f7tzwQtF/AC/P6/3Qfjmtj6fuJqlbdZv9Q3ejMfWCx+1u091E9/571SNsR4IdiXZE7EiyI2pHshkRZ0fIjtijL/boiz36Yo++2KMv9uiLPfpij36yRz9Vo5+Zz0iOdI2siq5e/bmrVy7sHmpnqD1A7RFqF6g9Qe0KtWekXR3UDs1VheaqQnNVobmq0FxVaK4qNFcVmqvamqvs9NyVSaf27KB2gto91M5Qe4DaI9QuQLt3zVHli51zYW8dmeDk3DVQabeNzAeS7IjakWxGyNkRsiPejrAdqWebjKHMWkxDinZE7EiyI2pHshnxzo6QHfF2hO2IPfq+Gn1yMk4yojL7vSyB0hJIl0B5AcRuCURLIL8Eal5G49iVYzELOELt8nN24cKekPbgofbWW69AfFmki3EPAWqPUHvrnAkcR3uQwp6gdoXaW/8mBe8v9ukGoY8Oaieo3UPtDLUHqD1C7fJz9ugLe4LaFWrPSLs4qJ2gdg+1M9TenKspjXYt7RFqF6g9Qe0KtWekPTmovTlXRS/24i61uaw3b2eovTlX4+VeTENhj1C7QO0JaleoPSPtzWW9efsPrqsVu4faGWoPUHuE2gVqT1B7c67OlQqay3qz9uay3rydoHYPtTPUHqB2ZPGK62UlITojUmxhcr2sNIvUy0rzSDVklNPIUNarL/6fqe/F5zwOQF9nlCmjCz6nOgLeuc/PIZ4w9drKNwwtYHydofQ5BnHK8AImLGDi99/nOj7lXCbvwhiXvo429S+I/xelmHlG7Uy9rBBHQqZ7m1yvFMwBX5R6xtWOaPpfiYOzI/W8vNzlkcQCCXYk2hGxI8mM1PeEyV/qVcwFQnbE2xG2I8GO1J/MHXNep/uh/MVT2TMAWQFvBdgCvPetP+vjdn2325wPBzy+7u+vzgqc/j5vJscGno+H+83D63EzHCD4PDswjAWnsOIchwvpW9RXNygMrY8l0mddseOhOQwD9z8onLW/hv46/gE=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
