---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfdTioxFIXfhWsu2u7++irGGNTxhIQgQTjJieHdz17TtUEvMFpu/D6YWZtOZ0/tfCxepqfjn8f19vXtfXF3/7F42q83m/Wfx83b8+qwftvqtx8Lhz8+K/xS6clAChnJRGaykHVxF8DWWRzpyUAKGclEaj0BC1nJ1lkd6clAChnJRLJe1XoJrGTrbI70ZCCFjGQiM8l6jfVarxecIz0ZSCF7veD1vAzq9wXU7yOYyEwWspKtMzjSk/o7FRQykonMZCEr2TrFkZ5kPdE6DUwk7reDFEoMJmgRD4kmyQSpACkm1UQH4PUOheRMvEkwEZNokkxQGROQikk1aZS5p2dBZcz+3NWziEk0SSbZpJigMm4amnsWdHcXVMZ9RH93EZNokkyySTFBZUw32nwW9HkXbxJMxCSapN5EaPaZhaxk60Szz/RkmCkOI2uQbFJM8Dw7SKOgc7t4k2AiJtEkmVgdNGzwEDsZrRoCJJlkEx1GEEg1aRQ0bEgQK4iW7SKUiHMyxJvgt3DJaM0uqFwhjYJG7OJNgglSmBa0XZdiUk0aBS0luEC0VJdsUkywvLnTabmwtfjxsJ8mLMWfFmddsner/bQ9LO62x81mufi72hznk953q+3Mw2qvR7XktH1RasHX9WaCnZaXtLsera4yXIOc4+nnecxmz0sdyJdqg6+pDOSbCPMt+Wv5eD2vzxfz+oAN5EVs/kTaQD66zHz0beT6s+VbrSPjTzZ/2sq35fPI/EUv5+sf+f0oyfIxj+RDOOfLbfkURvLFnp9Yh/K5nvND85/O81fjbdd/Pf9N/2ZsFOZ8TiPrh+7IrIBuyj6tAD8v0OwJ0l1b/n0B3ftdCngZKeDLZQTp1hFcu4TwzV30ukG1WdS95++HkGwAOY/cRGdN5H0YyZ+bWF9QRvLBFiEvI/8Ez89w/bqEPOin1fN6/+WN64Q6+/XqaTPx4+tx+/zp6OHfzo7YG9tu//Y8vRz3EypdXtv0z72UtozOPeiuQj95XQ59TPoJ+7X70NJS5oPYtd1H5/VceThhaP8B",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
