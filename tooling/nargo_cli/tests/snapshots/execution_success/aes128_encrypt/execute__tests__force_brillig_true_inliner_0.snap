---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZrRbuIwEEX/Jc882DMee9xfWa0q2qYVEoKK0pVWVf99DUsoir1ZTdL7gjD4HIInY4zHH91T//D+cr/ZPe/fursfH912/7g+bva70vr4XHUPh812u3m5v325c6cHH90ZeHtd707tt+P6cOzu1Omq63dP5RlxETxvtn13J+7z56og3o6QHWE7EuyI2JFoR5Id0SZCaUBYKySbkeTsiLcjZEfYjgQ7InakGf2kbkAkVUiyI2pHshlRZ0e8HSE7wnYk2BGxI/boazP6mfmCZPG3yKrqSkqXrqTVNKEKtWekPTuo3UPtBLUz1B6gdoHaI9QOzdUMzdWMzFVyDmr3UDtB7Qy1I3OV/NKoMg9LWOZc2ZeOTHDx0jX42m4bmTMidiTakWRH1I5kM0LOjng70s62OIQyq1YI25FgR8SORDuS7IjakWxG2NkRb0fs0eelUxzL0JWltgvUHr/PHqvpmRPSHghqXzz5e75O/tW4hwC1C9S+9J4JLIM9xMqeoHaF2pcuYQPR1T7+I07ioHYPtRPUzlB7gNoFao/fZxeq7AlqV6g9I+3RQe0eaieonaH2xbmahr3zoLVdoPYItSeoXaH2jLQnB7UvztWoV3u1Sk0EtTPUvjhX5boW01DZBWqPUHuC2hVqz0i7Oqj9G39XG3aC2hlqD1C7QO0Rak9Q++JcndqCXlwenbQvLo9O2z3UTlA7tLCwuDw6bRegnV3zfo/eX5BYbWGyy2akXTaaRpq3Wym4Dkypjt588b8MzWB4BhNmMDKDiTOYNINRO0Mz4kP/GLc83KCl8hrHzIwxaJdUSkn663M8jxmdwWQ7066qlI7pawxkzPgZDM1g+P/f5zY+9VzjS/15iEupa479M+LPMoOJdqZdfpCBiOO9Z25XFKaAdma6YTXiPVWImpH2trK/rsJ9lAohO8J2JNgRsSPtEaPh19IzV0g2I+3dxmnE2xGyI+2To9fjqakC1ApkI9De7ZkCvAX4LK1f68Nm/bDtL4fXn993jzdn2Y+/X/vRsfbXw/6xf3o/9KcD7l9n209Xykqr4Ph0IaXlS/XJBymt8xKGsq74/OZ5eRLKZFdWV+UaynX8AQ==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
