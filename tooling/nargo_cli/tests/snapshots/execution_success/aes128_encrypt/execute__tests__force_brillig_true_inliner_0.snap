---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2dW3McxRXHe7Q7snZXsgTkRhISkxu5QDJ7kXZFEmJiG2zLgMFcDJjLaiVhjLkYYzAY8JqLDQaD7UpV3vKYx3yKPOUxVXnLF0ieUqniHR15zu5/z56zlvCMqEPRVaqZ7f5N97/PnO7pmyEKV8LC6l+U3hfFleInw2Bgdnt6Ta4tVDPMK8lLY+RA45gDjQUHGosONMYONI470LjFgcYJBxpLDjSWHWisZKiRtM2EwZC13kkHNp1yoHGrA43TDjTOONB4nQON1zvQeIMDjd9woPGbDjR+y4HGbzvQ+B0HGm90oPG7DjR+L/gaS37fgU1vcqDxBw40/tCBxm0ONN7sQOOPHGj8sQONP3Gg8acONP7MgcZbHGj8uQONv3Cg8ZcONP4qZDuW3BYGQ9Z6b3Vg09scaPy1A42/caAxcaCx6kBjzYHGugONDQcaZx1onHOgselAY8uBxnkHGm93oPG3DjT+zoHG3zvQeIcDjX9woHG7A413OtD4RwcadzjQuNOBxl0ONN7lQOPdDjTudqBxjwONex1oXMhB41rYB/ckemz1jw6s04FwOnBNB5rpwDAdyKUDr3SglA5s0iFIOmRIh/jokNzM6h8d8qJDVHRIiQ4B0SEbOsRCh0ToEAYdcqBDBLRJTxvftLFMG7e0Mbpt9e/m1T/aOKONKdr4oY0V2rigjQFaeKeFbVo4poVZWuykxURarKPFMKoVLebQYgktRtBknybTNFmlySBNtmgyQ5MFGozTYJcGkzRY48EQfczpY0kfI+rsqTOlzoo6A2ps5MzkLAvBDvzi/5TelNLfY5Ce4T8IqJZEuVnm30rm6yWlfhnqX8uf8oxzyb/R4fzH89GfbEnzubvbzx/rwuUWBCefiYDZDcxug9kDzB6D2QvMXoNZAGbBYPYBs89g7gHmHoO5F5h7DeY+YO4zmP3A7DeY+4G532AeAOYBgzkAzAGDeRCYBw3mIWAeMpiHgXnYYB4B5hGDOQjMQYN5FJhHDeYxYB4zmMeBedxgDgFzyGCeAOYJg3kSmCcN5ilgnjKYp4F52mDawLQNZhGYRYPpANMxmCVglgxmGZhlg1kBZsVgngHmGYM5DMxhg3kWmGcN5ggwRwzmOWCeM5ijwBw1mOeBed5gXgDmBYN5EZgXDeYlYF4ymGPAHDOYl4F52WCOA3PcYF4B5hWDOQHMCYN5FZhXDeY1YF4zmJPAnDSY14F53WDeAOYNgzkFzCmDeROYNw3mLWDeMpi3gXnbYE4Dc9pgusB0DeYMMGcM5h1g3jGYd4F512DeA+Y9g3kfmPcN5iwwZw3mHDDnDOYDYD4wmA+B+dBgzgNz3mA+AuYjg/kYmI8N5gIwFwzmE2A+MZhPgfnUYC4Cc9FgLgFzyWAuA3NZMCW4D/Dc9vR3cg2hlTSaOY/LO1NpnnG/ir26cNlb8il7KRLlhdC3OaZx+WWhNWM91UiUx3qkfXiOOsVMt68nEmnF7nA9OC2GNH6/tH5wDjjpW6yD300e8+VWMlvP1++qyZfnd9XqV9HvZFqxO1yPjfod+pb0u0IOtmglc1/7XfDldwWRVuwO12Ojfoc2kX5XzMEWraSZs9/VvkS/q30l/a4o0ord4Xps1O/Qt2LgLsP9n9P7fMd98/U8v+8UblD0Y1kUtnRDL7C/FCCO7cp2nkBepJUgrdgdLKec/i5COZgX64gFfyn9PZ1ex+EZfn5GKX9clD+gW4mTdikpfEnhydfOp/e0F8R7BDu6/fyyfKec/07IP2SXf28PZVc++nv535VL/tWE3gG14VtSw0yH4T5/c/rkK//QIUr1UGDfl2WytjHB4z2FWMT9Jb3S79uiwfqNw3MFJY79dyYM9xHMabYbE7abyNl2JcV2EyNsh3uAJcV2HPfXkJ3txtZpu14/omjNw3ZlxXalEbYrQxrfo+047m8hO9sVFD1TynOyzZZzsd36x+9cfjnkOabsj6PKil0jxa5sn0o+ejpc7qSiZ0zRw/yUwhdG8FsVfnxEfadzqW81uQ7yRZ9D+7ItZiBuSonbCvfTQn8k6r89E/1JIuf5IQy3pTzm+RtpSxxXDiHP8XCvLRWEHst3c+5rklFtW5ZJgd9lRUmT7TKGvJAvQx2Rl206FnH/SK8zSp7SdythuD4Yh2Pnv4u6oa9ExpXzlXGjxjTynebjY7Uk3zaV1DSfzK6/0NfOeC5D7+ufolwex6K/xYrdY8H/N/Tz/Fd6P628m0ikjXqnOdm8107xP45cCHr7C6HftnCtge/RFhz37/Sqjaekz1vffW0sKvv5PNbVVkOTfQbXejhwmjZm5zQck8p5eBD1x4B1ovyTqJ+v5KQe9CPWFou0/6TXvNdprhc6saxK0MfusXhGmxvJ+UUk4rU5FQVcu5Bp2hreru6g/Tj//6dXet//S++nFP0TwMn+pQTlav0L+4TsXz5Lr5T3ftGmtO8Ttk/ZhrSxLn7/WM+00IDPlsTvjH1oie0qfT+Evs1x/IkaZdDaGesmex7YQDtDO2H5qGEsDL8b7RvXWyNW8tB41lxU8sCy5FinGPXremIdvqO1BalhPOj+a2mYAA0nIz1Pa4w3ZuRZgTxlm9DmZ6PahDY/02w7HYb9np8tKc9l2CaWpxStHDgN542oUQatTfTWxMMXbxNYvuxrNB+X424ub9zg0VeQv1HxL63/isQ9+qv8LlHgdd1Y8Dcpvqft+XDZvW8UpGU5NyUdp0CHbNtxd7DeWvvQ5jTrbR9cv5kw3DdOijR8B1zmer+jedqx2Up4yNV7h+wXMhQhHflb0wyw7+brtfyPGFaa7epKvb3Snm0vLTU6bTnGooBjrKzLbzfrrU6t0Wkuztbb9bmrlo97FnKvUuqS+axnLox57exeuXJ7Rx/iPPL+tyKyr8KxKJYZQ31k34TzDTn+ux36GzmnioXtZNyodQTm5DkGCjhPvsMoE/tNfFb2m8zviPp53in6aemrFCpBf68495O2GzWv5HhtDiD3zVAbvsOJdeQ1au24pPATI8pGXSWjbBwTolb57RtXNGl9rmxnMl/L79AHdnWvXEedkUHfyrrP6szOLXYas+1kuUo/axvps7Q1mChk1V/U21EYtC/O1bH+cj7I/FFoRweF5mIumhtNre1rmmWdmO+A5kObonl2SHN0Fc2yneA4VDJYR+bb0E9fEt8/y/+PbIot6ptui8PXYAvtPGcBuOOb004Tq75WO42UOkUGgzZj/tgIm6EtioottLXAPMeEc425aqvVbnXmOivzjc7iZo9JV7v2ZqfdrFbnG9XlRnX2auVrZ65wrkaBz23huS7kcS0C+dPQt52B97HGKuURd3EEFxnXtTyUuGJ3ME4774Xn4JjnssvdYY2cVoG0WJQzmf5Ge2FerCMW/IU0A34neHaNn59Ryp8Q5Q/oVuLk+ntF4SsKT+/nrBiXYN2z3sddK1Pkj3FSG/tOHu2q1mrNzdcWV7/4S52VpUb9au3qc2EsrDh5cwAA",
  "debug_symbols": "pZfdTioxFIXfhWsu2u7++irGGNTxhIQgQTjJieHdz17TtUEvMFpu/D5g1p5OZ0/tfCxepqfjn8f19vXtfXF3/7F42q83m/Wfx83b8+qwftvqtx8Lhz8+K/xS6clAChnJRGaykHVxF8DWWRzpyUAKGclEaj0BC1nJ1lkd6clAChnJRLJe1XoJrGTrbI70ZCCFjGQiM8l6jfVarxecIz0ZSCF7veD1uAzq9wXU7yOYyEwWspKtMzjSk3qeCgoZyURmspCVbJ3iSE+ynmidBiYS99tBCiWiQzxETKIJmiRAskkx0fN7gTRKcibeJJiISTRBZVx3yibFpJo0ytzTmPS5qWcJJmISTZJJNkFl3Cv0dpdGQXd73D60d5dgIibRJJlkE1TGLKPLuzQK+ryLNwkmYhJNUm8iNPvMQlaydaLZZ3oyzBSHkTVINikmeJ4dpFHQuV28STARk2iSTKwOGjZ4iB2MVg0BkkyyiQ4jCKSaNAoaNiSIFUTLdhFKxDEZ4k1wLlwyWrMLKldIo6ARu3iTYIIUpgVt16WYVJNGQUsJLhAt1SWbFBMsb+50Wi5sLX487KcJS/GnxVmX7N1qP20Pi7vtcbNZLv6uNsf5oPfdajvzsNrrr1py2r4oteDrejPBTstL2l2PVlcZrkHO8fTzPGaz56UO5Eu1wddUBvJNhPmW/LV8vJ7X54t5fcAG8iI2fyJtIB9dZj76NnL92fKt1pHxJ5s/beXb8nlk/qKX8/WPnD9KsnzMI/kQzvlyWz6FkXyx5yfWoXyu5/zQ/Kfz/NV42/Vfz3/Tvxk7hjmf08j6oTsyK6Cbsk8rwM8LNHuCdNeWf19A936XAl5GCvhyGUG6dQTXLiF8cxe9blBtFnXv+fshJBtAziM30VkTeR9G8ucm1heUkXywRcjLyD/B8zNcvy4hD/pp9bzef3njOqHOfr162kz8+HrcPn/69fBvZ7/YG9tu//Y8vRz3EypdXtv0z72UtozOPeiuQj95XQ59TPoJ+7X70NJS5h+xa7uPzuux8nDC0P4D",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
