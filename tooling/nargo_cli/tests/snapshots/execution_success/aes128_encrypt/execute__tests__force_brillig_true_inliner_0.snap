---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfdTioxFIXfhWsu2u7++irGGNTRkBAkCCc5Mbz72Wu6NugFJ1pu/D6YWZtOZ0/tfC5epqfj2+N6+/r+sbi7/1w87debzfrtcfP+vDqs37f67efC4Y/PCr9UejKQQkYykZksZF3cBbB1Fkd6MpBCRjKRWk/AQlaydVZHejKQQkYykaxXtV4CK9k6myM9GUghI5nITLJeY73W6wXnSE8GUsheL3g9L4P6fQH1+wgmMpOFrGTrDI70pP5OBYWMZCIzWchKtk5xpCdZT7ROAxOJ++0ghRKDiZigRzwkmWQTpAKkmjRKcibeJJiICSoLJJlkk2JSTVAZczP39CzeJJiISTRJJqiMWzW39izVBJVx99DdXbxJMBGTaJJMUBk3HU3epZo0Cvq8CyrjTqDTu4hJNEm9idDsMwtZydaJZp/pyTBTHEbWINmkmOB5dpBGQed28SbBREyiSTKxOmjY4CF2Mlo1BEgyySY6jCCQatIoaNiQIFYQLdtFKBHnZIg3wW/hktGaXVC5QhoFjdjFmwQTpDAtaLsuxaSaNApaSnCBaKku2aSYYHlzp9NyYWvx42E/TViKvyzOumTvVvtpe1jcbY+bzXLxZ7U5zid97FbbmYfVXo9qyWn7otSCr+vNBDstL2l3PVpdZbgGOcfTz/OYzZ6XOpAv1QZfUxnINxHmW/LX8vF6Xp8v5vUBG8iL2PyJtIF8dJn56NvI9WfLt1pHxp9s/rSVb8vnkfmLkuz6Yx7Jh3DOl9vyKYzki/V/rEP5XM/5oflL5/mr8bbrH8t7OffvyPOfsT+Y8zmN5HVHZgV0U/ZlBfh5gWZPkO7a8u8L6N7vUsDLSAFfLiNIt47g2iWE/9xFrxtUm0Xde/5+CMkGkPPITXTWhN6Hkfz5IdAXlJF8sCb2MvJP8LwG1O9L0IN+Wj2v99/euE6os1+vnjYTP74et89fjh7+7uyIvbHt9u/P08txP6HS5bVN/9xLacvo3IPuKvST1+XUx6SfsF+7Dy0tZT6IXdt9dF7PlYcThvYP",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
