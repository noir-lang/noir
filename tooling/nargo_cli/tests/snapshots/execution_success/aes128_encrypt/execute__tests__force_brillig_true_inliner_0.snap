---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZrRbiIxDEX/ZZ55iO3Ecforq1VFW1ohIagoXWlV9d936DIUTVIqz/S+IAXlnBniWAlx3rqH1d3r0+16+7h76W5+vXWb3f3ysN5t+9bb+6K72683m/XT7eXXXTh+UOIP4OV5uT22Xw7L/aG7yRYW3Wr70N1Yyr3gcb1ZdTcpvP9e9Ij4kehHkh9RP5L9iPmR4kY0+BHyI/7oqz/66o+++qOv/uirP/rqj776o5/90c/N6BeRE1ISXSKLqisbn7qySWVnqF2g9gi1J6hdofYMtRvUXpB2C1A7NFcNmqsGzVWD5qpBc9WguWrQXDVortrcXJVgp65CNraXALUT1M5Qu0DtEWpPULsC7RxmR1XOdimVfe7IxKCnrpFqu29kPpDsR8yPFDdCwY+QH2E/In6knW06hLJYNQ0p+RH1I9mPmB8pboSDHyE/wn5E/Ig/+tyMPgUdJhlRnf2sU6A8BbIpUJkASZgC0RSIp0Czl9E0dJVUzQJJULv+nF2lsmekPTLUPnfrFUnOi3Q17jFC7QlqnztnoqTBHrWyZ6jdoPa5f5Mi89k+PiDkFKB2gtoZaheoPULtCWrXn7MnruwZajeovSDtGqD22bma82C32s5Qu0DtEWpPULtC7Rlqn52ramd7tRfTgrTnALXPztV03nFYrOwMtQvUHqH2BLUr1J6h9h9cVxv2grRbgNoJameoXaD2CLVDD8Rnl/Wu2zPUblB7Qdpnl/Wu2wlqZ6Bd2gUgJTohWh3USbuqcx3JbqRdb6GSB4aKXfzw/4y0mTIMQF9N0zGTJjynOQIcwudzSMZMnsDYBKa0GcqfY5BGTLu68Q1DExj+/vdcxqeey8QhDnHpq0Vj/4T4t6sh3zDJz7TP89NA6PgET0S8wBf1lmG1I+IKyW4ktvPyvMsjTRVCfoT9iPiR6EfaI8bnqoxIhZgfKW6kfSR7HSE/0r4YO+S85QrIXsC8QHECX1yH/gJ471t/lvv18m6zOl2Bf3zd3l/ciD/8fV6NLsc/73f3q4fX/ep4Tf7zhvzxwdIvLFL4+CJ9i/ozfIqpb32sd1zSQkI4No+xkSJ939S/Q/8e/wA=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
