---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
unconstrained fn decode_ascii(ascii: u8) -> u8 {
    if ascii < 58_u8 {
        ascii - 48_u8
    } else if ascii < 71_u8 {
        ascii - 55_u8
    } else {
        ascii - 87_u8
    }
}

unconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {
    let mut result: [u8; M] = [0_u8; M];
    let as_bytes: [u8; N] = s.as_bytes();
    for i in 0_u32..N {
        if (i % 2_u32) != 0_u32 { continue; };
        {
            let i_3793: u32 = i / 2_u32;
            result[i_3793] =
                (decode_ascii(as_bytes[i]) * 16_u8) + decode_ascii(as_bytes[i + 1_u32]);
        }
    }
    result
}

unconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {
    let result: [u8; (12 + 16) - (12 % 16)] = std::aes128::aes128_encrypt(plaintext, iv, key);
    result
}

fn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {
    let result: [u8; 16] =
        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());
    // Safety: comment added by `nargo expand`
    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };
    assert(result == output_bytes);
    // Safety: comment added by `nargo expand`
    let unconstrained_result: [u8; 16] =
        unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };
    assert(unconstrained_result == output_bytes);
}
