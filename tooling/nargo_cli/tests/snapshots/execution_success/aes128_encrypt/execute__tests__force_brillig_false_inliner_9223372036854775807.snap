---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "rZdNbuMwDIXv4rUXEvXfqxRBkbZuESBIAjcZYFDk7kNKfG5n4SCjzibvc2w+yRQt05/D6/R8eX/aHd6OH8PD4+fwPO/2+9370/74sj3vjgf+93Mw8pPC8GDHIcUmqUluUqpk08Q2oSauiW/SXHJzyc0lN5fcXEpzKc2lNBdr+FJitXzWifL/XtSpsn8QDe08mXZMVpWvj6JO1avy9VmU51BYnQxrBAjgAB4g05ZJuQwoCt4A5EZlwj4CEiArBBlLJhsI4AAeEADiI3caEiADikI0AAsggDhLIqIHBIA4JwHxkWQkiZJsJAfwgADg0UmyIYtfQZa/gQWwM0k2ZKEbZEBRkAUmyUZxAA8IgAgQH8lGyYDSgIwB2FoBZEjVqXrVoBpVkypbuitbSrVbK/fgtdAIlUYotQYBEAEJkAFFQQqyQXW+8kh4yJ7O8zTJqN+eOn4WT9t5OpyHh8Nlvx+HX9v9pV70cdoeqp63M5/lPE+HV1Y2fNvtJ6Hr+BVt1kMpkwZTdkt4uDveuazxzpWOeG+ixnvbE++Cw/gh/yw+9ty/dwHz97EnnmiJT2vxaT0+IH0xdkRbg9G5xnviA+6et5KeeEL2eYvtiE9Jw3P6We4D9cQvw/vcFR/zEt9Ve0v2ffZr8Tb+qHhuhd9VPTcN7imfmwb31M8tg/9WQOsLcCveumXz69m8orQZbQG7Nr+U8ebIoef+i8P8S7A98REFWPLq/OnG889vfDjwO/9bBfyDg02LA4UVB3PrIYhLDdquVxh3FX5xSGbNwdmuPGz4YPuym/9u56WFp9B6eIqtia9amtY+LrY+viqpOlWvGlSjqvpl9cvqV9SvqF9Rv6J+td/jhajtnmhUTapZtTS1tdWrYAEEcAAPCIAISIAMgHP9upDOVdq/BgRwAA8IgAhIgAwoCgRngjPBmeBMcCY4E5wptSKo3ykNioIzAAsggAN4QABEAJwdnB2cPZw9nH11vkoxzrvt836SgpKKuxxeUF98eP59whl8UJ7m48v0epknqcWvr0r+eSQqIwWzGQee7mOkMdFGFkVO8SZHNsqhrVeakYg26NLl+pJHXkgEcA5HTs3mKsX/Bw==",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
