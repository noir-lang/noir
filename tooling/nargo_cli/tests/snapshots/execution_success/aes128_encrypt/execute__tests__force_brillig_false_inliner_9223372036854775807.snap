---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdndTuMwEAXgd8l1LuyZsT3uq6xWqEBBlaoWlbLSCvHum1QkK4hJc6b1ZWi/Ic2ZJP55bx4392/Pd9v90+G1Wf16b3aHh/Vpe9h3R+9Niue/vb6s9/3h62l9PDWrpK5tNvvHZqUhfbTN03a3aVbBffxum5RKIjN/ihz8d6GwyKhQBwsPC4IFw0JgEWARYQFnrnDmCmee4cwznHmGM89w5rmceYyDUP0uAiwiLBIsFBYZFd45nHicEE4YJ4KTgJOIk4QTxQmevi+m3/3E4e7y3ucJ8hZEFsQWJBYULChaULIgtaBsQGTpCLJ0BFk6giwdQZaOIEtHkKUjqNwRnmVEyU2QWlA2IHYW5C2ILIgtSCwoWFC0IEtHsKUj2NIRYukIsXSEwB3RHdwft7vd9vnuy8TMnWdnxQRJ6bMaKX87g/J8blYkWCgsMirK87lZ4WFBsGBYCCzgzBXOXOHMFc5c4cwznHmGM89w5uX5HDv9FOwnsxqBRYBFhEWChcIio+KH+dwsKY99mUfCC8ej4oaphiwdWHIYRkYcdNmwcp7QBRJ52ZBy/rco/l+KUYrn8b/osoHXPPE4KV4x4TAQicuGXPNEcFJsSyEayZel1Hby1TAkGOOysRJQu1vRGEcgtGyog1QPw3XxMSwbE92sOletLlWrp2ur0zhP48kdLFq1eq5ZPbiq1a+9U1MatkfSpHasWDtVrK31asdLz5cweSRFwgnjRHAScFJuifGCiU5JwoniJMMkOZx4nBBOyulHHcnkMZAEJwEn5fTH94KomIcF5Xk1UHt2WFCeHyPV515+5bn0zapL1eqhanW9tvrcy09zzerlOfzNqvuq1a+9U2degeXZ941qa8XauVptcpfe8V9rnwnjRHAScBJxknCiOMnoagGVN1nniccJ4YRxIjgJOIkY6Q58/8Uftqaj98Mrf7piVL5u84RxIjgJOIk4SThRnGSYlNcL5wmePuHpE54+4ekTnj7h6ROePuHpE5j+R3f0Z33cru93m37zrv/wbf8w7OV1h6e/L8Mnw27fy/HwsHl8O276fb//W359F5G4lqLvTqWPLlKbqD+t80c+t0Ry7tH+kH1LzOMDpf9+1tY7HUC3Xtp2+7MD6FYS224/tDvl7rT/AQ==",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
