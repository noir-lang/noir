---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "rZfdbuIwEIXfJde5sMf/fZUKVbRNKyQEKIWVVhXvvjP2nLR7EcS6e8P5IDnHzniSmM/hdXq+vD/tDm/Hj+Hh8XN4nnf7/e79aX982Z53xwP/+jkY+UhheLDjkGKT1CQ3KVWyaWKbUBPXxDdpKbml5JaSW0puKaWllJZSWoo1fCqxWj7qRPl3L+pUOT+Ihnac+LwoalVJlc9Pol41qPKMiqhMwjA4GVhGdg7gAQEgE5dZuaLgDcAC5FJlRj4BMqAoBBlLriI4gAcEQARIjlxqyICiEA3AAgjgAJIslYgBEAGSnBmS5Eg1ErtIqpE8IAAigEcnqYYsfwMLIICsnlRDlrpBUZDlbiBjSTWKBwRABCRABpQGZAzA1g4gQ6pO1asG1aiaVDnSXTlSut1auQavjUboNEKrNQiACEiADCgK0pANavKVR8JN9nSep0lG/XbX8b142s7T4Tw8HC77/Tj82u4v9aSP0/ZQ9byd+SgvwXR4ZeXAt91+ErqOX26zbqVMaqbsFnu42+9cVr9zpcPvTVS/tz1+FxzGD/ln/thz/d66Zf4943sX4Pexx0+0+NOaP6/7A8ofY4fbGozO90iPP+Dq+VHU4ydUnx/RHf6U1J7Tz2ofqMe/DO9zlz/mxd/Vu0v1ffZrfpt+1Dy37Hd1z82Ae9rnZsA9/XMr4L810PoC3PBH2YG0Beh6+KWMN0cOPfMvDuUrwfb4Ixqo5NX5043y8xsfCfzO/7aC/5Bg05JAYSXB3GriuPSQ7XqF8a7CLwnJrCU421WHDX/Zvuzmv7fzdecW2h6eYtvEVy1N6z4utn18VVJ1ql41qEZVzcualzWvaF7RvKJ5RfPqfo8Xom73RKNqUs2qpamtW70KFkAAB/CAAIiABMgAJNd/F7Kple1fAwI4gAcEQAQkQAYUBUIyIZmQTEgmJBOSCcmUWhNYyoCi4AzAAgjgAB4QABGAZIdkh2SPZI9kX5Ov0ozzbvu8n6ShpOMuhxf0F389/z7hCP5Qnubjy/R6mSfpxa9/lfzxSFRGCmYzDjzdx0hjoo0sihzihxzZKF9tPdOMRLTBLl3OL3nkhYSBazhyaTZXaf4/",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
