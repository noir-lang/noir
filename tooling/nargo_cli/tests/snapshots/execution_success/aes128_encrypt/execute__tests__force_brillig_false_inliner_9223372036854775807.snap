---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "8953992224835750546",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdnRTuMwEAXQf8lzHuKZsT3ur6xWqEBBlaoWlbLSCvHv61RNFogJuUP9GNozTbnTZBy/Nveb25fHm+3+4fDcrH69NrvD3fq0Pezz0WsTw/lvz0/rfX/4fFofT80qatc2m/19s1If39rmYbvbNCvfvf1umxhLIjFfRPLus1BYJFRoBwsHC4IFw0Jg4WERYAFnrnDmCmee4MwTnHmCM09w5qmceQiDUP0sPCwCLCIsFBYJFa7rcOJwQjhhnAhOPE4CTiJOFCd4+q6Yfv6Kw6/LOZcmyFkQWRBbkFiQt6BgQdGC1IKSAZGlI8jSEWTpCLJ0BFk6giwdQZaOoHJHOJYRxW6C1IKSAXFnQc6CyILYgsSCvAUFC7J0BFs6gi0dIZaOEEtHCNwR+eD2uN3tto83HxZm3Xl1VkyQlC7VSPnTGZTXc7MiwkJhkVBRXs/NCgcLggXDQmABZ65w5gpnrnDmCmee4MwTnHmCMy+v57jTi2A3WdUILDwsAiwiLBQWCRVfrOdmSXnKZh4JL5x8pRuWGrJ0hGU/TEbsddkAO0vK4+s7EnjZ8Dr7Xcpj3vynFNtFHI+fostGPGE/EAnLBrxZUh7v5onDCeGEcSI4KV4qhGgkHx7YtpO3+qFPQlg2kQG183OTcc6hZQMVUt0P/xcX/LLJ62rVuWp1qVo9/rQ6jatBnlwnRKtWTzWr+65q9Z/+UmO8vFPjpHaoWDtWrK31aofvri9+ckkKhBPGieDE4yTgJOJEcVL+DY9Jik5I7HDicEI4KacfdCSTy0AUnHicBJxEnChOEkzKa38Z73GiYh5xyit4oPbsiFNeiSPV527k5VX71apr1eqpZvXyqh6pPncjT1y1ulSt7itWp+6nv9Svb+dU3rW9Um2qWJsr1v7uHv+x9plEnChOEkzKW7lzjzHIOZwQThgnghOPk4CTiBPFSYIJ4emjz73ygevf+MX+f3BumBIKT/IIJ4wTwYnHScBJxIniJMGk3DbzBE+f8PQJT5/w9AlPn/D0CU+f8PQJTP8tH/1ZH7fr292m3yHtX3zZ3w0bpvnw9PdpeGXYUn06Hu429y/HTb+5+n9fte8iEt9SCPlU+ugCtZH60zq/RNISpXOP9occWmIdLyj9+5O2rtMB5MfFbd4EH0B+kNrmTed8yvm0/wE=",
  "file_map": {
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "decode_hex",
    "cipher"
  ]
}
