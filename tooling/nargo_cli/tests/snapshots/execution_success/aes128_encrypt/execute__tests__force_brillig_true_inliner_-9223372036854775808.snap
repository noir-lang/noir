---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrdauMwEAXgd/F1LjSa0WjUV1mWJW3TEghJSdOFpfTd1y6xG6KJwtFNwSVfYvvIPzPS5/C8efx4/bPdvxzeh4dfn8Pu8LQ+bQ/7cevzazU8Hre73fb1z+W/hzD9oRS/wfvbej9tv5/Wx9PwkC2shs3+eXiwlMcveNnuNsNDCl+/VyNhnAhOEk4UJxknhpMCEw04IZzg6SuevuLpK56+4ukrnr7i6SuefsbTz276hflMSqKKRJwwTgQnCSeKk4wTw0mBiQWc4Okbnr7h6RuevuHpm5++6kzMKpJxYjgpMCkBJ4STiBPGieAk4QRPv7jpU9B5kBFRqZD1oIKjGEIPoh4UexD3IOlBqQdpD8o9yHpQz4ignhFBPSOCekYE9YwI8kcEsSwohwqlHqQ9KPcg60GlA8XQg6gHxR7EPahnRLAbbrR4NtG4IhknhpMCEwk4IZxEnDBOBCcJJ3j6gqcvePqCp5/w9BOefsLTT3j6fsuHg50Jk1Uk4URxknFiOCkw8Vs+bUI48Q+fF8LVc9rvRkiY36+lfrT7rQVO8+sAp2rH/NZCm8gdotWw9FsLTeKX423i5iLEyxmrjsUvx9uEceKeMeE0E9GKJJwoTtxhKTEuJFfEcFJg4pfjbUI4iThhnMgdkmJFEk4UJxknhhM//ZxnYteE/UK8TQgnESeME8FJwomfvtpCuCIZJ4YTP/203JRMrolfdLcJ4STihHEiOEk4uXftOyTjxHBSYBIDTggnESeMvo+xX1i3ScKJ4iTjxHBSYMIBJ+5JVqIz0eoNljnhRHHi95dKns3Y2r6YU/k2fo9gbGfPJ2BsHeu1kY7f8Uv+EH5+h/jaaIfJHcav+gPln3OQrk3BzY26v23o/vFc5rOqcxlb8nMuY7Pz+vs78vfbBHeMdBiDLwG/Hm8Svx5vE8JJxAnjBL81KX5rUvzW5Lcj2gRPX/H0M55+xtPPePoZTz/j6Wc8/Yyn73cw0nzpq1ZAUHBjWi8uEwpVBWMGE7/ip+VNmTRVJOKEcSI4STjxz1hcJv+4qsZuTIs3iNyYFG8SwknEib+MbH54W66AoaCAwK9cW4AQ8DVu/V0ft+vH3ea8xvTlY/90seT09O9tc7X69O14eNo8fxw30zrUnyWo055O5Y4ITwNj3KKxUUiSxq3vw4hRV5Fp2px2UkTGz+q4D+N+/Ac=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
