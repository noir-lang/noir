---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrdauMwEIbhe/FxDvQzGkm9lWVZ0jYtgZCWtF1YSu99nRK7IZo4vDopuORJbH/yz4z0OTxu7j+e/2z3Ty9vw92vz2H38rB+377sx63Pr9Vwf9judtvnP+f/Htzxj0/+G7y9rvfH7bf39eF9uMvFrYbN/nG4KymPX/C03W2Gu+S+fq9GEjiJnAgniRPlJHNSOKmYqOOEp688feXpK09fefrK01eevvL0laefzfRrjCdSk2+I5yRwEjkRThInyknmpHBSMSk8/cLTLzz9wtMvPP1ip686kVIaopxkTgonFZPqOPGcBE4iJ8IJT7+a6Xun0yDz3tcG5R5UelDlKDjXg3wPCj0o9iDpQakHaQ/KPaj0oJ4R4XtGhO8ZEb5nRHh7RPgoM8quQdKDUg/SHpR7UOlBtQMF14N8Dwo9qGdERDPcUMLJhBIbopxkTgonFRNxnHhOAieRE+GEpy88feHpC09fePqJp594+omnb7d8oisnEn1piHCSOFFOMieFk4qJ3fJZJvbhx5nE5jltdyPETe/X0j7a7dZCTNPrQEzNjtmthWUSbxBthqXdWlgmFRO7HBcf5zPWHItdji+TwIl5xiSmiYg2RDhJnJjDUkKYSW5I5qRwUjGxy/Fl4jkJnMQbJIWGCCeJE+Ukc1I4qZRE5zix0895IqUlgZPIiXCSOFFOMid2+lpmEhtSMbFL7mVip5/mu2WRhgROIifCSeJEOcmc3Lr2DVIxCY4Tz0mg72PRLqyXiXCSOFFOMieFE/zSG6N5ktX7E9HmDTZG4SRxYreKap7M2KU+m1P5NnbBP3ampxMwdoH10kjH79j1u3M/v+PjpdEOkzuMXcI7n3/OQbo0lZsrRfyy8beP5zyfVZvL2F2fchn7lpff35G/XfPfMNJhCr4E7OJ6kdjF9TLxnARO+H1G+X1G+X3G7i0sk8wJT195+pmnn3n6maefefqZp595+pmnb7cj0nTpqzZAKLgyQxfmCYWmUCgFE7t89/MLqdfUkMBJ5EQ4SZzYZyzMk3+xKXquzHAvELkyv71IPCeBE3tN2PTwLrkBhYIKgV2GLgFPwNe49Xd92K7vd5vTGtOnj/3D2ZLT93+vm4vVp6+Hl4fN48dhc1yH+rME9binx3JHJB4Hxrjlx0ahlzRufR9GCGkVojtuHndSRMbP6rgP4378Bw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
