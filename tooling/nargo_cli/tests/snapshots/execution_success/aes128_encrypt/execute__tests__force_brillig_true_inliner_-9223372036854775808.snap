---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrdbuo4FIbhe8kxB15e/u2tjEZbtKVbSIhWtB1pVPXex+whaYVXg16fIBnxQOLPCfGyP6bH3f3771/749Pz63T318d0eH7Yvu2fj6318bmZ7k/7w2H/+9f3tyd3fpHo/4DXl+3x3H59257eprtc3GbaHR+nuxJz+4Kn/WE33UX3+femEeUkcBI5SZxkTgonFZPkOBFOePqJp594+omnn3j6iaefePqJp595+tlMv6peSI3SEc+JchI4iZwkTjInhZOKSXGc8PQLT7/w9AtPv/D0i51+SjMppSOZk8JJxaQ6ToQTz4lyEjiJnPD0q5m+uDQPMhGpHSojqHLknRtBMoL8CNIRFEZQHEFpBOURVEbQyIiQkREhIyNCRkaEjIwIsUeEaFhQdh2KIyiNoDyCygiqA8i7ESQjyI8gHUEjI0LNcH3xF+OLdiRzUjipmATHiXDiOVFOAieRE55+4OkHnn7g6UeefuTpR55+5OnbJR915UJUSkciJ4mTzEnhpGJil3zWiXBin74uRLv/absaEdz8fB36v3a7tKBxfhzQ2B2YXVpYJ+EGSd2wtEsLq8Sejq8TM5cguvRYdy72dHydKCdmjwWNMwmpI5GTxIk5LIP3C8kdKZxUTOzp+DoRTjwnykm4QaLvSOQkcZI5KZxUStQ5ToQTO/2cZ1J6opwETiIniZPMSeHETj+VhVzfxtWedK8T4cROPy53yxI6opwETiIniZPMSeHk1rXfE+84EU48J8pJ4CRykuiDovrMSeGkYqKOE+HEc6KcmJ2cRC4kdY/Wapc71knFxC5EtOr8bFrN/dtiz//GLgDWOndAq2mna5MHfsee8jv39Tui16Zy88Okf93Ys34n+asP4rXxA0YHTLh9Pt/z2fS5tLWCOZdWhb3+/oH87TLBDZO5sefjq5eAvQVjnSgngZPISeKE35oSvzUlfmuyix7rhKefefqZp595+pmnn3n6maefefqZp29XMOJ86afUgQxB/WFBzy8rHd0MpgonZvKyPClLih2JnCROMieFkvDDkrhfViVVO+I5UU4CJxETe/66TJJL7oBQ4ClQCgIBn631z/a0394fdpfNr0/vx4dve2Hf/n3ZXW2LfTk9P+we30+78wbZr72x584LPm5atfI8/FpLWgVTQmytPz3rfdp4lXPz3G+t4NY+W9sxtOP4Dw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
