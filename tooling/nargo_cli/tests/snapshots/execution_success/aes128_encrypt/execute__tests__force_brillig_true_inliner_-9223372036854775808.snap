---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrRTuMwEAXQf8lzHzyeGXvMr6xWqEBAlaoWlbLSCvHv67JNqeIh1fULwqDTxr5Jmpn6Y3gaH95f7je75/3bcPfrY9juH9fHzX5XRx+fq+HhsNluNy/3138ewukHpfAF3l7Xu9P47bg+HIc7C7Yaxt1T/S1yfYHnzXYc7jR8/l5VQjiJOGGcCE4UJwknGSfmkpgnwtaQApMccEI4iThhnAhOFCdu+tnCRDQ3JOPEcFJgYgEnhJOIE8aJ4ERxgqdvbvqF+UyKUkMMJwUmJeCEcBJxwjgRnChOEk7w9AuefoHTjyHghHDip5/SRMwawjgRnChOEk4yTgwnBSYUcEI4wdOPbpTR4plE44YoThJOMk4MJwUmHHBCOIk4YZzg6TOePuPpM54+4+kznr7g6QuevrjTZ57qF+YyJ+oemITp2hdqiXuOsU6fL6zN7UIZJ3KDpGb6qjDxy+pl4uYixJcVa+bil9XLhHHirpiwTkRSQxQnCSfuaSkxXkhuiOGkwMQvq5cJ4STihHEiN4jGhihOEk4yTgwnfvp5ahGINcQvq5cJ4STihHEiOFGc+Oknu5DmbumX1cvEcOKnr5ebksmc+GX1MiGcRJwwTgQnipNb175DMk4MJwUlHAJOCCcRJ4w+j7FfVi8TxUnCScaJ4aTAhAJO3EVORGeSmidYJsVJwom7yLWhNZnaqLrq9/w31mEKbmLoMNRhYofhDiMdpiMf/mHdynSC1oZdmpuONfih9A/h+32I50Y6jHYYv/oPlL/XQOcmdxjrMOX2fK7zWbW51GbolEukPHt96chfqMPEDuPOXSeR5tUf+x2GJeBfmWH61CSKDRGc+Nfl5QGofuXcEMNJgYnfklgmhBN/xeLUXyDmhihOEk4yTgwmfoF9qX0sN0BQoChIKMgI+KyjP+vDZv2wHc/bTZ7fd49Xu0+Of1/H2UaU18P+cXx6P4ynLSnfu1FOZyibrSSU04HUEdX+D4nW0dezVSRZRTr98+vrCKGwEor1GOpx/AM=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
