---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrdbuIwEIbhe8kxBx6Pf3srq1VF27RCQlBRutKq6r2v0yWAYhP05gRhpAcSf0nITPzVvfRPn2+Pm93r/qN7+PXVbffP6+Nmvyujr+9V93TYbLebt8frjzszvEgwP+Djfb0bxh/H9eHYPSSTVl2/eynvrJYveN1s++7Bm+/fq0KEE8uJcuI48ZwETiInqUlsHImmimRMouFEOLGcKCeOE89JM/2YzEh8rEjkJHGSMUmGE+HEcqKcOE48Jzz91Ew/q55I9lKRxEnGJBtOhBPLiXLiOPGcBE54+pmnn3H61hhOhJN2+iGMJKWKKCeOE89J4CRykjjJmIjhRDjh6dtmlDbZE7FJK+I5CZxEThInGRM1nAgnlhPlhKevPH3l6StPX3n6ytN3PH3H03fN3Vcd6xfVPCW+uWHOjOe+k5o0jzH14/+L+upy4ZUTd4eEave9x6RdVs+TZi5O9Dxj1b60y+p5opw0Z8ypH4kLFfGcBE6ah6Wz9kxiRRInGZN2WT1PhBPLiXLi7hBvK+I5CZxEThInGZNkOBFO2unHsXfhUk2UE8eJ5yRwEjlJnLTTD+lMqst4u6yeJ8JJO31/vlomVxHlxHHiOQmcRE4SJ/fO/YqoMZwIJ5YT5cRx4jkJ9EZR22X1PEmcZEzEcCKcWE6Uk+YkB5ETCdWttUriJGNim5NcOm2jKR20q0bUfyMLjF1gdIFxC4xfYMICE7nRBfnojXnL4wFaOolhahbMwY3S35jL74hOTVxg0gLTrv6NxMsc+Im5Uf7PG1lg7P39uc5nVedSurRjLlbi9PsX5O/cAuO5abcl/CjCtCzVdlNiDrTPTDP+a4rYikRM2i0JOd8AlWfhFRFOLCfKieOkPWN2bHyIakUSJxmTdrNgnggn7SeX5yfdsQKRgkRBhuDG8+ob4LuM/qwPm/XTtj+tg3n93D1fLYs5/n3vJytk3g/75/7l89APa2Uuy2SGH9YsKyd22JAyktKYEufL6Oemz4pbWcnDcMhm6Kc58WUbynb8Aw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
