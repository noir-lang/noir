---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2dWXMc1RXHb89MSxot1gAJSUhITPaEJMwmzSirE9t4kdlXg1lGIwkwZjHGLMaYMRhszGLsh6SSquQxj/kc+QLJS1KV5zzlMVWpPKAj95n5z5lzRmPULTgubpWqe7p/fc//nj739t3AUbicFtf+ouS8II50fTr0J2Z3JMfy5lIlxbzKWWmMHGjMOdCYd6Cx4EBj7EDjmAON4w40TjjQWHSgcdKBxqkUNZK2UuhPaeudduDTGQcatznQOOtAY8mBxmscaLzWgcbrHGj8ggONX3Sg8XoHGr/kQOOXHWj8igONNzjQ+NXgqy/5NQc+vdGBxq870PgNBxq3O9B4kwON33Sg8VsONH7bgcbvOND4XQcav+dA4/cdaPyBA40/dKDx5pBuX3J76E9p6/2RA5/+2IHGnzjQeIsDjWUHGisONFYdaKw50Fh3oHHOgcZ5BxobDjQ2HWhccKDxpw40/syBxp870PgLBxp/6UDjrxxo3OFA468daPyNA407HWjc5UDjbgcab3WgcY8DjXsdaNznQON+BxoXM9C4ng7AOYnOrf3RhnXaEE4brmlDM20Ypg25tOGVNpTShk3aBEmbDGkTH22SK6390SYv2kRFm5RoExBtsqFNLLRJhDZh0CYH2kRAi/S08E0Ly7RwSwuj29f+blr7o4UzWpiihR9aWKGFC1oYoIl3mtimiWOamKXJTppMpMk6mgyjUtFkDk2W0GQEDfZpME2DVRoM0mCLBjM0WKDOOHV2qTNJnTXuDNHHnD6W9DGixp4aU2qsqDGgykbBTMGyGOzEL/6PyUkx+Z2D+yn+BwGVorCbZv7N8kKtqJQvRf3r+VOecSb519uc/1g2+svjST57Or38sSxsNy84+UwEzF5g9hrMPmD2Gcx+YPYbzCIwiwZzAJgDBnMbMLcZzO3A3G4wdwBzh8HcCcydBnMXMHcZzN3A3G0w9wBzj8HcC8y9BnMfMPcZzP3A3G8wDwDzgME8CMyDBnMQmIMG8xAwDxnMw8A8bDCHgDlkMI8A84jBPArMowbzGDCPGczjwDxuMC1gWgazBMySwbSBaRvMMjDLBrMCzIrBrAKzajBPAPOEwTwJzJMG8xQwTxnMYWAOG8zTwDxtMEeAOWIwzwDzjME8C8yzBvMcMM8ZzPPAPG8wR4E5ajAvAPOCwRwD5pjBvAjMiwZzHJjjBvMSMC8ZzMvAvGwwrwDzisG8CsyrBnMCmBMG8xowrxnMSWBOGszrwLxuMKeAOWUwbwDzhsF0gOkYzGlgThvMm8C8aTBvAfOWwZwB5ozBvA3M2wbzDjDvGMxZYM4azDlgzhnMu8C8azDngTlvMO8B857BvA/M+wbzATAfGMyHwHxoMBeAuWAwHwHzkcFcBOaiwVwC5pJginAe4Lkdye/yJlKzXG9k3C9vzyR5xr0idsvCtsezsb0cCXsh9HyO99j+pNCasp5KJOyxHukfHqPOMNPp6YnEvUJnsBx8L4Z7/H5p/uAscDK2WAe/myzGy83yXC3buKuUP724q1SuxriT9wqdwXJcadxhbMm4y2fgi2Z5/vO4C77iLi/uFTqD5bjSuEOfyLgrZOCLZrmRcdxVP8W4q16VcVcQ9wqdwXJcadxhbMXAXYLz3yXn2fb7FmpZft8pXafoR1uUxjuhmzhe8nCN/cp+nkBe3CvCvUKn385k8rsAdjAv1hEL/mLyezY5jsEz/HxJsT8m7PfpVq5JvxQVvqjwFGvnk3NaC+I1gp2dXn5pvlPOfxfkH9LLv7uGsjsb/d38b80k/0qZ3gHV4b8n+c2GwXZOtslZrYfINpBjX9pkbbkw+I3A9jMW1/6UHKm8/xTlwzZ2WLtbCvb4Q/NdTvguo3Fj13cTiu/Gh/huAu7xOfqOr/05pOe73Ii+67YjitYsfFdUfDcxxHe4foprnbG49peQnu+0fuAo/ahiJr4bvf/O9reqH1VU/BopfmX/TGajp812pxQ9OUUP89MKnx/Czyh8PKS82zIpb6V8DeSLMYf+ZV+U4Nq0cm0GzrcJ/Rn1ARdmwmD8cJpRyoL9Y5ny4jfqprbgX5Cv5KRNrEtsf1bxhaz3WcxJUIpE+bHNzCvlzYVBfxWgnLG49lfwk2wzsd4Mq0vat1rWgyzGzp8kjmRbPiXKHMLoMcZlIt8tRL18JSf1YByxtljc+1tyzHKsR+laoRNt4bih0EnffqN5Ob4p8ZgtDoO+Rvux4P+R/MZ3zMfN/A9TVxutymqttdqaay0v19st6SdKOfBT2vZbjVqzXa23G0tztVZtfkP7OLbQ2qQopBczcs4CdWW7V2z0flB3vB4ybX8qw/qXBeVdZT3HHIn8UY82tuN3qY1dOC/um8dBH+uMQRmRx3N+Hq/9JzmWlDxl7GrzdXgN5z3+LcqG7UlkHEMYjCPMVxsX8PvN9htXLWdbp8pVLSbTay966x7Yd+B5KLL5X2GX3yvGW07xu5x3+H/o5fm/5Hw2BPX7SWkK8sc+tJxz08aocpwXieva2BbLHSn3tD7W7k5/Wbv5R72y5qDvIfVz/pqfi2BX8zPHm/TzeGKP8j4Y9efJ30Esj1af+Lo2XsNvKfOzYbCN4GeL4nfK9aO7T0H+gwOU+B6OoVCjTFo/knWTPw/Bu5SctIl+QvuoIRcG341W16dBXxTsNl6+t4KSB9qKBX89xM6pEWJHqwtSw1jQ49fScANoOB3peWLbo41DZZ43DqkT2hzDsDqhzTFovp0Ng3HfXfNQnktz/8yMopUT38O5D9Qok1YnWPdm6gTal22NFuOT4h5rGDN4jBXkb1biS2u/ZB8H41V+lyjx2kQs+FuU2NPWLdl2lmM66qOTjjPim4R1O+70l1urH8hfaf3g8pXCYNs4Je7hO2Cbo35Hccw1bEwkjyGM1tfEvHZ1Lh+v5nWjnRDHWawbaeMB7IfuiXSbWB/xWVkfmT8Q9fLcL+o/6uL3OxX094rjCem7Ub4jWt9Sa3/YNr7DiRHyGjavrq0LTAyxjbqKhm3sa6DWccGPKZpipWyynsl8rbjDGNjduXwctn8IYyvteaL23PxSuz7XKq9U6Gf1szNPVGtFod+/MdjA8ufFfeaPQz1qRf2aC5lorje0uq9plmVi/ghoXtkSzXMDmqMNNMt6gv0byWAZmT8M7fQfkvON4v/YlviituW+OLoJX2j9jDxwJ4XPMqqnZau8Vj2NlDJFBoM+Y/7EEJ9p8zzoC22dLst5+Pn6fKXZbDXb8+3VhXp7aavXAdaa9ka71ahUFuqVlXplbiP72n40HANQ4j1tuOcNec4vFvw5aNvOw/tYZxV7xP1+CBcZx/U8lGuFTv81bS8c7hFknm1PdgY18r0puBcLO9PJb/QX5sU6YsH/NsmA3wnu6+PnS4r9CWG/T7dyTc5XTin8lMLT+7kg+iVY9rTXSdZtivzxmtTGsZNFvao2m/ML1aW1L/5ye3W5XtuoXn0MQFXO7JV0AAA=",
  "debug_symbols": "pZfdThsxEIXfJde58Hj8y6sghAIsVaQooDSpVKG8e+fEZwK9aAXmJt+X7M6J1ztred9WT8vD6cf9dv/88nN1c/u2ejhsd7vtj/vdy+PmuH3Z269vq4APKQZZG4WMpJKJzGQhK9lWNxHsgzWQQkZSyURm0vIUrGQj+2ALpJCRVDKRmWRes7wENrIP9kAKGUklE5nJQjKvM6+PvBgCKaTlZVDJRGaykJVsZB+UQArJvGg5BcxkISvZyD6ogRQykkoyT5mnzFPmKfOUeYl5iXnJzqvGbL830PI7qCT6JkAy5dJpAhGX6IJmi5Dkkl3QbwqpLs2lU9BzQ8QluiAZ9wV9NyS7FJfqgmRMNprvIui+IeISXdQluSAZc4MeHFJdkIzpQhteBH04RFyii7okFyRjltGNQ6pLc+lDFB05RFyii15ulqIpL8xkISvZyD4ogcSAOiS7FBcrjQHSXDolBhdxiS7qklw8Bw0cBeIno3VjhCSX7GLDiAqpLs0Fw7Dbo8kD0cJDogvOsfuk6OYh+K8KSS5IxiTk5tIp6Owh4oIqTAv6eEhxqS6Ngh5VXCB6dEh2KS5YHsP5vF75Gn5/PCwLlvAPi7ot9a+bw7I/rm72p91uvfq12Z0uJ/183ewvPG4OdtQil/2T0QKft7sFdl6/V4d/l7bQWNyiXsvz5+sxm6Ne20R9bT74lutEfVdlfc8yU1+K17eZ8dsKwnpbQibqrbNZb609UZ+Cjz/JTL09Gv7/uX2vvsxcfxK9jn/m/5Nmr09lpj7Ga339Xn2OM/XVn5/UpupLu9ZPzX++zl9L37v+qfqCHcOlvkz1n+3kPMA2cx9WgM8HdH+CbLdXvh5ge8b3ANGZAKnvI8jfHcG/LiGm/0yCbWx9FqPUrw8h+wDKzEMowZtIZOYhkGsT24vNTH30RUh05iG6PsPt7yXkzr5tHreHv97Uzsg5bDcPu4Vfn0/7xw9Hj79f/Yi/6b0eXh6Xp9NhQdL765593Gpr6xT6ne0q7JvYcigp2zds8m6jbYSj4CBeQG6T7dyTxLszhvYH",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
