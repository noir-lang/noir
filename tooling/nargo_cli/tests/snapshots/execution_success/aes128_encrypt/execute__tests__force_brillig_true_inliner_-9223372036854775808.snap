---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "inputs",
        "type": {
          "kind": "string",
          "length": 12
        },
        "visibility": "private"
      },
      {
        "name": "iv",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "key",
        "type": {
          "kind": "string",
          "length": 16
        },
        "visibility": "private"
      },
      {
        "name": "output",
        "type": {
          "kind": "string",
          "length": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfdThsxEIXfJde58Hj8y6sghAIsVaQooDSpVKG8e+fEZwK9aAXmJt+X7M6J1ztred9WT8vD6cf9dv/88nN1c/u2ejhsd7vtj/vdy+PmuH3Z269vq4APKQZZG4WMpJKJzGQhK9lWNxHsgzWQQkZSyURm0vIUrGQj+2ALpJCRVDKRmWRes7wENrIP9kAKGUklE5nJQjKvM6+PvBgCKaTlZVDJRGaykJVsZB+UQArJvGg5BcxkISvZyD6ogRQykkoyT5mnzFPmKfOUeYl5iXnJzqvGbL830PI7qCT6JkAy5dJpFxEX9JpA1CW5oCpCikt1aS6dgp4bIi5IVoi6JJfsUlyQjHuH3hvSKei+IeISXdQFybhFaMEhxQXJmC104ZBOQR8OEZfooi5IxiSjGYcUl+rSXJBsd0LRkUPEJbro5WYpmvLCTBayko3sgxJIDKhDsktxsdIYIM2lU2JwEZfooi7JxXPQwFEgfjJaN0ZIcskuNoyokOrSXDAMuxmaPBAtPCS64BybcUU3D8F/VUhyQTImITeXTkFnDxEXVGFa0MdDikt1aRT0qOIC0aNDsktxwfIYzuf1ytfw++NhWbCEf1jUbal/3RyW/XF1sz/tduvVr83udDnp5+tmf+Fxc7CjFrnsn4wW+LzdLbDz+r06/Lu0hcbiFvVanj9fj9kc9dom6mvzwbdcJ+q7Kut7lpn6Ury+zYzfVhDW2xIyUW+dzXpr7Yn6FHz8SWbq7dHw/8/te/Vl5vqTZh9/KjP1MV7r6/fqc5ypr97/qU3Vl3atn5q/fJ2/lr53/XP1otf+m+mfgv3Bpb5M9Z/t5DzANnMfVoDPB3R/gmy3V74eYHvG9wDRmQCp7yPI3x3Bvy4hpv9Mgm1sfRaj1K8PIfsAysxDLMGbUGTmIZLrQ2AvNjP10ZtYdOYhvK4B7e8l6M6+bR63h7/e1M7IOWw3D7uFX59P+8cPR4+/X/2Iv+m9Hl4el6fTYUHS++uefdxqa+sU+p3tKuyb2HIqKds3bPJuo21po+AgXkBuk+3Tk8S7M4b2Bw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "unconstrained fn decode_ascii(ascii: u8) -> u8 {\n    if ascii < 58 {\n        ascii - 48\n    } else if ascii < 71 {\n        ascii - 55\n    } else {\n        ascii - 87\n    }\n}\n\nunconstrained fn decode_hex<let N: u32, let M: u32>(s: str<N>) -> [u8; M] {\n    let mut result: [u8; M] = [0; M];\n    let as_bytes = s.as_bytes();\n    for i in 0..N {\n        if i % 2 != 0 {\n            continue;\n        }\n        result[i / 2] = decode_ascii(as_bytes[i]) * 16 + decode_ascii(as_bytes[i + 1]);\n    }\n    result\n}\n\nunconstrained fn cipher(plaintext: [u8; 12], iv: [u8; 16], key: [u8; 16]) -> [u8; 16] {\n    let result = std::aes128::aes128_encrypt(plaintext, iv, key);\n    result\n}\n\nfn main(inputs: str<12>, iv: str<16>, key: str<16>, output: str<32>) {\n    let result: [u8; 16] =\n        std::aes128::aes128_encrypt(inputs.as_bytes(), iv.as_bytes(), key.as_bytes());\n\n    // Safety: testing context\n    let output_bytes: [u8; 16] = unsafe { decode_hex(output) };\n    assert(result == output_bytes);\n\n    // Safety: testing context\n    let unconstrained_result = unsafe { cipher(inputs.as_bytes(), iv.as_bytes(), key.as_bytes()) };\n    assert(unconstrained_result == output_bytes);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
