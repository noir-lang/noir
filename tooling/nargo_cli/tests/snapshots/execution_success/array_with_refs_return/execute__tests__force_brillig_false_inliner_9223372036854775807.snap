---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 2,
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : [_0, _1]",
    "BRILLIG CALL func 0: inputs: [], outputs: [Array([Witness(0), Witness(1)])]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 18 }, Call { location: 19 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(3) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 33 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 44 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 3 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(5), source: Relative(4) }, Store { destination_pointer: Relative(5), source: Relative(1) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(2) }, Mov { destination: Relative(1), source: Relative(3) }, Return, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 43 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 36 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 49 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "dZBBDoMgEEXvMmsWItjaXsUYgzo2JAQNhSaN4e4dpLZ20Q2PmeH/IX+FEftw67Sd5jtcmxV6p43Rt87Mg/J6ttRdoUhHSSdnUPKMMkNkyIwq45RxzqgzLhtEcomRwb6g8w4x+R820j8W5dB6uNpgDIOHMmF7dF+U3eiVo2nBAO1IJMNJG0y3yL7q4r+U19VbzOvTR16RvqVKDdr9ZBCTk9OqN/gup2CHw9Q/l32yZ7i4ecAxOExO3yApskYIJkXLgFOnkZLJSxvT5hc=",
  "file_map": {
    "50": {
      "source": "// Regression for issue #8786 (https://github.com/noir-lang/noir/issues/8786)\nunconstrained fn main() -> pub [i8; 2] {\n    if (*func_5()[1].0) {\n        [0, 1]\n    } else {\n        [2, 3]\n    }\n}\nunconstrained fn func_5() -> [(&mut bool, str<2>, str<4>, str<4>); 2] {\n    [((&mut true), \"AB\", \"WTGS\", \"AELL\"), ((&mut false), \"CD\", \"PKHQ\", \"LDWE\")]\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
