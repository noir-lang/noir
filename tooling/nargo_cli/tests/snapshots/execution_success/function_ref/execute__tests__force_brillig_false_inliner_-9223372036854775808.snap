---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "c",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "string",
        "length": 3
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _5",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1, _2, _3]",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(4))]",
    "EXPR [ (1, _0, _4) (1, _5) -1 ]",
    "EXPR [ (1, _0, _5) 0 ]",
    "EXPR [ (-1, _0, _5) (1, _0) (1, _5) -1 ]",
    "EXPR [ (1, _1) (-4, _5) -98 ]",
    "EXPR [ (1, _2) (-14, _5) -97 ]",
    "EXPR [ (1, _3) (3, _5) -114 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "dZDBDoMgDIbfpWcO6uZBX2VZDGI1JA2QCksW47uvEt3cwctf2p+vpSwwYJ+mzrrRz9A+FujZEtmpI290tN5JdVkVHGkXGVFKcPKFCprRRWhdIlLw0pTypTlol2PULG6hAN0gURqOlnA7repHF9doU+1sU3/hWuinZNpY/nsvlNCWCqqst6x30XVrz1b3hPtWY3LmtGR8h8M5viGwNzgkxm1A9mTkBw==",
  "file_map": {
    "50": {
      "source": "fn main(c: bool) -> pub str<3> {\n    let mut f = foo;\n    if c {\n        f = bar;\n    }\n    f()\n}\n\nfn foo() -> str<3> {\n    \"foo\"\n}\n\nfn bar() -> str<3> {\n    \"bar\"\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
