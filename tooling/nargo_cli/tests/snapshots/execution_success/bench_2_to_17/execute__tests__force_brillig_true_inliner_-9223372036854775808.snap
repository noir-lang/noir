---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjRbuM4DEX/Jc99MElRlPorg6JI23QQIEiLTLvAosi/L2nqujMLdDDQvOQe19WxLFOSk4/d0+Hh/fv98fz88mN3++1j93A5nk7H7/enl8f92/Hl7H/92C3xIbq75Zud1AzLaBl9jbJkUAZnSEbZ3YqHZtQMy2hrqB8VDz9Sj75GdWf1oAzOkIySoRk1wzJaRl/D0mJpsbRYWiwtlhZLi6XF0mJpaWlpaWluMQ/JKBmaUTMso2X0NXq2636uebSMvgYty0gaySNlZBmpI+tIG+me7knLSBrJI2VkGakj60gb2TLZPbQEeEOigAJQgLclDjBAA/QBsgAIwAABFIACIIySIglggAAKQAEVYIAG6AN0AcCsYS4BAigABVSAARqgD4iCTSAAzBXmCnPUHmlAXKIGVIABGqAPiDokCwhhPPaovgQFVIABGqAP6OGJp9wJwAABFIACKiDWgKiNqOGEnsBRxgkEYIAACiCWFAowQAP0AVHPCQRggAAKQAEwE8xR18wBfUBUeAIBGCCAAhjDy1wBBhjDy5JTjaOuWQIKQAEVEP0qAQ3QB6yL6QoEYIAACkABFQBzgbnArDArzApz1D5rQBkQ5cNedBzFwhZAAAYIoAAUUAEGaICeIMsCIADntJAoloQCUEAFGKAB+oComgQCwEwwE8xrsdSA6Ko/SVlLYwUCMEAA45aFFVAB4ekBDdAHxHIoSwBuWRggAJgFZoFZDNAAGMyCwSwwr9Vi1+vNDpv6/dvlcIg9/add3vf+1/3lcH7b3Z7fT6eb3T/70/v6Tz9e9+c13/YXP+u9PpyfPF34fDwdgq43n62Xr5tS1PzamKpuzfXX9vR1ezFcvEjZ2vOfX98art/qV9f/TXtfWPoQ+Ioy0wM3tM3Q2oyBo1jT4EvMlEE/DbXOGGwpMBjZlKEsm0GnRpLb1gdfd2YMEtMjDT7Hpgwkm4FnRlILuqBlphrqVgx1qhb8fRLPgZbWZwz+mgQDGU8ZWoXBN/wZQ4m9PQ2Fp/qgZbsLNZoy9M/FjaaehS/9MIhO3YXUbYGTNnUXdZtVZMtUH6zbtsjSzJzwd89tHHqZMVhFUVudWRl6RQe6zVy/M2ZlL1PXb+h/7/J3/f9f+zs/2j8eL798v7+G6XLcP5wO4/D5/fz409m3f19xBr8PvF5eHg9P75dDmD5/JPCPb+ybJLflLr6N+qEuN6pxQHGukZ+Tu2t05T8=",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
