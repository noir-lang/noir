---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjRbuM4DEX/Jc99MElRlPorg6JI23QQIEiLTLvAosi/L2nqujMLdDDQvOQe19WRbFOSk4/d0+Hh/fv98fz88mN3++1j93A5nk7H7/enl8f92/Hl7H/92C3xIbq75Zud1AzLaBl9jbJkUAZnSEbZ3YqHZtQMy2hrqB8VDz9Sj75GdWf1oAzOkIySoRk1wzJaRl/D0mJpsbRYWiwtlhZLi6XF0mJpaWlpaWluMQ/JKBmaUTMso2X0NXq2636uebSMvgYty0gaySNlZBmpI+tIG+me7knLSBrJI2VkGakj60gb2TLZPbQEeEOigAJQgLclDjBAA/QBsgAIwAABFIACIIySIglggAAKQAEVYIAG6AN0AcCsYS4BAigABVSAARqgD4iCTSAAzBXmCnPUHmlAdFEDKsAADdAHRB2SBYQwHntUX4ICKsAADdAH9PDEU+4EYIAACkABFRBrQNRG1HBCT+Ao4wQCMEAABRBLCgUYoAH6gKjnBAIwQAAFoACYCeaoa+aAPiAqPIEADBBAAYzby1wBBhi3lyWnGkddswQUgAIqIMZVAhqgD1gX0xUIwAABFIACKgDmAnOBWWFWmBXmqH3WgDIgyoe96DiKhS2AAAwQQAEooAIM0AA9a1+iWBIIwAABFIACKsAADQAzwUwwE8wEM8G8FksNiKH6k5S1NFYYlyzMAAEUQFxyD6gAA8T+tgT0AbEcJsAsMAvMArMooAIM0AB9QFkAMK/VYtfrzQ6b+v3b5XCIPf2nXd73/tf95XB+292e30+nm90/+9P7+k8/XvfnNd/2Fz/roz6cnzxd+Hw8HYKuN5+tl6+bUtT82piqbs311/b0dXsxdF6kbO35z/u3hv5b/ar/37T3haUPga8oMyNwQ9sMrc0YOIo1Db7ETBn001DrjMGWAoORTRnKshl06k5y28bg686MQWJ6pMHn2JSBZDPwzJ3UgiFomamGuhVDnaoFf5/Ec6Cl9RmDvybBQMZThlZh8A1/xlBib09D4akxaNmuQo2mDP1zcaOpZ+FLPwyiU1chdVvgpE1dRd1mFdkyNQbrti2yNDMn/N1zuw+9zBisoqitzqwMvWIA3Wb674xZ2ctU/w3j713+bvz/a3/nR/vH4+WX7/fXMF2O+4fTYRw+v58ffzr79u8rzuD3gdfLy+Ph6f1yCNPnjwT+8Y19k+S23MW3UT/U5UY1DijONfJzcneNofwH",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
