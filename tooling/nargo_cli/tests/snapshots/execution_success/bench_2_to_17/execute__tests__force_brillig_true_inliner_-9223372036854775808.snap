---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdvbTuNIEAbgd/F1LroO3dXNq6xGowBhFCkKKMBKK8S7rzPCBrkrjuqXcoMw5GvL7t+HKscfw+Pu/v3P7/3x6fl1uPvnYzg8P2zf9s/HcenjczPcn/aHw/7P759/HtL5h+jfz7++bI/nxde37eltuCOWzbA7Po6/lTz6p/1hN9zl9LnpPiqWvj6qovNHOX3+2gySbzl4ueXgdsvB6y0HbzccXNMtB6dbDs63HFzcwa1Og9fyc/Cz0LDIYVHCwqIiu+tgyu2LMNlyb2W7YOpsal2aChj3SOARTYZFFqYkwBBgGDACGAVMBkwBjAGmAgbIgQE5MCAHBuTAgBwYkAMDcmBADgzIgQE5MCAHFchBBXJQgRxUIAcVyEEFclCBHFQgBxXIQQVy0IAcNCAHDchBA3LQgBw0IAcNyEG7MD/525SyMJT8DbKkEzKyDmUEFQQZgiqCGoAoIYgQxAgSBCGJoAuTq2lGWTtkCKoIagDihCBCECNIEKQIygi6cFWqc4y4dUj8XS5sExLJHSIEMYL8XS4kM+LuDOt3iq6hjKCCIENQRVADkCYEEYIYQcjkqrv3sk7Ry1o70sIkpzihOOE4kTjROMlxUuLE4iQ++35HJleaSOUl8Rsy64TihONE4kTjJMdJiRN39st8k166e3TyGzHrpIWJ34ZZJxQnHCcSJxonOU5KnMRn3+Kzb/HZ9wv1sdSb7tfGCqktkV+pX0P+o4fxfD2hMSQdYgQJghRB/gODsYc/IU79jvAfTSlPZ4/x135NLY44JQQRgvx5yjrvvWzUIUGQIigjqCDIEFQR5Ccit+/HbbQ83NlvQlxDhCBGkCBIEZQRVBDkT67IjCR3x5PfhLiC/CbENUQIYgQJghRBGUEFQYYgJBGMJEIuJKLMT5uldicWIQQxggRBiqCMoIIgAy6fUhGE3BIockugQCeQL3yZosxNvbHy6NdUEGQIqgjyd7m1qSCnSssWDvvNlWuIEMQIEgQpgjKCCoIMQRVBSCIKkoiCJKIgiShIIgqSiIIkwm++jFXffCVs2iMDUHORlem0Z6X7ZqBfcrUyraZZ6QjFCceJxInGy3y5UGpdQQVBhqCKIKBJIpQQRAhiBAmCkEQQkghCEkFIIghJBCGJYCQRjCSCkUQwkghGEuGXWqvnVb/Qajy1Npv2pIbPeH7ps7oWv/BZJxInGic5vvklTixO/Hmp0+y3Jh1pYeIXOuvk2oXYIfELscYvxH79tU7is6/x2df47Gv8qPSrrlWS47dhOX4bloOz/zku/bs97bf3h93XW0NP78eHHy8Rvf33slu8T/Ryen7YPb6fduc3i75fKjpvIJe24ZZ+nb+SNi5q22Q9L5y3hBuN/5NxneN6/wc=",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
