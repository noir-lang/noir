---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "5Z3dbtpAFITfxddceM/+51WiKCIJiSwhiIBUqqK8e70IQ4rpWdG6Zvb4JorLmnyT1jPDrtf9rF4WTx9vj83qdb2t7u4/q+X6eb5r1qv26PNrVj1tmuWyeXv8/sdVnb7oej9++z5fpcPtbr7ZVXeK9KxarF7a75xtz39tlovqztZfs95Q7evDUKPNcShdGkqk7GEskdb8YGv8Yaw14fvQh1mlVYnQVCK0LhHalAhtS4R2JUL7EqFDidCxQGhTYiKaEhPRwCZiUB10oHNo2ETkoGETkYOGTUQOGjYROWjYROSgYRORg4ZNRAbaoiaiO451vw9N0KiJyEKjJiILjZqILDRqIrLQqInIQqMmIguNmogsNGoistCoichBuxIT0ZWYiK7ERHQlJqLDSMREghFziQQjuxIJRiAlEoyUSSQY0dGSeIw8SCQYJp9IMJw7kWDYcSKB8VgP47EexmM9jMd6GI/1MB4bYDw2wHhsgPHYAOOxAcZjA4zHBhiPDTAeG2A8NsB4bITx2AjjsRHGYyOMx8ZRrx17InHujETVY/5D8aYbS97+/eA9N4FyKxdMx+Br6nHrQrlNody2UO6Ayu1jd0uSCsrxg73r3ti73iWsUK3nKonRdbzR99xVwbrUcBJhDW04ibDed43E1sK7d27dJfZEwhrlkCLdFET6KYgUkY85kXECIqmegkgRXScnUkTbyYkU0XdyIs0URE6h8dAUGg9NofHQFBoPTaHx6AIbz567wBKz5y6wl+y5C6wae25TKDdsIYj6yBBNnxs24zPcl2Pbh+PfkfvOvT8lXH9KvPqUP+xhZk9R158i4pMEO8VvCnSCC5PD1K2gRtOXKKJ78hJFNE9eoojeyUq0IubZeInyVxSt/BVFK39FcdTts/9PYujeOEbdkyhido2XKGJujZcoo92crsULEmW0G9ZuZLQbTqKT0W5YifLbjZPfbpz8djPqVugbSZTRbliJMtoNK1Fau7kgUX678fKjf9Qt2Jo6atLa9lAMDorFQRnTLLXSRxT6t6XoUfdsD8kdULnbuZ2OQfneto5R94MPyD3q7vEhuVWh3ATLHVzHQHXvuhx1z/ZV3Ia6J3S23/Z/37D+neGG9e8MN6x/Z7hh/duao59Yr865I6x/Z7hh/TvDDevfGW5dKLcplBs2LzPcsHlp44lB9RZ7ImxeZrhh8zLDjZuXHDfVuHnJc+PmJc+Nm5c8N25e8tywPqhPtwxrS/xg7t5TUrCX8DUSuWlhUrBX+3ASYY1hOImwHnKNRH7ClkZ9hsbNRMK2+SFFwlb/IUWKyMecSNgPFUOKhP0EMqBIEtF1ciJFtJ2cSBF9JydyCo1n1Gdo3EzkFBoPTaHx0BQaD02h8RBu43HH7dA6nK8pkMYtMTw3bi/huXGrBs+N2x54blMoN27G89xl3tNDusx7ekiXeU8Padi85LkNRu7sUXCtbajlJCPikw73+AQyItoxL1HEbCAr0cpY92Qlylj3ZCXKX/e0ImYBeYkicpGXKCMXmYdgkBUx/8dLFDH7x0uU0W6YR5mQldFuOLtx8u/qcvLv6nLy242T325Gfc7HjSTKaDesRBnthpUoo92wEqW1mwsS5bcbLzz6v9qjH/NNM39aLrbtGenFj9XzrlmvDoe7n+/dK0+bZrls3h7fN+vnxcvHZvG4XD+n16r68OWegp7p2jyk/zAzHXozIx/TYfpF6tq2r/r2p7Y/+Rc=",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
