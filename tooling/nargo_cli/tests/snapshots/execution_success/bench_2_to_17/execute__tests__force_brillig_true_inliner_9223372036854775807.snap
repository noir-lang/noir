---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "5Z3dTttAFITfxde58J7951UQQgECshQlKIRKFeLd643iQHF6VmldM3v2BuFmHb4p9cxk1+u+NQ+ru9en227zuH1prq7fmvX2frnvtpv+6O190dztuvW6e7r9/MdNm77o9jD+5Xm5SYcv++Vu31wp0otmtXnov3O2P/+xW6+aK9u+L0ZDtW+PQ402p6F0biiRssexRFrzg63xx7HWhM9DbxaNViVCU4nQukRoUyK0LRHalQjtS4QOJULHAqFNiYloSkxEA5uIQQ3Qgb5CwyYiBw2biBw0bCJy0LCJyEHDJiIHDZuIHDRsIjLQFjUR3Wms+31ogkZNRBYaNRFZaNREZKFRE5GFRk1EFho1EVlo1ERkoVETkYVGTUQO2pWYiK7ERHQlJqIrMREdRiImEoyYSyQY2ZVIMAIpkWCkTCLBiI6exGPkQSLBMPlEguHciQTDjhMJjMd6GI/1MB7rYTzWw3ish/HYAOOxAcZjA4zHBhiPDTAeG2A8NsB4bIDx2ADjsQHGYyOMx0YYj40wHhthPDbO+i/WfpA494VEtXP+erwZxpK3fz/4wK1BuZULZmDwLY24TaHctlBuVyh3ROX2cbglSQXl+MHeDW/s3egSVqjWc5HE6Abe6EfuqmBdajqJsIY2nURY77tEYh89wzurNsSRSFijnFKkr0FkqEGkiHzMiKS2BpGqBpEiuk5OpIi2kxNpahBZQ+OhGhoP1dB4qIbGQzU0Hl1D49EFNp4Dd4El5sBdYC85cJtCuWHbQ9QnhmjG3LCFIMN9PuN9OP2O3Gfuwynh8lPixaf8YS8we4q6/BQRHzvYqXJToBOcmWSlYSUymrFEEUWVlyiipvISRZRUVqIVUVF5iSKm5Ng1HSt/8dHKX3ycdRvq/5MYhjeOUY8kipiK4yWKmIjjJcpoNx/X4hmJMtoNazcy2g0n0cloN6xE+e3GyW83Tn67mXVL8TdJlNFuWIky2g0rUVq7OSNRfrvx8qN/1q3MmgZq0tqOUAwOisVBmdMstdInFPq3Jd1Z9z5PyR1Qufu5nYFB+dH2iFn3VU/IPesu7Cm5VaHcBMsd3MBA7ei6nHXv80XchoYnXfbfjv++Yf07ww3r3xluWP/OcMP6N88dYf07ww3r3xluWP+25pQ71qsRty6U2xTKDZuXGW7YvMxww+Zlhhs2LzPcsHlp4weD+rooSC1sXma4YfMyw42blzw3bl7y3Lh5yXPj5iXPjZuXLLeC9UH9cWu5tsQP5u5RJgV7CV8ikVs+IAV7tU8nEdYYppMI6yGXSOQn9knBFvQpRcK2+SlFwlb/CUWSiHzMiYT9UDGlSNhPIFOKFNF1ciJNDSJF9J2cyBoaD9XQeKiGxkM1NB5dQ+PRNTQejdt43GnbvA5qxI1bYnhuUyg3btXguXHbA8+NWwh4btyM57nLvKeHTJn39JAp854eMrB5meHGyJ0DiojPOuxykhHxSYd7zAZZEe2YlyhiNpCXKGPdk5WI27gnkyh/3dOKmAXkJYrIRV6ijFxkHpZCVsT8HyvRiZj94yXKaDfMI2/IyWg3nN04+Xd1zfqYjW+SKL/dOPntxslvN05Gu2Elymg3nEQvo92wEqW1mzMS5bebeR/CMr/E9/7ox3LXLe/Wq5f+jPTi6+Z+3203x8P9z+fhlbtdt153T7fPu+396uF1t7pdb+/Ta017/HJNwS1062/Sf1CaDr1fUKB0mC4HrdSiF9n/1P4n/wI=",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
