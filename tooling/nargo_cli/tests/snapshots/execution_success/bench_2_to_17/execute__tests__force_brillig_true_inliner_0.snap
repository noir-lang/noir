---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VazY7jRBBux3ESO8nECzdOPII9cTbDLRKzg4TEhTfwZnckOHLghuQjFx4DiQtISNx4Bw68BRISB7SXPe10tkv+/LniZJTu1W5Lo/6p6vqqq6uq252JTFsiV4+pbxSenauLy0rpUVahKjpUhGfuGqnrj4Aee1xsSrg+5d8U1U2qrM+j/uvUyQxpH5EZQH4xdXK+aFr5vBZblq6PPiRzZg9/C9O2n7h2SnNC7G1A2xcfK/qPYG22fN74xy7X15XIvw0gv3B+a8uzMPILkX8XRn45d772i5O3NF1/FUzZK9vGJO5xrzYR4RnTjVdD+JkJGtNlRHiiD9tnRPZJwtinikg+6pMo9pG9nCg0kSV5KwFZyJ/AGpEf2zIfxz51da7IjKg9Mf314JjY14594tqcE23Zubq4sCxNf985BkLs8UOpzo0Bwc9MuJgsIAY0nxsre6T5nMz16QvvShbvty07Vz/KkA/xy2NLRSfGxXjzuK9n51rBzxQbhfCzKelzbM/EdjNF11yhsW/MFJyZgvMhyRIfXZq+z0ZHasHhMcYZOl/GHnEwj00IZ+IRB2XJ3U1wph5wJH5nxLNzdXFhyU0/P8wIOw2DXYqdRqZvQ2vXLwHX/mWuj3cMnCt3/4T4vzWtzK9ce0Xz2QaSl2xBXxopdkqI/2tXp6SH51xXfARyDWEF/harl4SHRWhzwOacsgAa54El0Dh2r4CG+8Ulpj7awu7bbyCX+aRoPpIQLVbWIbRMWYeWB4dyV0w0PDczoqE9MGY5t2rfHvJdqK2Z87LMSxRePoekr61JiyHh/8bVod8UtBgSrDnoJL5szPC3m/AvFP65gqH5yoJoOG96BAfti/xsX+H/ztViX4y50PZdDqxvMrA+tqMtt42+vp9cbeV9P4DH8azlpZU5npeEdiwvRY5HdIxJlrYG4f/B1XYP/3VtmRc3LYasR2J+DDSf35RWj/9AD9T1oH/TXXcOtFjh55h5ovDnwCNrz4mf4wf7KAttfke6ig0nCj/fPZD/R1db2yRRVz/M8SvSHeN1QbRzc/wV6Pyza6em7+MefWDP5zcW7fzmcx/jhM/9FdD43Ec/eOy5L7Z47LnvI09MCe99iVvZB1s4bjFGY4Wf4/ZUnD9r3ta56e8l+zfGzBXRzokZW+4ID/1F9gFjZihnjBS5/N2Cc/G7JeS+bm+KQnxWfErOFy5joCP/r66PuVPq8QV63m/r8n5d39eb+sWLal/zHcCY7h1L+90A3xzEf6xtfwdZuO94tuLc26alI/9fppX5h2uvTN8H+Z6mvUcGfmMrZK1yl8O7EGKKbiPixzbaQsb+dLXtz6J2DsfVOW+fiaJPavq285nf+A1PMBA7DYN99vun4Gemvzch3j9T0ofjgt+XAr1RVHy/Qn2090h7p7sy/T1D/USW9sanxXBENPZDpCGmyM9JDsoXmvYulBMGYmtnmmDPT+gqumi/uWnxx7+p/e1qS/+H1o94fM5rb8paLhjyQe2deWX6uSwl2tBbdzaAo+ml+WI2oBf6BM5l7FNr4PPhGAbeiw86Ni0Nc6ot46Yrc+fGi8vKRrsz4toTwMX7mDH6dzrvwVLhxzs1x5f2LabFJcce4s6JhvHEv/locYnxMnQ+Yp7lO6MWn3iv8X0X22+ePt9Xm7p4Wdru9am7mNzbJw2sq+nOmbq+3EOYX+QlxP8/rPeVae1y4G36eJZvHB3ni47UBxnK2LjpjqVNnz9u+vyCnTV9HYU2BxrGhi0L10d7oSzRIyH+yAmQPZnBHJmfK/gzwu/orYxhjLCsWBnD/6N4LfJcjWv3fa85YJJ8HGPdxHfmxn9cPYTUdl9vy/KzqnxZlZtTceUbv96ub/bX1X77fLOu109PfmO9AZC/haxFKwAA",
  "debug_symbols": "tZfRbhoxEEX/ZZ95sGfssZ1fqaKIJJsICQEiUKmK+PfOML5LUmlRtVVfcg8sPtjeiwmfw+v4fH5/2uze9h/Dw4/P4fm42W4370/b/cv6tNnv9NnPIdgfpuEhrQZmj+SRPcSjeFSPdo0UPKKHW5JbklqyRvYQj+JRPdo1cvCIHuTBHm7JbsluyW7JamGNdg0JHtGDPNgjeWQP8SgebhG3FLcUHSAa+pKqoS9pGu0aNXhED32jGDS5Z+qZe0rP0rP2bJ4t9Iw9u691X+u+1n2t+1r3NfNFzeYZgwnJIAIIwIAEMBsbFEAFmFB3OUYTikEEEIABCWDTLAbmqQatAwVABBCAAQlgnmYggAKogNaBAyAC1EzBgAEJkAECKIAKaB2s2WS7at12YEACZIAACqACWgfrugPMGWZrPNlNsc47ZIAACqACWgfB9gq2V7C9gu21D0DUz2a0YpPdZSsz2TNWZwcCMCABMkAABVABNh+rjRXbIQIIwIAEyAABFEAFdDOFAIgAAjAgAcRXStZw0oqS9dmhL5kiARiQADaxYiCAArCJVYPWwRruADPBTDATzJQBAiiACmgdOABgvhY7XS6rAcf50+k4jnaafznf9dQ/rI/j7jQ87M7b7Wr4ud6ery/6OKx31zytj3pVyz7uXjVV+LbZjkaX1W10mB8abXuvg7Vf0/D8fXycH88Fb544TePp+3iaH6+7nbtAt5nnDDxvyKl0QU51wXiZJiDz7393Bfm2ApElhpKwiVTy7C6W/2mIUhOKUAItMZSGG6HnkSwxNJ7K2NKs4V6bS52mIHNtvncnmLAGLWNeci858mSg2TXYOT67iDDdTP1Cb4sU+jUERSy0TFEFCgrLZpHsq9EViZbNIqdpIbnEZYp2O+IiL1LwrZicly2EZaom17ig20XQiiJpwfgmWEMriz5bf1fLezMgHJQtLVpBxQRa43/bgT/GP+qj9cvm+O3X1cVMx836eTv2h2/n3cuXq6dfB1zBr7PDcf8yvp6Po5luP9H0zw/itiIJj/bfuT7UA3cVC9vDaFcl6lV+vNhkfgM=",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
