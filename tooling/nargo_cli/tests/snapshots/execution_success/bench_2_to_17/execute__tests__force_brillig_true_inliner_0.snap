---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VavY7kRBBuj8cz9vzszEJGxCPYO56bJVuJvUVCIuENfHO3EoQEZEgOSXgMJBKQkIh5BALeAgmJAJEQsb1Unb/5XOOd1Xaf7lpaddtVXV91dVV1tWcT17VE+jE9O4PnSvryaa0KKKs0FR1qyjOXQSHPI6CnARdbEG5I+ZdlfVkY6wuo/6YQmTHtozIjyC+nIueTtpPPa/FtKc/oQzonv/tbuG58LuOC5sTY24i2L9839B/B2nz7uA2PXW0uapV/HUF+KX7r2/M48kuVfxNHfjUXX/tB5C3dob8qpu6VH2MSD7hX24TwnDuMV0f4Mxc1pquE8FQfts+I7JPFsU+dkHzUJzPso3s5MWgqS/NWBrKQP4M1Ij+OdT6++1D6tSEzofHE9deD79S+/t0HMuac6NuV9OUT29L1951jIMYe37X61BhQ/JmLF5MlxIDlc2Njjyyf07khfeFNyeL99u1K+kcZ8i5++d3S0IlxMd4C7uvJuVbxZ4aNYvjZlPQ5tmdqu9zQdW3Q2DdyAyc3cN4lWeqjS9f32eRIrzj8jnGGzpdxQBzMYxPCmQTEQVlauynONACOxm9OPFfSl09sa9fPDzlhF3GwK7XTyPVt6O36KeD6v5k8Y42Bc7X2z4j/S9fJ/EzGK5rPNtC85Bv60siwU0b8n0tfkB6Bc135Hsh1hBX5LtYsCQ+b0uaAzTllATTOA0ugceyeAQ33i1tKz2gLv28/gVzm02b5SEa01FiH0mbGOqw8OJS7UqLhuTkjGtoDY5Zzq3X30HuhtWbOyzovM3j5HNJna01WDCn/F9LH/qZgxZBizUEn9WXnhu9uyr8w+OcGhuUrC6LhvOkRHLQv8rN9lf8r6dW+GHOx7bscWN9kYH1sR9+uW3t930nv5X09gMfxbOWllTuel5R2LC8lwqM6piTLWoPyfyO938M/Zazz0rbD0PVozI+BFvJO6fX4C/RAXe/1bw/XvQZaavBzzJwb/Gvg0bWviZ/jB59RFtr8hnRVG04Mfq49kP9b6b1tsuRQP8zxK9Id43VBtFNz/Bno/L2MC9f38YA+sOfzG5t1fvO5j3HC5/4KaHzuox889txXWzz23A+RJ6aE97bEre6Dbxy3GKOpwc9x+1CcP2//79euv5fs3xgzZ0Q7JWZ8uyE89BfdB4yZoZwxMuTyvQXn4r0l5r7uLstSfVZ9Ss8XbmOgI/+P8oy5U/vxE/S83TXV7aa5bbbNy5f1vuEawLnDGsv63QC/Oaj/eNv+DLJw3/FsxbnXbUdH/t9cJ/MXGa9c3wcTovF3K6Shn3FOwPs7135Yq/PdO9bdkc89rK8QE39v5pyIdRifi79K79eTJ90clOkAE98NfZsqyD5FHPvUfIdVDMRexME++Zuq4s9c1DP/9TdV605jfVOMfKd4/fvVmaHP3NDnXHh5z1A/lYVnjPqW+iHann+LwLNgTjTcO/4OgHiaP/z8oXyTEL+V+zg3Iv/v0nv6HzK28Dj3YX7jHJYbelr5jX83tO7V+N30sfdqrtOse/WQrMkA9tLgXwxgo144l7FZT51n1Yxqm8g149aqGbE+ygD32D4i/ym2tPZx7fqxyrUfxiXHl1WjWXGZE83KAxgvXH/gOrD+4JrRik+sa0LXYvvtsxf7etuUryr/ePFQLaZ1+6SFdbWHc6byrDUD86u8jPj/hvX+4zq73PO2fTzPN06O8yVH+nsZxrtxe/iuaPv8advnV+xZ29dRaXOgYWz4tpBntBfKUj0y4k9EgO5JDnN0/trAzwn/QG/jHcYIy0qNd/h/FP+qPOlx7aFrkHtMko/vWDf1nbkLH1d3IbXbN7uq+qiuXtXV9qG4Co3f7DaX+4t6v3ux3TSbZw/esf4D3of580UrAAA=",
  "debug_symbols": "tZfRbhoxEEX/ZZ95WM/YY09+pYoikmwqJEQiCpWqiH/vDOO7JJU2qrbqS+6BxQfbezHhfXieHs/fH3aHl9cfw9239+HxuNvvd98f9q9P29Pu9WDPvg+j/2Ea7vJmYI7IESVCImpEi9Br5DEiRYQlhyWbpViUCImoES1Cr1HGiBRBERwRlhKWEpYSlmIWttBryBiRIiiCI3JEiZCIGhEWCUsNS7UBYmEvaRb2ErXQa7QxIkXYG6XRknvmnqWn9Kw9W0+N1LFn6tl92n3afdp92n3afeq+ZKmRaXQhOSQAARiQAW5jhwpoABfaLqfkQnFIAAIwIAN8mtXBPc1BO9AISAACMCAD3KMOAqiABtAOPAISwMw0OjAgAwpAABXQANrBm02+q97tAAZkQAEIoAIaQDt41wNgLjB748lvinc+oAAEUAENoB0E2yvYXsH2CrbXPwDJPpvJi01+l73M5M94nQMIwIAMKAABVEADaAeFWWH2apM3yrsdkAEFIIAKaAANIG94QAIQgAEZILFS8oaTVZS8zwEJQAAG9CVTKgABuKc6NIB28IZTc+hLJiIAA2AmmAlmqoAG6JtJPAJgvhY7Xy6bAcf5w+k4TX6afzjf7dR/2x6nw2m4O5z3+83wc7s/X1/04217uOZpe7SrVvbp8GxpwpfdfnK6bG6jx+Whybf3Otj6NQ8vn8en5fFc8eaZ8zyePo+n5fG226ULbJt5ycDLhpJrF5TcVoyXeQKy/P5frqDcViCyxlAzNpFqWdzF+j8NSVpGEepIawxVcSPsPJI1BuW5jJoXDV+1ubZ5CrLU5q/uBBPWYGUsa+4lJ54NtLgGP8cXFzHON9O+0HWVwr6GoEiV1imaQEHjullk/2oMRaZ1syh5XkipaZ1Cb0dc4lUKvhWTy7qFsMzV5JZWdLsKWlElrxivgjVoXfXZ+rtafjUDwkGpedUKGiagyv+2A3+Mv7dH26fd8dOvq4ubjrvt437qD1/Oh6cPV0+/3nAFv87ejq9P0/P5OLnp9hPN/nwj1g3JeO//ndtDO3A3qbI/TH5Vkl3l+4tP5jc=",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
