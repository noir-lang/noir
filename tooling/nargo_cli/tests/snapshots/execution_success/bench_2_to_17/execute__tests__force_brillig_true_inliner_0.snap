---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VazY7jRBBuJ3ESO/HECzdOPII9cTbDLRKzg4TEhTfwZnckOHLghuQjFx4DiQtISNx4Bw68BRISB8SF005nu9afP1ecjNK9q21p1O6u6vqqq6uqfzKRaUvk6gm1jcKzc3VxWSk9yipURYeK8CzcR+LaI6CPPU42IVyf8m+K6iZR5udR/3XiZIa0j8gMIL+YOTmfNa18nostmWujD8mY+cPf0rTfT9x3QmNCrG1A2xcfKvqPYG62fNr4xy7X15XIvw0gv3B+a8uzMPILkX8XRn65cL72k5OXma6/Cqaslf3GJO5xrTYR4RnTjVdD+KkJGtNlRHiiD9tnRPaJw9inikg+6hMr9pG1nCo0kSV5KwZZyB/DHJEfv2U89n3s6lyRGdH31PTng31iX9v3kfvmnGjLztXFhSUz/XXnGAixxg+lOjcGBD814WKygBjQfG6irJHmczLWpy+8LVm83rbsXP0oQz7EL/dlik6Mi/HmcV3PzrWCnyo2CuFnM9Ln2JqJ7eaKrrlCY9+YKzhzBed9kiU+mpm+z0ZHasHhPsYZ2l8mHnEwj00JZ+oRB2XJ2U1wZh5wJH7nxLNzdXFhyU0/P8wJOwmDXYqdRqZvQ2vXzwHX/qWujWcMHCtn/5j4vzatzC/c94rGsw0kL9mCvjRS7BQT/5euTkgPz7mu+ADkGsIKfBerM8LDIrQFYHNOWQKN80AGNI7dK6DhenEZUxttYdftF5DLfFI0H4mJNlbmIbRUmYeWB4dy15houG+mREN7YMxybtXuHnIv1ObMeVnGxQov70PS1uakxZDwf+Xq0G8KWgwJ1gJ0El82ZvjuJvxLhX+hYGi+siQajpsdwUH7Ij/bV/i/cbXYF2MutH2zgflNB+bHdrTlttHn94Orrbxvz8BbmX5e4lhHG3GsH8tLkeMRHc+Zg/B/52q7hn+7b9Fh3LQYorPE/ARoPu+UVo9/QA/U9aB/0513DrSxws8x80Thz4FHbJYTP8cPtlEW2vyOdBUbTo0er3j2QP7vXW1tE0dd/TDHr0h3jNeMaOfm+CvQ+Uf3nSi6e/SBPe/fWLT9m/d9jBPe91dA430f/eCx+77Y4rH7vnZ+0fIE54JM0VWLW5H/LuJW1sEWjluM0bHCz3F7Ks6fNa/r3PTXkv0bY+aKaBgzS6LhPeyO8NBfZB0wZoZyxkiRy/cWHIv3lpDrur0pCvFZ8SnZX7hMgI78P7s25k6pJxfoeb+ty/t1fV9v6hcvqn3NZwBjumcs7XcDfHMQ/7G2/RVk4brj3opjb5uWjvx/mFbmb+57Zfo+yOc07T0y8BtbIXOVsxyehRBTdBsRP36jLaTvd1fb9jxqx3BcnfP2GSv6JKZvO5/5jd/wBAOxkzDYZ79/Cn5q+msT4v0zIX04Lvh9KdAbxZvfmrT7k/Yeac90V6a/ZqifyNLe+LQYjojGfog0xBT5OclB+ULT3oVywkBsbU8T7MUJXUUX7Tc3Lf74N7U/XW3pf9H8EY/3ee1NWcsFQz6ovTOvTD+XJUQbeutOB3A0vTRfTAf0Qp/AsYx9ag68PxzDwHPxQcempWFOtWXSdGXuXH9xWdloZ0acewy4eB4zRr9v8RpkCr92986JH22uxSXHHuLy/RHjiX/z0eIS42Vof8Q8y2dGLT7xXOP7LLbfPH2+rzZ18bK0zetTZzE5t08bmFfTHTNzbTmHML/Ii4n/X5jvf6a1y4G36eNZvkl0nC86Uh9kKH2TptuXNH3+cdPnF+y06esotAXQMDZsWbo22gtliR4x8UdOgKzJHMbI+FzBnxN+R2+lD2OEZY2VPvw/iv9Fnqtx7r7PNQdMko99rJv4zsL4j6uHkNru621ZflKVL6tycyqufOPX2/XN/rrab59v1vX66ck71iubOlLdRSsAAA==",
  "debug_symbols": "tZfRbhoxEEX/ZZ95sGfssZ1fqaKIJJsICQEiUKmK+PfOML5LUmlRtVVfcg8sPtjeiwmfw+v4fH5/2uze9h/Dw4/P4fm42W4370/b/cv6tNnv9NnPIdgfpuEhrQZmj+SRPcSjeFSPdo0UPKKHW5JbklqyRvYQj+JRPdo1cvCIHuTBHm7JbsluyW7JamGNdg0JHtGDPNgjeWQP8SgebhG3FLcUHSAa+pKqoS9pGu0aNXhED32jGDS5Z+qZe0rP0rP2bJ4t9Iw9u691X+u+1n2t+1r3NfNFzeYZgwnJIAIIwIAEMBsbFEAFmFB3OUYTikEEEIABCWDTLAbmqQatAwVABBCAAQlgnmYggAKogNaBAyAC1EzBgAEJkAECKIAKaB2s2WS7at12YEACZIAACqACWgfrugPMGWZrPNlNsc47ZIAACqACWgfB9gq2V7C9gu21D0DUz2a0YpPdZSsz2TNWZwcCMCABMkAABVABNh+rjRXbIQIIwIAEyAABFEAFdDOFAIgAAjAgAcRXStZw0oqS9dmhL5kiARiQADaxYiCAArCJVYPWwRruADPBTDATzJQBAiiACmgdOABgvhY7XS6rAcf50+k4jnaafznf9dQ/rI/j7jQ87M7b7Wr4ud6ery/6OKx31zytj3pVyz7uXjVV+LbZjkaX1W10mB8abXuvg7Vf0/D8fXycH88Fb544TePp+3iaH6+7nbtAt5nnDDxvyKl0QU51wXiZJiDz7393Bfm2ApElhpKwiVTy7C6W/2mIUhOKUAItMZSGG6HnkSwxNJ7K2NKs4V6bS52mIHNtvncnmLAGLWNeci858mSg2TXYOT67iDDdTP1Cb4sU+jUERSy0TFEFCgrLZpHsq9EViZbNIqdpIbnEZYp2O+IiL1LwrZicly2EZaom17ig20XQiiJpwfgmWEMriz5bf1fLezMgHJQtLVpBxQRa43/bgT/GP+qj9cvm+O3X1cVMx836eTv2h2/n3cuXq6dfB1zBr7PDcf8yvp6Po5luP9H0zw/itiIJj/bfuT7UA3cVC9vDaFcl6lV+vNhkfgM=",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2;\n\nglobal len: u32 = 2450 * 2;\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon2::Poseidon2::hash(ped_input, len);\n    assert(val != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
