---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _176",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_6, 16)] []",
    "BLACKBOX::RANGE [(_7, 16)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(8)), Simple(Witness(9))]",
    "BLACKBOX::RANGE [(_8, 222)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "EXPR [ (1, _5) (-4294967296, _8) (-1, _9) 0 ]",
    "EXPR [ (-1, _8) (-1, _10) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_10, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(11))]",
    "EXPR [ (-1, _8, _11) (5096253676302562286669017222071363378443840053029366383258766538131, _11) (1, _12) -1 ]",
    "EXPR [ (-1, _8, _12) (5096253676302562286669017222071363378443840053029366383258766538131, _12) 0 ]",
    "EXPR [ (1, _9, _12) (1, _12, _12) (268435454, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967301 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _14) (-1, _15) 4294967301 ]",
    "EXPR [ (-1, _14) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(16)), Simple(Witness(17))]",
    "BLACKBOX::RANGE [(_16, 4)] []",
    "BLACKBOX::RANGE [(_17, 4)] []",
    "EXPR [ (1, _0) (-16, _16) (-1, _17) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Simple(Witness(18)), Simple(Witness(19))]",
    "BLACKBOX::RANGE [(_18, 7)] []",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "EXPR [ (1, _16) (-2, _18) (-1, _19) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(20)), Simple(Witness(21))]",
    "BLACKBOX::RANGE [(_20, 4)] []",
    "BLACKBOX::RANGE [(_21, 4)] []",
    "EXPR [ (1, _0) (-16, _20) (-1, _21) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _22) (-1, _23) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _22, _19) (1, _19) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(24)), Simple(Witness(25))]",
    "BLACKBOX::RANGE [(_24, 4)] []",
    "BLACKBOX::RANGE [(_25, 5)] []",
    "EXPR [ (-1, _19, _22) (1, _19) (1, _25) (-1, _26) 15 ]",
    "BLACKBOX::RANGE [(_26, 5)] []",
    "EXPR [ (16, _24) (1, _25) (-1, _27) 0 ]",
    "EXPR [ (-1, _19, _22) (1, _19) (-1, _28) 0 ]",
    "EXPR [ (1, _1, _28) (-1, _27, _28) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(29)), Simple(Witness(30))]",
    "BLACKBOX::RANGE [(_29, 4)] []",
    "BLACKBOX::RANGE [(_30, 4)] []",
    "EXPR [ (1, _1) (-16, _29) (-1, _30) 0 ]",
    "EXPR [ (-1, _28) (-1, _31) 1 ]",
    "EXPR [ (1, _19, _21) (-1, _32) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(33)), Simple(Witness(34))]",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _33) (-1, _34) 4294967298 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _33, _19) (1, _19) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(35)), Simple(Witness(36))]",
    "BLACKBOX::RANGE [(_35, 4)] []",
    "BLACKBOX::RANGE [(_36, 5)] []",
    "EXPR [ (-1, _19, _33) (1, _19) (1, _36) (-1, _37) 15 ]",
    "BLACKBOX::RANGE [(_37, 5)] []",
    "EXPR [ (16, _35) (1, _36) (-1, _38) 0 ]",
    "EXPR [ (-1, _19, _33) (1, _19) (-1, _39) 0 ]",
    "EXPR [ (1, _2, _39) (-1, _38, _39) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(40)), Simple(Witness(41))]",
    "BLACKBOX::RANGE [(_40, 4)] []",
    "BLACKBOX::RANGE [(_41, 4)] []",
    "EXPR [ (1, _2) (-16, _40) (-1, _41) 0 ]",
    "EXPR [ (-1, _9, _19) (1, _9) (1, _19) (-1, _42) -1 ]",
    "BLACKBOX::RANGE [(_42, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(42))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(43)), Simple(Witness(44))]",
    "BLACKBOX::RANGE [(_43, 1)] []",
    "BLACKBOX::RANGE [(_44, 32)] []",
    "EXPR [ (-1, _42) (-4294967296, _43) (-1, _44) 4294967296 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _19, _43) (-1, _19) (-1, _43) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(45)), Simple(Witness(46))]",
    "BLACKBOX::RANGE [(_45, 4)] []",
    "BLACKBOX::RANGE [(_46, 5)] []",
    "EXPR [ (1, _19, _43) (-1, _19) (-1, _43) (1, _46) (-1, _47) 16 ]",
    "BLACKBOX::RANGE [(_47, 5)] []",
    "EXPR [ (16, _45) (1, _46) (-1, _48) 0 ]",
    "EXPR [ (1, _19, _43) (-1, _19) (-1, _43) (-1, _49) 1 ]",
    "EXPR [ (1, _1, _49) (-1, _48, _49) 0 ]",
    "EXPR [ (-1, _49) (-1, _50) 1 ]",
    "EXPR [ (1, _21, _28) (1, _31, _32) (-1, _51) 0 ]",
    "EXPR [ (1, _24, _28) (-1, _52) 0 ]",
    "EXPR [ (1, _28, _30) (-1, _53) 0 ]",
    "EXPR [ (1, _35, _39) (-1, _54) 0 ]",
    "EXPR [ (1, _39, _41) (-1, _55) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(42))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(56)), Simple(Witness(57))]",
    "BLACKBOX::RANGE [(_56, 1)] []",
    "BLACKBOX::RANGE [(_57, 32)] []",
    "EXPR [ (-1, _42) (-4294967296, _56) (-1, _57) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _19, _56) (-1, _19) (-1, _56) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(58)), Simple(Witness(59))]",
    "BLACKBOX::RANGE [(_58, 4)] []",
    "BLACKBOX::RANGE [(_59, 5)] []",
    "EXPR [ (1, _19, _56) (-1, _19) (-1, _56) (1, _59) (-1, _60) 16 ]",
    "BLACKBOX::RANGE [(_60, 5)] []",
    "EXPR [ (16, _58) (1, _59) (-1, _61) 0 ]",
    "EXPR [ (1, _19, _56) (-1, _19) (-1, _56) (-1, _62) 1 ]",
    "EXPR [ (1, _2, _62) (-1, _61, _62) 0 ]",
    "EXPR [ (-1, _62) (-1, _63) 1 ]",
    "EXPR [ (1, _50, _53) (-1, _64) 0 ]",
    "EXPR [ (1, _50, _54) (-1, _65) 0 ]",
    "EXPR [ (2, _5) (1, _19) -7 ]",
    "EXPR [ (1, _45, _49) (1, _50, _51) -15 ]",
    "EXPR [ (1, _30, _49) (1, _50, _52) -1 ]",
    "EXPR [ (1, _58, _62) (1, _63, _64) -12 ]",
    "EXPR [ (1, _41, _62) (1, _63, _65) -11 ]",
    "EXPR [ (1, _50, _55) -8 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(66)), Simple(Witness(67))]",
    "BLACKBOX::RANGE [(_66, 1)] []",
    "BLACKBOX::RANGE [(_67, 15)] []",
    "EXPR [ (1, _6) (-32768, _66) (-1, _67) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(66))], linear_combinations: [(1, Witness(6)), (65536, Witness(66))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 13 })], outputs: [Simple(Witness(68)), Simple(Witness(69))]",
    "BLACKBOX::RANGE [(_68, 12)] []",
    "BLACKBOX::RANGE [(_69, 4)] []",
    "EXPR [ (1, _69) (-1, _70) 3 ]",
    "BLACKBOX::RANGE [(_70, 4)] []",
    "EXPR [ (-2, _6, _66) (1, _6) (65536, _66) (-13, _68) (-1, _69) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 })], outputs: [Simple(Witness(71))]",
    "EXPR [ (1, _68, _71) (1, _72) -1 ]",
    "EXPR [ (1, _68, _72) 0 ]",
    "EXPR [ (2, _66, _68) (-65536, _66) (-1, _68) (-1, _73) 65536 ]",
    "EXPR [ (-1, _72) (-1, _74) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 })], outputs: [Simple(Witness(75))]",
    "EXPR [ (1, _69, _75) (1, _76) -1 ]",
    "EXPR [ (1, _69, _76) 0 ]",
    "EXPR [ (-2, _66, _69) (65536, _66) (1, _69) (-1, _77) 0 ]",
    "EXPR [ (-1, _76) (-1, _78) 1 ]",
    "EXPR [ (1, _77, _78) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(79)), Simple(Witness(80))]",
    "BLACKBOX::RANGE [(_79, 1)] []",
    "BLACKBOX::RANGE [(_80, 15)] []",
    "EXPR [ (1, _7) (-32768, _79) (-1, _80) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(81)), Simple(Witness(82))]",
    "BLACKBOX::RANGE [(_81, 1)] []",
    "BLACKBOX::RANGE [(_82, 15)] []",
    "EXPR [ (1, _6) (-32768, _81) (-1, _82) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(7), Witness(79))], linear_combinations: [(1, Witness(7)), (65536, Witness(79))], q_c: 0 })], outputs: [Simple(Witness(83))]",
    "EXPR [ (-2, _7, _79) (1, _7) (65536, _79) (-1, _84) 0 ]",
    "EXPR [ (1, _83, _84) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(81))], linear_combinations: [(1, Witness(6)), (65536, Witness(81))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(84))], q_c: 0 })], outputs: [Simple(Witness(85)), Simple(Witness(86))]",
    "BLACKBOX::RANGE [(_85, 15)] []",
    "BLACKBOX::RANGE [(_86, 15)] []",
    "EXPR [ (1, _84) (-1, _86) (-1, _87) -1 ]",
    "BLACKBOX::RANGE [(_87, 15)] []",
    "EXPR [ (-2, _6, _81) (-1, _84, _85) (1, _6) (65536, _81) (-1, _86) 0 ]",
    "EXPR [ (-1, _85) (-1, _88) 32768 ]",
    "EXPR [ (-2, _79, _81) (1, _79) (1, _81) (-1, _89) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: 0 })], outputs: [Simple(Witness(90))]",
    "EXPR [ (1, _85, _90) (1, _91) -1 ]",
    "EXPR [ (1, _85, _91) 0 ]",
    "EXPR [ (2, _88, _89) (1, _85) (-1, _92) 0 ]",
    "EXPR [ (-1, _91) (-1, _93) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 })], outputs: [Simple(Witness(94))]",
    "EXPR [ (1, _86, _94) (1, _95) -1 ]",
    "EXPR [ (1, _86, _95) 0 ]",
    "EXPR [ (-2, _81, _86) (65536, _81) (1, _86) (-1, _96) 0 ]",
    "EXPR [ (-1, _95) (-1, _97) 1 ]",
    "EXPR [ (1, _96, _97) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(98)), Simple(Witness(99))]",
    "BLACKBOX::RANGE [(_98, 1)] []",
    "BLACKBOX::RANGE [(_99, 15)] []",
    "EXPR [ (1, _6) (-32768, _98) (-1, _99) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(98))], linear_combinations: [(1, Witness(6)), (65536, Witness(98))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 11 })], outputs: [Simple(Witness(100)), Simple(Witness(101))]",
    "BLACKBOX::RANGE [(_100, 12)] []",
    "BLACKBOX::RANGE [(_101, 4)] []",
    "EXPR [ (1, _101) (-1, _102) 5 ]",
    "BLACKBOX::RANGE [(_102, 4)] []",
    "EXPR [ (-2, _6, _98) (1, _6) (65536, _98) (-11, _100) (-1, _101) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(100))], q_c: 0 })], outputs: [Simple(Witness(103))]",
    "EXPR [ (1, _100, _103) (1, _104) -1 ]",
    "EXPR [ (1, _100, _104) 0 ]",
    "EXPR [ (2, _98, _100) (-65536, _98) (-1, _100) (-1, _105) 65536 ]",
    "EXPR [ (-1, _104) (-1, _106) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(101))], q_c: 0 })], outputs: [Simple(Witness(107))]",
    "EXPR [ (1, _101, _107) (1, _108) -1 ]",
    "EXPR [ (1, _101, _108) 0 ]",
    "EXPR [ (-2, _98, _101) (65536, _98) (1, _101) (-1, _109) 0 ]",
    "EXPR [ (-1, _108) (-1, _110) 1 ]",
    "EXPR [ (1, _109, _110) -4 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(6))], q_c: 131072 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(111)), Simple(Witness(112))]",
    "BLACKBOX::RANGE [(_111, 2)] []",
    "BLACKBOX::RANGE [(_112, 16)] []",
    "EXPR [ (-1, _6) (-65536, _111) (-1, _112) 131072 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(113)), Simple(Witness(114))]",
    "BLACKBOX::RANGE [(_113, 1)] []",
    "BLACKBOX::RANGE [(_114, 16)] []",
    "EXPR [ (1, _6) (-65536, _113) (-1, _114) 32768 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(112))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(115)), Simple(Witness(116))]",
    "BLACKBOX::RANGE [(_115, 1)] []",
    "BLACKBOX::RANGE [(_116, 16)] []",
    "EXPR [ (1, _112) (-65536, _115) (-1, _116) 32768 ]",
    "EXPR [ (-1, _113, _115) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(112))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(117)), Simple(Witness(118))]",
    "BLACKBOX::RANGE [(_117, 1)] []",
    "BLACKBOX::RANGE [(_118, 15)] []",
    "EXPR [ (1, _112) (-32768, _117) (-1, _118) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(112), Witness(117))], linear_combinations: [(1, Witness(112)), (65536, Witness(117))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 11 })], outputs: [Simple(Witness(119)), Simple(Witness(120))]",
    "BLACKBOX::RANGE [(_119, 12)] []",
    "BLACKBOX::RANGE [(_120, 4)] []",
    "EXPR [ (1, _120) (-1, _121) 5 ]",
    "BLACKBOX::RANGE [(_121, 4)] []",
    "EXPR [ (-2, _112, _117) (1, _112) (65536, _117) (-11, _119) (-1, _120) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(119))], q_c: 0 })], outputs: [Simple(Witness(122))]",
    "EXPR [ (1, _119, _122) (1, _123) -1 ]",
    "EXPR [ (1, _119, _123) 0 ]",
    "EXPR [ (2, _117, _119) (-65536, _117) (-1, _119) (-1, _124) 65536 ]",
    "EXPR [ (-1, _123) (-1, _125) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(120))], q_c: 0 })], outputs: [Simple(Witness(126))]",
    "EXPR [ (1, _120, _126) (1, _127) -1 ]",
    "EXPR [ (1, _120, _127) 0 ]",
    "EXPR [ (-2, _117, _120) (65536, _117) (1, _120) (-1, _128) 0 ]",
    "EXPR [ (-1, _127) (-1, _129) 1 ]",
    "EXPR [ (1, _128, _129) -65532 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 2 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(130)), Simple(Witness(131))]",
    "BLACKBOX::RANGE [(_130, 1)] []",
    "BLACKBOX::RANGE [(_131, 16)] []",
    "EXPR [ (1, _7) (-65536, _130) (-1, _131) 2 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(132)), Simple(Witness(133))]",
    "BLACKBOX::RANGE [(_132, 1)] []",
    "BLACKBOX::RANGE [(_133, 16)] []",
    "EXPR [ (1, _7) (-65536, _132) (-1, _133) 32768 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(131))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(134)), Simple(Witness(135))]",
    "BLACKBOX::RANGE [(_134, 1)] []",
    "BLACKBOX::RANGE [(_135, 16)] []",
    "EXPR [ (1, _131) (-65536, _134) (-1, _135) 32768 ]",
    "EXPR [ (1, _132) (-1, _134) (-1, _136) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(136))], q_c: 0 })], outputs: [Simple(Witness(137))]",
    "EXPR [ (1, _136, _137) (1, _138) -1 ]",
    "EXPR [ (1, _136, _138) 0 ]",
    "EXPR [ (-1, _132, _138) (1, _132) (1, _138) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(131))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(139)), Simple(Witness(140))]",
    "BLACKBOX::RANGE [(_139, 1)] []",
    "BLACKBOX::RANGE [(_140, 15)] []",
    "EXPR [ (1, _131) (-32768, _139) (-1, _140) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(141)), Simple(Witness(142))]",
    "BLACKBOX::RANGE [(_141, 1)] []",
    "BLACKBOX::RANGE [(_142, 15)] []",
    "EXPR [ (1, _6) (-32768, _141) (-1, _142) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(131), Witness(139))], linear_combinations: [(1, Witness(131)), (65536, Witness(139))], q_c: 0 })], outputs: [Simple(Witness(143))]",
    "EXPR [ (-2, _131, _139) (1, _131) (65536, _139) (-1, _144) 0 ]",
    "EXPR [ (1, _143, _144) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(141))], linear_combinations: [(1, Witness(6)), (65536, Witness(141))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(144))], q_c: 0 })], outputs: [Simple(Witness(145)), Simple(Witness(146))]",
    "BLACKBOX::RANGE [(_145, 15)] []",
    "BLACKBOX::RANGE [(_146, 15)] []",
    "EXPR [ (1, _144) (-1, _146) (-1, _147) -1 ]",
    "BLACKBOX::RANGE [(_147, 15)] []",
    "EXPR [ (-2, _6, _141) (-1, _144, _145) (1, _6) (65536, _141) (-1, _146) 0 ]",
    "EXPR [ (-1, _145) (-1, _148) 32768 ]",
    "EXPR [ (-2, _139, _141) (1, _139) (1, _141) (-1, _149) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(145))], q_c: 0 })], outputs: [Simple(Witness(150))]",
    "EXPR [ (1, _145, _150) (1, _151) -1 ]",
    "EXPR [ (1, _145, _151) 0 ]",
    "EXPR [ (2, _148, _149) (1, _145) (-1, _152) 0 ]",
    "EXPR [ (-1, _151) (-1, _153) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: 0 })], outputs: [Simple(Witness(154))]",
    "EXPR [ (1, _146, _154) (1, _155) -1 ]",
    "EXPR [ (1, _146, _155) 0 ]",
    "EXPR [ (-2, _141, _146) (65536, _141) (1, _146) (-1, _156) 0 ]",
    "EXPR [ (-1, _155) (-1, _157) 1 ]",
    "EXPR [ (-1, _156, _157) 4 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(131))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(158)), Simple(Witness(159))]",
    "BLACKBOX::RANGE [(_158, 1)] []",
    "BLACKBOX::RANGE [(_159, 15)] []",
    "EXPR [ (1, _131) (-32768, _158) (-1, _159) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(112))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(160)), Simple(Witness(161))]",
    "BLACKBOX::RANGE [(_160, 1)] []",
    "BLACKBOX::RANGE [(_161, 15)] []",
    "EXPR [ (1, _112) (-32768, _160) (-1, _161) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(131), Witness(158))], linear_combinations: [(1, Witness(131)), (65536, Witness(158))], q_c: 0 })], outputs: [Simple(Witness(162))]",
    "EXPR [ (-2, _131, _158) (1, _131) (65536, _158) (-1, _163) 0 ]",
    "EXPR [ (1, _162, _163) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(112), Witness(160))], linear_combinations: [(1, Witness(112)), (65536, Witness(160))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(163))], q_c: 0 })], outputs: [Simple(Witness(164)), Simple(Witness(165))]",
    "BLACKBOX::RANGE [(_164, 15)] []",
    "BLACKBOX::RANGE [(_165, 15)] []",
    "EXPR [ (1, _163) (-1, _165) (-1, _166) -1 ]",
    "BLACKBOX::RANGE [(_166, 15)] []",
    "EXPR [ (-2, _112, _160) (-1, _163, _164) (1, _112) (65536, _160) (-1, _165) 0 ]",
    "EXPR [ (-1, _164) (-1, _167) 32768 ]",
    "EXPR [ (-2, _158, _160) (1, _158) (1, _160) (-1, _168) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 0 })], outputs: [Simple(Witness(169))]",
    "EXPR [ (1, _164, _169) (1, _170) -1 ]",
    "EXPR [ (1, _164, _170) 0 ]",
    "EXPR [ (2, _167, _168) (1, _164) (-1, _171) 0 ]",
    "EXPR [ (-1, _170) (-1, _172) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 0 })], outputs: [Simple(Witness(173))]",
    "EXPR [ (1, _165, _173) (1, _174) -1 ]",
    "EXPR [ (1, _165, _174) 0 ]",
    "EXPR [ (-2, _160, _165) (65536, _160) (1, _165) (-1, _175) 0 ]",
    "EXPR [ (-1, _174) (-1, _176) 1 ]",
    "EXPR [ (-1, _175, _176) 65532 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZjBbhs7DEX/xessRhQpiv2Vh4fASZzCgOEEblygCPrvFYe8k2aRLuSN77EdHlNjcWbi993T4eH6/f54fn75sfv23/vu4XI8nY7f708vj/u348t5vPr++26Hp/dvl8NhvLT76/1R9bq/HM5vu2/n6+l0t/u5P13XP/rxuj+v+ba/jHeXu93h/DRyCJ+Pp4PT77uP6uXrUqKlZTURtU0gnw3lawOzpICl31avdaJeWs160XJj/cz6xXAAGy0T9U23epvpvwmhvs3UK2P92nSm3jjr+0IT9X3rv0/tH1uwf6zM7J+uis+3me+vLFsDZaGZI2BGtwlKWbCGUqYOwqjaeihsU4bGm0GnVkFkMFCd6oG2vVxoajN96kHsVkP78rv45ym52nZKZp0yKC4JxItNGOooS0Pl0m41UJkyVNkMvNxskCmDfKyitVsNOncc+scqut5qsHqzYWpHyTYXVSrPGfjDMPVtSqm3GlrZDDp1JIXtK8P/49n+8Xj5dJO40zHFd7u+Ptr6WJaIEkERNYIjJKJFhKMMyTgAxdagJaJEDMv4iqlGcIREDMu4SSGN6BG2Rh2WcfGpJYIiasSwjMVWiWgRGtH9QjHSInnJLJmUWTM5UzKbn2BHambPtEiJviT6Elo/VGpE9CXRl7QwimZmZ5KdteysZWctO2vZWeP4xCaZ2VnLzpr7xs5tFqnuG0dVSyZl1kz3jSOrktkyNbNnWmRfMksmZdZM9/WR2V/P9fbsr/f43G6Rlv1Z9mfps/RZ9mfZn2V/lv1Z9mfZ37hBAhQARUtl8U3rW3LxbcsOAmgABXSAj4H4ACyAAiBABTBAAA2ggA6AmWAmmAlmgplgJpgJZoKZYPZxIV+7DwypQwEQoAIYIIAGUEAHWALDzDAzzAwzw8wwM8wMM8PMMAvMArPALDALzAKzwCwwC8w+W+QbwIfLLwzFpyuAABXAAAE0gAI6wBIUZoVZYVaYFWaFWWFWmBVmhdkHri4OfuosDgSoAAYIoAEU0AGW4KMXALPBbDD7+PnNevH5C2gABXSABZDPYEABEKACGCCABlBAB8BcYC4wF5gLzD6Ddb3WuJkdGkABHWAJ6wVqhQIgQAUwAGaCmWAmmAnmCnOF2Wewrte/CmCAABpAAR1gCT6DAQUAM8PMMDPMDDPDzDAzzAKzwCwwC8wCs8AsMAvMArPA3GD2Gax+afcZrOpQAQwQQAMooAMswWcwoABgVpgVZoVZYVaYFWaFucPcYe4wd5g7zB3mDnOHucPcYTaY1xn0fyJ/7i/H/cPpkD/ZPV/Pj3/9gvf26xXv4De+18vL4+Hpejn4jdz63ri1+wM=",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
