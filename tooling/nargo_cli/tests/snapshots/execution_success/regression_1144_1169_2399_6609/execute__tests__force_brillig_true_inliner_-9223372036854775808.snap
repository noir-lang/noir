---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _7",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }]), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32856 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 8 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32848), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32848), source: Direct(32848), bit_size: Integer(U8) }, Cast { destination: Direct(32849), source: Direct(32849), bit_size: Integer(U8) }, Cast { destination: Direct(32850), source: Direct(32850), bit_size: Integer(U8) }, Cast { destination: Direct(32851), source: Direct(32851), bit_size: Integer(U8) }, Cast { destination: Direct(32852), source: Direct(32852), bit_size: Integer(U8) }, Cast { destination: Direct(32854), source: Direct(32854), bit_size: Integer(U16) }, Cast { destination: Direct(32855), source: Direct(32855), bit_size: Integer(U16) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32848 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 5 }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(7) }, Mov { destination: Direct(32773), source: Relative(6) }, Call { location: 33 }, Mov { destination: Relative(1), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32853) }, Mov { destination: Relative(3), source: Direct(32854) }, Mov { destination: Relative(4), source: Direct(32855) }, Call { location: 44 }, Call { location: 58 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32856 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 43 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 36 }, Return, Const { destination: Direct(32835), bit_size: Integer(U32), value: 16 }, Const { destination: Direct(32836), bit_size: Integer(U1), value: 0 }, Const { destination: Direct(32837), bit_size: Integer(U8), value: 0 }, Const { destination: Direct(32838), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(32839), bit_size: Integer(U1), value: 1 }, Const { destination: Direct(32840), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(32841), bit_size: Integer(U64), value: 1 }, Const { destination: Direct(32842), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(32843), bit_size: Integer(U8), value: 4 }, Const { destination: Direct(32844), bit_size: Integer(U32), value: 5 }, Const { destination: Direct(32845), bit_size: Integer(U64), value: 16 }, Const { destination: Direct(32846), bit_size: Integer(U32), value: 32 }, Const { destination: Direct(32847), bit_size: Integer(U8), value: 128 }, Return, Call { location: 585 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, Mov { destination: Relative(8), source: Direct(0) }, Mov { destination: Relative(9), source: Relative(1) }, Mov { destination: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(7) }, Call { location: 591 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(5), source: Relative(9) }, Mov { destination: Relative(6), source: Relative(10) }, Const { destination: Relative(1), bit_size: Field, value: 5 }, BinaryFieldOp { destination: Relative(2), op: Equals, lhs: Relative(6), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 73 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32840) }, Load { destination: Relative(1), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32842) }, Load { destination: Relative(2), source_pointer: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(6) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(6) }, Load { destination: Relative(8), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32844) }, Load { destination: Relative(6), source_pointer: Relative(9) }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(9) }, Store { destination_pointer: Relative(10), source: Relative(1) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(6) }, Const { destination: Relative(1), bit_size: Integer(U8), value: 15 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 12 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 11 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 8 }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(11), source: Relative(10) }, Store { destination_pointer: Relative(11), source: Relative(1) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(6) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(8) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 10 }, Mov { destination: Relative(10), source: Direct(0) }, Mov { destination: Relative(11), source: Relative(5) }, Mov { destination: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 813 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(11) }, JumpIf { condition: Relative(1), location: 131 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Const { destination: Relative(1), bit_size: Integer(U8), value: 184 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 143 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 97 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 230 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 251 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 218 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 131 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 255 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 250 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 190 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 54 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 65 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 18 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 19 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 57 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 24 }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(1) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(5) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(10) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(12) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(14) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(15) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(16) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(17) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32847) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(18) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32847) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32837) }, Const { destination: Relative(21), bit_size: Field, value: 20 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 25 }, Mov { destination: Relative(25), source: Direct(0) }, Mov { destination: Relative(26), source: Relative(20) }, Mov { destination: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(24) }, Call { location: 845 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(22), source: Relative(26) }, Mov { destination: Relative(23), source: Relative(27) }, Load { destination: Relative(20), source_pointer: Relative(22) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 233 }, Call { location: 1021 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(20) }, Const { destination: Relative(20), bit_size: Integer(U8), value: 148 }, Mov { destination: Relative(24), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(24), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(25) }, Store { destination_pointer: Relative(26), source: Relative(20) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(1) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(5) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(6) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(7) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(8) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(9) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(7) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(10) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(11) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(12) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(13) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(14) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(15) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(16) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(17) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32847) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(18) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32847) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(19) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32837) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 25 }, Mov { destination: Relative(25), source: Direct(0) }, Mov { destination: Relative(26), source: Relative(22) }, Mov { destination: Relative(27), source: Relative(24) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 1024 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(26) }, JumpIf { condition: Relative(1), location: 316 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Const { destination: Relative(1), bit_size: Field, value: 21 }, BinaryFieldOp { destination: Relative(2), op: Equals, lhs: Relative(23), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 321 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(2), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 1056 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(23) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U64, lhs: Relative(1), rhs: Direct(32841) }, JumpIf { condition: Relative(2), location: 331 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(2), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 1059 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(23) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U64, lhs: Relative(1), rhs: Direct(32845) }, JumpIf { condition: Relative(2), location: 341 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(2), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, Mov { destination: Relative(23), source: Direct(32837) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 1062 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(23) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U64, lhs: Relative(1), rhs: Direct(32841) }, JumpIf { condition: Relative(2), location: 352 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(2), bit_size: Integer(U32), value: 22 }, Mov { destination: Relative(22), source: Direct(0) }, Mov { destination: Relative(23), source: Direct(32843) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 1062 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(23) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U64, lhs: Relative(1), rhs: Direct(32845) }, JumpIf { condition: Relative(2), location: 363 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Integer(U16), value: 65523 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(3) }, Const { destination: Relative(13), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U16, lhs: Relative(13), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 370 }, Jump { location: 372 }, Mov { destination: Relative(8), source: Relative(14) }, Jump { location: 374 }, Mov { destination: Relative(8), source: Relative(3) }, Jump { location: 374 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(1) }, Const { destination: Relative(13), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U16, lhs: Relative(13), rhs: Relative(1) }, JumpIf { condition: Relative(9), location: 380 }, Jump { location: 382 }, Mov { destination: Relative(10), source: Relative(14) }, Jump { location: 384 }, Mov { destination: Relative(10), source: Relative(1) }, Jump { location: 384 }, BinaryIntOp { destination: Relative(5), op: Div, bit_size: U16, lhs: Relative(8), rhs: Relative(10) }, BinaryIntOp { destination: Relative(11), op: Xor, bit_size: U1, lhs: Relative(7), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 388 }, Jump { location: 390 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U16, lhs: Relative(12), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(6) }, Const { destination: Relative(1), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 397 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(12), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(3) }, Const { destination: Relative(13), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U16, lhs: Relative(13), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 403 }, Jump { location: 405 }, Mov { destination: Relative(8), source: Relative(14) }, Jump { location: 407 }, Mov { destination: Relative(8), source: Relative(3) }, Jump { location: 407 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(4) }, Const { destination: Relative(13), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U16, lhs: Relative(13), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 413 }, Jump { location: 415 }, Mov { destination: Relative(10), source: Relative(14) }, Jump { location: 417 }, Mov { destination: Relative(10), source: Relative(4) }, Jump { location: 417 }, BinaryIntOp { destination: Relative(5), op: Div, bit_size: U16, lhs: Relative(8), rhs: Relative(10) }, BinaryIntOp { destination: Relative(11), op: Xor, bit_size: U1, lhs: Relative(7), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 421 }, Jump { location: 423 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U16, lhs: Relative(12), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 429 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65525 }, Const { destination: Relative(13), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U16, lhs: Relative(13), rhs: Relative(3) }, Const { destination: Relative(14), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U16, lhs: Relative(14), rhs: Relative(3) }, JumpIf { condition: Relative(8), location: 436 }, Jump { location: 438 }, Mov { destination: Relative(9), source: Relative(15) }, Jump { location: 440 }, Mov { destination: Relative(9), source: Relative(3) }, Jump { location: 440 }, Const { destination: Relative(13), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U16, lhs: Relative(13), rhs: Relative(2) }, Const { destination: Relative(14), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U16, lhs: Relative(14), rhs: Relative(2) }, JumpIf { condition: Relative(10), location: 446 }, Jump { location: 448 }, Mov { destination: Relative(11), source: Relative(15) }, Jump { location: 450 }, Mov { destination: Relative(11), source: Relative(2) }, Jump { location: 450 }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U16, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(12), op: Xor, bit_size: U1, lhs: Relative(8), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 454 }, Jump { location: 456 }, Const { destination: Relative(13), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U16, lhs: Relative(13), rhs: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U16, lhs: Relative(6), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(7) }, Const { destination: Relative(6), bit_size: Integer(U16), value: 4 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 463 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U16, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(5) }, Cast { destination: Relative(5), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(7), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(8), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(8) }, Not { destination: Relative(7), source: Relative(9), bit_size: U1 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U16, lhs: Relative(5), rhs: Relative(8) }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(9), rhs: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 475 }, Call { location: 1070 }, Const { destination: Relative(15), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U16, lhs: Relative(15), rhs: Relative(1) }, Const { destination: Relative(16), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(17), op: Sub, bit_size: U16, lhs: Relative(16), rhs: Relative(1) }, JumpIf { condition: Relative(10), location: 481 }, Jump { location: 483 }, Mov { destination: Relative(11), source: Relative(17) }, Jump { location: 485 }, Mov { destination: Relative(11), source: Relative(1) }, Jump { location: 485 }, Const { destination: Relative(15), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U16, lhs: Relative(15), rhs: Relative(2) }, Const { destination: Relative(16), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(17), op: Sub, bit_size: U16, lhs: Relative(16), rhs: Relative(2) }, JumpIf { condition: Relative(12), location: 491 }, Jump { location: 493 }, Mov { destination: Relative(13), source: Relative(17) }, Jump { location: 495 }, Mov { destination: Relative(13), source: Relative(2) }, Jump { location: 495 }, BinaryIntOp { destination: Relative(7), op: Div, bit_size: U16, lhs: Relative(11), rhs: Relative(13) }, BinaryIntOp { destination: Relative(14), op: Xor, bit_size: U1, lhs: Relative(10), rhs: Relative(12) }, JumpIf { condition: Relative(14), location: 499 }, Jump { location: 501 }, Const { destination: Relative(15), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U16, lhs: Relative(15), rhs: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U16, lhs: Relative(7), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U16, lhs: Relative(1), rhs: Relative(9) }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65532 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(2) }, JumpIf { condition: Relative(7), location: 508 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Const { destination: Relative(5), bit_size: Integer(U16), value: 2 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U16, lhs: Relative(4), rhs: Relative(5) }, Mov { destination: Relative(5), source: Relative(7) }, Cast { destination: Relative(7), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(9), source: Relative(4), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(9), rhs: Relative(8) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(4) }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U1, lhs: Relative(7), rhs: Relative(4) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(8), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 520 }, Call { location: 1073 }, Const { destination: Relative(14), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U16, lhs: Relative(14), rhs: Relative(3) }, Const { destination: Relative(15), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U16, lhs: Relative(15), rhs: Relative(3) }, JumpIf { condition: Relative(9), location: 526 }, Jump { location: 528 }, Mov { destination: Relative(10), source: Relative(16) }, Jump { location: 530 }, Mov { destination: Relative(10), source: Relative(3) }, Jump { location: 530 }, Const { destination: Relative(14), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(14), rhs: Relative(5) }, Const { destination: Relative(15), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U16, lhs: Relative(15), rhs: Relative(5) }, JumpIf { condition: Relative(11), location: 536 }, Jump { location: 538 }, Mov { destination: Relative(12), source: Relative(16) }, Jump { location: 540 }, Mov { destination: Relative(12), source: Relative(5) }, Jump { location: 540 }, BinaryIntOp { destination: Relative(7), op: Div, bit_size: U16, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: Xor, bit_size: U1, lhs: Relative(9), rhs: Relative(11) }, JumpIf { condition: Relative(13), location: 544 }, Jump { location: 546 }, Const { destination: Relative(14), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U16, lhs: Relative(14), rhs: Relative(7) }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U16, lhs: Relative(7), rhs: Relative(5) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(3), location: 552 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(12), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(1) }, Const { destination: Relative(13), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U16, lhs: Relative(13), rhs: Relative(1) }, JumpIf { condition: Relative(7), location: 558 }, Jump { location: 560 }, Mov { destination: Relative(8), source: Relative(14) }, Jump { location: 562 }, Mov { destination: Relative(8), source: Relative(1) }, Jump { location: 562 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(5) }, Const { destination: Relative(13), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U16, lhs: Relative(13), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 568 }, Jump { location: 570 }, Mov { destination: Relative(10), source: Relative(14) }, Jump { location: 572 }, Mov { destination: Relative(10), source: Relative(5) }, Jump { location: 572 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(8), rhs: Relative(10) }, BinaryIntOp { destination: Relative(11), op: Xor, bit_size: U1, lhs: Relative(7), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 576 }, Jump { location: 578 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(12), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U16, lhs: Relative(4), rhs: Relative(5) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(1), rhs: Relative(6) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(1), location: 584 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 590 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 585 }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, Not { destination: Relative(5), source: Relative(5), bit_size: U1 }, JumpIf { condition: Relative(5), location: 598 }, Call { location: 1021 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(5), bit_size: Field }, Cast { destination: Relative(5), source: Relative(3), bit_size: Integer(U32) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(3) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 609 }, Call { location: 1021 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Direct(32844), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Direct(32836) }, JumpIf { condition: Relative(7), location: 616 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 16 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Mov { destination: Relative(9), source: Relative(7) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 630 }, Store { destination_pointer: Relative(9), source: Direct(32837) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Jump { location: 624 }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(3) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32840) }, Load { destination: Relative(3), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Shr, bit_size: U8, lhs: Relative(3), rhs: Direct(32843) }, Const { destination: Relative(10), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(11), op: Div, bit_size: U8, lhs: Relative(8), rhs: Relative(10) }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U8, lhs: Relative(11), rhs: Relative(10) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(12) }, Cast { destination: Relative(10), source: Relative(9), bit_size: Integer(U1) }, Cast { destination: Relative(8), source: Relative(10), bit_size: Integer(U8) }, Cast { destination: Relative(9), source: Relative(8), bit_size: Integer(U1) }, JumpIf { condition: Relative(9), location: 704 }, Jump { location: 645 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U32, lhs: Relative(5), rhs: Direct(32840) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Direct(32840), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 649 }, Call { location: 1070 }, Mov { destination: Relative(3), source: Direct(32838) }, Jump { location: 651 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, JumpIf { condition: Relative(5), location: 655 }, Jump { location: 654 }, Jump { location: 760 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32840) }, JumpIf { condition: Relative(5), location: 659 }, Jump { location: 702 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Direct(32844) }, JumpIf { condition: Relative(5), location: 662 }, Call { location: 1076 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(6) }, Load { destination: Relative(5), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U32, lhs: Direct(32842), rhs: Relative(3) }, BinaryIntOp { destination: Relative(10), op: Shr, bit_size: U8, lhs: Relative(5), rhs: Direct(32843) }, Const { destination: Relative(12), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U8, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U8, lhs: Relative(13), rhs: Relative(12) }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U8, lhs: Relative(10), rhs: Relative(14) }, Load { destination: Relative(10), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Direct(32835) }, JumpIf { condition: Relative(12), location: 675 }, Call { location: 1076 }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 1079 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, Store { destination_pointer: Relative(14), source: Relative(11) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32840) }, BinaryIntOp { destination: Relative(11), op: LessThanEquals, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, JumpIf { condition: Relative(11), location: 686 }, Call { location: 1073 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U8, lhs: Relative(5), rhs: Relative(11) }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U8, lhs: Relative(13), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(14) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Direct(32835) }, JumpIf { condition: Relative(5), location: 693 }, Call { location: 1076 }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 1079 }, Mov { destination: Relative(5), source: Direct(32773) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Store { destination_pointer: Relative(13), source: Relative(9) }, Store { destination_pointer: Relative(7), source: Relative(5) }, Jump { location: 702 }, Mov { destination: Relative(3), source: Relative(6) }, Jump { location: 651 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(10), op: Div, bit_size: U8, lhs: Relative(3), rhs: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U8, lhs: Relative(10), rhs: Relative(9) }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(3), rhs: Relative(11) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(9) }, Store { destination_pointer: Relative(10), source: Relative(6) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32837) }, Store { destination_pointer: Relative(7), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(3) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 752 }, Call { location: 1021 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Mov { destination: Relative(4), source: Direct(32840) }, Jump { location: 756 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Direct(32844) }, JumpIf { condition: Relative(3), location: 767 }, Jump { location: 759 }, Jump { location: 760 }, Load { destination: Relative(1), source_pointer: Relative(7) }, Const { destination: Relative(3), bit_size: Field, value: 2 }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(3), rhs: Relative(2) }, Cast { destination: Relative(2), source: Relative(8), bit_size: Field }, BinaryFieldOp { destination: Relative(5), op: Add, lhs: Relative(4), rhs: Relative(2) }, BinaryFieldOp { destination: Relative(2), op: Sub, lhs: Relative(5), rhs: Relative(3) }, Return, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(3), location: 770 }, Jump { location: 810 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(4) }, Load { destination: Relative(3), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Direct(32842), rhs: Relative(4) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U32, lhs: Relative(6), rhs: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: LessThanEquals, bit_size: U32, lhs: Direct(32840), rhs: Relative(6) }, JumpIf { condition: Relative(10), location: 778 }, Call { location: 1070 }, BinaryIntOp { destination: Relative(10), op: Shr, bit_size: U8, lhs: Relative(3), rhs: Direct(32843) }, Const { destination: Relative(12), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U8, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U8, lhs: Relative(13), rhs: Relative(12) }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U8, lhs: Relative(10), rhs: Relative(14) }, Load { destination: Relative(10), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Direct(32835) }, JumpIf { condition: Relative(12), location: 787 }, Call { location: 1076 }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 1079 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, Store { destination_pointer: Relative(14), source: Relative(11) }, Const { destination: Relative(10), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(11), op: Div, bit_size: U8, lhs: Relative(3), rhs: Relative(10) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U8, lhs: Relative(11), rhs: Relative(10) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(3), rhs: Relative(13) }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Direct(32835) }, JumpIf { condition: Relative(3), location: 801 }, Call { location: 1076 }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 1079 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(6) }, Store { destination_pointer: Relative(11), source: Relative(9) }, Store { destination_pointer: Relative(7), source: Relative(3) }, Jump { location: 810 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32840) }, Mov { destination: Relative(4), source: Relative(3) }, Jump { location: 756 }, Call { location: 585 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Direct(32839) }, Load { destination: Relative(5), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 823 }, Call { location: 1021 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(5) }, Mov { destination: Relative(3), source: Direct(32838) }, Jump { location: 827 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32844) }, JumpIf { condition: Relative(5), location: 832 }, Jump { location: 830 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Return, Load { destination: Relative(5), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32840) }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 827 }, Call { location: 585 }, Load { destination: Relative(5), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 852 }, Call { location: 1021 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(5) }, Cast { destination: Relative(7), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(7), bit_size: Field }, Cast { destination: Relative(7), source: Relative(5), bit_size: Integer(U8) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U8, lhs: Relative(5), rhs: Relative(7) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(8), rhs: Direct(32836) }, JumpIf { condition: Relative(5), location: 863 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 32 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Mov { destination: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 877 }, Store { destination_pointer: Relative(10), source: Direct(32837) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Jump { location: 871 }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Const { destination: Relative(9), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 1007 }, Jump { location: 884 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 31 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(10) }, JumpIf { condition: Relative(11), location: 892 }, Jump { location: 888 }, Const { destination: Relative(1), bit_size: Field, value: 32 }, Mov { destination: Relative(6), source: Relative(5) }, Mov { destination: Relative(9), source: Relative(1) }, Jump { location: 985 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U8, lhs: Direct(32847), rhs: Relative(7) }, BinaryIntOp { destination: Relative(11), op: LessThanEquals, bit_size: U8, lhs: Direct(32847), rhs: Relative(10) }, JumpIf { condition: Relative(11), location: 896 }, Call { location: 1073 }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(11) }, Store { destination_pointer: Relative(12), source: Relative(10) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32837) }, Store { destination_pointer: Relative(8), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(7) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 972 }, Call { location: 1021 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Mov { destination: Relative(5), source: Direct(32840) }, Jump { location: 976 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Direct(32846) }, JumpIf { condition: Relative(7), location: 988 }, Jump { location: 979 }, Load { destination: Relative(1), source_pointer: Relative(8) }, Const { destination: Relative(5), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(2), rhs: Relative(5) }, Mov { destination: Relative(6), source: Relative(1) }, Mov { destination: Relative(9), source: Relative(7) }, Jump { location: 985 }, Mov { destination: Relative(3), source: Relative(6) }, Mov { destination: Relative(4), source: Relative(9) }, Jump { location: 1018 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U32, lhs: Relative(5), rhs: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Direct(32846) }, JumpIf { condition: Relative(10), location: 992 }, Call { location: 1076 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(7) }, Load { destination: Relative(10), source_pointer: Relative(12) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 1079 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(5) }, Store { destination_pointer: Relative(13), source: Relative(10) }, Store { destination_pointer: Relative(8), source: Relative(11) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32840) }, Mov { destination: Relative(5), source: Relative(7) }, Jump { location: 976 }, Load { destination: Relative(1), source_pointer: Relative(5) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(1) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 1013 }, Call { location: 1021 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(1) }, Mov { destination: Relative(3), source: Relative(5) }, Mov { destination: Relative(4), source: Relative(2) }, Jump { location: 1018 }, Mov { destination: Relative(1), source: Relative(3) }, Mov { destination: Relative(2), source: Relative(4) }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 585 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Direct(32839) }, Load { destination: Relative(5), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 1034 }, Call { location: 1021 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(5) }, Mov { destination: Relative(3), source: Direct(32838) }, Jump { location: 1038 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32846) }, JumpIf { condition: Relative(5), location: 1043 }, Jump { location: 1041 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Return, Load { destination: Relative(5), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32840) }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 1038 }, Call { location: 585 }, Mov { destination: Relative(1), source: Direct(32841) }, Return, Call { location: 585 }, Mov { destination: Relative(1), source: Direct(32845) }, Return, Call { location: 585 }, BinaryIntOp { destination: Relative(2), op: Shl, bit_size: U64, lhs: Direct(32841), rhs: Relative(1) }, Const { destination: Relative(3), bit_size: Integer(U8), value: 64 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U8, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 1068 }, Call { location: 1101 }, Mov { destination: Relative(1), source: Relative(2) }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 1083 }, Jump { location: 1085 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 1100 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 1097 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 1090 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 1100 }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "tdvBrhS3EoDhdzlrFl12VdmVV4miiCQnV0iIIAJXukK8+3W1/XtgQZT4KJv4J9Df6em2p2e64fPTb8+/fPrPz2/e/f7Hn08//Pj56ZcPb96+ffOfn9/+8evrj2/+eDf+7+enK/9j8fSDvHryaw4yhzKHOgedg83B59Dm0J9+KGOIe2jXHGQOZQ5DqWPQOQxFx+BzGIqNoc8h7qEPxccgcyhzGEobg87B5uBzaHPoc4h7iGsOMocyh6nEVGIqMZWYSkwlpiLXYHqOssayxrpGXaOt0dfY1tjXGHOU5cnyZHmyPFmeLE+WJ8uT5cnyyvAiR1ljWWNdo67R1uhrbGvsa4w51uXVnAlXRiEqoYQRTjSiE7FCLwJZkRVZkRVZkRVZkRXZkA3ZkA3ZkA3ZkA3ZkA3ZkR3ZkR3ZkR3ZkR3ZkR25ITfkhtyQG3JDbsgNuSE35I7ckTtyR+7IHbkjd+SO3JEDOZADOZADOZADOZADOZZcrosQohCVUMIIJxrRCWRBFmRBFmRBFmRBzlUnktGJWJELb4YQhaiEEkY4gVyQC3JFrsgVuSJX5HsNlgwnGtGJWHGvwTuEKEQllEBWZEVWZEU2ZEM2ZEM2ZEM2ZEM2ZEN2ZEd2ZEd2ZEd2ZEd2ZEduyA25ITfkhtyQG3JDbsgNuSN35I7ckTtyR+7IHbkjd+RADuRADuRADuRADuRAjiXX6yKEKEQllEi5ZjjRiE7EinsN3iFEISqhBPK9BjWjEZ2IFfcavCNlyyhEJZQwwomUPaMTseJeg3ek3DIKUQkljHAi5Z7RiVhxr8E7Uo6MQlRCCSOcaER+8royYkWuwRlC5CcwyaiEEkY40YhOpJynO9fgDCEKkXKer1yDM4xwohGdiBX3J8Y7hCgEckNuyA25ITfkhtyRO3JH7sgduSN35I7ckTtyIAdyrsGS8zDX4AwljHAi5Zx+uQZnxAzNNThDiEJUQgkjnGhEJ5AFWZAFWZAFWZAFWZAFWZALckEuyAW5IOcaLJ7hRCM6kfJYRJprcIYQhaiEEkY40YhOICuyIiuyIiuyIiuyIiuyIhuyIRuyIRuyIRuyId9rsGfEinsN3iFEIVKODCWMcKIRnYgV9xq8Q4hCIDfkXIP1ynCiEZ2IFbkGZwhRiEoogdyRO3JH7siBHMiBHMiBHMiBHMiBHEu26yKEKETKkqGEEU40IuWSEStyDc4QohCVUMIIJxqBLMi5BmvNEKIQlVDCCCca0YlYUZErckWuyBW5IlfkilyRK7IiK7IiK7IiK7IiK3KuwaoZsSLX4AwhUraMSihhhBON6ESsyDU4QwhkR3ZkR3ZkR3ZkR27IDbkhN+SG3JAbckNuyA35XoOeIUQh6op77bSMSihhhBON6ETM8Hvt9AwhClEJJYxwohGdiBWCfK+dyChEJZQwIu8yXRmN6ESsyLUzQ4hCVEIJI5ALckEuyBW5IlfkXDt632FTIuW8k5ZrRzWjEZ2IFbl21DKEKEQ6nuFEI/qKXBea5ysnv+ZRzcmvecRyqlvuYU71GUKMH2H3DcBKKDEcy53PqW41I2/s5f7kVJ8RK3Kqz0g5X05O9RmVUCLl3Oec6jMa0YlYkVN9hhAp5yvNqT5DCSNSzoOQl5sZnYgVebmxPD55uZlRiLoOXS6ZGUZwVHPJzOhEzGi5ZGaMzf3KMMKJRozNXTJiRa6LGUIUohJKGOFEI5AFuSAX5IJckAtyQS7IBbkgF+SKXJErckWuyBW5IlfkilyRFVmRFVmRFVmRc6V43qjOlTKjE7EirykzhChEJXCcc5prx/Omd66dGfmH7/vfuRt5zzvXjntG/vSW98TzZ/UMIQqRm6ecC6TllMgFMsOJRuSd7HyBuUBa/vRcIDOEKETeGc+dv++w32GEEynnzt932u+IFffd9juEKEQlUr5v8xvhRCNSzqNx33/P+/65QGaknPf385oyoxJKGOFEI/qKXDIzcqueYYQTuVVkdCJW5LqYIUQhKqEETs75fmXwh3Oqd8lQwoi8518yGtGJvO2v+RwEMKf6jELk5vkcJefzjE7EipzPM4QoRCVyx/LI52VihhMp389hOhErcvLPEKIQKefhzck/wwgnGtGJWJHrYoYQhUBuyA25ITfkhtyQc130PCm5LmbkY5M8mLkK7sj5HHl2cj7PUMKIfLiSpynn84xOxIzI+TxDiEJUQgkjnGhEJ5AFWZAFWZAFWZAFWZAFWZALckEuyAW5IBfkglyQC3JBrsgVuSJX5IpckStyRa7IFVmRFVmRFVmRFVmRFVmRFdmQDdmQDdmQDdmQDdmQDdmRHdmRHdmRHTnXTtSMRnQiVuTamSFEISqBk+siNB+F5laWIUTKnhEr8p1/hhAp349QK6GEEb5+xL1S7ujE+unj0eu1S3aVXXWX7mpz/Y7qu4KSa5fsKrvqLqXuuTwf+/qutmtdHEYFVa9dsqvsqrt0l+3aHm/qo/YWuq4To2yX71qXilF9V1D3lL0V27KVXZWaTzVn6iPtkf7I+6nb9eXLqyf+WsHPHz88P+ffKvjq7xn8+Pnp/esPz+8+Pv3w7tPbt6+e/vv67af7D/35/vW7e/z4+sP43YE+v/ttjAP8/c3b56wvrx5bX9/fdDyM87X1eArnG7B/IOQXxiVoOxLys9YS2qHw2IduR0JeZ5cQ9UjIZT6F8SToRBiPix5CHAm5mKcwbmWfHcnrIRztg/t+FePL7InQ8vnIFMaXjgNhPIBjPoxjenQ2m7ctaD/ah/zesYR+9CqkcDbHU74zwfarkHYdCcG5GI8Ky4lQim2hxpHgsoUuR8JeF+P55MmcHA8x94wazw2PBN9HcjyGOxHGgkQYD5heKpSjI6l1n83xMOjFgh0J9ngV7i8V2tlx6I9X0dtLhaMrzrfC0Zy0x6weDyPOBH0IR2fTpL5UeLw/jHv+R4LGC4UAGI+iD7ZX5VSOB5gv2/5o/3Xvvx1d9W1f9O1oPX29/cmKNpO9/XdXo9bvA9L4HCz95DJnwfbjucjB9uP7AGdwfCk62YNoHMJoJ0s59pX+cAdE6hbk6Bo5vlA9DoKfHca9kocgR0LfM+GKI0Guto+D1KN92N8lhvDdk5nPef6t+Txew+NAxuF0iMd06EeC6xba2T7YY0oevTH6Po5+NBl874AfTccmHILxqOjkCJR9iZezj9/jW0jdwtHF6Zt9sHip4Cfnse0X0Y6+lLb9DWI8RTnYvhfeE8aDjBduf3KB7Hse9qNz2PXa23/3DOazrn/rDamXvQP15ATGvr7G0Xtyj315lZPLa2/7BMbRle2lb+jR95vpuK38EP72LZFrf3ks19fvJH8fkAfw9b3Gvw/U67EH/aV78L2X0P/iY2IxbuqUfnRlL9Ieb8fXP38JUvt+J9SjWxlS942pU+HxFX6kHwl2beHo/VhM+cQv5nokxN4Hl6Nrq7V9HOzoJoB43efCzz4y++Mzkh99dRqfi7bQ7OityfeNCPGzNzd/fNo8+5wlfX+Dlb94g/+rtf3itVmu2A8RxleZb/bhp/Gr17+++fDNPyT9ktaHN69/efu8fvn7p3e/fvW7H//3nt/hH6K+//DHr8+/ffrwnNLjX6OO//x4f2Yf3z6un149jcdRP9b6SutP+cRp/MLGORozPn8p889er8Z/yk9fcuf+Dw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
