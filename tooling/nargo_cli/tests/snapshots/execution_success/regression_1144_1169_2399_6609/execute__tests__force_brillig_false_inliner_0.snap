---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _180",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_6, 16)] []",
    "BLACKBOX::RANGE [(_7, 16)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _5) 0 ], EXPR [ 4294967296 ]], outputs: [_8, _9]",
    "BLACKBOX::RANGE [(_8, 222)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "EXPR [ (1, _5) (-4294967296, _8) (-1, _9) 0 ]",
    "EXPR [ (-1, _8) (-1, _10) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_10, 222)] []",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-1, _8) 5096253676302562286669017222071363378443840053029366383258766538131 ]], outputs: [_11]",
    "EXPR [ (-1, _8, _11) (5096253676302562286669017222071363378443840053029366383258766538131, _11) (1, _12) -1 ]",
    "EXPR [ (-1, _8, _12) (5096253676302562286669017222071363378443840053029366383258766538131, _12) 0 ]",
    "EXPR [ (1, _9, _12) (268435455, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _9) 4294967301 ], EXPR [ 4294967296 ]], outputs: [_14, _15]",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _14) (-1, _15) 4294967301 ]",
    "EXPR [ (-1, _14) 1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 16 ]], outputs: [_16, _17]",
    "BLACKBOX::RANGE [(_16, 4)] []",
    "BLACKBOX::RANGE [(_17, 4)] []",
    "EXPR [ (1, _0) (-16, _16) (-1, _17) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _16) 0 ], EXPR [ 2 ]], outputs: [_18, _19]",
    "BLACKBOX::RANGE [(_18, 7)] []",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "EXPR [ (1, _16) (-2, _18) (-1, _19) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 16 ]], outputs: [_20, _21]",
    "BLACKBOX::RANGE [(_20, 4)] []",
    "BLACKBOX::RANGE [(_21, 4)] []",
    "EXPR [ (1, _0) (-16, _20) (-1, _21) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _9) 4294967297 ], EXPR [ 4294967296 ]], outputs: [_22, _23]",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _22) (-1, _23) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (-1, _22, _19) (1, _19) 0 ]",
    "inputs: [EXPR [ (1, _1) 0 ], EXPR [ 16 ]], outputs: [_24, _25]",
    "BLACKBOX::RANGE [(_24, 4)] []",
    "BLACKBOX::RANGE [(_25, 5)] []",
    "EXPR [ (-1, _19, _22) (1, _19) (1, _25) (-1, _26) 15 ]",
    "BLACKBOX::RANGE [(_26, 5)] []",
    "EXPR [ (16, _24) (1, _25) (-1, _27) 0 ]",
    "EXPR [ (-1, _19, _22) (1, _19) (-1, _28) 0 ]",
    "EXPR [ (1, _1, _28) (-1, _27, _28) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ], EXPR [ 16 ]], outputs: [_29, _30]",
    "BLACKBOX::RANGE [(_29, 4)] []",
    "BLACKBOX::RANGE [(_30, 4)] []",
    "EXPR [ (1, _1) (-16, _29) (-1, _30) 0 ]",
    "EXPR [ (-1, _28) (-1, _31) 1 ]",
    "EXPR [ (1, _19, _21) (-1, _32) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _9) 4294967298 ], EXPR [ 4294967296 ]], outputs: [_33, _34]",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _33) (-1, _34) 4294967298 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (-1, _33, _19) (1, _19) 0 ]",
    "inputs: [EXPR [ (1, _2) 0 ], EXPR [ 16 ]], outputs: [_35, _36]",
    "BLACKBOX::RANGE [(_35, 4)] []",
    "BLACKBOX::RANGE [(_36, 5)] []",
    "EXPR [ (-1, _19, _33) (1, _19) (1, _36) (-1, _37) 15 ]",
    "BLACKBOX::RANGE [(_37, 5)] []",
    "EXPR [ (16, _35) (1, _36) (-1, _38) 0 ]",
    "EXPR [ (-1, _19, _33) (1, _19) (-1, _39) 0 ]",
    "EXPR [ (1, _2, _39) (-1, _38, _39) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _2) 0 ], EXPR [ 16 ]], outputs: [_40, _41]",
    "BLACKBOX::RANGE [(_40, 4)] []",
    "BLACKBOX::RANGE [(_41, 4)] []",
    "EXPR [ (1, _2) (-16, _40) (-1, _41) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _9) 4294967299 ], EXPR [ 4294967296 ]], outputs: [_42, _43]",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "BLACKBOX::RANGE [(_43, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _42) (-1, _43) 4294967299 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _9) 4294967300 ], EXPR [ 4294967296 ]], outputs: [_44, _45]",
    "BLACKBOX::RANGE [(_44, 1)] []",
    "BLACKBOX::RANGE [(_45, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _44) (-1, _45) 4294967300 ]",
    "EXPR [ (-1, _9, _19) (1, _9) (1, _19) (-1, _46) -1 ]",
    "BLACKBOX::RANGE [(_46, 32)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _46) 4294967296 ], EXPR [ 4294967296 ]], outputs: [_47, _48]",
    "BLACKBOX::RANGE [(_47, 1)] []",
    "BLACKBOX::RANGE [(_48, 32)] []",
    "EXPR [ (-1, _46) (-4294967296, _47) (-1, _48) 4294967296 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (1, _19, _47) (-1, _19) (-1, _47) 1 ]",
    "inputs: [EXPR [ (1, _1) 0 ], EXPR [ 16 ]], outputs: [_49, _50]",
    "BLACKBOX::RANGE [(_49, 4)] []",
    "BLACKBOX::RANGE [(_50, 5)] []",
    "EXPR [ (1, _19, _47) (-1, _19) (-1, _47) (1, _50) (-1, _51) 16 ]",
    "BLACKBOX::RANGE [(_51, 5)] []",
    "EXPR [ (16, _49) (1, _50) (-1, _52) 0 ]",
    "EXPR [ (1, _19, _47) (-1, _19) (-1, _47) (-1, _53) 1 ]",
    "EXPR [ (1, _1, _53) (-1, _52, _53) 0 ]",
    "EXPR [ (-1, _53) (-1, _54) 1 ]",
    "EXPR [ (1, _21, _28) (1, _31, _32) (-1, _55) 0 ]",
    "EXPR [ (1, _24, _28) (-1, _56) 0 ]",
    "EXPR [ (1, _28, _30) (-1, _57) 0 ]",
    "EXPR [ (1, _35, _39) (-1, _58) 0 ]",
    "EXPR [ (1, _39, _41) (-1, _59) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _46) 4294967297 ], EXPR [ 4294967296 ]], outputs: [_60, _61]",
    "BLACKBOX::RANGE [(_60, 1)] []",
    "BLACKBOX::RANGE [(_61, 32)] []",
    "EXPR [ (-1, _46) (-4294967296, _60) (-1, _61) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (1, _19, _60) (-1, _19) (-1, _60) 1 ]",
    "inputs: [EXPR [ (1, _2) 0 ], EXPR [ 16 ]], outputs: [_62, _63]",
    "BLACKBOX::RANGE [(_62, 4)] []",
    "BLACKBOX::RANGE [(_63, 5)] []",
    "EXPR [ (1, _19, _60) (-1, _19) (-1, _60) (1, _63) (-1, _64) 16 ]",
    "BLACKBOX::RANGE [(_64, 5)] []",
    "EXPR [ (16, _62) (1, _63) (-1, _65) 0 ]",
    "EXPR [ (1, _19, _60) (-1, _19) (-1, _60) (-1, _66) 1 ]",
    "EXPR [ (1, _2, _66) (-1, _65, _66) 0 ]",
    "EXPR [ (-1, _66) (-1, _67) 1 ]",
    "EXPR [ (1, _54, _57) (-1, _68) 0 ]",
    "EXPR [ (1, _54, _58) (-1, _69) 0 ]",
    "EXPR [ (2, _5) (1, _19) -7 ]",
    "EXPR [ (1, _49, _53) (1, _54, _55) -15 ]",
    "EXPR [ (1, _30, _53) (1, _54, _56) -1 ]",
    "EXPR [ (1, _62, _66) (1, _67, _68) -12 ]",
    "EXPR [ (1, _41, _66) (1, _67, _69) -11 ]",
    "EXPR [ (1, _54, _59) -8 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 0 ], EXPR [ 32768 ]], outputs: [_70, _71]",
    "BLACKBOX::RANGE [(_70, 1)] []",
    "BLACKBOX::RANGE [(_71, 15)] []",
    "EXPR [ (1, _6) (-32768, _70) (-1, _71) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _6, _70) (1, _6) (65536, _70) 0 ], EXPR [ 13 ]], outputs: [_72, _73]",
    "BLACKBOX::RANGE [(_72, 13)] []",
    "BLACKBOX::RANGE [(_73, 4)] []",
    "EXPR [ (1, _73) (-1, _74) 3 ]",
    "BLACKBOX::RANGE [(_74, 4)] []",
    "EXPR [ (-2, _6, _70) (1, _6) (65536, _70) (-13, _72) (-1, _73) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _72) 0 ]], outputs: [_75]",
    "EXPR [ (1, _72, _75) (1, _76) -1 ]",
    "EXPR [ (1, _72, _76) 0 ]",
    "EXPR [ (2, _70, _72) (-65536, _70) (-1, _72) (-1, _77) 65536 ]",
    "EXPR [ (-1, _76) (-1, _78) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _73) 0 ]], outputs: [_79]",
    "EXPR [ (1, _73, _79) (1, _80) -1 ]",
    "EXPR [ (1, _73, _80) 0 ]",
    "EXPR [ (-2, _70, _73) (65536, _70) (1, _73) (-1, _81) 0 ]",
    "EXPR [ (-1, _80) (-1, _82) 1 ]",
    "EXPR [ (1, _81, _82) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) 0 ], EXPR [ 32768 ]], outputs: [_83, _84]",
    "BLACKBOX::RANGE [(_83, 1)] []",
    "BLACKBOX::RANGE [(_84, 15)] []",
    "EXPR [ (1, _7) (-32768, _83) (-1, _84) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 0 ], EXPR [ 32768 ]], outputs: [_85, _86]",
    "BLACKBOX::RANGE [(_85, 1)] []",
    "BLACKBOX::RANGE [(_86, 15)] []",
    "EXPR [ (1, _6) (-32768, _85) (-1, _86) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-2, _7, _83) (1, _7) (65536, _83) 0 ]], outputs: [_87]",
    "EXPR [ (-2, _7, _83) (1, _7) (65536, _83) (-1, _88) 0 ]",
    "EXPR [ (1, _87, _88) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _6, _85) (1, _6) (65536, _85) 0 ], EXPR [ (1, _88) 0 ]], outputs: [_89, _90]",
    "BLACKBOX::RANGE [(_89, 16)] []",
    "BLACKBOX::RANGE [(_90, 16)] []",
    "EXPR [ (1, _88) (-1, _90) (-1, _91) -1 ]",
    "BLACKBOX::RANGE [(_91, 16)] []",
    "EXPR [ (-2, _6, _85) (-1, _88, _89) (1, _6) (65536, _85) (-1, _90) 0 ]",
    "EXPR [ (-1, _89) (-1, _92) 32768 ]",
    "EXPR [ (-2, _83, _85) (1, _83) (1, _85) (-1, _93) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _89) 0 ]], outputs: [_94]",
    "EXPR [ (1, _89, _94) (1, _95) -1 ]",
    "EXPR [ (1, _89, _95) 0 ]",
    "EXPR [ (2, _92, _93) (1, _89) (-1, _96) 0 ]",
    "EXPR [ (-1, _95) (-1, _97) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _90) 0 ]], outputs: [_98]",
    "EXPR [ (1, _90, _98) (1, _99) -1 ]",
    "EXPR [ (1, _90, _99) 0 ]",
    "EXPR [ (-2, _85, _90) (65536, _85) (1, _90) (-1, _100) 0 ]",
    "EXPR [ (-1, _99) (-1, _101) 1 ]",
    "EXPR [ (1, _100, _101) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 0 ], EXPR [ 32768 ]], outputs: [_102, _103]",
    "BLACKBOX::RANGE [(_102, 1)] []",
    "BLACKBOX::RANGE [(_103, 15)] []",
    "EXPR [ (1, _6) (-32768, _102) (-1, _103) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _6, _102) (1, _6) (65536, _102) 0 ], EXPR [ 11 ]], outputs: [_104, _105]",
    "BLACKBOX::RANGE [(_104, 13)] []",
    "BLACKBOX::RANGE [(_105, 4)] []",
    "EXPR [ (1, _105) (-1, _106) 5 ]",
    "BLACKBOX::RANGE [(_106, 4)] []",
    "EXPR [ (-2, _6, _102) (1, _6) (65536, _102) (-11, _104) (-1, _105) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _104) 0 ]], outputs: [_107]",
    "EXPR [ (1, _104, _107) (1, _108) -1 ]",
    "EXPR [ (1, _104, _108) 0 ]",
    "EXPR [ (2, _102, _104) (-65536, _102) (-1, _104) (-1, _109) 65536 ]",
    "EXPR [ (-1, _108) (-1, _110) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _105) 0 ]], outputs: [_111]",
    "EXPR [ (1, _105, _111) (1, _112) -1 ]",
    "EXPR [ (1, _105, _112) 0 ]",
    "EXPR [ (-2, _102, _105) (65536, _102) (1, _105) (-1, _113) 0 ]",
    "EXPR [ (-1, _112) (-1, _114) 1 ]",
    "EXPR [ (1, _113, _114) -4 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _6) 131072 ], EXPR [ 65536 ]], outputs: [_115, _116]",
    "BLACKBOX::RANGE [(_115, 2)] []",
    "BLACKBOX::RANGE [(_116, 16)] []",
    "EXPR [ (-1, _6) (-65536, _115) (-1, _116) 131072 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 32768 ], EXPR [ 65536 ]], outputs: [_117, _118]",
    "BLACKBOX::RANGE [(_117, 1)] []",
    "BLACKBOX::RANGE [(_118, 16)] []",
    "EXPR [ (1, _6) (-65536, _117) (-1, _118) 32768 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _116) 32768 ], EXPR [ 65536 ]], outputs: [_119, _120]",
    "BLACKBOX::RANGE [(_119, 1)] []",
    "BLACKBOX::RANGE [(_120, 16)] []",
    "EXPR [ (1, _116) (-65536, _119) (-1, _120) 32768 ]",
    "EXPR [ (-1, _117, _119) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _116) 0 ], EXPR [ 32768 ]], outputs: [_121, _122]",
    "BLACKBOX::RANGE [(_121, 1)] []",
    "BLACKBOX::RANGE [(_122, 15)] []",
    "EXPR [ (1, _116) (-32768, _121) (-1, _122) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _116, _121) (1, _116) (65536, _121) 0 ], EXPR [ 11 ]], outputs: [_123, _124]",
    "BLACKBOX::RANGE [(_123, 13)] []",
    "BLACKBOX::RANGE [(_124, 4)] []",
    "EXPR [ (1, _124) (-1, _125) 5 ]",
    "BLACKBOX::RANGE [(_125, 4)] []",
    "EXPR [ (-2, _116, _121) (1, _116) (65536, _121) (-11, _123) (-1, _124) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _123) 0 ]], outputs: [_126]",
    "EXPR [ (1, _123, _126) (1, _127) -1 ]",
    "EXPR [ (1, _123, _127) 0 ]",
    "EXPR [ (2, _121, _123) (-65536, _121) (-1, _123) (-1, _128) 65536 ]",
    "EXPR [ (-1, _127) (-1, _129) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _124) 0 ]], outputs: [_130]",
    "EXPR [ (1, _124, _130) (1, _131) -1 ]",
    "EXPR [ (1, _124, _131) 0 ]",
    "EXPR [ (-2, _121, _124) (65536, _121) (1, _124) (-1, _132) 0 ]",
    "EXPR [ (-1, _131) (-1, _133) 1 ]",
    "EXPR [ (1, _132, _133) -65532 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) 2 ], EXPR [ 65536 ]], outputs: [_134, _135]",
    "BLACKBOX::RANGE [(_134, 1)] []",
    "BLACKBOX::RANGE [(_135, 16)] []",
    "EXPR [ (1, _7) (-65536, _134) (-1, _135) 2 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) 32768 ], EXPR [ 65536 ]], outputs: [_136, _137]",
    "BLACKBOX::RANGE [(_136, 1)] []",
    "BLACKBOX::RANGE [(_137, 16)] []",
    "EXPR [ (1, _7) (-65536, _136) (-1, _137) 32768 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _135) 32768 ], EXPR [ 65536 ]], outputs: [_138, _139]",
    "BLACKBOX::RANGE [(_138, 1)] []",
    "BLACKBOX::RANGE [(_139, 16)] []",
    "EXPR [ (1, _135) (-65536, _138) (-1, _139) 32768 ]",
    "EXPR [ (1, _136) (-1, _138) (-1, _140) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _140) 0 ]], outputs: [_141]",
    "EXPR [ (1, _140, _141) (1, _142) -1 ]",
    "EXPR [ (1, _140, _142) 0 ]",
    "EXPR [ (-1, _136, _142) (1, _136) (1, _142) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _135) 0 ], EXPR [ 32768 ]], outputs: [_143, _144]",
    "BLACKBOX::RANGE [(_143, 1)] []",
    "BLACKBOX::RANGE [(_144, 15)] []",
    "EXPR [ (1, _135) (-32768, _143) (-1, _144) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 0 ], EXPR [ 32768 ]], outputs: [_145, _146]",
    "BLACKBOX::RANGE [(_145, 1)] []",
    "BLACKBOX::RANGE [(_146, 15)] []",
    "EXPR [ (1, _6) (-32768, _145) (-1, _146) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-2, _135, _143) (1, _135) (65536, _143) 0 ]], outputs: [_147]",
    "EXPR [ (-2, _135, _143) (1, _135) (65536, _143) (-1, _148) 0 ]",
    "EXPR [ (1, _147, _148) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _6, _145) (1, _6) (65536, _145) 0 ], EXPR [ (1, _148) 0 ]], outputs: [_149, _150]",
    "BLACKBOX::RANGE [(_149, 16)] []",
    "BLACKBOX::RANGE [(_150, 16)] []",
    "EXPR [ (1, _148) (-1, _150) (-1, _151) -1 ]",
    "BLACKBOX::RANGE [(_151, 16)] []",
    "EXPR [ (-2, _6, _145) (-1, _148, _149) (1, _6) (65536, _145) (-1, _150) 0 ]",
    "EXPR [ (-1, _149) (-1, _152) 32768 ]",
    "EXPR [ (-2, _143, _145) (1, _143) (1, _145) (-1, _153) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _149) 0 ]], outputs: [_154]",
    "EXPR [ (1, _149, _154) (1, _155) -1 ]",
    "EXPR [ (1, _149, _155) 0 ]",
    "EXPR [ (2, _152, _153) (1, _149) (-1, _156) 0 ]",
    "EXPR [ (-1, _155) (-1, _157) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _150) 0 ]], outputs: [_158]",
    "EXPR [ (1, _150, _158) (1, _159) -1 ]",
    "EXPR [ (1, _150, _159) 0 ]",
    "EXPR [ (-2, _145, _150) (65536, _145) (1, _150) (-1, _160) 0 ]",
    "EXPR [ (-1, _159) (-1, _161) 1 ]",
    "EXPR [ (-1, _160, _161) 4 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _135) 0 ], EXPR [ 32768 ]], outputs: [_162, _163]",
    "BLACKBOX::RANGE [(_162, 1)] []",
    "BLACKBOX::RANGE [(_163, 15)] []",
    "EXPR [ (1, _135) (-32768, _162) (-1, _163) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _116) 0 ], EXPR [ 32768 ]], outputs: [_164, _165]",
    "BLACKBOX::RANGE [(_164, 1)] []",
    "BLACKBOX::RANGE [(_165, 15)] []",
    "EXPR [ (1, _116) (-32768, _164) (-1, _165) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-2, _135, _162) (1, _135) (65536, _162) 0 ]], outputs: [_166]",
    "EXPR [ (-2, _135, _162) (1, _135) (65536, _162) (-1, _167) 0 ]",
    "EXPR [ (1, _166, _167) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _116, _164) (1, _116) (65536, _164) 0 ], EXPR [ (1, _167) 0 ]], outputs: [_168, _169]",
    "BLACKBOX::RANGE [(_168, 16)] []",
    "BLACKBOX::RANGE [(_169, 16)] []",
    "EXPR [ (1, _167) (-1, _169) (-1, _170) -1 ]",
    "BLACKBOX::RANGE [(_170, 16)] []",
    "EXPR [ (-2, _116, _164) (-1, _167, _168) (1, _116) (65536, _164) (-1, _169) 0 ]",
    "EXPR [ (-1, _168) (-1, _171) 32768 ]",
    "EXPR [ (-2, _162, _164) (1, _162) (1, _164) (-1, _172) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _168) 0 ]], outputs: [_173]",
    "EXPR [ (1, _168, _173) (1, _174) -1 ]",
    "EXPR [ (1, _168, _174) 0 ]",
    "EXPR [ (2, _171, _172) (1, _168) (-1, _175) 0 ]",
    "EXPR [ (-1, _174) (-1, _176) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _169) 0 ]], outputs: [_177]",
    "EXPR [ (1, _169, _177) (1, _178) -1 ]",
    "EXPR [ (1, _169, _178) 0 ]",
    "EXPR [ (-2, _164, _169) (65536, _164) (1, _169) (-1, _179) 0 ]",
    "EXPR [ (-1, _178) (-1, _180) 1 ]",
    "EXPR [ (-1, _179, _180) 65532 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZjBbhs7DEX/xessRFGkxP7Kw0PhJE5hwHACNynwEPTfnzjkdZpFupA3uSdxeYaaEWemft89Hu7ffnw/np+ef+6+/fO+u78cT6fjj++n54f96/H5PP/6/vtuh1+/v14Oh/mn3R+fz6qX/eVwft19O7+dTne7X/vT2/aPfr7sz1u+7i/z03K3O5wfZ07h0/F0cPp991Fdvi6ttWhW11r1KpDPBvra0JqkoMm4rb7zQr0oZ710urF+Zf1iOIFay0K99mu9rfSvUlGvK/W9Yf1d+0q9tawfpS7Uj2v/Y2n/WMH+MVrZP6N3HN9Wrh+VawNU6soZMKu3CYgK1kC0dBJm1bUHarZk0HY19KVV1GowVF7qoV73MtWlzfSpB7FbDfrltfjrLZntektufcnQ8UiordiCgWdZGriR3mqotGRguRpaudkgSwb5WIXqrYa+dh7GxypGv9VgfLNhaUfJdS5YuK0Z2odh6WoK8a0GpauhL51JafaV4d/52/7hePn0krjrc4rvdmP7adtPKhEUUSM4okVIhEaEg6ZkngCyLWqJoIhpmZe4ckSLkIhpmS8ptUeMCNuCp2U+fJgiagRHTMtcLEuERvSI4Q+KmRbZSiZl1kzObJmSqX6DndkzR6ZFSvQl0ZfU7aDCEdGXRF+iYZSemZ1JdqbZmWZnmp1pdqYtjqiSmZ1pdqZjO4zaFr1EUET01aOvHn316Ku7Z+743jO9r3k1ukWOkkmZ3te8IoMzW6ZkambPHJkWaSWTMt03ZnKsw/IKWK7TNI5rPTP7s+xvvhiFiAoBKoABDSAABXTAAGSn5APgrdE2Ar6ltyFoDgxoAAEowMfBO/SBCLAEH4oAAlQAAxpAAAqAucJcYWaYGWaGmWFmmBlmhtnHpvrafXBqd7AEH50AAlQAAxpAAAroAJgbzAKzwCwwC8wCs8AsMAvMArPArDArzAqzwqwwK8wKs89W9Q3gw+UPFvLx2sAHLIAAFcCABhCAAjoA5g7zgHnAPGAeMA+YB8wD5gGzDx4XB78Rk9+QC4AAFcCABhCAAjpgANJcSwEQwM3VgQENIAAFdMAAWILPYAABYCaYCWaCmWAmmAlmgrnCXGH2GeTtIeXm5tAAAlBABwyAJfgMBhCgAmBmmBlmhplhZpgZZp9B3h6cBKgABjSAABTQAQNgCQKzwCwwC8wCs8AsMAvMArPArDArzAqzwqwwK8wKs8KsMPsM8vai4ObuQIAKYEADCEABHTAAljBgHjAPmAfMA+YB84B5wDxgHjAbzAazwWwwG8wGs8FsMBvM2wz6f0J/7S/H/f3pkF/5Pb2dH/74BvD1vxd8gu8IXy7PD4fHt8vBXwS3z+ar4f8=",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
