---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _178",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_6, 16)] []",
    "BLACKBOX::RANGE [(_7, 16)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _5) 0 ], EXPR [ 4294967296 ]], outputs: [_8, _9]",
    "BLACKBOX::RANGE [(_8, 222)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "EXPR [ (1, _5) (-4294967296, _8) (-1, _9) 0 ]",
    "EXPR [ (-1, _8) (-1, _10) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_10, 222)] []",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-1, _8) 5096253676302562286669017222071363378443840053029366383258766538131 ]], outputs: [_11]",
    "EXPR [ (-1, _8, _11) (5096253676302562286669017222071363378443840053029366383258766538131, _11) (1, _12) -1 ]",
    "EXPR [ (-1, _8, _12) (5096253676302562286669017222071363378443840053029366383258766538131, _12) 0 ]",
    "EXPR [ (1, _9, _12) (268435455, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _9) 4294967301 ], EXPR [ 4294967296 ]], outputs: [_14, _15]",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _14) (-1, _15) 4294967301 ]",
    "EXPR [ (-1, _14) 1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 16 ]], outputs: [_16, _17]",
    "BLACKBOX::RANGE [(_16, 4)] []",
    "BLACKBOX::RANGE [(_17, 4)] []",
    "EXPR [ (1, _0) (-16, _16) (-1, _17) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _16) 0 ], EXPR [ 2 ]], outputs: [_18, _19]",
    "BLACKBOX::RANGE [(_18, 7)] []",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "EXPR [ (1, _16) (-2, _18) (-1, _19) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 16 ]], outputs: [_20, _21]",
    "BLACKBOX::RANGE [(_20, 4)] []",
    "BLACKBOX::RANGE [(_21, 4)] []",
    "EXPR [ (1, _0) (-16, _20) (-1, _21) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _9) 4294967297 ], EXPR [ 4294967296 ]], outputs: [_22, _23]",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _22) (-1, _23) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (-1, _22, _19) (1, _19) 0 ]",
    "inputs: [EXPR [ (1, _1) 0 ], EXPR [ 16 ]], outputs: [_24, _25]",
    "BLACKBOX::RANGE [(_24, 4)] []",
    "BLACKBOX::RANGE [(_25, 5)] []",
    "EXPR [ (-1, _19, _22) (1, _19) (1, _25) (-1, _26) 15 ]",
    "BLACKBOX::RANGE [(_26, 5)] []",
    "EXPR [ (16, _24) (1, _25) (-1, _27) 0 ]",
    "EXPR [ (-1, _19, _22) (1, _19) (-1, _28) 0 ]",
    "EXPR [ (1, _1, _28) (-1, _27, _28) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ], EXPR [ 16 ]], outputs: [_29, _30]",
    "BLACKBOX::RANGE [(_29, 4)] []",
    "BLACKBOX::RANGE [(_30, 4)] []",
    "EXPR [ (1, _1) (-16, _29) (-1, _30) 0 ]",
    "EXPR [ (-1, _28) (-1, _31) 1 ]",
    "EXPR [ (1, _19, _21) (-1, _32) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _9) 4294967298 ], EXPR [ 4294967296 ]], outputs: [_33, _34]",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _33) (-1, _34) 4294967298 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (-1, _33, _19) (1, _19) 0 ]",
    "inputs: [EXPR [ (1, _2) 0 ], EXPR [ 16 ]], outputs: [_35, _36]",
    "BLACKBOX::RANGE [(_35, 4)] []",
    "BLACKBOX::RANGE [(_36, 5)] []",
    "EXPR [ (-1, _19, _33) (1, _19) (1, _36) (-1, _37) 15 ]",
    "BLACKBOX::RANGE [(_37, 5)] []",
    "EXPR [ (16, _35) (1, _36) (-1, _38) 0 ]",
    "EXPR [ (-1, _19, _33) (1, _19) (-1, _39) 0 ]",
    "EXPR [ (1, _2, _39) (-1, _38, _39) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _2) 0 ], EXPR [ 16 ]], outputs: [_40, _41]",
    "BLACKBOX::RANGE [(_40, 4)] []",
    "BLACKBOX::RANGE [(_41, 4)] []",
    "EXPR [ (1, _2) (-16, _40) (-1, _41) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _9) 4294967299 ], EXPR [ 4294967296 ]], outputs: [_42, _43]",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "BLACKBOX::RANGE [(_43, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _42) (-1, _43) 4294967299 ]",
    "EXPR [ (-1, _9, _19) (1, _9) (1, _19) (-1, _44) -1 ]",
    "BLACKBOX::RANGE [(_44, 32)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _44) 4294967296 ], EXPR [ 4294967296 ]], outputs: [_45, _46]",
    "BLACKBOX::RANGE [(_45, 1)] []",
    "BLACKBOX::RANGE [(_46, 32)] []",
    "EXPR [ (-1, _44) (-4294967296, _45) (-1, _46) 4294967296 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (1, _19, _45) (-1, _19) (-1, _45) 1 ]",
    "inputs: [EXPR [ (1, _1) 0 ], EXPR [ 16 ]], outputs: [_47, _48]",
    "BLACKBOX::RANGE [(_47, 4)] []",
    "BLACKBOX::RANGE [(_48, 5)] []",
    "EXPR [ (1, _19, _45) (-1, _19) (-1, _45) (1, _48) (-1, _49) 16 ]",
    "BLACKBOX::RANGE [(_49, 5)] []",
    "EXPR [ (16, _47) (1, _48) (-1, _50) 0 ]",
    "EXPR [ (1, _19, _45) (-1, _19) (-1, _45) (-1, _51) 1 ]",
    "EXPR [ (1, _1, _51) (-1, _50, _51) 0 ]",
    "EXPR [ (-1, _51) (-1, _52) 1 ]",
    "EXPR [ (1, _21, _28) (1, _31, _32) (-1, _53) 0 ]",
    "EXPR [ (1, _24, _28) (-1, _54) 0 ]",
    "EXPR [ (1, _28, _30) (-1, _55) 0 ]",
    "EXPR [ (1, _35, _39) (-1, _56) 0 ]",
    "EXPR [ (1, _39, _41) (-1, _57) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _44) 4294967297 ], EXPR [ 4294967296 ]], outputs: [_58, _59]",
    "BLACKBOX::RANGE [(_58, 1)] []",
    "BLACKBOX::RANGE [(_59, 32)] []",
    "EXPR [ (-1, _44) (-4294967296, _58) (-1, _59) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (1, _19, _58) (-1, _19) (-1, _58) 1 ]",
    "inputs: [EXPR [ (1, _2) 0 ], EXPR [ 16 ]], outputs: [_60, _61]",
    "BLACKBOX::RANGE [(_60, 4)] []",
    "BLACKBOX::RANGE [(_61, 5)] []",
    "EXPR [ (1, _19, _58) (-1, _19) (-1, _58) (1, _61) (-1, _62) 16 ]",
    "BLACKBOX::RANGE [(_62, 5)] []",
    "EXPR [ (16, _60) (1, _61) (-1, _63) 0 ]",
    "EXPR [ (1, _19, _58) (-1, _19) (-1, _58) (-1, _64) 1 ]",
    "EXPR [ (1, _2, _64) (-1, _63, _64) 0 ]",
    "EXPR [ (-1, _64) (-1, _65) 1 ]",
    "EXPR [ (1, _52, _55) (-1, _66) 0 ]",
    "EXPR [ (1, _52, _56) (-1, _67) 0 ]",
    "EXPR [ (2, _5) (1, _19) -7 ]",
    "EXPR [ (1, _47, _51) (1, _52, _53) -15 ]",
    "EXPR [ (1, _30, _51) (1, _52, _54) -1 ]",
    "EXPR [ (1, _60, _64) (1, _65, _66) -12 ]",
    "EXPR [ (1, _41, _64) (1, _65, _67) -11 ]",
    "EXPR [ (1, _52, _57) -8 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 0 ], EXPR [ 32768 ]], outputs: [_68, _69]",
    "BLACKBOX::RANGE [(_68, 1)] []",
    "BLACKBOX::RANGE [(_69, 15)] []",
    "EXPR [ (1, _6) (-32768, _68) (-1, _69) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _6, _68) (1, _6) (65536, _68) 0 ], EXPR [ 13 ]], outputs: [_70, _71]",
    "BLACKBOX::RANGE [(_70, 13)] []",
    "BLACKBOX::RANGE [(_71, 4)] []",
    "EXPR [ (1, _71) (-1, _72) 3 ]",
    "BLACKBOX::RANGE [(_72, 4)] []",
    "EXPR [ (-2, _6, _68) (1, _6) (65536, _68) (-13, _70) (-1, _71) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _70) 0 ]], outputs: [_73]",
    "EXPR [ (1, _70, _73) (1, _74) -1 ]",
    "EXPR [ (1, _70, _74) 0 ]",
    "EXPR [ (2, _68, _70) (-65536, _68) (-1, _70) (-1, _75) 65536 ]",
    "EXPR [ (-1, _74) (-1, _76) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _71) 0 ]], outputs: [_77]",
    "EXPR [ (1, _71, _77) (1, _78) -1 ]",
    "EXPR [ (1, _71, _78) 0 ]",
    "EXPR [ (-2, _68, _71) (65536, _68) (1, _71) (-1, _79) 0 ]",
    "EXPR [ (-1, _78) (-1, _80) 1 ]",
    "EXPR [ (1, _79, _80) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) 0 ], EXPR [ 32768 ]], outputs: [_81, _82]",
    "BLACKBOX::RANGE [(_81, 1)] []",
    "BLACKBOX::RANGE [(_82, 15)] []",
    "EXPR [ (1, _7) (-32768, _81) (-1, _82) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 0 ], EXPR [ 32768 ]], outputs: [_83, _84]",
    "BLACKBOX::RANGE [(_83, 1)] []",
    "BLACKBOX::RANGE [(_84, 15)] []",
    "EXPR [ (1, _6) (-32768, _83) (-1, _84) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-2, _7, _81) (1, _7) (65536, _81) 0 ]], outputs: [_85]",
    "EXPR [ (-2, _7, _81) (1, _7) (65536, _81) (-1, _86) 0 ]",
    "EXPR [ (1, _85, _86) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _6, _83) (1, _6) (65536, _83) 0 ], EXPR [ (1, _86) 0 ]], outputs: [_87, _88]",
    "BLACKBOX::RANGE [(_87, 16)] []",
    "BLACKBOX::RANGE [(_88, 16)] []",
    "EXPR [ (1, _86) (-1, _88) (-1, _89) -1 ]",
    "BLACKBOX::RANGE [(_89, 16)] []",
    "EXPR [ (-2, _6, _83) (-1, _86, _87) (1, _6) (65536, _83) (-1, _88) 0 ]",
    "EXPR [ (-1, _87) (-1, _90) 32768 ]",
    "EXPR [ (-2, _81, _83) (1, _81) (1, _83) (-1, _91) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _87) 0 ]], outputs: [_92]",
    "EXPR [ (1, _87, _92) (1, _93) -1 ]",
    "EXPR [ (1, _87, _93) 0 ]",
    "EXPR [ (2, _90, _91) (1, _87) (-1, _94) 0 ]",
    "EXPR [ (-1, _93) (-1, _95) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _88) 0 ]], outputs: [_96]",
    "EXPR [ (1, _88, _96) (1, _97) -1 ]",
    "EXPR [ (1, _88, _97) 0 ]",
    "EXPR [ (-2, _83, _88) (65536, _83) (1, _88) (-1, _98) 0 ]",
    "EXPR [ (-1, _97) (-1, _99) 1 ]",
    "EXPR [ (1, _98, _99) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 0 ], EXPR [ 32768 ]], outputs: [_100, _101]",
    "BLACKBOX::RANGE [(_100, 1)] []",
    "BLACKBOX::RANGE [(_101, 15)] []",
    "EXPR [ (1, _6) (-32768, _100) (-1, _101) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _6, _100) (1, _6) (65536, _100) 0 ], EXPR [ 11 ]], outputs: [_102, _103]",
    "BLACKBOX::RANGE [(_102, 13)] []",
    "BLACKBOX::RANGE [(_103, 4)] []",
    "EXPR [ (1, _103) (-1, _104) 5 ]",
    "BLACKBOX::RANGE [(_104, 4)] []",
    "EXPR [ (-2, _6, _100) (1, _6) (65536, _100) (-11, _102) (-1, _103) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _102) 0 ]], outputs: [_105]",
    "EXPR [ (1, _102, _105) (1, _106) -1 ]",
    "EXPR [ (1, _102, _106) 0 ]",
    "EXPR [ (2, _100, _102) (-65536, _100) (-1, _102) (-1, _107) 65536 ]",
    "EXPR [ (-1, _106) (-1, _108) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _103) 0 ]], outputs: [_109]",
    "EXPR [ (1, _103, _109) (1, _110) -1 ]",
    "EXPR [ (1, _103, _110) 0 ]",
    "EXPR [ (-2, _100, _103) (65536, _100) (1, _103) (-1, _111) 0 ]",
    "EXPR [ (-1, _110) (-1, _112) 1 ]",
    "EXPR [ (1, _111, _112) -4 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _6) 131072 ], EXPR [ 65536 ]], outputs: [_113, _114]",
    "BLACKBOX::RANGE [(_113, 2)] []",
    "BLACKBOX::RANGE [(_114, 16)] []",
    "EXPR [ (-1, _6) (-65536, _113) (-1, _114) 131072 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 32768 ], EXPR [ 65536 ]], outputs: [_115, _116]",
    "BLACKBOX::RANGE [(_115, 1)] []",
    "BLACKBOX::RANGE [(_116, 16)] []",
    "EXPR [ (1, _6) (-65536, _115) (-1, _116) 32768 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _114) 32768 ], EXPR [ 65536 ]], outputs: [_117, _118]",
    "BLACKBOX::RANGE [(_117, 1)] []",
    "BLACKBOX::RANGE [(_118, 16)] []",
    "EXPR [ (1, _114) (-65536, _117) (-1, _118) 32768 ]",
    "EXPR [ (-1, _115, _117) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _114) 0 ], EXPR [ 32768 ]], outputs: [_119, _120]",
    "BLACKBOX::RANGE [(_119, 1)] []",
    "BLACKBOX::RANGE [(_120, 15)] []",
    "EXPR [ (1, _114) (-32768, _119) (-1, _120) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _114, _119) (1, _114) (65536, _119) 0 ], EXPR [ 11 ]], outputs: [_121, _122]",
    "BLACKBOX::RANGE [(_121, 13)] []",
    "BLACKBOX::RANGE [(_122, 4)] []",
    "EXPR [ (1, _122) (-1, _123) 5 ]",
    "BLACKBOX::RANGE [(_123, 4)] []",
    "EXPR [ (-2, _114, _119) (1, _114) (65536, _119) (-11, _121) (-1, _122) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _121) 0 ]], outputs: [_124]",
    "EXPR [ (1, _121, _124) (1, _125) -1 ]",
    "EXPR [ (1, _121, _125) 0 ]",
    "EXPR [ (2, _119, _121) (-65536, _119) (-1, _121) (-1, _126) 65536 ]",
    "EXPR [ (-1, _125) (-1, _127) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _122) 0 ]], outputs: [_128]",
    "EXPR [ (1, _122, _128) (1, _129) -1 ]",
    "EXPR [ (1, _122, _129) 0 ]",
    "EXPR [ (-2, _119, _122) (65536, _119) (1, _122) (-1, _130) 0 ]",
    "EXPR [ (-1, _129) (-1, _131) 1 ]",
    "EXPR [ (1, _130, _131) -65532 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) 2 ], EXPR [ 65536 ]], outputs: [_132, _133]",
    "BLACKBOX::RANGE [(_132, 1)] []",
    "BLACKBOX::RANGE [(_133, 16)] []",
    "EXPR [ (1, _7) (-65536, _132) (-1, _133) 2 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _7) 32768 ], EXPR [ 65536 ]], outputs: [_134, _135]",
    "BLACKBOX::RANGE [(_134, 1)] []",
    "BLACKBOX::RANGE [(_135, 16)] []",
    "EXPR [ (1, _7) (-65536, _134) (-1, _135) 32768 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _133) 32768 ], EXPR [ 65536 ]], outputs: [_136, _137]",
    "BLACKBOX::RANGE [(_136, 1)] []",
    "BLACKBOX::RANGE [(_137, 16)] []",
    "EXPR [ (1, _133) (-65536, _136) (-1, _137) 32768 ]",
    "EXPR [ (1, _134) (-1, _136) (-1, _138) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _138) 0 ]], outputs: [_139]",
    "EXPR [ (1, _138, _139) (1, _140) -1 ]",
    "EXPR [ (1, _138, _140) 0 ]",
    "EXPR [ (-1, _134, _140) (1, _134) (1, _140) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _133) 0 ], EXPR [ 32768 ]], outputs: [_141, _142]",
    "BLACKBOX::RANGE [(_141, 1)] []",
    "BLACKBOX::RANGE [(_142, 15)] []",
    "EXPR [ (1, _133) (-32768, _141) (-1, _142) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 0 ], EXPR [ 32768 ]], outputs: [_143, _144]",
    "BLACKBOX::RANGE [(_143, 1)] []",
    "BLACKBOX::RANGE [(_144, 15)] []",
    "EXPR [ (1, _6) (-32768, _143) (-1, _144) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-2, _133, _141) (1, _133) (65536, _141) 0 ]], outputs: [_145]",
    "EXPR [ (-2, _133, _141) (1, _133) (65536, _141) (-1, _146) 0 ]",
    "EXPR [ (1, _145, _146) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _6, _143) (1, _6) (65536, _143) 0 ], EXPR [ (1, _146) 0 ]], outputs: [_147, _148]",
    "BLACKBOX::RANGE [(_147, 16)] []",
    "BLACKBOX::RANGE [(_148, 16)] []",
    "EXPR [ (1, _146) (-1, _148) (-1, _149) -1 ]",
    "BLACKBOX::RANGE [(_149, 16)] []",
    "EXPR [ (-2, _6, _143) (-1, _146, _147) (1, _6) (65536, _143) (-1, _148) 0 ]",
    "EXPR [ (-1, _147) (-1, _150) 32768 ]",
    "EXPR [ (-2, _141, _143) (1, _141) (1, _143) (-1, _151) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _147) 0 ]], outputs: [_152]",
    "EXPR [ (1, _147, _152) (1, _153) -1 ]",
    "EXPR [ (1, _147, _153) 0 ]",
    "EXPR [ (2, _150, _151) (1, _147) (-1, _154) 0 ]",
    "EXPR [ (-1, _153) (-1, _155) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _148) 0 ]], outputs: [_156]",
    "EXPR [ (1, _148, _156) (1, _157) -1 ]",
    "EXPR [ (1, _148, _157) 0 ]",
    "EXPR [ (-2, _143, _148) (65536, _143) (1, _148) (-1, _158) 0 ]",
    "EXPR [ (-1, _157) (-1, _159) 1 ]",
    "EXPR [ (-1, _158, _159) 4 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _133) 0 ], EXPR [ 32768 ]], outputs: [_160, _161]",
    "BLACKBOX::RANGE [(_160, 1)] []",
    "BLACKBOX::RANGE [(_161, 15)] []",
    "EXPR [ (1, _133) (-32768, _160) (-1, _161) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _114) 0 ], EXPR [ 32768 ]], outputs: [_162, _163]",
    "BLACKBOX::RANGE [(_162, 1)] []",
    "BLACKBOX::RANGE [(_163, 15)] []",
    "EXPR [ (1, _114) (-32768, _162) (-1, _163) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-2, _133, _160) (1, _133) (65536, _160) 0 ]], outputs: [_164]",
    "EXPR [ (-2, _133, _160) (1, _133) (65536, _160) (-1, _165) 0 ]",
    "EXPR [ (1, _164, _165) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _114, _162) (1, _114) (65536, _162) 0 ], EXPR [ (1, _165) 0 ]], outputs: [_166, _167]",
    "BLACKBOX::RANGE [(_166, 16)] []",
    "BLACKBOX::RANGE [(_167, 16)] []",
    "EXPR [ (1, _165) (-1, _167) (-1, _168) -1 ]",
    "BLACKBOX::RANGE [(_168, 16)] []",
    "EXPR [ (-2, _114, _162) (-1, _165, _166) (1, _114) (65536, _162) (-1, _167) 0 ]",
    "EXPR [ (-1, _166) (-1, _169) 32768 ]",
    "EXPR [ (-2, _160, _162) (1, _160) (1, _162) (-1, _170) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _166) 0 ]], outputs: [_171]",
    "EXPR [ (1, _166, _171) (1, _172) -1 ]",
    "EXPR [ (1, _166, _172) 0 ]",
    "EXPR [ (2, _169, _170) (1, _166) (-1, _173) 0 ]",
    "EXPR [ (-1, _172) (-1, _174) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _167) 0 ]], outputs: [_175]",
    "EXPR [ (1, _167, _175) (1, _176) -1 ]",
    "EXPR [ (1, _167, _176) 0 ]",
    "EXPR [ (-2, _162, _167) (65536, _162) (1, _167) (-1, _177) 0 ]",
    "EXPR [ (-1, _176) (-1, _178) 1 ]",
    "EXPR [ (-1, _177, _178) 65532 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZjBbhs7DEX/xesshqRIif2Vh4fASZzCgOEEblygCPrvFUe8k2aRLuSN77EdnaFk0Zr4ffd0eLh+vz+en19+7L799757uBxPp+P3+9PL4/7t+HLur77/vtvh6f3b5XDoL+3+er+Pet1fDue33bfz9XS62/3cn67rH/143Z/XfNtf+rvL3e5wfurZhc/H0yHo993H6OXrocyL5Whmtk2gnw30taEUTUHRdtv4KhPj1STHa6Ubx8/MXx0LaLxMjLe6jfeZ+k0Z421mfC2Yf7U6M95Ljm8LT4xvW/1tav/4gv3jNLN/Wq24vs98frRsBdDCMyvgzrcJiBbMgWhqEfqorQYqPmWwshnq1CyYHQaWqRp428vEU5vpUw3qtxrsy8/in1/J4ttXcqlThoojgcviEwbpw9IghexWA9OUQXQzlOVmg04Z9GMWZrca6tw6tI9ZtHqrweVmw9SO0q0vRKXMGcqHYerTVJJbDUaboU6tpBb/yvB/f7Z/PF4+3STuau/iu11bH319pGUEjeARMqKM0BE2YjioS/oCkK/Bywga0S39I2YZUUboiG7pNylcR7QRvoZ0Sz98hEbwCBnRLX2yoiNsRB3R4qDo6SPLkkmZnCmZJVMzLb5ge9bMlukjddSloy7l9aIqI0ZdOupSG0atmVmZZmWWlVlWZlmZZWVWxhVNM7Myy8qsrZcxX6MuI2hEuPqurpIZrr7iVTMts2ZGbX3Vq49sSyZlcqZklkzNtMyaGb7WM1fNc65O+ZzHdV0ysz7P+jx9nj7P+jzr6zdHAAIwQAAFoAAbZfX7mr5xY8susf9LgCesTbACARgQraABBaAAA1RAA3hCNMYAAjAAZoaZYWaYGWaGmWEWmAVmgTlahmPu0TRcAxRggApoAE+I9hlAAAYIAOYCc4G5wFxgLjArzAqzwqwwK8wKs8KsMCvMCrPBbDAbzNFbHBsgmisODoruGmCACmgAT4gmG0AABggA5gpzhbnCXGGuMDeYG8wN5gZzNJ0sAd0sFGCACmgAT4jWG0AABgigAGB2mB3maMG4mafowQCOHhxAAAYIoAAUYIAKaACYCWaCmWAmmAlmgplgJpjXg2k9i8Jc4jRaAARggAAKQAEGqIAGgFlgFpgFZoFZYBaYowdlPR8roAE8IXpwAAEYIIACUADMBeYCc4FZYVaYFWaFWWFWmBVmhVlhVpgNZoPZYDaYDeboQYmjP3pQakAFNIAnRA8OIAADBFAACoC5wlxhrjA3mBvMDeYGc4O5wdxgbjA3mBvMDrPD7DA7zA7z2oPxT+bP/eW4fzgd8ie95+v58a9f+N5+veId/Ab4enl5PDxdL4e40Vvf67d+fwA=",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
