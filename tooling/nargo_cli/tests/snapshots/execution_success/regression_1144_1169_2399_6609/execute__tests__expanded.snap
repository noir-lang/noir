---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
global NIBBLE_LENGTH: u32 = 16;

struct U4 {
    inner: u8,
}

impl U4 {
    fn zero() -> Self {
        Self { inner: 0 }
    }

    fn from_u8(x: u8) -> Self {
        Self { inner: x % 16 }
    }
}

impl Eq for U4 {
    fn eq(self, other: Self) -> bool {
        self.inner == other.inner
    }
}

fn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; 16], Field) {
    assert((2 * input.len()) <= NIBBLE_LENGTH);
    assert((length as u32) <= input.len());
    let mut nibble: [U4; 16] = [U4::zero(); 16];
    let first_nibble: U4 = U4::from_u8(input[0] >> 4);
    let parity: u1 = first_nibble.inner as u1;
    if parity == 1 {
        nibble[0] = U4::from_u8(input[0] & 15);
        for i in 1..input.len() {
            if (i as u32) < (length as u32) {
                let x: u8 = input[i];
                {
                    let i_3797: u32 = (2 * i) - 1;
                    nibble[i_3797] = U4::from_u8(x >> 4);
                };
                {
                    let i_3798: u32 = 2 * i;
                    nibble[i_3798] = U4::from_u8(x & 15);
                }
            }
        }
    } else {
        for i in 0..2 {
            if (i as u32) < ((length as u32) - 1) {
                let x: u8 = input[i + 1];
                {
                    let i_3801: u32 = 2 * i;
                    nibble[i_3801] = U4::from_u8(x >> 4);
                };
                {
                    let i_3802: u32 = (2 * i) + 1;
                    nibble[i_3802] = U4::from_u8(x & 15);
                }
            }
        }
    };
    let out: ([U4; 16], Field) = (nibble, ((2 * length) + (parity as Field)) - 2);
    out
}

fn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {
    assert((value.len() as u8) >= (value_length as u8));
    let mut out_value: [u8; 32] = [0; 32];
    if value_length == 0 {
        let out: ([u8; 32], Field) = (out_value, value_length);
        out
    } else if (value_length as u8) < 31 {
        out_value[0] = 128 + (value_length as u8);
        for i in 1..value.len() {
            out_value[i] = value[i - 1];
        }
        let out: ([u8; 32], Field) = (out_value, value_length + 1);
        out
    } else {
        let out: ([u8; 32], Field) = (out_value, 32);
        out
    }
}

fn bitshift_literal_0() -> u64 {
    let mut bits: u64 = 0;
    bits = bits | (1 << 0);
    bits
}

fn bitshift_literal_4() -> u64 {
    let mut bits: u64 = 0;
    bits = bits | (1 << 4);
    bits
}

fn bitshift_variable(idx: u8) -> u64 {
    let mut bits: u64 = 0;
    bits = bits | (1 << idx);
    bits
}

fn main(x: [u8; 5], z: Field, u: i16, v: i16) {
    let (nib, len): ([U4; 16], Field) = compact_decode(x, z);
    assert(len == 5);
    assert(
        [nib[0], nib[1], nib[2], nib[3], nib[4]]
            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],
    );
    let val1: [u8; 32] = [
        184, 143, 97, 230, 251, 218, 131, 251, 255, 250, 190, 54, 65, 18, 19, 116, 128, 57, 128, 24,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ];
    let val1_length: Field = 20;
    let enc_val1: ([u8; 32], Field) = enc(val1, val1_length);
    assert(
        enc_val1.0
            == [
                148, 184, 143, 97, 230, 251, 218, 131, 251, 255, 250, 190, 54, 65, 18, 19, 116, 128,
                57, 128, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
            ],
    );
    assert(enc_val1.1 == 21);
    let result_0: u64 = bitshift_literal_0();
    assert(result_0 == 1);
    let result_4: u64 = bitshift_literal_4();
    assert(result_4 == 16);
    let result_0: u64 = bitshift_variable(0);
    assert(result_0 == 1);
    let result_4: u64 = bitshift_variable(4);
    assert(result_4 == 16);
    assert((u % -13) == 0);
    assert((u % v) == 0);
    assert((u % -11) == 4);
    assert((-u % -11) == -4);
    assert((u % -11) == (u % (v + 2)));
    assert((-u % -11) == (-u % (v + 2)));
}
