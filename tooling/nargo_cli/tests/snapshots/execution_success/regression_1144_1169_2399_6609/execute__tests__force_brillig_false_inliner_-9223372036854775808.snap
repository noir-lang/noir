---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "v",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _185",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_6, 16)] []",
    "BLACKBOX::RANGE [(_7, 16)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(8)), Simple(Witness(9))]",
    "BLACKBOX::RANGE [(_8, 222)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "EXPR [ (1, _5) (-4294967296, _8) (-1, _9) 0 ]",
    "EXPR [ (-1, _8) (-1, _10) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_10, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(11))]",
    "EXPR [ (-1, _8, _11) (5096253676302562286669017222071363378443840053029366383258766538131, _11) (1, _12) -1 ]",
    "EXPR [ (-1, _8, _12) (5096253676302562286669017222071363378443840053029366383258766538131, _12) 0 ]",
    "EXPR [ (1, _9, _12) (268435454, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967301 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _14) (-1, _15) 4294967301 ]",
    "EXPR [ (-1, _14) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(16)), Simple(Witness(17))]",
    "BLACKBOX::RANGE [(_16, 4)] []",
    "BLACKBOX::RANGE [(_17, 4)] []",
    "EXPR [ (1, _0) (-16, _16) (-1, _17) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Simple(Witness(18)), Simple(Witness(19))]",
    "BLACKBOX::RANGE [(_18, 7)] []",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "EXPR [ (1, _16) (-2, _18) (-1, _19) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(20)), Simple(Witness(21))]",
    "BLACKBOX::RANGE [(_20, 4)] []",
    "BLACKBOX::RANGE [(_21, 4)] []",
    "EXPR [ (1, _0) (-16, _20) (-1, _21) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _22) (-1, _23) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _22, _19) (1, _19) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(24)), Simple(Witness(25))]",
    "BLACKBOX::RANGE [(_24, 4)] []",
    "BLACKBOX::RANGE [(_25, 5)] []",
    "EXPR [ (-1, _19, _22) (1, _19) (-1, _26) 0 ]",
    "EXPR [ (1, _25, _26) (-1, _27) 0 ]",
    "BLACKBOX::RANGE [(_27, 4)] []",
    "EXPR [ (1, _1, _26) (-16, _24, _26) (-1, _25, _26) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(28)), Simple(Witness(29))]",
    "BLACKBOX::RANGE [(_28, 4)] []",
    "BLACKBOX::RANGE [(_29, 4)] []",
    "EXPR [ (1, _1) (-16, _28) (-1, _29) 0 ]",
    "EXPR [ (-1, _26) (-1, _30) 1 ]",
    "EXPR [ (1, _19, _21) (-1, _31) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(32)), Simple(Witness(33))]",
    "BLACKBOX::RANGE [(_32, 1)] []",
    "BLACKBOX::RANGE [(_33, 32)] []",
    "EXPR [ (-1, _9) (-4294967296, _32) (-1, _33) 4294967298 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _32, _19) (1, _19) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(34)), Simple(Witness(35))]",
    "BLACKBOX::RANGE [(_34, 4)] []",
    "BLACKBOX::RANGE [(_35, 5)] []",
    "EXPR [ (-1, _19, _32) (1, _19) (-1, _36) 0 ]",
    "EXPR [ (1, _35, _36) (-1, _37) 0 ]",
    "BLACKBOX::RANGE [(_37, 4)] []",
    "EXPR [ (1, _2, _36) (-16, _34, _36) (-1, _35, _36) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(38)), Simple(Witness(39))]",
    "BLACKBOX::RANGE [(_38, 4)] []",
    "BLACKBOX::RANGE [(_39, 4)] []",
    "EXPR [ (1, _2) (-16, _38) (-1, _39) 0 ]",
    "EXPR [ (-1, _9, _19) (1, _9) (1, _19) (-1, _40) -1 ]",
    "BLACKBOX::RANGE [(_40, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(40))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(41)), Simple(Witness(42))]",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "BLACKBOX::RANGE [(_42, 32)] []",
    "EXPR [ (-1, _40) (-4294967296, _41) (-1, _42) 4294967296 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _19, _41) (-1, _19) (-1, _41) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(43)), Simple(Witness(44))]",
    "BLACKBOX::RANGE [(_43, 4)] []",
    "BLACKBOX::RANGE [(_44, 5)] []",
    "EXPR [ (1, _19, _41) (-1, _19) (-1, _41) (-1, _45) 1 ]",
    "EXPR [ (1, _44, _45) (-1, _46) 0 ]",
    "BLACKBOX::RANGE [(_46, 4)] []",
    "EXPR [ (-16, _43, _45) (-1, _180) 0 ]",
    "EXPR [ (1, _1, _45) (-1, _44, _45) (1, _180) 0 ]",
    "EXPR [ (-1, _45) (-1, _47) 1 ]",
    "EXPR [ (1, _21, _26) (1, _30, _31) (-1, _48) 0 ]",
    "EXPR [ (1, _24, _26) (-1, _49) 0 ]",
    "EXPR [ (1, _26, _29) (-1, _50) 0 ]",
    "EXPR [ (1, _34, _36) (-1, _51) 0 ]",
    "EXPR [ (1, _36, _39) (-1, _52) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(40))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(53)), Simple(Witness(54))]",
    "BLACKBOX::RANGE [(_53, 1)] []",
    "BLACKBOX::RANGE [(_54, 32)] []",
    "EXPR [ (-1, _40) (-4294967296, _53) (-1, _54) 4294967297 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _19, _53) (-1, _19) (-1, _53) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 16 })], outputs: [Simple(Witness(55)), Simple(Witness(56))]",
    "BLACKBOX::RANGE [(_55, 4)] []",
    "BLACKBOX::RANGE [(_56, 5)] []",
    "EXPR [ (1, _19, _53) (-1, _19) (-1, _53) (-1, _57) 1 ]",
    "EXPR [ (1, _56, _57) (-1, _58) 0 ]",
    "BLACKBOX::RANGE [(_58, 4)] []",
    "EXPR [ (-16, _55, _57) (-1, _185) 0 ]",
    "EXPR [ (1, _2, _57) (-1, _56, _57) (1, _185) 0 ]",
    "EXPR [ (-1, _57) (-1, _59) 1 ]",
    "EXPR [ (1, _47, _50) (-1, _60) 0 ]",
    "EXPR [ (1, _47, _51) (-1, _61) 0 ]",
    "EXPR [ (2, _5) (1, _19) -7 ]",
    "EXPR [ (1, _47, _48) (1368015179489954701390400359078579693034272775026002146481137761660988030976, _180) -15 ]",
    "EXPR [ (1, _29, _45) (1, _47, _49) -1 ]",
    "EXPR [ (1, _59, _60) (1368015179489954701390400359078579693034272775026002146481137761660988030976, _185) -12 ]",
    "EXPR [ (1, _39, _57) (1, _59, _61) -11 ]",
    "EXPR [ (1, _47, _52) -8 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(62)), Simple(Witness(63))]",
    "BLACKBOX::RANGE [(_62, 1)] []",
    "BLACKBOX::RANGE [(_63, 15)] []",
    "EXPR [ (1, _6) (-32768, _62) (-1, _63) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(62))], linear_combinations: [(1, Witness(6)), (65536, Witness(62))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 13 })], outputs: [Simple(Witness(64)), Simple(Witness(65))]",
    "BLACKBOX::RANGE [(_64, 13)] []",
    "BLACKBOX::RANGE [(_65, 4)] []",
    "EXPR [ (1, _65) (-1, _66) 3 ]",
    "BLACKBOX::RANGE [(_66, 4)] []",
    "EXPR [ (-2, _6, _62) (1, _6) (65536, _62) (-13, _64) (-1, _65) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(64))], q_c: 0 })], outputs: [Simple(Witness(67))]",
    "EXPR [ (1, _64, _67) (1, _68) -1 ]",
    "EXPR [ (1, _64, _68) 0 ]",
    "EXPR [ (2, _62, _64) (-65536, _62) (-1, _64) (-1, _69) 65536 ]",
    "EXPR [ (-1, _68) (-1, _70) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(65))], q_c: 0 })], outputs: [Simple(Witness(71))]",
    "EXPR [ (1, _65, _71) (1, _72) -1 ]",
    "EXPR [ (1, _65, _72) 0 ]",
    "EXPR [ (-2, _62, _65) (65536, _62) (1, _65) (-1, _73) 0 ]",
    "EXPR [ (-1, _72) (-1, _74) 1 ]",
    "EXPR [ (1, _73, _74) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(75)), Simple(Witness(76))]",
    "BLACKBOX::RANGE [(_75, 1)] []",
    "BLACKBOX::RANGE [(_76, 15)] []",
    "EXPR [ (1, _7) (-32768, _75) (-1, _76) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(77)), Simple(Witness(78))]",
    "BLACKBOX::RANGE [(_77, 1)] []",
    "BLACKBOX::RANGE [(_78, 15)] []",
    "EXPR [ (1, _6) (-32768, _77) (-1, _78) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(7), Witness(75))], linear_combinations: [(1, Witness(7)), (65536, Witness(75))], q_c: 0 })], outputs: [Simple(Witness(79))]",
    "EXPR [ (-2, _7, _75) (1, _7) (65536, _75) (-1, _80) 0 ]",
    "EXPR [ (1, _79, _80) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(77))], linear_combinations: [(1, Witness(6)), (65536, Witness(77))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(80))], q_c: 0 })], outputs: [Simple(Witness(81)), Simple(Witness(82))]",
    "BLACKBOX::RANGE [(_81, 16)] []",
    "BLACKBOX::RANGE [(_82, 16)] []",
    "EXPR [ (1, _80) (-1, _82) (-1, _83) -1 ]",
    "BLACKBOX::RANGE [(_83, 16)] []",
    "EXPR [ (-2, _6, _77) (-1, _80, _81) (1, _6) (65536, _77) (-1, _82) 0 ]",
    "EXPR [ (-1, _81) (-1, _84) 32768 ]",
    "EXPR [ (-2, _75, _77) (1, _75) (1, _77) (-1, _85) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(81))], q_c: 0 })], outputs: [Simple(Witness(86))]",
    "EXPR [ (1, _81, _86) (1, _87) -1 ]",
    "EXPR [ (1, _81, _87) 0 ]",
    "EXPR [ (2, _84, _85) (1, _81) (-1, _88) 0 ]",
    "EXPR [ (-1, _87) (-1, _89) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(82))], q_c: 0 })], outputs: [Simple(Witness(90))]",
    "EXPR [ (1, _82, _90) (1, _91) -1 ]",
    "EXPR [ (1, _82, _91) 0 ]",
    "EXPR [ (-2, _77, _82) (65536, _77) (1, _82) (-1, _92) 0 ]",
    "EXPR [ (-1, _91) (-1, _93) 1 ]",
    "EXPR [ (1, _92, _93) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(94)), Simple(Witness(95))]",
    "BLACKBOX::RANGE [(_94, 1)] []",
    "BLACKBOX::RANGE [(_95, 15)] []",
    "EXPR [ (1, _6) (-32768, _94) (-1, _95) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(94))], linear_combinations: [(1, Witness(6)), (65536, Witness(94))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 11 })], outputs: [Simple(Witness(96)), Simple(Witness(97))]",
    "BLACKBOX::RANGE [(_96, 13)] []",
    "BLACKBOX::RANGE [(_97, 4)] []",
    "EXPR [ (1, _97) (-1, _98) 5 ]",
    "BLACKBOX::RANGE [(_98, 4)] []",
    "EXPR [ (-2, _6, _94) (1, _6) (65536, _94) (-11, _96) (-1, _97) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(96))], q_c: 0 })], outputs: [Simple(Witness(99))]",
    "EXPR [ (1, _96, _99) (1, _100) -1 ]",
    "EXPR [ (1, _96, _100) 0 ]",
    "EXPR [ (2, _94, _96) (-65536, _94) (-1, _96) (-1, _101) 65536 ]",
    "EXPR [ (-1, _100) (-1, _102) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(97))], q_c: 0 })], outputs: [Simple(Witness(103))]",
    "EXPR [ (1, _97, _103) (1, _104) -1 ]",
    "EXPR [ (1, _97, _104) 0 ]",
    "EXPR [ (-2, _94, _97) (65536, _94) (1, _97) (-1, _105) 0 ]",
    "EXPR [ (-1, _104) (-1, _106) 1 ]",
    "EXPR [ (1, _105, _106) -4 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(6))], q_c: 131072 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(107)), Simple(Witness(108))]",
    "BLACKBOX::RANGE [(_107, 2)] []",
    "BLACKBOX::RANGE [(_108, 16)] []",
    "EXPR [ (-1, _6) (-65536, _107) (-1, _108) 131072 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(109)), Simple(Witness(110))]",
    "BLACKBOX::RANGE [(_109, 1)] []",
    "BLACKBOX::RANGE [(_110, 16)] []",
    "EXPR [ (1, _6) (-65536, _109) (-1, _110) 32768 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(108))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(111)), Simple(Witness(112))]",
    "BLACKBOX::RANGE [(_111, 1)] []",
    "BLACKBOX::RANGE [(_112, 16)] []",
    "EXPR [ (1, _108) (-65536, _111) (-1, _112) 32768 ]",
    "EXPR [ (-1, _109, _111) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(108))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(113)), Simple(Witness(114))]",
    "BLACKBOX::RANGE [(_113, 1)] []",
    "BLACKBOX::RANGE [(_114, 15)] []",
    "EXPR [ (1, _108) (-32768, _113) (-1, _114) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(108), Witness(113))], linear_combinations: [(1, Witness(108)), (65536, Witness(113))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 11 })], outputs: [Simple(Witness(115)), Simple(Witness(116))]",
    "BLACKBOX::RANGE [(_115, 13)] []",
    "BLACKBOX::RANGE [(_116, 4)] []",
    "EXPR [ (1, _116) (-1, _117) 5 ]",
    "BLACKBOX::RANGE [(_117, 4)] []",
    "EXPR [ (-2, _108, _113) (1, _108) (65536, _113) (-11, _115) (-1, _116) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(115))], q_c: 0 })], outputs: [Simple(Witness(118))]",
    "EXPR [ (1, _115, _118) (1, _119) -1 ]",
    "EXPR [ (1, _115, _119) 0 ]",
    "EXPR [ (2, _113, _115) (-65536, _113) (-1, _115) (-1, _120) 65536 ]",
    "EXPR [ (-1, _119) (-1, _121) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(116))], q_c: 0 })], outputs: [Simple(Witness(122))]",
    "EXPR [ (1, _116, _122) (1, _123) -1 ]",
    "EXPR [ (1, _116, _123) 0 ]",
    "EXPR [ (-2, _113, _116) (65536, _113) (1, _116) (-1, _124) 0 ]",
    "EXPR [ (-1, _123) (-1, _125) 1 ]",
    "EXPR [ (1, _124, _125) -65532 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 2 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(126)), Simple(Witness(127))]",
    "BLACKBOX::RANGE [(_126, 1)] []",
    "BLACKBOX::RANGE [(_127, 16)] []",
    "EXPR [ (1, _7) (-65536, _126) (-1, _127) 2 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(128)), Simple(Witness(129))]",
    "BLACKBOX::RANGE [(_128, 1)] []",
    "BLACKBOX::RANGE [(_129, 16)] []",
    "EXPR [ (1, _7) (-65536, _128) (-1, _129) 32768 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(127))], q_c: 32768 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(130)), Simple(Witness(131))]",
    "BLACKBOX::RANGE [(_130, 1)] []",
    "BLACKBOX::RANGE [(_131, 16)] []",
    "EXPR [ (1, _127) (-65536, _130) (-1, _131) 32768 ]",
    "EXPR [ (1, _128) (-1, _130) (-1, _132) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(132))], q_c: 0 })], outputs: [Simple(Witness(133))]",
    "EXPR [ (1, _132, _133) (1, _134) -1 ]",
    "EXPR [ (1, _132, _134) 0 ]",
    "EXPR [ (-1, _128, _134) (1, _128) (1, _134) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(127))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(135)), Simple(Witness(136))]",
    "BLACKBOX::RANGE [(_135, 1)] []",
    "BLACKBOX::RANGE [(_136, 15)] []",
    "EXPR [ (1, _127) (-32768, _135) (-1, _136) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(137)), Simple(Witness(138))]",
    "BLACKBOX::RANGE [(_137, 1)] []",
    "BLACKBOX::RANGE [(_138, 15)] []",
    "EXPR [ (1, _6) (-32768, _137) (-1, _138) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(127), Witness(135))], linear_combinations: [(1, Witness(127)), (65536, Witness(135))], q_c: 0 })], outputs: [Simple(Witness(139))]",
    "EXPR [ (-2, _127, _135) (1, _127) (65536, _135) (-1, _140) 0 ]",
    "EXPR [ (1, _139, _140) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(137))], linear_combinations: [(1, Witness(6)), (65536, Witness(137))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 })], outputs: [Simple(Witness(141)), Simple(Witness(142))]",
    "BLACKBOX::RANGE [(_141, 16)] []",
    "BLACKBOX::RANGE [(_142, 16)] []",
    "EXPR [ (1, _140) (-1, _142) (-1, _143) -1 ]",
    "BLACKBOX::RANGE [(_143, 16)] []",
    "EXPR [ (-2, _6, _137) (-1, _140, _141) (1, _6) (65536, _137) (-1, _142) 0 ]",
    "EXPR [ (-1, _141) (-1, _144) 32768 ]",
    "EXPR [ (-2, _135, _137) (1, _135) (1, _137) (-1, _145) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 })], outputs: [Simple(Witness(146))]",
    "EXPR [ (1, _141, _146) (1, _147) -1 ]",
    "EXPR [ (1, _141, _147) 0 ]",
    "EXPR [ (2, _144, _145) (1, _141) (-1, _148) 0 ]",
    "EXPR [ (-1, _147) (-1, _149) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(142))], q_c: 0 })], outputs: [Simple(Witness(150))]",
    "EXPR [ (1, _142, _150) (1, _151) -1 ]",
    "EXPR [ (1, _142, _151) 0 ]",
    "EXPR [ (-2, _137, _142) (65536, _137) (1, _142) (-1, _152) 0 ]",
    "EXPR [ (-1, _151) (-1, _153) 1 ]",
    "EXPR [ (-1, _152, _153) 4 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(127))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(154)), Simple(Witness(155))]",
    "BLACKBOX::RANGE [(_154, 1)] []",
    "BLACKBOX::RANGE [(_155, 15)] []",
    "EXPR [ (1, _127) (-32768, _154) (-1, _155) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(108))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32768 })], outputs: [Simple(Witness(156)), Simple(Witness(157))]",
    "BLACKBOX::RANGE [(_156, 1)] []",
    "BLACKBOX::RANGE [(_157, 15)] []",
    "EXPR [ (1, _108) (-32768, _156) (-1, _157) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(127), Witness(154))], linear_combinations: [(1, Witness(127)), (65536, Witness(154))], q_c: 0 })], outputs: [Simple(Witness(158))]",
    "EXPR [ (-2, _127, _154) (1, _127) (65536, _154) (-1, _159) 0 ]",
    "EXPR [ (1, _158, _159) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(108), Witness(156))], linear_combinations: [(1, Witness(108)), (65536, Witness(156))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 0 })], outputs: [Simple(Witness(160)), Simple(Witness(161))]",
    "BLACKBOX::RANGE [(_160, 16)] []",
    "BLACKBOX::RANGE [(_161, 16)] []",
    "EXPR [ (1, _159) (-1, _161) (-1, _162) -1 ]",
    "BLACKBOX::RANGE [(_162, 16)] []",
    "EXPR [ (-2, _108, _156) (-1, _159, _160) (1, _108) (65536, _156) (-1, _161) 0 ]",
    "EXPR [ (-1, _160) (-1, _163) 32768 ]",
    "EXPR [ (-2, _154, _156) (1, _154) (1, _156) (-1, _164) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(160))], q_c: 0 })], outputs: [Simple(Witness(165))]",
    "EXPR [ (1, _160, _165) (1, _166) -1 ]",
    "EXPR [ (1, _160, _166) 0 ]",
    "EXPR [ (2, _163, _164) (1, _160) (-1, _167) 0 ]",
    "EXPR [ (-1, _166) (-1, _168) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(161))], q_c: 0 })], outputs: [Simple(Witness(169))]",
    "EXPR [ (1, _161, _169) (1, _170) -1 ]",
    "EXPR [ (1, _161, _170) 0 ]",
    "EXPR [ (-2, _156, _161) (65536, _156) (1, _161) (-1, _171) 0 ]",
    "EXPR [ (-1, _170) (-1, _172) 1 ]",
    "EXPR [ (-1, _171, _172) 65532 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZjBTiM7EEX/JWsW7XKVy55feXoaBQijSFFAGRjpCc2/P7tdJwwLZtHZcA8JdbracXU3ed89Hu7ffnw/np+ef+6+/fO+u78cT6fjj++n54f96/H53F99/32349fvr5fDob+0++P9XvWyvxzOr7tv57fT6W73a396W//o58v+vObr/tLfXe52h/Njzy58Op4Og37ffVQvX5eKLCWqRaRcBfbZkL42qFoI1Opt9Z431FvJUW+ebqzfcv7WWMAiy4b64tf6tqX/YkJ92VLvyvl78S31TaO+LrKhvl77r5v2T1vYPy1t2T/VneO3LZ9fWq4NpEW2rEBrcpsgpYVzSGnTIvSqaw9J2yZD0avBN52FSMMgeVMPct3LSTZtpk89WLvVUL78LP56Sc7teklW32RwbgmiS9tgyL0sDFlTudUgaZMh29Wgy80G22Swj7Mo5VaDb1uH+nEW1W81tHyzYdOOsutcZMu6zaAfhk2fpqV8q6Gkq8E3raRp+8rwb/9t/3C8fHpI3Hmf4rtdXX+29WdaZqQZMiPP0Bk2o8yYjtQlfQFSW0OWGWlGt/SPWPIMnWEzuqU/pIjPqDPaGrlb+s0npxkyI8/oln6y2WaUGT6jjhtFzzZTl8gUKZE5UiNtXFh7lkiPrJFtPbTNtiytBzOZkWfMtsym0UqkR0ZnFp2V6KxEZ0XmkUqO1MjorAxf36nFI4evr2JpM32JTJHD11fSc6RGWmSJ9Mga2WbWJTJFDl/tGf3VWLka/dUyj1s9Mvqr0V8LXwtfi/5a9Neivxb9teivRX8t+mvRX39Amg2lZWzYsQGXsWV1QAYUMKAAY/PagAq0gHUQVkiAABlQwIACYE6YE2bBLJgFs2AWzIJZMI9RkXHuY1jEB7SAMTATEiBABhQwoAAOYM6YFbNiVsyKWTErZsWsmBWzYjbMhtkwG2bDbJgN85gsGRtgjNa4DaQxWyuM4ZqQAAEyoIABBXAAc8HsmB2zY3bMjtkxO2bHPMYtLwPGZTONq+gCJECADChgQAEcqADmhrlhHsM3Hs3TmL4JChhQAAcq0CbImMEJCRAgAwoYUAAHKoA5YU6Yxwzm9c4yzDpAAQMK4EAFWsB6g1ohAQJgFsyCWTALZsEsmMcM5vVulwABMqCAAQVwoAItQDErZsWsmBWzYlbMilkxK2bDbJgNs2E2zIbZMBtmwzxmMI8b+ZjB7AMSIEAGFDCgAA5UoAU4ZsfsmB2zY3bMjtkxO2bHXDFXzBVzxVwxV8wVc8VcMa8zOP5l/LW/HPf3p0N8Qff0dn744/u61/9eeIdv9F4uzw+Hx7fLYTy2re/1B7n/AQ==",
  "file_map": {
    "50": {
      "source": "global NIBBLE_LENGTH: u32 = 16;\n\nstruct U4 {\n    inner: u8,\n}\n\nimpl U4 {\n    fn zero() -> U4 {\n        U4 { inner: 0 }\n    }\n\n    fn from_u8(x: u8) -> U4 {\n        U4 { inner: x % 16 }\n    }\n}\n\nimpl Eq for U4 {\n    fn eq(self, other: Self) -> bool {\n        self.inner == other.inner\n    }\n}\n\nfn compact_decode<let N: u32>(input: [u8; N], length: Field) -> ([U4; NIBBLE_LENGTH], Field) {\n    assert(2 * input.len() <= NIBBLE_LENGTH);\n    assert(length as u32 <= input.len());\n\n    let mut nibble = [U4::zero(); NIBBLE_LENGTH];\n\n    let first_nibble = U4::from_u8(input[0] >> 4);\n    let parity = first_nibble.inner as u1;\n\n    if parity == 1 {\n        nibble[0] = U4::from_u8(input[0] & 0x0f);\n        for i in 1..input.len() {\n            if i as u32 < length as u32 {\n                let x = input[i];\n                nibble[2 * i - 1] = U4::from_u8(x >> 4);\n                nibble[2 * i] = U4::from_u8(x & 0x0f);\n            }\n        }\n    } else {\n        for i in 0..2 {\n            if (i as u32) < length as u32 - 1 {\n                let x = input[i + 1];\n                nibble[2 * i] = U4::from_u8(x >> 4);\n                nibble[2 * i + 1] = U4::from_u8(x & 0x0f);\n            }\n        }\n    }\n\n    let out = (nibble, 2 * length + (parity as Field) - 2);\n\n    out\n}\n\nfn enc<let N: u32>(value: [u8; N], value_length: Field) -> ([u8; 32], Field) {\n    assert(value.len() as u8 >= value_length as u8);\n    let mut out_value = [0; 32];\n    if value_length == 0 {\n        let out = (out_value, value_length);\n        out\n    } else if value_length as u8 < 31 {\n        out_value[0] = 0x80 + value_length as u8;\n\n        for i in 1..value.len() {\n            out_value[i] = value[i - 1];\n        }\n\n        let out = (out_value, value_length + 1);\n\n        out\n    } else {\n        let out = (out_value, 32);\n        out\n    }\n}\n\nfn bitshift_literal_0() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 0;\n\n    bits\n}\nfn bitshift_literal_4() -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << 4;\n\n    bits\n}\nfn bitshift_variable(idx: u8) -> u64 {\n    let mut bits: u64 = 0;\n    bits |= 1 << idx;\n\n    bits\n}\n\nfn main(x: [u8; 5], z: Field, u: i16, v: i16) {\n    //Issue 1144\n    let (nib, len) = compact_decode(x, z);\n    assert(len == 5);\n    assert(\n        [nib[0], nib[1], nib[2], nib[3], nib[4]]\n            == [U4::from_u8(15), U4::from_u8(1), U4::from_u8(12), U4::from_u8(11), U4::from_u8(8)],\n    );\n    // Issue 1169\n    let val1 = [\n        0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41, 0x12, 0x13,\n        0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n        0x00, 0x00,\n    ];\n    let val1_length = 20;\n\n    let enc_val1 = enc(val1, val1_length);\n\n    assert(\n        enc_val1.0\n            == [\n                0x94, 0xb8, 0x8f, 0x61, 0xe6, 0xfb, 0xda, 0x83, 0xfb, 0xff, 0xfa, 0xbe, 0x36, 0x41,\n                0x12, 0x13, 0x74, 0x80, 0x39, 0x80, 0x18, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,\n                0x00, 0x00, 0x00, 0x00,\n            ],\n    );\n    assert(enc_val1.1 == 21);\n    // Issue 2399\n    let result_0 = bitshift_literal_0();\n    assert(result_0 == 1);\n    let result_4 = bitshift_literal_4();\n    assert(result_4 == 16);\n    let result_0 = bitshift_variable(0);\n    assert(result_0 == 1);\n    let result_4 = bitshift_variable(4);\n    assert(result_4 == 16);\n\n    // Issue 6609\n    assert(u % -13 == 0);\n    assert(u % v == 0);\n    assert(u % -11 == 4);\n    assert(-u % -11 == -4);\n    assert(u % -11 == u % (v + 2));\n    assert(-u % -11 == -u % (v + 2));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
