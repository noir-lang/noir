---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 17 }, Call { location: 18 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 233 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U32) }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U32) }, Cast { destination: Relative(7), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 2147483648 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(8) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(6) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(8) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(9) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(4), rhs: Relative(7) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(7) }, JumpIf { condition: Relative(4), location: 34 }, Call { location: 239 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 39 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(5) }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U32) }, Not { destination: Relative(7), source: Relative(6), bit_size: U1 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U1, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 49 }, Call { location: 242 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(7), source: Relative(5) }, Cast { destination: Relative(5), source: Relative(7), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(6) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(10) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(10) }, JumpIf { condition: Relative(5), location: 59 }, Call { location: 239 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4294967293 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 64 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, Mov { destination: Relative(7), source: Relative(5) }, Cast { destination: Relative(5), source: Relative(7), bit_size: Integer(U32) }, Cast { destination: Relative(10), source: Relative(3), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(10), source: Relative(6), bit_size: U1 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(10) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(6) }, JumpIf { condition: Relative(5), location: 77 }, Call { location: 242 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4294967289 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 82 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Relative(1) }, Mov { destination: Relative(1), source: Relative(3) }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U32) }, Not { destination: Relative(5), source: Relative(9), bit_size: U1 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(6), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 91 }, Call { location: 242 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(3) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(10) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(10) }, JumpIf { condition: Relative(7), location: 99 }, Call { location: 242 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(7), source: Relative(3) }, Cast { destination: Relative(3), source: Relative(7), bit_size: Integer(U32) }, Not { destination: Relative(9), source: Relative(5), bit_size: U1 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(9) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(6) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(5) }, JumpIf { condition: Relative(3), location: 110 }, Call { location: 242 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4294967283 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 115 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(3) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(4), rhs: Relative(9) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(9) }, JumpIf { condition: Relative(5), location: 123 }, Call { location: 242 }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Cast { destination: Relative(5), source: Relative(3), bit_size: Integer(U64) }, Cast { destination: Relative(7), source: Relative(5), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(7), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(4) }, Not { destination: Relative(7), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(9), source: Relative(1), bit_size: Field }, Cast { destination: Relative(10), source: Relative(6), bit_size: Field }, BinaryFieldOp { destination: Relative(6), op: Mul, lhs: Relative(10), rhs: Relative(9) }, Const { destination: Relative(10), bit_size: Field, value: 4294967296 }, BinaryFieldOp { destination: Relative(11), op: Sub, lhs: Relative(10), rhs: Relative(9) }, Cast { destination: Relative(9), source: Relative(7), bit_size: Field }, BinaryFieldOp { destination: Relative(7), op: Mul, lhs: Relative(9), rhs: Relative(11) }, BinaryFieldOp { destination: Relative(9), op: Add, lhs: Relative(6), rhs: Relative(7) }, Not { destination: Relative(6), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(7), source: Relative(2), bit_size: Field }, Cast { destination: Relative(11), source: Relative(4), bit_size: Field }, BinaryFieldOp { destination: Relative(12), op: Mul, lhs: Relative(11), rhs: Relative(7) }, BinaryFieldOp { destination: Relative(11), op: Sub, lhs: Relative(10), rhs: Relative(7) }, Cast { destination: Relative(7), source: Relative(6), bit_size: Field }, BinaryFieldOp { destination: Relative(6), op: Mul, lhs: Relative(7), rhs: Relative(11) }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(12), rhs: Relative(6) }, BinaryFieldOp { destination: Relative(6), op: Mul, lhs: Relative(9), rhs: Relative(7) }, Cast { destination: Relative(9), source: Relative(6), bit_size: Field }, Const { destination: Relative(11), bit_size: Field, value: 4294967295 }, BinaryFieldOp { destination: Relative(12), op: LessThanEquals, lhs: Relative(9), rhs: Relative(11) }, JumpIf { condition: Relative(12), location: 151 }, Call { location: 245 }, Cast { destination: Relative(9), source: Relative(6), bit_size: Integer(U32) }, Not { destination: Relative(6), source: Relative(5), bit_size: U1 }, Cast { destination: Relative(5), source: Relative(6), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(5), location: 159 }, Call { location: 239 }, Cast { destination: Relative(5), source: Relative(3), bit_size: Integer(U32) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(9), location: 165 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(3), bit_size: Integer(U16), value: 248 }, Cast { destination: Relative(5), source: Relative(3), bit_size: Integer(U8) }, Const { destination: Relative(3), bit_size: Integer(U8), value: 248 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(9), location: 172 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(14), bit_size: Integer(U32), value: 2147483647 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 178 }, Jump { location: 180 }, Mov { destination: Relative(9), source: Relative(16) }, Jump { location: 182 }, Mov { destination: Relative(9), source: Relative(1) }, Jump { location: 182 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 2147483647 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, JumpIf { condition: Relative(11), location: 188 }, Jump { location: 190 }, Mov { destination: Relative(12), source: Relative(16) }, Jump { location: 192 }, Mov { destination: Relative(12), source: Relative(1) }, Jump { location: 192 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U32, lhs: Relative(9), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: Xor, bit_size: U1, lhs: Relative(5), rhs: Relative(11) }, JumpIf { condition: Relative(13), location: 196 }, Jump { location: 198 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(14), rhs: Relative(3) }, BinaryIntOp { destination: Relative(1), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U64) }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(1), source: Relative(5), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(5), rhs: Relative(4) }, Not { destination: Relative(4), source: Relative(5), bit_size: U1 }, Cast { destination: Relative(9), source: Relative(3), bit_size: Field }, Cast { destination: Relative(3), source: Relative(5), bit_size: Field }, BinaryFieldOp { destination: Relative(5), op: Mul, lhs: Relative(3), rhs: Relative(9) }, BinaryFieldOp { destination: Relative(3), op: Sub, lhs: Relative(10), rhs: Relative(9) }, Cast { destination: Relative(9), source: Relative(4), bit_size: Field }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(9), rhs: Relative(3) }, BinaryFieldOp { destination: Relative(3), op: Add, lhs: Relative(5), rhs: Relative(4) }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(3), rhs: Relative(7) }, Cast { destination: Relative(3), source: Relative(4), bit_size: Field }, Const { destination: Relative(5), bit_size: Field, value: 4294967295 }, BinaryFieldOp { destination: Relative(7), op: LessThanEquals, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 219 }, Call { location: 245 }, Cast { destination: Relative(3), source: Relative(4), bit_size: Integer(U32) }, Not { destination: Relative(4), source: Relative(2), bit_size: U1 }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 226 }, Call { location: 239 }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 4294967288 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 232 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 238 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pZfLTuNAEEX/xWsvXF1V/eBXEEIhGBTJSiKTjDRC+ffp9vVlYMHG2eScYOo4it12/Nm9ji/X9+fD8e300T08fnYv82GaDu/P02m/uxxOx/rXz25oL1K6B+m7MAACBEABAxyIQAIygIqioqgoKoqK1kqocCACCchArWjf2QAIEAAFDHAgAgnIQK1Y3/kACBAABQxwIAIJyECteN/FARAgAArUSqxwIAIJyEBZkAZAgAAogEpCJaGSaiVVZKAsyAMgQK3kCgUMcCACCchAWVAGoFZKRQAUMMCBCCQgA+1ID30nw0ARSqAoxShOiZREyRSWpZWliVACRSlGaeXQJFISJVPKKstZvohQAqWVtYlRnBIpiZIpZZXlzF9EKIHCsrKsLCvLyrKyrCwby8aysWwsG8vGsrFsLBvLxrKz7Cw7y86ys+wsO8vOsrPsLLdVI9ZEKIGiFKO0sjeJlFaOTTKlrNJWEkQorZyaKMUoTomURMmUskpbXRChsJxZzixnljPLmeXMcma5sFxYLiwXlgvLheXCcmG5rUDJTQokLGtwEaEEilKM4pRISZRMYVlYFpaFZWFZWBaWhWVhWVgWlgPLgeXAcmA5sBxYDiwva7A0yZSyyrIGF2nlcrv1He93z5d5HNvt7tsNsN4Wz7t5PF66h+N1mvruz266Lv/0cd4dF152c91ar0nj8bWyBt8O09js1v+fHn4frVeKdbheBr7GfdN82TIfjfMxbpiv58o6X0+EO+fTlvmknE/5vvlsG+Y1yDqvYcvxU+X+VX3LfOL3p1nunN/y/Znw85ts+fzmzvk43Dm/5fz1r/PPRe+c37L+/Ov4u+b75i3cOf9z/0/13W5/mH88EtxaaT7sXqZxfft2Pe6/bb38PXMLHynO82k/vl7nsZW+PVfU18dQdx80P7XfYO2thT6YPd3a7v8B",
  "file_map": {
    "50": {
      "source": "fn main(mut x: i32, mut y: i32, z: i32) {\n    let mut s1: i8 = 5;\n    let mut s2: i8 = 8;\n    assert(s1 + s2 == 13);\n    assert(x + y == 13);\n\n    s2 = -8;\n    y = -y;\n    assert(s1 + s2 == -3);\n    assert(x + y == -3);\n\n    s1 = -15;\n    assert(s1 - s2 == -7);\n    assert(z - y == -7);\n\n    s1 = -5;\n    s2 = 8;\n    x = -x;\n    y = -y;\n    assert(s1 - s2 == -13);\n    assert(x - y == -13);\n\n    s2 = -8;\n    y = -y;\n    assert(s1 * s2 == 40);\n    assert(x * y == 40);\n\n    s1 = 1;\n    s2 = -8;\n    assert(s1 * s2 == -8);\n    assert(x / x * y == -8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
