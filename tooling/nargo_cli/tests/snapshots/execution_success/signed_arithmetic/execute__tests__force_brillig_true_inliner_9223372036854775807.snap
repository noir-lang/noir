---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VaPXPkRBCd0Ye1snzHcfwDElLJlr1ykWyALyMhJdrbZUMSQhL/C0IiMiKKIqIoAoo/QUYECa6iiirCO52nz31vX4/Wa8m+mypXS5pW9+s3PT0zWnt33ZKXfz5cZ0GmbruJziLI+m6tGdFWPSVO/47gTCbC+UYy+JAwVpOg/g+yDDJR/emIQZfgd0z7Xd3OSxLfiPhPymAzm9h+Po39ugh2Prm8sa9jEb8p6OE7qdK5UDoXhs4zpfMMdB6Fa++2fUmfzuEL6NP5LrZnL//edzfXT8N1Cb6myD+Nd+zx+4DgF19ViPVv1afH1wUs1vvCp869DN5juaLHur8+AP9MpyD+RUc4nI3MYRek4JJakRvYZxDHAdEvIvrSpznT9Q95OiT2s4j9jNg/NHzpPs23fre4pf1C4dX6HwbZ470K1xPXzTXjXDhk+ZyD/keA83AanPVTZRc5nZij13mP8xZ9Yj3Q+aLXB7SF8zhx23klOS/31rzSdjHvpS8hdlkeC79W7cI8Fv0myN7/vwYG53arqQXxnUaweLDLYojVkkrFdBtOtf3K8KX7WG7g/NnFvq59Wv/jIFktGXuPtLlua8Y5q/c5YBb9BeCsRsYpjdUS7cua66l6Nlaepo7XTfStn+fGe5KbCemL1Y/M8I25OPbcSEE/VfgdsX+wg/2U6OPc+DRIXZ9Kx7lfhPt6zxbmxjnDzOZGamD+DHAejIwzNjeQd5afGej0Dc8n+l02p1Avcds5oM+psXVQ250Z+K11MAd9th9NiT7ujT4Pkq2DQxzG9hIxDhNiFzHuy1FsnRriCNcp0V8FuStHnsTKanCMI9STPCtJrBoPqzc6b6xzw205t84N1rmH5QbL4yH7mMei/2WQ91gvT+5aL78CnA9xLnmoua7PavvOdWu/bM2DlOjjmHwdZGyuJy4+19m+IwXcsT2n6A/VhcztPu8zhR3t6H2X+EQ+sd/at+Ezts8T25j3fVsEWe/XGrkQX7hnZjhYzIXbjqmAmLR+BbqlwQezw8ZJ42Lf03R/Zbwvz47AX0WwODfMVxHBtUsOFMSPhePIsM3slhGMpWEHz299WwRZ79nCurDBGApn50sOut8E2def/3aIReoDyyX2HSOP2PDOrgczYhdrTz6AlZ0L+rYIsr5ba7CWf+tuuLyK8IBr31T7hut23HngKBvAlYP+d8DnQ3yDYByN96PnphsaJ29g8CNiYOPkbzFO379F4/R4ZN/zUOtiNeAxjIvG895EXIivJ2AffXoYM8H/Q5B9jfoxXMueV9e0J0rvp4ieJ3r3NSbVOz4mgv9nxeEvwPWRMSa/RvQ80fPuzbms9996PNHOI8WhPNe1Add50f9NYfhd2ZgiL3Ac2FkPfeoYhS997mFnvBTu9bu9tNY5PCOys1Vu2LG+Kwx9V9Lv4VlT+rKIf+HDG3qaj5Jg1P2p8T4+S4g+njNw7HY977BzA8ZpxcHuc8M2s8vOt4wbbQd/J+rbIsh6z4b7d8FSOHuc8FvhH0Gy/TuLRZ6zXGJnvSRiw7ttntj+HednomKJYc1B/08V61UEpwecU/2fThi+DutcNoALvyX+FeTUv9mzfZv4qpzad16O73/eXa8Hr8bs8oYHPY8d+M9B/59wr2uMjmOxJ87NfNlsTpab5elyvW5XS+Spb/r/osb2354u56vlvGnO2+aLtjm9b//HXXd2fvy8bufr1Wbdnty3/7P2rOm6Zbc6W23O29XzIf8vAKUWr0u9LAAA",
  "debug_symbols": "ldrfauJAFIDxd8m1F3P+zZzpqyxLsa0tgmixdmEpfffVpZaSBMN3I0b8MYEPyXiYj+Fp8/D+cr/dPx/ehrtfH8Pu8Lg+bQ/789XH52p4OG53u+3L/c+Ph3J5kf7/+2+v6/3l8u20Pp6GO9FcDZv90/md2dk/b3eb4S7K5+/VoAULwUKxMCwci8CiYtGwSCxwc8PNDTc33Nxwc1ts3scisKhYNCwSi/nm1a+i1pHwgoVgoVgYFo5FYFGxaFgkFrPNtdQvoSIjEQULwUKxMCwci8CiYtGwSCwWm7eRqAULwUKxMCzmmze7ipZjEVhULBoWiUWnohUsBAvFwrDAzRtu3nDzttQ8fSwSi05FFiwEi9nmpvIlTMc7sjQsHIvAomLRsEgsOhW9YDHb3Oza3CzGQrEwLByLwKJi0bBILOabt+tz0HK8A5BSOBFOlBPjxDkJTionjZPkhNeXxfo5IcKJcmKcOCez9V2uvzCXmJDKSeMkOemYzA/nbhPhRDmZre8RV1LLhDgnwUnlpHGSnHRM5sd0t4lwopzw+sbrG69vvL7x+sbrG6/vvL7z+s7rO6/vvL7z+s7rO6/vvL7z+sHrB68fvH7w+sHrB68fvH7w+sHrB69fF+vXCRFOlBPjxDmZrR/f08IQm5DKSVsifUKSk47J/DjvNhFOZuvH95/XsMlufH6id5s4J8FJ5aRxkpx0TOYHe7eJcMLrJ6+fvH7y+snrJ6+fvH7y+p3X77x+5/U7r995/c7rd16/8/p9qb7rhHRKtBROhBPlxDhxToKTyknjJDnh9YXXF15feH3h9YXXF15feH3h9YXXF15feX3l9ZXXV15feX3l9ZXX18X6OSHJScfECifCyOf56s/6uF0/7DZfB0mf3/ePP86Vnv6+bkZHTF+Ph8fN0/txczls+uOc6eV29byUWl6edZdbUdeVup/XOa/1Dw==",
  "file_map": {
    "50": {
      "source": "fn main(mut x: i32, mut y: i32, z: i32) {\n    let mut s1: i8 = 5;\n    let mut s2: i8 = 8;\n    assert(s1 + s2 == 13);\n    assert(x + y == 13);\n\n    s2 = -8;\n    y = -y;\n    assert(s1 + s2 == -3);\n    assert(x + y == -3);\n\n    s1 = -15;\n    assert(s1 - s2 == -7);\n    assert(z - y == -7);\n\n    s1 = -5;\n    s2 = 8;\n    x = -x;\n    y = -y;\n    assert(s1 - s2 == -13);\n    assert(x - y == -13);\n\n    s2 = -8;\n    y = -y;\n    assert(s1 * s2 == 40);\n    assert(x * y == 40);\n\n    s1 = 1;\n    s2 = -8;\n    assert(s1 * s2 == -8);\n    assert(x / x * y == -8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
