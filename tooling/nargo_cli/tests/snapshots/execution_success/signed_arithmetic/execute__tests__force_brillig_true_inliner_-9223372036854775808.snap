---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "361444214588792908": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "1998584279744703196": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "13301295855638053177": {
        "error_kind": "string",
        "string": "Attempt to divide with overflow"
      },
      "14990209321349310352": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "15764276373176857197": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 17 }, Call { location: 18 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 231 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U32) }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U32) }, Cast { destination: Relative(7), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 2147483648 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(8) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(6) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(8) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(9) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(4), rhs: Relative(7) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(7) }, JumpIf { condition: Relative(4), location: 34 }, Call { location: 237 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 39 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(5) }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U32) }, Not { destination: Relative(7), source: Relative(6), bit_size: U1 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U1, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 49 }, Call { location: 240 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(7), source: Relative(5) }, Cast { destination: Relative(5), source: Relative(7), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(6) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(10) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(10) }, JumpIf { condition: Relative(5), location: 59 }, Call { location: 237 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4294967293 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 64 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, Mov { destination: Relative(7), source: Relative(5) }, Cast { destination: Relative(5), source: Relative(7), bit_size: Integer(U32) }, Cast { destination: Relative(10), source: Relative(3), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(10), source: Relative(6), bit_size: U1 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(10) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(6) }, JumpIf { condition: Relative(5), location: 77 }, Call { location: 240 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4294967289 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 82 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Relative(1) }, Mov { destination: Relative(1), source: Relative(3) }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U32) }, Not { destination: Relative(5), source: Relative(9), bit_size: U1 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(6), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 91 }, Call { location: 240 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(3) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(10) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(10) }, JumpIf { condition: Relative(7), location: 99 }, Call { location: 240 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(7), source: Relative(3) }, Cast { destination: Relative(3), source: Relative(7), bit_size: Integer(U32) }, Not { destination: Relative(9), source: Relative(5), bit_size: U1 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(9) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(6) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(3), rhs: Relative(5) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(5) }, JumpIf { condition: Relative(3), location: 110 }, Call { location: 240 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4294967283 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 115 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(3) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(4), rhs: Relative(9) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(9) }, JumpIf { condition: Relative(5), location: 123 }, Call { location: 240 }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Cast { destination: Relative(5), source: Relative(3), bit_size: Integer(U64) }, Cast { destination: Relative(7), source: Relative(5), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(7), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(4) }, Not { destination: Relative(7), source: Relative(6), bit_size: U1 }, Cast { destination: Relative(9), source: Relative(1), bit_size: Field }, Cast { destination: Relative(10), source: Relative(6), bit_size: Field }, BinaryFieldOp { destination: Relative(6), op: Mul, lhs: Relative(10), rhs: Relative(9) }, Const { destination: Relative(10), bit_size: Field, value: 4294967296 }, BinaryFieldOp { destination: Relative(11), op: Sub, lhs: Relative(10), rhs: Relative(9) }, Cast { destination: Relative(9), source: Relative(7), bit_size: Field }, BinaryFieldOp { destination: Relative(7), op: Mul, lhs: Relative(9), rhs: Relative(11) }, BinaryFieldOp { destination: Relative(9), op: Add, lhs: Relative(6), rhs: Relative(7) }, Not { destination: Relative(6), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(7), source: Relative(2), bit_size: Field }, Cast { destination: Relative(11), source: Relative(4), bit_size: Field }, BinaryFieldOp { destination: Relative(12), op: Mul, lhs: Relative(11), rhs: Relative(7) }, BinaryFieldOp { destination: Relative(11), op: Sub, lhs: Relative(10), rhs: Relative(7) }, Cast { destination: Relative(7), source: Relative(6), bit_size: Field }, BinaryFieldOp { destination: Relative(6), op: Mul, lhs: Relative(7), rhs: Relative(11) }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(12), rhs: Relative(6) }, BinaryFieldOp { destination: Relative(6), op: Mul, lhs: Relative(9), rhs: Relative(7) }, Cast { destination: Relative(9), source: Relative(6), bit_size: Field }, Const { destination: Relative(11), bit_size: Field, value: 4294967295 }, BinaryFieldOp { destination: Relative(12), op: LessThanEquals, lhs: Relative(9), rhs: Relative(11) }, JumpIf { condition: Relative(12), location: 151 }, Call { location: 243 }, Cast { destination: Relative(9), source: Relative(6), bit_size: Integer(U32) }, Not { destination: Relative(6), source: Relative(5), bit_size: U1 }, Cast { destination: Relative(5), source: Relative(6), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(5), location: 159 }, Call { location: 243 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 40 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U64, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 164 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(14), bit_size: Integer(U32), value: 2147483647 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 170 }, Jump { location: 172 }, Mov { destination: Relative(9), source: Relative(16) }, Jump { location: 174 }, Mov { destination: Relative(9), source: Relative(1) }, Jump { location: 174 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 2147483647 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, JumpIf { condition: Relative(11), location: 180 }, Jump { location: 182 }, Mov { destination: Relative(12), source: Relative(16) }, Jump { location: 184 }, Mov { destination: Relative(12), source: Relative(1) }, Jump { location: 184 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U32, lhs: Relative(9), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: Xor, bit_size: U1, lhs: Relative(5), rhs: Relative(11) }, JumpIf { condition: Relative(13), location: 188 }, Jump { location: 191 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(14), rhs: Relative(3) }, Jump { location: 197 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 2147483648 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(14) }, JumpIf { condition: Relative(15), location: 196 }, JumpIf { condition: Relative(15), location: 196 }, Call { location: 246 }, Jump { location: 197 }, BinaryIntOp { destination: Relative(1), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U64) }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(1), source: Relative(5), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(5), rhs: Relative(4) }, Not { destination: Relative(4), source: Relative(5), bit_size: U1 }, Cast { destination: Relative(9), source: Relative(3), bit_size: Field }, Cast { destination: Relative(3), source: Relative(5), bit_size: Field }, BinaryFieldOp { destination: Relative(5), op: Mul, lhs: Relative(3), rhs: Relative(9) }, BinaryFieldOp { destination: Relative(3), op: Sub, lhs: Relative(10), rhs: Relative(9) }, Cast { destination: Relative(9), source: Relative(4), bit_size: Field }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(9), rhs: Relative(3) }, BinaryFieldOp { destination: Relative(3), op: Add, lhs: Relative(5), rhs: Relative(4) }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(3), rhs: Relative(7) }, Cast { destination: Relative(3), source: Relative(4), bit_size: Field }, Const { destination: Relative(5), bit_size: Field, value: 4294967295 }, BinaryFieldOp { destination: Relative(7), op: LessThanEquals, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 218 }, Call { location: 243 }, Cast { destination: Relative(3), source: Relative(4), bit_size: Integer(U32) }, Not { destination: Relative(4), source: Relative(2), bit_size: U1 }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 225 }, Call { location: 243 }, Const { destination: Relative(2), bit_size: Integer(U64), value: 4294967288 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 230 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 236 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15764276373176857197 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14990209321349310352 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 1998584279744703196 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 361444214588792908 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 13301295855638053177 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
