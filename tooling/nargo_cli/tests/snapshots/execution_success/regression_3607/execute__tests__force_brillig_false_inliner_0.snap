---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _22",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(1))]",
    "EXPR [ (1, _0, _1) (1, _2) -1 ]",
    "EXPR [ (1, _0, _2) 0 ]",
    "EXPR [ (1, _0, _2) (1, _2) (-1, _3) 0 ]",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(4))]",
    "EXPR [ (1, _0, _4) (1, _5) -1 ]",
    "EXPR [ (1, _0, _5) 0 ]",
    "EXPR [ (1, _2, _5) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _2) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "EXPR [ (1, _0, _2) (-1, _21) 0 ]",
    "EXPR [ (-1, _2, _2) (-1, _22) 0 ]",
    "EXPR [ (-1, _2, _7) (-1, _8) (1, _21) (1, _22) 0 ]",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "EXPR [ (1, _0, _6) (1, _7) (-1, _9) 0 ]",
    "EXPR [ (-1, _2, _9) (1, _2) (1, _21) 0 ]",
    "EXPR [ (-1, _0, _2) (1, _0) (-1, _2) (-1, _10) 1 ]",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(11))]",
    "EXPR [ (1, _0, _11) (1, _12) -1 ]",
    "EXPR [ (1, _0, _12) 0 ]",
    "EXPR [ (-1, _2, _12) (1, _12) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (-1, _2) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(13)), Simple(Witness(14))]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "BLACKBOX::RANGE [(_14, 32)] []",
    "EXPR [ (-1, _0, _2) (1, _2, _14) (1, _0) (2, _2) (-1, _14) (-1, _15) (1, _22) -1 ]",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "EXPR [ (1, _0, _13) (1, _14) (-1, _16) 0 ]",
    "EXPR [ (-1, _2) (-1, _17) 1 ]",
    "EXPR [ (1, _0, _17) (-1, _16, _17) (1, _17) 0 ]",
    "EXPR [ (1, _2, _6) (1, _0) (-1, _18) (-1, _21) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(2), Witness(18)), (1, Witness(17), Witness(13))], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(19))]",
    "EXPR [ (1, _2, _18) (1, _13, _17) (-1, _20) 0 ]",
    "EXPR [ (1, _19, _20) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "nZPRboQgEEX/ZZ55cERc3V9pGoOKGxKChpVNGrP/3pGRdvehSePLPcJwL2SEDUbTx1tn/TTf4fqxQR+sc/bWuXnQq509zW5PAXnYrcEYmoKXOrkWHYxf4eqjcwIe2sW06L5on7jqQNVCgPEjkQIn68z+9RS/7uJva9keXql+zOrfboWHW9Vn3PncNZ5wN/nkbXXG3WR3e8KNmO1Yvu/+SSM92PD2nwFpoYAyqUxaUesFqKQ1dV/AJWmTtE2KBQMZJUMyKoZicARyBnIIUkpFuxYMSlGEkiEZFUMxasaF0TDaBFkwOEVyiuQUSSk1QTEoZb8NDx2s7p05LvoU/fBy79evJVfyy1jCPJgxBrP3LtWom98=",
  "file_map": {
    "50": {
      "source": "fn main(mut x: u32) {\n    if x == 0 {\n        x = (x + 1) / x;\n    } else {\n        x = (x + 1) / x;\n    }\n    assert(x != 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient"
  ]
}
