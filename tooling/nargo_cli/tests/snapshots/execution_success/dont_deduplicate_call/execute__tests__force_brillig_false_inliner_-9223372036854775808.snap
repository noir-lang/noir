---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "active",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _1) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(2))]",
    "BLACKBOX::RANGE [(_2, 1)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "EXPR [ (1, _3) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 18 }, Const { destination: Relative(2), bit_size: Integer(U1), value: 1 }, Mov { destination: Relative(1), source: Relative(2) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 23 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZFLCoQwDIbvknUX1qqIVxGRqlEKpUptBwbx7hOLRV0MDLNJmseXvyQbDNj5qVVmnFeo6g06q7RWU6vnXjo1G8puO4MYts4iUgpudaIWadE4qIzXmsFLah+a1kWa4J20VE0YoBnI08BRaTxeO7vo5DvK0+yEubjw/He+iOK8KP7hSxH5Mn/wDUWyV/axMeDUyCANVkCVMsigEvshYJXsNJ57Hb3pb2t27yVW4iEWO/c4eIuHQJidBAGyNS9ZKpr9+MQH",
  "file_map": {
    "50": {
      "source": "fn main(x: Field, active: bool) {\n    let mut x1 = false;\n    // Safety:)\n    unsafe {\n        if active {\n            x1 = foo(x);\n        }\n\n        let x2 = foo(x);\n        assert(x2);\n    }\n}\n\nunconstrained fn foo(_x: Field) -> bool {\n    true\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "foo"
  ]
}
