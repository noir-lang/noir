---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(2))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U1) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 16 }, Call { location: 17 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 75 }, JumpIf { condition: Relative(2), location: 71 }, Jump { location: 20 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, Mov { destination: Relative(2), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(5), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 2147483648 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(6) }, Not { destination: Relative(5), source: Relative(7), bit_size: U1 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(6) }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 33 }, Call { location: 81 }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, Cast { destination: Relative(9), source: Relative(4), bit_size: Integer(U64) }, Cast { destination: Relative(10), source: Relative(9), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(10), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(10), source: Relative(8), bit_size: U1 }, Cast { destination: Relative(11), source: Relative(2), bit_size: Field }, Cast { destination: Relative(2), source: Relative(8), bit_size: Field }, BinaryFieldOp { destination: Relative(8), op: Mul, lhs: Relative(2), rhs: Relative(11) }, Const { destination: Relative(2), bit_size: Field, value: 4294967296 }, BinaryFieldOp { destination: Relative(12), op: Sub, lhs: Relative(2), rhs: Relative(11) }, Cast { destination: Relative(11), source: Relative(10), bit_size: Field }, BinaryFieldOp { destination: Relative(10), op: Mul, lhs: Relative(11), rhs: Relative(12) }, BinaryFieldOp { destination: Relative(11), op: Add, lhs: Relative(8), rhs: Relative(10) }, Cast { destination: Relative(8), source: Relative(1), bit_size: Field }, Cast { destination: Relative(1), source: Relative(7), bit_size: Field }, BinaryFieldOp { destination: Relative(7), op: Mul, lhs: Relative(1), rhs: Relative(8) }, BinaryFieldOp { destination: Relative(1), op: Sub, lhs: Relative(2), rhs: Relative(8) }, Cast { destination: Relative(2), source: Relative(5), bit_size: Field }, BinaryFieldOp { destination: Relative(5), op: Mul, lhs: Relative(2), rhs: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Add, lhs: Relative(7), rhs: Relative(5) }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(11), rhs: Relative(1) }, Cast { destination: Relative(1), source: Relative(2), bit_size: Field }, Const { destination: Relative(5), bit_size: Field, value: 4294967295 }, BinaryFieldOp { destination: Relative(7), op: LessThanEquals, lhs: Relative(1), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 60 }, Call { location: 84 }, Cast { destination: Relative(1), source: Relative(2), bit_size: Integer(U32) }, Not { destination: Relative(2), source: Relative(9), bit_size: U1 }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(5), location: 68 }, Call { location: 87 }, Cast { destination: Relative(1), source: Relative(4), bit_size: Integer(U32) }, Mov { destination: Relative(3), source: Relative(1) }, Jump { location: 73 }, Mov { destination: Relative(3), source: Relative(1) }, Jump { location: 73 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 80 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "jdLNjoMgFIbhe2HNwh8OYm/FGIOKDQlBQ3WSifHeB/zqtF1MMhveWnqeNpSdjabf7p310/xgt2ZnfbDO2Xvn5kGvdvbx3Z1laSnimnNW5EiBlIhACJFIhSikPlNCKaGUUMqoFDECIUQiFaKQ+ozIkBwpECgCioAioAgoAoqAQlAICkEhKASFoBAUgkJQCIqEIqFIKBKKhCKhSCgSikzKcXB2HXW3BmPSSb+dffxHFh2MX9nNb85x9qXddn7osWh/dtUh7macGT/GRnCyzqRXB39NZ3+PquI5q8TvMP1/Or+m64/pNj7pwYaPm3QkJ1jdO/N8nDY/vO2u38u1c93EJcyDGbdgkvS6jnlcm4q4ylrO8nj4TfwlqmyP9NU/",
  "file_map": {
    "50": {
      "source": "fn main(a: i32, c: bool) -> pub i32 {\n    if c {\n        a\n    } else {\n        ((-a) * a)\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
