---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "arr1",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "arr2",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1cS48cSRHOqq7q57x27b1wRnABqfo1M73iYWnHeBeM92Hv2utdr9XzklgkrnAAURJnuCJx4T/AD0BwhAMSQuLMBX4CFw44Zyq6v/46srprnDnTtTilUfVURkZ8GRkZEZmVVZG5LLdf/EXF76S4pma5CM2d4pq9XOl75JWFxBnVBGfsEafF1jFhx78RQK++MSY1wJjWAGOzBhhbNcDYrgHGTg0wdmuAsWfq5c+3aqDT7Rpg3KkBxt0aYNyrAcbXaoDx9RpgvFUDjLcDYLwob8BvC9ouBGxybZNXmxza5MsmNzZ5sEHABj8bXKzDtg7ROhw7oe2EsQZpB9wq9LZxF1HOL+LLqwSXGOo9Jvj9Dsn1yf8w28+04OgR/7BT8GwG4d8fC/9WGPyZ8P1ePuePfZH6BtFxmwbQ3Aea+w6aB0DzwEHzLtC866B5D2jec9C8DzTvO2g+AJoPHDQPgeahg+YR0Dxy0HwINB86aD4Cmo8cNI+B5rGD5gnQPHHQfAw0HztongLNUwfNJ0DziYPmU6D51EHzDGieOWg+A5rPHDTPgeY50WwXv6M5ycyepS6GuvtU14C67xd1Mldls82vLxudBfYFE+lbE/om+hHZ7TCypxHJM2auY6wT+V0T0u9ebg6iPMHD+hEb2RaafI4nobokX+6H1KVQJ+Nrad4EOrYtwSFjkwbQxWE2Pnhld/Wyu5Tqkny5H1XtDm2rCXR34feD4reMWcicDv2z75zoloIfZdnSys2siL004J7oVfTcRnqq60Bdki/K6Rb/JyAHeQmOlOiPiv93i2sT2kj7PUV+k+Qv4FbusV46Cn1Hobc29M3it12zSJ7+Vj7n53NMhf8RYPHN+y5g98h/tkb6ThjdzPjf86+bGe+3w2AfCP93wvAfCv/v+tfNyNq99ZtfjebY2c83zHKeirpEv91U6JFfSvQPi6vF8PWiQeBYfyjxBOObFKnrKNilrmsW+27Mom6kNOh/jm9ZNOfLdFL+X3Tx5o3rYngaOM+bsD6xaPpkXfegLqK6rZJ22yXtdqCuRXW7Je32SuS9VtLu9ZJ2t0ra3S7B+YbSbl0blLG216MazseGgrGsvzjnnqzRX14Xsf0iT2P0dYlWlyptJb6lRPvz4hp4fmZom4Zkhd1jzQ62FX1I2Xb0G7Fi0cYd10vPKtj5F6G/P1yjvw1FTh30ofkEXg8Z6ifrAHX1kw23jav06VcV/ByOP+qb8bC92CJro12zrB/2kdKOfZ0tR/lindD+triGfh6j+cEWyeZ54ku2Zlse+avPsjzyH2jxOyLddcKM2ygiecbo+4giv2uCxtPZPmKH8LB+cB8xMos5sLTdU+rYBruKnK4iR+PV9MhLbGvXuH1KYFvIuB8J9EPLH2OlH9jflO79vrja/vw6mrdhn6j5SdadFtc6Rh/vO370c8xrKizamgoxctHij+C27X5zxfgj8ncVXbAd4dowhB0JFrSjntLf2Czrbgv6mdK9P4Ge2I6qzsG2gkfTHdvYVmDdzZ6BQD+2SnSH6/VtRXdy78/Gn+4aCp6Ogsejfs54DwKLtgfRpro9wiW/uWjzc/ZM5MXfHyvMT7Qjwca+8R/FdRPWq5zDepLdZ30gjsB2s3aeI/K7Jmgs6fM8FzyuOaftvUnbPaWOx3BHkbOjyNF4NT3y4jVBoPXIKe9jYtF0iePMZdWeWJVYjbrcIV0EmvOVdcH7BOhPET+XVXulVXwm2gXrieftneKavWSJqI94ZoXt1BZeh/+HcN6kD28EkT3cZx0ZM/cBfK5BfqP+mg561x7vf4srPuuLSAbmSFEJz5l9Rou6usk9kSiM7MpznuPMrlK37pwXOjtm/1xjzu+aZV3I3At9ZqbMlmKlT7HR55cUtrXtaK4LzrdRB9rzco6jiYIn7HyvbkeIkYtmK7OzOS/+/l0hPqCtcHwItMdcWRepgr9MF80r6qKh6KLMTyMP3n/WzsuV8UpKeGm+mNsxHr6XKrgSqhPar5BfD2QHql8XWXgmLMn9yz84zOQIyOw8XmqW7Qnlp0T/tYJBV+nHy7xgfn4w7Z8Pp+fT8fT0dHQyZT3ZEoOefMsfjacHJ9ODfn8y6p+N+uNV8rUzTNo+ZAz3+AyT2KIrr+FcUejHEBc4r5H2rryGeQr9hOw/xHl+WzT7F1k3rddvB9DrWxuo103bZ4uoDvfZquaPuM9W5bxbFEYXV477PtbPEehinfNuEbVDW8d1juzDcwx9TPYVKu/WbN3lmxmL8YdjgH1jHTIuLfdsrMAcKC8f8Xs1WLR3HxAzl1V5eZUzX2gvIp/np/GnhyHjTRUcEdUJ7ecb7Ne/CHbzpXjOl+lYpmY3jIHH1hY+/ye0P74efapj6/IJDQUL9kW75/I3bLPGW59GmciScdDmFK/BhDYnvd/EGizwfB7zPMGi7fNzbqTtJa87v6RP1q6+fMX5xXry6ZcH08nJWT875v5V8cu/3EC/zLEf2wXOlQaaD9aeXYr8rtH9xh0/eGbPLmPCw/rhvEnze3yWwJaj/PIaYo9gejA8PBmMTg6Ox8PpcH/qa48A2/M+WNlzkWQFr7eJV4P0gLzSFbzeIV7YntcsHINtCezT135GL/K7hDWUnWv7nqgftvOWgnVPqWNfqJ0VbilyNF4Nj7zELjT75Zw+VF7F8wPXsZofic2yTePc4n2i3xUGpT2X0fxaXKK7VMETOHbtc56BRbNDnt98PsSYxXmH/cfCOUiVZ/poR4KN84I/UOwPFMPU2B8RXqwT/bnygkTp+zr+zBj3cz5b7uaXV+35zDX55Yx9Cs7FpqKj2CzbH/oefsb/l5K5qMW0tER32phx/mGLvK9v8f/VITM1yz7HFomjvPb5ezTn+bfid9mz7Z7Rx5XjuubLNfuR+22FXosV2jsn7TV4xSWyy87ta7IRV8chO4F72vsxXKfFK+SnPU/n9Zpmd2gDkuNpua20RdsqyyNdzyOkH7w++hf5yE1aH/E+6jXgXPtbOCK/a5bHLETeqOX2qB/OGzUfwDmGLUf5nO4qPvIVr1e81uEVMrfBuRB4LTHh/NMWjP9pPJfriv9lz55n3zCK5zzbxe9NjP9CXxb/tXa41pB8X/t+V8jzLy/K1GJ8BHufjC3NV+tD+ybZujkM2zTmLS2qq5pjoI1yjqHlNWi/GI+Nwo/t5l5+ed20Z07YTy4+n1XinLyp9R2PQaA13EA762z88e+vs28Y5jz8oL/OOKD869o31PyOFoPDvtc7yOy3dcT2tOdAPDaaPwv7bu0g0+IJf/MxgTp8V/bzeBFjmOcwg37YOXqpA/RntkgMsDInlKfgHlrZ3ijvt3wL8pRvVMxTtH1i+V/Gq2z/J1L+1/aSeD9bbLLp6Cu/6zH7biLExp/FOk/UX2sNnveAZ048tXdotTkv9D2Fvuy7ADg3e9RO20sxyj0ZH20P2BCGeAVvxmSLxDRsx//HSlv+/kXbgWlVnnXVb7Boezn43tIE5srFvRz45vM2trSK//H7p0iPcxPpn8DcfAo57gWtIs/S/aCErmqukuSL9zr5Mj1+L1boZ+/N5ssYpa4HdSnJ2Sr+R30hL8GREv05jQl+41Xa7yny2yR/Abdyj3PSnkLfU+jt+Dwv/hH7xb77zjsuZBJ/vMfYxHbwvYVmGHyzcwzS/wbgSwCfyJ+dA4Y6oROsnTBYM7YLiREoE/sSEz3/5u8c/xTiBvYRx6zse8Wa/eG8FIyar+rl1Xi1iVfrJXgJLm1Otq6IS+PVJF6aH8N7OCd+BHPC9/mTweHh/mRwnI0OTk/OT0fD635H5mS8f3wyGk+zs/4FnFXy/wecMTl7lXUAAA==",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "//Tests for function calling\nfn f1(mut x: Field) -> Field {\n    x = x + 1;\n    x = f2(x);\n    x\n}\n\nfn f2(mut x: Field) -> Field {\n    x += 2;\n    x\n}\n// Simple example\nfn test0(mut a: Field) {\n    a = f2(a);\n    assert(a == 3);\n}\n// Nested call\nfn test1(mut a: Field) {\n    a = f1(a);\n    assert(a == 4);\n}\n\nfn test2(z: Field, t: u32) {\n    let a = z + t as Field;\n    assert(a == 64);\n    let e = pow(z, t as Field);\n    assert(e == 714924299);\n}\n\nfn pow(base: Field, exponent: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 32] = exponent.to_le_bits();\n    for i in 1..33 {\n        r = r * r;\n        r = (b[32 - i] as Field) * (r * base) + (1 - b[32 - i] as Field) * r;\n    }\n    r\n}\n\nfn test3(x: [u8; 3]) -> [u8; 3] {\n    let mut buffer = [0 as u8; 3];\n    for i in 0..3 {\n        buffer[i] = x[i];\n    }\n    assert(buffer == x);\n    buffer\n}\n\nfn test_multiple(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nfn test_multiple2() -> my_struct {\n    my_struct { a: 5 as u32, b: 7 as u32 }\n}\n\nfn test_multiple3(x: u32, y: u32) {\n    assert(x == y);\n}\n\nstruct my_struct {\n    a: u32,\n    b: u32,\n}\n\nstruct my2 {\n    aa: my_struct,\n    bb: my_struct,\n}\n\nfn test_multiple4(s: my_struct) {\n    assert(s.a == s.b + 2);\n}\n\nfn test_multiple5(a: (u32, u32)) {\n    assert(a.0 == a.1 + 2);\n}\n\nfn test_multiple6(a: my2, b: my_struct, c: (my2, my_struct)) {\n    test_multiple4(a.aa);\n    test_multiple5((b.a, b.b));\n    assert(c.0.aa.a == c.1.a);\n}\n\nfn foo<let N: u32>(a: [Field; N]) -> [Field; N] {\n    a\n}\n\nfn bar() -> [Field; 1] {\n    foo([0])\n}\n\nfn main(x: u32, y: u32, a: Field, arr1: [u32; 9], arr2: [u32; 9]) {\n    let mut ss: my_struct = my_struct { b: x, a: x + 2 };\n    test_multiple4(ss);\n    test_multiple5((ss.a, ss.b));\n    let my = my2 { aa: ss, bb: ss };\n    ss.a = 61;\n    test_multiple6(my, ss, (my, ss));\n\n    let my_block = {\n        let mut ab = f2(a);\n        ab = ab + a;\n        (x, ab)\n    };\n    assert(my_block.1 == 4);\n\n    test0(a);\n    test1(a);\n    test2(x as Field, y);\n    assert(bar()[0] == 0);\n\n    let mut b = [0 as u8, 5 as u8, 2 as u8];\n    let c = test3(b);\n    assert(b == c);\n    b[0] = 1 as u8;\n    let cc = test3(b);\n    assert(c != cc);\n    let e = test_multiple(x, y);\n    assert(e.1 == e.0 + 54 as u32);\n    let d = test_multiple2();\n    assert(d.b == d.a + 2 as u32);\n    test_multiple3(y, y);\n    //Regression test for issue #628:\n    let result = first(arr_to_field(arr1), arr_to_field(arr2));\n    assert(result[0] == arr1[0] as Field);\n}\n// Issue #628\nfn arr_to_field(arr: [u32; 9]) -> [Field; 9] {\n    let mut as_field: [Field; 9] = [0 as Field; 9];\n    for i in 0..9 {\n        as_field[i] = arr[i] as Field;\n    }\n    as_field\n}\n\nfn first(a: [Field; 9], _b: [Field; 9]) -> [Field; 9] {\n    a\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
