---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "arr1",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "arr2",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjRbuM4DEX/xc95EEmJkvorg6JI23QQIEiLTLvAosi/LxnxOt0BCswoL7nHiX1gx6Qk+3N53j1+/HzYH19efy13Pz6Xx9P+cNj/fDi8Pm3f969H+/ZzSf5RdbmjzVLriDaiX6KlETSCR8hyxxZ5uROLMkJH1BFthFnyZulpBI3gETIijzBLsdARZlGLNqJfglKKNE/15EiJzJElUiNrZIvsIylFho/CR+Gj8FH4KHwUPgofhY/Dx+Hj8LH5mmeOLJEaWSNbZB8pKZIiOTJ8Ej4Jn4RPwifhk/Dl8OXw5fDl8OXw5fBl83XPGtki+8iSIimSIyUyR5bI8BWvtOTQAD1AE4AADBBABhSAAmBWmNXNVrNUE4AADBBABhSAm9mhAhqgB1x65AIEYIAAMqAAYG4wN5i9a8i6h7xvBhCAAQJwc3YoAAVUgJuLQx/A3koDCMAAAWRAAbhZHSqgAXqAN9UAAjDAzdUhA9zcHBTg5u5gZk4OPcDbawAFeIMwORDAhMwOCqiABugB3g8DCOA7i0MD9AAv9gEEYIAA7Lo4OxSAAiqgAXqA1/wAAjBAADArzAqzwqwwK8wV5gpzhdlrnv2ees0PKAAFVEAD9ACv+QEEYADMXtjs990Le0AP8MJmLwAv7AEMEEAGFIAC6gBJCeBHNYeCb3zn7lABDWCnIVY/4rU6gAB2GsIOEHqtDigBPqyLOAggAwpAARXQAD3Aq3cAAWAWmAVmgVlgFpgFZoE5w5xhzjBnmDPMGeYMc4bZS12yg+9cHBTf+D7q0AA9wOtZ/BZ4PV+O8noeIAAIvZ4HKKACGsDN5XzeLFi8PLyfdjtfu3xZzdga52172h3fl7vjx+GwWf7ZHj4uO/162x4v+b492a92n3fHZ0sTvuwPO6fz5np0+v5QG7V7HG3jdl4F5S8M7WroZcbQhWDoWScMNuiXMNiwn242yM2GNmXQuhqm7oXNXn019DpjIEI1GU7dC/KZIww8dw6FV4NO3U1bAa2GNmVgHxSGwabMKQPXGw3C6As7G5ox5LReRWaeMhRdDVqmDOsIY6sRvdXQyq1XMWWgtRzsoWPm+JIxOhjO/AuN0BRtqi9bQmO3NFONTXABber8e0dL2mMvTU0T9TpNtC+GPxd0vY7Q+vcCe8i4CkhmBHQd4bncegbfXYJPp9/+CbwOCfZYXydOobT1GsrcHKO09rPOzda6rhjsQWJqXNO1H+0JhG41/DZL3dvW9ml/+t+7qbO7Tvvt42EXmy8fx6cvv77/+4Zf8G7r7fT6tHv+OO3cdH3BZR8/pPJGutzbctK2Sttou/dXQbZhk9eG+bJJvqc9hwqn+7Of2H8=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "//Tests for function calling\nfn f1(mut x: Field) -> Field {\n    x = x + 1;\n    x = f2(x);\n    x\n}\n\nfn f2(mut x: Field) -> Field {\n    x += 2;\n    x\n}\n// Simple example\nfn test0(mut a: Field) {\n    a = f2(a);\n    assert(a == 3);\n}\n// Nested call\nfn test1(mut a: Field) {\n    a = f1(a);\n    assert(a == 4);\n}\n\nfn test2(z: Field, t: u32) {\n    let a = z + t as Field;\n    assert(a == 64);\n    let e = pow(z, t as Field);\n    assert(e == 714924299);\n}\n\nfn pow(base: Field, exponent: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 32] = exponent.to_le_bits();\n    for i in 1..33 {\n        r = r * r;\n        r = (b[32 - i] as Field) * (r * base) + (1 - b[32 - i] as Field) * r;\n    }\n    r\n}\n\nfn test3(x: [u8; 3]) -> [u8; 3] {\n    let mut buffer = [0 as u8; 3];\n    for i in 0..3 {\n        buffer[i] = x[i];\n    }\n    assert(buffer == x);\n    buffer\n}\n\nfn test_multiple(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nfn test_multiple2() -> my_struct {\n    my_struct { a: 5 as u32, b: 7 as u32 }\n}\n\nfn test_multiple3(x: u32, y: u32) {\n    assert(x == y);\n}\n\nstruct my_struct {\n    a: u32,\n    b: u32,\n}\n\nstruct my2 {\n    aa: my_struct,\n    bb: my_struct,\n}\n\nfn test_multiple4(s: my_struct) {\n    assert(s.a == s.b + 2);\n}\n\nfn test_multiple5(a: (u32, u32)) {\n    assert(a.0 == a.1 + 2);\n}\n\nfn test_multiple6(a: my2, b: my_struct, c: (my2, my_struct)) {\n    test_multiple4(a.aa);\n    test_multiple5((b.a, b.b));\n    assert(c.0.aa.a == c.1.a);\n}\n\nfn foo<let N: u32>(a: [Field; N]) -> [Field; N] {\n    a\n}\n\nfn bar() -> [Field; 1] {\n    foo([0])\n}\n\nfn main(x: u32, y: u32, a: Field, arr1: [u32; 9], arr2: [u32; 9]) {\n    let mut ss: my_struct = my_struct { b: x, a: x + 2 };\n    test_multiple4(ss);\n    test_multiple5((ss.a, ss.b));\n    let my = my2 { aa: ss, bb: ss };\n    ss.a = 61;\n    test_multiple6(my, ss, (my, ss));\n\n    let my_block = {\n        let mut ab = f2(a);\n        ab = ab + a;\n        (x, ab)\n    };\n    assert(my_block.1 == 4);\n\n    test0(a);\n    test1(a);\n    test2(x as Field, y);\n    assert(bar()[0] == 0);\n\n    let mut b = [0 as u8, 5 as u8, 2 as u8];\n    let c = test3(b);\n    assert(b == c);\n    b[0] = 1 as u8;\n    let cc = test3(b);\n    assert(c != cc);\n    let e = test_multiple(x, y);\n    assert(e.1 == e.0 + 54 as u32);\n    let d = test_multiple2();\n    assert(d.b == d.a + 2 as u32);\n    test_multiple3(y, y);\n    //Regression test for issue #628:\n    let result = first(arr_to_field(arr1), arr_to_field(arr2));\n    assert(result[0] == arr1[0] as Field);\n}\n// Issue #628\nfn arr_to_field(arr: [u32; 9]) -> [Field; 9] {\n    let mut as_field: [Field; 9] = [0 as Field; 9];\n    for i in 0..9 {\n        as_field[i] = arr[i] as Field;\n    }\n    as_field\n}\n\nfn first(a: [Field; 9], _b: [Field; 9]) -> [Field; 9] {\n    a\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
