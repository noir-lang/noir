---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "arr1",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "arr2",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfdbuIwFITfJddc5PzYPu6rrFZVStMKKQKUQqVV1Xdfp5kTuhfJVubqhBn8yTMJBj6a5/7p+vp4OL6c3pqHXx/N03gYhsPr43Dad5fD6VjUj89d4y8fL2PfF6n55pdV527sj5fm4Xgdhl3z3g3Xrze9nbvj17x0Y3HbXdMfn8sswJfD0E9Xn7vb6nZ9KcWYsZpi0gUQfk5ImZ1gvErgDYJkT0BKcY0gGwROyQmcqSaF3Xqw9R7CVgpdQrRVO7DbDnKoIWQhJ2SNVYSwhMiR1wh5ncDkIZjrMkRbdpBWMxBtbCE5gU1WARvP47KDVLXcBMvNVpfrnc/RZv4cAZCWq26B3W5BtjqCHwncru+BbB0hwVuUKFUAzXcC0lKj1QGy17hxqPHGgxTUD7UQ1wEbxyJbDMtHwW7HItmP9xDZ70MUrgnxDaBUB/BnKYZQBQj+JES7dwdWdSNju3TQWhVA49KB1nVg/4+w9TAre4mqUnEkMC/HGrPmKgKnNcLv8qrbH8Z/fl01lMtudw235Sgug0rCwmeefuqUKdO3VZla5vS2gBkxE6Zh5nlKi0mYjCmY4Al4Ap6AJ+AJeAqegqfgKXgKnoKn4Cl4Cp6CF8AL4AXwAngBvABeAC+AF2z64iiz8KbfE3HileYjzXpk6AJdoQfoEXqCbtDzrKd21hPNemLoAl2hB+gReoJu0POsWzvrRrNuDF2gK/QAPUJP0JHXkDcjb0bejLwZeTPyZuTNyJuRNyNvRl5qEZhaJKaW3RK31K3gVnQruWVuITkRohMhOxG7JW6pW8Gt6FZyy9xCB8QogRgtELNb4pa6FdyKbiW3zC1vQ7wN8TbE2xBvQ7wN8TbE2xBvQ7wN8TbU21BvQ70N9TbU21BvQ70N9TbU21BvI3gb02dKZLqYyDpdiF9Me56+n9678dA9DT3+4L1cj/tv//cuf87u+D/C83ja98/XsZ9Ory+vnGd/AQ==",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "//Tests for function calling\nfn f1(mut x: Field) -> Field {\n    x = x + 1;\n    x = f2(x);\n    x\n}\n\nfn f2(mut x: Field) -> Field {\n    x += 2;\n    x\n}\n// Simple example\nfn test0(mut a: Field) {\n    a = f2(a);\n    assert(a == 3);\n}\n// Nested call\nfn test1(mut a: Field) {\n    a = f1(a);\n    assert(a == 4);\n}\n\nfn test2(z: Field, t: u32) {\n    let a = z + t as Field;\n    assert(a == 64);\n    let e = pow(z, t as Field);\n    assert(e == 714924299);\n}\n\nfn pow(base: Field, exponent: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 32] = exponent.to_le_bits();\n    for i in 1..33 {\n        r = r * r;\n        r = (b[32 - i] as Field) * (r * base) + (1 - b[32 - i] as Field) * r;\n    }\n    r\n}\n\nfn test3(x: [u8; 3]) -> [u8; 3] {\n    let mut buffer = [0 as u8; 3];\n    for i in 0..3 {\n        buffer[i] = x[i];\n    }\n    assert(buffer == x);\n    buffer\n}\n\nfn test_multiple(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nfn test_multiple2() -> my_struct {\n    my_struct { a: 5 as u32, b: 7 as u32 }\n}\n\nfn test_multiple3(x: u32, y: u32) {\n    assert(x == y);\n}\n\nstruct my_struct {\n    a: u32,\n    b: u32,\n}\n\nstruct my2 {\n    aa: my_struct,\n    bb: my_struct,\n}\n\nfn test_multiple4(s: my_struct) {\n    assert(s.a == s.b + 2);\n}\n\nfn test_multiple5(a: (u32, u32)) {\n    assert(a.0 == a.1 + 2);\n}\n\nfn test_multiple6(a: my2, b: my_struct, c: (my2, my_struct)) {\n    test_multiple4(a.aa);\n    test_multiple5((b.a, b.b));\n    assert(c.0.aa.a == c.1.a);\n}\n\nfn foo<let N: u32>(a: [Field; N]) -> [Field; N] {\n    a\n}\n\nfn bar() -> [Field; 1] {\n    foo([0])\n}\n\nfn main(x: u32, y: u32, a: Field, arr1: [u32; 9], arr2: [u32; 9]) {\n    let mut ss: my_struct = my_struct { b: x, a: x + 2 };\n    test_multiple4(ss);\n    test_multiple5((ss.a, ss.b));\n    let my = my2 { aa: ss, bb: ss };\n    ss.a = 61;\n    test_multiple6(my, ss, (my, ss));\n\n    let my_block = {\n        let mut ab = f2(a);\n        ab = ab + a;\n        (x, ab)\n    };\n    assert(my_block.1 == 4);\n\n    test0(a);\n    test1(a);\n    test2(x as Field, y);\n    assert(bar()[0] == 0);\n\n    let mut b = [0 as u8, 5 as u8, 2 as u8];\n    let c = test3(b);\n    assert(b == c);\n    b[0] = 1 as u8;\n    let cc = test3(b);\n    assert(c != cc);\n    let e = test_multiple(x, y);\n    assert(e.1 == e.0 + 54 as u32);\n    let d = test_multiple2();\n    assert(d.b == d.a + 2 as u32);\n    test_multiple3(y, y);\n    //Regression test for issue #628:\n    let result = first(arr_to_field(arr1), arr_to_field(arr2));\n    assert(result[0] == arr1[0] as Field);\n}\n// Issue #628\nfn arr_to_field(arr: [u32; 9]) -> [Field; 9] {\n    let mut as_field: [Field; 9] = [0 as Field; 9];\n    for i in 0..9 {\n        as_field[i] = arr[i] as Field;\n    }\n    as_field\n}\n\nfn first(a: [Field; 9], _b: [Field; 9]) -> [Field; 9] {\n    a\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix"
  ]
}
