---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "arr1",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "arr2",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1cy4ojyRWNlDKlllRqqR7+DEPqUV1VBkMtpufZPdM9j57xxqCq6t554y8QNnhl8A/4B7w12GAw2EuDDcYGL/wFNnjhMQZ7NTAd3XlLR0cnsrJKGdWTUAFFqiJO3Hvixo2IG5EhJe51Onj5lxSf0+KZuc1kmNPimW+XJjXKymPyTBrCs1UjT8+t5+L2fzuCXevmmDaAY9YAjp0GcOw2gOO9BnDsNYBjvwEcB65Z8/lOA2w6bADH+w3gOGoAx3EDOO42gONeAzjuN4DjQQSOr9K34LMn7TcCPrj2wasPDn3w5YMbHzz4RcAvfn5x8RO2nxD9hOMHtB8w3iF9h3uDHrhwMuN0W6+ftri0oLzGAH/SI711yj/OD0/U4lgj/1mvkNmJIn9yaPK7cfjnJvet5Uo+tsXK24TjOm3APATMwwDmHcC8E8C8C5h3A5j3APNeAPM+YN4PYD4AzAcBzCPAPApgHgPmcQDzIWA+DGA+AsxHAcwTwDwJYJ4C5mkA8zFgPg5gPgHMJwHMp4D5NID5DDCfBTDPAPMsgPkcMJ8HMF8A5gvCDIvPyQpy6c9W1oKyh1TWhrK3izIbq3bYVu9cNj+KPBecWNs60Dazj+m+F0f3IiF9zq1sjGWmv+9izruvDwdRn/Fh+5iPDA2zXPFJqSxdbrbDyjIos/71mO8Ajn3LeFjfZBFs8XINze/8rll+l1FZutxsx3X9Dn2rA7iH8Pnt4rP1WcyYDufnumOifcEfdfnUXbrLZP7Shjyzq9n5HuKprAdl6XJdT7/4PwU9KMt4ZIR/q/h/VDw7UMfqj4X+Dulf4y3y2C49ge8JvPeh7xafB8Wf96E/FYIizznTsnGG/Y768bCtE8CbvIzwj4qnL/8rtbEXpY2zC+PWL+SlwLlXwtnwT906z0EUnnm+B3Id6eL539Wnd+rIFtg2J/SibZzTfafsVSPnuenaKeRxn6HejLDfI35D4n5aD0fZn0PS3a/fNrOQbbCP+gHbfP8bZJte/baZcPuxbc6VjwOuq8YFzyEol/3RsM+p3X3SfVpP26XNTVdb8E3cKrXdZvyJ+0KW51x4Dok3L8xz03WTeeEHxO9N+P7QaTuqp3ObMbpP1i9j0fYetXEnThunyoauPvkTs9NA2Ml034/StumkSj+g/r6LGjdc7pXuEx+2T4vsM4pjn9yfsZvv4XyxI2zDPHgNGEfiqPaLxkntF42Hb8/fKG6NtCefxB2j00nceW6aq3HoXP1zAJ5BWF/4vB9DPvpZ5jbPEtSaYfhfJyuZPynyRqK+zbMx4pfp4uT8+SQ/Y12Z4NGjMsP+lPi9yX0M8k1q1K32kjXKP1QxWo3yp1XWtUhr9rzqumb6b2td2yE+oXXNbDcUXMeijH1wKPQMhR4lq1ejrD61B9u/bSyIvjMgPcMa9JiskZAVd02v7r+mv+9ixkEr/x0TH7YP225XcB2LMvbfXaFnV+hRsno1yupTGfr2iNqq3nXc1LfRHhZzxD1bXK03kfbsM37Pim3x7f0l5KO/YIyDdTluMPwvIMb5VZFnMQ7O7x2qb2W/IXtHei8kY4sO8UXdwwptib3f5/gTz59Rp3Fruc15CecLjk9/Xzx97PvPZFUHZTpXvnaqMTQosZ2tI2Xz/U3HMbb7PukJjYM/QD7ateo4MPzPYRz8schT7R9RfSv7c/F8k2dIZf2leCWu3j2ZT7ivxtjfp3QZxSZz7///Kgyi/DJbrre56rpctiZiLGPtU2vikMowDuM1UcX+1x1LVdroP9t7vZHgNb6mrD7J6gpZQyHL+Jtvot3eRHxo+vvCDjHiwzK/8onjwz3BdSzKeIzvCT17Qo+StVOjrC6V4TzFftIFmduuK+iPVdeVLyEf7VB1XTH8z2Bd+W+Rp8ZcN1D//8Uz9j1Yta7wHIG6eQ9Zx9yl/KJqf30F+dv014+gv4ykii/5XAtt49Np8cy3TAnxVffflP8YvpOs8/ymnP3VeM/jQeI25wzr81bAXms2CuBDNh0UjcS7LAnVx1g/KZFp+FFyG7Yq30fxvTVXo151p5jX/0htrnzH0fT33aYvxFj/O8SH7cPrf1dwVWtcQp/VuOgKPXey7mRdR1bsszx+bx1pPJ5cFVt8m+Z4nMNVbNGCcsT/EGKLnGILNbar3AuPdP5Yec40/bd1L7xPfNg+PGcOBFcVZ/L4uO752Z2sO1lVZKnvXSWBp+nhPNaD9XjuCM1pj2lOw/P9KnOa4c9gTntCcxrysvkt9ncXEuKOcTifkZktua32Gdtrec+KiurMnfuN866zPreFLMTbfRdla77LmQlZaYksrJ+V1EOOnJcJXimVGdYWm5jf4/JJ7X1M18DpfT73i1p/0L7sY2rO4DXbgW58XzkoqYd3jNTZO+7pfEqX6zpPi/x8u7RQZ+/ILVtebQ/Es/3K7oCg/dT5Oq/32Jf83lvtxXAc4PfGuMzq4rxaFteV2SKFvJvaYuQ2/WWnpB76tPIlnLt9SpfrOk+L/Hy7JH0JubEvKXsgnu2n7ubwnSqf1P2FAZWp+38J2Qv1VPUlq4v7DnVezLGFugOs4mLDjwSe702jbnWXo0xWt0T3Ve+TWDfyGgd0p26zn7kuliEn9U5OxXD8XkX5X9V+trp4dl32XsB0Vn1nZHj1vobfs6FubONeBVll7033BX6vRDfy2g/oDvXzLuGv6meTp2KxWP38JbW3bEypflZ7jZv2M46jKv1cNpfE7mfkyv08FpyUD6s7JjyXqPWhaj9bXbyTomzdCbQXdd7WmFKyynzsQOD3S3Qjr4OAbuxn5Mo+uSs4jUXb1Poc8hlsR9V+trp4B8/aq+5EcL2yO16J+N/4ld1f3gVObYHBO1GI/23y+unbm7S0TDwPGFWQ+TuQmZJM5etl/naVrxufMl9X3HFu5TzrH777gdg9woZkK9/rCf78f0vU5Xsz4wAnlKO+BxiKn5zTvsNjoSP04HduYu4Rjo5zOza/3J+Yf3JKoRzxfykEoE3suc2PIr84WkxezBYvFoeLi4v5+YLPGnwy/x5E0D8/XBydL44mk5P55Pl8cniV/suzwOUKV+Nebmp6s0J+28GZ3HLFyfSr3wkx3OV3V+NwvfQp++0Q9Cn87Q5rS4vw/Jl/i+QfyYo3thHnlrLfFBlAmeHxt1aMo/qtk8HyerLukazuFrKM11jguzfkpWR1SNZ1foPl70WlGGNycTQ7Pp/Oz4/ODmeL2YMr5wTVf3gO45PZDX8PpyPalhH+38mqzf8pPvNvIKG+DghTuCTwfCVD5KXL9TzVR9jfhjfdfcHRytAXMtKzU/yP9kJZxiMj/FeFAOsTHJ9WX/kijm3WpfRXGesDgff98z9ay7Dtdb97faWT5GMec7N/Yoyr6fHxg5PpWT4/ujh/cTGf3fZae3744Oz85YKbP5+8onOV/q8BZ9o4yZFkAAA=",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "//Tests for function calling\nfn f1(mut x: Field) -> Field {\n    x = x + 1;\n    x = f2(x);\n    x\n}\n\nfn f2(mut x: Field) -> Field {\n    x += 2;\n    x\n}\n// Simple example\nfn test0(mut a: Field) {\n    a = f2(a);\n    assert(a == 3);\n}\n// Nested call\nfn test1(mut a: Field) {\n    a = f1(a);\n    assert(a == 4);\n}\n\nfn test2(z: Field, t: u32) {\n    let a = z + t as Field;\n    assert(a == 64);\n    let e = pow(z, t as Field);\n    assert(e == 714924299);\n}\n\nfn pow(base: Field, exponent: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 32] = exponent.to_le_bits();\n    for i in 1..33 {\n        r = r * r;\n        r = (b[32 - i] as Field) * (r * base) + (1 - b[32 - i] as Field) * r;\n    }\n    r\n}\n\nfn test3(x: [u8; 3]) -> [u8; 3] {\n    let mut buffer = [0 as u8; 3];\n    for i in 0..3 {\n        buffer[i] = x[i];\n    }\n    assert(buffer == x);\n    buffer\n}\n\nfn test_multiple(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nfn test_multiple2() -> my_struct {\n    my_struct { a: 5 as u32, b: 7 as u32 }\n}\n\nfn test_multiple3(x: u32, y: u32) {\n    assert(x == y);\n}\n\nstruct my_struct {\n    a: u32,\n    b: u32,\n}\n\nstruct my2 {\n    aa: my_struct,\n    bb: my_struct,\n}\n\nfn test_multiple4(s: my_struct) {\n    assert(s.a == s.b + 2);\n}\n\nfn test_multiple5(a: (u32, u32)) {\n    assert(a.0 == a.1 + 2);\n}\n\nfn test_multiple6(a: my2, b: my_struct, c: (my2, my_struct)) {\n    test_multiple4(a.aa);\n    test_multiple5((b.a, b.b));\n    assert(c.0.aa.a == c.1.a);\n}\n\nfn foo<let N: u32>(a: [Field; N]) -> [Field; N] {\n    a\n}\n\nfn bar() -> [Field; 1] {\n    foo([0])\n}\n\nfn main(x: u32, y: u32, a: Field, arr1: [u32; 9], arr2: [u32; 9]) {\n    let mut ss: my_struct = my_struct { b: x, a: x + 2 };\n    test_multiple4(ss);\n    test_multiple5((ss.a, ss.b));\n    let my = my2 { aa: ss, bb: ss };\n    ss.a = 61;\n    test_multiple6(my, ss, (my, ss));\n\n    let my_block = {\n        let mut ab = f2(a);\n        ab = ab + a;\n        (x, ab)\n    };\n    assert(my_block.1 == 4);\n\n    test0(a);\n    test1(a);\n    test2(x as Field, y);\n    assert(bar()[0] == 0);\n\n    let mut b = [0 as u8, 5 as u8, 2 as u8];\n    let c = test3(b);\n    assert(b == c);\n    b[0] = 1 as u8;\n    let cc = test3(b);\n    assert(c != cc);\n    let e = test_multiple(x, y);\n    assert(e.1 == e.0 + 54 as u32);\n    let d = test_multiple2();\n    assert(d.b == d.a + 2 as u32);\n    test_multiple3(y, y);\n    //Regression test for issue #628:\n    let result = first(arr_to_field(arr1), arr_to_field(arr2));\n    assert(result[0] == arr1[0] as Field);\n}\n// Issue #628\nfn arr_to_field(arr: [u32; 9]) -> [Field; 9] {\n    let mut as_field: [Field; 9] = [0 as Field; 9];\n    for i in 0..9 {\n        as_field[i] = arr[i] as Field;\n    }\n    as_field\n}\n\nfn first(a: [Field; 9], _b: [Field; 9]) -> [Field; 9] {\n    a\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
