---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "arr1",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "arr2",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _147",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "BLACKBOX::RANGE [(_11, 32)] []",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "BLACKBOX::RANGE [(_14, 32)] []",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "BLACKBOX::RANGE [(_16, 32)] []",
    "BLACKBOX::RANGE [(_17, 32)] []",
    "BLACKBOX::RANGE [(_18, 32)] []",
    "BLACKBOX::RANGE [(_19, 32)] []",
    "BLACKBOX::RANGE [(_20, 32)] []",
    "EXPR [ (-1, _0) 59 ]",
    "EXPR [ (2, _2) -2 ]",
    "EXPR [ (1, _2) -1 ]",
    "EXPR [ (1, _2) -1 ]",
    "EXPR [ (1, _0) (1, _1) -64 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(22), Witness(23), Witness(24), Witness(25), Witness(26), Witness(27), Witness(28), Witness(29), Witness(30), Witness(31), Witness(32), Witness(33), Witness(34), Witness(35), Witness(36), Witness(37), Witness(38), Witness(39), Witness(40), Witness(41), Witness(42), Witness(43), Witness(44), Witness(45), Witness(46), Witness(47), Witness(48), Witness(49), Witness(50), Witness(51), Witness(52), Witness(53)])]",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 1)] []",
    "BLACKBOX::RANGE [(_24, 1)] []",
    "BLACKBOX::RANGE [(_25, 1)] []",
    "BLACKBOX::RANGE [(_26, 1)] []",
    "BLACKBOX::RANGE [(_27, 1)] []",
    "BLACKBOX::RANGE [(_28, 1)] []",
    "BLACKBOX::RANGE [(_29, 1)] []",
    "BLACKBOX::RANGE [(_30, 1)] []",
    "BLACKBOX::RANGE [(_31, 1)] []",
    "BLACKBOX::RANGE [(_32, 1)] []",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 1)] []",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 1)] []",
    "BLACKBOX::RANGE [(_38, 1)] []",
    "BLACKBOX::RANGE [(_39, 1)] []",
    "BLACKBOX::RANGE [(_40, 1)] []",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "BLACKBOX::RANGE [(_43, 1)] []",
    "BLACKBOX::RANGE [(_44, 1)] []",
    "BLACKBOX::RANGE [(_45, 1)] []",
    "BLACKBOX::RANGE [(_46, 1)] []",
    "BLACKBOX::RANGE [(_47, 1)] []",
    "BLACKBOX::RANGE [(_48, 1)] []",
    "BLACKBOX::RANGE [(_49, 1)] []",
    "BLACKBOX::RANGE [(_50, 1)] []",
    "BLACKBOX::RANGE [(_51, 1)] []",
    "BLACKBOX::RANGE [(_52, 1)] []",
    "BLACKBOX::RANGE [(_53, 1)] []",
    "EXPR [ (1, _1) (-1, _22) (-2, _23) (-4, _24) (-8, _25) (-16, _26) (-32, _27) (-64, _28) (-128, _29) (-256, _30) (-512, _31) (-1024, _32) (-2048, _33) (-4096, _34) (-8192, _35) (-16384, _36) (-32768, _37) (-65536, _38) (-131072, _39) (-262144, _40) (-524288, _41) (-1048576, _42) (-2097152, _43) (-4194304, _44) (-8388608, _45) (-16777216, _46) (-33554432, _47) (-67108864, _48) (-134217728, _49) (-268435456, _50) (-536870912, _51) (-1073741824, _52) (-2147483648, _53) 0 ]",
    "EXPR [ (1, _0, _53) (-1, _53) (-1, _54) 1 ]",
    "EXPR [ (1, _54, _54) (-1, _55) 0 ]",
    "EXPR [ (1, _0, _55) (-1, _56) 0 ]",
    "EXPR [ (-1, _52, _55) (1, _52, _56) (1, _55) (-1, _57) 0 ]",
    "EXPR [ (1, _57, _57) (-1, _58) 0 ]",
    "EXPR [ (1, _0, _58) (-1, _59) 0 ]",
    "EXPR [ (-1, _51, _58) (1, _51, _59) (1, _58) (-1, _60) 0 ]",
    "EXPR [ (1, _60, _60) (-1, _61) 0 ]",
    "EXPR [ (1, _0, _61) (-1, _62) 0 ]",
    "EXPR [ (-1, _50, _61) (1, _50, _62) (1, _61) (-1, _63) 0 ]",
    "EXPR [ (1, _63, _63) (-1, _64) 0 ]",
    "EXPR [ (1, _0, _64) (-1, _65) 0 ]",
    "EXPR [ (-1, _49, _64) (1, _49, _65) (1, _64) (-1, _66) 0 ]",
    "EXPR [ (1, _66, _66) (-1, _67) 0 ]",
    "EXPR [ (1, _0, _67) (-1, _68) 0 ]",
    "EXPR [ (-1, _48, _67) (1, _48, _68) (1, _67) (-1, _69) 0 ]",
    "EXPR [ (1, _69, _69) (-1, _70) 0 ]",
    "EXPR [ (1, _0, _70) (-1, _71) 0 ]",
    "EXPR [ (-1, _47, _70) (1, _47, _71) (1, _70) (-1, _72) 0 ]",
    "EXPR [ (1, _72, _72) (-1, _73) 0 ]",
    "EXPR [ (1, _0, _73) (-1, _74) 0 ]",
    "EXPR [ (-1, _46, _73) (1, _46, _74) (1, _73) (-1, _75) 0 ]",
    "EXPR [ (1, _75, _75) (-1, _76) 0 ]",
    "EXPR [ (1, _0, _76) (-1, _77) 0 ]",
    "EXPR [ (-1, _45, _76) (1, _45, _77) (1, _76) (-1, _78) 0 ]",
    "EXPR [ (1, _78, _78) (-1, _79) 0 ]",
    "EXPR [ (1, _0, _79) (-1, _80) 0 ]",
    "EXPR [ (-1, _44, _79) (1, _44, _80) (1, _79) (-1, _81) 0 ]",
    "EXPR [ (1, _81, _81) (-1, _82) 0 ]",
    "EXPR [ (1, _0, _82) (-1, _83) 0 ]",
    "EXPR [ (-1, _43, _82) (1, _43, _83) (1, _82) (-1, _84) 0 ]",
    "EXPR [ (1, _84, _84) (-1, _85) 0 ]",
    "EXPR [ (1, _0, _85) (-1, _86) 0 ]",
    "EXPR [ (-1, _42, _85) (1, _42, _86) (1, _85) (-1, _87) 0 ]",
    "EXPR [ (1, _87, _87) (-1, _88) 0 ]",
    "EXPR [ (1, _0, _88) (-1, _89) 0 ]",
    "EXPR [ (-1, _41, _88) (1, _41, _89) (1, _88) (-1, _90) 0 ]",
    "EXPR [ (1, _90, _90) (-1, _91) 0 ]",
    "EXPR [ (1, _0, _91) (-1, _92) 0 ]",
    "EXPR [ (-1, _40, _91) (1, _40, _92) (1, _91) (-1, _93) 0 ]",
    "EXPR [ (1, _93, _93) (-1, _94) 0 ]",
    "EXPR [ (1, _0, _94) (-1, _95) 0 ]",
    "EXPR [ (-1, _39, _94) (1, _39, _95) (1, _94) (-1, _96) 0 ]",
    "EXPR [ (1, _96, _96) (-1, _97) 0 ]",
    "EXPR [ (1, _0, _97) (-1, _98) 0 ]",
    "EXPR [ (-1, _38, _97) (1, _38, _98) (1, _97) (-1, _99) 0 ]",
    "EXPR [ (1, _99, _99) (-1, _100) 0 ]",
    "EXPR [ (1, _0, _100) (-1, _101) 0 ]",
    "EXPR [ (-1, _37, _100) (1, _37, _101) (1, _100) (-1, _102) 0 ]",
    "EXPR [ (1, _102, _102) (-1, _103) 0 ]",
    "EXPR [ (1, _0, _103) (-1, _104) 0 ]",
    "EXPR [ (-1, _36, _103) (1, _36, _104) (1, _103) (-1, _105) 0 ]",
    "EXPR [ (1, _105, _105) (-1, _106) 0 ]",
    "EXPR [ (1, _0, _106) (-1, _107) 0 ]",
    "EXPR [ (-1, _35, _106) (1, _35, _107) (1, _106) (-1, _108) 0 ]",
    "EXPR [ (1, _108, _108) (-1, _109) 0 ]",
    "EXPR [ (1, _0, _109) (-1, _110) 0 ]",
    "EXPR [ (-1, _34, _109) (1, _34, _110) (1, _109) (-1, _111) 0 ]",
    "EXPR [ (1, _111, _111) (-1, _112) 0 ]",
    "EXPR [ (1, _0, _112) (-1, _113) 0 ]",
    "EXPR [ (-1, _33, _112) (1, _33, _113) (1, _112) (-1, _114) 0 ]",
    "EXPR [ (1, _114, _114) (-1, _115) 0 ]",
    "EXPR [ (1, _0, _115) (-1, _116) 0 ]",
    "EXPR [ (-1, _32, _115) (1, _32, _116) (1, _115) (-1, _117) 0 ]",
    "EXPR [ (1, _117, _117) (-1, _118) 0 ]",
    "EXPR [ (1, _0, _118) (-1, _119) 0 ]",
    "EXPR [ (-1, _31, _118) (1, _31, _119) (1, _118) (-1, _120) 0 ]",
    "EXPR [ (1, _120, _120) (-1, _121) 0 ]",
    "EXPR [ (1, _0, _121) (-1, _122) 0 ]",
    "EXPR [ (-1, _30, _121) (1, _30, _122) (1, _121) (-1, _123) 0 ]",
    "EXPR [ (1, _123, _123) (-1, _124) 0 ]",
    "EXPR [ (1, _0, _124) (-1, _125) 0 ]",
    "EXPR [ (-1, _29, _124) (1, _29, _125) (1, _124) (-1, _126) 0 ]",
    "EXPR [ (1, _126, _126) (-1, _127) 0 ]",
    "EXPR [ (1, _0, _127) (-1, _128) 0 ]",
    "EXPR [ (-1, _28, _127) (1, _28, _128) (1, _127) (-1, _129) 0 ]",
    "EXPR [ (1, _129, _129) (-1, _130) 0 ]",
    "EXPR [ (1, _0, _130) (-1, _131) 0 ]",
    "EXPR [ (-1, _27, _130) (1, _27, _131) (1, _130) (-1, _132) 0 ]",
    "EXPR [ (1, _132, _132) (-1, _133) 0 ]",
    "EXPR [ (1, _0, _133) (-1, _134) 0 ]",
    "EXPR [ (-1, _26, _133) (1, _26, _134) (1, _133) (-1, _135) 0 ]",
    "EXPR [ (1, _135, _135) (-1, _136) 0 ]",
    "EXPR [ (1, _0, _136) (-1, _137) 0 ]",
    "EXPR [ (-1, _25, _136) (1, _25, _137) (1, _136) (-1, _138) 0 ]",
    "EXPR [ (1, _138, _138) (-1, _139) 0 ]",
    "EXPR [ (1, _0, _139) (-1, _140) 0 ]",
    "EXPR [ (-1, _24, _139) (1, _24, _140) (1, _139) (-1, _141) 0 ]",
    "EXPR [ (1, _141, _141) (-1, _142) 0 ]",
    "EXPR [ (1, _0, _142) (-1, _143) 0 ]",
    "EXPR [ (-1, _23, _142) (1, _23, _143) (1, _142) (-1, _144) 0 ]",
    "EXPR [ (1, _144, _144) (-1, _145) 0 ]",
    "EXPR [ (1, _0, _145) (-1, _146) 0 ]",
    "EXPR [ (-1, _22, _145) (1, _22, _146) (1, _145) -714924299 ]",
    "EXPR [ (1, _1) (-1, _147) 54 ]",
    "BLACKBOX::RANGE [(_147, 32)] []",
    "EXPR [ (1, _0) (-1, _147) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "pZfdbuIwFITfJddc5PzYPu6rrFZVStMKKQKUQqVV1Xdfp5kTuhfJVubqhBn8yTMJBj6a5/7p+vp4OL6c3pqHXx/N03gYhsPr43Dad5fD6VjUj89d4y8fL2PfF6n55pdV527sj5fm4Xgdhl3z3g3Xrze9nbvj17x0Y3HbXdMfn8sswJfD0E9Xn7vb6nZ9KcWYsZpi0gUQfk5ImZ1gvErgDYJkT0BKcY0gGwROyQmcqSaF3Xqw9R7CVgpdQrRVO7DbDnKoIWQhJ2SNVYSwhMiR1wh5ncDkIZjrMkRbdpBWMxBtbCE5gU1WARvP47KDVLXcBMvNVpfrnc/RZv4cAZCWq26B3W5BtjqCHwncru+BbB0hwVuUKFUAzXcC0lKj1QGy17hxqPHGgxTUD7UQ1wEbxyJbDMtHwW7HItmP9xDZ70MUrgnxDaBUB/BnKYZQBQj+JES7dwdWdSNju3TQWhVA49KB1nVg/4+w9TAre4mqUnEkMC/HGrPmKgKnNcLv8qrbH8Z/fl01lMtudw235Sgug0rCwmeefuqUKdO3VZla5vS2gBkxE6Zh5nlKi0mYjCmY4Al4Ap6AJ+AJeAqegqfgKXgKnoKn4Cl4Cp6CF8AL4AXwAngBvABeAC+AF2z64iiz8KbfE3HileYjzXpk6AJdoQfoEXqCbtDzrKd21hPNemLoAl2hB+gReoJu0POsWzvrRrNuDF2gK/QAPUJP0JHXkDcjb0bejLwZeTPyZuTNyJuRNyNvRl5qEZhaJKaW3RK31K3gVnQruWVuITkRohMhOxG7JW6pW8Gt6FZyy9xCB8QogRgtELNb4pa6FdyKbiW3zC1vQ7wN8TbE2xBvQ7wN8TbE2xBvQ7wN8TbU21BvQ70N9TbU21BvQ70N9TbU21BvI3gb02dKZLqYyDpdiF9Me56+n9678dA9DT3+4L1cj/tv//cuf87u+D/C83ja98/XsZ9Ory+vnGd/AQ==",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "//Tests for function calling\nfn f1(mut x: Field) -> Field {\n    x = x + 1;\n    x = f2(x);\n    x\n}\n\nfn f2(mut x: Field) -> Field {\n    x += 2;\n    x\n}\n// Simple example\nfn test0(mut a: Field) {\n    a = f2(a);\n    assert(a == 3);\n}\n// Nested call\nfn test1(mut a: Field) {\n    a = f1(a);\n    assert(a == 4);\n}\n\nfn test2(z: Field, t: u32) {\n    let a = z + t as Field;\n    assert(a == 64);\n    let e = pow(z, t as Field);\n    assert(e == 714924299);\n}\n\nfn pow(base: Field, exponent: Field) -> Field {\n    let mut r = 1 as Field;\n    let b: [u1; 32] = exponent.to_le_bits();\n    for i in 1..33 {\n        r = r * r;\n        r = (b[32 - i] as Field) * (r * base) + (1 - b[32 - i] as Field) * r;\n    }\n    r\n}\n\nfn test3(x: [u8; 3]) -> [u8; 3] {\n    let mut buffer = [0 as u8; 3];\n    for i in 0..3 {\n        buffer[i] = x[i];\n    }\n    assert(buffer == x);\n    buffer\n}\n\nfn test_multiple(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nfn test_multiple2() -> my_struct {\n    my_struct { a: 5 as u32, b: 7 as u32 }\n}\n\nfn test_multiple3(x: u32, y: u32) {\n    assert(x == y);\n}\n\nstruct my_struct {\n    a: u32,\n    b: u32,\n}\n\nstruct my2 {\n    aa: my_struct,\n    bb: my_struct,\n}\n\nfn test_multiple4(s: my_struct) {\n    assert(s.a == s.b + 2);\n}\n\nfn test_multiple5(a: (u32, u32)) {\n    assert(a.0 == a.1 + 2);\n}\n\nfn test_multiple6(a: my2, b: my_struct, c: (my2, my_struct)) {\n    test_multiple4(a.aa);\n    test_multiple5((b.a, b.b));\n    assert(c.0.aa.a == c.1.a);\n}\n\nfn foo<let N: u32>(a: [Field; N]) -> [Field; N] {\n    a\n}\n\nfn bar() -> [Field; 1] {\n    foo([0])\n}\n\nfn main(x: u32, y: u32, a: Field, arr1: [u32; 9], arr2: [u32; 9]) {\n    let mut ss: my_struct = my_struct { b: x, a: x + 2 };\n    test_multiple4(ss);\n    test_multiple5((ss.a, ss.b));\n    let my = my2 { aa: ss, bb: ss };\n    ss.a = 61;\n    test_multiple6(my, ss, (my, ss));\n\n    let my_block = {\n        let mut ab = f2(a);\n        ab = ab + a;\n        (x, ab)\n    };\n    assert(my_block.1 == 4);\n\n    test0(a);\n    test1(a);\n    test2(x as Field, y);\n    assert(bar()[0] == 0);\n\n    let mut b = [0 as u8, 5 as u8, 2 as u8];\n    let c = test3(b);\n    assert(b == c);\n    b[0] = 1 as u8;\n    let cc = test3(b);\n    assert(c != cc);\n    let e = test_multiple(x, y);\n    assert(e.1 == e.0 + 54 as u32);\n    let d = test_multiple2();\n    assert(d.b == d.a + 2 as u32);\n    test_multiple3(y, y);\n    //Regression test for issue #628:\n    let result = first(arr_to_field(arr1), arr_to_field(arr2));\n    assert(result[0] == arr1[0] as Field);\n}\n// Issue #628\nfn arr_to_field(arr: [u32; 9]) -> [Field; 9] {\n    let mut as_field: [Field; 9] = [0 as Field; 9];\n    for i in 0..9 {\n        as_field[i] = arr[i] as Field;\n    }\n    as_field\n}\n\nfn first(a: [Field; 9], _b: [Field; 9]) -> [Field; 9] {\n    a\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix"
  ]
}
