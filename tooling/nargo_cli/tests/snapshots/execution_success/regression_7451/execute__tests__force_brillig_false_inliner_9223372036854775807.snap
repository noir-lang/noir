---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/6WOQQqAMAwELfigpEnazc2vWEz//wQRKgqiF+eysIdh0nSRpifnt4ylf/DdJVRUo+Zg4ZWyNxiptQIGG2zLEAkoqjev5KwS3M2lD9nRNn+0v7EDo/0phPQAAAA=",
  "debug_symbols": "jZDdCoMwDIXfJde9qGM/4quMIbVGKYS2xHYwxHdfFN30YrCrNDn9TsgZocUm97XzXRiguo/QsCNyfU3BmuSCl+k4KdjaOjGijGCnCxUNo09Q+Uyk4GkoL5+GaPxSk2FRtQL0rVQx7Bzh/JrUl9a/0VuxsuX5A1/+povbdcWLUh/4h3TGOj7cCxqq0zTbsTMN4ZpBl73dRZJecVO20CIHi21mnO0WTRa8AQ==",
  "file_map": {
    "50": {
      "source": "fn main(x: u8) {\n    // Safety: test code\n    let predicate = unsafe { return_true() };\n    let tmp: u8 = if predicate { 0xff } else { 0 };\n\n    let y = tmp & x;\n    assert_eq(y, 1);\n}\n\nunconstrained fn return_true() -> bool {\n    true\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
