---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17454579865077992320": {
        "error_kind": "fmtstring",
        "length": 1,
        "item_types": []
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _147",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _0) 0 ]], outputs: [_1]",
    "EXPR [ (1, _0, _1) (1, _2) -1 ]",
    "EXPR [ (1, _0, _2) 0 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _0) -1 ]], outputs: [_3]",
    "EXPR [ (1, _0, _3) (-1, _3) (1, _4) -1 ]",
    "EXPR [ (1, _0, _4) (-1, _4) 0 ]",
    "EXPR [ (-1, _2, _4) (1, _2) (1, _4) -1 ]",
    "EXPR [ (-1, _2) (-1, _5) 1 ]",
    "EXPR [ (-13, _2, _4) (13, _4) (-1, _6) 0 ]",
    "EXPR [ (1, _5, _6) (11, _2) (-1, _7) -11 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _7) 0 ]], outputs: [_8]",
    "EXPR [ (1, _7, _8) (1, _9) -1 ]",
    "EXPR [ (1, _7, _9) 0 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (1, _9) 0 ]",
    "inputs: [], outputs: []",
    "EXPR [ (1, _5, _6) (11, _2) (-1, _10) -12 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _10) 0 ]], outputs: [_11]",
    "EXPR [ (1, _10, _11) (1, _12) -1 ]",
    "EXPR [ (1, _10, _12) 0 ]",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (-1, _9, _12) (1, _12) 0 ]",
    "inputs: [], outputs: []",
    "EXPR [ (1, _5, _6) (11, _2) (-1, _13) -13 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _13) 0 ]], outputs: [_14]",
    "EXPR [ (1, _13, _14) (1, _15) -1 ]",
    "EXPR [ (1, _13, _15) 0 ]",
    "EXPR [ (1, _9, _12) (-1, _9) (-1, _12) (-1, _16) 1 ]",
    "BRILLIG CALL func 2: PREDICATE: EXPR [ (1, _16, _15) 0 ]",
    "inputs: [], outputs: []",
    "EXPR [ (1, _5, _6) (11, _2) (-1, _17) -14 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _17) 0 ]], outputs: [_18]",
    "EXPR [ (1, _17, _18) (1, _19) -1 ]",
    "EXPR [ (1, _17, _19) 0 ]",
    "EXPR [ (-1, _15, _16) (1, _16) (-1, _20) 0 ]",
    "BRILLIG CALL func 3: PREDICATE: EXPR [ (1, _20, _19) 0 ]",
    "inputs: [], outputs: []",
    "EXPR [ (1, _5, _6) (11, _2) (-1, _21) -16 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _21) 0 ]], outputs: [_22]",
    "EXPR [ (1, _21, _22) (1, _23) -1 ]",
    "EXPR [ (1, _21, _23) 0 ]",
    "EXPR [ (-1, _19, _20) (1, _20) (-1, _24) 0 ]",
    "EXPR [ (-1, _23) (-1, _25) 1 ]",
    "EXPR [ (1, _5, _6) (11, _2) (-1, _26) 0 ]",
    "EXPR [ (1, _24, _25) (-1, _27) 0 ]",
    "EXPR [ (1, _26, _27) (-17, _27) 0 ]",
    "EXPR [ (1, _0) (-1, _28) -1 ]",
    "BLACKBOX::RANGE [(_28, 32)] []",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _28) 0 ]], outputs: [_29]",
    "EXPR [ (1, _28, _29) (1, _30) -1 ]",
    "EXPR [ (1, _28, _30) 0 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _28) -1 ]], outputs: [_31]",
    "EXPR [ (1, _28, _31) (-1, _31) (1, _32) -1 ]",
    "EXPR [ (1, _28, _32) (-1, _32) 0 ]",
    "EXPR [ (-1, _30) (-1, _33) 1 ]",
    "EXPR [ (2, _30, _32) (-8, _30) (-2, _32) (-1, _34) 8 ]",
    "EXPR [ (1, _33, _34) (4, _30) (-1, _35) -4 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _35) 0 ]], outputs: [_36]",
    "EXPR [ (1, _35, _36) (1, _37) -1 ]",
    "EXPR [ (1, _35, _37) 0 ]",
    "BRILLIG CALL func 4: PREDICATE: EXPR [ (1, _37) 0 ]",
    "inputs: [EXPR [ (1, _28) 0 ]], outputs: [_38]",
    "BLACKBOX::RANGE [(_38, 32)] []",
    "EXPR [ (1, _33, _34) (4, _30) (-1, _39) -5 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _39) 0 ]], outputs: [_40]",
    "EXPR [ (1, _39, _40) (1, _41) -1 ]",
    "EXPR [ (1, _39, _41) 0 ]",
    "BRILLIG CALL func 5: PREDICATE: EXPR [ (-1, _37, _41) (1, _41) 0 ]",
    "inputs: [EXPR [ (1, _28) 0 ]], outputs: [_42]",
    "BLACKBOX::RANGE [(_42, 32)] []",
    "EXPR [ (1, _33, _34) (4, _30) (-1, _43) -6 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _43) 0 ]], outputs: [_44]",
    "EXPR [ (1, _43, _44) (1, _45) -1 ]",
    "EXPR [ (1, _43, _45) 0 ]",
    "EXPR [ (1, _37, _41) (-1, _37) (-1, _41) (-1, _46) 1 ]",
    "BRILLIG CALL func 6: PREDICATE: EXPR [ (1, _46, _45) 0 ]",
    "inputs: [EXPR [ (1, _28) 0 ]], outputs: [_47]",
    "BLACKBOX::RANGE [(_47, 32)] []",
    "EXPR [ (1, _33, _34) (4, _30) (-1, _48) -7 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _48) 0 ]], outputs: [_49]",
    "EXPR [ (1, _48, _49) (1, _50) -1 ]",
    "EXPR [ (1, _48, _50) 0 ]",
    "EXPR [ (-1, _45, _46) (1, _46) (-1, _51) 0 ]",
    "BRILLIG CALL func 7: PREDICATE: EXPR [ (1, _51, _50) 0 ]",
    "inputs: [EXPR [ (1, _28) 0 ]], outputs: [_52]",
    "BLACKBOX::RANGE [(_52, 32)] []",
    "EXPR [ (1, _33, _34) (4, _30) (-1, _53) -8 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _53) 0 ]], outputs: [_54]",
    "EXPR [ (1, _53, _54) (1, _55) -1 ]",
    "EXPR [ (1, _53, _55) 0 ]",
    "EXPR [ (-1, _50, _51) (1, _51) (-1, _56) 0 ]",
    "BRILLIG CALL func 8: PREDICATE: EXPR [ (1, _56, _55) 0 ]",
    "inputs: [EXPR [ (1, _28) 0 ]], outputs: [_57]",
    "BLACKBOX::RANGE [(_57, 32)] []",
    "EXPR [ (1, _33, _34) (4, _30) (-1, _58) 0 ]",
    "EXPR [ (-1, _55, _56) (1, _56) (-1, _59) 0 ]",
    "EXPR [ (1, _58, _59) (-9, _59) 0 ]",
    "BRILLIG CALL func 9: PREDICATE: EXPR [ (1, _59) 0 ]",
    "inputs: [EXPR [ (1, _28) 0 ]], outputs: [_60]",
    "BLACKBOX::RANGE [(_60, 32)] []",
    "EXPR [ (1, _55, _56) (-1, _61) 0 ]",
    "EXPR [ (1, _50, _51) (-1, _62) 0 ]",
    "EXPR [ (1, _57, _61) (1, _59, _60) (-1, _63) 0 ]",
    "EXPR [ (1, _45, _46) (-1, _64) 0 ]",
    "EXPR [ (1, _52, _62) (1, _56, _63) (-1, _65) 0 ]",
    "EXPR [ (-1, _37, _41) (1, _41) (-1, _66) 0 ]",
    "EXPR [ (1, _47, _64) (1, _51, _65) (-1, _67) 0 ]",
    "EXPR [ (-1, _37) (-1, _68) 1 ]",
    "EXPR [ (1, _42, _66) (1, _46, _67) (-1, _69) 0 ]",
    "BRILLIG CALL func 10: inputs: [EXPR [ 1 ], EXPR [ (1, _37, _38) (1, _68, _69) 0 ]], outputs: []",
    "EXPR [ (-6, _2, _4) (6, _4) (-1, _70) 0 ]",
    "EXPR [ (1, _5, _70) (4, _2) (-1, _71) -4 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _71) 0 ]], outputs: [_72]",
    "EXPR [ (1, _71, _72) (1, _73) -1 ]",
    "EXPR [ (1, _71, _73) 0 ]",
    "BRILLIG CALL func 4: PREDICATE: EXPR [ (1, _73) 0 ]",
    "inputs: [EXPR [ (1, _0) 0 ]], outputs: [_74]",
    "BLACKBOX::RANGE [(_74, 32)] []",
    "EXPR [ (1, _5, _70) (4, _2) (-1, _75) -5 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _75) 0 ]], outputs: [_76]",
    "EXPR [ (1, _75, _76) (1, _77) -1 ]",
    "EXPR [ (1, _75, _77) 0 ]",
    "BRILLIG CALL func 5: PREDICATE: EXPR [ (-1, _73, _77) (1, _77) 0 ]",
    "inputs: [EXPR [ (1, _0) 0 ]], outputs: [_78]",
    "BLACKBOX::RANGE [(_78, 32)] []",
    "EXPR [ (1, _5, _70) (4, _2) (-1, _79) -6 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _79) 0 ]], outputs: [_80]",
    "EXPR [ (1, _79, _80) (1, _81) -1 ]",
    "EXPR [ (1, _79, _81) 0 ]",
    "EXPR [ (1, _73, _77) (-1, _73) (-1, _77) (-1, _82) 1 ]",
    "BRILLIG CALL func 6: PREDICATE: EXPR [ (1, _82, _81) 0 ]",
    "inputs: [EXPR [ (1, _0) 0 ]], outputs: [_83]",
    "BLACKBOX::RANGE [(_83, 32)] []",
    "EXPR [ (1, _5, _70) (4, _2) (-1, _84) -7 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _84) 0 ]], outputs: [_85]",
    "EXPR [ (1, _84, _85) (1, _86) -1 ]",
    "EXPR [ (1, _84, _86) 0 ]",
    "EXPR [ (-1, _81, _82) (1, _82) (-1, _87) 0 ]",
    "BRILLIG CALL func 7: PREDICATE: EXPR [ (1, _87, _86) 0 ]",
    "inputs: [EXPR [ (1, _0) 0 ]], outputs: [_88]",
    "BLACKBOX::RANGE [(_88, 32)] []",
    "EXPR [ (1, _5, _70) (4, _2) (-1, _89) -8 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _89) 0 ]], outputs: [_90]",
    "EXPR [ (1, _89, _90) (1, _91) -1 ]",
    "EXPR [ (1, _89, _91) 0 ]",
    "EXPR [ (-1, _86, _87) (1, _87) (-1, _92) 0 ]",
    "BRILLIG CALL func 8: PREDICATE: EXPR [ (1, _92, _91) 0 ]",
    "inputs: [EXPR [ (1, _0) 0 ]], outputs: [_93]",
    "BLACKBOX::RANGE [(_93, 32)] []",
    "EXPR [ (1, _5, _70) (4, _2) (-1, _94) 0 ]",
    "EXPR [ (-1, _91, _92) (1, _92) (-1, _95) 0 ]",
    "EXPR [ (1, _94, _95) (-9, _95) 0 ]",
    "BRILLIG CALL func 9: PREDICATE: EXPR [ (1, _95) 0 ]",
    "inputs: [EXPR [ (1, _0) 0 ]], outputs: [_96]",
    "BLACKBOX::RANGE [(_96, 32)] []",
    "EXPR [ (1, _91, _92) (-1, _97) 0 ]",
    "EXPR [ (1, _86, _87) (-1, _98) 0 ]",
    "EXPR [ (1, _93, _97) (1, _95, _96) (-1, _99) 0 ]",
    "EXPR [ (1, _81, _82) (-1, _100) 0 ]",
    "EXPR [ (1, _88, _98) (1, _92, _99) (-1, _101) 0 ]",
    "EXPR [ (-1, _73, _77) (1, _77) (-1, _102) 0 ]",
    "EXPR [ (1, _83, _100) (1, _87, _101) (-1, _103) 0 ]",
    "EXPR [ (-1, _73) (-1, _104) 1 ]",
    "EXPR [ (1, _78, _102) (1, _82, _103) (-1, _105) 0 ]",
    "BRILLIG CALL func 10: inputs: [EXPR [ 1 ], EXPR [ (1, _73, _74) (1, _104, _105) 0 ]], outputs: []",
    "EXPR [ (1, _0) (-1, _106) 1 ]",
    "BLACKBOX::RANGE [(_106, 32)] []",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _106) 0 ]], outputs: [_107]",
    "EXPR [ (1, _106, _107) (1, _108) -1 ]",
    "EXPR [ (1, _106, _108) 0 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _106) -1 ]], outputs: [_109]",
    "EXPR [ (1, _106, _109) (-1, _109) (1, _110) -1 ]",
    "EXPR [ (1, _106, _110) (-1, _110) 0 ]",
    "EXPR [ (-1, _108) (-1, _111) 1 ]",
    "EXPR [ (2, _108, _110) (-8, _108) (-2, _110) (-1, _112) 8 ]",
    "EXPR [ (1, _111, _112) (4, _108) (-1, _113) -4 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _113) 0 ]], outputs: [_114]",
    "EXPR [ (1, _113, _114) (1, _115) -1 ]",
    "EXPR [ (1, _113, _115) 0 ]",
    "BRILLIG CALL func 4: PREDICATE: EXPR [ (1, _115) 0 ]",
    "inputs: [EXPR [ (1, _106) 0 ]], outputs: [_116]",
    "BLACKBOX::RANGE [(_116, 32)] []",
    "EXPR [ (1, _111, _112) (4, _108) (-1, _117) -5 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _117) 0 ]], outputs: [_118]",
    "EXPR [ (1, _117, _118) (1, _119) -1 ]",
    "EXPR [ (1, _117, _119) 0 ]",
    "BRILLIG CALL func 5: PREDICATE: EXPR [ (-1, _115, _119) (1, _119) 0 ]",
    "inputs: [EXPR [ (1, _106) 0 ]], outputs: [_120]",
    "BLACKBOX::RANGE [(_120, 32)] []",
    "EXPR [ (1, _111, _112) (4, _108) (-1, _121) -6 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _121) 0 ]], outputs: [_122]",
    "EXPR [ (1, _121, _122) (1, _123) -1 ]",
    "EXPR [ (1, _121, _123) 0 ]",
    "EXPR [ (1, _115, _119) (-1, _115) (-1, _119) (-1, _124) 1 ]",
    "BRILLIG CALL func 6: PREDICATE: EXPR [ (1, _124, _123) 0 ]",
    "inputs: [EXPR [ (1, _106) 0 ]], outputs: [_125]",
    "BLACKBOX::RANGE [(_125, 32)] []",
    "EXPR [ (1, _111, _112) (4, _108) (-1, _126) -7 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _126) 0 ]], outputs: [_127]",
    "EXPR [ (1, _126, _127) (1, _128) -1 ]",
    "EXPR [ (1, _126, _128) 0 ]",
    "EXPR [ (-1, _123, _124) (1, _124) (-1, _129) 0 ]",
    "BRILLIG CALL func 7: PREDICATE: EXPR [ (1, _129, _128) 0 ]",
    "inputs: [EXPR [ (1, _106) 0 ]], outputs: [_130]",
    "BLACKBOX::RANGE [(_130, 32)] []",
    "EXPR [ (1, _111, _112) (4, _108) (-1, _131) -8 ]",
    "BRILLIG CALL func 11: inputs: [EXPR [ (1, _131) 0 ]], outputs: [_132]",
    "EXPR [ (1, _131, _132) (1, _133) -1 ]",
    "EXPR [ (1, _131, _133) 0 ]",
    "EXPR [ (-1, _128, _129) (1, _129) (-1, _134) 0 ]",
    "BRILLIG CALL func 8: PREDICATE: EXPR [ (1, _134, _133) 0 ]",
    "inputs: [EXPR [ (1, _106) 0 ]], outputs: [_135]",
    "BLACKBOX::RANGE [(_135, 32)] []",
    "EXPR [ (1, _111, _112) (4, _108) (-1, _136) 0 ]",
    "EXPR [ (-1, _133, _134) (1, _134) (-1, _137) 0 ]",
    "EXPR [ (1, _136, _137) (-9, _137) 0 ]",
    "BRILLIG CALL func 9: PREDICATE: EXPR [ (1, _137) 0 ]",
    "inputs: [EXPR [ (1, _106) 0 ]], outputs: [_138]",
    "BLACKBOX::RANGE [(_138, 32)] []",
    "EXPR [ (1, _133, _134) (-1, _139) 0 ]",
    "EXPR [ (1, _128, _129) (-1, _140) 0 ]",
    "EXPR [ (1, _135, _139) (1, _137, _138) (-1, _141) 0 ]",
    "EXPR [ (1, _123, _124) (-1, _142) 0 ]",
    "EXPR [ (1, _130, _140) (1, _134, _141) (-1, _143) 0 ]",
    "EXPR [ (-1, _115, _119) (1, _119) (-1, _144) 0 ]",
    "EXPR [ (1, _125, _142) (1, _129, _143) (-1, _145) 0 ]",
    "EXPR [ (-1, _115) (-1, _146) 1 ]",
    "EXPR [ (1, _120, _144) (1, _124, _145) (-1, _147) 0 ]",
    "BRILLIG CALL func 10: inputs: [EXPR [ 1 ], EXPR [ (1, _115, _116) (1, _146, _147) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 106 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 105 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(5), source: Relative(4) }, Store { destination_pointer: Relative(5), source: Relative(1) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(2) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 50 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(4) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(6) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(10) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(12) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(15) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(16) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(1) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(17) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(18) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(2), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(4), size: 2 }), HeapArray(HeapArray { pointer: Relative(5), size: 28 }), MemoryAddress(Relative(2))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 2 }, Array { value_types: [Simple(Integer(U8))], size: 28 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 111 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 106 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 105 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(5), source: Relative(4) }, Store { destination_pointer: Relative(5), source: Relative(1) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(2) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 50 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(4) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(6) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(10) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(12) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(15) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(16) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(1) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(17) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(18) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(2), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(4), size: 2 }), HeapArray(HeapArray { pointer: Relative(5), size: 28 }), MemoryAddress(Relative(2))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 2 }, Array { value_types: [Simple(Integer(U8))], size: 28 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 111 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 2",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 110 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 98 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 121 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 101 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(6), source: Relative(5) }, Store { destination_pointer: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(3) }, Const { destination: Relative(1), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 51 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(1) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(6) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(10) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(12) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(6) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(15) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(16) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(17) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(18) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(2), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(3), size: 3 }), HeapArray(HeapArray { pointer: Relative(5), size: 28 }), MemoryAddress(Relative(2))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 3 }, Array { value_types: [Simple(Integer(U8))], size: 28 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 115 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 3",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 110 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 98 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 121 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 101 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(6), source: Relative(5) }, Store { destination_pointer: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(3) }, Const { destination: Relative(1), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 51 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(1) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(6) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(10) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(12) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(6) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(15) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(16) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(17) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(18) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(2), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(3), size: 3 }), HeapArray(HeapArray { pointer: Relative(5), size: 28 }), MemoryAddress(Relative(2))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 3 }, Array { value_types: [Simple(Integer(U8))], size: 28 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 115 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 4",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 17 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 22 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 5",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 17 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 22 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 6",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 23 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 21 }, Call { location: 29 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 28 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 7",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 23 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 21 }, Call { location: 29 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 28 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 8",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 23 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 21 }, Call { location: 29 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 28 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 9",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 23 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 21 }, Call { location: 29 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 28 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 10",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 15 }, Call { location: 16 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 119 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 117 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 119 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 51 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 50 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 38 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(23) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(23) }, Store { destination_pointer: Relative(24), source: Relative(3) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(4) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(5) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(6) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(8) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(4) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(9) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(4) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(10) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(11) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(6) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(12) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(13) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(8) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(6) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(14) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(13) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(12) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(13) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(15) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(4) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(16) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(4) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(17) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(6) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(8) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(14) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(18) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(4) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(9) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(19) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(20) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(21) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), MemoryAddress(Relative(2)), HeapArray(HeapArray { pointer: Relative(4), size: 37 }), MemoryAddress(Relative(3))], input_value_types: [Simple(Integer(U1)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 124 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 11",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "7dnRbts4EAXQf/FzHsS5JIfTXymCIm29RYAgCdKkwKLIv6+oe8ftduE2sBFgH/LSmdjisazySqL8ffd5//Hpy4fr27/uvu7evf+++/hwfXNz/eXDzd2nq8fru9v11e+7Zf5TsHtXL3alsjSWzuIsgyW2YgtLYTEWKrYqvpbG0lmcZbDEVrCwFBZjAQsVUAEVUAEVUKlUKpVKpVKpVCqVSqVSqVQqlUalUWlUGpVGpVFpVBqVRqVR6VQ6lU6lU+lUOpVOpVPpVDoVp+JUnIpTcSpOxak4FafiVAaVQWVQGVQGlUFlUBlUBpVBJagElaASVIJKUAkqQSWoBJWyrMyYtaiaKlRXajyvTU7H4HQMTsfgdAxOx+B0DE7H4HQMTsfgdAxOx3ibjm/T8YzpaK9ydqycjpXTsXI6lsL5uNVgnTNyq0XVVKFaVZtqV5UHeZBX5VV5VV6VV+VVeVVelVflVXlNXpPX5DV5TV6T1+Q1eU1ek9fldXldXpfX5XV5XV6X1+V1eS7P5bk8l+fyXJ7Lc3kuz+UNeUPekDfkDXlD3pA35A15Q17IC3khL+SFvJAX8kJeyAt527xmU7KxbJDNRG02LZuejWczYVsDgAxAAROw1abaVV11qAbrzMFWi6qpyjN5Js/kvcXhLQ7/zzj0LQ7zfc16TXrNeU35dUN/6YYjNzRuaNzQuKFxw/nR8dINC2/p100USSVSgVQeFUelUWFUFhVFJREMIphDMIZgCsEQghkEIwgmEAwgmD8wfmD6wPCB2QOjByYPDB6YOzB2YOrA0IGZAyMHJg4MHJg3MG5g2sCwgVkDowYmDQwamDMwZmDKwJCBGQMjBiYMDBiYLzBeYLrAcIHZAqMFJgsMFpgrMFZgqsBQgZkCIwUmCgwUmCcwTmCawDCBWQKjBCYJDBKYIzBGYIrAEIEZAiMEJggKEJQfKD5QeqDwQNmBogMlBwrOVuUVeUVekVfkFXl5k5V3Wdtt1vM6uXPt+uHxYb+f8/ynxey6xL2/etjfPu7e3T7d3Fzsvl3dPG0bfb2/ut3q49XD+u5ysdvffl7rCv51fbOf3fPFj9HL8aGtdg1urR2Gt5ePH8jxYSeMH1E0PgyH8WYvHe/VNd7HcsJ467n/5v3Y/rcz97+/3vizv39Ujccyjn3/OHP/y/KKwLlHwC2H+2F0xYuPX46uR2d/qceHw1oefpSTgBYJ9HYKUJc8e9RyfA/8rOP32883HI5gP+EEEjk8ximnrzz7RRwbbeX48L7k0e+lnQTU3P1eT9uDGHn4l1POvzWHr5fGo5/fXu/8XUqef0rD0R3w1zsA6yX+sAP16A7E6x0BW/IUYGU55Qv0cRh/NMCwMyfxb4GXTOLfAuf+H/blcAiOjsdJV+HL9a+rT9cP//6RYa6+2vY0bRaw1Lkj6y04S2eZS6XBNUyZz3eLqqlCtao21a7qqkM1WE2eyTN5Js/kmTyTZ/JMnsmDPMiDPMiDPMiDPMiDPMir8uZqyBYuh7YKXjLngmirTXWuA7UmMi2KTOsgq1wIbRWqVbWpdlVXHarBOhdEW5XX5XV5XV6X1+V1eV1el+fyXJ7Lc3kuz+W5PJfn8lzekDfkDXlD3pA35A15Q96QN+SFvJAX8kJeyAt5IS/kzWWTdS2YLJ8sWz5atny2bPlwmU3Lpmfj2YxsQk1JuaRcUi4pl5RLyiXlknJJuaRsKVvKlrKlbClbypaypWwpW8pIGSkjZaSMlJEyUkbKSBkp15RryjXlmnJNuaZcU96eJSyzmQvU+VRme54wm+2JwvaQs2Rj2cxV6vYTQM2mZTOdNptQsz1T2JqSjWWDbGo2LZuejWeTck/ZU/aUPWVP2VP2lD1lT9lT9pRHyiPlkfJIeaQ8Uh4pj5RHyiPlSDlSjpQj5Ug5Uo6UI+VIOSTbsmRTsrFskE3NZsrzvvvb1cP11ceb/bw8zQvY0+2nvFqtfz7+fZ/v5I/m9w93n/afnx7288r20y/n67/v5z3RGsvLw++Xv7xoP15cV2ZrOC8PT9Z/ebH+eNEvzOZL7b8v9cNL6znfxiWvk+/Xuy5sn+d/eH/84f34w/vlp6++XrXWk8Pl87z0/wM=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "43": {
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n",
      "path": "std/panic.nr"
    },
    "50": {
      "source": "fn main(x: u32) {\n    lambdas_no_inputs(x);\n    println(lambdas_with_input_and_return_values(x - 1));\n    println(lambdas_with_input_and_return_values(x));\n    println(lambdas_with_input_and_return_values(x + 1));\n}\nfn lambdas_no_inputs(x: u32) {\n    let f1 = || println(\"hi\");\n    let f2 = || println(\"bye\");\n    let f = if x == 0 {\n        f1\n    } else if x == 1 {\n        f2\n    } else {\n        panic(f\"!\")\n    };\n    f();\n}\nfn lambdas_with_input_and_return_values(x: u32) -> u32 {\n    let f1 = |value: u32| value;\n    let f2 = |value: u32| value + 1;\n    let f3 = |value: u32| value + 2;\n    let f = if x == 0 {\n        f1\n    } else if x == 1 {\n        f2\n    } else {\n        f3\n    };\n    f(x)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "lambda",
    "lambda",
    "lambda",
    "lambda",
    "lambda",
    "lambda",
    "lambda",
    "lambda",
    "lambda",
    "lambda",
    "print_unconstrained",
    "directive_invert"
  ]
}
