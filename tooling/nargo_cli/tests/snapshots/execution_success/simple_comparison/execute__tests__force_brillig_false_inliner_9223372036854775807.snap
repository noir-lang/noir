---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _15",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(2)), Simple(Witness(3))]",
    "BLACKBOX::RANGE [_2]:222 bits []",
    "BLACKBOX::RANGE [_3]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _2) (-1, _3) 0 ]",
    "EXPR [ (-1, _2) (-1, _4) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [_4]:222 bits []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(2))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(5))]",
    "EXPR [ (-1, _2, _5) (5096253676302562286669017222071363378443840053029366383258766538131, _5) (1, _6) -1 ]",
    "EXPR [ (-1, _2, _6) (5096253676302562286669017222071363378443840053029366383258766538131, _6) 0 ]",
    "EXPR [ (1, _3, _6) (1, _6, _6) (268435454, _6) (-1, _7) 0 ]",
    "BLACKBOX::RANGE [_7]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(8)), Simple(Witness(9))]",
    "BLACKBOX::RANGE [_8]:222 bits []",
    "BLACKBOX::RANGE [_9]:32 bits []",
    "EXPR [ (1, _1) (-4294967296, _8) (-1, _9) 0 ]",
    "EXPR [ (-1, _8) (-1, _10) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [_10]:222 bits []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(8))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(11))]",
    "EXPR [ (-1, _8, _11) (5096253676302562286669017222071363378443840053029366383258766538131, _11) (1, _12) -1 ]",
    "EXPR [ (-1, _8, _12) (5096253676302562286669017222071363378443840053029366383258766538131, _12) 0 ]",
    "EXPR [ (1, _9, _12) (1, _12, _12) (268435454, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [_13]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(9))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [_15]:32 bits []",
    "EXPR [ (1, _3) (-1, _9) (-4294967296, _14) (-1, _15) 4294967296 ]",
    "EXPR [ (-1, _14) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "nZLRboQgEEX/ZZ55ENBV91eaxqDihoSgYaFJY/z3jjPa3TZp0uzLPcJwhgCuMNo+3zoXpvkO17cV+ui8d7fOz4NJbg44u24CzmGXorU4BU91tBYTbUhwDdl7AR/GZ1p0X0wgJhOxWgiwYURiw8l5u39t4mEXf6tStocsVf2tV//39bm51M0r/mP/X/47jszg4o8bgwIXCpCUilJTlpQV5YWypmwoW7YOGW2FUAzNKBkV48KoGQ2jJaiCwV0UdtEIzSgZ2EVv+6GjM723x1tPOQxPT58+l7Ny/hxLnAc75mj3Q1MNr+EL",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is comparison\nfn main(x: Field, y: Field) {\n    assert(x as u32 < y as u32);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
