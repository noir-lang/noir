---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 63 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Store { destination_pointer: Relative(1), source: Relative(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 6 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 2147483648 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 7 }, Jump { location: 22 }, Load { destination: Relative(7), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(8), location: 62 }, Jump { location: 26 }, Load { destination: Relative(7), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(4) }, Mov { destination: Relative(9), source: Relative(8) }, Cast { destination: Relative(8), source: Relative(9), bit_size: Integer(U32) }, Cast { destination: Relative(10), source: Relative(7), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(5) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(7) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 38 }, Call { location: 69 }, Store { destination_pointer: Relative(1), source: Relative(9) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(2) }, Jump { location: 43 }, Load { destination: Relative(8), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(6) }, JumpIf { condition: Relative(9), location: 61 }, Jump { location: 47 }, Load { destination: Relative(8), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(4) }, Mov { destination: Relative(10), source: Relative(9) }, Cast { destination: Relative(9), source: Relative(10), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(8), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(5) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(9), rhs: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 59 }, Call { location: 69 }, Store { destination_pointer: Relative(7), source: Relative(10) }, Jump { location: 43 }, Jump { location: 22 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 68 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "ndPNjsIgEMDxd+HMga+Btq+yMQYrGhJCG2w32Zi++w6ddlcPXnrpT6T/MZLwZNdwme/nmG/Dg3VfT3YpMaV4P6eh91McMn77ZKI+pGad4kwaAgi7ohSBr2jEEo51BmmIdkULQhKK0IQhgLAETdE0ReMU4MwIQhKawNwijsDAIe0KCEISitCEIYCwhCNoCtQpy8LZfiznqYRQT+XlnPD0Rl9CnliX55Q4+/ZpXl96jD6vTr7gruAs5CuKA28xhfpp4f+1+JxK0WyxBPWXw3svP/dKwdYrZY/00O69bQ/02sit1yAO9Ea4rTeiOdLb/f8bBwd6aPTWQ/t+/idc+T6Wt5uz1Ekl+ksK2/I25/5ld/oZ95395o1l6MN1LqFOerl++PyymtvmhNdO1kXLnTwt9ad/AQ==",
  "file_map": {
    "50": {
      "source": "// Regression for issue #8319 (https://github.com/noir-lang/noir/issues/8319)\nunconstrained fn main() {\n    func_4(([982714762, 1608230664, 671108204]))\n}\n\nunconstrained fn func_4(a: [u32; 3]) {\n    {\n        let mut idx_b = 0;\n        loop {\n            if (idx_b == 6) {\n                break\n            } else {\n                idx_b = (idx_b + 1);\n                {\n                    let mut idx_c = 0;\n                    loop {\n                        if (idx_c == 7) {\n                            break\n                        } else {\n                            idx_c = (idx_c + 1);\n                            for idx_d in ((a[2] / 1193346642) % 4)..(a[1] % 4) {\n                                {\n                                    let mut idx_g = 0;\n                                    loop {\n                                        if (idx_g == 3) {\n                                            break\n                                        } else {\n                                            idx_g = (idx_g + 1);\n                                            let h = (a[0] % idx_d);\n                                            println(h);\n                                        }\n                                    }\n                                };\n                                break;\n                            }\n                        }\n                    }\n                };\n            }\n        }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
