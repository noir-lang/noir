---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _2",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 1 })], outputs: [Simple(Witness(2))]",
    "EXPR [ (-1, _0, _2) (1, _2) -1 ]",
    "EXPR [ (1, _0) -2 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZFBCsMgEEXvMmsX1tKk5CqlBGMmQRAVo4UScvdOJLbJoovSjePMn/eF7ww9dmlstR3cBM1thi5oY/TYGqdk1M7SdF4YlLaNAZFGsNOJ8jKgjdDYZAyDhzQpL01e2lyjDKRyBmh7qmQ4aIPrbWEfmn9HhbhusDiLN375gef/8VVd+Lo68HfqpNLhkBhwWmRwyqeA5rys1kHLzuCW6JCs2gUcn74o5Qt8cAr7FHC1zho99gI=",
  "file_map": {
    "50": {
      "source": "type Foo<T> = [T; 2];\n\ntype Bar = Field;\n\ntype One<A, B> = (A, B);\ntype Two<A> = One<A, u32>;\ntype Three = Two<u8>;\n\nstruct MyStruct {\n    foo: Bar,\n}\n\nfn main(x: [Field; 2]) {\n    let a: Foo<Field> = [1, 2];\n    assert(a[0] != x[0]);\n\n    let b: Bar = 2;\n    assert(x[0] == b);\n\n    let c: u8 = 1;\n    let d: u32 = 2;\n    let e: Three = (c, d);\n    assert(e.0 == 1);\n\n    let s = MyStruct { foo: 10 };\n    assert(s.foo == 10);\n\n    let _regression2502: Regression2502Alias = Regression2502 {};\n}\n// An ICE was occurring if a type alias referred to a struct before it was initialized\n// during name resolution. The fix was to initialize structs during def collection instead.\ntype Regression2502Alias = Regression2502;\nstruct Regression2502 {}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
