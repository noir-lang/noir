---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1VzU7DMAxO2w0oaCCBOICEGHAAiUuyJEt66wEeJFvb59ij02qOarxu/KzdNK2WIqep+/nz1yQO2NLCcgxhHpQjAl/ZuBwD9I6aX0vB8+1MtIjFgwaenREPEJbkU6VyM8mFFI5PkpnVXOnZ1AortNXZxEqZW2VNMksMT4SSuSh0IvNiaQPgd8iCh10TD9sTPKu4bdrl1HxxL+Bjsu5PUdpSrTHCbRvfcjWN2eq/apG/jAGzS308Zgf4/BRwPhY1Pq2FIe/j6DfV+xFbPdw+5qwcl6yeX8F8BP4TYfnvu9S23Bu6Y23FDVuv5wXocL+DWjlc4jg/Y3U3xGcP58d3x8maeI83JPG34KsaxwQzaOAQ/ZFDRGKaONw1cKh093fCYPG9jhTW+RZmbN0sokXNC+vOSP4hiX+E53NUI0O1pf/kWRgnCukKp12Wqbm7JviVhUintvMr7czcGSESJXIl9E/532He96CN1vcg1vegNfarHvS8g1r5nnvQG8HcRw+iHHalwwPbvw5PDRwOoRe/wvOx9+IvVcPJu1IRAAA=",
  "debug_symbols": "pZTLqoMwEIbfJesscjNeXqVIsTYtQlBJ9cCh+O5npmO0XSjFs/FTk//LhOg82dVdxvu5aW/dgxWnJ7uExvvmfvZdXQ1N18LbJxN4kZYVkjOZEjJC/oISBMkKDVAETTCACaZGiSGJIYkhiSGJIYkliSWJJQkiYUUGsISUkBGwFMGZFjPlTIWcoIK4p/MQnMNq3jYJW++r4NqBFe3oPWc/lR9fkx591b44VAFGwejaKxCEt8Y7vJv4mhbb0VTIOZwKu8STr/M2T5Z8upVXO3lt57w18sD6UmVRIFV+zJBmq0FtGZI9g9SLQWaHDCJZDfmWId0xSJNHg0zMMYNcDcmWId8xiPUsxNGziALz3/yRr1mJ+CvtnMJ3efV5BiU8VXUTPpsYtgPsUVg5dAUAfEgGq59wkdBUF+9wJrrGto5BeBx++zgS+2Mfutpdx+BwkbcmCdeTslzLEvoaLHnSimtTLv0Px7XhOo/jRnCjygmr/gM=",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is brillig calls\nfn main(x: u32) {\n    unsafe {\n        assert(entry_point(x) == 2);\n        swap_entry_point(x, x + 1);\n        assert(deep_entry_point(x) == 4);\n        multiple_values_entry_point(x);\n    }\n}\n\nunconstrained fn returns_multiple_values(x: u32) -> (u32, u32, u32, u32) {\n    (x + 1, x + 2, x + 3, x + 4)\n}\n\nunconstrained fn multiple_values_entry_point(x: u32) {\n    let (a, b, c, d) = returns_multiple_values(x);\n    assert(a == x + 1);\n    assert(b == x + 2);\n    assert(c == x + 3);\n    assert(d == x + 4);\n}\n\nunconstrained fn inner(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn entry_point(x: u32) -> u32 {\n    inner(x + 1)\n}\n\nunconstrained fn swap(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nunconstrained fn swap_entry_point(x: u32, y: u32) {\n    let swapped = swap(x, y);\n    assert(swapped.0 == y);\n    assert(swapped.1 == x);\n    let swapped_twice = swap(swapped.0, swapped.1);\n    assert(swapped_twice.0 == x);\n    assert(swapped_twice.1 == y);\n}\n\nunconstrained fn level_3(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn level_2(x: u32) -> u32 {\n    level_3(x + 1)\n}\n\nunconstrained fn level_1(x: u32) -> u32 {\n    level_2(x + 1)\n}\n\nunconstrained fn deep_entry_point(x: u32) -> u32 {\n    level_1(x + 1)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point",
    "deep_entry_point"
  ]
}
