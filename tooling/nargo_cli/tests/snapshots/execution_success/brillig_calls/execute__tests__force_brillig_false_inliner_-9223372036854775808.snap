---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1WbU+DMBAubKjT+BKNHzQxLi7xi1/atR0l0YRE/SFswO/gpwvZNdxuZWYbuMztkuYKHM8999By9djc/HIEMPfK0QNf2bAcffSMmr0Xg+fbmWgRi3sOnp0R9xCW5BOlsnCcCSkSPo6mRnOlpxMjjNBGp2MjZWaUCaNpFPJIKJmJXEcyy+fWB377LLjfNXG/PcHTituqVU7NFjcCPyD37S6KW6p1gHDbxjdcTQZs+Vu1yF8OALNLfSxmB/j8FHC+ihqf1sKQt3H0ner5JVve3DbmrBxXrJ5fw/wS/DfCsu93qW25NnTH2oo71qznBejw+Ae1cviJ4/yM1d0Q7z2cH/87ThriLV5A4u/BVzUOCabn4NBbk0OPxLg4PDg4VLrbf0K/WKwjhvt8CwtN3Sx6Rc0L685I/oDEP8P1OaqRodriDXnmYSJymeSJTtJUzZJbgl+Zj3RqO7/SSThLQiEiJTIl9G/5P2B+7EEr7diD2GY96Abmh9qD7Lr8LLrJbXvcE1vUFR+gaU+hfDDfph5k8QISj3sQPs92qLey66/Pls0+CxzcPUc87RmYd1XTK8KlcTQn1svm34de+ALXh94Ld7mP3sD/130kES6Nozmb9tEuv49BtYwIB9dZ21+TAz2Puzi8OzhUuvwARohCAIoTAAA=",
  "debug_symbols": "pZTLioMwFIbfJWsXucf4KkWKtZkiBJVUB4biu8+Jx2i7aBkyGz81+f7c9DzI1V3m27nrv4Y7qU4Pcgmd993t7Ie2mbqhh7cPQuOFaVKxgjCDKBF2BacIRioB4AiBkIAFuq4hYEu0JdoSbYm2QluhrdCOUAiNMCsE6LogkiIYgiNANwCJUAiNMIgSYVco8EqAQEiEQsSlU6DZWG6Mq6cLLC5t13kKzsWFPu0f7OrYBNdPpOpn7wvy3fh57XQfm37l1ARohUTXX4EQ+NV5F++W4rDpe9VQtsmG6l1Xf/a1Vbtv3vn8gy/05mvJMsZnvEwBjNu8BFMeCTwrgYk9gZVZCVQdCTYngUmbEpiSeQnsSFDvEuyHBHqcBc09ixQg/+vnfM2cpl8p7xSefP56BjU8NW0XXusji3sNZSnOHMoSAD4kGWe/xEFC11y8iz1j1ty3SYTH6WdMLan0jmFo3XUOLg7yVH/heuK6EKyGyglDngQvhKz30rq22/gqtatCmHqJs/4F",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is brillig calls\nfn main(x: u32) {\n    unsafe {\n        assert(entry_point(x) == 2);\n        swap_entry_point(x, x + 1);\n        assert(deep_entry_point(x) == 4);\n        multiple_values_entry_point(x);\n    }\n}\n\nunconstrained fn returns_multiple_values(x: u32) -> (u32, u32, u32, u32) {\n    (x + 1, x + 2, x + 3, x + 4)\n}\n\nunconstrained fn multiple_values_entry_point(x: u32) {\n    let (a, b, c, d) = returns_multiple_values(x);\n    assert(a == x + 1);\n    assert(b == x + 2);\n    assert(c == x + 3);\n    assert(d == x + 4);\n}\n\nunconstrained fn inner(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn entry_point(x: u32) -> u32 {\n    inner(x + 1)\n}\n\nunconstrained fn swap(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nunconstrained fn swap_entry_point(x: u32, y: u32) {\n    let swapped = swap(x, y);\n    assert(swapped.0 == y);\n    assert(swapped.1 == x);\n    let swapped_twice = swap(swapped.0, swapped.1);\n    assert(swapped_twice.0 == x);\n    assert(swapped_twice.1 == y);\n}\n\nunconstrained fn level_3(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn level_2(x: u32) -> u32 {\n    level_3(x + 1)\n}\n\nunconstrained fn level_1(x: u32) -> u32 {\n    level_2(x + 1)\n}\n\nunconstrained fn deep_entry_point(x: u32) -> u32 {\n    level_1(x + 1)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point",
    "deep_entry_point"
  ]
}
