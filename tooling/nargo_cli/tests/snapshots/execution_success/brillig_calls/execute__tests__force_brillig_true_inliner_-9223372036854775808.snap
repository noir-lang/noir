---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91VTU/DMAztJ1AmhARXfgBcIGGpul3QJBASF45cOEC00d/Rn44i2ar1SMdX0k7zxa3iPj8/u06a9JaSL+A98cSsyKv/mQ6IpbxEtxnHvJOvyGfiPA9YbAV5Q+IvlKkrT30B+c8rwoypD2NGwFeHhPPQ9fhYSyI8x+E37vyEnuWcccwRnfPzKT1X8E2M/kfsjzr38M9Ebc7uuyi59Yy0vAItI82K4f7yMpTGZ6XILTVBy+Fd8nY13QhcjMOcsrflOFrcpqBFQfhD/08J8RfAs4zDU50J3JE1GnVelgIX4zDntnmJsYecFilwHpoXzl9C/CXwLOLw9M4L55ol/U4ruvD5m4VSnDfveh2w9zJ/CfHX9H48UMfqjzzbxup2bltb283GrC3q5CwTOsm9zH3NRGyefL0r5T0he3/giZd4OCuGvOPwCBxSD4fslxx+Mq8LD4epdbnzcNq1HSi1RftuBz4JXIzDnL77wPUn9H9jatusbaP10ugPo+td/m+eye/rfLwIXIzDnEPzMWV/XkUtU+21Nw8Hp8sndEVIKjUQAAA=",
  "debug_symbols": "pdVNboMwEAXgu3jNwuN/c5UoighxKiQEiEClKuLuHTMmpJXowt3whcB7AU8ET3YL1/nj0nT3/sHK05Ndx6Ztm49L29fV1PQdfvtkPG7AsBIKBpZwhF8RnABCEJKVAlGEJgxhCWyRiF+RnABCEJJQBLYoxBCWcIRfUbinEb+iOQEEdlpEEorQBOYc4lcMJ4DAnEckoQhNGMISbsXiKcBRnTRJm4zLh2tkPel4EpIiKZMqGfO4cM4lPel5MuZxEbxIymTMq2Up2DbYyzSGEOf6Nmmc/1CNoZtY2c1tW7DPqp3Xkx5D1a1O1YhH8Q5Cd0Ox8N60IX5aij3Nj6MgbAqDgldcZ+VNRl7w7eIF+P/lhcrIWw4pb3nO9RuvX3l7lDd/5KVJeZO5/m4rAOEzJ+j2BpHVAPLVAC6rgeu9Ied/AKD81gBa5TXA3qCPGuKtHlbwfRj81zDOuFfVzfjjUb7ErrGprm1Iu/e5q9+OTl/DdmR7FQxjX4fbPIbY9PY+wO0J70CZM74H8Llzsryw4rzEn/4G",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is brillig calls\nfn main(x: u32) {\n    unsafe {\n        assert(entry_point(x) == 2);\n        swap_entry_point(x, x + 1);\n        assert(deep_entry_point(x) == 4);\n        multiple_values_entry_point(x);\n    }\n}\n\nunconstrained fn returns_multiple_values(x: u32) -> (u32, u32, u32, u32) {\n    (x + 1, x + 2, x + 3, x + 4)\n}\n\nunconstrained fn multiple_values_entry_point(x: u32) {\n    let (a, b, c, d) = returns_multiple_values(x);\n    assert(a == x + 1);\n    assert(b == x + 2);\n    assert(c == x + 3);\n    assert(d == x + 4);\n}\n\nunconstrained fn inner(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn entry_point(x: u32) -> u32 {\n    inner(x + 1)\n}\n\nunconstrained fn swap(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nunconstrained fn swap_entry_point(x: u32, y: u32) {\n    let swapped = swap(x, y);\n    assert(swapped.0 == y);\n    assert(swapped.1 == x);\n    let swapped_twice = swap(swapped.0, swapped.1);\n    assert(swapped_twice.0 == x);\n    assert(swapped_twice.1 == y);\n}\n\nunconstrained fn level_3(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn level_2(x: u32) -> u32 {\n    level_3(x + 1)\n}\n\nunconstrained fn level_1(x: u32) -> u32 {\n    level_2(x + 1)\n}\n\nunconstrained fn deep_entry_point(x: u32) -> u32 {\n    level_1(x + 1)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
