---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1XbW7TQBBdfyTFoAJqqSBIQKFIfAlp17sb2/+CRA7iNPZ/bpDbcBfOwUGI1Vl5MnEc03iduvVI0c7a49n3Jut5a4fdmLf+BeA7MHdgfrn++egeNXNtBiM/zESLubhTgdMacAflknyqVBaFmZAi5WGyiDVXejGNRSx0rJdhLGUWqzhKFknEE6FkJnKdyCy/MYzTtVjg2+LMIZnbcv3MxnPRxnNQDfqy8WzidG3g9KHIfX7DPdvAPdbaG7702Wab7UvBN0DW6QKruGfiL/7+mPz683tOr1/BaLTIRTm8FgsSEGxt5o+5mgZsuwYt4pcB22yLNupjclrIz08gz89VmZ9yYWg0cfSZ4v4p+HifmZhH699TVvrPwD+FcY5ymedt1na9N7Tl2opztrueT6AOrzvgykHS8fqMlU0Pv3t4fdxXxjviTb4Rib+AseB4SXI6FRi8/8TgkZgqDJMKDEXdTU/wV5s8ZnCdH2BRXCqhtypxbSkiWn9E4t/B/DHiyBC32S1x5lEqcpnmqU6XS3WdnpH8hbmoTm2vr3QaXaeREIkSmRJ63/qvwB80qNak5T4WBmz7jGFbgzAXs24TDTIxcxQzJzF1OmXu4c8c8zzWrcJ/Dn7AqvviDOb8ADP7x6I28HO2WweMTp2h+V3vny9hfuz++Q38oX/V2nCGZsMZeoc1OkN/6IArP/IZ+jPJeYwzNMXQVR3esOPX4X0Fhj5o4SeYP/Rvie/g91yL9aDF9dalFhvdxbps+VtA34VvgY+E633R2xes/D+/dsMxpJibchzt4egTjiZ+0j1HSTE35Tjew3FEOJr4t91zVBRzU44neziOCUcTf1XBsQ/nkS8wf+jnkX9oL7Lo8CEAAA==",
  "debug_symbols": "nZXNbqswEIXfxWsvPPbYhrxKFEUkoRUSIhENV7qK8u6dYWxoF6DKG07AOR9n/MO81K29TJ/nbvi4f6nD8aUuY9f33ee5v1+bZ3cf6OlLGb5AUAfQCqJIJVLPYo0IqIMjsSJOBEnepBmCAkGBoEBQICiQIJAgkCAQFq8OFUkQiSKVCEcxWjmTFJJaVgrg5gBEAKulGpvKsakemwqyqSInaSDVBKkoSFXNyjyUSLPGpFXSWnRO5VMqn1KxuqTM82+KmWf+/BzbliP/WApaoEcztsNTHYap77X61/TT/KevRzPM+mxGGqW62+FGSsCPrm/511uvbrNtjQaSOZqw2P2f/aH2iz9u+e2O34XkDwgF7wdbZQDYuowQq5Vgtwh+j8B7IxGgKiIYvxLqLULcIQDWmQAeywiwEvwWod4hmHUtTNFaYMjTgNt+gG2A8zmBC2WA4BZAVQSI+TS66MsAMQMqW7af8yIUnqjVX/JFgCU/lOX3q98V+K3JC7Bzkv7mt1jid3kP2/B7A5zorrl24+92yy0izA0T4ty2gD5HKMLthg5c4FRaRS5Jq4qTvTnA2DWXvmUKv2carhlKt8//jzySu/xjvF/b2zS2HOBHq6fr0Qbt4EQdkeIcndUOOS0s45TGutPS2PmRQ+3qbEGj0Z6WvjuPB40LEq1GQvIkfAM=",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is brillig calls\nfn main(x: u32) {\n    unsafe {\n        assert(entry_point(x) == 2);\n        swap_entry_point(x, x + 1);\n        assert(deep_entry_point(x) == 4);\n        multiple_values_entry_point(x);\n    }\n}\n\nunconstrained fn returns_multiple_values(x: u32) -> (u32, u32, u32, u32) {\n    (x + 1, x + 2, x + 3, x + 4)\n}\n\nunconstrained fn multiple_values_entry_point(x: u32) {\n    let (a, b, c, d) = returns_multiple_values(x);\n    assert(a == x + 1);\n    assert(b == x + 2);\n    assert(c == x + 3);\n    assert(d == x + 4);\n}\n\nunconstrained fn inner(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn entry_point(x: u32) -> u32 {\n    inner(x + 1)\n}\n\nunconstrained fn swap(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nunconstrained fn swap_entry_point(x: u32, y: u32) {\n    let swapped = swap(x, y);\n    assert(swapped.0 == y);\n    assert(swapped.1 == x);\n    let swapped_twice = swap(swapped.0, swapped.1);\n    assert(swapped_twice.0 == x);\n    assert(swapped_twice.1 == y);\n}\n\nunconstrained fn level_3(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn level_2(x: u32) -> u32 {\n    level_3(x + 1)\n}\n\nunconstrained fn level_1(x: u32) -> u32 {\n    level_2(x + 1)\n}\n\nunconstrained fn deep_entry_point(x: u32) -> u32 {\n    level_1(x + 1)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point",
    "swap_entry_point",
    "deep_entry_point",
    "multiple_values_entry_point"
  ]
}
