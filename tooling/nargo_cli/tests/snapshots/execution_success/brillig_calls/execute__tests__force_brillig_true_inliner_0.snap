---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/71WPU/DMBB1iF0wFQzAwMLAwgKD3dhK2Rj4I1ZLfkd+Oqp0J19Pl6RS7Xg5J35+957v8tGoPBqIml0rAfMD0V03fEEuJwqdG4iJEC3EG7LeFjRrWd6S/HsXohX8FdTfWeCseT7IWYHf3QLP75j5uRdFIuL4ntP6A8xpnyHmDtZx/ghzy/bUqH/F+rhnQT/m2oLXL+a1Vq806rxmCuZT+vA+vtw2E3jkMwz/onI9dxOcVEM7o8EIGiheMw2IfxU0VD7nHT9nTTRrwaNh+Dem09TR6Z4IrxJyrdkr7xBXrFM314tzHs2Cx6le/FjfY+CaL/W4WfBomEfEfwoetyr/J+ixvM9+7xxqa8esi/auYvkNw3u4viceMeordA598kOXhhTT8RgOiT9zp0G/B6Xzh5j6Q+q9/w7+L/i4lP8fvcm3e90KAAA=",
  "debug_symbols": "nZTNjoMgFEbfhbUL/lFfpWkaa2lDQtBQnWTS+O5z6YVOu2AyceMR4XxyidcHudjzeju5cJ3upD88yDk6793t5KdxWNwU4OmD0HRhivS8IUwjDKJFdE9wWCgBDMERAiFJrwAKoREG0SIgpW2IoAiG4AhI6QASoRAaYRCQwiiwQ0qayTJ54rY1pBR3WqK1qba3auEM5iHasJA+rN435Gvw63PRfR7Ck8sQYRYSbbgAIfDqvE13W/Nr07rKuMkyk+ylq0+f1X1DWfYN1Tt83amXb2q++MMXOvu6vv9/1q93+FyU/XOtar6u+1IXX3bV/Zu6L7TIvtDtHt+Uj0cYtcsv5yda/uEfYTSMLn7075aSohvO3ubhdQ3j2+zyPZeZ0v9znEZ7WaNNSW8/AbgepGxkd4Suh8Y6KNooftzSq38A",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is brillig calls\nfn main(x: u32) {\n    unsafe {\n        assert(entry_point(x) == 2);\n        swap_entry_point(x, x + 1);\n        assert(deep_entry_point(x) == 4);\n        multiple_values_entry_point(x);\n    }\n}\n\nunconstrained fn returns_multiple_values(x: u32) -> (u32, u32, u32, u32) {\n    (x + 1, x + 2, x + 3, x + 4)\n}\n\nunconstrained fn multiple_values_entry_point(x: u32) {\n    let (a, b, c, d) = returns_multiple_values(x);\n    assert(a == x + 1);\n    assert(b == x + 2);\n    assert(c == x + 3);\n    assert(d == x + 4);\n}\n\nunconstrained fn inner(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn entry_point(x: u32) -> u32 {\n    inner(x + 1)\n}\n\nunconstrained fn swap(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nunconstrained fn swap_entry_point(x: u32, y: u32) {\n    let swapped = swap(x, y);\n    assert(swapped.0 == y);\n    assert(swapped.1 == x);\n    let swapped_twice = swap(swapped.0, swapped.1);\n    assert(swapped_twice.0 == x);\n    assert(swapped_twice.1 == y);\n}\n\nunconstrained fn level_3(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn level_2(x: u32) -> u32 {\n    level_3(x + 1)\n}\n\nunconstrained fn level_1(x: u32) -> u32 {\n    level_2(x + 1)\n}\n\nunconstrained fn deep_entry_point(x: u32) -> u32 {\n    level_1(x + 1)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
