---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "11201131350698255217",
  "abi": {
    "parameters": [
      {
        "name": "w",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "1d3bbts6GgXgd8l1LvifeOirbAyKHrKLAEFSpOkAg6LvPo4by96St42AprzWTWDX9J+vicTF0KT06+br3eef3z7eP/799OPmw1+/bh6evnx6uX963Dz79fv25vPz/cPD/bePh/98k16/SGzb//j+6fH16Y+XT88vNx9ayO3N3ePXzaNim/f/ff9wd/Mh0u/bRVORlt7abh7KYeP/3N5IHlu+jC1fx5ZvQ8trGltexpbXseVtbHkfW37sWatjz1ode9bq2LNWu89a9V1b0dBzjaNMjbPPLJaALAJkUSCLAVkcyBJAlgxk6e4dtcWuvKV8pnEqddc4tTo1ti2l4lAaDMUTDkVwKIpDMRyK41ACh5JxKDi9reP0to7T2wZObxs4vW1elyLZpj+IDir/oazbxUmt+7/NfEbp7uLM95Twc42jTY0Xw7icgSwFyFKBLA3HUhKQRYAsCmSxNS0e4m+NNw9nAVAchxLrUjxNlIgDyrt/m5nUXUjdldTdYE61mnAogkNRzgOrGqnbSd2kQVUzzqlWcCikcVIbp7slUreQui+aajnm5W1seR9bPsaWz2PLl7Hl69jybWh5SWlw/f4OoezP21rPNW7T3KmnxRKwpEgYQ8I4EiaQMBkJU5AwFQnTgDCSkDBIPbCs2s+c/JNGpKxrMTs+Vt1aLnkuedLFz72Nra9pcP3ug9hlWgbmWs41tulzT3dbYBQJY0gYR8IEEiYjYQoSpiJhGhCmf8H5JTFIPbCt2s+Y59000+bhbBmMWFnXMo2vLMTmloueS68tZj/3Nra+p8H1ZXB9HVy/P+yzT/XLufUZXqepHW95gXEkTCBhMhKmIGEqEqYBYfqX3l4SI0gYRcIg9cCxaj9zehgUbV3LqWFQvuS5FGkx/MwyuL4Orm+D6/vg+t1hH/thVmg7c6y1umtsbb4KXvqXnl/QUnAs/Uus32PZTDXn3exq0jy32LqWiMlS5rPO/WuJDy3e5udGicH18+D6ZXD97hFo7PfnRImuc6ThWPpXu17QYmtaTvcd/esB32c51Xf0Lwg8sOTlp3O1Dq7fxtZvaXB9GVy/d9ynqe4+RdPDbYzHMdL2V0ZI5eBYO1JY0g6+eVgXcGOFOys8WOGZFV5Y4ZUV3jjh2r2o8mpwYYWTJqcm0uTURJqcmkiTUxNpcmoiTU5NpMmpiTU5hTU5hTU5hTU5hTU5u9dAXw3OmpzCmpzCmpzCmpzCmpzKmpzKmpzKmpzKmpzd2wuuBmdNTmVNTmVNTmVNTmVNTmNNTmNNTmNNTmNNzu4NM1eDsyansSansSansSansSansyansyansyansyZn9y63q8FZk9NZk9NZk9NZk9NZkzNYkzNYkzNYkzNYkzNYkzNYkzNYkzNYkzNYkzNYkzOzJmdmTc7MmpyZNTm7909fDc6anJk1OTNrcmbW5MysyVlWTs4T9w7UIkAWBbIYkMWBLAFkyUCWAmSpQJaGY6lA/W69ZL+7CaQuiwJZDMiSV7W0sissrR5ckuCPpa1raXk60A+uxPHH0tI4y7a+DK6vg+t3H8NiPtV36zmG+6+rcEFLAFkykKUAWSqQpcFYrP9KAhe0yCUtuXRZFMhiQJa8quXU2MFSW9dyYuxgksZZtvVlcH0dXP/4MTzdk6XVvHiLv/8tBefolLqmRVPaH50H16t9szQciyYgiwBZFMhiQBYHssS6lulCo5vEibklA1kKkKUCWRqOxRKQRYAsV+x3D0eRR8YXsb/zbUSduw1n9GsOZAkgyyU/seibaTVbdab1dI56ArIIkEWBLAZkcSBLAFnyupZTOXrRzSm9lgpkaTiWSEAWAbIokOWK/W7PeDR83bHOqXFXBJAlA1lWvR/IyfteWE7rWkqaLKXMLQJkUSCLAVkcyBJAlgxkKeta/u1eNscK133hOl+6bLmywhspvCRWuLDClRVurHBnhQcrHORmau+HsyZnYU3OwpqclTU5K0dyNl/AOZLzCJwjOY/AOZLzCJwjOY/AOZLzCJwjOY/AOZLzCJwjOZfwBpKcWwtIGG4t/b3tpW6lbi3WtZyazmoZyFKALBXI0mAsnhKQRYAsuq7lPYFh+8Kus8DwZKxwZ4UHKzyzwgsrvLLCGylcEitcWOGsySmsydl988yrwVmTU0CSc2sBCcNXS/dGSfG828ggXvx0Y/O8G8FvHvrcIkAWBbIYkMWBLAFkyUCWAmSp61rabrrS4mAjw9HA8DotNPaW5oHRvavyWnBLrHBhhSsr3FjhzgoPVnhmhRdWOGtyGmtyOmtyOmtyOkly5gWcJDmXcJLkXMJJknMJJ0nOJZwkOZdwkuRcwkmScwEPkuRcwkGSc2sBCcOtpb+33U9RbyakzllOTSFFBrIUIEsFsjQcS/+e7wtaBMiiQBZb1/KewLDpysT+z0tNb+HOCg9WeGaFF1Z4ZYU3UnhJrHBhhSsrnDU5+/epXwvOmpyFNTkLSHJuLSBh+Grp39ts040NxOqZe7BtJkd20wmbh/OFY/3blS9oMSCLA1kCyJKBLAXIUoEsbV2LT9u5IuJ0YNjUL4onmQdG/57ba8GFFa6scGOFrxwsZsfhW0sAWTKQpbsD1TZ9XGUpn2ks+835UmaDxejfJ/w+S5t+iJry3CJAFgWyGJDFgSwBZMlAlrKypewt5Ux4iUyFZX5VrujfRnsteCOFS2KFCytcWeHGCndWeLDCMyucNTmFNTmFNTmVNTmVNTmVNTmVNTn7t3FfC86anMqanMqanMqanMqanMaanMaanMaanMaanP1bz98Hr9NCGWmzVdRhAWTJQJYCZKlAloZj8QRkESCLAlkMyALU7zpQv+so/e7vzZP/fnq+//T54e7H5i2vr/18/PJy//T49vTlf993r3x+vn94uP/28fvz05e7rz+f7z4+PH15fe0mvX35K3K5jVo3/8ftRxnh7TbCX5/K9lW/jZw333Xznf8P",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(w: Field) -> pub Field {\n    let f = if 3 * 7 > 200 as u32 { foo } else { bar };\n    assert(f()[1] == 2);\n    // Lambdas:\n    assert(twice(|x| x * 2, 5) == 20);\n    assert((|x, y| x + y + 1)(2, 3) == 6);\n    // nested lambdas\n    assert((|a, b| a + (|c| c + 2)(b))(0, 1) == 3);\n    // Closures:\n    let a = 42;\n    let g = || a;\n    assert(g() == 42);\n    // When you copy mutable variables,\n    // the capture of the copies shouldn't change:\n    let mut x = 2;\n    x = x + 1;\n    let z = x;\n    // Add extra mutations to ensure we can mutate x without the\n    // captured z changing.\n    x = x + 1;\n    assert((|y| y + z)(1) == 4);\n    // When you capture mutable variables,\n    // again, the captured variable doesn't change:\n    let closure_capturing_mutable = (|y| y + x);\n    assert(closure_capturing_mutable(1) == 5);\n    x += 1;\n    assert(closure_capturing_mutable(1) == 5);\n\n    regression_2154();\n\n    let ret = twice(add1, 3);\n\n    test_array_functions();\n    w + ret\n}\n/// Test the array functions in std::array\nfn test_array_functions() {\n    let two = 2; // giving this a name, to ensure that the Option functions work with closures\n    let myarray: [i32; 3] = [1, 2, 3];\n    assert(myarray.any(|n| n > 2));\n    assert(myarray.any(|n| n > two));\n\n    let evens: [i32; 3] = myarray.map(|n| n * two); // [2, 4, 6]\n    assert(evens.all(|n| n > 1));\n    assert(evens.all(|n| n >= two));\n\n    assert(evens.fold(0, |a, b| a + b) == 12);\n    assert(evens.fold(0, |a, b| a + b + two) == 18);\n    assert(evens.reduce(|a, b| a + b) == 12);\n    assert(evens.reduce(|a, b| a + b + two) == 16);\n    // TODO: is this a sort_via issue with the new backend,\n    // or something more general?\n    //\n    // currently it fails only with `--experimental-ssa` with\n    //  \"not yet implemented: Cast into signed\"\n    // but it worked with the original ssa backend\n    // (before dropping it)\n    //\n    // opened #2121 for it\n    // https://github.com/noir-lang/noir/issues/2121\n    // let descending = myarray.sort_via(|a, b| a >= b);\n    // assert(descending == [3, 2, 1]);\n    assert(evens.map(|n| n / 2) == myarray);\n    assert(evens.map(|n| n / two) == myarray);\n}\n\nfn foo() -> [u32; 2] {\n    [1, 3]\n}\n\nfn bar() -> [u32; 2] {\n    [3, 2]\n}\n\nfn add1(x: Field) -> Field {\n    x + 1\n}\n\nfn twice(f: fn(Field) -> Field, x: Field) -> Field {\n    f(f(x))\n}\n// Fixing an ICE, where rewriting the closures\n// during monomorphization didn't correspond\n// to an internal `if` type\n// found by @jfecher:\n// https://github.com/noir-lang/noir/pull/1959#issuecomment-1658992989\n// issue https://github.com/noir-lang/noir/issues/2154\nfn regression_2154() {\n    let x: u32 = 32;\n\n    let closure_if_else = if x > 2 { || x } else { || x + 2342 };\n\n    assert(closure_if_else() == 32);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
