---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "w",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(w: Field) -> pub Field {\n    let f = if 3 * 7 > 200 as u32 { foo } else { bar };\n    assert(f()[1] == 2);\n    // Lambdas:\n    assert(twice(|x| x * 2, 5) == 20);\n    assert((|x, y| x + y + 1)(2, 3) == 6);\n    // nested lambdas\n    assert((|a, b| a + (|c| c + 2)(b))(0, 1) == 3);\n    // Closures:\n    let a = 42;\n    let g = || a;\n    assert(g() == 42);\n    // When you copy mutable variables,\n    // the capture of the copies shouldn't change:\n    let mut x = 2;\n    x = x + 1;\n    let z = x;\n    // Add extra mutations to ensure we can mutate x without the\n    // captured z changing.\n    x = x + 1;\n    assert((|y| y + z)(1) == 4);\n    // When you capture mutable variables,\n    // again, the captured variable doesn't change:\n    let closure_capturing_mutable = (|y| y + x);\n    assert(closure_capturing_mutable(1) == 5);\n    x += 1;\n    assert(closure_capturing_mutable(1) == 5);\n\n    regression_2154();\n\n    let ret = twice(add1, 3);\n\n    test_array_functions();\n    w + ret\n}\n/// Test the array functions in std::array\nfn test_array_functions() {\n    let two = 2; // giving this a name, to ensure that the Option functions work with closures\n    let myarray: [i32; 3] = [1, 2, 3];\n    assert(myarray.any(|n| n > 2));\n    assert(myarray.any(|n| n > two));\n\n    let evens: [i32; 3] = myarray.map(|n| n * two); // [2, 4, 6]\n    assert(evens.all(|n| n > 1));\n    assert(evens.all(|n| n >= two));\n\n    assert(evens.fold(0, |a, b| a + b) == 12);\n    assert(evens.fold(0, |a, b| a + b + two) == 18);\n    assert(evens.reduce(|a, b| a + b) == 12);\n    assert(evens.reduce(|a, b| a + b + two) == 16);\n    // TODO: is this a sort_via issue with the new backend,\n    // or something more general?\n    //\n    // currently it fails only with `--experimental-ssa` with\n    //  \"not yet implemented: Cast into signed\"\n    // but it worked with the original ssa backend\n    // (before dropping it)\n    //\n    // opened #2121 for it\n    // https://github.com/noir-lang/noir/issues/2121\n    // let descending = myarray.sort_via(|a, b| a >= b);\n    // assert(descending == [3, 2, 1]);\n    assert(evens.map(|n| n / 2) == myarray);\n    assert(evens.map(|n| n / two) == myarray);\n}\n\nfn foo() -> [u32; 2] {\n    [1, 3]\n}\n\nfn bar() -> [u32; 2] {\n    [3, 2]\n}\n\nfn add1(x: Field) -> Field {\n    x + 1\n}\n\nfn twice(f: fn(Field) -> Field, x: Field) -> Field {\n    f(f(x))\n}\n// Fixing an ICE, where rewriting the closures\n// during monomorphization didn't correspond\n// to an internal `if` type\n// found by @jfecher:\n// https://github.com/noir-lang/noir/pull/1959#issuecomment-1658992989\n// issue https://github.com/noir-lang/noir/issues/2154\nfn regression_2154() {\n    let x: u32 = 32;\n\n    let closure_if_else = if x > 2 { || x } else { || x + 2342 };\n\n    assert(closure_if_else() == 32);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
