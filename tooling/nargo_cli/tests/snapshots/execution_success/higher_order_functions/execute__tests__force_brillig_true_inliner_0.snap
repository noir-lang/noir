---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "w",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1cy4ssVxk/VdU9/ZhHz51roiEr8Qkq6Z7peQSjtnpvcmMSAyELQQjpO7nzFwiigvRSQRBEF+4URRdBAgqCogtxIWQhbl0EshA3ggtFENyYypxv+te//p3TVdN1ZoaQA0NNn/Od7/1951mVufOS+b+ytKCOi9VN/HO4Xhk1iGuYCT6jQqgOv8/Pnz3/O4f2okHBe4KXpvCfDMdnPbcsc4P8H/Q8zpT6MZwJ8A87Hs9zszl+lqUs224xOLBP17fb/++DPmX5IuC2/in19pbdHyTW2+i2C+vKfO7zsyS0h4b/TmL8dwG/c83H/JNp+L/A/1Qa/AeG/57H7xLgfrp53FPD/YXGcY8udP5M47j3L3A/O2vWnif+uenO89YTHh/npuZkGR4abpxcNOibh5an2265WNsG1JkPW1sH+MLcxqWg3yhTqcvPAU2GY34wRxtv6WwwGjO/bcFHTm0G+xHirw19mszBe4DXEa3Ec44DtguWqr5gvJW+8LL/P+YLicfrscnUcstFxYzl31jMVNWF1dWNC7Qv2/469HQZee+DTDFc7G84V0RdbIs261fmcRsrWrPF9omvH65Rjk/mi6vC4287HSctaEf4z/rffeDfnq01+Dw7no7ODqZn08PpK6+MT6ecPxzokMc7pG8881zffJ7znnON+d6+4d5oHveI8/jz/lnSukd66ET0YHmhTbDPukX9dAFf6nGhG+DffmMeMd2qsbcDOnkhgDN34dxUFSfb4ssA8yLRjfkk28Jgv+Sf1zlGO8FvaK6j8n0GOnkpgDMXONs1cap8GsoTq+bJKdZxCce6/cRz8QM1r8hIdxtpaI8zoudIj47o913SWBllbjm3F25ZPzzOdwSvuy6+VuEcWIi6PIKraBCX+dbALfsaz+kS+cKQ5WiBHBuC11zIgfLy2PdV/yxzw7+yeR/EibprRXTXFvz0nLbRpBn9nJiv4Thqxdpwn5pzbJ/4wrZNwGX7Lpmgo+bRJm/J13+yOV6GY17Rx4zvgQv7Zuo5S0a8oP91hby5W9Y57uO3qe5bbq4n9r+6sdsS/DD/iAt92fYzla6tr+l6C9qa3MsyXvuCV8yRWyTbZkRPCt7kaQM8xsEmydtvWF5f9jPiD/lHWxr9AfGHfY3XnYZ5ZdsoXtE2O6TrbQG/GYE3WdE2aL/tCvjRr20ffRDBZbrbTay7HRfX3S7JNhDwWxH4baE71O8A2jEOfkR6SDQnlmsO3qs0+//kBvFkev3ZDeCJ10YMh0/nlufNzi2PG4jr7uz8afGC4xiPuYny4pD9GcdcpInn+5wbMC+wHV/zTzXmqnGyF9Gdmq+o8+Y7s/NnOWf9lVukuQF8FqKv5bA2wf8tm+P8ta8bEIzyZ2v7rX++k/3ZzrGVXm7aHHID5OHYi80h/+ifyp/VmnUjoruW4GeVP//JaZp1/fnP4M+v+7qYPyf221Pj22wUWntyfBn8X4jPXho+ZXxxLkKbrxtfiIvjC/25dUXym51sbEA7Ic0uyMNjCa45eC7yV/9U8YXr7kLUxeLL4FbF1xtO06waXwb/GsTXm75O2Y3PsdPs7Yz26+ZFznt/Jz5TzUdUfBmtlPFV/t8hOtjP1uwl/D+gzzo+8kPwkX/6upiPcM4P2TA0B/m3f96EHJliDlLHhv+FPuuMo18HG/7P1w2o/9WNo6NhzEcUPyxPli3yeR3nk0Z7u2Hax2fnJRM6KATNDvHT9H6PFeNnQPiZJp83G/8d8MGe/59zJeIv6zYjcB0Bd1U26a6wCd6dvQk2Kcgmxv8tsMlt0nUvYJOHInCFgMvcYlwXTs+ZEQ+Op1iP+ahLMhn8IyDTo4n9gu2QEX6mmbm0/LCfqvECafK+9nX76aZbtKnx/36w6QfI/3BfH/30QxG4TQH3bu6olzs+Bjb5RMXc8VjF3PEY5Q6Le8wd6jwqljsw14RyxwHIdHjFuYPnWkyT52ap/RTHccVP6nMm1s8qP91yizY1/j8JNv0U+R/OG9FPPxOB2xJwV2WT3gqb3PTccfEuDtjkKdJ1P2CTpyNwhYDjMRBzB9oT8fCYaPUq17QJ/jmQ6fkrzh28H8M0ed+W71Qir4nWUpXvcBn9vlvWfYo7XGq/Tt2pUGOW9d11ehzC/+ueI4XmveviCr2T0rB+a99D4j0RjEu8R8WloN8oU0n72/kcL8MxP2gzjnNre0CxfR1nZIlpH6k9TNaVunulxsuC2tBP7f26y9i1zh0y1CHvlxTE68T/Hq5XauswozbUYV3/t7q6/q/2KHkf52vk/xnRnfjfwzWL8n/7vxxzY+eAsTyp7msavLpnpnK62v/uV6Ct1iAq3/UiPPC8JzbeM4yij3MGrFdzzLLge6vY1hZ0FDzu+SpeQve52k6PdYy/J/BvB2jhb/SF0LoxhL/K2dR3vPOUsD/OF3GqM/nYPVxFr46N1Tqirs1QR2wzvIfjBF8MXxU/7wv9QOhUnbd0A/Sc0+codgajxg/ri+czVc7DVG6J5SJ1j5FzDNKO2UPRRl753Av79yM88LpGrQG7ARhFv4qf4p1J9tMdAd+NwOM9DsUL30VV+PsR/H2BfydAKxQ3qG/24/4K/kP7XK9G4iYWp2qtlEFdLG6srzqbvo5xWsVNlZhV+k0RN70AjKLPcaPG8LpxU3eMRV5Sx02VMVzNp2L4VT7iuPmDiJtYbKi9udg+Qp3cqO7F1811qKPQvfvQOMrwVfHzOcLrFXNRL0DPufVy0RsV8MZykcpd7J9lGURkUnmqLh3e42tyPVFlDFd7kFi/znqirl/HxrCm1xOhe0+h9QT7Rm8F/zyGG/ybkbgJ5UHE7dx6c1++43vT4ibVGUiVd9OQ1yrvPxUReDUHVnOJPKInhS+U1/m95JAfN+lL9v5D098RmR4fnJzuj0+P7x8eTA+Oan1H5N333S9K0vfdy4LfFuS22JnMVeFKfaeXfcx+87e8ymLvXbMsHKur1gMop415ucCp8ro6m8L2fqC/1dmZqbp3b7j5DndZJv45vFwZ2T9Gi98Drjpn6rhlmWLve28RbC+gD8TTE7Qm68lvajhmuuqbcVfAx33WT4wP/h5AWe7Mzp9lLD1M6zF1f0W9B8z3RR7N5zgf8f+ru9IWv3gWEZsXqnd3M6jj+dGugMf7FvwtDpw37Eb68XyI6bVFv7LwvPhWRXjTr+W0l0G/H8wXYcwfXwSYDxOM+co9gPkoJCHkQ+XPZ4gvg/24x2H+3vS731bUuZbRMtoPNUyb7xEpWyPNHeLn4US6MH7eS/iZJu8dGP/74ANjOOdE/0T8JdxRBG5HwF2VTfZW2CS/YTbhdzOM/yfAJp8mXd922iaTCFwu4Din4p4E2hPxlH/vAR1aPcb5Hslk8HdApicT+wXbQd2xQ5rWvuo+9DcDunOAF8egHcKrvhtxmfEltOeKdqszvrA8rQDObgB/LuRiv6iCH3Mqwr/gCeA+jbIV5p7rttUtIWtXyHrZuYPS5W6AFraFbMW+swo/+hbCv9SArZBXda6Dd9lDPpS5xXfi9gKyYt5TeczwpI6pPMInyor5WH37ZifQn+tyAX+bYEPnGQir+NoTdPeIbkgO9ftWAPcqeXj9GdJNT+Ce+OfwksVPTc4cydsRvPCYabBfgVj6ab5aFvPnXNSr/DeI4GB/t35lQR9HHPi7vYJXzhvfEHlD9ec1RdXcYuvKAni3uovzg9ki7omvH65XxqVMP6dciD7eBrohWyH8Zde5u25Zh3x/Uu31qW/aqT04HkPVt/Nwn0HtFSOtLPA03riO9wcR193ZIh1cz96ZzXn7Lo1FuI9YiL68B2Lw34f57vcieyDGI+6BqG9exuyjdGD1sbv5KIs6I+pWwJVHaK86n2LasffR8IxSnRGxH6szxLaQLfaNHvYBlAN9gM9oCkETfavpM5rx4fT4dHo8Gj0+Hj0Yjw5XndE0Tf9ofDQ6OZmenB6dnj0+Pr2/iv7Fmmo2b8e8XJaO/232ZnhcOyP8qxB3v6Dc3xb0SrjfReDq5qDWbLGuN1uGL2bL8Ea7P1vm0do2oQ3HjLJs+d+oL8RlfLQJ/jeQm8rShT7Wf1fQ7xL9Bb5FHcYh4ypEHe5Z/JLiBmVv+ozubZqEH+uYN/Od0q//D5cXhmM1cAAA",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(w: Field) -> pub Field {\n    let f = if 3 * 7 > 200 as u32 { foo } else { bar };\n    assert(f()[1] == 2);\n    // Lambdas:\n    assert(twice(|x| x * 2, 5) == 20);\n    assert((|x, y| x + y + 1)(2, 3) == 6);\n    // nested lambdas\n    assert((|a, b| a + (|c| c + 2)(b))(0, 1) == 3);\n    // Closures:\n    let a = 42;\n    let g = || a;\n    assert(g() == 42);\n    // When you copy mutable variables,\n    // the capture of the copies shouldn't change:\n    let mut x = 2;\n    x = x + 1;\n    let z = x;\n    // Add extra mutations to ensure we can mutate x without the\n    // captured z changing.\n    x = x + 1;\n    assert((|y| y + z)(1) == 4);\n    // When you capture mutable variables,\n    // again, the captured variable doesn't change:\n    let closure_capturing_mutable = (|y| y + x);\n    assert(closure_capturing_mutable(1) == 5);\n    x += 1;\n    assert(closure_capturing_mutable(1) == 5);\n\n    regression_2154();\n\n    let ret = twice(add1, 3);\n\n    test_array_functions();\n    w + ret\n}\n/// Test the array functions in std::array\nfn test_array_functions() {\n    let two = 2; // giving this a name, to ensure that the Option functions work with closures\n    let myarray: [i32; 3] = [1, 2, 3];\n    assert(myarray.any(|n| n > 2));\n    assert(myarray.any(|n| n > two));\n\n    let evens: [i32; 3] = myarray.map(|n| n * two); // [2, 4, 6]\n    assert(evens.all(|n| n > 1));\n    assert(evens.all(|n| n >= two));\n\n    assert(evens.fold(0, |a, b| a + b) == 12);\n    assert(evens.fold(0, |a, b| a + b + two) == 18);\n    assert(evens.reduce(|a, b| a + b) == 12);\n    assert(evens.reduce(|a, b| a + b + two) == 16);\n    // TODO: is this a sort_via issue with the new backend,\n    // or something more general?\n    //\n    // currently it fails only with `--experimental-ssa` with\n    //  \"not yet implemented: Cast into signed\"\n    // but it worked with the original ssa backend\n    // (before dropping it)\n    //\n    // opened #2121 for it\n    // https://github.com/noir-lang/noir/issues/2121\n    // let descending = myarray.sort_via(|a, b| a >= b);\n    // assert(descending == [3, 2, 1]);\n    assert(evens.map(|n| n / 2) == myarray);\n    assert(evens.map(|n| n / two) == myarray);\n}\n\nfn foo() -> [u32; 2] {\n    [1, 3]\n}\n\nfn bar() -> [u32; 2] {\n    [3, 2]\n}\n\nfn add1(x: Field) -> Field {\n    x + 1\n}\n\nfn twice(f: fn(Field) -> Field, x: Field) -> Field {\n    f(f(x))\n}\n// Fixing an ICE, where rewriting the closures\n// during monomorphization didn't correspond\n// to an internal `if` type\n// found by @jfecher:\n// https://github.com/noir-lang/noir/pull/1959#issuecomment-1658992989\n// issue https://github.com/noir-lang/noir/issues/2154\nfn regression_2154() {\n    let x: u32 = 32;\n\n    let closure_if_else = if x > 2 { || x } else { || x + 2342 };\n\n    assert(closure_if_else() == 32);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
