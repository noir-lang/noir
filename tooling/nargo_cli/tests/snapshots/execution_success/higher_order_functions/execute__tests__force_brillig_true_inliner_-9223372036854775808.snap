---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "w",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "39": {
      "source": "// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "fn main(w: Field) -> pub Field {\n    let f = if 3 * 7 > 200 as u32 { foo } else { bar };\n    assert(f()[1] == 2);\n    // Lambdas:\n    assert(twice(|x| x * 2, 5) == 20);\n    assert((|x, y| x + y + 1)(2, 3) == 6);\n    // nested lambdas\n    assert((|a, b| a + (|c| c + 2)(b))(0, 1) == 3);\n    // Closures:\n    let a = 42;\n    let g = || a;\n    assert(g() == 42);\n    // When you copy mutable variables,\n    // the capture of the copies shouldn't change:\n    let mut x = 2;\n    x = x + 1;\n    let z = x;\n    // Add extra mutations to ensure we can mutate x without the\n    // captured z changing.\n    x = x + 1;\n    assert((|y| y + z)(1) == 4);\n    // When you capture mutable variables,\n    // again, the captured variable doesn't change:\n    let closure_capturing_mutable = (|y| y + x);\n    assert(closure_capturing_mutable(1) == 5);\n    x += 1;\n    assert(closure_capturing_mutable(1) == 5);\n\n    regression_2154();\n\n    let ret = twice(add1, 3);\n\n    test_array_functions();\n    w + ret\n}\n/// Test the array functions in std::array\nfn test_array_functions() {\n    let two = 2; // giving this a name, to ensure that the Option functions work with closures\n    let myarray: [i32; 3] = [1, 2, 3];\n    assert(myarray.any(|n| n > 2));\n    assert(myarray.any(|n| n > two));\n\n    let evens: [i32; 3] = myarray.map(|n| n * two); // [2, 4, 6]\n    assert(evens.all(|n| n > 1));\n    assert(evens.all(|n| n >= two));\n\n    assert(evens.fold(0, |a, b| a + b) == 12);\n    assert(evens.fold(0, |a, b| a + b + two) == 18);\n    assert(evens.reduce(|a, b| a + b) == 12);\n    assert(evens.reduce(|a, b| a + b + two) == 16);\n    // TODO: is this a sort_via issue with the new backend,\n    // or something more general?\n    //\n    // currently it fails only with `--experimental-ssa` with\n    //  \"not yet implemented: Cast into signed\"\n    // but it worked with the original ssa backend\n    // (before dropping it)\n    //\n    // opened #2121 for it\n    // https://github.com/noir-lang/noir/issues/2121\n    // let descending = myarray.sort_via(|a, b| a >= b);\n    // assert(descending == [3, 2, 1]);\n    assert(evens.map(|n| n / 2) == myarray);\n    assert(evens.map(|n| n / two) == myarray);\n}\n\nfn foo() -> [u32; 2] {\n    [1, 3]\n}\n\nfn bar() -> [u32; 2] {\n    [3, 2]\n}\n\nfn add1(x: Field) -> Field {\n    x + 1\n}\n\nfn twice(f: fn(Field) -> Field, x: Field) -> Field {\n    f(f(x))\n}\n// Fixing an ICE, where rewriting the closures\n// during monomorphization didn't correspond\n// to an internal `if` type\n// found by @jfecher:\n// https://github.com/noir-lang/noir/pull/1959#issuecomment-1658992989\n// issue https://github.com/noir-lang/noir/issues/2154\nfn regression_2154() {\n    let x: u32 = 32;\n\n    let closure_if_else = if x > 2 { || x } else { || x + 2342 };\n\n    assert(closure_if_else() == 32);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
