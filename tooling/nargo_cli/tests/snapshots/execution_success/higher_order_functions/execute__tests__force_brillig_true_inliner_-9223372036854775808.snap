---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "11201131350698255217",
  "abi": {
    "parameters": [
      {
        "name": "w",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "39": {
      "source": "// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "fn main(w: Field) -> pub Field {\n    let f = if 3 * 7 > 200 as u32 { foo } else { bar };\n    assert(f()[1] == 2);\n    // Lambdas:\n    assert(twice(|x| x * 2, 5) == 20);\n    assert((|x, y| x + y + 1)(2, 3) == 6);\n    // nested lambdas\n    assert((|a, b| a + (|c| c + 2)(b))(0, 1) == 3);\n    // Closures:\n    let a = 42;\n    let g = || a;\n    assert(g() == 42);\n    // When you copy mutable variables,\n    // the capture of the copies shouldn't change:\n    let mut x = 2;\n    x = x + 1;\n    let z = x;\n    // Add extra mutations to ensure we can mutate x without the\n    // captured z changing.\n    x = x + 1;\n    assert((|y| y + z)(1) == 4);\n    // When you capture mutable variables,\n    // again, the captured variable doesn't change:\n    let closure_capturing_mutable = (|y| y + x);\n    assert(closure_capturing_mutable(1) == 5);\n    x += 1;\n    assert(closure_capturing_mutable(1) == 5);\n\n    regression_2154();\n\n    let ret = twice(add1, 3);\n\n    test_array_functions();\n    w + ret\n}\n/// Test the array functions in std::array\nfn test_array_functions() {\n    let two = 2; // giving this a name, to ensure that the Option functions work with closures\n    let myarray: [i32; 3] = [1, 2, 3];\n    assert(myarray.any(|n| n > 2));\n    assert(myarray.any(|n| n > two));\n\n    let evens: [i32; 3] = myarray.map(|n| n * two); // [2, 4, 6]\n    assert(evens.all(|n| n > 1));\n    assert(evens.all(|n| n >= two));\n\n    assert(evens.fold(0, |a, b| a + b) == 12);\n    assert(evens.fold(0, |a, b| a + b + two) == 18);\n    assert(evens.reduce(|a, b| a + b) == 12);\n    assert(evens.reduce(|a, b| a + b + two) == 16);\n    // TODO: is this a sort_via issue with the new backend,\n    // or something more general?\n    //\n    // currently it fails only with `--experimental-ssa` with\n    //  \"not yet implemented: Cast into signed\"\n    // but it worked with the original ssa backend\n    // (before dropping it)\n    //\n    // opened #2121 for it\n    // https://github.com/noir-lang/noir/issues/2121\n    // let descending = myarray.sort_via(|a, b| a >= b);\n    // assert(descending == [3, 2, 1]);\n    assert(evens.map(|n| n / 2) == myarray);\n    assert(evens.map(|n| n / two) == myarray);\n}\n\nfn foo() -> [u32; 2] {\n    [1, 3]\n}\n\nfn bar() -> [u32; 2] {\n    [3, 2]\n}\n\nfn add1(x: Field) -> Field {\n    x + 1\n}\n\nfn twice(f: fn(Field) -> Field, x: Field) -> Field {\n    f(f(x))\n}\n// Fixing an ICE, where rewriting the closures\n// during monomorphization didn't correspond\n// to an internal `if` type\n// found by @jfecher:\n// https://github.com/noir-lang/noir/pull/1959#issuecomment-1658992989\n// issue https://github.com/noir-lang/noir/issues/2154\nfn regression_2154() {\n    let x: u32 = 32;\n\n    let closure_if_else = if x > 2 { || x } else { || x + 2342 };\n\n    assert(closure_if_else() == 32);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
