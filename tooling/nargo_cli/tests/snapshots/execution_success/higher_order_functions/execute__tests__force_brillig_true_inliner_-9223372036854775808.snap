---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "w",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self , y )\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "fn main(w: Field) -> pub Field {\n    let f = if 3 * 7 > 200 as u32 { foo } else { bar };\n    assert(f()[1] == 2);\n    // Lambdas:\n    assert(twice(|x| x * 2, 5) == 20);\n    assert((|x, y| x + y + 1)(2, 3) == 6);\n    // nested lambdas\n    assert((|a, b| a + (|c| c + 2)(b))(0, 1) == 3);\n    // Closures:\n    let a = 42;\n    let g = || a;\n    assert(g() == 42);\n    // When you copy mutable variables,\n    // the capture of the copies shouldn't change:\n    let mut x = 2;\n    x = x + 1;\n    let z = x;\n    // Add extra mutations to ensure we can mutate x without the\n    // captured z changing.\n    x = x + 1;\n    assert((|y| y + z)(1) == 4);\n    // When you capture mutable variables,\n    // again, the captured variable doesn't change:\n    let closure_capturing_mutable = (|y| y + x);\n    assert(closure_capturing_mutable(1) == 5);\n    x += 1;\n    assert(closure_capturing_mutable(1) == 5);\n\n    regression_2154();\n\n    let ret = twice(add1, 3);\n\n    test_array_functions();\n    w + ret\n}\n/// Test the array functions in std::array\nfn test_array_functions() {\n    let two = 2; // giving this a name, to ensure that the Option functions work with closures\n    let myarray: [i32; 3] = [1, 2, 3];\n    assert(myarray.any(|n| n > 2));\n    assert(myarray.any(|n| n > two));\n\n    let evens: [i32; 3] = myarray.map(|n| n * two); // [2, 4, 6]\n    assert(evens.all(|n| n > 1));\n    assert(evens.all(|n| n >= two));\n\n    assert(evens.fold(0, |a, b| a + b) == 12);\n    assert(evens.fold(0, |a, b| a + b + two) == 18);\n    assert(evens.reduce(|a, b| a + b) == 12);\n    assert(evens.reduce(|a, b| a + b + two) == 16);\n    // TODO: is this a sort_via issue with the new backend,\n    // or something more general?\n    //\n    // currently it fails only with `--experimental-ssa` with\n    //  \"not yet implemented: Cast into signed\"\n    // but it worked with the original ssa backend\n    // (before dropping it)\n    //\n    // opened #2121 for it\n    // https://github.com/noir-lang/noir/issues/2121\n    // let descending = myarray.sort_via(|a, b| a >= b);\n    // assert(descending == [3, 2, 1]);\n    assert(evens.map(|n| n / 2) == myarray);\n    assert(evens.map(|n| n / two) == myarray);\n}\n\nfn foo() -> [u32; 2] {\n    [1, 3]\n}\n\nfn bar() -> [u32; 2] {\n    [3, 2]\n}\n\nfn add1(x: Field) -> Field {\n    x + 1\n}\n\nfn twice(f: fn(Field) -> Field, x: Field) -> Field {\n    f(f(x))\n}\n// Fixing an ICE, where rewriting the closures\n// during monomorphization didn't correspond\n// to an internal `if` type\n// found by @jfecher:\n// https://github.com/noir-lang/noir/pull/1959#issuecomment-1658992989\n// issue https://github.com/noir-lang/noir/issues/2154\nfn regression_2154() {\n    let x: u32 = 32;\n\n    let closure_if_else = if x > 2 { || x } else { || x + 2342 };\n\n    assert(closure_if_else() == 32);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
