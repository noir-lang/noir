---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "w",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1dXYgkVxWuqu7amZ7Z2VkTE/wBRUPEIIHu+dmZhSgT8uvGrPlTk3UJmZ3NKMG3+KAvodEHg2geJBEjEkJiNPgQZEWIEoNoiPgHEl19EEMEs0jyEkF90IcktVOn+5uvv7pd1XNvde+mLyw1XffUOeeev3vuubdq42inxfm/rDXhHje7t5Ff23trHY+42rHg0zkI9cB2unNt5b8T6G94HHhL8OIL/3p7dasVDY7ZI//LrRxnSPkYzgD42zM5nmPdPn4eS9YWot3Ogc/M5v3296XwTNY+Dbjt+ZBye1PvJwLLrXNhVCwrs7mrukFotw3/1YA/CoD/msD8XxsGfy+mXBdGPj381wfm/6M5/hC8HwnD+5Lhv8E/7z3cHwvD+7Lhv9E/7z3cR/3j3jTcH/eP+6Thvsk/7m3DfbN33J2end/iH3dPl7f6x71quG/zj3vNcH/CP+7DhvuT/nGfMNyf8o+7Z9+3e8e91LPBO3LcvuLVen6dj3byrftzfJxT+RtLe9Vw46LIY+xdtfwyjQab9e2DexajrW8G+MKcjFuDfuOYMlk+ADQZjvnB3NJ4YzllbSO/tvfUOitGy2SUCj6a1GewK8TfPnjGZ253AeAdJptx25DlKGxDWTP7GsWGfgA0GY75qdeG2oeM1ig2dCXxN04baviXTbtF4/U8rkPKBq2pOMZr71mAt7VBWfu0MWU4ngK8DMf8oK/OEKzRSaNBezX/Yfs6ml8Dy1raUEq0/dvQ0uak2tAodvIjwMtwTNNlJxxrOP5jn8Eey6/T+arfinKerFWNBzhf/RhoMhzzU/N8taec5zPE3zhtaFLiQZP6fM0pPwG8DMf8oO44VrAuETahPoO9N79OwpwSaB9gmWVXJGNrSl/GW6avn+V/u/QVuIa+wnMHNhUbrXbmio1lZWH3qq75UL9F+USdchplvL+FMblwsb3F0W7bTwAP99lzWY3C6iDN7u7+jfx+ew9tbb2/4dnI8aeR9pMm9CP81/Pfc8C/XZt74HN7bbOzvby5vbm6efLkytYmx48IZMi1HKRvPMf0LOfYBvtwfs384xuEL3XgO0r4DPab+XWc8yjzb7+x1mXzl5pnUpDJdwpwJgLnDRVxsi6eAJhHiK5Lt6wLg30sv45zrosEvxwrWBeJeC6TyZMFOBOB84aKOFVcGuZvZeId96lnbfxl6SibG0YX8VQZa1WeEO+wWF8H3lYB7Eb+u72nttSepLyHx8lt2Fz/q7iPl+GYpsptYsLZzP8u0iPn7b/Jr4HX0jJeGa167aefq7PfIu1QtqVspSFkY/fmokFd+jzLwPZj/LB8OJdUNaKD0aDf4BkS7muIe4kD1xFPuNC2FqPiuBz6bBePA323IXhNxDhwvJyLvJhfM9/6dbwbH9sf32PZqVgySfU35FHV3+zsRdkYjfW331WI0WhHxhvnj6/m13HG3DJ2H4ovo2t6RbtXPppEg3Me2gSvh/6VX0Pb/aTUDNnusWZoMdP68LytnRkq6xNYT/z/iD5hfLNPvJ5fx7luKuMTofgyuqZz9AmVaybRYPxDe0npXpo/GNonAtUe1lRMt8Z2r3wC7Z59Yg767KxbWZ+w8Wa0l5I+XoZjXtHGjO/FaFCGLF/eO9zIf7f32GLiBe1vRow3iQZljnEnpXsXO+wP7bYh7rH9qTm2JfjxKJ/Dyo6ssR0hj9Y3D/B25rGsjdmYsuuDFWwM7ch447hwSf5gYPnJuFvF7kPxZbR6NfCob4NIk+0e34tBm0jp3mU12X0rjHw2VYy0xrat7H4/wHPcRRu2s7plfcLGm8n1lyP6hPHNPrFGPhFIttInjFYZnwjFl9EynaNPIE32CYx/aC8p3ftwTT4xF0Y+J1RMt8Z2r3wC7dTeQbK+A9BnZ8zL+oSNN5Pr/0b0CeM7sAy3TC4mQ7Qx17xl8DeSj+4Pw6f0UaNVxkfnA/EVEy8oP6TJPrpfjAPla/durclHA+ntpPI1a+xrykcXAZ599CD08Zz2Nuiz9zjK+q/JIpP5kUYfL8PxOND+bExh5dtZMpkZf0X+a/RTgj9J/nsgCJ/af41WGf8NFVdc8kOa7L8L0Ie2wfK9pyb/XQgjn7vVfGiNfVT5L/qovfNU1g/xXekvjeiHzNswP+F5zuC/cI74SaA8weknSHNUP7lv6ie95prL7N2+UXzoT3v0obAy7PRszGRY5KNGPyX4B8hHF4PwqX3UaJXx0UA26JQf0mQfxViG9svyfbAmH8XnNrzIpn9WJYxNdNrKj62xHyv/v0DIo6yP25gyvRxo9vEyHPODejfelP3y3ksovzK5mAzRfheFfBKCZ/mndO8Jj/abCH5agh+PNtZR84E1ZUcHqO9C6EP+uSkbszFlsvtiBRtDOzLeuM53agJyq7C0/cWHrHF+cCH02fv5ZfVq4626b4Z6Nb4nTYb7qA/1X9X+UU5V7B9tzXjjPffnyf4DnTGT9u86++r7nP/m2vL61tLK1tqJ1eXN5UOVzvmrs6BxwTWKBs/yIW51pu3q7s7V5j+11x/6XL/Rsn3eovyXz+HjvjDuy6d078+O+S8l2fE9V/7G59353YkE+u38F78nkLVr8r5srH8tmJ/TaPBsXtbsW0c8t7wU93G+mP+tzpfgGVjrw31013kMu98S8LxfivRRb7zfNCt44/NVr8HYzgBjiE/pwPa9eY/0FYpDoWoJKg4ZrVD1vnXyMdwXM73gGVneN5oneNYfw6P8VZ3E8Kn51J7N7v03Hr9cjkywXDhmqnMwiEedQZ4hHtVaAGONfc+OYxg+izFMzWMcM9U1isrNY4jr6u7O9Xw+w5TmAghVh+Df/K5G1uzMpspLcB6bS3bzh+cu1Vl5nscMfjHp41zI/1bzmNkCzmNqXlL2VBQDEAfyq+aqOeprCd4Gzj7B2C6CiQrxKR3YWRU+1/DOHEfovV81jxmtwLS31Lkea7znivO/qv3M0jiwqbWQjSl77uEKayGM8wvUh3HB4DJ7uLweXU6MPB+tSZ4co5Fn9FnDw3MNjxNhbZwc23jeVHMwxsyy82bgdVnpd8WM/lw0KCuP/HRcc51asymb4HwIdYffYy7S64ygUxcuzg0Nv7oaHb7HdNT6ukwtYNw5FNcCyuZQ1zlyqJC1AIx/+D1b5E3B3kawLQesnTMYlpsd9ZSb3Qr5y82O3MxsDHMztX5Sdmr39wt4nBM5N8M5gs8AmW7uA/5vT3bDmE4+DzDHCMZ0cQ/AHKc8js/4or6sZs1nC++iuX8cZwsn7Xwcx3TcF+N6LbZh59y+XyHvQHvjPSaMTQaX2cP99ehyYuT53FSeXuV5eipPr/I8U5M81TyE+3Jnee1GA2MK+S2sN9tKJoODqR5n1lKgO2zezRrP0wsCHm3K5umDBI8yVbkpv+Pja8111LHmCrXndl1353o+77k9MqY8e5Q9t8cpHx51z+1JyAO/58iHz8U9t6dhbE9RjjvKntspmneme2593Y5rb+nZwLnAubrn9mzBehl9ctx7bo9XrB2OOo8hLp7Hzsc9t9+fQ3tuL3iq6/wFYv3p82zP7VUY29887Ln9fbrndrbvfNhz+890z20Alw95cozGGDDuPbcXap43UZ+L9DuOBufNca//EhgP69q1/mvmQlHzZkKy43uueRPh8HeZfZYZByzvs7j2ZMrus8w3+vh4ji8zH/fyyEYf54H877LzsZpflZ3afZVjo+/zfIz+O099c4I3XiNeAWO7uLEbxvS1BDDvIBjT0wcB5l2gLOSryh7Me3Kg6R5Mn/Yc9WFNtkXjwFbXHoyqF2b3rq1HlxMjz+em8vQqz9NTeXqV55ma5KlyL65RqDV82TwS6y/zkO/cX8CnPaeuRp/vuc7rVMkjx11/4TyybP3ltjHlkWgD9h0dtS7AfO8OyvdU/QWfLaq/3Am5zHFHvqfO1fiuv/CZsLL1F65nGd17YWwnKU/j+gvqwL7/wPWXz1LsnNZf+nFExfQW9WFM30st4QOwp8xwzOsotYT76tHzOSHrq2qStZpzeP9C1WEwxvH8mQpcGDtx/owFPhXTjIbFIZyj00jTj6K9z8U4Fl4Xq+/IT0pNpwnjYZ26ajoPOObiqv8XRiz44d9qP3lYTQdhh9V0EJZrOmoPLpPhQyVqOmXOCnwb5sFvlazpuPY57Dnf52r5HIHrXK3p7XkY26MFNZ1nAOaxgprOKYD57pCaDuqyqKbz5LSmU2mOmoRztUVrvD9M6Jo5lDyfm8rTqzxPT+XpVZ5napLnqDWdUc7UPOTISRWNWNBYdPAbuj70Vnif6yVHTlrX+1xcH1L1w0wvL5eoD5U5n/MK5EX/LFkfUvUb9ptx7BXyOdPXYWyvDakPoQ6K6kP/ntaHds0P2d9lzpP4qPnXWR+ay41tKuvw9SGT9aj1oVHO6bws5mKLKw2imbWWwBdiXrO4VfR/CBpvCcHzHMNx8KJmf7w8r6H+VX7jmtdYVlVraw3BfyifW9veacaTqrWoWkXd386PI/2uUwP4Rf7fm+s2+/0+yJvZfwx/BneJA64h4OrSyaxDJ1mz8/yToBPkh/PIy0AnHyJZYyxGnVxeAId0EI59rhHpXBjpYexV+2usA4TvwJiW65kfB+Ii6gFpcuxohOFnyTUPqbio3mWYIV592zD7lFoXqP+To+7vqqMuFwQ/vE65AuzvI+QruA4x/BnchgNun4CrSycth06yxnFunDpBfvi9u2tBJ9eTrDEXRJ0cKYBDOgjHeQrGOXV+wOBxvWT3VVzkuv5RGNNNge2C9cBxS9HEMbriUNZszT+NQ4OyHjUO3Q72caxkHDpeMg4dn8ahqEgnyA/HoROgk5Ml49B2yTi0TXHI/Ct0HLoHxvS5muMQ5zJM0/pdNefAteDS35Mz+nPRYAz0yE/HFZPVe5wqFvA7S9jH9Xb1jv+soKNwNTziYltA2WPNePpNjEF7QN6qnp/5sqOm42OvQp1duaa7c834/0rBOrTs2RWD/xrEua/mfw/7zoXSK5+RGpYb8f6D8gFVF1G51GwJXImDto/vbzDtInsr+mYA8qTelVTfH+A9H2V3ZfdK7Vm0LYwZofyVvyOhzp4lFcccO+CxjqdqvBwPeC62Nj9B8okryifxIJ8Fh3yKZNPyLBvOp5uCd6SZED+h/59JrssxzaL3FJ6CmPxDypMxNuCZilMOuETA1aWTfUN0Ek+YTmLSifH/NOjkp476PerkGQdcLODYB3GNo85a85yjvrXBOkD4n8OYfhHYLlgPqtbCNFF2ZeIM444iHSN5DaD2+BqCT4ZTuokLYBT9mPoxHqi88Y7ubjoq54sd8NbXLOCFxzEsp2T8DYE/LaCFv1keCDMMv3pPjs+U/BHymbtgP51pYI47taupXTE829U/PNtVEukczXCpfIztSNlOkX2p/J/xFMmkrJ3avWHfy2Cdq1yujM0WrY9c78mo85+zYtzYnxQ8z/cSAY/zNePfyK/t0VrH/jBanGspPtSYZ6LBMc3QmBC+RbCzBfJQeJSekC+VN2F/XPA831NruhmC5diQCFgfNhAX0GWeGTfHN9YDx4pYPJc1PlOVtY382h6x5an/NvM9ExXrifPsmdyRszFtpcPHYnFGyVitfV3xjHVuz2UN4w3XulSsUrzyOu8AjPUux1g5V7YaXNb2daM+r8Bj1mby303AgfDIF8K/Pb+R6eRimNfOwgp6GdylDri44HoWh7jX7O6+1+oOwje6g/BGe647yKP1zUNfSnT2579RXojL+EgJ/v35jd7/YQ7P2PMHBf1Zor+Lb3EP7ZVxNcQ9XPe/O+exd+4aaPvehzlLk/DjPebNbKcoPxpWE+S1osp9XLUszmfUdzkYpii3RP9VtTSM5ZzDqBwpccBbX1E+WPQuTdUcrCin4pwa89gocsfbIvwNAc9xc1XEzaLYzXo2+1xw0CujY2VPHLNjuu9L7jH9rfBXtZvYQcv6UB5FOi6Dn+d+g79S6HWU+s80Xmj4t2q8uGUaL3b9fb7EiztHiBf8Xqzh38h/tyu2ldXNta3NtU7n8Ern7pXOKr87hnIIQf/QyqHO+vrm+tahre3DK1snhtF/AwwYStj9zgAA",
  "debug_symbols": "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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "fn main(w: Field) -> pub Field {\n    let f = if 3 * 7 > 200 as u32 { foo } else { bar };\n    assert(f()[1] == 2);\n    // Lambdas:\n    assert(twice(|x| x * 2, 5) == 20);\n    assert((|x, y| x + y + 1)(2, 3) == 6);\n    // nested lambdas\n    assert((|a, b| a + (|c| c + 2)(b))(0, 1) == 3);\n    // Closures:\n    let a = 42;\n    let g = || a;\n    assert(g() == 42);\n    // When you copy mutable variables,\n    // the capture of the copies shouldn't change:\n    let mut x = 2;\n    x = x + 1;\n    let z = x;\n    // Add extra mutations to ensure we can mutate x without the\n    // captured z changing.\n    x = x + 1;\n    assert((|y| y + z)(1) == 4);\n    // When you capture mutable variables,\n    // again, the captured variable doesn't change:\n    let closure_capturing_mutable = (|y| y + x);\n    assert(closure_capturing_mutable(1) == 5);\n    x += 1;\n    assert(closure_capturing_mutable(1) == 5);\n\n    regression_2154();\n\n    let ret = twice(add1, 3);\n\n    test_array_functions();\n    w + ret\n}\n/// Test the array functions in std::array\nfn test_array_functions() {\n    let two = 2; // giving this a name, to ensure that the Option functions work with closures\n    let myarray: [i32; 3] = [1, 2, 3];\n    assert(myarray.any(|n| n > 2));\n    assert(myarray.any(|n| n > two));\n\n    let evens: [i32; 3] = myarray.map(|n| n * two); // [2, 4, 6]\n    assert(evens.all(|n| n > 1));\n    assert(evens.all(|n| n >= two));\n\n    assert(evens.fold(0, |a, b| a + b) == 12);\n    assert(evens.fold(0, |a, b| a + b + two) == 18);\n    assert(evens.reduce(|a, b| a + b) == 12);\n    assert(evens.reduce(|a, b| a + b + two) == 16);\n    // TODO: is this a sort_via issue with the new backend,\n    // or something more general?\n    //\n    // currently it fails only with `--experimental-ssa` with\n    //  \"not yet implemented: Cast into signed\"\n    // but it worked with the original ssa backend\n    // (before dropping it)\n    //\n    // opened #2121 for it\n    // https://github.com/noir-lang/noir/issues/2121\n    // let descending = myarray.sort_via(|a, b| a >= b);\n    // assert(descending == [3, 2, 1]);\n    assert(evens.map(|n| n / 2) == myarray);\n    assert(evens.map(|n| n / two) == myarray);\n}\n\nfn foo() -> [u32; 2] {\n    [1, 3]\n}\n\nfn bar() -> [u32; 2] {\n    [3, 2]\n}\n\nfn add1(x: Field) -> Field {\n    x + 1\n}\n\nfn twice(f: fn(Field) -> Field, x: Field) -> Field {\n    f(f(x))\n}\n// Fixing an ICE, where rewriting the closures\n// during monomorphization didn't correspond\n// to an internal `if` type\n// found by @jfecher:\n// https://github.com/noir-lang/noir/pull/1959#issuecomment-1658992989\n// issue https://github.com/noir-lang/noir/issues/2154\nfn regression_2154() {\n    let x: u32 = 32;\n\n    let closure_if_else = if x > 2 { || x } else { || x + 2342 };\n\n    assert(closure_if_else() == 32);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
