---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZnNbhs5EITfRWcf+Nf8yasEQaA4ciBAkA3FXmBh+N2XNd3FiQ8LBK2L65OlriGb3Rxq9H74efrx9uv7+fr0/Pvw5ev74cftfLmcf32/PD8eX8/P1/nf90PAnxjj4Ut8mJpMs2kxFdNq2ky76VBNwdT8kvkl80vml8wvmV8yv2R+yfyy+eX5uQSd/89Ty/x/gUbTeR2BZtNiKqbVdF6nQrvpUJVgGk2TaTadfg0qptW0mXbToVqDaTRNptnU/Kr5VfOr5lenX4cO1RZMo2kyzabFdPoNaDVFXgOgE4ZBDwSsFZLcsTjIchdCJTRCJwyDEQjwweIMLDpWZWRCIQihEhqhE+A8FyuFQIBzBcC5ATKhEIQA5w5ohE4YBhHOAxAJiZAJhSCESmiE6ZwCYDqnmcOEBlCYzikBEiETCkEIlQDDDBgG6ACFSEiETIBhAcAQGdv6ZYNG6IRhgB5SiIRE4AjRPwmZRwMpwBB5RgspDAM0kQIMkWe0kUImwAepQ+cooKWRQ/SMQiQkQiYUghAqYRpmZB69ozAM0DXbtdA2GfNC3yjAEDlE5yhUQiN0wjBA7yhEQiJkAp07nTud0U0Z64VuUhgG6CaFSEiETCgEOGO90E0KcMYyoZsUhkJGNynAuQESIRPg0wGNgPCZuoyWUYiERMiEQhBCJTQDNEgJgEiY4SUCZlRJgBlVMqAR5nTKnHJGFxQBZMK8aMG8UPwKldAICMcEUfwbbDcQTBB3jIKBbbcIjAcVLhgPKlxhGKDCFZJFobAFY8YdQkEIMMTgUeGbMypcIRHwYcwLG7xgOltBQjEKjB3VpzAMUH0KkQA/TAvVp1AIQqiERugEOCMZqD6FSEiETCgEIcAZyUD1KXTCUCioPoVISIRMmD41AHBXnmkuKLqaAJlQCLLlqWwVBm2m3VRPCgX1tmk0TabFtNlFUWIKuDrewtarEAnJBobqUygEIVRCM9gOHQXQCcNgO2cIAOEV0AxQLLUBhADnDmiEThgGqCOFSMAlkF7seQqFgNMHpow9b7soamz7D2qsYfCoMYVEwBkGS4AaUxACjjFIFGpMoROGAWpMIRISIdswUGMKTMvgCAfzgxpTGAqCGlMQTa9sFbVBI2xL8PHxcOAp+Pvr7XTCIfiPY/E8LL8cb6fr6+HL9e1yeTj8c7y8bR/6/XK8bvp6vM13Z6pO159Tp+HT+XICfTzs0eH/Q0toFjxreYXL38ej9zS+Bkd8yxx8y8UR3wPje+j3xcfsiU/MX8+e/A3cQrf44YvHCdDimydeOP8h5c744YlvK75VR3wMuDNvBjFIdzk0WQ7OMdS+OySXw9hnMdqdDjFEj8NM5XKI4d4xOB163fPgcohprDHk4XKQNYb5TfluB09Njt5WGoKvoNa+EEPyLQW+TptDdLXF/Jq+0jDS3Q6utkhxZXJ+T/Y45LXDT3Q5JNnH0HyzGHGNIbhWM8tazVxd20Mu7V6Hto+huVpzfhFYDqPe6VB822TJqyaLb4OpcW201XXomg8S1y1rHro9DrJ3t7gOPvNh5MqDFF8e8hpDza7OqrJnUu528G32ta08VF9V17EcWvAcwuaD19Wbrbjy0GQfgy8Pra89qnXXbt/TWoueXd3d977ozdXdbaxbd/fttJ8cPN0t6xwm0VMNUrgQUjzrIJUTEFcOpbEYpVdXvKz45hr/mr/rMF7XkaG6Tgy1MH++PakOXr8Fz/yrxLuun9Ztej5z9uR/LZ+vh9dWNjzV18Z6HuA6eO+nZtehef8qOe67vO98VPfDje9uuG5lvlPFfiv8nL5v89Xx8Xz79KvvB5xu5+OPy8lePr1dH/949/XfF77DX41fbs+Pp59vtxOc9p+O55+vMn9HlBy/zQe+89UID/O703yBp7dfy3zGX4rgZcRH5xlOSvj2gZH9Bw==",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
