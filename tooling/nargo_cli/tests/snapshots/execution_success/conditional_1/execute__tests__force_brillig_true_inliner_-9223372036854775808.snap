---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZndbhs5DIXfxde5GP2QkvZViqJwU7cwYDiBmyywKPLuyzPikduLBRb0Tc5nOzwjUaRGY/86fDt9ff/x5Xz9/vLz8NenX4evt/Plcv7x5fLyfHw7v1zt3V+HDX9SMklPpsk1uxbX6iqu6tpcu+uYmt0vu192v+x+2f2y+2X3y+6X3S+7X7H/y1B7v0Dt/WpaN1e7jkCza3GtruJq11Foc+2uY6psrsk1u5pfg1ZXcVXX5tpdx1TdXJNrdnU/dT91P3U/Nb8O7a5jattck2t2La7mN6DiirxugEbohOHQsVZIcsfiIMsdq4M0dyEooRE6YTiMjYBFx6qMTIAz8j/gjIQOISihEeCMJIwxIW8bIRHg3AGFUAlCUEIjdMJw2Ot+AMw5b4BMMOecAJUgBCU0QndA4ecMgGEBZEIhVIIQlNAI3aFs7lxgWAGZAEMBVIIQlABDBXTCcEDvTIAPsopumYBw5Ad9MqEThgNaZUIiZEIhwBDpRb9MUEL3a6FVChKOXplghgVTRrdMKIRKEIISGqEThgO6ZgKdG50bndE5BQuH1pmghEbohOGA3pmQCHDGwqGbJsAZ64VumqCERoAz1gvdtAO6aQJ8sEzonQkIR+rQMhM6YUwoaJkJiZAJhVAJ8OmA7oC+KANgUXUDWFRNgEqw6dQMsKhqMy0o/gl20VoBmVAIlYBwASjBhlFtggU1XzEwVHjFeFDhFeNBhU9QQiMMj0JhC8a83xV2yATcFzB4VPjujAqfMBxQxoJ5YVMXTGcvSGjlG7idYBKovgmN0AnDAdUnmB+qb0ImFEIlCEEJcEZWUH0ThgOqb0IiZAKckQxU3wQhKKEROmE4oPomwAdZQdEJ0oyiU8tlRYlNwM0yAfKep7pXGLS6iqu6NtfuOqam5FrnRStKbALu2xnQCJ0w5sAqqm9CImRCIVQHFJTiWiioCUrAWcAWrqJqVACVgKtbeut+LtjBnLUBKkEISmiETsAlMC/seRMSAc4YIfa8/aKosfkODhlIOGpswnBAjTUsAWpsQibgqIFEocYmCEEJjdAJwwE1tg8DNTaBaekcYWd+UGMTlIC5y8fH04Gnzi9vt9MJh87fjqF2OH093k7Xt8Nf1/fL5enw9/Hyvv/Tz9fjdde3480+tbmert9MzfD7+XICfTzdo7f/DrWq82ArqxUu/z8ehTjjdQvEt8LBt1ID8X1jfN/6Y/GpROIz89dLJH8DN7o9fsTicU7z+BaJF85/SH0wfkTi24pvGohPG26tu0HapIcctC+HlkMO4z6G0R50SFuKOFgilkPaHh1D0KHrPQ8hh5THGkMZIQdZY7DnyYcdIhU1eltp2GIFhQdOd0ihtrAn0TWJkR92CBV1TisP9igYcShrdzUMOWS5j6HFZjHSGsMWKuoiazXt0BxyqO1Rh3YfQws1Vhl3h6EPOtTYJlfLqska2x40rW1SQwce+7JM1hg0NAa5d7eEDh32hdvKg9RYHsoag5ZQZ6ncMykPO8S2am0rDxqrah3LoW2RA5B9ubh6s9VQHprcxxDLQ+trj2o9tNv3vNail1B393tf9Bbq7jbWjbfHdto/HCLdLesUJSlSDVK5EFIj6yDKCUgoh9JYjNI1FC8rvoXGv+YfOkrrOjJo6MSglfmL7Uk6eP22Rebf1rbaSqSTVdJD48/rNm9fy0bWby1/bA9YW+GIVG8b61k+dOxeZ+bYoVvuDy+PXT52vtL74Sh2N123wtip5H4r/TN9n+3V8fl8++MX0g843c7Hr5eTv/z+fn3+7dO3f175CX9hfb29PJ++vd9OcLr/zGp/PlU7ZNux6LN9k2qvxvZkT072Iu2f2UNALfgM34R+EvvGQ3L6/IGR/Qs=",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
