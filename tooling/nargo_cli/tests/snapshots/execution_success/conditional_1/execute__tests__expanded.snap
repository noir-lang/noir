---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn sort(mut a: [u32; 4]) -> [u32; 4] {
    for i in 1_u32..4_u32 {
        for j in 0_u32..i {
            if a[i] < a[j] {
                let c: u32 = a[j];
                a[j] = a[i];
                a[i] = c;
            }
        }
    }
    a
}

fn must_be_zero(x: u8) {
    assert(x == 0_u8);
}

fn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {
    let mut data: [u32; 32] = [0_u32; 32];
    let mut ba: u32 = a;
    for i in 0_u32..32_u32 {
        let i_u32: u32 = i as u32;
        if i_u32 == a {
            for j in 0_u32..4_u32 {
                {
                    let i_3825: u32 = i + j;
                    data[i_3825] = c[(4_u32 - 1_u32) - j];
                };
                for k in 0_u32..4_u32 {
                    ba = ba + data[k];
                }
                if ba == 4864_u32 {
                    c[3_u32] = ba;
                }
            }
        }
    }
    assert(data[31_u32] == 0_u32);
    assert(ba != 13_u32);
    let b: [u32; 4] = sort([1_u32, 2_u32, 3_u32, 4_u32]);
    assert(b[0_u32] == 1_u32);
    if a == 0_u32 {
        must_be_zero(0_u8);
        c[0_u32] = 3_u32;
    } else {
        must_be_zero(1_u8);
        c[0_u32] = 1_u32;
        c[1_u32] = (c[2_u32] / a) + (11_u32 % a);
        let f1: Field = a as Field;
        assert((10_Field / f1) != 0_Field);
    };
    assert(c[0_u32] == 3_u32);
    let mut y: u8 = 0_u8;
    if a == 0_u32 {
        let digest: [u8; 32] = std::hash::blake3(x);
        y = digest[0_u32];
    } else {
        y = 5_u8;
    };
    assert(y == result[0_u32]);
    c = sort(c);
    assert(c[0_u32] == 0_u32);
    let mut x: u32 = 0_u32;
    if a == 0_u32 {
        c[0_u32] = 12_u32;
        if a != 0_u32 {
            x = 6_u32;
        } else {
            x = 2_u32;
            assert(x == 2_u32);
        }
    } else {
        x = 5_u32;
        assert(x == 5_u32);
    };
    if c[0_u32] == 0_u32 { x = 3_u32; };
    assert(x == 2_u32);
    let mut x: u32 = 0_u32;
    x = a - a;
    for i in 0_u32..4_u32 {
        if c[i] == 0_u32 {
            x = (i as u32) + 2_u32;
        }
    }
    assert(x == 0_u32);
}
