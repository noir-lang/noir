---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZnNbhtJDITfRWcf+v8nrxIEgeLIgQBBNhR7gYXhd1/WkNUTHxYIqIvrk2TWdLPJntbo/fDz9OPt1/fz9en59+HL1/fDj9v5cjn/+n55fjy+np+v8u77IeBPjPHwJT6IJtNsWkyraTPtpsN0qqZgan7J/JL5JfNL5pfML5lfMr9kftn8svxfgsr7WbTI+wUaTeU6FZpNi2k1baZynQYdplO1BtNomkyzqfh1aDVtpt10mE7VFkyjaTLNpubXzK+ZXzO/Jn4DOlV7MI2myTSbFlPxm9BmirwGwCBMgxEIWCskeWBxkOVRCY3QCYMwDWYgwAeLM7HoWJWZCYVQCY3QCYMAZ1msFAIBzg0A5w7IhEKoBDgPQCcMwjSIcJ6ASEiETCiESmiEThDnFADinCSHCQ2gIM4pARIhEwqhEhoBhhkwDdABCpGQCJkAwwKAITK29csGnTAI0wA9pBAJicARon8SMo8GUoAh8owWUpgGaCIFGCLPaCOFTIAPUofOUUBLI4foGYVISIRMKIRKaAQxzMg8ekdhGqBrtmuhbTLmhb5RgCFyiM5RaIROGIRpgN5RiIREyAQ6DzoPOqObMtYL3aQwDdBNCpGQCJlQCHDGeqGbFOCMZUI3KUyFjG5SgHMHJEImwGcAOgHhkrqMllGIhETIhEKohEboBmiQEgCRIOElAiSqJIBElQzoBJlOkSlndEGpgEyQixbMC8Wv0AidgHBMEMW/wXYDwQRxxygY2HaLwHhQ4RXjQYUrTANUuEKyKBR2xZhxh1CoBBhi8KjwzRkVrpAI+GfMCxt8xXS2goR2voFRYBKovg1QfQqRkAiZUAi4AmaM6lPohEGAM5KB6lOIhETIhEKoBDgjGag+hUGYCgXVpxAJiZAJ4tMCAHdlSXNB0bUEyIRCqFueylZh0G46TPWkUFBvm0bTZFpMu10UJaaAq+MjbL0KkZBsYKg+hUKohEboBtuhowAGYRps54wKQHgD4CNZlIIa2d5Bjeg7cB6AThiEaYA6UogE+CC92PMUCgGnD0wZNaaA8wvGjBpTiAQcYZB51JhCIcAH+UGNKXTCIEwD1JhCJHCmqDGFQmBaUGMKnTAIU6GitBSqprduFbVBJ2xL8PHxcOAp+Pvr7XTCIfiPY7Ecll+Ot9P19fDl+na5PBz+OV7etn/6/XK8bvp6vMmnkrPT9aeoGD6dLyfQx8MeHf4/tIRuwVLLK7z+fTx6T+NbcMT3zMH3XBzxIzB+hHFffMye+MT8jezJ38QtdIufvnicAC2+e+Ir5z9ruTN+euL7iu/NER8D7sybQQx1uBx6XQ7OMbSxOySXw9xnMfudDjFEj4OkcjnEcO8YnA6j7XlwOcQ01xjydDnUNQb5pny3g6cm5+grDcFXUGtfiCH5lgJfp80hutpCvqavNMx0t4OrLVJcmZTvyR6HvHZ4QZdDqvsYum8WM64xBNdq5rpWMzfX9pBLv9eh72PortaULwLLYbY7HYpvmyx51WTxbTAtro22uQ5d8iBx3bLk0O1xqHt3V9fBRx5GrjzU4stDXmNo2dVZre6ZrHc7+Db71lcemq+q21wOPXgOYfLgdfVmL6489LqPwZeHPtYe1Ydrtx9prcXIru4ee1+M7uruPtete/h22k8Onu6u6xxWo6caauFC1OJZh9pZTHU0V3xd8Z67XW1MYHWtYW1r/q7DeFtHhuY6MbTC8fv2pDZ5/R48+Ws13nX9tG7T8szZk/+1/L4eXlvZ9Kx+n+t5gOvgvZ+aXYfm/avkvO/yvvNR2w83vrvhupX5ThX7rfBz+r7Jq+Pj+fbpV98PON3Oxx+Xk718ers+/vHp678v/IS/Gr/cnh9PP99uJzjtPx3Ln69VfkesOX6TB77yaoYH+e4kL/D09muRZ/ylVLyM+Fc5w9USvn1gZP8B",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
