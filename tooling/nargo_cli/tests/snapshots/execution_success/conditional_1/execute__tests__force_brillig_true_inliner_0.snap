---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91dzY9bVxW/b+znGXtmYk9SWiiEhm+yQLI99sxkN1LdQpumH+lH2rRp4vHMpE2aNkUCxAL0JCSEBCsWSCCxR2ILUjawQkKoEhKsWLGBPwEkJAQiZ+ad8c8/n/tsM++O83Kl6H3c3zvnd88999x7z3ueRO6wnL//L0rPy3TEopjt9Ng8XmnlKKsZGZzz5hvlyDcUx4UCcCwVgGM5Z9+MXVjfjAtg00oBOC4WgONSAThWXb7j55xzQcdPrQA2XS4Ax5UCcFwtAMdTBeBYLwDHRgE4rhWA4+kCcDxTAI6PFIDjxwrA8dECcHysABw/XgCOnygAx8cLwPGTBeD4qQJwPFsAjp8uAMcnCsDxXAE4fqYAHD9bAI6fKwDHzxeA4xcKwPGLBeD4pQJw/HIBOJ4PwPGg1OBcSMvLF3m5IS8PJCEvCW9JKEvCVhKi5+A5SeZJskySUZLskWSKJCskGSCbbdnMymZRNmOy2ZHNhCzWZTEsi01ZzMliSRYjMtk/kcqXyUCCrQQzCRYyGMXZxZmks8678aIGP7dweKym1wtQn+NLm1aV9OYpf6u52a4a7cuR/3o1lRkHkd/uq/xKGP7NxVTO15KhfGyL6i0Rjp8pAeYZwDzjwTwLmGc9mIuAuejBPAeY5zyYS4C5BJgIMM8D5nkP5gXAvODBvAiYFz2YlwDzkgdzGTCXPZiXAfOyB/MKYF7xYF4FzKsezGuAec2DuQKYKx7M64B53YN5AzBveDBXAXPVg3kTMG96MG8B5i0P5hpgrnkwbwPmbQ/mOmCuezA3AHPDg+kDpu/B7ABmx4MZAGbgwewCZteD2QPMngezD5h9D+YmYG56MO8A5h0P5l3AvOvB3ALMLQ/mNmBuezDvAeY9D+YOYO54MO8D5n0P5gPAfODB3AXMXQ/mQ8B8SJhVONeicV7nohBrga1m50Lgua6jbcMPMLSdqnsxjO5uRPqcG/YH1qn+mgu5rjj8gAn1KR+2j/b1qmKSIR+uKyfj7dC6GOq0f2UtfBVw7FvKo+pG/Tdnv9sN7HfdOfrdxsPodyWqKyfj7ZjV79Am7HflALbYanbbYf2u3Zyf37VbD6PflamunIy3Y1a/Q9+KAbcH57fTc+2zKICNdK8can6Xcsbgj7qkLCbuqKi/lOCe2lXtvIR4qqtCXTkZ1VNLr8ugB2Upj5jwu+l1PT1W4Bl9vmHor5D+Ed7GPbZL1cBXDbz42rX0XPJKmv94MhnKk3/b6f3mMYvK74H8UgD5T4F85/LPPz0dhv+R/K+Gkd+RPpYYcS81jMYVjTlos2lishT1pYYbn58wPuI1ynhQ55ZQOcysuWXBsKvaZymMfZoRyUc+S4Z9tC+rRp3K0vx2DLIQvwRtRDye6/N47zvpsUEypfSSUQ5Voz14D2Pgt6ht2DfHHQ9om2nGw/+rB/2Vx1Yo31H51SDyh/nyWgD5rfWmuebtJYdH8YsfkE2X02v0a1yDLkE94u9EQ5k/TO/Vjed948hN0Fc3nq+RLH2uDLIWjXbHhP9xegzrS83maZDrax+2neNjoHi9y/Ea7TctH5cfn6bVn875Yw3358+I5zz6M+x7sGY7K44HbvfUuTvVX3Mh1z/D9YY1v6N9eG6qGVwbbjwu4VrYF7Nqhp6GoQf94biyqjnJkqLr8ZDz0f2yo7ZfduNF61ZAN/oMlxJdI2/pz99GQ7mMY504VlC/z67oa+of08xR+pxvjlJZMeF/nR4D948Z07gN1jyBNu0lo21Q/N/To6wR7lF7lkjHdj7taT1o/ozt5DLJn/81hT/XDT0VN/oc5vBwvpJShro85wzR81/gz+MqBr1sz6xYpvgVA48yesnhsWHgn55BN8Zdy9bLzpZVcvae84Tm7B3VtTolHz0/lV4vAH41A79C/Fn+KcJbczbakGOx6q548Lw/Ufyf06PUP5I6jzUetJ/nMR7Q73g8TPLvBY+dEG/5fMON9ymvhTDftUwyLd+RUjXubafH5vFKX/XViEtktCEgjybr4lyONT70umxwlXPe0yj+b9Seecz/4gf/cLZdc+bRt+YILdZ4wXw+F2teVdys8yq2N2texbgupQx1oeMI5tw4jljx1srJKn7S2reXHB6z9idZeXP0qSwbZ/HHfuK1OLaHYxWOxZKBV/48Fv+dHueZX7C+S4o8R7UV3+P9INbpeOI1fCkFVUCYlQ+K8rNDl/mx/9Qz/B/HYbi+mv4dDOdEQr+DscYLxkPO6QWaV7rKx1pbW/FnzQ3fnWCfIT+VdQ7uTRPjOEZgP/Hah+c3KehzVpyJ6Lxk8Cln8LF0sqwy3LN0x4R/lMZqiG94pFgxS3VlxfcsO4b83k1KRDxxPkCdym3BsCH2Z0z3zqYNEd96bGG0feiXWeMhKwYG7tOZ1mLMkYu1FlPes+bs0FdUf9Zag/tZ+UyKD5YvZ/kMcu2lstgnvkLj8WFcQ3DbdQ3RhTVEO2MNkef8M2kN8RTxCBRrBlnfDc9jrzASt0Av+olz9ryV515B7W2NX9XJfvQk+NH2yfjRxrR+ZOFiA2fNe7znmTVelQzb8XxjzXFSeqmsmPAXwdaXMtpYdeM4i1dE51EGL7Qd78UuU7/PY11zUnHU2t9ondj7SjSUi/bDbznwWX3nx2vFG9DXVzP8dJo+tLhyH14/mdhr9qHqWna2n/JYtL5ps/ZTWTHU+oZBdfvygqgH7YuxoZccHrk/b0J/3vL4CPLDNui4m7QfmkWuFI1Z1loO5bJPLxs24HfqaAPF3wUbfJPmQOs9keC+TrpXQLaVg+fxpPhvg+5vGDwiQxa3TQrbDNutz+I3XepTmNvn769OZehEuYqvgx4Lr/Jiwn83bSu+f6kTxhpvDbhWfdUMfmsGP8RwTk/x3wN+jy/YMrHflZcU7nfFfx9kniWZp+H5EtlBCseRMwYe45nyqRMHfJb7ENuD7+X4fYbif2S0x1rPHv3eID2WoS7PnJu1nkUbxslou7HPprG51Ufoj2qzhhvvjzWqw3GnOvn7ACm95PAo/vsTig9Hv6Vx9js99kPF/xJizk/T8zo9zzEYny8b+uQcv4FG/M9B3y8y9HHuZ9XgYvmXypjHfgnjJfsX+lLJwLN9s/wRY1XDjfveKtVh3FSdaH+ew1Anzjs8x1jv4nFuzOq7uhuPLTz/WDbIstmagW8YHK25ZY1kWXMftqPu4Vrx4HnuU/yvjLnP+qadv42Y9h2+9Z0RfiehcSTkeNncOsyjHnBNhnbgfB/qjwn/m1QA5gX0eJz/dGB/s9/aX+/v97v93d3OoM/7ACnaD77fD2E7Is/Ruen2dtY+2Nrbaf9KH/6OxrE+N+3eTvF/gNj8exrD2B7cF1n7214ylPMRcSsb3FA2f+Og+D8Btz962uvc7PsJfRbtaO23uF8qhs6s/Je1N7Ty0NP8LkKfs2wohftX8X+BWMNrzsUZ2zNp7xpRe7CtvHe1fML6u0rsE38Fn/jnHPuO25rVd3nbmf3GsnPW77PnsU5CG8TJ9O217GP9zs367ox/M4e2suyzOEf7ZOXdZ/Vdy55W3Gm4cdtxfsfKHePY4/GMOiO4x/E48sj9COLVPdKBuWprHuBvVBT/nxT0IOQTD9qZDDmj/0lZTIZtLBl4nCsRv5BWiA3LtBePDX2CO5OBizzHAxnGvXIyes/6PT7+nQLFq+5aMs5R65ahDseGlJX0Gu2FspRHTPgG5Jyk4N8W0Ocbhv4l0j/C27iHY5NllYx7+O6oml4c7atBd45+e/StUoXk4z3mpr6z7PJfn3e6/c1Bf7PVutBp7XVa3Unr87z19zfXtwbtzmBzp7veX9/on7T+9tbWxoX2TrOzuTvY3+2sn7T+QXdjZ3C/E5p7rQM6k/T/DxKyIG8dcQAA",
  "debug_symbols": "pZnNbhtJDITfRWcfpn/YP3mVIAgUR1kIEGRDsRdYBH73ZQ1ZreSwwIK6uD7JYk03m+xpjX4dvp++vf/19Xz98fLz8Onzr8O32/lyOf/19fLyfHw7v1z13V+HDX9SSodP6Uk1uxbX6iquzbW7DtdpmjdX98vul90vu192v+x+2f2y+2X3K+5X9HMZqu8X1arvV2hy1esItLhWV3FtrnqdBh2u01Q21+SaXYur+nWouDbX7jpcp2nbXJNrdi2u7tfcr7lfc7+mfgM6Tfvmmlyza3Gtruo3oc0Ved0AgzAdxkbAWiHJA4uDLA8hNEInDMJ0mBshEbDoWKVZCJUghEbohEGAsy5q3jYCnAUA5wYohEoQApw7oBMGYTokOA9AImRCIVSCEBqhE+A8AeqcNZkZDWCgzjkBMqEQKkEIjaCGOQOmAzrAIBEyoRAqAYYF0AidMAjTAT1kkAiZwBGifzKWAA1kAEOsBVrIYDqgiQxgiLVAGxkUAnywBOgcA4QjmegZg0TIhEKoBCE0AgyxFugdg+mArtmvhbYpWB30jYEaFswUnWPQCJ0wCNMBvWOQCJlQCHQedB50RjcVrBe6yWA6oJsMEiETCqES4Iz1QjcZwBnLhG4ymAYF3WQAZwFkQiHApwE6AeGauoKWMUiETCiEShBCI3QHNEgZgERA+ARoVN0AGlUToBN0OlWnXNAFtQAKQS9aMS8Uv0EjdALCMUEU/w77DQQTxB2jYmCo8IrxoMIrxoMKN5gOqHCD7FEobMGYcYcwEALuORg8Knx3RoUbZAI+jHlhgxdMZy9IaOcbOgrBJFB9O6D6DBIhEzAczA/VZyCERuiEQZgOqD5BVlB9BplQCJUgBDgjGag+g0GYBhXVZ5AImVAI8BkARGmaK4qubYBC0Ku3BJA9T3WvMGh3Ha52Uqh7vUGTa3atrt0vihIzwJlA16Ri6zVIhOwDQ/UZVIIQGqE77IcOXGs/dewwHfZzRgVoeBMA/qVZraiR/R3UiL2jzg2JwlZnMAjTAXVkkAjwwbyw5xlUApwxQtSYAc4vyDNqzCARcIRB5lFjBpWAUwzygxoz6IRBmA6oMYNE4ExRYwaVwLSgxgw6YRCmgaC0DMTSK6gog07Yl+Dj4+nAU/DXt9vphEPwb8diPSy/Hm+n69vh0/X9cnk6/H28vO8f+vl6vO76drzpfzUxp+t3VTX8cb6cQB9P9+jtv0Pr1j1Ya3mFy/+PR7FafNsC8b1w8L3UQPzYGD+28Vh8KpH4zPyNEsnfxM1wj5+xeBz8PL5H4oXzn1IfjJ+R+L7iewvEpw23390gbTJCDm0sh55DDvM+htkfdEhbijhoIpZD2h4dQ9BhtHseQg4pzzWGMkMOssag33MfdohU1Bx9pWGLFRS+wbpDCrWFfkVek5j5YYdQUee08qDfUSMOZe2uiiGHLPcx9NgsZlpj2EJFXWStZmmh5i61P+rQ72PoocbSQ/hymO1Bhxrb5GpZNVlj20NLa5tsoQOPPsSTNYYWGoPcu1tChw59ELjyIDWWh7LG0Eqos5rcMykPO8S26tZXHlqsqttcDn2LHID0oefqzV5DeehyH0MsD32sPaqP0G4/8lqLUULdPe59MXqou/tcN94R22n/cIh0t6xTlKRINUjlQkiNrIM0TkBCOZTOYpTRQvGy4nto/Gv+oaN0W0eGFjoxtMr8xfakNnn9vkXm39e22kukk5ukh8af121enxdH1m8tf2wPWFvhjFRvn+u7fOjYvc7MsUO33L+8PHb52Pmq3Q9HsbvpuhXGTiX3W+mf6fuir47P59sfv9h+wOl2Pn67nPzlj/fr82//ffvnlf/hL76vt5fn0/f32wlO95999c9n0d8ApaQv+rBWX83tSb856Qs8ef1c9Wl8rYKXCR/VM6DU7csHRvYv",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
