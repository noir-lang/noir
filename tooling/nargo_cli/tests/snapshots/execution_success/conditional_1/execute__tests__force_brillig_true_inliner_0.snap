---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZnNbhtJDITfRWcf+v8nrxIEgeLIgQBBNhR7gYXhd1/WkNUTHxYIqIvrk2TWdLPJntbo/fDz9OPt1/fz9en59+HL1/fDj9v5cjn/+n55fjy+np+v8u77IeBPjPHwJT6IJtNsWkyraTPtpsN0qqZgan7J/JL5JfNL5pfML5lfMr9kftn8svxfgsr7WbTI+wUaTeU6FZpNi2k1baZynQYdplO1BtNomkyzqfh1aDVtpt10mE7VFkyjaTLNpubXzK+ZXzO/Jn4DOlV7MI2myTSbFlPxm9BmirwGwCBMgxEIWCskeWBxkOVRCY3QCYMwDWYgwAeLM7HoWJWZCYVQCY3QCYMAZ1msFAIBzg0A5w7IhEKoBDgPQCcMwjSIcJ6ASEiETCiESmiEThDnFADinCSHCQ2gIM4pARIhEwqhEhoBhhkwDdABCpGQCJkAwwKAITK29csGnTAI0wA9pBAJicARon8SMo8GUoAh8owWUpgGaCIFGCLPaCOFTIAPUofOUUBLI4foGYVISIRMKIRKaAQxzMg8ekdhGqBrtmuhbTLmhb5RgCFyiM5RaIROGIRpgN5RiIREyAQ6DzoPOqObMtYL3aQwDdBNCpGQCJlQCHDGeqGbFOCMZUI3KUyFjG5SgHMHJEImwGcAOgHhkrqMllGIhETIhEKohEboBmiQEgCRIOElAiSqJIBElQzoBJlOkSlndEGpgEyQixbMC8Wv0AidgHBMEMW/wXYDwQRxxygY2HaLwHhQ4RXjQYUrTANUuEKyKBR2xZhxh1CoBBhi8KjwzRkVrpAI+GfMCxt8xXS2goRiFBg7qk9hGqD6FCIBfpgWqk+hECqhETphEOCMZKD6FCIhETKhECoBzkgGqk9hEKZCQfUpREIiZIL4tADAXVnSXFB0LQEyoRDqlqeyVRi0mw5TPSkU1Num0TSZFtNuF0WJKeDq+Ahbr0IkJBsYqk+hECqhEbrBdugogEGYBts5owIQ3gD4SBaloEa2d1Aj+g6cB6ATBmEaoI4UIgE+SC/2PIVCwOkDU0aNKeD8gjGjxhQiAUcYZB41plAI8EF+UGMKnTAI0wA1phAJnClqTKEQmBbUmEInDMJUqCgtharprVtFbdAJ2xJ8fDwceAr+/no7nXAI/uNYLIfll+PtdH09fLm+XS4Ph3+Ol7ftn36/HK+bvh5v8qnk7HT9KSqGT+fLCfTxsEeH/w8toVuw1PIKr38fj97T+BYc8T1z8D0XR/wIjB9h3Bcfsyc+MX8je/I3cQvd4qcvHidAi++e+Mr5z1rujJ+e+L7ie3PEx4A782YQQx0uh16Xg3MMbewOyeUw91nMfqdDDNHjIKlcDjHcOwanw2h7HlwOMc01hjxdDnWNQb4p3+3gqck5+kpD8BXU2hdiSL6lwNdpc4iutpCv6SsNM93t4GqLFFcm5XuyxyGvHV7Q5ZDqPobum8WMawzBtZq5rtXMzbU95NLvdej7GLqrNeWLwHKY7U6H4tsmS141WXwbTItro22uQ5c8SFy3LDl0exzq3t3VdfCRh5ErD7X48pDXGFp2dVareybr3Q6+zb71lYfmq+o2l0MPnkOYPHhdvdmLKw+97mPw5aGPtUf14drtR1prMbKru8feF6O7urvPdesevp32k4Onu+s6h9XoqYZauBC1eNahNk6gunJYO4uxjuaKryu+u8a/5u86jLd1ZGiuE0MrzJ9vT2qT1+/BM/9W413XT+s2Lc+cPflfy+fr4bWVTU/19bmeB7gO3vup2XVo3r9Kzvsu7zsftf1w47sbrluZ71Sx3wo/p++bvDo+nm+ffvX9gNPtfPxxOdnLp7fr4x+fvv77wk/4q/HL7fnx9PPtdoLT/tOx/Pla5XfEmuM3eeArr2Z4kO9O8gJPb78WecZfSsXLiH+VM1wt4dsHRvYf",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
