---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZnNbhs5EITfRWcf+Nf8yasEQaA4ciBAkA3FXmBh+N23a9jFiQ8LBK2L65OsriGb3Rxq9H74efrx9uv7+fr0/Pvw5ev74cftfLmcf32/PD8eX8/PV333/RDwJ8Z4+BIfVJNpNi2mYlpNm2k3HVNTMDW/ZH7J/JL5JfNL5pfML5lfMr9sflk/l6D6flYt+n6BRlO9jkCzaTEV02qq16nQbjqmSjCNpsk0m6pfg4ppNW2m3XRMrcE0mibTbGp+1fyq+VXzq+rXoWNqC6bRNJlm02KqfgNaTZHXAOiEYdADAWuFJHcsDrLchVAJjdAJw2AEAnywOAOLjlUZmVAIQqiERugEOOtipRAIcK4AODdAJhSCEODcAY3QCcMgwnkAIiERMqEQhFAJjaDOKQDUOWkOExpggjqnBEiETCgEIVQCDDNgGKADJkRCImQCDAsAhsjY1i8bNEInDAP00IRISASOEP2TkHk00AQYIs9ooQnDAE00AYbIM9poQibAB6lD50xASyOH6JkJkZAImVAIQqgENczIPHpnwjBA12zXQttkzAt9MwGGyCE6Z0IlNEInDAP0zoRISIRMoHOnc6czuiljvdBNE4YBumlCJCRCJhQCnLFe6KYJcMYyoZsmjAkZ3TQBzg2QCJkAnw5oBIRr6jJaZkIkJEImFIIQKqEZoEFKAESChpcI0KiSABpVMqARdDpFp5zRBUUAmaAXLZgXin9CJTQCwjFBFP8G2w0EE8Qdo2Bg2y0C40GFC8aDCp8wDFDhE5JFobAFY8YdYoIQYIjBo8I3Z1T4hETAhzEvbPCC6WwFCW18A6PAJFB9G6D6JkRCImRCIeAKmDGqb0IjdAKckQxU34RISIRMKAQhwBnJQPVN6IQxoaD6JkRCImSC+tQAwF1Z01xQdDUBMqEQZMtT2SoM2ky76TwpFNTbptE0mRbTZhdFiU3A1fEvbL0TIiHZwFB9EwpBCJXQDLZDRwF0wjDYzhkCQHgFNAMUS20AIcC5AxqhE4YB6mhCJOASSC/2vAmFgNMHpow9b7soamx7BzXWMHjU2IREwBkGS4AamyAEHGOQKNTYhE4YBqixCZGQCNmGgRqbwLQMjnAwP6ixCWOCoMYmyEyvbBW1QSNsS/Dx8XDgKfj76+10wiH4j2OxHpZfjrfT9fXw5fp2uTwc/jle3rYP/X45Xjd9Pd70v5qq0/Wnqho+nS8n0MfDHh3+P7SEZsFayytc/j4evTfja3DEt8zBt1wc8T0wvod+X3zMnvjE/PXsyd/ALXSLH754nAAtvnnihfMfUu6MH574tuJbdcTHgDvzZhCDdJdDk+XgHEPtu0NyOYx9FqPd6RBD9DhoKpdDDPeOwenQ654Hl0NMY40hD5eDrDHoN+W7HTw1OXpbaQi+glr7QgzJtxT4Om0O0dUW+jV9pWGkux1cbZHiyqR+T/Y45LXDK7ockuxjaL5ZjLjGEFyrmWWtZq6u7SGXdq9D28fQXK2pXwSWw6h3OhTfNlnyqsni22BqXBttdR269EHiumXpodvjIHt3i+vgow8jVx6k+PKQ1xhqdnVWlT2TcreDb7OvbeWh+qq6juXQgucQpg9eV2+24spDk30Mvjy0vvao1l27fU9rLXp2dXff+6I3V3e3sW7d3bfTfnLwdLesc5hETzVI4UJI8ayDNBaT9OqKlxXvudtJZQLFtYZS1/xdh/G6jgzVdWKoheP37Ul18PotePJXJd51/bRu0/rM2ZP/tfy+Hl5b2fCsfhvreYDr4L2fml2H5v2r5Ljv8r7zUd0PN7674bqV+U4V+63wc/q+6avj4/n26VffDzjdzscfl5O9fHq7Pv7x39d/X/gf/mr8cnt+PP18u53gtP90rH++iv6OKDl+0we++mqEB/3upC/w9PZr0Wf8pQheRnxUz3BSwrcPjOw/",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
