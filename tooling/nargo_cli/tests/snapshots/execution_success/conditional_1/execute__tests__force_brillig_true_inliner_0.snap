---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
