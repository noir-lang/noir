---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
