---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _41",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9]",
    "public parameters indices : [_10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41]",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(34))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(36))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(37))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(38))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(39))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(40))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(41))], q_c: 0 }])], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32878 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 42 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U32) }, Cast { destination: Direct(32840), source: Direct(32840), bit_size: Integer(U32) }, Cast { destination: Direct(32841), source: Direct(32841), bit_size: Integer(U8) }, Cast { destination: Direct(32842), source: Direct(32842), bit_size: Integer(U8) }, Cast { destination: Direct(32843), source: Direct(32843), bit_size: Integer(U8) }, Cast { destination: Direct(32844), source: Direct(32844), bit_size: Integer(U8) }, Cast { destination: Direct(32845), source: Direct(32845), bit_size: Integer(U8) }, Cast { destination: Direct(32846), source: Direct(32846), bit_size: Integer(U8) }, Cast { destination: Direct(32847), source: Direct(32847), bit_size: Integer(U8) }, Cast { destination: Direct(32848), source: Direct(32848), bit_size: Integer(U8) }, Cast { destination: Direct(32849), source: Direct(32849), bit_size: Integer(U8) }, Cast { destination: Direct(32850), source: Direct(32850), bit_size: Integer(U8) }, Cast { destination: Direct(32851), source: Direct(32851), bit_size: Integer(U8) }, Cast { destination: Direct(32852), source: Direct(32852), bit_size: Integer(U8) }, Cast { destination: Direct(32853), source: Direct(32853), bit_size: Integer(U8) }, Cast { destination: Direct(32854), source: Direct(32854), bit_size: Integer(U8) }, Cast { destination: Direct(32855), source: Direct(32855), bit_size: Integer(U8) }, Cast { destination: Direct(32856), source: Direct(32856), bit_size: Integer(U8) }, Cast { destination: Direct(32857), source: Direct(32857), bit_size: Integer(U8) }, Cast { destination: Direct(32858), source: Direct(32858), bit_size: Integer(U8) }, Cast { destination: Direct(32859), source: Direct(32859), bit_size: Integer(U8) }, Cast { destination: Direct(32860), source: Direct(32860), bit_size: Integer(U8) }, Cast { destination: Direct(32861), source: Direct(32861), bit_size: Integer(U8) }, Cast { destination: Direct(32862), source: Direct(32862), bit_size: Integer(U8) }, Cast { destination: Direct(32863), source: Direct(32863), bit_size: Integer(U8) }, Cast { destination: Direct(32864), source: Direct(32864), bit_size: Integer(U8) }, Cast { destination: Direct(32865), source: Direct(32865), bit_size: Integer(U8) }, Cast { destination: Direct(32866), source: Direct(32866), bit_size: Integer(U8) }, Cast { destination: Direct(32867), source: Direct(32867), bit_size: Integer(U8) }, Cast { destination: Direct(32868), source: Direct(32868), bit_size: Integer(U8) }, Cast { destination: Direct(32869), source: Direct(32869), bit_size: Integer(U8) }, Cast { destination: Direct(32870), source: Direct(32870), bit_size: Integer(U8) }, Cast { destination: Direct(32871), source: Direct(32871), bit_size: Integer(U8) }, Cast { destination: Direct(32872), source: Direct(32872), bit_size: Integer(U8) }, Cast { destination: Direct(32873), source: Direct(32873), bit_size: Integer(U8) }, Cast { destination: Direct(32874), source: Direct(32874), bit_size: Integer(U8) }, Cast { destination: Direct(32875), source: Direct(32875), bit_size: Integer(U8) }, Cast { destination: Direct(32876), source: Direct(32876), bit_size: Integer(U8) }, Cast { destination: Direct(32877), source: Direct(32877), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(7) }, Mov { destination: Direct(32773), source: Relative(6) }, Call { location: 90 }, Mov { destination: Relative(2), source: Relative(5) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32841 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 5 }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(3) }, Mov { destination: Direct(32772), source: Relative(7) }, Mov { destination: Direct(32773), source: Relative(6) }, Call { location: 90 }, Mov { destination: Relative(3), source: Relative(5) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 32846 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 32 }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(4) }, Mov { destination: Direct(32772), source: Relative(7) }, Mov { destination: Direct(32773), source: Relative(6) }, Call { location: 90 }, Mov { destination: Relative(4), source: Relative(5) }, Call { location: 101 }, Call { location: 102 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32878 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 100 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 93 }, Return, Return, Call { location: 530 }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 32 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Mov { destination: Relative(10), source: Relative(8) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 121 }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Jump { location: 115 }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 32 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(13), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 4864 }, Mov { destination: Relative(5), source: Relative(2) }, Jump { location: 135 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(9) }, JumpIf { condition: Relative(15), location: 455 }, Jump { location: 138 }, Load { destination: Relative(14), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, Load { destination: Relative(8), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, JumpIf { condition: Relative(9), location: 145 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Load { destination: Relative(8), source_pointer: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 153 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Const { destination: Relative(8), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(15), source: Relative(14) }, Store { destination_pointer: Relative(15), source: Relative(10) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(11) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(12) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(9) }, Mov { destination: Relative(5), source: Relative(10) }, Jump { location: 172 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(12) }, JumpIf { condition: Relative(9), location: 408 }, Jump { location: 175 }, Load { destination: Relative(5), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(10) }, Load { destination: Relative(9), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, JumpIf { condition: Relative(5), location: 182 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 0 }, JumpIf { condition: Relative(5), location: 228 }, Jump { location: 186 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U8, lhs: Relative(14), rhs: Relative(9) }, JumpIf { condition: Relative(15), location: 191 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Load { destination: Relative(14), source_pointer: Relative(6) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 536 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, Store { destination_pointer: Relative(17), source: Relative(10) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(18), op: Div, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Sub, bit_size: U32, lhs: Relative(14), rhs: Relative(19) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(17) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, JumpIf { condition: Relative(18), location: 210 }, Call { location: 558 }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 536 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(10) }, Store { destination_pointer: Relative(18), source: Relative(14) }, Store { destination_pointer: Relative(6), source: Relative(16) }, Cast { destination: Relative(14), source: Relative(1), bit_size: Field }, Const { destination: Relative(1), bit_size: Field, value: 10 }, BinaryFieldOp { destination: Relative(15), op: Div, lhs: Relative(1), rhs: Relative(14) }, Const { destination: Relative(1), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Relative(14), op: Equals, lhs: Relative(15), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U1, lhs: Relative(14), rhs: Relative(7) }, JumpIf { condition: Relative(1), location: 227 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(15) } }, Jump { location: 238 }, Load { destination: Relative(1), source_pointer: Relative(6) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 536 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, Store { destination_pointer: Relative(15), source: Relative(11) }, Store { destination_pointer: Relative(6), source: Relative(7) }, Jump { location: 238 }, Load { destination: Relative(1), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Load { destination: Relative(7), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(11) }, JumpIf { condition: Relative(1), location: 245 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(9) }, JumpIf { condition: Relative(5), location: 253 }, Jump { location: 250 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 5 }, Store { destination_pointer: Relative(1), source: Relative(3) }, Jump { location: 265 }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BlackBox(Blake3 { message: HeapVector { pointer: Relative(9), size: Relative(14) }, output: HeapArray { pointer: Relative(15), size: 32 } }), BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(10) }, Load { destination: Relative(3), source_pointer: Relative(9) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Jump { location: 265 }, Load { destination: Relative(7), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(10) }, Load { destination: Relative(1), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 272 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Load { destination: Relative(1), source_pointer: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(4) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 279 }, Call { location: 561 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(1) }, Mov { destination: Relative(3), source: Relative(10) }, Jump { location: 286 }, BinaryIntOp { destination: Relative(1), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, JumpIf { condition: Relative(1), location: 361 }, Jump { location: 289 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Store { destination_pointer: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Load { destination: Relative(3), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 297 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(2) }, JumpIf { condition: Relative(5), location: 305 }, Jump { location: 302 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 5 }, Store { destination_pointer: Relative(3), source: Relative(1) }, Jump { location: 321 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 12 }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 536 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(2) }, Store { destination_pointer: Relative(13), source: Relative(4) }, Store { destination_pointer: Relative(6), source: Relative(7) }, JumpIf { condition: Relative(5), location: 319 }, Jump { location: 316 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 6 }, Store { destination_pointer: Relative(3), source: Relative(1) }, Jump { location: 321 }, Store { destination_pointer: Relative(3), source: Relative(8) }, Jump { location: 321 }, Load { destination: Relative(1), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Load { destination: Relative(4), source_pointer: Relative(5) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(1), location: 327 }, Jump { location: 329 }, Store { destination_pointer: Relative(3), source: Relative(11) }, Jump { location: 329 }, Load { destination: Relative(4), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(8) }, JumpIf { condition: Relative(3), location: 334 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 339 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(4), location: 348 }, Jump { location: 342 }, Load { destination: Relative(1), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 347 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Load { destination: Relative(4), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(1) }, Load { destination: Relative(5), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 355 }, Jump { location: 358 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(8) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Jump { location: 358 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 339 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 363 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 369 }, Jump { location: 366 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(10) }, Mov { destination: Relative(3), source: Relative(1) }, Jump { location: 286 }, Load { destination: Relative(7), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(3) }, Load { destination: Relative(9), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(14), location: 376 }, Call { location: 564 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(14) }, JumpIf { condition: Relative(7), location: 382 }, Jump { location: 405 }, Load { destination: Relative(7), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Load { destination: Relative(9), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(3) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 536 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 536 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(3) }, Store { destination_pointer: Relative(16), source: Relative(9) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Jump { location: 405 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Mov { destination: Relative(1), source: Relative(7) }, Jump { location: 363 }, Mov { destination: Relative(9), source: Relative(2) }, Jump { location: 410 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, JumpIf { condition: Relative(15), location: 416 }, Jump { location: 413 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(10) }, Mov { destination: Relative(5), source: Relative(9) }, Jump { location: 172 }, Load { destination: Relative(15), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(5) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(12) }, JumpIf { condition: Relative(17), location: 423 }, Call { location: 564 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(9) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(17) }, JumpIf { condition: Relative(15), location: 429 }, Jump { location: 452 }, Load { destination: Relative(15), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(9) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(5) }, Load { destination: Relative(17), source_pointer: Relative(19) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 536 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(9) }, Store { destination_pointer: Relative(20), source: Relative(17) }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 536 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(5) }, Store { destination_pointer: Relative(19), source: Relative(16) }, Store { destination_pointer: Relative(14), source: Relative(15) }, Jump { location: 452 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, Mov { destination: Relative(9), source: Relative(15) }, Jump { location: 410 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(1) }, JumpIf { condition: Relative(15), location: 458 }, Jump { location: 464 }, Mov { destination: Relative(15), source: Relative(2) }, Jump { location: 460 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, JumpIf { condition: Relative(16), location: 467 }, Jump { location: 463 }, Jump { location: 464 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(10) }, Mov { destination: Relative(5), source: Relative(15) }, Jump { location: 135 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 471 }, Call { location: 558 }, Load { destination: Relative(18), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U32, lhs: Relative(11), rhs: Relative(15) }, BinaryIntOp { destination: Relative(20), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, JumpIf { condition: Relative(20), location: 476 }, Call { location: 567 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(12) }, JumpIf { condition: Relative(20), location: 479 }, Call { location: 564 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(19) }, Load { destination: Relative(20), source_pointer: Relative(22) }, Load { destination: Relative(18), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(9) }, JumpIf { condition: Relative(19), location: 486 }, Call { location: 564 }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 536 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, Store { destination_pointer: Relative(22), source: Relative(20) }, Store { destination_pointer: Relative(8), source: Relative(19) }, Mov { destination: Relative(16), source: Relative(2) }, Jump { location: 496 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, JumpIf { condition: Relative(17), location: 517 }, Jump { location: 499 }, Load { destination: Relative(16), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, JumpIf { condition: Relative(17), location: 503 }, Jump { location: 514 }, Load { destination: Relative(16), source_pointer: Relative(7) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 536 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(11) }, Store { destination_pointer: Relative(20), source: Relative(16) }, Store { destination_pointer: Relative(6), source: Relative(18) }, Jump { location: 514 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(10) }, Mov { destination: Relative(15), source: Relative(16) }, Jump { location: 460 }, Load { destination: Relative(17), source_pointer: Relative(7) }, Load { destination: Relative(18), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(16) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(19) }, BinaryIntOp { destination: Relative(20), op: LessThanEquals, bit_size: U32, lhs: Relative(17), rhs: Relative(18) }, JumpIf { condition: Relative(20), location: 526 }, Call { location: 558 }, Store { destination_pointer: Relative(7), source: Relative(18) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(10) }, Mov { destination: Relative(16), source: Relative(17) }, Jump { location: 496 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 535 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 540 }, Jump { location: 542 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 557 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 554 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 547 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 557 }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
