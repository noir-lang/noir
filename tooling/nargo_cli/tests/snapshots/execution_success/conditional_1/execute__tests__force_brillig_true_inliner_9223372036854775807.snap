---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "6472674703204639686",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "fn sort(mut a: [u32; 4]) -> [u32; 4] {\n    for i in 1..4 {\n        for j in 0..i {\n            if a[i] < a[j] {\n                let c = a[j];\n                a[j] = a[i];\n                a[i] = c;\n            }\n        }\n    }\n    a\n}\n\nfn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //Test case for short-circuit\n    let mut data = [0 as u32; 32];\n    let mut ba = a;\n    for i in 0..32 {\n        let i_u32 = i as u32;\n        if i_u32 == a {\n            for j in 0..4 {\n                data[i + j] = c[4 - 1 - j];\n                for k in 0..4 {\n                    ba = ba + data[k];\n                }\n                if ba == 4864 {\n                    c[3] = ba;\n                }\n            }\n        }\n    }\n    assert(data[31] == 0);\n    assert(ba != 13);\n    //Test case for conditional with arrays from function parameters\n    let b = sort([1, 2, 3, 4]);\n    assert(b[0] == 1);\n\n    if a == 0 {\n        must_be_zero(0);\n        c[0] = 3;\n    } else {\n        must_be_zero(1);\n        c[0] = 1;\n        c[1] = c[2] / a + 11 % a;\n        let f1 = a as Field;\n        assert(10 / f1 != 0);\n    }\n    assert(c[0] == 3);\n\n    let mut y = 0;\n    if a == 0 {\n        let digest = std::hash::blake3(x);\n        y = digest[0];\n    } else {\n        y = 5;\n    }\n    assert(y == result[0]);\n    c = sort(c);\n    assert(c[0] == 0);\n    //test 1\n    let mut x: u32 = 0;\n    if a == 0 {\n        c[0] = 12;\n        if a != 0 {\n            x = 6;\n        } else {\n            x = 2;\n            assert(x == 2);\n        }\n    } else {\n        x = 5;\n        assert(x == 5);\n    }\n    if c[0] == 0 {\n        x = 3;\n    }\n    assert(x == 2);\n    //test2: loops\n    let mut x: u32 = 0;\n    x = a - a;\n    for i in 0..4 {\n        if c[i] == 0 {\n            x = i as u32 + 2;\n        }\n    }\n    assert(x == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
