---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _9",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -43 })], outputs: [Simple(Witness(1))]",
    "EXPR [ (1, _0, _1) (-43, _1) (1, _2) -1 ]",
    "EXPR [ (1, _0, _2) (-43, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "EXPR [ (1, _0, _3) (1, _4) -1 ]",
    "EXPR [ (1, _0, _4) 0 ]",
    "EXPR [ (1, _2, _4) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(5))]",
    "EXPR [ (1, _0, _5) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 100 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_6, 26)] []",
    "BLACKBOX::RANGE [(_7, 7)] []",
    "EXPR [ (1, _7) (-1, _8) 28 ]",
    "BLACKBOX::RANGE [(_8, 7)] []",
    "EXPR [ (1, _0) (-100, _6) (-1, _7) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(9))]",
    "EXPR [ (1, _7, _9) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pZLBboQgEIbfZc4cREBdX6VpDCpuSAgaFpo0xnfvCNjuHmw2u5f/F8ZvZoBZYVR9uHbaTvMN2o8VeqeN0dfOzIP0era4u24EjmXnnVK4BXdxpBbplPXQ2mAMgS9pQvzptkgb3UuH0YKAsiM6Jpy0UfvXRv7o4hwtq8wy9guLp2nBMi0uZ3R5TlPGM045f6F63WS8OaX5m9X/4wU9+Kp8q/vHu/vElRy0e5gUoFiGQBmVReX4ZgRE1CpqHbXBNAQuUWkBLT4wpcnKZCwZTyaSYYoaDXPU296007I3Kk/pFOxwN7T+ezkix1gvbh7UGJza244xPMgP",
  "file_map": {
    "50": {
      "source": "fn main(x: u32) {\n    if (x == 43) {\n        let _ = foo(x);\n    }\n    assert(foo(x) != 0);\n}\n\nfn foo(input: u32) -> u32 {\n    assert(input != 0);\n    input % 100\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient"
  ]
}
