---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(y: Field) {\n    let foo_one = Foo { a: 1, b: [2, 3, 20], bar: Bar { inner: [100, 101, 102] } };\n    let foo_two = Foo { a: 4, b: [5, 6, 21], bar: Bar { inner: [103, 104, 105] } };\n    let foo_three = Foo { a: 7, b: [8, 9, 22], bar: Bar { inner: [106, 107, 108] } };\n    let foo_four = Foo { a: 10, b: [11, 12, 23], bar: Bar { inner: [109, 110, 111] } };\n    let mut x = &[foo_one];\n    x = x.push_back(foo_two);\n    x = x.push_back(foo_three);\n    x = x.push_back(foo_four);\n\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    if y != 2 {\n        x[y - 2].a = 50;\n    } else {\n        x[y - 2].a = 100;\n    }\n    assert(x[y - 2].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
