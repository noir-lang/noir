---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91dO28kWRW+1Q+7H253296Z2RmPx+VZiQACuqc9Hq9AwsEiEYAEEpB7ZnZSMhIInPIHSEiQSJBIViIm3GSRCEgQEkgECBGABBIS4hHs9m6d7q+/+ep0tfted49Lsqqr7rnn8Z3Hrbp1q5yF2ZYV+wYdB0FzUeyHq22jiLyGUlFvM5r/1j7bt4vjGrTXIxrbJrkx+Z8PT5+2hX0R9R+3C54p8TGeCfgPtws+713N+LMtk61XHGMMWZ/WJ387Yfa7V/xuU58Uvk2I/fBA6G+yuoWtv6vN21oHfCLp8cR4N+LznsZvMzrv0anFzBbwzig2ttP47jQjeSHM51Ag+R3SNXYeZyTP9GF8LL4Mu5bQdSDa0DZsQzktIUfxakTkZXGVLs7OTjmWIvKe1phWfN5n5mMcozg/OnB+Hflh8juka6r86JA+jA/nR1foOhBtTfiNbSinK+QoXtsReVlcpYvhYcIYHp5xnMbjPXraE1hyfuzA+XXkh8nvCN+myI8d0qcs1gy7ntB1INo4pntCTk/IUbxaEXlZXCWs8c8S1vjzdPlx9q75GGOC8wOxXEd+mPxOSJqvIy/WEB/Oj12h60C0cX7sCjm7Qo7i1YrIK31+DM8Tjh/vJhw/zrgGGmaIF2K5jvww+Z2QNF9HXqypWmzY9YWuA9HG+dEXcvpCjuLVisjrBsaPy4Tjx/OE48cLroGGGeKFWK4jP0x+JyTN15EXa6oWG3YDoetAtHF+DIScgZCjeLUi8rqB8eN5wvHjRcLx4xnXQMMM8UIs15EfJr8TkubryIs1VYsNuz2h60C0cX7sCTl7Qo7i1YrI6wbGj5cJx4/3E44fr7gGGmaIF2K5jvww+Z2QNF9HXqypWmzY7QtdB6KN82NfyNkXchSvVkReHbIH8yMr2ZscPlc2970Kr3TxP3s2txef93ROez8+7+l8x0F83tNr4Tvgk4h5Nh3v76XhP7acuBvm44ttMvkWq28B/TKxirI6xCtVjVK2of6c73dBH8SgjNfdJXm1RVsKn95x7Eb5PUdXZUcnIiZbEXm1I/Lai8irG5HXTkRe+xF59SLy2o3I6yAir35EXnaNlHj8ODXZeD3FuY3XR1zX75LNWMcbZHujpF9dYNYs6XfHwSXEw2XUJH1+WewnWPyR1rikrtM2ttYWYGn6PEisz/0w29S4gfLxGOnvA43Z1y+O3xa82qJfimsBpSteW90nfY4SY/0w+FgfEdZHgv6hwNOwPhS82kJORNueVMWaa421WW5inHSozWg/JJseprFpiGNlIFk90onpcG9Y8DkeKxAnrolvJ7LR7MD1hSZrcp32aziP9mMtx75Y65H+o9qM52+KcxaveD3I8WBtvyU8Et0bSZ/fc/TdpjbUi+/tMS8zkmHxofL7kOgyOt8s6bcF7Uj/+2KP415GfWolPHlcekS6XRTHw9W2sVf7EGOUj8dIfyQwUbWSeSnZ6HseN/LEWBwHH4uc9M8F/THQHBEWjxxe9xZgwXXd5HDsTX7vUZvR/rXYJ8ZT5rjJ4jl9psO9YcHnvLn2OySnrO7+Hc6X5bpXd43+V1B3/1GcM3/jPSr7xNr+VewTz3VLn+w5+nLdVc9GQlhcd+0ao07Hy9Zd7NeFdqT/X7FXddf61Ep4ct09Jt0uiuPhatvYq6OIMcovq02PBCaq7jIvJRt9z3X3JDEWefCxOCH9TwR9DjSPCItjh9feAiy47pbF3uT3PrUZbadIiE2ou2od7HXrLuJUte72s9l5xqxK3TX6D6Du7hc8zd84b8b+sra75JNEa26lTzhXvbqr1sTy87WM+C+qpfsOPkb/sGBYtZYiT66lOel2URwPV9vc6zbELSecckF/LDBRtZR5KdleLX2cGIuT4GPxmPR/LOixRh4TFrnDq7cAi2Vq6QG1Ge0XKG8TjdMyb03WptTSIdVSxKxKLTX6n0EtHVMtxfl59pe1PXtDaqm3PlRh59VJo/+yqJOGw2EaHMascwivr6Ni+XiM9PgspxfKsbS+3nq268Y+6lw19r8aKfZ/DLH/NYp97N+n/tb29Q2I/UA6NQEX1AXxYh9NjnEeh8etOtBfRLFp/ISx/H6h1MQX3yJf4Lt3nNfqXTizEf2m5tuaYR4zo//uhuW1ysWqec3zUKpG3NR97+EC26rc96L9PHd8IHhZXatfzdpM5sS/f6rN6FjHxtU8PnlIi88ie3PCJxf0iKHNIQ5K9De7GZ9DB5/uhuHTXQGfIwefvoOPFz99B5/Uzz5VfvWFvRkdIz3XF8QH+x9QG66HaFIb1mXTZxKbP6E6H/P6Det82fXbD5w6v45aiDYuWwu5zqtauM48Rdtysi0X9Gg/13lVE1WemkyVp6hj42oen5OQFp98gb0nhM+JoM+Bhus89m86+Bw7+DQdfPKQFh/1DhVeA+aETy7oVd1Tdf7Awafp4LPOOr/o3q9Kned1fIgP9j+kNqzzXWqrWuczoOM6j37mOo91XNX5DNqR/qdOnU/0vtOYdQ5BxzKvgVSxj+MiP2PPBK9Acrx7wibR/jybxyfR94zkPS2vXc7C61jgc6/7ZIPdS35YdJzw+wXFHt7Xc+zhfTLHHmKpniHy/bfRf+DEXqL5gmnsbQn80EZeR61iFX3Cz4ybgpeqoyZT1VHUsXE1j886chPtXTY3LTbV3FbbwWfLwae+YfjUV8Anc/DhewYcZ3jOUH23bILh35bIdW+cwbVdVXLd6D+6ReMM57rKi7aQfRHFrvG4LfSMxHv6XUG8jsrIpkTzfJXfOzX5HdI1sj7TddzePOJk43crvWtEvv6139iGco6EHMWrG5GXN7/jXfffpnrsjVfefZE3njc3DJ9VaqA3XvE9d9XxyvRZdrxa9tr0LaEPX5v+0xmvUJeIvrrkMTYEHcs1sh/9aH35OaG1q30IodLzSLSbn0ciT3we+Z9sdh7tQH9gX34eafQ/gueR/6fYUNhw/3AzPpT3buyvmLHccGyf0hcNKpabaXCY1h38rrKK5WaJjaHExgcOljifN+f7sHrsI03V2N+l9WFmR9XYN/ofQuzvFb+V/TxvYW13yOd16nNRHA9X3FTsm6xVY19hh/NbtRLsHtyi2L/nYLlpsf9OpNj/HsT+564R+5+/pbHv3XMb/RdvUezvOVhuWuyfR4r95xD7X7pG7H/llsY+yiuL/fduUez3HCw3Lfa/ESn2vwOx/02KfRVn/Bzn2xtwvd8FnRtCZ9NX3e/hfVuN6L3/c4EYeGsEPV4DR7b6fxXbjmzUi9+Ps35NoSfb0xT6NAQvFbucbyo/0X/27EzFuvXFWE/h47agr+rjdgVeu45s7/9ELPIx9sV+MXxsvG7Sx+dvsI93HNlqPrCqj3l99Zvu43cS+njRc1TPx1WeQbcd2VXncL3nWKxLDB/z2pib8PEu+VjNGXo44zVaCpw9Xp6PF613YtmoFz/j43c5VM5zHqj7EOSl5o45XurChqo+tr4416zWeTIm3npptmvylwt6XJfIc7zLrk33rrlOBH3uyFbrJVkX9W4hr6s9FPocCF7qGRCvlVZxinzZx0omvt+kfMwxqnycw7kqOFf18UkFXn1H9mNBf+LIRr2wL/aL4WPjpd7HTOXjIflYvW9YJS/Zruvk0rI+7jmyl/VxDm3L+DgnucrH+4JXFR+r71lX9bH1xe8dKJz5e6i5kInf6khRLz1e3jiR0seoZ05yj4U+KnbVt4HKagLaUNXH1he/JWS24vOaeyRTfXsF9aiV2Iv0uP6VcT5y7FW8thzZuaD3xgn1fSvWpSn0LPsuGOrzUPBS3/Xjde/qW5BVfWx98Tt9do3auJrRxZpne3Y+tCFhutbG5hN5a0A70v+hMACfm9i+sYKer55djl6NL19dPr18+fL0xSXPB4YwPx8YW/6Lp2fPX5w+vRy+P5ocPlkkf3qNfzVrx/VLk22rOJ7oVRf0OOeO9H+GOdu/FL9tPGwIeZ9es8M87WRrgS4R52mfmG3bqAfpg/L7gt5+J9Z17Om6LXRVGGcle+SF57av5s+1r16nR5y2SXYH6amtC20NkrNTHGOsIS/To0n0/4b7+cnWgj7WfyDko89YlpKPdY951cU5o//0u3dUcxogO2K8jDCPJjn+MYrR0PFlgQAA",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(y: Field) {\n    let foo_one = Foo { a: 1, b: [2, 3, 20], bar: Bar { inner: [100, 101, 102] } };\n    let foo_two = Foo { a: 4, b: [5, 6, 21], bar: Bar { inner: [103, 104, 105] } };\n    let foo_three = Foo { a: 7, b: [8, 9, 22], bar: Bar { inner: [106, 107, 108] } };\n    let foo_four = Foo { a: 10, b: [11, 12, 23], bar: Bar { inner: [109, 110, 111] } };\n    let mut x = &[foo_one];\n    x = x.push_back(foo_two);\n    x = x.push_back(foo_three);\n    x = x.push_back(foo_four);\n\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    if y != 2 {\n        x[y - 2].a = 50;\n    } else {\n        x[y - 2].a = 100;\n    }\n    assert(x[y - 2].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
