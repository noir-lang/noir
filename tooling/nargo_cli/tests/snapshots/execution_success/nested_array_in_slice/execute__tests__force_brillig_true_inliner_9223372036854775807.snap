---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(y: Field) {\n    let foo_one = Foo { a: 1, b: [2, 3, 20], bar: Bar { inner: [100, 101, 102] } };\n    let foo_two = Foo { a: 4, b: [5, 6, 21], bar: Bar { inner: [103, 104, 105] } };\n    let foo_three = Foo { a: 7, b: [8, 9, 22], bar: Bar { inner: [106, 107, 108] } };\n    let foo_four = Foo { a: 10, b: [11, 12, 23], bar: Bar { inner: [109, 110, 111] } };\n    let mut x = &[foo_one];\n    x = x.push_back(foo_two);\n    x = x.push_back(foo_three);\n    x = x.push_back(foo_four);\n\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    if y != 2 {\n        x[y - 2].a = 50;\n    } else {\n        x[y - 2].a = 100;\n    }\n    assert(x[y - 2].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
