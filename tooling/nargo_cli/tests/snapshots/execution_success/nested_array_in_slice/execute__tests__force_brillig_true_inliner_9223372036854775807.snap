---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 957 }, Const { destination: Relative(3), bit_size: Field, value: 2 }, Const { destination: Relative(4), bit_size: Field, value: 3 }, Const { destination: Relative(5), bit_size: Field, value: 20 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(8), source: Relative(3) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(4) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Const { destination: Relative(7), bit_size: Field, value: 100 }, Const { destination: Relative(8), bit_size: Field, value: 101 }, Const { destination: Relative(9), bit_size: Field, value: 102 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(11) }, Store { destination_pointer: Relative(12), source: Relative(7) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(8) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, Const { destination: Relative(11), bit_size: Field, value: 5 }, Const { destination: Relative(12), bit_size: Field, value: 6 }, Const { destination: Relative(13), bit_size: Field, value: 21 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Relative(11) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(12) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Const { destination: Relative(15), bit_size: Field, value: 103 }, Const { destination: Relative(16), bit_size: Field, value: 104 }, Const { destination: Relative(17), bit_size: Field, value: 105 }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Mov { destination: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(20), source: Relative(15) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(16) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(17) }, Const { destination: Relative(19), bit_size: Field, value: 8 }, Const { destination: Relative(20), bit_size: Field, value: 9 }, Const { destination: Relative(21), bit_size: Field, value: 22 }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(23) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(23) }, Store { destination_pointer: Relative(24), source: Relative(19) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(20) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(21) }, Const { destination: Relative(23), bit_size: Field, value: 106 }, Const { destination: Relative(24), bit_size: Field, value: 107 }, Const { destination: Relative(25), bit_size: Field, value: 108 }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Relative(23) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(24) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(25) }, Const { destination: Relative(27), bit_size: Field, value: 11 }, Const { destination: Relative(28), bit_size: Field, value: 12 }, Const { destination: Relative(29), bit_size: Field, value: 23 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(27) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(28) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Const { destination: Relative(31), bit_size: Field, value: 109 }, Const { destination: Relative(32), bit_size: Field, value: 110 }, Const { destination: Relative(33), bit_size: Field, value: 111 }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(35) }, Store { destination_pointer: Relative(36), source: Relative(31) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(32) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(37), bit_size: Field, value: 1 }, Const { destination: Relative(38), bit_size: Field, value: 4 }, Const { destination: Relative(39), bit_size: Field, value: 7 }, Const { destination: Relative(40), bit_size: Field, value: 10 }, Const { destination: Relative(42), bit_size: Integer(U32), value: 12 }, Const { destination: Relative(44), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(44) }, Mov { destination: Relative(41), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(41), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(42) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(42) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(43) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Relative(37) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(6) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(10) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(38) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(14) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(39) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(22) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(26) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(40) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(30) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(34) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, Store { destination_pointer: Relative(35), source: Relative(6) }, Store { destination_pointer: Relative(36), source: Relative(41) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(1) }, JumpIf { condition: Relative(18), location: 179 }, Call { location: 963 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(18), location: 183 }, Call { location: 966 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(18) }, Load { destination: Relative(22), source_pointer: Relative(30) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(26) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(30) }, Load { destination: Relative(34), source_pointer: Relative(43) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(42) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(46) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Load { destination: Relative(44), source_pointer: Relative(46) }, Load { destination: Relative(41), source_pointer: Relative(34) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(41) }, Not { destination: Relative(46), source: Relative(46), bit_size: U1 }, JumpIf { condition: Relative(46), location: 206 }, Call { location: 969 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(41) }, Load { destination: Relative(41), source_pointer: Relative(44) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(41) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 214 }, Call { location: 969 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(41) }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(22), rhs: Relative(37) }, JumpIf { condition: Relative(41), location: 220 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(47) } }, Load { destination: Relative(22), source_pointer: Relative(34) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(22) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 226 }, Call { location: 969 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(44) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(22) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 234 }, Call { location: 969 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(22) }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(44) }, Store { destination_pointer: Relative(47), source: Relative(3) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(4) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(34) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 256 }, Call { location: 969 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 261 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(5), location: 944 }, Jump { location: 264 }, Load { destination: Relative(5), source_pointer: Relative(3) }, JumpIf { condition: Relative(5), location: 268 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Load { destination: Relative(3), source_pointer: Relative(35) }, Load { destination: Relative(5), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, BinaryIntOp { destination: Relative(34), op: LessThanEquals, bit_size: U32, lhs: Relative(42), rhs: Relative(1) }, JumpIf { condition: Relative(34), location: 274 }, Call { location: 963 }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(3) }, JumpIf { condition: Relative(34), location: 277 }, Call { location: 966 }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U32, lhs: Relative(22), rhs: Relative(10) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(41) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(3) }, Load { destination: Relative(34), source_pointer: Relative(41) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(26) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(37) }, Load { destination: Relative(41), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(42) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(47) }, BinaryFieldOp { destination: Relative(5), op: Equals, lhs: Relative(34), rhs: Relative(38) }, JumpIf { condition: Relative(5), location: 296 }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(46) } }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(34) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Relative(38), source: Relative(34) }, Store { destination_pointer: Relative(38), source: Relative(11) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(12) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(13) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 312 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 931 }, Jump { location: 315 }, Load { destination: Relative(5), source_pointer: Relative(11) }, JumpIf { condition: Relative(5), location: 319 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Load { destination: Relative(5), source_pointer: Relative(35) }, Load { destination: Relative(11), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(12), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(26) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, JumpIf { condition: Relative(13), location: 325 }, Call { location: 963 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(5) }, JumpIf { condition: Relative(13), location: 328 }, Call { location: 966 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(5) }, Load { destination: Relative(13), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(26) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(34) }, Load { destination: Relative(38), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(42) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(41) }, Load { destination: Relative(45), source_pointer: Relative(47) }, BinaryFieldOp { destination: Relative(11), op: Equals, lhs: Relative(13), rhs: Relative(39) }, JumpIf { condition: Relative(11), location: 347 }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(46) } }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(39), source: Relative(13) }, Store { destination_pointer: Relative(39), source: Relative(19) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(20) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(21) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 363 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(19), location: 918 }, Jump { location: 366 }, Load { destination: Relative(11), source_pointer: Relative(13) }, JumpIf { condition: Relative(11), location: 370 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Load { destination: Relative(11), source_pointer: Relative(35) }, Load { destination: Relative(13), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(19), location: 375 }, Call { location: 966 }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(11) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(26) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(20) }, Load { destination: Relative(21), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(42) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(46) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(38) }, Load { destination: Relative(39), source_pointer: Relative(46) }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(19), rhs: Relative(40) }, JumpIf { condition: Relative(13), location: 394 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(45) } }, Mov { destination: Relative(13), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(13), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(19) }, Store { destination_pointer: Relative(40), source: Relative(27) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(28) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(29) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 410 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(27), location: 905 }, Jump { location: 413 }, Load { destination: Relative(13), source_pointer: Relative(19) }, JumpIf { condition: Relative(13), location: 417 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, Load { destination: Relative(13), source_pointer: Relative(35) }, Load { destination: Relative(19), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(13) }, JumpIf { condition: Relative(21), location: 422 }, Call { location: 966 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(11) }, Load { destination: Relative(13), source_pointer: Relative(27) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(20) }, Load { destination: Relative(21), source_pointer: Relative(28) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(38) }, Load { destination: Relative(27), source_pointer: Relative(29) }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(29), source: Relative(28) }, Store { destination_pointer: Relative(29), source: Relative(31) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(32) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(33) }, Mov { destination: Relative(28), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 450 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 892 }, Jump { location: 453 }, Load { destination: Relative(2), source_pointer: Relative(28) }, JumpIf { condition: Relative(2), location: 457 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(26) }, Const { destination: Relative(21), bit_size: Field, value: 50 }, JumpIf { condition: Relative(2), location: 503 }, Jump { location: 462 }, Load { destination: Relative(27), source_pointer: Relative(35) }, Load { destination: Relative(28), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(29), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(27) }, JumpIf { condition: Relative(29), location: 467 }, Call { location: 966 }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(3) }, Load { destination: Relative(29), source_pointer: Relative(32) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(37) }, Load { destination: Relative(31), source_pointer: Relative(33) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(44) }, Load { destination: Relative(32), source_pointer: Relative(39) }, Mov { destination: Direct(32771), source: Relative(28) }, Call { location: 972 }, Mov { destination: Relative(33), source: Direct(32772) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(3) }, Store { destination_pointer: Relative(40), source: Relative(21) }, Mov { destination: Direct(32771), source: Relative(33) }, Call { location: 972 }, Mov { destination: Relative(28), source: Direct(32772) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(37) }, Store { destination_pointer: Relative(40), source: Relative(31) }, Mov { destination: Direct(32771), source: Relative(28) }, Call { location: 972 }, Mov { destination: Relative(31), source: Direct(32772) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(13) }, Store { destination_pointer: Relative(39), source: Relative(32) }, Store { destination_pointer: Relative(35), source: Relative(27) }, Store { destination_pointer: Relative(36), source: Relative(31) }, Jump { location: 545 }, Load { destination: Relative(13), source_pointer: Relative(35) }, Load { destination: Relative(27), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(13) }, JumpIf { condition: Relative(28), location: 508 }, Call { location: 966 }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(3) }, Load { destination: Relative(28), source_pointer: Relative(31) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(37) }, Load { destination: Relative(29), source_pointer: Relative(32) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(44) }, Load { destination: Relative(31), source_pointer: Relative(33) }, Mov { destination: Direct(32771), source: Relative(27) }, Call { location: 972 }, Mov { destination: Relative(32), source: Direct(32772) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(3) }, Store { destination_pointer: Relative(39), source: Relative(7) }, Mov { destination: Direct(32771), source: Relative(32) }, Call { location: 972 }, Mov { destination: Relative(27), source: Direct(32772) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(37) }, Store { destination_pointer: Relative(39), source: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(26) }, Mov { destination: Direct(32771), source: Relative(27) }, Call { location: 972 }, Mov { destination: Relative(32), source: Direct(32772) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(29) }, Store { destination_pointer: Relative(39), source: Relative(31) }, Store { destination_pointer: Relative(35), source: Relative(13) }, Store { destination_pointer: Relative(36), source: Relative(32) }, Jump { location: 545 }, Load { destination: Relative(13), source_pointer: Relative(35) }, Load { destination: Relative(27), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(13) }, JumpIf { condition: Relative(28), location: 550 }, Call { location: 966 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(3) }, Load { destination: Relative(13), source_pointer: Relative(29) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(37) }, Load { destination: Relative(28), source_pointer: Relative(31) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(44) }, Load { destination: Relative(29), source_pointer: Relative(32) }, BinaryFieldOp { destination: Relative(27), op: Equals, lhs: Relative(13), rhs: Relative(21) }, JumpIf { condition: Relative(27), location: 566 }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(31) } }, Mov { destination: Relative(13), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(13), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Mov { destination: Relative(31), source: Relative(27) }, Store { destination_pointer: Relative(31), source: Relative(7) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(9) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(26) }, JumpIf { condition: Relative(2), location: 614 }, Jump { location: 580 }, Load { destination: Relative(2), source_pointer: Relative(35) }, Load { destination: Relative(8), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, JumpIf { condition: Relative(9), location: 585 }, Call { location: 966 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(5) }, Load { destination: Relative(9), source_pointer: Relative(27) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(34) }, Load { destination: Relative(21), source_pointer: Relative(28) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(41) }, Load { destination: Relative(27), source_pointer: Relative(29) }, Mov { destination: Direct(32771), source: Relative(8) }, Call { location: 972 }, Mov { destination: Relative(28), source: Direct(32772) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(34) }, Store { destination_pointer: Relative(31), source: Relative(13) }, Mov { destination: Direct(32771), source: Relative(28) }, Call { location: 972 }, Mov { destination: Relative(8), source: Direct(32772) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(7) }, Store { destination_pointer: Relative(31), source: Relative(27) }, Store { destination_pointer: Relative(35), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, Jump { location: 662 }, Const { destination: Relative(2), bit_size: Field, value: 51 }, Const { destination: Relative(7), bit_size: Field, value: 52 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(27), source: Relative(9) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(7) }, Load { destination: Relative(2), source_pointer: Relative(35) }, Load { destination: Relative(7), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, JumpIf { condition: Relative(9), location: 632 }, Call { location: 966 }, Const { destination: Relative(27), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(5) }, Load { destination: Relative(9), source_pointer: Relative(27) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(34) }, Load { destination: Relative(21), source_pointer: Relative(28) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(41) }, Load { destination: Relative(27), source_pointer: Relative(29) }, Mov { destination: Direct(32771), source: Relative(7) }, Call { location: 972 }, Mov { destination: Relative(28), source: Direct(32772) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(34) }, Store { destination_pointer: Relative(31), source: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(26) }, Mov { destination: Direct(32771), source: Relative(28) }, Call { location: 972 }, Mov { destination: Relative(8), source: Direct(32772) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(7) }, Store { destination_pointer: Relative(31), source: Relative(27) }, Store { destination_pointer: Relative(35), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, Jump { location: 662 }, Load { destination: Relative(7), source_pointer: Relative(35) }, Load { destination: Relative(8), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 667 }, Call { location: 966 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Load { destination: Relative(9), source_pointer: Relative(21) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Load { destination: Relative(21), source_pointer: Relative(27) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Load { destination: Relative(27), source_pointer: Relative(28) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 681 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(8), location: 879 }, Jump { location: 684 }, Load { destination: Relative(8), source_pointer: Relative(7) }, JumpIf { condition: Relative(8), location: 688 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Load { destination: Relative(7), source_pointer: Relative(35) }, Load { destination: Relative(8), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 693 }, Call { location: 966 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(18) }, Load { destination: Relative(7), source_pointer: Relative(14) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(30) }, Load { destination: Relative(9), source_pointer: Relative(18) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(43) }, Load { destination: Relative(14), source_pointer: Relative(21) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 710 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(7), location: 866 }, Jump { location: 713 }, Load { destination: Relative(7), source_pointer: Relative(8) }, JumpIf { condition: Relative(7), location: 717 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Load { destination: Relative(7), source_pointer: Relative(35) }, Load { destination: Relative(8), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 722 }, Call { location: 966 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(13) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(37) }, Load { destination: Relative(3), source_pointer: Relative(13) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(44) }, Load { destination: Relative(9), source_pointer: Relative(14) }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(13) }, Store { destination_pointer: Relative(14), source: Relative(15) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(16) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(17) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 750 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(3), location: 853 }, Jump { location: 753 }, Load { destination: Relative(3), source_pointer: Relative(13) }, JumpIf { condition: Relative(3), location: 757 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Load { destination: Relative(3), source_pointer: Relative(35) }, Load { destination: Relative(7), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(3) }, JumpIf { condition: Relative(8), location: 762 }, Call { location: 966 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, Load { destination: Relative(3), source_pointer: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(34) }, Load { destination: Relative(5), source_pointer: Relative(9) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(41) }, Load { destination: Relative(8), source_pointer: Relative(12) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(9) }, Store { destination_pointer: Relative(12), source: Relative(23) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(24) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(25) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 790 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(3), location: 840 }, Jump { location: 793 }, Load { destination: Relative(3), source_pointer: Relative(9) }, JumpIf { condition: Relative(3), location: 797 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Load { destination: Relative(3), source_pointer: Relative(35) }, Load { destination: Relative(5), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 802 }, Call { location: 966 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(11) }, Load { destination: Relative(1), source_pointer: Relative(7) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(20) }, Load { destination: Relative(3), source_pointer: Relative(8) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(38) }, Load { destination: Relative(7), source_pointer: Relative(9) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 819 }, BinaryIntOp { destination: Relative(1), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(1), location: 827 }, Jump { location: 822 }, Load { destination: Relative(1), source_pointer: Relative(5) }, JumpIf { condition: Relative(1), location: 826 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, Load { destination: Relative(1), source_pointer: Relative(5) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Load { destination: Relative(3), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, Load { destination: Relative(4), source_pointer: Relative(9) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(3), rhs: Relative(4) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(1), rhs: Relative(8) }, Store { destination_pointer: Relative(5), source: Relative(3) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(1) }, Jump { location: 819 }, Load { destination: Relative(3), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, Load { destination: Relative(5), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(2) }, Load { destination: Relative(12), source_pointer: Relative(14) }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(5), rhs: Relative(12) }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(3), rhs: Relative(13) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(3) }, Jump { location: 790 }, Load { destination: Relative(3), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, Load { destination: Relative(7), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(7), rhs: Relative(14) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U1, lhs: Relative(3), rhs: Relative(15) }, Store { destination_pointer: Relative(13), source: Relative(7) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(3) }, Jump { location: 750 }, Load { destination: Relative(7), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, Load { destination: Relative(9), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Load { destination: Relative(18), source_pointer: Relative(27) }, BinaryFieldOp { destination: Relative(21), op: Equals, lhs: Relative(9), rhs: Relative(18) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(7), rhs: Relative(21) }, Store { destination_pointer: Relative(8), source: Relative(9) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(7) }, Jump { location: 710 }, Load { destination: Relative(8), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(2) }, Load { destination: Relative(9), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(2) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryFieldOp { destination: Relative(28), op: Equals, lhs: Relative(9), rhs: Relative(27) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(28) }, Store { destination_pointer: Relative(7), source: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 681 }, Load { destination: Relative(13), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(2) }, Load { destination: Relative(21), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(2) }, Load { destination: Relative(29), source_pointer: Relative(32) }, BinaryFieldOp { destination: Relative(31), op: Equals, lhs: Relative(21), rhs: Relative(29) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U1, lhs: Relative(13), rhs: Relative(31) }, Store { destination_pointer: Relative(28), source: Relative(21) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(13) }, Jump { location: 450 }, Load { destination: Relative(27), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(2) }, Load { destination: Relative(28), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(2) }, Load { destination: Relative(29), source_pointer: Relative(40) }, BinaryFieldOp { destination: Relative(39), op: Equals, lhs: Relative(28), rhs: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Mul, bit_size: U1, lhs: Relative(27), rhs: Relative(39) }, Store { destination_pointer: Relative(19), source: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(27) }, Jump { location: 410 }, Load { destination: Relative(19), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Load { destination: Relative(20), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(2) }, Load { destination: Relative(21), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(39), op: Equals, lhs: Relative(20), rhs: Relative(21) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(39) }, Store { destination_pointer: Relative(13), source: Relative(20) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(19) }, Jump { location: 363 }, Load { destination: Relative(12), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(2) }, Load { destination: Relative(13), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(2) }, Load { destination: Relative(34), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(13), rhs: Relative(34) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U1, lhs: Relative(12), rhs: Relative(38) }, Store { destination_pointer: Relative(11), source: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 312 }, Load { destination: Relative(5), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, Load { destination: Relative(37), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(2) }, Load { destination: Relative(41), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(44), op: Equals, lhs: Relative(37), rhs: Relative(41) }, BinaryIntOp { destination: Relative(37), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(44) }, Store { destination_pointer: Relative(3), source: Relative(37) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(5) }, Jump { location: 261 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 962 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32773), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32774), op: Equals, bit_size: U32, lhs: Direct(32773), rhs: Direct(2) }, JumpIf { condition: Direct(32774), location: 976 }, Jump { location: 978 }, Mov { destination: Direct(32772), source: Direct(32771) }, Jump { location: 997 }, Const { destination: Direct(32776), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32776) }, Load { destination: Direct(32775), source_pointer: Direct(32775) }, Const { destination: Direct(32776), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32775), rhs: Direct(32776) }, Mov { destination: Direct(32772), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32775) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32775) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32772) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 995 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 988 }, IndirectConst { destination_pointer: Direct(32772), bit_size: Integer(U32), value: 1 }, Jump { location: 997 }, Return]"
  ],
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(y: u32) {\n    let foo_one = Foo { a: 1, b: [2, 3, 20], bar: Bar { inner: [100, 101, 102] } };\n    let foo_two = Foo { a: 4, b: [5, 6, 21], bar: Bar { inner: [103, 104, 105] } };\n    let foo_three = Foo { a: 7, b: [8, 9, 22], bar: Bar { inner: [106, 107, 108] } };\n    let foo_four = Foo { a: 10, b: [11, 12, 23], bar: Bar { inner: [109, 110, 111] } };\n    let mut x = &[foo_one];\n    x = x.push_back(foo_two);\n    x = x.push_back(foo_three);\n    x = x.push_back(foo_four);\n\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    if y != 2 {\n        x[y - 2].a = 50;\n    } else {\n        x[y - 2].a = 100;\n    }\n    assert(x[y - 2].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
