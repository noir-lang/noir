---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 867 }, Const { destination: Relative(3), bit_size: Field, value: 2 }, Const { destination: Relative(4), bit_size: Field, value: 3 }, Const { destination: Relative(5), bit_size: Field, value: 20 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(8), source: Relative(3) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(4) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Const { destination: Relative(7), bit_size: Field, value: 100 }, Const { destination: Relative(8), bit_size: Field, value: 101 }, Const { destination: Relative(9), bit_size: Field, value: 102 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(11) }, Store { destination_pointer: Relative(12), source: Relative(7) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(8) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, Const { destination: Relative(11), bit_size: Field, value: 5 }, Const { destination: Relative(12), bit_size: Field, value: 6 }, Const { destination: Relative(13), bit_size: Field, value: 21 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Relative(11) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(12) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Const { destination: Relative(15), bit_size: Field, value: 103 }, Const { destination: Relative(16), bit_size: Field, value: 104 }, Const { destination: Relative(17), bit_size: Field, value: 105 }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Mov { destination: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(20), source: Relative(15) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(16) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(17) }, Const { destination: Relative(19), bit_size: Field, value: 8 }, Const { destination: Relative(20), bit_size: Field, value: 9 }, Const { destination: Relative(21), bit_size: Field, value: 22 }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(23) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(23) }, Store { destination_pointer: Relative(24), source: Relative(19) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(20) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(21) }, Const { destination: Relative(23), bit_size: Field, value: 106 }, Const { destination: Relative(24), bit_size: Field, value: 107 }, Const { destination: Relative(25), bit_size: Field, value: 108 }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Relative(23) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(24) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(25) }, Const { destination: Relative(27), bit_size: Field, value: 11 }, Const { destination: Relative(28), bit_size: Field, value: 12 }, Const { destination: Relative(29), bit_size: Field, value: 23 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(27) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(28) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Const { destination: Relative(31), bit_size: Field, value: 109 }, Const { destination: Relative(32), bit_size: Field, value: 110 }, Const { destination: Relative(33), bit_size: Field, value: 111 }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(35) }, Store { destination_pointer: Relative(36), source: Relative(31) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(32) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(37), bit_size: Field, value: 1 }, Const { destination: Relative(38), bit_size: Field, value: 4 }, Const { destination: Relative(39), bit_size: Field, value: 7 }, Const { destination: Relative(40), bit_size: Field, value: 10 }, Const { destination: Relative(42), bit_size: Integer(U32), value: 12 }, Const { destination: Relative(44), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(44) }, Mov { destination: Relative(41), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(41), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(42) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(42) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(43) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Relative(37) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(6) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(10) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(38) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(14) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(39) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(22) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(26) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(40) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(30) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(34) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, Store { destination_pointer: Relative(35), source: Relative(6) }, Store { destination_pointer: Relative(36), source: Relative(41) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(1) }, JumpIf { condition: Relative(18), location: 179 }, Call { location: 873 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(18), location: 183 }, Call { location: 876 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(18) }, Load { destination: Relative(22), source_pointer: Relative(30) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(26) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(30) }, Load { destination: Relative(34), source_pointer: Relative(43) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(30) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(42) }, Load { destination: Relative(18), source_pointer: Relative(44) }, Load { destination: Relative(41), source_pointer: Relative(34) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(41) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 206 }, Call { location: 879 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(41) }, Load { destination: Relative(41), source_pointer: Relative(18) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(41) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 214 }, Call { location: 879 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(41) }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(22), rhs: Relative(37) }, JumpIf { condition: Relative(41), location: 220 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(45) } }, Load { destination: Relative(22), source_pointer: Relative(34) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(22) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 226 }, Call { location: 879 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(18) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(22) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 234 }, Call { location: 879 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(22) }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(22) }, Store { destination_pointer: Relative(45), source: Relative(3) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(4) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(6) }, Load { destination: Relative(4), source_pointer: Relative(34) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 256 }, Call { location: 879 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 261 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(5), location: 854 }, Jump { location: 264 }, Load { destination: Relative(5), source_pointer: Relative(3) }, JumpIf { condition: Relative(5), location: 268 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(30) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 272 }, Call { location: 873 }, Load { destination: Relative(5), source_pointer: Relative(35) }, Load { destination: Relative(18), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(22), location: 277 }, Call { location: 876 }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Relative(10) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(37) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(5) }, Load { destination: Relative(22), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(26) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(34) }, Load { destination: Relative(37), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(30) }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(22), rhs: Relative(38) }, JumpIf { condition: Relative(41), location: 292 }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(43) } }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(38) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Relative(41), source: Relative(38) }, Store { destination_pointer: Relative(41), source: Relative(11) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(12) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(13) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 308 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 841 }, Jump { location: 311 }, Load { destination: Relative(12), source_pointer: Relative(11) }, JumpIf { condition: Relative(12), location: 315 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(26) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, JumpIf { condition: Relative(12), location: 319 }, Call { location: 873 }, Load { destination: Relative(12), source_pointer: Relative(35) }, Load { destination: Relative(13), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(12) }, JumpIf { condition: Relative(22), location: 324 }, Call { location: 876 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(12) }, Load { destination: Relative(22), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(26) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(37) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(30) }, BinaryFieldOp { destination: Relative(12), op: Equals, lhs: Relative(22), rhs: Relative(39) }, JumpIf { condition: Relative(12), location: 339 }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(41) } }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(39), source: Relative(22) }, Store { destination_pointer: Relative(39), source: Relative(19) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(20) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(21) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 355 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(20), location: 828 }, Jump { location: 358 }, Load { destination: Relative(12), source_pointer: Relative(19) }, JumpIf { condition: Relative(12), location: 362 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, Load { destination: Relative(12), source_pointer: Relative(35) }, Load { destination: Relative(19), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(20), location: 367 }, Call { location: 876 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(12) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(26) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(21) }, Load { destination: Relative(22), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(30) }, BinaryFieldOp { destination: Relative(12), op: Equals, lhs: Relative(20), rhs: Relative(40) }, JumpIf { condition: Relative(12), location: 382 }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(21) } }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(27) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(28) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(29) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 398 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(21), location: 815 }, Jump { location: 401 }, Load { destination: Relative(12), source_pointer: Relative(20) }, JumpIf { condition: Relative(12), location: 405 }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(20) } }, Load { destination: Relative(12), source_pointer: Relative(35) }, Load { destination: Relative(20), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(21), location: 410 }, Call { location: 876 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(19) }, Load { destination: Relative(12), source_pointer: Relative(22) }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(31) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(32) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(33) }, Mov { destination: Relative(21), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 430 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(22), location: 802 }, Jump { location: 433 }, Load { destination: Relative(2), source_pointer: Relative(21) }, JumpIf { condition: Relative(2), location: 437 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(30) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(26) }, Const { destination: Relative(21), bit_size: Field, value: 50 }, JumpIf { condition: Relative(2), location: 479 }, Jump { location: 442 }, Load { destination: Relative(22), source_pointer: Relative(35) }, Load { destination: Relative(27), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(22) }, JumpIf { condition: Relative(28), location: 447 }, Call { location: 876 }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(34) }, Load { destination: Relative(28), source_pointer: Relative(31) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(18) }, Load { destination: Relative(29), source_pointer: Relative(32) }, Mov { destination: Direct(32771), source: Relative(27) }, Call { location: 882 }, Mov { destination: Relative(31), source: Direct(32772) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(5) }, Store { destination_pointer: Relative(33), source: Relative(21) }, Mov { destination: Direct(32771), source: Relative(31) }, Call { location: 882 }, Mov { destination: Relative(27), source: Direct(32772) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(34) }, Store { destination_pointer: Relative(33), source: Relative(28) }, Mov { destination: Direct(32771), source: Relative(27) }, Call { location: 882 }, Mov { destination: Relative(28), source: Direct(32772) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(12) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Store { destination_pointer: Relative(35), source: Relative(22) }, Store { destination_pointer: Relative(36), source: Relative(28) }, Jump { location: 517 }, Load { destination: Relative(12), source_pointer: Relative(35) }, Load { destination: Relative(22), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, JumpIf { condition: Relative(27), location: 484 }, Call { location: 876 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(34) }, Load { destination: Relative(27), source_pointer: Relative(29) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(31) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(18) }, Load { destination: Relative(28), source_pointer: Relative(31) }, Mov { destination: Direct(32771), source: Relative(22) }, Call { location: 882 }, Mov { destination: Relative(29), source: Direct(32772) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(5) }, Store { destination_pointer: Relative(32), source: Relative(7) }, Mov { destination: Direct(32771), source: Relative(29) }, Call { location: 882 }, Mov { destination: Relative(22), source: Direct(32772) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(34) }, Store { destination_pointer: Relative(32), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(26) }, Mov { destination: Direct(32771), source: Relative(22) }, Call { location: 882 }, Mov { destination: Relative(29), source: Direct(32772) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(27) }, Store { destination_pointer: Relative(32), source: Relative(28) }, Store { destination_pointer: Relative(35), source: Relative(12) }, Store { destination_pointer: Relative(36), source: Relative(29) }, Jump { location: 517 }, Load { destination: Relative(12), source_pointer: Relative(35) }, Load { destination: Relative(22), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, JumpIf { condition: Relative(27), location: 522 }, Call { location: 876 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(5) }, Load { destination: Relative(12), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(5), op: Equals, lhs: Relative(12), rhs: Relative(21) }, JumpIf { condition: Relative(5), location: 530 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(22) } }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(12) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(26) }, JumpIf { condition: Relative(2), location: 570 }, Jump { location: 544 }, Load { destination: Relative(2), source_pointer: Relative(35) }, Load { destination: Relative(8), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, JumpIf { condition: Relative(9), location: 549 }, Call { location: 876 }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(13) }, Load { destination: Relative(9), source_pointer: Relative(21) }, Mov { destination: Direct(32771), source: Relative(8) }, Call { location: 882 }, Mov { destination: Relative(12), source: Direct(32772) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(37) }, Store { destination_pointer: Relative(22), source: Relative(5) }, Mov { destination: Direct(32771), source: Relative(12) }, Call { location: 882 }, Mov { destination: Relative(8), source: Direct(32772) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(7) }, Store { destination_pointer: Relative(22), source: Relative(9) }, Store { destination_pointer: Relative(35), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, Jump { location: 610 }, Const { destination: Relative(2), bit_size: Field, value: 51 }, Const { destination: Relative(7), bit_size: Field, value: 52 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(9) }, Store { destination_pointer: Relative(12), source: Relative(21) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(7) }, Load { destination: Relative(2), source_pointer: Relative(35) }, Load { destination: Relative(7), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, JumpIf { condition: Relative(9), location: 588 }, Call { location: 876 }, Const { destination: Relative(21), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(13) }, Load { destination: Relative(9), source_pointer: Relative(21) }, Mov { destination: Direct(32771), source: Relative(7) }, Call { location: 882 }, Mov { destination: Relative(12), source: Direct(32772) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(37) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(26) }, Mov { destination: Direct(32771), source: Relative(12) }, Call { location: 882 }, Mov { destination: Relative(8), source: Direct(32772) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(7) }, Store { destination_pointer: Relative(22), source: Relative(9) }, Store { destination_pointer: Relative(35), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, Jump { location: 610 }, Load { destination: Relative(7), source_pointer: Relative(35) }, Load { destination: Relative(8), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 615 }, Call { location: 876 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Load { destination: Relative(9), source_pointer: Relative(12) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 623 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(8), location: 789 }, Jump { location: 626 }, Load { destination: Relative(8), source_pointer: Relative(7) }, JumpIf { condition: Relative(8), location: 630 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Load { destination: Relative(7), source_pointer: Relative(35) }, Load { destination: Relative(8), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 635 }, Call { location: 876 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(42) }, Load { destination: Relative(7), source_pointer: Relative(12) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 644 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(9), location: 776 }, Jump { location: 647 }, Load { destination: Relative(5), source_pointer: Relative(8) }, JumpIf { condition: Relative(5), location: 651 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Load { destination: Relative(5), source_pointer: Relative(35) }, Load { destination: Relative(7), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(8), location: 656 }, Call { location: 876 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(18) }, Load { destination: Relative(3), source_pointer: Relative(8) }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(8), source: Relative(15) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(16) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(17) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 676 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(8), location: 763 }, Jump { location: 679 }, Load { destination: Relative(3), source_pointer: Relative(7) }, JumpIf { condition: Relative(3), location: 683 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Load { destination: Relative(3), source_pointer: Relative(35) }, Load { destination: Relative(5), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 688 }, Call { location: 876 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(13) }, Load { destination: Relative(3), source_pointer: Relative(8) }, Mov { destination: Relative(5), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(5), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(8), source: Relative(23) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(24) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(25) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 708 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(8), location: 750 }, Jump { location: 711 }, Load { destination: Relative(3), source_pointer: Relative(7) }, JumpIf { condition: Relative(3), location: 715 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Load { destination: Relative(3), source_pointer: Relative(35) }, Load { destination: Relative(5), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 720 }, Call { location: 876 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(19) }, Load { destination: Relative(1), source_pointer: Relative(7) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(6) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 729 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(4), location: 737 }, Jump { location: 732 }, Load { destination: Relative(1), source_pointer: Relative(3) }, JumpIf { condition: Relative(1), location: 736 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, Load { destination: Relative(4), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(2) }, Load { destination: Relative(5), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(5), rhs: Relative(7) }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(4), rhs: Relative(8) }, Store { destination_pointer: Relative(3), source: Relative(5) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 729 }, Load { destination: Relative(8), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Load { destination: Relative(9), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, Load { destination: Relative(11), source_pointer: Relative(13) }, BinaryFieldOp { destination: Relative(12), op: Equals, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(12) }, Store { destination_pointer: Relative(7), source: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 708 }, Load { destination: Relative(8), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, Load { destination: Relative(9), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, Load { destination: Relative(12), source_pointer: Relative(15) }, BinaryFieldOp { destination: Relative(14), op: Equals, lhs: Relative(9), rhs: Relative(12) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(14) }, Store { destination_pointer: Relative(7), source: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 676 }, Load { destination: Relative(9), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, Load { destination: Relative(12), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Load { destination: Relative(14), source_pointer: Relative(22) }, BinaryFieldOp { destination: Relative(21), op: Equals, lhs: Relative(12), rhs: Relative(14) }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U1, lhs: Relative(9), rhs: Relative(21) }, Store { destination_pointer: Relative(8), source: Relative(12) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(9) }, Jump { location: 644 }, Load { destination: Relative(8), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(2) }, Load { destination: Relative(12), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(2) }, Load { destination: Relative(21), source_pointer: Relative(27) }, BinaryFieldOp { destination: Relative(22), op: Equals, lhs: Relative(12), rhs: Relative(21) }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(22) }, Store { destination_pointer: Relative(7), source: Relative(12) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 623 }, Load { destination: Relative(22), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(2) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(2) }, Load { destination: Relative(28), source_pointer: Relative(31) }, BinaryFieldOp { destination: Relative(29), op: Equals, lhs: Relative(27), rhs: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U1, lhs: Relative(22), rhs: Relative(29) }, Store { destination_pointer: Relative(21), source: Relative(27) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(22) }, Jump { location: 430 }, Load { destination: Relative(21), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(2) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(2) }, Load { destination: Relative(28), source_pointer: Relative(38) }, BinaryFieldOp { destination: Relative(29), op: Equals, lhs: Relative(27), rhs: Relative(28) }, BinaryIntOp { destination: Relative(27), op: Mul, bit_size: U1, lhs: Relative(21), rhs: Relative(29) }, Store { destination_pointer: Relative(20), source: Relative(27) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(21) }, Jump { location: 398 }, Load { destination: Relative(20), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(2) }, Load { destination: Relative(21), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(2) }, Load { destination: Relative(22), source_pointer: Relative(41) }, BinaryFieldOp { destination: Relative(39), op: Equals, lhs: Relative(21), rhs: Relative(22) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U1, lhs: Relative(20), rhs: Relative(39) }, Store { destination_pointer: Relative(19), source: Relative(21) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(20) }, Jump { location: 355 }, Load { destination: Relative(12), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(2) }, Load { destination: Relative(13), source_pointer: Relative(41) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, Load { destination: Relative(38), source_pointer: Relative(43) }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(13), rhs: Relative(38) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U1, lhs: Relative(12), rhs: Relative(41) }, Store { destination_pointer: Relative(11), source: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 308 }, Load { destination: Relative(5), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(2) }, Load { destination: Relative(22), source_pointer: Relative(41) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, Load { destination: Relative(37), source_pointer: Relative(43) }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(22), rhs: Relative(37) }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(41) }, Store { destination_pointer: Relative(3), source: Relative(22) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(26) }, Mov { destination: Relative(2), source: Relative(5) }, Jump { location: 261 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 872 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32773), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32774), op: Equals, bit_size: U32, lhs: Direct(32773), rhs: Direct(2) }, JumpIf { condition: Direct(32774), location: 886 }, Jump { location: 888 }, Mov { destination: Direct(32772), source: Direct(32771) }, Jump { location: 907 }, Const { destination: Direct(32776), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32776) }, Load { destination: Direct(32775), source_pointer: Direct(32775) }, Const { destination: Direct(32776), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32775), rhs: Direct(32776) }, Mov { destination: Direct(32772), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32775) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32775) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32772) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 905 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 898 }, IndirectConst { destination_pointer: Direct(32772), bit_size: Integer(U32), value: 1 }, Jump { location: 907 }, Return]"
  ],
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(y: u32) {\n    let foo_one = Foo { a: 1, b: [2, 3, 20], bar: Bar { inner: [100, 101, 102] } };\n    let foo_two = Foo { a: 4, b: [5, 6, 21], bar: Bar { inner: [103, 104, 105] } };\n    let foo_three = Foo { a: 7, b: [8, 9, 22], bar: Bar { inner: [106, 107, 108] } };\n    let foo_four = Foo { a: 10, b: [11, 12, 23], bar: Bar { inner: [109, 110, 111] } };\n    let mut x = &[foo_one];\n    x = x.push_back(foo_two);\n    x = x.push_back(foo_three);\n    x = x.push_back(foo_four);\n\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    if y != 2 {\n        x[y - 2].a = 50;\n    } else {\n        x[y - 2].a = 100;\n    }\n    assert(x[y - 2].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
