---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
struct Bar {
    inner: [Field; 3],
}

struct Foo {
    a: Field,
    b: [Field; 3],
    bar: Bar,
}

fn main(y: u32) {
    let foo_one: Foo = Foo {
        a: 1_Field,
        b: [2_Field, 3_Field, 20_Field],
        bar: Bar { inner: [100_Field, 101_Field, 102_Field] },
    };
    let foo_two: Foo = Foo {
        a: 4_Field,
        b: [5_Field, 6_Field, 21_Field],
        bar: Bar { inner: [103_Field, 104_Field, 105_Field] },
    };
    let foo_three: Foo = Foo {
        a: 7_Field,
        b: [8_Field, 9_Field, 22_Field],
        bar: Bar { inner: [106_Field, 107_Field, 108_Field] },
    };
    let foo_four: Foo = Foo {
        a: 10_Field,
        b: [11_Field, 12_Field, 23_Field],
        bar: Bar { inner: [109_Field, 110_Field, 111_Field] },
    };
    let mut x: [Foo] = &[foo_one];
    x = x.push_back(foo_two);
    x = x.push_back(foo_three);
    x = x.push_back(foo_four);
    assert(x[y - 3_u32].a == 1_Field);
    assert(x[y - 3_u32].b == [2_Field, 3_Field, 20_Field]);
    assert(x[y - 2_u32].a == 4_Field);
    assert(x[y - 2_u32].b == [5_Field, 6_Field, 21_Field]);
    assert(x[y - 1_u32].a == 7_Field);
    assert(x[y - 1_u32].b == [8_Field, 9_Field, 22_Field]);
    assert(x[y].a == 10_Field);
    assert(x[y].b == [11_Field, 12_Field, 23_Field]);
    assert(x[y].bar.inner == [109_Field, 110_Field, 111_Field]);
    if y != 2_u32 {
        {
            let i_3779: u32 = y - 2_u32;
            x[i_3779].a = 50_Field;
        }
    } else {
        {
            let i_3780: u32 = y - 2_u32;
            x[i_3780].a = 100_Field;
        }
    };
    assert(x[y - 2_u32].a == 50_Field);
    if y == 2_u32 {
        {
            let i_3781: u32 = y - 1_u32;
            x[i_3781].b = [50_Field, 51_Field, 52_Field];
        }
    } else {
        {
            let i_3782: u32 = y - 1_u32;
            x[i_3782].b = [100_Field, 101_Field, 102_Field];
        }
    };
    assert(x[2_u32].b == [100_Field, 101_Field, 102_Field]);
    assert(x[y - 3_u32].bar.inner == [100_Field, 101_Field, 102_Field]);
    assert(x[y - 2_u32].bar.inner == [103_Field, 104_Field, 105_Field]);
    assert(x[y - 1_u32].bar.inner == [106_Field, 107_Field, 108_Field]);
    assert(x[y].bar.inner == [109_Field, 110_Field, 111_Field]);
}
