---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 1",
    "private parameters indices : [0]",
    "public parameters indices : []",
    "return value indices : [1]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(1))]",
    "",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 24 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(4), source: Direct(0) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 30 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(2), source: Relative(5) }, BinaryFieldOp { destination: Relative(3), op: Mul, lhs: Relative(1), rhs: Relative(1) }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 29 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 24 }, Const { destination: Relative(1), bit_size: Field, value: 7 }, Return]",
    ""
  ],
  "debug_symbols": "tZPNCoQgFIXf5a5dqJVZrzIMYWUhiIXZwBC9++hQ4PzQzo145ONDLvds0Mt2HRtlhmmB+raBnjrh1GR82nYErVVaq7GJnwGHgxRvfpmFCXFxwjqoCS0pAmn6cOXEGwalJdQF3tEPnDN2sHnFYvSOgLC0+jKtnqfVV0n1FKfVk7/6jBWnPuPFtZ5n5cFyhq9RgjN8enFefvxl9+khrBKtlsfCD6vpov13z1l+VWG2Uyf71cpQiqgPYWg0R7TyWq9+AQ==",
  "file_map": {
    "50": {
      "source": "// ---\nfn new_concrete_c_over_d() -> C<D> {\n    let d_method_interface = get_d_method_interface();\n    C::new(d_method_interface)\n}\n// ---\n// Map<V>\nstruct B<T_C> {\n    new_concrete_t_c_constructor: fn() -> T_C,\n}\n\nimpl<T_C> B<T_C> {\n    fn new(new_concrete_t_c_constructor: fn() -> T_C) -> B<T_C> {\n        B { new_concrete_t_c_constructor }\n    }\n\n    fn get_t_c(self) -> T_C {\n        let new_concrete_t_c_constructor = self.new_concrete_t_c_constructor;\n        new_concrete_t_c_constructor()\n    }\n}\n// ---\n// PrivateSet<Note>\nstruct C<T_D> {\n    t_d_interface: MethodInterface<T_D>,\n}\n\nimpl<T_D> C<T_D> {\n    fn new(t_d_interface: MethodInterface<T_D>) -> Self {\n        C { t_d_interface }\n    }\n\n    fn call_method_of_t_d(self, t_d: T_D) -> Field {\n        let some_method_on_t_d = self.t_d_interface.some_method_on_t_d;\n        some_method_on_t_d(t_d)\n    }\n}\n// ---\nstruct MethodInterface<T_D> {\n    some_method_on_t_d: fn(T_D) -> Field,\n}\n// ---\n// Note\nstruct D {\n    d: Field,\n}\n\nfn d_method(input: D) -> Field {\n    input.d * input.d\n}\n\nfn get_d_method_interface() -> MethodInterface<D> {\n    MethodInterface { some_method_on_t_d: d_method }\n}\n// ---\nfn main(input: Field) -> pub Field {\n    let b: B<C<D>> = B::new(new_concrete_c_over_d);\n    let c: C<D> = b.get_t_c(); // PrivateMutable<Note>\n    let d: D = D { d: input }; // Note\n    let output = c.call_method_of_t_d(d);\n\n    output\n}\n// ---\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
