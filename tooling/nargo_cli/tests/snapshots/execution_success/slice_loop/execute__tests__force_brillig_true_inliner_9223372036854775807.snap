---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "points",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Point",
            "fields": [
              {
                "name": "x",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "y",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VavY7rRBQeJ3YSx3HsXQokOuAF7E2y2QZpiytR0lEi+eayHQ9A54IGiQpEzSPwBjwBDUj0iIIaHgCJO/fOyX7+fDLxaj2IjLSa8Zzj7/zMNzPHuxuZty15/RO5cez6CPqZ6TaR3bu+el6rR8SqQvkYXYCPkwvwcXoBPsYX4GMSwMc3DTe7ddqSyi6aTUpiTjcJsHSD1D1PQD7i4tcp2R0T/67aNqkS34j+b1LIbwD82xQwA+BXc4fzon3E51iEB5EJtk7bwHHe5hSbgVjEdhzG9j4ie4biNGR/aYJyqo7InvjD+ZFxLjrtoz8RyeK2H4fIkrYbh22L1z/vgh5zawJ6H8D4QzcOzMcm8L6u3vHELHPz1hyb5G0Kc5JXyfMC9UmWgixuu3aW7jkGO4glfiSk/757Llw/g3fk/VKxPyP7Hb+VOc5Lquinir69A99z48z9WA79LO+YoPu+EvxZGPyN8Afv86kSk9jPTXcPilzrjdHPqCMHTNDzuvbFhv7LWpekzzk4hZU8EStVZCHWNPbEjfZzRf8pa4pxB46tKk1/XTgOrlu1/lwcpdH3nW2F6eeS64B5oPjF1sLhyXmr2ZR4UB/HtiU095Hr7fOvFB/umSH7iO9VzE+gPX+spRdh8G8EPw2DX3ONify2XHxBazKHdZwavd4QOer/AJgfu3Fh+usWkwyxZyTDNeXz4FL3wyeuH2M/+L6JAtWIO/b1FE/4/IogjpF8qRLy5VPXWx596cYaz5iDyDPm4NyT40BnwpGDS4eHHESb4tuE9HFsW0Jzn7le4+Ac3psqc8zBqeKPD2votxzm2raYZPduvnpeq20OfgM/erlru7IMZPLNUJIM+a7xbwmxBby7jjwSv5BH2tk6UeLAeBOa+8L1Go9wnX1rX5o+dycDsDROajzCXNsWgyw0jzq5a7uyFciYRyuKH2VYp/pqS7GtnYW49nwW+r7RQtXBvFe0euH/cu9HEA+fx757/yvXa3uFcxedyR1/Q2J+eD3ux8nP2Trya/IpgTwMqSNF/zvA/MaNNV7MKG48I+5HibnenfIV/ZiQTHS/Jf9C/T7nGnAN2cqU/H7vesvDPOr6GKie2fjqAcwL2uf9pO1FyX1BMeK7Wh3H59iCnlFXMLVzi/3VfpeDnJc76Kl7Ces8DZf9yBQ/tPNE5leKPtYAYl9yiXf1aoDtuZIDn22fr7mijz5k5CvazkmGMfI9iJj8TZCbfvyyh9YgC3E/ye+18X5aKzFOSB/HtiU096PrtftJyznO8f20UvzxYWUKllbLYa5ti0EWupbr5K7tykqQcS1XQvyyb7R9VEBszM0QPJJcIo8yxdeJ6a8p7tmE5n5yvcYj/K6aKnPMo0Lxx4elcVLjEebathhkoXnUyV3blQ3lkZxpWj24JBneV3xW+77Pz91X8i7+DjFkPvd3b7n7xleHL7UltxjkqP+Le0YuSf+cf8x52Df1w6Z5aHbNq1fbQ8M1mYHcZQHsN/vN3eFme9i/3G2aze1Z+8L/zt9y2+47GcpIB/EEC/82mg3AyjxYqQdrORDLZxt9jQl/5Z5nJ/BT0s/dM/6deq74kxD+7+bRzt+kI5h/gM6fIhPd9tEGr90aZYo+nrOsL7Fam3+5OdnXBdgZ+/vglN/IBbGv5SA60SMWzomtJWGNfQeMuSY+rPVALMknrq8d/yNy1wda6xuOQb5pME60L/6UYfw5cq8A21pOxf4Y3BNb/xX3tNh83EN95p6GVQzEknxqfMvD5GDD57o5kQO0j894rmv/58RndhZ1cbR84R0md5HwqgTZkmRXIFuRv9dt31/EKsjfa/JX7l6N86Vif0320ZZmn+/lK0X/StG3XIkppzPlXVxfyWmIWuuwu3152O6a6vPaPt6cq7X+BYLVYkAJMQAA",
  "debug_symbols": "tZrbqiIxEEX/pZ/7IVVJVRJ/ZRgOXtpDg6h4GRjEf59uUeeMyhw2sl/EaK1F0kklNKlTs+hmx8+Pfr3c7JvJj1Oz2synh36zHlqnc9vMdv1q1X9+fP25CeOH2SV+v52ux+b+MN0dmklM2jbdejF+KwO/7FddM7Fw/tk25jCRYaLAREUJDzAhMKEwAY88v+5VrlcihfhIKExEmEgwYTDhMJFhosBERYkSYOLlnJvGK2FD2AOhMPHy6Vr1G1HzI5Fh4uXTdb2N3O2fkbdPoeJyixXXdA9OftFXqr4Grl64euXqI1efuHrj6v1tffK73sOjPnP1hauvVL2EQPYL2a9kPzdzJSSy38h+J/sz2V/Ifu6pKxLIfnL+Cjl/JZL9iew3st/J/kz2Y/l7QSqMqOCI4sjLtVqCXZGi+ZtnVW6hUvzJnqh2o9r9TbveQ1XkyZ6p9kK1V6Y9BqpdqHal2iPVTl2R6e1Z1XKzx/pk/25W43OHFEcijiQcMRzhTh11M0nUzcSom4lRNxOjbiZG3UwsMdPdjGp3qh2+JxH8okTwmxLBr0rEI44kHDEccRzJOFJwBLubgF+dcyD7hexXsj+S/YnsN7Lfyf78tv+/r+bgbSHur1x/CWS/kP1K9keyn5y/hZy/hZy/JZP9hewnn7+VfP5W8vlbyflbyflbE9lvZL+T/eTzt5LP3wrX9mgIOAJWdJ2H1q/prp/OVt214G95XM+/1P8dfm+7h1LA7W4z7xbHXTcWBf6tBxwTRGMb49CRcTGrxFa9jIMfB6IhtRrq2JTLv6FV0aEHQy/+AA==",
  "file_map": {
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "struct Point {\n    x: Field,\n    y: Field,\n}\n\nimpl Point {\n    fn serialize(self) -> [Field; 2] {\n        [self.x, self.y]\n    }\n}\n\nfn sum(values: [Field]) -> Field {\n    let mut sum = 0;\n    for value in values {\n        sum = sum + value;\n    }\n    sum\n}\n\nfn main(points: [Point; 3]) {\n    let mut serialized_points = &[];\n    for point in points {\n        serialized_points = serialized_points.append(point.serialize().as_slice());\n    }\n    // Do a compile-time check that needs the previous loop to be unrolled\n    if serialized_points.len() > 5 {\n        let empty_point = Point { x: 0, y: 0 };\n        serialized_points = serialized_points.append(empty_point.serialize().as_slice());\n    }\n    // Do a sum that needs both the previous loop and the previous if to have been simplified\n    assert_eq(sum(serialized_points), 21);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
