---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
struct Point {
    x: Field,
    y: Field,
}

impl Point {
    fn serialize(self) -> [Field; 2] {
        [self.x, self.y]
    }
}

fn sum(values: [Field]) -> Field {
    let mut sum: Field = 0_Field;
    {
        let ___i0: [Field] = values;
        for ___i1 in 0_u32..___i0.len() {
            let value: Field = ___i0[___i1];
            {
                sum = sum + value;
            }
        }
    };
    sum
}

fn main(points: [Point; 3]) {
    let mut serialized_points: [Field] = &[];
    {
        let ___i0: [Point; 3] = points;
        for ___i1 in 0_u32..___i0.len() {
            let point: Point = ___i0[___i1];
            {
                serialized_points = serialized_points.append(point.serialize().as_slice());
            }
        }
    };
    if serialized_points.len() > 5_u32 {
        let empty_point: Point = Point { x: 0_Field, y: 0_Field };
        serialized_points = serialized_points.append(empty_point.serialize().as_slice());
    };
    assert(sum(serialized_points) == 21_Field);
}
