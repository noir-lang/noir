---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "",
  "hash": "17498422866154132562",
  "abi": {
    "parameters": [
      {
        "name": "points",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Point",
            "fields": [
              {
                "name": "x",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "y",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "16761564377371454734": {
        "error_kind": "string",
        "string": "Array index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndrRSiMxFIDhd5nrXuQkJ8k5vsoiUnWUQmml1oVFfPedkdaVabby50aM9MNh/rQk6bwPj+P92/PdZve0fx1ufr0P2/3D+rjZ76bR+8dquD9sttvN8933Pw9h/lHD5+tfX9a7efh6XB+Ow03SuBrG3eP8m03+abMdh5scPm5XQ01NUf0kNKSl0JbIMZ1Enl62EBkLawovZ+F1KZwKa96rkvUkipWlECwiFgkLxSJjUbCoWBgWToXj5o6bO27uuLnj5o6be7t5PH8ylLz8ZPCKhWHhVEgInAgnkZPEiXKSOSmcVE6ME15feH3h9YXXF15feH3h9YXXF55SeMrYTGkhn4jFekGEk8hJ4kQ5yZwUTion9gNJckEckxQ4EU4iJ0oX3ZIyJ4WTyolx4pho4EQ4iZwkTnh95fWV11deX3l95fUzr595/dysr+G84NUULkjiRDnJnBROKifGiWNSAifCCa9feP3C6xdev/D6hdcvRg+CpDgm/zmgukqEk8hJ4kQ5yZwUTionvH7l9Y3XN17feH3j9Y3XN17feH3j9Y3XN1w/tk9IYrQTickvSOJEOcmcFE4qJ8aJY9I+IblOhBNeX3h94fWF128fd0zrlPPsn9Yf+oW0fKL2UcS0hihfqIQLFHtQ6bm82oO6boR3oPbu/yckPSj2oNSDtCNu++jgJ1R6UO1B1oO8A2noQT1vQu15E2rqQT0zQntmhPbMCO2ZEdozI7RnRuSeGZF7ZkR7Dz8t8M7m4tu02N7DXyeVE+PEMWnv4a8T4SRykjhRTnj99u46fh0rTyuqJal8jdXexF7/L8pJ5qRwUjnpuMmOifHlsvGUBpfLH9Po9/qwWd9vx9NjQk9vu4dvTw0d/7yMiweIXg77h/Hx7TDOjxL9e4ponkUxrVKaLmSeHtFllbTczl/ATkPxuBKv81A+h7aKIUxXMF3FXw==",
  "file_map": {
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "struct Point {\n    x: Field,\n    y: Field,\n}\n\nimpl Point {\n    fn serialize(self) -> [Field; 2] {\n        [self.x, self.y]\n    }\n}\n\nfn sum(values: [Field]) -> Field {\n    let mut sum = 0;\n    for value in values {\n        sum = sum + value;\n    }\n    sum\n}\n\nfn main(points: [Point; 3]) {\n    let mut serialized_points = &[];\n    for point in points {\n        serialized_points = serialized_points.append(point.serialize().as_slice());\n    }\n    // Do a compile-time check that needs the previous loop to be unrolled\n    if serialized_points.len() > 5 {\n        let empty_point = Point { x: 0, y: 0 };\n        serialized_points = serialized_points.append(empty_point.serialize().as_slice());\n    }\n    // Do a sum that needs both the previous loop and the previous if to have been simplified\n    assert_eq(sum(serialized_points), 21);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
