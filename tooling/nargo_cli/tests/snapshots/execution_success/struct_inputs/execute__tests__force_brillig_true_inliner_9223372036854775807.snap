---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "struct",
          "path": "myStruct",
          "fields": [
            {
              "name": "foo",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            },
            {
              "name": "bar",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "message",
              "type": {
                "kind": "string",
                "length": 5
              }
            }
          ]
        },
        "visibility": "public"
      },
      {
        "name": "z",
        "type": {
          "kind": "struct",
          "path": "foo::bar::barStruct",
          "fields": [
            {
              "name": "val",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "array",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "message",
              "type": {
                "kind": "string",
                "length": 5
              }
            }
          ]
        },
        "visibility": "public"
      },
      {
        "name": "a",
        "type": {
          "kind": "struct",
          "path": "foo::fooStruct",
          "fields": [
            {
              "name": "bar_struct",
              "type": {
                "kind": "struct",
                "path": "foo::bar::barStruct",
                "fields": [
                  {
                    "name": "val",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "array",
                    "type": {
                      "kind": "array",
                      "length": 2,
                      "type": {
                        "kind": "field"
                      }
                    }
                  },
                  {
                    "name": "message",
                    "type": {
                      "kind": "string",
                      "length": 5
                    }
                  }
                ]
              }
            },
            {
              "name": "baz",
              "type": {
                "kind": "field"
              }
            }
          ]
        },
        "visibility": "public"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1bO48jRRCusWfGO37seHfvuL1/YZ/X6yVzcMu9kO6FdC9AMrtYwK+YgIiUlISEgIiIkJAYiYCIkAyJAJHj1nV5PtfUDLY8ja9P25LVM11fV1V/XV3dM7YDel1uLj6BvQ5t3aFiYczU1oPtyrBGXQOXfgae+Nmo0U/jW0Ru57/pgNe6fQw98DHywMfYAx9b5Mc636N613mDVkvd/iYezH2b/MqdHQ847XrgY88DH/c98DElP3Jnn/zKnQcezP0h+ZU7jzzg9JoHPl73wMd3PPDxBvmRO4+p3nXO5aZ02JRjaDNJ1jwsmocxkxzMw4Q5rJuDsDlcmsObORCZA4fZ0M2GaTYkk+xNAjUJyix6s6hM0JqguGFtBNIJaDu2F4m9b4C8xofXYSLs1qn/bDD+NKHVUrP/o8Tq7DrRP3yX9ffc+D9oWT23s1w/joXtNm19nuVcnmerPjHmDmDuACYAzF3A3C3B3APMvRLMfcDcL8E8AMyDEsxDwDwswTwCzKMSzGPAPC7BPAHMkxLMU8A8LcE8A8yzEsxzwDwvwbwAzIsSzEvAvCzBvALMK4HpwTWX2xbDMjxQngtZE2TvWRmvDX5xW2/uOJk4XntjHlsXxsb8sO19N7ZPA2GPKOcYZWy/TS7z3OsXzWiP/ZH8cIws81KW+xMKWZgVx8GyCGTcZvbUjwEnY6srZHhYf9/q43mLqX6eFjF56Tgmb+0wJkdvY0zGQhZmxXFsGpMYW+wHz03LAReLuJtf5UK/4q4lZGFWHMemcYexJXPhHuXlA6uP5y1xwNPibD++yoV+xWQiZGFWHMemMYmxJXNh2wEXi7i7OheSX3HXFrIwK45j07jD2JK5EH9A8mGW6/gc9H0h7H4EduVcu3j3sojj5Vmy6UD/wL5s1vwnGGMro2VhWRPaeD6Wc4F4IUtAFmardtr2PgQ7qIv9iAT+M3uf2jqGPty/r9iPhf0Vv5U25EjqaiptjDdnwZm97tiPia/UKtJylflM7f1gq3J6puWjGvUv9/jUjf4L1t93o3/OOeGA8iLX9yG07yKXs/228NVVLj8U/kh+MJcb2ZHia1+RyRg/UuwcKXY0Xfs16krfUF0c8ykV+eP5cHzeGARiXCGMA232YDySB742JRJtX9ra5MTrQd4HdSJ3vQruDhR/5D3b3wNZJGSM/crWWo6rk2PMLyRsJYq/LtZ8qnCNZ3e2r8WijPm+oiuu0IX9sS/eRxV2I4H9mla5c5S/1Xk7FLZdPftW5Wqct57guq/4WqUrrtCVKLpI9IsUu4mQMfYb+l+4U+etJ2zHMJ667EpbkcKxjGnGfiv822VMO+BmuA43SQk33wn/dpGny3yMQCbXBGO/F/7vIu6J9L0wEL6gn4HQN63Jz0DYCxX/0H4k8D8IP11811PGJ9tKFY7kmc3Rc/2Svwj4ayo22beGwi1+dyZj+Udba2e2APo1lbaqM1tQwV0ouIsccxcr3EUV3GGMxQp33PYT1cddSOtxJ+PO1Xpgu4nCXUzl3OE5IlG447afqT7utLjTfgMRlNRsh0rsaN+tmDK19WC7MuxTcZ4TYdvVPuJ4ny28X8exmDj6BdoD4Dyi4rtn9DMS+EaQ6/zVtqUwHrSB/Vn2m+A7cMS3ts9Urfe28Mv1PsN5aN19BvMWXyO/3Pa7retY721ajzuZK138dgm50/bosIK7dffoP6g+7lznyqpcJn97JnPBn8I3toO5APvKXMD4f0DnX/Y6VfrLXMCyv229y1zQU2zzc3eHqnObjEeinL82tEkuYgWPMcp4to2xHa+h66DCdkvBxxW20a9Wie0Q2qqeO0LFp6YyNi225frmfjgO1Mvvy7S1wH1xLVTFbdU8Yy7edJ67wrbGhat5lrY3nWf0Vc5zU/GpoYxNm2e5zrgfjgPPKXKeu4pNPP8sz9nZqs2pbR9sUSZn+R8h+HtczqmyhCBH/DWrAPderrf58/p8MhvOR7P5bDy7vDy5mMmcSMBXx4H92WR0dnHr5GLyyXg0G53+p/1/AdjGPIbNQgAA",
  "debug_symbols": "zZvdauMwEIXfxde50Mxo9NNXWZaStm4JhKSk6cJS+u4rZ+M2xMZwcMbVTalLvi+HHo0cx/ijeWof3l/uN7vn/Vtz9+uj2e4f18fNfleOPj5XzcNhs91uXu4v/9y47ge5eALeXte77vjtuD4cmztWt2ra3VP3GxXB82bbNnfKn79XBUk4kmGEHI4QjjCOCI54HFEcCTiCt094+4S3z3j7jLfPePuMt894+4y3z3j7jLfPePuMty94+4K3L3j7grcv4+3HfEbEySWyGrw0Sm+PqgO7mtqDqT2a2tNMe6JwfmmSOLBnS7t3pnaaa/fU24fr3bOpXW73nxmxe1O7mtqDqT2arkjTWfWms6rOcr2r6awqW64ZNZ1VNZ1VNZ1VHZ1VCfGMeDc4nWnEkYQjGUaCwxHCEcYRwRGPI4ojo+171h5RGSARRxKOZBiJo+0ryRlRHiKEI4wjgiMeRxRHAo5EHEk4kmEk4e0nvP2Et5/w9tN4+5J6RNP0js/efV0Gerrw/9errT7Y6qOtPtnqs6k+O1s92ep5tt7Ll17jtV5s9d5Wr7b6YKuPtvpkq8+WenbzpzbkL332F3rktacoVE8UrieK1BMlLRiljG1/yV5GjK6iEC0aJfdXsWVlhOso2Fo5IYIjHkfGd+3IZyRQnnHG5PH7bLfTR1t9stVnU/34fcHb6clWz7Z6ma2fOmOO38e8nV5t9cFWH231yVafTfXibPXzp/ZWnxSE64ki9UQJC0aZ/vwkedEoU5+fPDYVJ4RwhHFEq6nLL7lyyjXhd12Ds6uP9URJ9UTJi0ah+D1PehVFXT1RqJ4o/GNrJUwPPjvfD3656LmOLdXs0+rriaL1RKnnOxHNC0aZ3g6DqycK1RNl0W8VJ7fDIPVE8fVE0R9bK3NOEiEsugdNbYch1hMl1RHlsxz8WR8264dte34Q5fl993jxXMrx72t79YjK62H/2D69H9ruYZXv51S6qc1+Rc7/7h4nKUdczggcQ3dIp8NYDnN50/LG/wA=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "52": {
      "source": "mod foo;\n\nstruct myStruct {\n    foo: u32,\n    bar: Field,\n    message: str<5>,\n}\n\nfn main(x: Field, y: pub myStruct, z: pub foo::bar::barStruct, a: pub foo::fooStruct) -> pub Field {\n    let struct_from_bar = foo::bar::barStruct { val: 1, array: [0, 1], message: \"hello\" };\n\n    check_inner_struct(a, z);\n\n    for i in 0..struct_from_bar.array.len() {\n        assert(struct_from_bar.array[i] == z.array[i]);\n    }\n    assert(z.val == struct_from_bar.val);\n\n    assert((struct_from_bar.val * x) == x);\n\n    assert(x != y.bar);\n\n    assert(y.message == \"hello\");\n    assert(a.bar_struct.message == struct_from_bar.message);\n\n    a.bar_struct.array[1]\n}\n\nfn check_inner_struct(a: foo::fooStruct, z: foo::bar::barStruct) {\n    assert(a.bar_struct.val == z.val);\n    for i in 0..a.bar_struct.array.len() {\n        assert(a.bar_struct.array[i] == z.array[i]);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
