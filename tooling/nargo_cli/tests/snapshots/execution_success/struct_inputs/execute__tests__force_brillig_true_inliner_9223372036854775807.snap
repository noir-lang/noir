---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "struct",
          "path": "myStruct",
          "fields": [
            {
              "name": "foo",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            },
            {
              "name": "bar",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "message",
              "type": {
                "kind": "string",
                "length": 5
              }
            }
          ]
        },
        "visibility": "public"
      },
      {
        "name": "z",
        "type": {
          "kind": "struct",
          "path": "foo::bar::barStruct",
          "fields": [
            {
              "name": "val",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "array",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "message",
              "type": {
                "kind": "string",
                "length": 5
              }
            }
          ]
        },
        "visibility": "public"
      },
      {
        "name": "a",
        "type": {
          "kind": "struct",
          "path": "foo::fooStruct",
          "fields": [
            {
              "name": "bar_struct",
              "type": {
                "kind": "struct",
                "path": "foo::bar::barStruct",
                "fields": [
                  {
                    "name": "val",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "array",
                    "type": {
                      "kind": "array",
                      "length": 2,
                      "type": {
                        "kind": "field"
                      }
                    }
                  },
                  {
                    "name": "message",
                    "type": {
                      "kind": "string",
                      "length": 5
                    }
                  }
                ]
              }
            },
            {
              "name": "baz",
              "type": {
                "kind": "field"
              }
            }
          ]
        },
        "visibility": "public"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1cO3MjRRCe1e5KWsk6yZLN3fEHSKBqdfKLzMGZe1F1L6ruBVQJGxfwKzYgJCQkIiInJSEhICLiBxBRRUBEjqZuWvr0qXeRyzs2c+WpUs1quqf7m296emZXa0fmdbk5+0TuOnF116wW0Tl0dX6+Mq7RVu4TZxQIzkaNOC221Pid/9gDr3VjTALAmAaAsRkAxpYJY523Tb3rvGGWS914swDmvmPCyp3dADjdCABjLwCM1wLA2Ddh5M6BCSt3bgYw90MTVu4cBcDpVgAYtwPA+FYAGK+bMHLnDVPvOpdykwHbcgPabJK1N4v2ZswmB3szYQ/r9iBsD5f28GYPRPbAYTd0u2HaDckme5tAbYKyi94uKhu0NiiuOx8Rg4A2QZm57w2Q13jzOs7Ib532D/LdzzOzXGrGP8mczQ0v9sfvi/2eH/x5y9m5XSzs41jEb+zqo2LB5VGxjEl07oDOHdCJQOcu6Nwt0bkHOvdKdO6Dzv0SnQeg86BE5yHoPCzReQQ6j0p0HoPO4xKdJ6DzpETnKeg8LdF5BjrPSnSeg87zEp0XoPOiROcl6Lws0XkFOq9IpwfXUm47HZHhgfKIZDHIPnAyWRvy4Lbe3LGz73nt7crYNmBswo/4vubH915E/oxZcIwy8d8xPvPc6wfN6E/wMD8SI/O8VCzwJCRLitVxiCwFmbTZPfVT0OPY2iAZHtY/dPZk3pqmfp5mMXniOSZvXWJMTt7EmGySLClWx3HWmMTYEhwyNy0PXMzi7vQqF4YVdy2SJcXqOM4adxhbnAvbZlE+cvZk3jIPPM3O9rtXuTCsmMxIlhSr4zhrTGJscS7seOBiFndX50ITVtx1SJYUq+M4a9xhbHEuxBdIPi4WNr4Ee1+R30/AL8+1j2cvszienyVjD/Zz97BZw29gjK3CzIvIYmiT+ZjPBeqTLANZUiz76bjvCfhBW4IjJf0v3Pe+q5vQR/oPFP9N8r+EW2lDjthWrLSJvj0LTt11131sfL3jDGm5yn4O3ff8XGXvQMtHNdqf7/F9P/aPxf7Aj/1TyQmbZlF4fQ+h/TJyufjvEFZfuXxIeJgfzOVWNlKwDhQZx/hI8TNS/Gi2rtVoq/8/tSUx3zer/Mm5yvN5I49oXAmMA332YDzMg1zbklLb1662OfG9aNEHbSJ3vQruMgWPxl2HuOt75m6gcNev4A5znVwjd9L2jamPu86a3DWJu4Fn7oYKd4MK7jBXDxXupO1bUx93zTW5axF3nvaVnHMPcjes4A5zz0jhTtq+M/Vx11LwMF/ivw2ylGSi+72rff8uhzwy/r4yNs7XbU+4eB5w7tsKtw2FJ5yHlNp+cLU29y3oFyttVfma14aP56Q5nHG0fVnDo61jXCf2s6XYalbYwv7YF7+nFX5T0v3RLHO3bbxwp8b8Nvn29awvIn/IddW+v6VgrbJVlcszxZahfqniNyOZ6P5kLoS7ylzFv4eZGv2yr1ThmGNadH8mfJcZ0x64Ga/DTVbCzS+Eb3SB3GDe1DCmIOM1Ibq/Ev7LiHtj9HNERFgQZ0T2DmvCGZG/RMGH/lPS/41w+vhtu4xP8dVXONokXJ6eY875S4G/WPEp2BoKt/iuAMfy767WzjwR9IuVNj7zbCp4tHdvopJa/JgSP5kyNlsOXZ2fr4wHZnWexZfEAMZfQrh8/NaIMaCde9FnE/ji3FN17v3D1VoM4P4QK20cA4mCx/favejfxHAstv7TLHPWAJ5jpS/vi6L/drSw+Zdr65vytc658m/iO/LEt5YrI8KLMn4m5TtXSgyumysxZuUa+ZW2f1xdR67sKHjqzJXr5DIcN8+R73t4yVtl9/AJjIfzHL5XzecvGbA2Rwlxx21Vc4Tv9+Ga5VyQkM8YcMZKX84Fot+DXNBy132lP+cCkXWd4DJzQU/xLfeOXVOd26r2nw60MRdtRR/3HdHX1kB7DVubFb4zRb9d4Vu7H2LfiVmNX+7L60XaY2VsWl5IyJb0w3GgXXy/KyrxiWuhKm6ruNbW5rpcy36rxVi2hq2qee4q+lmFb8TVLfGN86zNG8sQU0MZmzbPvM6kH44Dzyk8zxuKTzz/zMdSLPs8dO35Ocr+weKPl+TdC8mpXBKQo/67zgDmdanP8w8nTven49PJ9HS6Oz052Tmeck40wFfXg//p/uTg+NbO8f5nu5PpZO8//f8LB3ZWkYFGAAA=",
  "debug_symbols": "zZvdauMwEIXfxde5kOZHGvVVlqWkrVsCISlpurCUvvvaISYlNoZDVs7clKr4mxzyaWTXQl/NS/v0+fa42b3uP5qHX1/Ndv+8Pm72u2709b1qng6b7Xbz9vjzz03of8SQT8DH+3rXjz+O68OxeSANq6bdvfS/xa7A62bbNg9K379XHWI4UmAkBhyJOEI4wjgiOKI4knAEtx9x+xG3T7h9wu0Tbp9w+4TbJ9w+4fYJt0+4fcLtM26fcfuM22fcPuP2GbfPuH3G7TNun3H7gtsX3L7g9gW3L7h9we0Lbl9w+4LbF9y+4vYVt6+4fcXtK25fcfuK21fcvk7bz+WMcOCfyGp0aeahelYdVS81q6dQtXqsWp1urZ5lqF5sVJ2rVpeq1bVq9VS1eq5a3apWLzWr51t71WI6X2qcR9Vj1epUtfqtvWoSh+rj9T1L1er6/76ZieqpavVctbpVrV5qzkir2qtWtVeNas53q9qrJjXnjFXtVavaq1a1V22yVznlMyJh9PhmBUZKwJGII4QjjCOCI4ojCUcyjkzaF9IBUR4hBUUoBByJODJpXyOfEaUxwjgiOKI4knAk44jhSIGR6V2PeSTiCG4/4vYjbj/i9qd3PZRtQNTmV3ySNNwdSIpcLoauPUXJfqKYnyjFTZTpXaVKUbpbzPAI19064nWU6CcK+YnCfqKInyjqJ0ryEyW7icJ+OoiXnStl+G+pe6JM11GwuXJCMo4YjhQYkYAjEUcIRxhHBEcUR3D703uSmumMpFiWelKY3uu8T5TiJsr03mylKPPr3PSe732ikJ8o7CeK+ImifqIkP1GymyjJz7qSlu2gueenhHXQCVEcSThS3OjKS86c7t3sRVfk6yjRTxTyE4UXjRLzpZ/0Oor4iaJ+oqS7zZU03/jd9sHQ+N2r1evY2c06nc1PlOImivl5J2JLvlWcXw5N/ERRP1EW3cOZXQ4t+4lifqKUu82VW24SZdn9nrnlsEQ/UchHlO9u8Gd92Kyftu35oOLr5+75x7nF49/39uoI4/th/9y+fB7a/jDj5Rxjv8IXWcUgv/vjht2Iiq44hH7Yf/UcYjfk7kO7D/4H",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "52": {
      "source": "mod foo;\n\nstruct myStruct {\n    foo: u32,\n    bar: Field,\n    message: str<5>,\n}\n\nfn main(x: Field, y: pub myStruct, z: pub foo::bar::barStruct, a: pub foo::fooStruct) -> pub Field {\n    let struct_from_bar = foo::bar::barStruct { val: 1, array: [0, 1], message: \"hello\" };\n\n    check_inner_struct(a, z);\n\n    for i in 0..struct_from_bar.array.len() {\n        assert(struct_from_bar.array[i] == z.array[i]);\n    }\n    assert(z.val == struct_from_bar.val);\n\n    assert((struct_from_bar.val * x) == x);\n\n    assert(x != y.bar);\n\n    assert(y.message == \"hello\");\n    assert(a.bar_struct.message == struct_from_bar.message);\n\n    a.bar_struct.array[1]\n}\n\nfn check_inner_struct(a: foo::fooStruct, z: foo::bar::barStruct) {\n    assert(a.bar_struct.val == z.val);\n    for i in 0..a.bar_struct.array.len() {\n        assert(a.bar_struct.array[i] == z.array[i]);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
