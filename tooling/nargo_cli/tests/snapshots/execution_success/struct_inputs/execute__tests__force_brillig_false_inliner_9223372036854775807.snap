---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "struct",
          "path": "myStruct",
          "fields": [
            {
              "name": "foo",
              "type": {
                "kind": "integer",
                "sign": "unsigned",
                "width": 32
              }
            },
            {
              "name": "bar",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "message",
              "type": {
                "kind": "string",
                "length": 5
              }
            }
          ]
        },
        "visibility": "public"
      },
      {
        "name": "z",
        "type": {
          "kind": "struct",
          "path": "foo::bar::barStruct",
          "fields": [
            {
              "name": "val",
              "type": {
                "kind": "field"
              }
            },
            {
              "name": "array",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "message",
              "type": {
                "kind": "string",
                "length": 5
              }
            }
          ]
        },
        "visibility": "public"
      },
      {
        "name": "a",
        "type": {
          "kind": "struct",
          "path": "foo::fooStruct",
          "fields": [
            {
              "name": "bar_struct",
              "type": {
                "kind": "struct",
                "path": "foo::bar::barStruct",
                "fields": [
                  {
                    "name": "val",
                    "type": {
                      "kind": "field"
                    }
                  },
                  {
                    "name": "array",
                    "type": {
                      "kind": "array",
                      "length": 2,
                      "type": {
                        "kind": "field"
                      }
                    }
                  },
                  {
                    "name": "message",
                    "type": {
                      "kind": "string",
                      "length": 5
                    }
                  }
                ]
              }
            },
            {
              "name": "baz",
              "type": {
                "kind": "field"
              }
            }
          ]
        },
        "visibility": "public"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _26",
    "private parameters indices : [_0]",
    "public parameters indices : [_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24]",
    "return value indices : [_25]",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "EXPR [ (-1, _8) (1, _16) 0 ]",
    "EXPR [ (-1, _9) (1, _17) 0 ]",
    "EXPR [ (-1, _10) (1, _18) 0 ]",
    "EXPR [ (-1, _9) 0 ]",
    "EXPR [ (-1, _10) 1 ]",
    "EXPR [ (1, _8) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(2))], q_c: 0 })], outputs: [Simple(Witness(26))]",
    "EXPR [ (1, _0, _26) (-1, _2, _26) -1 ]",
    "EXPR [ (1, _3) -104 ]",
    "EXPR [ (1, _4) -101 ]",
    "EXPR [ (1, _5) -108 ]",
    "EXPR [ (1, _6) -108 ]",
    "EXPR [ (1, _7) -111 ]",
    "EXPR [ (1, _19) -104 ]",
    "EXPR [ (1, _20) -101 ]",
    "EXPR [ (1, _21) -108 ]",
    "EXPR [ (1, _22) -108 ]",
    "EXPR [ (1, _23) -111 ]",
    "EXPR [ (-1, _10) (1, _25) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZTNjoMgEIDfhTMHfkX7KptNg4oNCUFDdZON8d13FNjWgx7sxU8YPnBkYEatqafH3fquf6Lb14zqYJ2zj7vrGz3a3kPvvGCUm/cxGANd6C0O1qCD8SO6+ck5jH60m7ZBz0H7jaMOECUYGd8CYcLOOrO+Lfhlk2OVqSrJnPB/XbKdT499xfPiSsoLfkmL5JdcXfEFzb6kn61/7J/8P16o5AsiL/iCyexLfsGXlCdfsks+L7MvyyO/OqkfUeQCYqISrxn2G3BWgYTkLWCE8oMZzlJQLPkFrQ5LgH2cA7+Uwzc0dGPD7uCjAgZipGAERuX2rODzMaIkgsJ5AjAoSwCPENtOUBlRRKiIMqKKmTKSSBNZIl+5rIkEq2tn0i3UTb55u5TG3yFH8rU1hL4x7RTMmscWg8z+AA==",
  "file_map": {
    "52": {
      "source": "mod foo;\n\nstruct myStruct {\n    foo: u32,\n    bar: Field,\n    message: str<5>,\n}\n\nfn main(x: Field, y: pub myStruct, z: pub foo::bar::barStruct, a: pub foo::fooStruct) -> pub Field {\n    let struct_from_bar = foo::bar::barStruct { val: 1, array: [0, 1], message: \"hello\" };\n\n    check_inner_struct(a, z);\n\n    for i in 0..struct_from_bar.array.len() {\n        assert(struct_from_bar.array[i] == z.array[i]);\n    }\n    assert(z.val == struct_from_bar.val);\n\n    assert((struct_from_bar.val * x) == x);\n\n    assert(x != y.bar);\n\n    assert(y.message == \"hello\");\n    assert(a.bar_struct.message == struct_from_bar.message);\n\n    a.bar_struct.array[1]\n}\n\nfn check_inner_struct(a: foo::fooStruct, z: foo::bar::barStruct) {\n    assert(a.bar_struct.val == z.val);\n    for i in 0..a.bar_struct.array.len() {\n        assert(a.bar_struct.array[i] == z.array[i]);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
