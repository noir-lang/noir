---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "to_hash",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "array",
            "length": 10,
            "type": {
              "kind": "field"
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "enable",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 3,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _117",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21]",
    "public parameters indices : []",
    "return value indices : [_22, _23, _24]",
    "BLACKBOX::RANGE [_20]:1 bits []",
    "BLACKBOX::RANGE [_21]:1 bits []",
    "EXPR [ (-1, _25) 184467440737095516160 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_0, _1, _2, _25] [_26, _27, _28, _29]",
    "EXPR [ (1, _3) (1, _26) (-1, _30) 0 ]",
    "EXPR [ (1, _4) (1, _27) (-1, _31) 0 ]",
    "EXPR [ (1, _5) (1, _28) (-1, _32) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_30, _31, _32, _29] [_33, _34, _35, _36]",
    "EXPR [ (1, _6) (1, _33) (-1, _37) 0 ]",
    "EXPR [ (1, _7) (1, _34) (-1, _38) 0 ]",
    "EXPR [ (1, _8) (1, _35) (-1, _39) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_37, _38, _39, _36] [_40, _41, _42, _43]",
    "EXPR [ (1, _9) (1, _40) (-1, _44) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_44, _41, _42, _43] [_45, _46, _47, _48]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_10, _11, _12, _25] [_49, _50, _51, _52]",
    "EXPR [ (1, _13) (1, _49) (-1, _53) 0 ]",
    "EXPR [ (1, _14) (1, _50) (-1, _54) 0 ]",
    "EXPR [ (1, _15) (1, _51) (-1, _55) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_53, _54, _55, _52] [_56, _57, _58, _59]",
    "EXPR [ (1, _16) (1, _56) (-1, _60) 0 ]",
    "EXPR [ (1, _17) (1, _57) (-1, _61) 0 ]",
    "EXPR [ (1, _18) (1, _58) (-1, _62) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_60, _61, _62, _59] [_63, _64, _65, _66]",
    "EXPR [ (1, _19) (1, _63) (-1, _67) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_67, _64, _65, _66] [_68, _69, _70, _71]",
    "EXPR [ (-1, _72) 368934881474191032320 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_0, _1, _2, _72] [_73, _74, _75, _76]",
    "EXPR [ (1, _3) (1, _73) (-1, _77) 0 ]",
    "EXPR [ (1, _4) (1, _74) (-1, _78) 0 ]",
    "EXPR [ (1, _5) (1, _75) (-1, _79) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_77, _78, _79, _76] [_80, _81, _82, _83]",
    "EXPR [ (1, _6) (1, _80) (-1, _84) 0 ]",
    "EXPR [ (1, _7) (1, _81) (-1, _85) 0 ]",
    "EXPR [ (1, _8) (1, _82) (-1, _86) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_84, _85, _86, _83] [_87, _88, _89, _90]",
    "EXPR [ (1, _9) (1, _87) (-1, _91) 0 ]",
    "EXPR [ (1, _0) (1, _88) (-1, _92) 0 ]",
    "EXPR [ (1, _1) (1, _89) (-1, _93) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_91, _92, _93, _90] [_94, _95, _96, _97]",
    "EXPR [ (1, _2) (1, _94) (-1, _98) 0 ]",
    "EXPR [ (1, _3) (1, _95) (-1, _99) 0 ]",
    "EXPR [ (1, _4) (1, _96) (-1, _100) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_98, _99, _100, _97] [_101, _102, _103, _104]",
    "EXPR [ (1, _5) (1, _101) (-1, _105) 0 ]",
    "EXPR [ (1, _6) (1, _102) (-1, _106) 0 ]",
    "EXPR [ (1, _7) (1, _103) (-1, _107) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_105, _106, _107, _104] [_108, _109, _110, _111]",
    "EXPR [ (1, _8) (1, _108) (-1, _112) 0 ]",
    "EXPR [ (1, _9) (1, _109) (-1, _113) 0 ]",
    "BLACKBOX::POSEIDON2_PERMUTATION [_112, _113, _110, _111] [_114, _115, _116, _117]",
    "EXPR [ (-1, _20, _45) (1, _22) 0 ]",
    "EXPR [ (-1, _21, _68) (1, _23) 0 ]",
    "EXPR [ (1, _24) (-1, _114) 0 ]"
  ],
  "debug_symbols": "pZfLbqswEIbfhTULz8W3vsrRUUQSUiEhElGoVEV595owJs3CCOHVH3D+T+MZzwD34lwfx89D012uX8XHv3tx7Ju2bT4P7fVUDc21C3fvj7KIl4ehr+twq/izHly3qq+7ofjoxrYti++qHZ9/+rpV3VOHqg+rqizq7hw0AC9NW0+/HuXLrdJWJi9mZrfY9Xa/xeh3uMOv0Ylfa5XyU9oPDsSPkIyf037SS/xgXn775tdpP5KiGAAB7CGg8wtBYYpgV3IAJm4CwOk9BFIxBiB0KYJPEzxrAXi9xw8Klz0oo3fl0cQ+QLQqbw92VwTGLREYTykCcHYhQGdWYiNgXxosmJgGS8lCgFtJg7Wxq8D6ZE9A7oGE/BO5ug3/qqbH5DbWxuOSSo16x3h1JvqdNyk/cuZ8RZ05YNFkz0fMH2/oMo/TGmDjcdoYQ7oxMf9BsVqNbc1NlN3cxJnV2AhIp3INsLGcq3nIng5u2YUz9Nac/8NVdWr6t9fNAqe6lwXNwrPoWcwsdhY3i58FlCiI4jQOgpKooEBYIDAQGggOhIfCQ+GhBIbCQxYNPAr7RyNqRZ2on5WUKIiiKImyqPBIeCQ8Eh4Jj4XHwmPhsfBYeCw8Fh5PvNB/7EQnnn1MBeyb6tjW8tJ/GbvTn2+A4ecWV+JXwq2/nurz2NdTAZ9roaS/",
  "file_map": {
    "50": {
      "source": "use poseidon::poseidon2::Poseidon2;\n\nglobal NUM_HASHES: u32 = 2;\nglobal HASH_LENGTH: u32 = 10;\n\n#[no_predicates]\npub fn poseidon_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    Poseidon2::hash(inputs, inputs.len())\n}\n\nfn main(\n    to_hash: [[Field; HASH_LENGTH]; NUM_HASHES],\n    enable: [bool; NUM_HASHES],\n) -> pub [Field; NUM_HASHES + 1] {\n    let mut result = [0; NUM_HASHES + 1];\n    for i in 0..NUM_HASHES {\n        let enable = enable[i];\n        let to_hash = to_hash[i];\n        if enable {\n            result[i] = poseidon_hash(to_hash);\n        }\n    }\n\n    // We want to make sure that the function marked with `#[no_predicates]` with a numeric generic\n    // is monomorphized correctly.\n    let mut double_preimage = [0; 20];\n    for i in 0..HASH_LENGTH * 2 {\n        double_preimage[i] = to_hash[0][i % HASH_LENGTH];\n    }\n    result[NUM_HASHES] = poseidon_hash(double_preimage);\n\n    result\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
