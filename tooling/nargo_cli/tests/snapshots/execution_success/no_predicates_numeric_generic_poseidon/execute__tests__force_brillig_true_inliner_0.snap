---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "to_hash",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "array",
            "length": 10,
            "type": {
              "kind": "field"
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "enable",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 3,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1bT4scRRSvnp0/2zM7u5N/6pcQZrKzu/G2kD8aT3rwoELCZJOcBI85SKARBAUFD4I37178Bh4EiSAIHsVPIF7yCQS3NvWmf/2bX/f2JF27aUjB0DP1qt979er9q1c1iXvW3jj+JOF7Nzw74en7L7tis7GH4Tl9sTZrENc0Fo9JC3jstIDHjRbw2G0Bj70W8NhvAY+DFvC42QIe0xbwOGwBj6MW8LjVAh7HLeBxuwU87rSAx0kLeLzQAh4vtoDHSw3y6HmzfU4sfi+3QKZXGpap8bgRvr92/HndPdtnLjtwMp0w2CfePrH1iaNPzHzi4xMLH7h9YPSBxzt27zi9Y/KG7w3LK65XDC/sK4C7lAEQ4ihoQBp+d2gChw0JOSW6TeK/Nt3fTV2xNcz/CX5c1Gbxz/YNfzcO/9NBwPNuVsTviK713clyWd6Bd3DMXRhzl8bYfOKs93wRWV5Xx64oIzW3XhzauwnRQ5kjzOgPXUzdfFb8QXrGD8unQ/IZxOFnavg3I+G3+aZivij/Ac13FIefheniEPhhXdyKQ/teXV00+kPiNZYubrnVtUH5mC6ObUyW85MSrJutzsNgPYDZ+nq9uwXzQxjyg/7BdHXiVnXF+I5sN4vIdjN7ZTfL9spuABbbbsZO5xrO5escI6+9Nt178CoPeXnzEKXDDOtmq/NQOmzrizo8dlq3bNz78P1DGIPv4BwSMYeY+47jfdM0sv7urrsGGwQ7bQ3i2ncun0g6vXvJleuQ6cMgc8u2QfJEGZnMNnE8wVKAdbMinWH43QU6iMv46NH498LvnfDswzv2/kTQ7xP9At+iD2XEuDZEn4339ZTb4buPHxbHrmc5viZ9tuG/EQf/wvDfjIN/WUu5Bfhdc/inhv/tOPwv8b8Th/9lLet2HP5PDsG8j/sgMM4+usG5TC2GYUzl/KLvosxzXje/MPpDFzXfWeYXfeKH5YPxi/dr9u5EwDDGIgzpDASds8I1dqvzT0qeRof7mA7qjsmQ81bfDsNzul5bcIfKl83PeF4+AX5QDj2nc0mLET0a/5/LcX4avp9frj7ba3uuHrf2MZvXsRPeA+D+k9cucXkegbqD4wcwRxyP3+197HscnhOBk+1+063OB/swB3pEc1M+/3ntnPUaeVQyR1wWR3fE+1wrSojOYfg9faE2m/Nezjf0G1+UzAnXvkNjDI7j/3E5zi9d+bz7BFM6uuNWZc/yOqsaeddpGzDe1rWBb8PT4/o4yd8p8ykqPqtYx/ZdlfekcWRXO+8x+meV96Q15cp1VXx3ImDss4aCjqpBnhUuXm/fDsNzLUke+xHuqVODjlT/rp0TGP2zqkGrmm9ZDdrDtgSvEwFj3VC17i1Bp024sAaPuA2unkaH+5gO8lnHTzaRK3ANP22QDuKyWF5lj89LB3FZzcRiM9o2x+ZIZ0/L2Lysr7pVPUPeOjQev/vWo76fw1PFZmXbowrZDQQ/p+Viv7gizU3gs04uZuP/cjnOX8P3mPXk43ZvLGTiaN7KdxgM14htdBtg7Cd2AIb+ndsG/UZZeLndSXK8PI7ngfbE54N4HoBndb51CXYY+qcv1uae/0dJkUfUsR7QZd+6Icazjqm8FHFYLUH5QZOVqptwPEwEbOSqbXBQwbeKRyNBw3wa5vf2buRc5mgseHUkF7QNthu0DbYbtA22mwnAOFZdABjKhJuyKTwT/6aGTbGvM7ysk7aXVmeT9i760Kr9pdFMgZ6ieSMrjjc5dWB8WjGe96jM97CEH1V3Qfy8p3wann7sb4nm2bnqOlWVjSGfxs8O8cBx7uT9LIdhjuBbF2BN1guVL0QZsi9U8lF1prry4TwA/UZKuFT9SOm88qvGo7IHw6vqO6fZGc9X7Z1Zr31T9pbWwJVU0FZrk1bQRr6GNWijHZisua7VDwx6WV5PivSQhsU1lQfZHCPnx7XrL3w3K1Jsm9WJw75xHjAWvE5ceSxMCIZ0xoLOWeFSsZ11Ad87jxqJ0R+6qLo5q5KrqhGo/GZMMt8WMk8IhnS2BZ024eL8DmWZlDyNDvdV6S/vV0cN0kFfs0V0thqkg7i4RrLdIB3EdYvoDAQPPk68meR4/cfydMz78N0bWQ7H8TchNtk/tCKfjzzkvQU2tbcYEwz3FqxnFwHGunEJYGgT3NSexGSx7j4fc5mJK76HuS3ec/etC7DY+/yq3FblqlW57Wn7ZZOtqt8OCIb7fNyfXSf+0cZSGMf3GSZuvblcEOMngl/L5XCvbO+m4r0G9yqzseDVmrIJtiW0CbalywBjW7oCsG2CvQYwlAk3ZWcmp3X3/juEl/0f7/0Hgkf0qzHt8OBa/mdY8wHmt7l1AY7jPwoIuF5p+cLhc/L58GAxe7i7eLjYW9y/Pz9aXCT8vmFdrWn6i4Pda0dX50cH9/Z2F7v7p9LHu4DqzJ9zJ/Mp6jzHN4u/PRp/n2JjrP/vXRTy5LORSGfd++qOmzVlNwnBMF/gHFztudVZOa4LN+UvTBae9u81/IXSkYRgqr6sahMcyxLB14TwIP6JW41fHAOxRo53dhGnc7nPw7Xju0OJmNfI6bvpmJv4Ngi/8f47jjd8PRr/WUDg+XpM69MT9Py4ryvGJSXPExyir5sV+9S9ePy/gI1f7mmzVR4NNgIY5k2+bYXfKC/EZXz0aPxX4Mt8wzv+9v5E0N8k+gW+RR/qI+PaEH14V+5zij0496b3+yc0CT/2MW+mO2Wxge9rI6zqDrH5NuzH/ILjho3/juJGpHtTMm6U1YrxzBv9xc2sOAcb/xPY8PcV8mQ/ivKsOifjdUC+y+40lZ1v8Bxs/A+BOTzfUPswm8957MOwVo025T917wXZ+NP2YfzfUdyHcWxUZ7co89vEq8mw71zlvUfOsX6ENdrsFPlDvR4S7+rcQsVWjsmoW7hvfEI2G+k/HgeqxmNN5VQJwdBOqu4fcr6FerBuvmWyWDffasJPYE38hL9sla/zsNvCXd2sOM+q8yfn1jsb9M1qgKoWyvqtYsE6NuMbnx+ivmBN5gnE3ab3hEd7+/eO5nuL6YOZ/3l1nT2huqOHddQ/khwX6hHGF3yX44uN/xdi5J8UI5vca1TZhYqfaBfKLxyG39MXbKy/mGOou9Adt6q/qPs96vsbYgPfq1PnssrGVF0xJfnEutd+jme6tc/xXoYzXcxHOySfSOecy/8/qXM1dcZ8IYzlNUP+DJfKMdatF/C97jr1AvQRtsdXuYwDXtT/dtB3cQw/7b+gZfchnoKv7IeJKp/HvlLVl5TPY19Z9R8JpYNVZwJVZ884f3XHeVwDV9VdRKWf4wrayBefV/K5b9mZ6gmtLIeZbCLnWfIOViE+ZEXZ1L0fUiVLtY7qDJ3vEKAdsz3WtWP2Dainpr9oL5zXoD1iXtN0Lnachh0cLQ5ms7fmswfz2d5pudj/5yZnhEliAAA=",
  "debug_symbols": "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",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2::Poseidon2;\n\nglobal NUM_HASHES: u32 = 2;\nglobal HASH_LENGTH: u32 = 10;\n\n#[no_predicates]\npub fn poseidon_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    Poseidon2::hash(inputs, inputs.len())\n}\n\nfn main(\n    to_hash: [[Field; HASH_LENGTH]; NUM_HASHES],\n    enable: [bool; NUM_HASHES],\n) -> pub [Field; NUM_HASHES + 1] {\n    let mut result = [0; NUM_HASHES + 1];\n    for i in 0..NUM_HASHES {\n        let enable = enable[i];\n        let to_hash = to_hash[i];\n        if enable {\n            result[i] = poseidon_hash(to_hash);\n        }\n    }\n\n    // We want to make sure that the function marked with `#[no_predicates]` with a numeric generic\n    // is monomorphized correctly.\n    let mut double_preimage = [0; 20];\n    for i in 0..HASH_LENGTH * 2 {\n        double_preimage[i] = to_hash[0][i % HASH_LENGTH];\n    }\n    result[NUM_HASHES] = poseidon_hash(double_preimage);\n\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
