---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "to_hash",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "array",
            "length": 10,
            "type": {
              "kind": "field"
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "enable",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 3,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pdnfThs7EMfxd8k1F2t7/K+vUqEqpWkVKQoohSMdId79zKznG+iRElHnhvlA8C9rr+3sbl43P3bfX3592x9/Pv7efPn6uvl+2h8O+1/fDo8P2+f941H/+rpZ7EfXn+Fu08MocZQ0ioySRymj1FHaKH0tYVm8Bq/Ra/IqXrVZ1Br0/5LV6DV5Fa/Za/FavTavfdS4ePW86HnR86LnRc+Lnhc9L2qeWO2jJm2Xrer/Fav6f81q89pHlcVr8Bq9Jq/i1cbOOiwFVNBAd+QFBBBBAgJIzpZsfckVNNAdZQEBRJCAgAxILiQXkgvJ1ZLtzNYAIkhAQAYFVNBAdzSSG8nNku0stQQEZFBABQ10Rydnndl2ute5vaKCBvpAXKf4igAiSECAJlerFlwMFTTQHWEBAUSQgOVYoC2EgQYsR+datLUwEEAECQjIoIAKGiA5WU43JCAggwIqsLW+GLrDVs1AAHFdZ9HWzVrFa/ZavFavzWsf1ZbMWrV9DAYBGWhEjIYKmsNWQ7QxtNUwkICADAqooIHusNUwQLKthmhjaKthQEAGBVTQQHfYahgIgORGciPZVkO0YbHVMFBBA91hnwADAUSQgACSO8m2PqKe7mSrIS2GBARkUEAFDXSHLYeBAOx4ksGSg0FABgVU0EB3rB8WKyKw5tFQQAXW3N7UVsGKtIAAIkhAQAYFVECybfNi72XbvKx/SUBABpojYqigge6wbX4ggAgSEJAByYXkQnIhuZJcSbaJLdmQHLZlJnvJpkTSv4htmQMBRJCAjVgx2PhUQwPdsU6JFQFEkIDlNEMGBVTQQHesU2KFJXdDBAkIyKCACprDJokshgAiSEBABgVU0EB3CMlCsm2eEgwJCMiggAoaYHgzw5sZ3szwrhPJzs46bda/ZFBABQ10xzptVgQQQRqzRWw/HMiggAoa6A7bDwcCiIDkRnIjuZHcSG4k2za49tS2QbEpYZveAF3udLnT5U6Xbc6LToBsc34gAD2wvBgSEODJeSmgggZ8MHNYQAARJCCA5LAGvr3dbbj4//Z82u3s2v/D3YDeIzxtT7vj8+bL8eVwuNv8sz28rP/0+2l7XOvz9qSv6lHvjj+0auDP/WFnert7b71cbqqbiDfWXeTcPH+6vSzF2+vSnmhfE+1rqhPt21K9fQsz7Wuh/7XmmfaN42+LzBx/OR9/v3j89Up7Ob9/kYn2ev3u7fWa9VL7/pn5ozvouX38s324MgB6YZw5Ar2UvRgRLkdkYQyztJmAcj6EcuUIrnYiv3eilKmIKoykXoReHMrlxqlw9RBSZCD1TOSpXiS7AfWIWGZ6YTc3oxcfzsXUhpBmFqScT4N+Fs+0rwyAfuZNtM923T4mc764IduF900rOsqNSzrmm5e03anctKSvBXxqSV/vxKeW9NWIm5d0DudhiBc/Xa8ewueW9PWIW5e0PmhkHPRZY59J0EdsJOizrKmE8we1Pp+cOgaxJxcjQW9IZhKynHuRP1xt/U1C51zoU8M0k5DSOUFvcacSSjsntJle3L4u9JnneSTrMtWL2lkY+ixzalb395HsMpPw4dqzzIxCLxxArzPv3yM7XJep928cf+/ptuP/X/t7/W37sD/98d3ImyWd9tvvh53/+vPl+PDh1ed/n3iF71aeTo8Pux8vp50lvX/Boj++pprvUi/3+mxEf9PPvLbc25ch9pLeiiexl+yu7mvWp6I5xvs3O7D/AA==",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2::Poseidon2;\n\nglobal NUM_HASHES: u32 = 2;\nglobal HASH_LENGTH: u32 = 10;\n\n#[no_predicates]\npub fn poseidon_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    Poseidon2::hash(inputs, inputs.len())\n}\n\nfn main(\n    to_hash: [[Field; HASH_LENGTH]; NUM_HASHES],\n    enable: [bool; NUM_HASHES],\n) -> pub [Field; NUM_HASHES + 1] {\n    let mut result = [0; NUM_HASHES + 1];\n    for i in 0..NUM_HASHES {\n        let enable = enable[i];\n        let to_hash = to_hash[i];\n        if enable {\n            result[i] = poseidon_hash(to_hash);\n        }\n    }\n\n    // We want to make sure that the function marked with `#[no_predicates]` with a numeric generic\n    // is monomorphized correctly.\n    let mut double_preimage = [0; 20];\n    for i in 0..HASH_LENGTH * 2 {\n        double_preimage[i] = to_hash[0][i % HASH_LENGTH];\n    }\n    result[NUM_HASHES] = poseidon_hash(double_preimage);\n\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
