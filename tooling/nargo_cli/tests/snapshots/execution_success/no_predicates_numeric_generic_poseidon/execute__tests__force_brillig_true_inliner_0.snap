---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "to_hash",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "array",
            "length": 10,
            "type": {
              "kind": "field"
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "enable",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 3,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pdnfThs7EMfxd8k1F2t7/K+vUqEqpWkVKQoohSMdId79zKznG+iRElHnhvlA8C9rr+3sbl43P3bfX3592x9/Pv7efPn6uvl+2h8O+1/fDo8P2+f941H/+rpZ7EfXn+Fu08MocZQ0ioySRymj1FHaKH0tYVm8Bq/Ra/IqXrVZ1Br0/5LV6DV5Fa/Za/FavTavfdS4ePW86HnR86LnRc+Lnhc9L2qeWO2jJm2Xrer/Fav6f81q89pHlcVr8Bq9Jq/i1cbOOiwFVNBAd+QFBBBBAgJIzpZsfckVNNAdZQEBRJCAgAxILiQXkgvJ1ZLtzNYAIkhAQAYFVNBAdzSSG8nNku0stQQEZFBABQ10Rydnndl2ute5vaKCBvpAXKf4igAiSECAJlerFlwMFTTQHWEBAUSQgOVYoC2EgQYsR+datLUwEEAECQjIoIAKGiA5WU43JCAggwIqsLW+GLrDVs1AAHFdZ9HWzVrFa/ZavFavzWsf1ZbMWrV9DAYBGWhEjIYKmsNWQ7QxtNUwkICADAqooIHusNUwQLKthmhjaKthQEAGBVTQQHfYahgIgORGciPZVkO0YbHVMFBBA91hnwADAUSQgACSO8m2PqKe7mSrIS2GBARkUEAFDXSHLYeBAOx4ksGSg0FABgVU0EB3rB8WKyKw5tFQQAXW3N7UVsGKtIAAIkhAQAYFVECybfNi72XbvKx/SUBABpojYqigge6wbX4ggAgSEJAByYXkQnIhuZJcSbaJLdmQHLZlJnvJpkTSv4htmQMBRJCAjVgx2PhUQwPdsU6JFQFEkIDlNEMGBVTQQHesU2KFJXdDBAkIyKCACprDJokshgAiSEBABgVU0EB3CMlCsm2eEgwJCMiggAoaYHgzw5sZ3szwrhPJzs46bda/ZFBABQ10xzptVgQQQRqzRWw/HMiggAoa6A7bDwcCiIDkRnIjuZHcSG4k2za49tS2QbEpYZveAF3udLnT5U6Xbc6LToBsc34gAD2wvBgSEODJeSmgggZ8MHNYQAARJCCA5LAGvr3dbbj4//Z82u3s2v/D3YDeIzxtT7vj8+bL8eVwuNv8sz28rP/0+2l7XOvz9qSv6lHvjj+0auDP/WFnert7b71cbqqbiDfWXeTcPH+6vSzF2+vSnmhfE+1rqhPt21K9fQsz7Wuh/7XmmfaN42+LzBx/OR9/v3j89Up7Ob9/kYn2ev3u7fWa9VL7/pn5ozvouX38s324MgB6YZw5Ar2UvRgRLkdkYQyztJmAcj6EcuUIrnYiv3eilKmIKoykXoReHMrlxqlw9RBSZCD1TOSpXiS7AfWIWGZ6YTc3oxcfzsXUhpBmFqScT4N+Fs+0rwyAfuZNtM923T4mc764IduF900rOsqNSzrmm5e03anctKSvBXxqSV/vxKeW9NWIm5d0DudhiBc/Xa8ewueW9PWIW5e0PmhkHPRZY59J0EdsJOizrKmE8we1Pp+cOgaxJxcjQW9IZhKynHuRP1xt/U1C51zoU8M0k5DSOUFvcacSSjsntJle3L4u9JnneSTrMtWL2lkY+ixzalb395HsMpPw4dqzzIxCLxxArzPv3yM7XJep928cf+/ptuP/X/t7/W37sD/98d3ImyWd9tvvh53/+vPl+PDh1ed/n3iF71aeTo8Pux8vp50lvX/Boj++pprvUi/3+mxEf9PPvLbc25ch9pLeiiexl+yu7mvWp6I5xvs3O7D/AA==",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2::Poseidon2;\n\nglobal NUM_HASHES: u32 = 2;\nglobal HASH_LENGTH: u32 = 10;\n\n#[no_predicates]\npub fn poseidon_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    Poseidon2::hash(inputs, inputs.len())\n}\n\nfn main(\n    to_hash: [[Field; HASH_LENGTH]; NUM_HASHES],\n    enable: [bool; NUM_HASHES],\n) -> pub [Field; NUM_HASHES + 1] {\n    let mut result = [0; NUM_HASHES + 1];\n    for i in 0..NUM_HASHES {\n        let enable = enable[i];\n        let to_hash = to_hash[i];\n        if enable {\n            result[i] = poseidon_hash(to_hash);\n        }\n    }\n\n    // We want to make sure that the function marked with `#[no_predicates]` with a numeric generic\n    // is monomorphized correctly.\n    let mut double_preimage = [0; 20];\n    for i in 0..HASH_LENGTH * 2 {\n        double_preimage[i] = to_hash[0][i % HASH_LENGTH];\n    }\n    result[NUM_HASHES] = poseidon_hash(double_preimage);\n\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
