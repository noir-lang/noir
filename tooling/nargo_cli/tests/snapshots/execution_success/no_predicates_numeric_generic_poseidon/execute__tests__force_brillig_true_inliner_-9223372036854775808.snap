---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "to_hash",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "array",
            "length": 10,
            "type": {
              "kind": "field"
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "enable",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 3,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdndThtJEIbhe/ExB9NV1X+5lSiKSOJESAgQgZVWEfe+XdP1DuxKINLRnlCPsftzz0y1PTP+dfp2/vL44/PVzffbn6cPH3+dvtxfXV9f/fh8ffv18uHq9mb899dp8z/dTh/SxannWcosdZY2S99L2raoKapE1agWNUctUWdaSmO8eB2vV68WNUctUWvUFrXPKlvUFFWiRp5EnkSeRJ5EnkSeRJ6OPPOaoo7x2et4ffHaoo7Xt1Fti5qiSlSNalFz1BLVt39zNNADeQMJCFBgIAPfsb5HcwUN9EDZQAICFJS5waXOHVBa1D5rjR1UYwdViapRLapPzI9sLaCCBnqgbcAn5sehCVBgc8+3HLVEjSPT4si0PmvfoqaoEtUn5jPc+3pHBT4x3/i9uwdkb+8dCQhQYCCDAipowJPHNCSR452fmsNABgVU0EAP+AKYGDOUzSFAgYEMCqiggR7wpbBP1dfChAAFBjIooAa8jSU5fGLi8Impw0AGBVTQQA94G08kIIDkQnIhuZBcSC4kF5IryZXkSnIluZLsHS7mKKCCBnrAO3wiAQHkeMeKt4S37IQABQYyKKCCBvqEevdKcQhQYCCDAipooAf2j+0dHlgdPrw5CqjAh3dHD3jTTiQgQIGBDAqogMC9SZKjzx5TmkRpEqVJlCZRmkRpEqVJlCZRmkRpEqVJlCZRmkRpEqVJtJJcSa4kV5IryY3kRjJNov4xOGEggwIqaCDaTzs5NInSJEqT2LaBBAQoMJBBAdEkRpMYTWIpAQEKDGRQQAV99pjtTdIcCgxEkxhNYjSJSQPRLaYbSECAAgME+le9bo4EBCgwkEEBFTTQA5lk/6jU5BCgwEAGBVTQQA/4KpgguZBcSPZ+VnEk4K9RhwIDGfi7m8PfyxvAu3ciAQEKDGTgOX6UvXsnGugB/2CcSECAJ3tv+AfjRAYFVNBAn8je8xMe2BwKDGRQQAUN9ID3/EQCJCeS93Pc7siggAoa6IH9THdH7N4sAhQYiMWYvedttFbeT2x3JCDAT92Sw0AGBVTQQA/4uphIQADJRrKRbCQbyUayrwsbfZh9XUz4U6PrsrexmUOAAgMZFFBBAz2wn87uILmSvDe/v/ve/DsyKKCCBnqgbSABASQ3khvJvgr2LfVVYH4oG1P1nt//4z0/YSADNrmzyZ1N9p630RLFe34iAU+ujtiZZTOQQQEVNBAzLGkDCQjYk5+eLk5cbn5+uD+f/WrzxfXnuCq9u7w/3zycPtw8Xl9fnP66vH7cX/Tz7vJmrw+X9+PZ0bbnm2+jjsDvV9dn19PF8+jt9aHj+zsGjy/wY3h+9/jxjRfjx1fVwviqjK9aF8a3rcb4llbG18L215pXxjfm3zZbmX855t9fnX99Y7wd719sYfy4tIzx4yLqtfH9Pf0zzhGO8fL+7X/P/N8a71d7c7zqn/WPrry/2bH91lfGV2V8W5n/+I6M8VlW1l/2k7k5Pr+6/tMbDVT8sn0PKC8OgLw/4F0dmP7HFhx3GPoxg7qY0I6E1lYS5NiN40aFLiXk54RSVhLqZiTUFx+mv5NwrIZxP2BpT0o75jCu7lcSVFgRY0fmpYSkR4Ks7Mlsx6K0lW5415p6Y/y4z8xxSFvrKwnjnioJ46bmUsLxzThuSy/NwfwexkwYF7srCdmOrcgvTm9+J6HTC+M28dKxUD0SNC9txbjrciS0pa0ox6oad6yX5lA7LT3uSq+sidSf90O3lYQXp2pl5ZOhFybQ68r7d2FVdlt6/8b8e9c/m/9/xn8ajy6/Xt3/68erJ0+6v7r8cn2Oh98fb76+ePbh7zue4cevu/vbr+dvj/dnT3r+BWz8+ajjgkyzfhr3yMaj8ZXbtk/+y9V4IOM6Vaz4w3Gl8zFnucjZPj35xP4B",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2::Poseidon2;\n\nglobal NUM_HASHES: u32 = 2;\nglobal HASH_LENGTH: u32 = 10;\n\n#[no_predicates]\npub fn poseidon_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    Poseidon2::hash(inputs, inputs.len())\n}\n\nfn main(\n    to_hash: [[Field; HASH_LENGTH]; NUM_HASHES],\n    enable: [bool; NUM_HASHES],\n) -> pub [Field; NUM_HASHES + 1] {\n    let mut result = [0; NUM_HASHES + 1];\n    for i in 0..NUM_HASHES {\n        let enable = enable[i];\n        let to_hash = to_hash[i];\n        if enable {\n            result[i] = poseidon_hash(to_hash);\n        }\n    }\n\n    // We want to make sure that the function marked with `#[no_predicates]` with a numeric generic\n    // is monomorphized correctly.\n    let mut double_preimage = [0; 20];\n    for i in 0..HASH_LENGTH * 2 {\n        double_preimage[i] = to_hash[0][i % HASH_LENGTH];\n    }\n    result[NUM_HASHES] = poseidon_hash(double_preimage);\n\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
