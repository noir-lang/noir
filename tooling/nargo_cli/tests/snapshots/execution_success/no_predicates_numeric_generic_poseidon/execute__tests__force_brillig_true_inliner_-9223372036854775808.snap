---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "to_hash",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "array",
            "length": 10,
            "type": {
              "kind": "field"
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "enable",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 3,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1cO48cRRDumZ3Z5+3t4QePAAkRISHQ7u3ew3JyEmfD2QYMCRFIe+c7iQSJkIgJEDJCBGTkSM7IjPgB/AACRAIBGSGSEyMRcX3u2v3mm5q5ufP0+cZsS6vZna6uqq6uqq7urt7APCrPH34C9z1yz9A97ftLJl0Edss9h49XRhXiGvriMagBj2ENeGzUgMeoBjzGNeCxWQMeWzXgsV0DHjs14LFbAx57NeBxqQY89mvA43INeBzUgMeVGvD4TA14vFADHi9WyKPlTdY5vvi9VAOZXq5YpsJjw31/9vDznHm0zpy9wM6EDtgG3jawtYGjDcxs4GMDCztx24nRTjzWsVvHaR2TNXxrWFZxrWJYYV8G3LkMgBA/dhrQcb9D6sBWRULuEN0q8W8O1zc6Jl0q5n/cMelBrRb/aF3wR374H7YcnneSNH5DdOXdbjKX5S60QZg9gNkjGOmPn/Ge7HuW12rfpGWk9S32Q3scED2UOdYJ/a7xqZuPNn+QnvDD8glJPi0//AwFf9sTfulvR+kvyr9F/e354WcqutgFflgXl/zQ3i2ri0K/S7z60sUlkx0blI/oYl9gkjk/HaqLkmw/pC6GOhlfq3fXoX9Yh/ygfxBdXTFZXRG+PdvN1LPdjBZ2MysLu4E633bTN3qsYcx8nH3EtYdx5+oiDjm/cYimw1wXJdl+aDos44s63De6bgnce/D9Q4DBNtiHQOmDz3XHof5OPOvv+KRj0KC648bAs31P/K77huOLJl+HRB9aiZmVBskTZSQyayM81XWgLkrSdLrudwR0EJfwERP8bfd74J5NaCPtVxT6TaKf4lt5hzJiXA3lncDb/ZQd993OHzKPvZHM8VXpswX/th/8U8F/zQ/+seC/DvhNdfiHgv9NP/zP8L/l8PvgfcePbGb7ZDf8yGaG/2b1spnhvuWF99FE8L/9+LyP+IX1C3ZeeeDwydwezUmdVdw1OW3c5WkOL4y7UD4hya6p8LpCdbaInQZKXUN5F54xrr7J9j/IeQodfsd0UHdEhlqsLz7S8vUJtMF2sdHjYJnfYoL/2cxxflpAm/Xdj36N1srqu9A/q3VGRPzkrTNEPk0/8pmU0WVNj1pKneCSdTXqDsI3oY8Ij9+lPb773D1XCKctbJstpT/4DuO3z6hvml8+rS2yXiOPmswRl8zTA6V9k3jGNR/a9ZdEU/Dj2GBbmV9jgr9n5ji/Mmm+tHljYLJrj8jk94f13ddZFcs+Mtn5BnkLTdYWcNxievete1qd/QfasH0X2fyKIjvec/LjD4YbbN9YpA7tledl3J8VXdL2Sjn+x9Kg39hfS/tfoMlwzCvqWJva4b4Bzke2RFBXZfxlebgVpHlE+4uJJ81HIDzqSJ7fQxwyb7MPRVlpcQSPc6DU2ThX8wls902Fpu9zPZ6b0O6rmJt+cE/N7k8aJ2p+nvlvGF0ftpM0POZeNEy2HwzPY8N+qJPDT5zTN8HP8vrRPe1vOdBgno0p9pMC31XgkU/hZ2CyY4r7/EftkzRuY3z7hNGa5hNSc0xyvHw0fSorH9Y/PCfiMxKcI1k3A4UO6qbEM9retrTVYpYqfSDq0kDpU6sErqCAdluBbxXQRr7aVKf5pbPOT0A/2VbkFJqsPqF+xvTuF/fU/GTZmJ3X0wjH69Ff3dPC/u2+a+POcevTKPvf3dOX7DsKP77P3KVIHZ7h8hoJz6e3k3QdxpInjU2lv1au++DHGY55RR3rmXQ7nIdET59EbHqW8xDHnzgPtagOY1OhiTYuNI/bZ+E5CWOvCPDK/pjPMdjYnCf5yvjHJqtzSD8m+IfuN8oO+7N1Sj4PNqajg/H0YLo2vXNnsje9QPhtwXVA1fSnG+PNvdXJ3sbu2ng6Xj+WPu63a7kfGD/IO479cU9WzgXEx3nKpdllP4aF/Rj7YS6arxK+rXx+OoGvQtktUR36sT7V4by1THVo+wOqayr88NOYcntw2lmB7333FtFpVUgH5d0mOu0K6eDYyVgNTHbsBIdn25jFR2IbGB91FV5Dk40J0K5ieveC64gWH2lzXadAdoHCj7a/jHu1LwY6TVxbY1veqxX4zWCO86UgDSPj/jLAvOa++8yrPyxXtD1CQ7LBceT4DceR7Rh9ItteH+rYXpaBBzm3RpuQovlSgbM4fyvhSzVZ+8gtOm+yLitPkYVtNwjneBmO+4H6Kn3qmXJ2hHTZjq6CjeyQbWqxrOZL2WchPMqf90jRv0rb8xp7aGPPOrMMdawzA6hj+1yBOpQJl+NinbL2uZPjg4UG+2BeP0QKv+jbtTw2XOvZIrlwmCuH8KivCH8b9PV96m+s0LNw0wK4IOd5hEN5FyXpd1oOHeYWCrzQ7iZZHqWuB3Ux0Vlyv1FeiEv4iAn+IxoTzAeU9isK/TbRT/GtvOPcwp4C31Pg7fh84BqJLmPfq85LOKJJ+PEd8ya642O9t7e2vrs3WZsO94/SqVYX6700z6fxgYv13mK9V0Tn/7be+8J15Emt9+7mxBp5673tJN0Pgf8e5v2vgzSMjPs3APOd+75Y783huFS13mNZL9Z7c5jztt67BzZyn2xzsd57Otd793N8sNBgH1x2vXcX5hbO+w8VfjzfBSud9z9bvxiv/mqWB63lRGq5HZq8+bwQx4nzgbVzQO1+wVnh4vNGwW+L5xzY2ufEa2sUacuxuS08ftpdk1ihUxdc0t6WovxM9j8o36L7IVocKzkSvPbW8pr4foDMB1ouGeKOCf4PiqV85eHwXgPSKsph1fqn5UVcS/T+PYT4488gn15AvOD6MKQ6lhHW4fzKYzTbbzLZHCStDwL/F8x7uzQH4z4n5lTZEiVpPrfc++HjFTWnBWO5OEn3uyhus4XjPO0/LzCW5vxJjKfYfjX7R5nfIF4x70XLExN8fEfhAYzRK2GaP9T5LvGOfed8nIZCV8sZxRhp2SE8b3ca2JdqubLamop9KeoByoCLFsvifYdXS6yNqvQTeNfriL8ky9eTsNtUbmOS7mdRbpkxJ1uf2SJzn/bfMKzfaDMdqitjM7bcIHqoLzI2aDN5864WE7G/0PJebeF5V+Avk536uqOhzbucW+rpXvS6tg8tRdv3Zh9R5k6U5iO0PYGyPkJkcVIfocWNmv9gH1F0VyhQ+NJsoEl1OG+wfWC8uZOkecY1ohZj8d3JQOmXj3OrwyOrjb3pxmh0ZTLan4zWTnJupZ1R4H7x62FaBtJfjNGw7bVkXo/wN8M5zlGYllNZ3eBYUrsPrM0trFNoGwJX93OFq66TVZwraGcynvPsJ9q+YEC0Pf23Xem9Cf5vO0//81f433YYm4ckn76nsRF+lhV+ego/zzhYHjPkT3BpcfpJ/XuP6nDs2Pdr967wDmmZNbbm+9g3Ivy74PsOyPed9Rpbi0G1OzdFOqjFpUIbfdlSCVxFdzf6CvxSAW3kC9sybeaz6B4MxoK2RFBXpQ/yvWegybJofYG2ukR1aJdsX0iX1/JoT0V3PHG9fpATf2A/MP7gs5K8OzsS1/wHdw68KzVtAAA=",
  "debug_symbols": "tdndTtxIEIbhe5ljDtxV1X+5lSiKCJlESAgQgZVWEfe+Xe56DbsSEeloT1IPYfob2/N5Zmx+nr6evzx9/3x9++3ux+nDx5+nLw/XNzfX3z/f3F1dPl7f3Y7//Xna/J9upw/p4tTzHGWOOkebo+8jbVvMFFNiakyLmWOWmDMtpbFefI7Hq0+LmWOWmDVmi9nnlC1miikxI08iTyJPIk8iTyJPIk9HnvlMMcf67HM8vvhsMcfj25i2xUwxJabGtJg5Zonp+785GuiBvIEEBCgwkIEfWD+iuYIGeqBsIAEBCsrc4VLnASgtZp+zxgGqcYCqxNSYFtM3zF/ZWkAFDfRA24BvmL8OTYACm0e+5ZglZrwyLV6Z1ufsW8wUU2L6hvkW7r3eUYFvmO/83u4B2eu9IwEBCgxkUEAFkSyJnOQ51aHAQAYFVNBAD/gJkLojAQEKDGRQQAUNjGQZjRI/FSYSEKDAQAYFtIDXWJLDl4vDl6vDQAYFVNBAD3iNJxIQQHIhuZBcSC4kF5ILyZXkSnIluZJcSfaGizkKqKCBHvCGTyQggBxvrHg3vLITAhQYyKCAChroE+rtleIQoMBABgVU0EAP7G/bOzywOnx5cxRQgS/vjh7w0k4kIECBgQwKqIDAvSTJ0WfHlJIoJVFKopREKYlSEqUkSkmUkiglUUqilEQpiVISpSRaSa4kV5IryZXkRnIjmZKovw1OGMiggAoaiPppJ4eSKCVRSmLbBhIQoMBABgVESYySGCWxlIAABQYyKKCCPjtme0maQ4GBKIlREqMkJg1EW0w3kIAABQYI9I963RwJCFBgIIMCKmigBzLJ/lapySFAgYEMCqiggR7ws2CC5EJyIdn7rOLwx6hDgAIDGfizm8Ofywvg7Z1IQIACAxl4jr/K3t6JBnrA3xgnEhDgyd4Nf2OcyKCAChroE9k7P+GBzaHAQAYFVNBAD3jnJxIgOZG8f8ftjgwKqKCBHti/6e6Iw5tFgAIDcTJm77yNauX9i+2OBAT4V7fkMJBBARU00AN+XkwkIIBkI9lINpKNZCPZzwsbhcx+Xkz4r0brstfYzCFAgYEMCqiggR7Yv87uILmSvJffn30v/44MCqiggR5oG0hAAMmN5EaynwX7nvpZYP5SeucnBCgwwC53drmzy9558yZ45x3FOz/hydURu1w2BQYyKKCCBuJglrSBBEhOe+Dz88WJy83Pjw/ns19tvrr+HFel95cP59vH04fbp5ubi9NflzdP+4N+3F/e7vPx8mH8dtT2fPt1zBH47frm7Hq+eFm9vb10fH7H4vEBfizP714/PvFi/fioWlhflfVV68L6ttVY39LK+lrY/1rzyvrG9rfNVra/HNvf39z++ov1djx/sYX149Iy1o+LqLfW9/f0Z3xHONbL+/f/Pdv/q/WpsV71z/qjK89vduy/9ZX1VVnfVrY/+5exfX3Ob56/qbwdUPz6ew8orw6gvD/gXQ3yV+n/qlBOvIRZVt6Cxh2GfuxBXdmCkdCOhNZWEuR4GcaNCl1KyC8Jpawk1M1IqK/eTH8n4Tgbxv2ApSMp7diGcXW/kqBCHcaBzEsJSY8EWTmS2Y5G2kob3nVO/mL9uM/M65C21lcSxj1VEsZNzaWE45Nx3JZe2gbzexgzYVzsriRkO/Yiv/p68zsJnS6M28RLr4XqkaB5aS/GXZcjoS3tRTnOqnHHemkbaqfS4670yjmR+stx6LaS8OqrWll5Z+iFDeh15fm7cFZ2W3r+xvb3rn+2/f9Z/2n8dHl1/fCvP149e9LD9eWXm3P8+O3p9urVbx//vuc3/PHr/uHu6vz16eHsSS9/ARv/fNRxQaZZP417ZOOn8ZHdtk/+l6vxg4zrVLHiP44rnY85y0XO9unZN+wf",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2::Poseidon2;\n\nglobal NUM_HASHES: u32 = 2;\nglobal HASH_LENGTH: u32 = 10;\n\n#[no_predicates]\npub fn poseidon_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    Poseidon2::hash(inputs, inputs.len())\n}\n\nfn main(\n    to_hash: [[Field; HASH_LENGTH]; NUM_HASHES],\n    enable: [bool; NUM_HASHES],\n) -> pub [Field; NUM_HASHES + 1] {\n    let mut result = [0; NUM_HASHES + 1];\n    for i in 0..NUM_HASHES {\n        let enable = enable[i];\n        let to_hash = to_hash[i];\n        if enable {\n            result[i] = poseidon_hash(to_hash);\n        }\n    }\n\n    // We want to make sure that the function marked with `#[no_predicates]` with a numeric generic\n    // is monomorphized correctly.\n    let mut double_preimage = [0; 20];\n    for i in 0..HASH_LENGTH * 2 {\n        double_preimage[i] = to_hash[0][i % HASH_LENGTH];\n    }\n    result[NUM_HASHES] = poseidon_hash(double_preimage);\n\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
