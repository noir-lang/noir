---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "to_hash",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "array",
            "length": 10,
            "type": {
              "kind": "field"
            }
          }
        },
        "visibility": "private"
      },
      {
        "name": "enable",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 3,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/9VaZ1PbQBR84PQeEgg11NBJJFu2ZQidJLRQQw3NBhtChyR/P5N3g27mSXEmhb0PdzM7WsTwkPat17rTldDV+M5IBryEEQuOz4OjPFceHOXQPw8Fx4ST8rx8Op53E27WiWdyftLxkrmU7/pu0k/uxf1EIu97fjqTy6SdjOsl8m4hmUkUnKtRJWo5/zay0RPq2soYNyLX+kPcm+alglcFXP9dNaOGUcuoE+f1iEU0cK433BiwVjWwNy9x1+WY1O8GsFYNUL96S/S7CaxVC9SvAahfsWxQ/tYZUC94g+B1FM6GRkYTo5nRQuaz4RawViOwN6/IDm/fBtZqAurXaol+d4C1moH6tZHZbFD+1hnQKnib4C0UzoZ2Rgejk9FF5rPhLrBWO7A33WS2N92iBx2CdwreFelND+M14426puB8sdr3RI37gj+g3z8vuoy40o3hkfm+PwTWcoF9T5IdmfYIWCsO1C9liX6PgbUSQP3SZDZ3lL91BqQETwvuUTgbfEaG0cvoI/PZ8ARYywf25i3Z4e2nwFoZoH79luhXBqzVC9RvgMxmg/K3zoB+wQcE76NwNgwG1zTMGCHz2fAMWGsQ2JtRMtubUdGDIcGHBR+J9GaM8Y7xnvGhSG/Q66Dj/62B6/2NBkR/Xgcdj2gwwZhkTDGmya510Algbz6SHdmLXAedBOo3Y4l+yHXQKaB+s2Q2H5W/dQbMCD4r+DSFs2GOMc9YYCySXeugc8DefCI7vI1cB50H6rdkiX7IddAFoH7LZDYblL91BiwJviz4IoWzYYWxylhjrJNd66ArwN58Jju8jay1CtRvwxL9SoC11oD6bZLZbFD+1hmwIfim4OsUzoYtxjZjh5El89lQCqy1BexNjuzwNnJOtg3Ub9cS/ZBzsh2gfntkNhuUv3UG7Aq+J3iWwtmQZxQY+4wDMp8NyPleHtibL2SHt5FzsgJQv0NL9EPOyfaB+h2R2WxQ/tYZcCj4keAHFM6GY8YJ45RxRuazATnfOwb25pzs8DZyTnYC1O+CzHr7XHj4QvBTwc8i3r5kfGV8o6v92dF1+yHQvas93j1F6jrXG24FYT2Jvm+1j33MwH2/IDOfxVLwdVYCtbwk7OdHe71C3L9+LxULfq+e09Szhvq+VLmsskXt01L7s9S+LLUfSu3pUftS1P4H9Q5ffS7V+07l+XJROyb+n+pfJf06fgLoe5KRLDEAAA==",
  "debug_symbols": "7dvdioJAGMbxe5ljD5wPHadbWZawshBEw2xhie59LZx4XjbqYA8U9jlz9G2wHwh/Ci9qV23Oh3Xd7ruTWn1cVNNty6Hu2nF1UeZ+6nQs29vqNJT9oFaZCYmq2t14lOlrovZ1U43H6TX5NaoLM40aHV6PWp9Oo866x6h5NmqstnFba/LXw9raOKxtZt4Mpy7ehU6LgMOfibLUAA1HDdDIqAEaOTVAw1MDNApqgEagBmjolBzIocmBHAvNUf+4aeOzN8PaBx+/YaHzP3EstEfn4nB8WJCDRSo4mKSCg00qOBilgoNVihyGVSo4WKWCgz+SCg5WqeBw5ECOp1Va5HH/Ivh/9bDk5EAOTw7kKMiBHIEcwGFTciCHJgdyGHIghyUHcjhyIAerVHCwSgUHq1RwsEoFB6sUORyrVHCwSgUHq1RwsEoFhyMHcrBKBQerVHAstEpn+mPBLbRK5+JYaJXOwjEuNn3dNPVhjW+3jKe/yr4uN001LffndgtXh+9jvBI/f+y7bbU799Vtp/u1cfsf",
  "file_map": {
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "50": {
      "source": "use std::hash::poseidon2::Poseidon2;\n\nglobal NUM_HASHES: u32 = 2;\nglobal HASH_LENGTH: u32 = 10;\n\n#[no_predicates]\npub fn poseidon_hash<let N: u32>(inputs: [Field; N]) -> Field {\n    Poseidon2::hash(inputs, inputs.len())\n}\n\nfn main(\n    to_hash: [[Field; HASH_LENGTH]; NUM_HASHES],\n    enable: [bool; NUM_HASHES],\n) -> pub [Field; NUM_HASHES + 1] {\n    let mut result = [0; NUM_HASHES + 1];\n    for i in 0..NUM_HASHES {\n        let enable = enable[i];\n        let to_hash = to_hash[i];\n        if enable {\n            result[i] = poseidon_hash(to_hash);\n        }\n    }\n\n    // We want to make sure that the function marked with `#[no_predicates]` with a numeric generic\n    // is monomorphized correctly.\n    let mut double_preimage = [0; 20];\n    for i in 0..HASH_LENGTH * 2 {\n        double_preimage[i] = to_hash[0][i % HASH_LENGTH];\n    }\n    result[NUM_HASHES] = poseidon_hash(double_preimage);\n\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
