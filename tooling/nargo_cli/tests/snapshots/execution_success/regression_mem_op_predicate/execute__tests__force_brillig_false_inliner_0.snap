---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "idx",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _12",
    "private parameters indices : [_0, _1, _2, _3, _4, _5]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "INIT (id: 0, len: 5, witnesses: [_0, _1, _2, _3, _4])",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _5) 4294967293 ], EXPR [ 4294967296 ]], outputs: [_6, _7]",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "EXPR [ (1, _5) (-4294967296, _6) (-1, _7) 4294967293 ]",
    "EXPR [ (-1, _5, _6) (1, _5) (-1, _8) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _8) 0 ], value: EXPR [ (1, _9) 0 ]) ",
    "INIT (id: 1, len: 5, witnesses: [_0, _1, _2, _3, _4])",
    "EXPR [ (1, _6, _9) (-10, _6) (-1, _10) 10 ]",
    "MEM (id: 1, write EXPR [ (1, _10) 0 ] at: EXPR [ (1, _8) 0 ]) ",
    "EXPR [ (-1, _11) 4 ]",
    "MEM (id: 1, read at: EXPR [ (1, _11) 0 ], value: EXPR [ (1, _12) 0 ]) ",
    "EXPR [ (1, _4, _6) (-1, _6, _12) (1, _12) -111 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "nZHBDoMgDED/pWcOso2x+SvLYlCrISFoEJYsxn9fBd30sGTZhUdbXtPQEWosQ1to23QD5LcRSqeN0W1hukp53VnKjhODNSy8Q6QUbOpk9cqh9ZDbYAyDhzIhPhp6ZSO9clTNGKCtidSw0Qbn28Q+dvZd5Se+yFyIty5+96VYfSn/8a/nxT9ke/9Okaq02/0YSFIYXOJ5jSfPEji1IBwSjgmnBJFwTpAJ1OQ4zZM5rUqDy0KaYKvNfvyzXyvrBnvXVVgHh/NksUazvgA=",
  "file_map": {
    "50": {
      "source": "fn main(mut x: [u32; 5], idx: u32) {\n    // We should not hit out of bounds here as we have a predicate\n    // that should not be hit\n    if idx as u32 < 3 {\n        x[idx] = 10;\n    }\n    assert(x[4] == 111);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
