---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/+1dD5hcVXU/bzeb3c3uZrP/s8lusktCAoTIvTOzOzPBQEL4m0AgECAQSNjZnSFULBUrlgoVS4WKpULFUqGiVKhYKlQsFSoWhYqlQsVSoWKpULFUqFgqViwKvivvwp2Z+za7e3/nffd9n+f77vde7rycPefe3/2d88vMTgJ63fYERA8Er9/Pi+Yaqd6iR2hDdBVuJoG+hCVckO8Mn28pRGCs7Uh03xCtv9qLpnDMD0dzOFrC0RqOBeFoC0d7ODrCsTAcneFYFI6ucHSHoyccveHoC0d/OAbCsTgcg+FYEo6l4RgKx3A4loVjefTzR3UwjdG1IfrB5lyjZW6eZa7JMjffMtdsmWuxzLVa5hZY5tosc+2WuQ7L3ELLXKdlbpFlrssy122Z67HM9Vrm+ixz/Za5AcvcYsvcoGVuiWVuqWVuyDI3bJlbZplbbpkbscyNRnOmjUbXDdFVuFkV6WTFeC5XzmfKMisnRKZYKoyJ3FhpvCALcqwwNpUpZLPlQq6QL5aKeVGUuWxZVsaK2UrkrAHgq1xRJmQjyJfKcR7E1+vr1eTuKxOtl5zv6iv3xtrLZjdfwthH2eLiK1OFCdk6d1+iBl9ywRx9jVfqsCrb5uarYMG9bJ+Lr4L1DMmO2fvKx5xHuXC2vvKxZ1t2zs5XZhqekItm4ys/LefIrpn7mtwLf8numfrK75ULZc/MfIkZ8KrsnYkvMSOOln179zU2Q76X/XvzlZtx7ZAD0/rKVWZRh+Ti6XzlZ1XT5GC8r8Is66NcEuOrWJl1rZVL7b7EHOq2HLL5EnPqAeRwvS85x35CLqv1NTXn3kQur/aVdehz5IjhK1Nx6pnkKOFEn+pzAnpTmJqGFqujhOr1pqQZ7z6cASvnDTV+XYPfBxjjCkBcuhnnWsMVFr+ua7iCsIegwdjnpA6BcLIp1n9VMddiZXTdVy+IVpsr6U320HPqoVoF2si4iK6qcSXhDtC+4M1Fg2+FsWcEzHslpbMijcBwVJwy413FGbByjq1IxalVwBhXk98VSa3hakJXpOLUakpnRRqB+SpOWsJlqUj7Rdf99YLo6rMf1Vck9RB3RRohXEXaj3AHaH+mzUURkI4TmfMBwH3V+ELmqqrwassaCjeDSoE1uLhYSFzt8RqGvUHmnWQns5xQ/FPKmvEeyBnwgYTuZErZA4ExrgUCi2sN1xK6kyll1xLv4UcQ6Brym0DfAl5DbejCi8T4QcC9SLIDXg7zVcpYwmXpgDUo3uhQdLcrqL4DVg9xd8C4ChSmSjhQSqbNRR9EZM4Z4L5qfCGxosjxIMIXhizxFi7hZlLtSzYFeXNhPAv0lfMc43FNCqL5QfkaI2zBTkrtLCNUrSlUzHjHOQMeJ7TaKVTGgTHmgcDiWsM8odVOoZIn3qKBILox8puMC4QlY23onJEYLxKWPJNSO8tgvgplS7gsamdddD1YL4hWNuuoXu2oh7jVDq4CCbmOcKA8mGlz0QcRmfNbCUs+6AOnyLFI+MKwnngLl3AzqfZlfQry5sL4eqCvQzzHeFyTItxMIpuUQ4G4SVLtDBOq1mSEGe8G7oCxaicjNgBj3AgEFtcabiS02smIjcRbNBBEdyj5TcaHEZaMtaFzRmJ8EzDnJNXOMMyXrFjCZVE7h0fXI/SCaGVzONWrHfUQt9rBVSAhDyccKI9g2lz0QUTmfCRhyQd94BQ5biJ8YTiKeAuXcDOp9uWoFOTNhfGjgL6O9hzjcU2KcDOJbFKOAeImSbUzRKhaM1WldjZzBryZ4L8lJjYDY9wCBBbXGm4h+G+JiS3EWzQQRHcM+U3GxxKWjLWhc0Zi/DhgzkmqnSGYr8nE1M7W6Hq8XhCtbLZSvdpRD3GrHVwFEnIr4UB5PNPmog8iMucTCEs+6AOnyPE4wheGbcRbuISbSbUv21KQNxfGtwF9neg5xuOaFOFmEtmknATETZJqZymhas141XdibOcMeDuh1c643A6M8WQgsLjW8GRCq53xqryFoxHhyV0R3UnkNxmfQlgy1obOGYnxU4E5J6l2lsJ8jSf2XSo7outpekG0stlB9WpHPcStdnAVSMgdhAPlaUybiz6IyJxPJyz5oA+cIsdTCV8YdhJv4RJuJtW+7ExB3lwY3wn0dYbnGI9rUoSbSWSTciYQN0mqnSWEqjVTBTPeXZwB7yL4ezuFXcAYdwOBxbWGuwn+3k5hN/EWDQTRnUl+k/FZhCVjbeickRifAOacpNpZAvM1lbeEy6J2StF1Ui+IVjYlqlc76iFutYOrQEKWCAfKSabNRR9EZM5ThCUf9IE7K/QxQfjCUCbewiXcTKp9Kacgby6Ml4G+Kp5jPK5JEW4mkU3K2UDcJKl2BglVa3JFM949nAHvIbTayRX3AGM8BwgsrjU8h9BqJ1c8h3iLBoLozia/yfjXCEvG2tA5IzH+NmDOSaqdQZivXMESLovaOTe6vl0viFY251K92lEPcasdXAUS8lzCgfLtTJuLPojInH+dsOSDPnCKHN9G+MJwHvEWLuFmUu3LeSnImwvj5wF9/YbnGI9rUoSbSWST8g4gbpJUO4sJVWtKVZ9kO58z4PMJ/g3U8nxgjO8EAotrDd9J8G+grspbOBoRntwV0b2D/Cbj3yQsGWtD54zE+LuAOSepdhbDfJUS+yTbBdH13XpBtLK5gOrVjnqIW+3gKpCQFxAOlO9m2lz0QUTm/FuEJR/0gVPk+C7CF4YLibdwCTeTal8uTEHeXBi/EOjrtz3HeFyTItxMIpuU9wBxk6TaGSBUrSlNmvFexBnwRQRXO5MXAWO8GAgsrjW8mOBqZ/Ji4i0aCKJ7D/lNxr9DWDLWhs4ZifH3AnNOUu0MwHyVSpZwWdTOJdH1fXpBtLK5hOrVjnqIW+3gKpCQlxAOlO9j2lz0QUTm/LuEJR/0gVPk+F7CF4ZLibdwCTeTal8uTUHeXBi/FOjr9zzHeFyTItxMIpuU9wNxk6Ta6SdUrcmVzHgv4wz4MoJ/kq10GTDGy4HA4lrDywn+SbbS5cRbNBBE937ym4x/n7BkrA2dMxLjHwDmnKTa6Yf5yk1YwmVRO1dE1w/qBdHK5gqqVzvqIW61g6tAQl5BOFB+kGlz0QcRmfMfEJZ80AdOkeMHCF8YriTewiXcTKp9uTIFeXNh/Eqgrz/0HONxTYpwM4lsUj4ExE2SaqePULWmUPUN1FdxBnwVwf93UXEVMMargcDiWsOrCa12CuJq4i0aCKL7EPlNxn9EWDLWhs4ZifEPA3NOUu30wXzlE/sG6mui60f0gmhlcw3Vqx31ELfawVUgIa8hHCg/wrS56IOIzPmPCUs+6AOnyPHDhC8M1xJv4RJuJtW+XJuCvLkwfi3Q1594jvG4JkW4mUQ2KR8F4iZJtdNLqFpTrXau4wz4OsKrneuAMV4PBBbXGl5PeLVzPfEWDQTRfZT8JuM/JSwZa0PnjMT4x4A5J6l2emG+klM7N0TXj+sF0crmBqpXO+ohbrWDq0BC3kA4UH6caXPRBxGZ8ycISz7oA6fI8WOELww3Em/hEm4mPxH6uDEFeXNh/Eagrz/zHONxTYpwM4lsUj4JxE2SaqeHULVmouo72W7iDPgmQqudieJNwBhvBgKLaw1vJrTamSjeTLxFA0F0nyS/yfjPCUvG2tA5IzH+KWDOSaqdHpivicS+k+2W6PppvSBa2dxC9WpHPcStdnAVSMhbCAfKTzNtLvogInP+C8KSD/rAKXL8FOELw63EW7iEm0m1L7emIG8ujN8K9PWXnmM8rkkRbiaRTcpngLhJUu10E6rWTOTMeG/jDPg2gqud3G3AGG8HAotrDW8nuNrJ3U68RQNBdJ8hv8n4rwhLxtrQOSMx/llgzkmqnW6Yr4msJVwWtXNHdP2cXhCtbO6gerWjHuJWO7gKJOQdhAPl55g2F30QkTn/NWHJB33gFDl+lvCF4U7iLVzCzaTalztTkDcXxu8E+vobzzEe16QIN5PIJuXzQNwkqXa6CFVrpqre27mLM+C7CP6/ixbvAsZ4NxBYXGt4N6HVzlTxbuItGgii+zz5TcZ/S1gy1obOGYnxLwBzTlLtdMF8TSX23s490fWLekG0srmH6tWOeohb7eAqkJD3EA6UX2TaXPRBROb8d4QlH/SBU+T4BcIXhnuJt3AJN5NqX+5NQd5cGL8X6OtLnmM8rkkRbiaRTcqXgbhJUu0sIlStmSyb8d7HGfB9hFY7k+X7gDHeDwQW1xreT2i1M1m+n3iLBoLovkx+k/HfE5aMtaFzRmL8K8Cck1Q7i2C+Jqcs4bKonQei61f1gmhl8wDVqx31ELfawVUgIR8gHCi/yrS56IOIzPkfCEs+6AOnyPErhC8MDxJv4RJuJtW+PJiCvLkw/iDQ1z96jvEvkb1JEW4mkU3K14C4SVLtdBKq1siq93Ye4gz4IUKrHVl8CBjjw0Bgca3hw4RWO7L4MPEWDQTRfY38JuN/IiwZa0PnjMT414E5J6l2OmG+ZGLv7TwSXb+hF0Qrm0eoXu2oh7jVDq4CCfkI4UD5DabNRR9EZM7/TFjyQR84RY5fJ3xheJR4C5dwM6n25dEU5M2F8UeBvv7Fc4zHNSnCzSSySfkmEDdJqp2FhKo1pSq18xhnwI8R/H8XLT4GjPFxILC41vBxQqudUvFx4i0aCKL7JvlNxv9KWDLWhs4ZifFvAXNOUu0shPkqJaZ2noiu39YLopXNE1SvdtRD3GoHV4GEfIJwoPw20+aiDyIy538jLPmgD5wix28RvjA8SbyFS7iZVPvyZAry5sL4k0Bf/+45xuOaFOFmEtmkfAeImyTVTgehak2hYMb7FGfATxH8G6gLTwFjfBoILK41fJrg30BdeJp4iwaC6L5DfpPxfxCWjLWhc0Zi/LvAnJNUOx0wX4W8JVwWtfNMdP2eXhCtbJ6herWjHuJWO7gKJOQzhAPl95g2F30QkTn/J2HJB33gFDl+l/CF4VniLVzCzaTal2dTkDcXxp8F+vovzzEe16QIN5PIJuX7QNwkqXbaCVVrclVq5znOgJ8jtNrJFZ4Dxvg8EFhca/g8odVOrvA88RYNBNF9n/wm4/8mLBlrQ+eMxPgPgDknqXbaYb5yiamdF6LrD/WCaGXzAtWrHfUQt9rBVSAhXyAcKH/ItLnog4jM+X8ISz7oA6fI8QeELwwvEm/hEm4m1b68mIK8uTD+ItDX/3qO8bgmRbiZRDYpPwLiJkm100aoWlOUZrwvcQb8EqHVTlG+BIzxx0Bgca3hjwmtdopVeQtHI8KTuyK6H5HfZPx/hCVjbeickRj/CTDnJNVOG8xXUVjCZVE7L0fXn+oF0crmZapXO+ohbrWDq0BCvkw4UP6UaXPRBxGZ8/8TlnzQB06R408IXxheId7CJdxMqn15JQV5c2H8FaCvn3mO8bgmRbiZRDYpPwfiJkm1s4BQtSYvzHhf5Qz4VUKrnbx4FRjja0Bgca3ha4RWO3nxGvEWDQTR/Zz8JmOVNGqfyTB0zkiMB8Cck1Q7C2C+xiuWcFnUTkO0CI21yka9UDunHuJWO7gKJGRDgANlY8CzueiDiMx5Hph80AdOOQwCfGFoCngLl3AzqfalKQV5c2G8CYjx+Z5jPK5JEW4mkU1KMxA3SaqdVkLVmlLVN1C3BIwBK+dYtVMqtwAPQSvwcHKtYWuAVjulcitz0UAQXXPgNxkvSInaQWK8LaVqpxXmq5TYN1C3R4vQUats2i1qpyMBtYOrQEK2A0HZEfBsLvogInNe6HknqMixjaHr7/Rc7ah96UxB3lwY7wRifJHnGI9rUoSbSWST0pVStdNCqFqTqXpvpztgDLgbrnYyoht4CHo8VztqDXvgaicjejxXO4rougK/ybg3JWoHifG+lKqdFpgvmdh7O/3RIgzUKpt+i9oZSEDt4CqQkP1AUA4EPJuLPojInBd73gkqcuxj6PoHPVc7al8GU5A3F8YHgRhf4jnG45oU4WYS2aQsTanaaSZYrZk04x0KGAMegqsdMTkEPATDnqsdtYbDcLUjJoc9VzuK6JYGfpPxspSoHSTGl6dU7TTjfJUs4bKonZFoEUZrlc2IRe2MJqB2gBVIjgBBORrwbC76ICJz3sfzTlCR43KGrn+F52pH7cuKFOTNhfEVQIyv9BzjcU2KcDOJbFL2TanamU+oWjNe9Um2VQFjwKvgame8vAp4CFZ7rnbUGq6Gq53x8mrP1Y4iun0Dv8l4v5SoHSTG90+p2pkP8zWe2CfZDogWYU2tsjnAonbWJKB2cBVIyAOAoFwT8Gwu+iAicz7Q805QkeP+DF3/Ws/VjtqXtSnImwvja4EYf4vnGI9rUoSbSWSTclBK1U4ToWqNrPpONhEwBizgakdKATwE0nO1o9ZQwtWOrMpbOJotbwTRHRT4TcaZlKgdJMazKVU7TTBfMrHvZMtFizBWq2xyFrUzloDawVUgIXNAUI4FPJuLPojInMc97wQVOWYZuv6852pH7Us+BXlzYTwPxHjBc4zHNSnCzSSySSmmVO3Mw/mq+r2ddQFjwOsCvN+DPVcoKu+DjRUG+WVRFYpQioHfpPfWlKgKJC7XMxM9Yk/WM2A8SUJtJB5CPSRgDPgQBkI91HNCVXkf+itChfnakBJCReJyo+eEqvZkY8oJtQG4Hma8hwWMAR/GcFgPA4Jtk+fkrNZuE4O83xT8iuhdfR2eEqJHYvwIz/+JRO3JEQzn5UjP/xlQYeZIpiaOC5dHAnF5lOe4jOMz4WYSyWdHe45xtcdHMwg0JA5VbKopHIn8BdG5aaE33z7T9/OM+ybjfr5x32zctxj3rcb9AuO+zbhvN+47jPuFxn2ncb/IuO8y7ruN+x7jvte47zPu+437AeN+sXE/aNwvMe6XGvdDxv2wcb/MuF9u3I8Y96PR/THhHzaHY0s4jg3HceHYGo7jw3FCOLaF48RwnBSO7eE4ORynhOPUcOwIx2nhOD0cO8NxRjjODMeucOwOx1nhmAhHKRzqt5enwqE+118Jx9nh2GPwMUUxKdsQXYWb/fJDNdpXpuKEW3lM9RnIuvjaXHuepubua0v92ZRz9XWs7ZyLufk6zs4ZYi6+tsbwT7Eye1/Hx3NZYba+TpiOF/Oz87VtWo7NVWbj68S98XVu5r5O2jv3j83U1/aZ1BExM18nz6wmiZn4OmWm9S2/d1+nzrxWTu7N147Z1N389L5Om10Nz0zn6/TZ9gP5eF87Z99b5ON8nTGXPqVg93XmXHyFr9h87Zqbr+J4pd7X7jn6CuMStb7OmrsvmctU+5pw8ZUtC9NXyc2XrOTe9DXp6musmNG+ptx9ZcuvO5NliK+K8iYrIF/qY2BnA3zpXn8PUC9pPaCspm2smjNf0x+364qurdG1yXgW+S6c9j+fx7/U/pt5/Gebqd7MuaaadQ1i1r/RWOtWnlgnAkt8jTU/szZG85l5VG8NNX+eVzPfOINnbdjUry2yxFf791otsZpzGlsdVG+1+6I/ftoU46vZeN18vrnmWa497LHEFMT87D6eGN44U708/oXtTPUZ9701eZq42gCKQfvTGGiiemuoeU0/21ITX4CPT9bGYuMXbRozvcZcX0ysCww/wD3NaP9tPP6tmFlg3LfVvKb3zsZpQcyfG2qu0z07Xb218ZD2qffKjFfn8QsgJsPp8qMBAA==",
  "debug_symbols": "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",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "50": {
      "source": "fn main(input: Field) -> pub Field {\n    std::hash::hash_to_field(&[input])\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix",
    "directive_invert",
    "directive_integer_quotient"
  ]
}
