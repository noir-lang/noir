---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _356",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Array([Witness(2), Witness(3), Witness(4), Witness(5), Witness(6), Witness(7), Witness(8), Witness(9), Witness(10), Witness(11), Witness(12), Witness(13), Witness(14), Witness(15), Witness(16), Witness(17), Witness(18), Witness(19), Witness(20), Witness(21), Witness(22), Witness(23), Witness(24), Witness(25), Witness(26), Witness(27), Witness(28), Witness(29), Witness(30), Witness(31), Witness(32), Witness(33)])]",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "BLACKBOX::RANGE [(_9, 8)] []",
    "BLACKBOX::RANGE [(_10, 8)] []",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "BLACKBOX::RANGE [(_16, 8)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "BLACKBOX::RANGE [(_18, 8)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "BLACKBOX::RANGE [(_20, 8)] []",
    "BLACKBOX::RANGE [(_21, 8)] []",
    "BLACKBOX::RANGE [(_22, 8)] []",
    "BLACKBOX::RANGE [(_23, 8)] []",
    "BLACKBOX::RANGE [(_24, 8)] []",
    "BLACKBOX::RANGE [(_25, 8)] []",
    "BLACKBOX::RANGE [(_26, 8)] []",
    "BLACKBOX::RANGE [(_27, 8)] []",
    "BLACKBOX::RANGE [(_28, 8)] []",
    "BLACKBOX::RANGE [(_29, 8)] []",
    "BLACKBOX::RANGE [(_30, 8)] []",
    "BLACKBOX::RANGE [(_31, 8)] []",
    "BLACKBOX::RANGE [(_32, 8)] []",
    "BLACKBOX::RANGE [(_33, 8)] []",
    "EXPR [ (1, _0) (-1, _2) (-256, _3) (-65536, _4) (-16777216, _5) (-4294967296, _6) (-1099511627776, _7) (-281474976710656, _8) (-72057594037927936, _9) (-18446744073709551616, _10) (-4722366482869645213696, _11) (-1208925819614629174706176, _12) (-309485009821345068724781056, _13) (-79228162514264337593543950336, _14) (-20282409603651670423947251286016, _15) (-5192296858534827628530496329220096, _16) (-1329227995784915872903807060280344576, _17) (-340282366920938463463374607431768211456, _18) (-87112285931760246646623899502532662132736, _19) (-22300745198530623141535718272648361505980416, _20) (-5708990770823839524233143877797980545530986496, _21) (-1461501637330902918203684832716283019655932542976, _22) (-374144419156711147060143317175368453031918731001856, _23) (-95780971304118053647396689196894323976171195136475136, _24) (-24519928653854221733733552434404946937899825954937634816, _25) (-6277101735386680763835789423207666416102355444464034512896, _26) (-1606938044258990275541962092341162602522202993782792835301376, _27) (-411376139330301510538742295639337626245683966408394965837152256, _28) (-105312291668557186697918027683670432318895095400549111254310977536, _29) (-26959946667150639794667015087019630673637144422540572481103610249216, _30) (-6901746346790563787434755862277025452451108972170386555162524223799296, _31) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _32) (-452312848583266388373324160190187140051835877600158453279131187530910662656, _33) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: -48 })], outputs: [Simple(Witness(34))]",
    "EXPR [ (1, _33, _34) (-48, _34) (1, _35) -1 ]",
    "EXPR [ (1, _33, _35) (-48, _35) 0 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 208 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(36)), Simple(Witness(37))]",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 8)] []",
    "EXPR [ (1, _33) (-256, _36) (-1, _37) 208 ]",
    "EXPR [ (1, _35, _36) (-1, _36) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: -100 })], outputs: [Simple(Witness(38))]",
    "EXPR [ (1, _32, _38) (-100, _38) (1, _39) -1 ]",
    "EXPR [ (1, _32, _39) (-100, _39) 0 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 156 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(40)), Simple(Witness(41))]",
    "BLACKBOX::RANGE [(_40, 1)] []",
    "BLACKBOX::RANGE [(_41, 8)] []",
    "EXPR [ (1, _32) (-256, _40) (-1, _41) 156 ]",
    "EXPR [ (-1, _40) (-1, _42) 1 ]",
    "EXPR [ (-1, _35, _39) (1, _35) (-1, _43) 0 ]",
    "EXPR [ (1, _42, _43) (-1, _43) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: -78 })], outputs: [Simple(Witness(44))]",
    "EXPR [ (1, _31, _44) (-78, _44) (1, _45) -1 ]",
    "EXPR [ (1, _31, _45) (-78, _45) 0 ]",
    "EXPR [ (-1, _35, _43) (1, _35) (-1, _46) 0 ]",
    "EXPR [ (-1, _45) (-1, _47) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 178 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(48)), Simple(Witness(49))]",
    "BLACKBOX::RANGE [(_48, 1)] []",
    "BLACKBOX::RANGE [(_49, 8)] []",
    "EXPR [ (1, _31) (-256, _48) (-1, _49) 178 ]",
    "EXPR [ (-1, _48) (-1, _50) 1 ]",
    "EXPR [ (1, _46, _47) (-1, _51) 0 ]",
    "EXPR [ (1, _50, _51) (-1, _51) 0 ]",
    "EXPR [ (-1, _51) (-1, _52) 1 ]",
    "EXPR [ (1, _35, _43) (-1, _35) (-1, _53) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: -114 })], outputs: [Simple(Witness(54))]",
    "EXPR [ (1, _30, _54) (-114, _54) (1, _55) -1 ]",
    "EXPR [ (1, _30, _55) (-114, _55) 0 ]",
    "EXPR [ (-1, _52, _53) (-1, _51) (-1, _56) 1 ]",
    "EXPR [ (-1, _55) (-1, _57) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: 142 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(58)), Simple(Witness(59))]",
    "BLACKBOX::RANGE [(_58, 1)] []",
    "BLACKBOX::RANGE [(_59, 8)] []",
    "EXPR [ (1, _30) (-256, _58) (-1, _59) 142 ]",
    "EXPR [ (-1, _58) (-1, _60) 1 ]",
    "EXPR [ (1, _56, _57) (-1, _61) 0 ]",
    "EXPR [ (1, _60, _61) (-1, _61) 0 ]",
    "EXPR [ (-1, _61) (-1, _62) 1 ]",
    "EXPR [ (1, _52, _53) (1, _51) (-1, _63) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: -225 })], outputs: [Simple(Witness(64))]",
    "EXPR [ (1, _29, _64) (-225, _64) (1, _65) -1 ]",
    "EXPR [ (1, _29, _65) (-225, _65) 0 ]",
    "EXPR [ (-1, _62, _63) (-1, _61) (-1, _66) 1 ]",
    "EXPR [ (-1, _65) (-1, _67) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(68)), Simple(Witness(69))]",
    "BLACKBOX::RANGE [(_68, 1)] []",
    "BLACKBOX::RANGE [(_69, 8)] []",
    "EXPR [ (1, _29) (-256, _68) (-1, _69) 31 ]",
    "EXPR [ (-1, _68) (-1, _70) 1 ]",
    "EXPR [ (1, _66, _67) (-1, _71) 0 ]",
    "EXPR [ (1, _70, _71) (-1, _71) 0 ]",
    "EXPR [ (-1, _71) (-1, _72) 1 ]",
    "EXPR [ (1, _62, _63) (1, _61) (-1, _73) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: -49 })], outputs: [Simple(Witness(74))]",
    "EXPR [ (1, _28, _74) (-49, _74) (1, _75) -1 ]",
    "EXPR [ (1, _28, _75) (-49, _75) 0 ]",
    "EXPR [ (-1, _72, _73) (-1, _71) (-1, _76) 1 ]",
    "EXPR [ (-1, _75) (-1, _77) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 207 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(78)), Simple(Witness(79))]",
    "BLACKBOX::RANGE [(_78, 1)] []",
    "BLACKBOX::RANGE [(_79, 8)] []",
    "EXPR [ (1, _28) (-256, _78) (-1, _79) 207 ]",
    "EXPR [ (-1, _78) (-1, _80) 1 ]",
    "EXPR [ (1, _76, _77) (-1, _81) 0 ]",
    "EXPR [ (1, _80, _81) (-1, _81) 0 ]",
    "EXPR [ (-1, _81) (-1, _82) 1 ]",
    "EXPR [ (1, _72, _73) (1, _71) (-1, _83) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: -160 })], outputs: [Simple(Witness(84))]",
    "EXPR [ (1, _27, _84) (-160, _84) (1, _85) -1 ]",
    "EXPR [ (1, _27, _85) (-160, _85) 0 ]",
    "EXPR [ (-1, _82, _83) (-1, _81) (-1, _86) 1 ]",
    "EXPR [ (-1, _85) (-1, _87) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 96 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(88)), Simple(Witness(89))]",
    "BLACKBOX::RANGE [(_88, 1)] []",
    "BLACKBOX::RANGE [(_89, 8)] []",
    "EXPR [ (1, _27) (-256, _88) (-1, _89) 96 ]",
    "EXPR [ (-1, _88) (-1, _90) 1 ]",
    "EXPR [ (1, _86, _87) (-1, _91) 0 ]",
    "EXPR [ (1, _90, _91) (-1, _91) 0 ]",
    "EXPR [ (-1, _91) (-1, _92) 1 ]",
    "EXPR [ (1, _82, _83) (1, _81) (-1, _93) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: -41 })], outputs: [Simple(Witness(94))]",
    "EXPR [ (1, _26, _94) (-41, _94) (1, _95) -1 ]",
    "EXPR [ (1, _26, _95) (-41, _95) 0 ]",
    "EXPR [ (-1, _92, _93) (-1, _91) (-1, _96) 1 ]",
    "EXPR [ (-1, _95) (-1, _97) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 215 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(98)), Simple(Witness(99))]",
    "BLACKBOX::RANGE [(_98, 1)] []",
    "BLACKBOX::RANGE [(_99, 8)] []",
    "EXPR [ (1, _26) (-256, _98) (-1, _99) 215 ]",
    "EXPR [ (-1, _98) (-1, _100) 1 ]",
    "EXPR [ (1, _96, _97) (-1, _101) 0 ]",
    "EXPR [ (1, _100, _101) (-1, _101) 0 ]",
    "EXPR [ (-1, _101) (-1, _102) 1 ]",
    "EXPR [ (1, _92, _93) (1, _91) (-1, _103) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: -184 })], outputs: [Simple(Witness(104))]",
    "EXPR [ (1, _25, _104) (-184, _104) (1, _105) -1 ]",
    "EXPR [ (1, _25, _105) (-184, _105) 0 ]",
    "EXPR [ (-1, _102, _103) (-1, _101) (-1, _106) 1 ]",
    "EXPR [ (-1, _105) (-1, _107) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 72 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(108)), Simple(Witness(109))]",
    "BLACKBOX::RANGE [(_108, 1)] []",
    "BLACKBOX::RANGE [(_109, 8)] []",
    "EXPR [ (1, _25) (-256, _108) (-1, _109) 72 ]",
    "EXPR [ (-1, _108) (-1, _110) 1 ]",
    "EXPR [ (1, _106, _107) (-1, _111) 0 ]",
    "EXPR [ (1, _110, _111) (-1, _111) 0 ]",
    "EXPR [ (-1, _111) (-1, _112) 1 ]",
    "EXPR [ (1, _102, _103) (1, _101) (-1, _113) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: -80 })], outputs: [Simple(Witness(114))]",
    "EXPR [ (1, _24, _114) (-80, _114) (1, _115) -1 ]",
    "EXPR [ (1, _24, _115) (-80, _115) 0 ]",
    "EXPR [ (-1, _112, _113) (-1, _111) (-1, _116) 1 ]",
    "EXPR [ (-1, _115) (-1, _117) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 176 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(118)), Simple(Witness(119))]",
    "BLACKBOX::RANGE [(_118, 1)] []",
    "BLACKBOX::RANGE [(_119, 8)] []",
    "EXPR [ (1, _24) (-256, _118) (-1, _119) 176 ]",
    "EXPR [ (-1, _118) (-1, _120) 1 ]",
    "EXPR [ (1, _116, _117) (-1, _121) 0 ]",
    "EXPR [ (1, _120, _121) (-1, _121) 0 ]",
    "EXPR [ (-1, _121) (-1, _122) 1 ]",
    "EXPR [ (1, _112, _113) (1, _111) (-1, _123) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: -69 })], outputs: [Simple(Witness(124))]",
    "EXPR [ (1, _23, _124) (-69, _124) (1, _125) -1 ]",
    "EXPR [ (1, _23, _125) (-69, _125) 0 ]",
    "EXPR [ (-1, _122, _123) (-1, _121) (-1, _126) 1 ]",
    "EXPR [ (-1, _125) (-1, _127) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 187 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(128)), Simple(Witness(129))]",
    "BLACKBOX::RANGE [(_128, 1)] []",
    "BLACKBOX::RANGE [(_129, 8)] []",
    "EXPR [ (1, _23) (-256, _128) (-1, _129) 187 ]",
    "EXPR [ (-1, _128) (-1, _130) 1 ]",
    "EXPR [ (1, _126, _127) (-1, _131) 0 ]",
    "EXPR [ (1, _130, _131) (-1, _131) 0 ]",
    "EXPR [ (-1, _131) (-1, _132) 1 ]",
    "EXPR [ (1, _122, _123) (1, _121) (-1, _133) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: -182 })], outputs: [Simple(Witness(134))]",
    "EXPR [ (1, _22, _134) (-182, _134) (1, _135) -1 ]",
    "EXPR [ (1, _22, _135) (-182, _135) 0 ]",
    "EXPR [ (-1, _132, _133) (-1, _131) (-1, _136) 1 ]",
    "EXPR [ (-1, _135) (-1, _137) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 74 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(138)), Simple(Witness(139))]",
    "BLACKBOX::RANGE [(_138, 1)] []",
    "BLACKBOX::RANGE [(_139, 8)] []",
    "EXPR [ (1, _22) (-256, _138) (-1, _139) 74 ]",
    "EXPR [ (-1, _138) (-1, _140) 1 ]",
    "EXPR [ (1, _136, _137) (-1, _141) 0 ]",
    "EXPR [ (1, _140, _141) (-1, _141) 0 ]",
    "EXPR [ (-1, _141) (-1, _142) 1 ]",
    "EXPR [ (1, _132, _133) (1, _131) (-1, _143) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: -129 })], outputs: [Simple(Witness(144))]",
    "EXPR [ (1, _21, _144) (-129, _144) (1, _145) -1 ]",
    "EXPR [ (1, _21, _145) (-129, _145) 0 ]",
    "EXPR [ (-1, _142, _143) (-1, _141) (-1, _146) 1 ]",
    "EXPR [ (-1, _145) (-1, _147) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(148)), Simple(Witness(149))]",
    "BLACKBOX::RANGE [(_148, 1)] []",
    "BLACKBOX::RANGE [(_149, 8)] []",
    "EXPR [ (1, _21) (-256, _148) (-1, _149) 127 ]",
    "EXPR [ (-1, _148) (-1, _150) 1 ]",
    "EXPR [ (1, _146, _147) (-1, _151) 0 ]",
    "EXPR [ (1, _150, _151) (-1, _151) 0 ]",
    "EXPR [ (-1, _151) (-1, _152) 1 ]",
    "EXPR [ (1, _142, _143) (1, _141) (-1, _153) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: -129 })], outputs: [Simple(Witness(154))]",
    "EXPR [ (1, _20, _154) (-129, _154) (1, _155) -1 ]",
    "EXPR [ (1, _20, _155) (-129, _155) 0 ]",
    "EXPR [ (-1, _152, _153) (-1, _151) (-1, _156) 1 ]",
    "EXPR [ (-1, _155) (-1, _157) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(158)), Simple(Witness(159))]",
    "BLACKBOX::RANGE [(_158, 1)] []",
    "BLACKBOX::RANGE [(_159, 8)] []",
    "EXPR [ (1, _20) (-256, _158) (-1, _159) 127 ]",
    "EXPR [ (-1, _158) (-1, _160) 1 ]",
    "EXPR [ (1, _156, _157) (-1, _161) 0 ]",
    "EXPR [ (1, _160, _161) (-1, _161) 0 ]",
    "EXPR [ (-1, _161) (-1, _162) 1 ]",
    "EXPR [ (1, _152, _153) (1, _151) (-1, _163) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: -88 })], outputs: [Simple(Witness(164))]",
    "EXPR [ (1, _19, _164) (-88, _164) (1, _165) -1 ]",
    "EXPR [ (1, _19, _165) (-88, _165) 0 ]",
    "EXPR [ (-1, _162, _163) (-1, _161) (-1, _166) 1 ]",
    "EXPR [ (-1, _165) (-1, _167) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 168 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(168)), Simple(Witness(169))]",
    "BLACKBOX::RANGE [(_168, 1)] []",
    "BLACKBOX::RANGE [(_169, 8)] []",
    "EXPR [ (1, _19) (-256, _168) (-1, _169) 168 ]",
    "EXPR [ (-1, _168) (-1, _170) 1 ]",
    "EXPR [ (1, _166, _167) (-1, _171) 0 ]",
    "EXPR [ (1, _170, _171) (-1, _171) 0 ]",
    "EXPR [ (-1, _171) (-1, _172) 1 ]",
    "EXPR [ (1, _162, _163) (1, _161) (-1, _173) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: -93 })], outputs: [Simple(Witness(174))]",
    "EXPR [ (1, _18, _174) (-93, _174) (1, _175) -1 ]",
    "EXPR [ (1, _18, _175) (-93, _175) 0 ]",
    "EXPR [ (-1, _172, _173) (-1, _171) (-1, _176) 1 ]",
    "EXPR [ (-1, _175) (-1, _177) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 163 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(178)), Simple(Witness(179))]",
    "BLACKBOX::RANGE [(_178, 1)] []",
    "BLACKBOX::RANGE [(_179, 8)] []",
    "EXPR [ (1, _18) (-256, _178) (-1, _179) 163 ]",
    "EXPR [ (-1, _178) (-1, _180) 1 ]",
    "EXPR [ (1, _176, _177) (-1, _181) 0 ]",
    "EXPR [ (1, _180, _181) (-1, _181) 0 ]",
    "EXPR [ (-1, _181) (-1, _182) 1 ]",
    "EXPR [ (1, _172, _173) (1, _171) (-1, _183) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: -40 })], outputs: [Simple(Witness(184))]",
    "EXPR [ (1, _17, _184) (-40, _184) (1, _185) -1 ]",
    "EXPR [ (1, _17, _185) (-40, _185) 0 ]",
    "EXPR [ (-1, _182, _183) (-1, _181) (-1, _186) 1 ]",
    "EXPR [ (-1, _185) (-1, _187) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 216 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(188)), Simple(Witness(189))]",
    "BLACKBOX::RANGE [(_188, 1)] []",
    "BLACKBOX::RANGE [(_189, 8)] []",
    "EXPR [ (1, _17) (-256, _188) (-1, _189) 216 ]",
    "EXPR [ (-1, _188) (-1, _190) 1 ]",
    "EXPR [ (1, _186, _187) (-1, _191) 0 ]",
    "EXPR [ (1, _190, _191) (-1, _191) 0 ]",
    "EXPR [ (-1, _191) (-1, _192) 1 ]",
    "EXPR [ (1, _182, _183) (1, _181) (-1, _193) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: -51 })], outputs: [Simple(Witness(194))]",
    "EXPR [ (1, _16, _194) (-51, _194) (1, _195) -1 ]",
    "EXPR [ (1, _16, _195) (-51, _195) 0 ]",
    "EXPR [ (-1, _192, _193) (-1, _191) (-1, _196) 1 ]",
    "EXPR [ (-1, _195) (-1, _197) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 205 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(198)), Simple(Witness(199))]",
    "BLACKBOX::RANGE [(_198, 1)] []",
    "BLACKBOX::RANGE [(_199, 8)] []",
    "EXPR [ (1, _16) (-256, _198) (-1, _199) 205 ]",
    "EXPR [ (-1, _198) (-1, _200) 1 ]",
    "EXPR [ (1, _196, _197) (-1, _201) 0 ]",
    "EXPR [ (1, _200, _201) (-1, _201) 0 ]",
    "EXPR [ (-1, _201) (-1, _202) 1 ]",
    "EXPR [ (1, _192, _193) (1, _191) (-1, _203) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: -232 })], outputs: [Simple(Witness(204))]",
    "EXPR [ (1, _15, _204) (-232, _204) (1, _205) -1 ]",
    "EXPR [ (1, _15, _205) (-232, _205) 0 ]",
    "EXPR [ (-1, _202, _203) (-1, _201) (-1, _206) 1 ]",
    "EXPR [ (-1, _205) (-1, _207) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 24 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(208)), Simple(Witness(209))]",
    "BLACKBOX::RANGE [(_208, 1)] []",
    "BLACKBOX::RANGE [(_209, 8)] []",
    "EXPR [ (1, _15) (-256, _208) (-1, _209) 24 ]",
    "EXPR [ (-1, _208) (-1, _210) 1 ]",
    "EXPR [ (1, _206, _207) (-1, _211) 0 ]",
    "EXPR [ (1, _210, _211) (-1, _211) 0 ]",
    "EXPR [ (-1, _211) (-1, _212) 1 ]",
    "EXPR [ (1, _202, _203) (1, _201) (-1, _213) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: -72 })], outputs: [Simple(Witness(214))]",
    "EXPR [ (1, _14, _214) (-72, _214) (1, _215) -1 ]",
    "EXPR [ (1, _14, _215) (-72, _215) 0 ]",
    "EXPR [ (-1, _212, _213) (-1, _211) (-1, _216) 1 ]",
    "EXPR [ (-1, _215) (-1, _217) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 184 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(218)), Simple(Witness(219))]",
    "BLACKBOX::RANGE [(_218, 1)] []",
    "BLACKBOX::RANGE [(_219, 8)] []",
    "EXPR [ (1, _14) (-256, _218) (-1, _219) 184 ]",
    "EXPR [ (-1, _218) (-1, _220) 1 ]",
    "EXPR [ (1, _216, _217) (-1, _221) 0 ]",
    "EXPR [ (1, _220, _221) (-1, _221) 0 ]",
    "EXPR [ (-1, _221) (-1, _222) 1 ]",
    "EXPR [ (1, _212, _213) (1, _211) (-1, _223) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: -121 })], outputs: [Simple(Witness(224))]",
    "EXPR [ (1, _13, _224) (-121, _224) (1, _225) -1 ]",
    "EXPR [ (1, _13, _225) (-121, _225) 0 ]",
    "EXPR [ (-1, _222, _223) (-1, _221) (-1, _226) 1 ]",
    "EXPR [ (-1, _225) (-1, _227) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 135 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(228)), Simple(Witness(229))]",
    "BLACKBOX::RANGE [(_228, 1)] []",
    "BLACKBOX::RANGE [(_229, 8)] []",
    "EXPR [ (1, _13) (-256, _228) (-1, _229) 135 ]",
    "EXPR [ (-1, _228) (-1, _230) 1 ]",
    "EXPR [ (1, _226, _227) (-1, _231) 0 ]",
    "EXPR [ (1, _230, _231) (-1, _231) 0 ]",
    "EXPR [ (-1, _231) (-1, _232) 1 ]",
    "EXPR [ (1, _222, _223) (1, _221) (-1, _233) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: -185 })], outputs: [Simple(Witness(234))]",
    "EXPR [ (1, _12, _234) (-185, _234) (1, _235) -1 ]",
    "EXPR [ (1, _12, _235) (-185, _235) 0 ]",
    "EXPR [ (-1, _232, _233) (-1, _231) (-1, _236) 1 ]",
    "EXPR [ (-1, _235) (-1, _237) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 71 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(238)), Simple(Witness(239))]",
    "BLACKBOX::RANGE [(_238, 1)] []",
    "BLACKBOX::RANGE [(_239, 8)] []",
    "EXPR [ (1, _12) (-256, _238) (-1, _239) 71 ]",
    "EXPR [ (-1, _238) (-1, _240) 1 ]",
    "EXPR [ (1, _236, _237) (-1, _241) 0 ]",
    "EXPR [ (1, _240, _241) (-1, _241) 0 ]",
    "EXPR [ (-1, _241) (-1, _242) 1 ]",
    "EXPR [ (1, _232, _233) (1, _231) (-1, _243) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: -112 })], outputs: [Simple(Witness(244))]",
    "EXPR [ (1, _11, _244) (-112, _244) (1, _245) -1 ]",
    "EXPR [ (1, _11, _245) (-112, _245) 0 ]",
    "EXPR [ (-1, _242, _243) (-1, _241) (-1, _246) 1 ]",
    "EXPR [ (-1, _245) (-1, _247) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 144 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(248)), Simple(Witness(249))]",
    "BLACKBOX::RANGE [(_248, 1)] []",
    "BLACKBOX::RANGE [(_249, 8)] []",
    "EXPR [ (1, _11) (-256, _248) (-1, _249) 144 ]",
    "EXPR [ (-1, _248) (-1, _250) 1 ]",
    "EXPR [ (1, _246, _247) (-1, _251) 0 ]",
    "EXPR [ (1, _250, _251) (-1, _251) 0 ]",
    "EXPR [ (-1, _251) (-1, _252) 1 ]",
    "EXPR [ (1, _242, _243) (1, _241) (-1, _253) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: -145 })], outputs: [Simple(Witness(254))]",
    "EXPR [ (1, _10, _254) (-145, _254) (1, _255) -1 ]",
    "EXPR [ (1, _10, _255) (-145, _255) 0 ]",
    "EXPR [ (-1, _252, _253) (-1, _251) (-1, _256) 1 ]",
    "EXPR [ (-1, _255) (-1, _257) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 111 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(258)), Simple(Witness(259))]",
    "BLACKBOX::RANGE [(_258, 1)] []",
    "BLACKBOX::RANGE [(_259, 8)] []",
    "EXPR [ (1, _10) (-256, _258) (-1, _259) 111 ]",
    "EXPR [ (-1, _258) (-1, _260) 1 ]",
    "EXPR [ (1, _256, _257) (-1, _261) 0 ]",
    "EXPR [ (1, _260, _261) (-1, _261) 0 ]",
    "EXPR [ (-1, _261) (-1, _262) 1 ]",
    "EXPR [ (1, _252, _253) (1, _251) (-1, _263) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: -67 })], outputs: [Simple(Witness(264))]",
    "EXPR [ (1, _9, _264) (-67, _264) (1, _265) -1 ]",
    "EXPR [ (1, _9, _265) (-67, _265) 0 ]",
    "EXPR [ (-1, _262, _263) (-1, _261) (-1, _266) 1 ]",
    "EXPR [ (-1, _265) (-1, _267) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 189 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(268)), Simple(Witness(269))]",
    "BLACKBOX::RANGE [(_268, 1)] []",
    "BLACKBOX::RANGE [(_269, 8)] []",
    "EXPR [ (1, _9) (-256, _268) (-1, _269) 189 ]",
    "EXPR [ (-1, _268) (-1, _270) 1 ]",
    "EXPR [ (1, _266, _267) (-1, _271) 0 ]",
    "EXPR [ (1, _270, _271) (-1, _271) 0 ]",
    "EXPR [ (-1, _271) (-1, _272) 1 ]",
    "EXPR [ (1, _262, _263) (1, _261) (-1, _273) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -225 })], outputs: [Simple(Witness(274))]",
    "EXPR [ (1, _8, _274) (-225, _274) (1, _275) -1 ]",
    "EXPR [ (1, _8, _275) (-225, _275) 0 ]",
    "EXPR [ (-1, _272, _273) (-1, _271) (-1, _276) 1 ]",
    "EXPR [ (-1, _275) (-1, _277) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(278)), Simple(Witness(279))]",
    "BLACKBOX::RANGE [(_278, 1)] []",
    "BLACKBOX::RANGE [(_279, 8)] []",
    "EXPR [ (1, _8) (-256, _278) (-1, _279) 31 ]",
    "EXPR [ (-1, _278) (-1, _280) 1 ]",
    "EXPR [ (1, _276, _277) (-1, _281) 0 ]",
    "EXPR [ (1, _280, _281) (-1, _281) 0 ]",
    "EXPR [ (-1, _281) (-1, _282) 1 ]",
    "EXPR [ (1, _272, _273) (1, _271) (-1, _283) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: -245 })], outputs: [Simple(Witness(284))]",
    "EXPR [ (1, _7, _284) (-245, _284) (1, _285) -1 ]",
    "EXPR [ (1, _7, _285) (-245, _285) 0 ]",
    "EXPR [ (-1, _282, _283) (-1, _281) (-1, _286) 1 ]",
    "EXPR [ (-1, _285) (-1, _287) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 11 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(288)), Simple(Witness(289))]",
    "BLACKBOX::RANGE [(_288, 1)] []",
    "BLACKBOX::RANGE [(_289, 8)] []",
    "EXPR [ (1, _7) (-256, _288) (-1, _289) 11 ]",
    "EXPR [ (-1, _288) (-1, _290) 1 ]",
    "EXPR [ (1, _286, _287) (-1, _291) 0 ]",
    "EXPR [ (1, _290, _291) (-1, _291) 0 ]",
    "EXPR [ (-1, _291) (-1, _292) 1 ]",
    "EXPR [ (1, _282, _283) (1, _281) (-1, _293) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -147 })], outputs: [Simple(Witness(294))]",
    "EXPR [ (1, _6, _294) (-147, _294) (1, _295) -1 ]",
    "EXPR [ (1, _6, _295) (-147, _295) 0 ]",
    "EXPR [ (-1, _292, _293) (-1, _291) (-1, _296) 1 ]",
    "EXPR [ (-1, _295) (-1, _297) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 109 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(298)), Simple(Witness(299))]",
    "BLACKBOX::RANGE [(_298, 1)] []",
    "BLACKBOX::RANGE [(_299, 8)] []",
    "EXPR [ (1, _6) (-256, _298) (-1, _299) 109 ]",
    "EXPR [ (-1, _298) (-1, _300) 1 ]",
    "EXPR [ (1, _296, _297) (-1, _301) 0 ]",
    "EXPR [ (1, _300, _301) (-1, _301) 0 ]",
    "EXPR [ (-1, _301) (-1, _302) 1 ]",
    "EXPR [ (1, _292, _293) (1, _291) (-1, _303) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: -240 })], outputs: [Simple(Witness(304))]",
    "EXPR [ (1, _5, _304) (-240, _304) (1, _305) -1 ]",
    "EXPR [ (1, _5, _305) (-240, _305) 0 ]",
    "EXPR [ (-1, _302, _303) (-1, _301) (-1, _306) 1 ]",
    "EXPR [ (-1, _305) (-1, _307) 1 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 16 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(308)), Simple(Witness(309))]",
    "BLACKBOX::RANGE [(_308, 1)] []",
    "BLACKBOX::RANGE [(_309, 8)] []",
    "EXPR [ (1, _5) (-256, _308) (-1, _309) 16 ]",
    "EXPR [ (-1, _308) (-1, _310) 1 ]",
    "EXPR [ (1, _306, _307) (-1, _311) 0 ]",
    "EXPR [ (1, _310, _311) (-1, _311) 0 ]",
    "EXPR [ (-1, _311) (-1, _312) 1 ]",
    "EXPR [ (1, _302, _303) (1, _301) (-1, _313) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 })], outputs: [Simple(Witness(314))]",
    "EXPR [ (1, _4, _314) (1, _315) -1 ]",
    "EXPR [ (1, _4, _315) 0 ]",
    "EXPR [ (-1, _312, _313) (-1, _311) (-1, _316) 1 ]",
    "EXPR [ (-1, _315) (-1, _317) 1 ]",
    "EXPR [ (-1, _316, _317) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(318))]",
    "EXPR [ (1, _3, _318) (1, _319) -1 ]",
    "EXPR [ (1, _3, _319) 0 ]",
    "EXPR [ (1, _316, _319) (-1, _316) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: -1 })], outputs: [Simple(Witness(320))]",
    "EXPR [ (1, _2, _320) (-1, _320) (1, _321) -1 ]",
    "EXPR [ (1, _2, _321) (-1, _321) 0 ]",
    "EXPR [ (-1, _316, _321) (1, _316) (-1, _322) 0 ]",
    "EXPR [ (1, _2, _322) 0 ]",
    "EXPR [ (-1, _322) (-1, _323) 1 ]",
    "EXPR [ (1, _312, _313) (1, _311) (-1, _324) 0 ]",
    "EXPR [ (1, _323, _324) (1, _322) -1 ]",
    "BLACKBOX::BLAKE2S [(_2, 8), (_3, 8), (_4, 8), (_5, 8), (_6, 8), (_7, 8), (_8, 8), (_9, 8), (_10, 8), (_11, 8), (_12, 8), (_13, 8), (_14, 8), (_15, 8), (_16, 8), (_17, 8), (_18, 8), (_19, 8), (_20, 8), (_21, 8), (_22, 8), (_23, 8), (_24, 8), (_25, 8), (_26, 8), (_27, 8), (_28, 8), (_29, 8), (_30, 8), (_31, 8), (_32, 8), (_33, 8)] [_325, _326, _327, _328, _329, _330, _331, _332, _333, _334, _335, _336, _337, _338, _339, _340, _341, _342, _343, _344, _345, _346, _347, _348, _349, _350, _351, _352, _353, _354, _355, _356]",
    "EXPR [ (1, _1) (-452312848583266388373324160190187140051835877600158453279131187530910662656, _325) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _326) (-6901746346790563787434755862277025452451108972170386555162524223799296, _327) (-26959946667150639794667015087019630673637144422540572481103610249216, _328) (-105312291668557186697918027683670432318895095400549111254310977536, _329) (-411376139330301510538742295639337626245683966408394965837152256, _330) (-1606938044258990275541962092341162602522202993782792835301376, _331) (-6277101735386680763835789423207666416102355444464034512896, _332) (-24519928653854221733733552434404946937899825954937634816, _333) (-95780971304118053647396689196894323976171195136475136, _334) (-374144419156711147060143317175368453031918731001856, _335) (-1461501637330902918203684832716283019655932542976, _336) (-5708990770823839524233143877797980545530986496, _337) (-22300745198530623141535718272648361505980416, _338) (-87112285931760246646623899502532662132736, _339) (-340282366920938463463374607431768211456, _340) (-1329227995784915872903807060280344576, _341) (-5192296858534827628530496329220096, _342) (-20282409603651670423947251286016, _343) (-79228162514264337593543950336, _344) (-309485009821345068724781056, _345) (-1208925819614629174706176, _346) (-4722366482869645213696, _347) (-18446744073709551616, _348) (-72057594037927936, _349) (-281474976710656, _350) (-1099511627776, _351) (-4294967296, _352) (-16777216, _353) (-65536, _354) (-256, _355) (-1, _356) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "rZjNThtZEEbfxWsWXV/V/curjEaRQ0xkyTLIQKQRyrtP03XawMIocrLpD2ju0a3rOna1Xzbfd9+ef3zdH+/uHzdf/nnZfDvtD4f9j6+H+9vt0/7+OP/15dfNZv3169Npt5v/tHl3f171sD3tjk+bL8fnw+Fm83N7eF7+6fFhe1zyaXua7043m93x+5wz8G5/2L3+9OvmbfV0eWkYa1s5Ly4fV9vl1T56YX1Mk84EGx8I+oTQpwHBu972YP0DwS8TqmpAqBrTJYI+O4NS1yqs6U8JvV9DkHwlqMRVe5jOBJuuIng9v5pe2yXCJ/0QU9G5H9rFfviUIHsj+EXCJwgzj3UX88/lciG/D6n1SsiIMyQs/gJEfm059lZOsyshHn8BMvxdOf1KSG9/Dik+nSHFr4UoLkL+nX/b3u5PH971N9Pc2zcbW65arr5cY7mW5VqXa1uufbmOXMXiXG253HK9JcCSYImwZFhCLClKithDUpQUJUVJUVKUFCVFSfGkeFKcUpLiM2V+S/SSUTNmyvyyec8YS8SUYRla/jM8IylR8l7NSEokJZJSklKSUpJSklKSUnIvJfdSklKSUpJSk1KTUpXhGZGRe6lJqS2jZ4wl2pSRlJaUlpSWlJaUlhW13EvLvbTcS09Kt4ysqGdFPSvqSelJ6UnpSelJGVnRyL2M3MvIvYykjDyXkRWNrGhkRSMpNk2kkSKdDLKQlWxk4mzKEzKbSCNFwjN4Bs/gGTzrJPsT+xP7Ezw5GWQhKwlP8ATP4Tk8p15nf87+nP3R4OaNpF6n3qBeutwCXsALeHS60epGrxvNbnS7FXiF86PhjY43Wt4KvAKPrjfa3uh7o/GNzjda3+h9q/Aq50f7G/1vCGAVXoOHA4YEhgWGBoYHhgiGCdbgNc4PGQwbDB2sw+vwMMJQwnDCkMKwwtDC8MIGvMH5oYbhhiGHDXgDHn4IP4Qfwg/hh/BD+KEpeZoa2cmsV/ghg2fw8EP4IfwQfgg/hB/CDwmejBTpZJDwBA8/hB/CD+GH8EP4IfwQb//i/V/4IfwQfojPAPEhIPwQfgg/hB/CD+GH8EMBLzg//BB+CD9U4BV4+CH8EH4IP4Qfwg/hhyq8yvnhh/BD+KEKr8LDD+GH8EP4IfwQfgg/1OA1zg8/hB/CD3V4HR5+CD+EH8IP4YfwQ/ihAW9wfvgh/BB+aMAb8PBD+CH8cPxw/HD8cPzwiXFhYl7AD8cPxw+f4Bk8/HD8cPxw/HD8cPxw/HCDZ3l+jh+OH44fLniChx+OH44fjh+OH44fjh/u8NxJ6l3no3VAWiekdUTCD8cPxw/HD8cPxw/HDw94wfnhh+OH44czL3mBhx+OH44fjh+OH44fjh9e4VXODz8cPxw/nOnJKzz8cPxw/HD8cPxw/HD88AavcX5tHTCpFz+cWco7PPxw/HD8cPxw/HD88L5OrPA654cfjh+OH85k5QMefjh+OH74WEfgdQZmCMaPmBiDJ+Zg/Aj8CPwI5quYGIbxI2wdquHhR+BH4EfgRxg8a2Qns97Aj9A6pcPDj8CPwI/Aj8CPwI/Aj3B4buQ69lMvfgTzVeBH8PkRfH7E+gzBfBUBb32MwI/Aj1ifJNZHiVc/xmvOPHv97ujn9rTffjvsHvPrubvn4+27b+ue/ntY76zf5z2c7m93359Pu9dnvOXe/NT3Pw==",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "50": {
      "source": "fn main(input: Field) -> pub Field {\n    std::hash::hash_to_field(&[input])\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix",
    "directive_invert",
    "directive_integer_quotient"
  ]
}
