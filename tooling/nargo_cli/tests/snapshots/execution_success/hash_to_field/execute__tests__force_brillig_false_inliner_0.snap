---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": "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",
  "debug_symbols": "rZjNThtZEEbfxWsWXV/V/curjEaRQ5zIkmWQgUgjlHefpuu0gYWRYrLpD2ju0a3rOna1nzffd9+efn7dH3/cPWy+/PO8+XbaHw77n18Pd7fbx/3dcf7r8++bzfrr18fTbjf/afPm/rzqfnvaHR83X45Ph8PN5tf28LT808P99rjk4/Y0351uNrvj9zln4I/9Yffy0++b19XT5aVhrG3lvLi8X22XV/vohfUxTToTbLwj6DKhhK+7LxH1ldDfEfwyoQ0baw3D2yXCR3tora17mBGfJPRpXEPoEWfCm9fiT/agM6HpKsLodSWM3i8RPuiHmIrO/dAu9sOHBNkrwS8SPkCYeVu7cv55TBcL+QPIuA4SamdIRPsLkFKvLSdeIVNcCant85BQfYVUuxYyfR5Sqp8hpV0LKe0i5N/5t+3t/vTuXX8zzb19s7HlquXqyzWWa1mudbm25dqX68hVLM7Vlsst11sCLAmWCEuGJcSSoqSIPSRFSVFSlBQlRUlRUpQUT4onxSklKT5T5pfZS0bNmCnzYXnPGEvElGEZWv4zPCMpUfJezUhKJCWSUpJSklKSUpJSklJyLyX3UpJSklKSUpNSk1KV4RmRkXupSakto2eMJdqUkZSWlJaUlpSWlJYVtdxLy7203EtPSreMrKhnRT0r6knpSelJ6UnpSRlZ0ci9jNzLyL2MpIw8l5EVjaxoZEUjKTZNpJEinQyykJVsZOJsyhMym0gjRcIzeAbP4Bk86yT7E/sT+xM8ORlkISsJT/AEz+E5PKdeZ3/O/pz90eDmjaRep96gXrrcAl7AC3h0utHqRq8bzW50uxV4hfOj4Y2ON1reCrwCj6432t7oe6Pxjc43Wt/ofavwKudH+xv9bwhgFV6DhwOGBIYFhgaGB4YIhgnW4DXODxkMGwwdrMPr8DDCUMJwwpDCsMLQwvDCBrzB+aGG4YYhhw14Ax5+CD+EH8IP4YfwQ/ihKXmaGtnJrFf4IYNn8PBD+CH8EH4IP4Qfwg8JnowU6WSQ8AQPP4Qfwg/hh/BD+CH8EG//4v1f+CH8EH6IzwDxISD8EH4IP4Qfwg/hh/BDAS84P/wQfgg/VOAVePgh/BB+CD+EH8IP4YcqvMr54YfwQ/ihCq/Cww/hh/BD+CH8EH4IP9TgNc4PP4Qfwg91eB0efgg/hB/CD+GH8EP4oQFvcH74IfwQfmjAG/DwQ/gh/HD8cPxw/HD88IlxYWJewA/HD8cPn+AZPPxw/HD8cPxw/HD8cPxwg2d5fo4fjh+OHy54gocfjh+OH44fjh+OH44f7vDcSepd56N1QFonpHVEwg/HD8cPxw/HD8cPxw8PeMH54Yfjh+OHMy95gYcfjh+OH44fjh+OH44fXuFVzg8/HD8cP5zpySs8/HD8cPxw/HD8cPxw/PAGr3F+bR0wqRc/nFnKOzz8cPxw/HD8cPxw/PC+TqzwOueHH44fjh/OZOUDHn44fjh++FhH4HUGZgjGj5gYgyfmYPwI/Aj8COarmBiG8SNsHarh4UfgR+BH4EcYPGtkJ7PewI/QOqXDw4/Aj8CPwI/Aj8CPwI9weG7kOvZTL34E81XgR/D5EXx+xPoMwXwVAW99jMCPwI9YnyTWR4kXP8ZLzjx7+aLg1/a033477B7y67kfT8fbN9/WPf53v95Zv8+7P93d7r4/nXYvz3jLvfmp738=",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "50": {
      "source": "fn main(input: Field) -> pub Field {\n    std::hash::hash_to_field(&[input])\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix",
    "directive_invert",
    "directive_integer_quotient"
  ]
}
