---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _68",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:8 bits []",
    "BLACKBOX::RANGE [_1]:8 bits []",
    "BLACKBOX::RANGE [_2]:8 bits []",
    "BLACKBOX::RANGE [_3]:8 bits []",
    "BLACKBOX::RANGE [_4]:8 bits []",
    "BLACKBOX::RANGE [_5]:8 bits []",
    "BLACKBOX::RANGE [_6]:8 bits []",
    "BLACKBOX::RANGE [_7]:8 bits []",
    "BLACKBOX::RANGE [_8]:8 bits []",
    "BLACKBOX::RANGE [_9]:8 bits []",
    "BLACKBOX::RANGE [_10]:8 bits []",
    "BLACKBOX::RANGE [_11]:8 bits []",
    "BLACKBOX::RANGE [_12]:8 bits []",
    "BLACKBOX::RANGE [_13]:8 bits []",
    "BLACKBOX::RANGE [_14]:8 bits []",
    "BLACKBOX::RANGE [_15]:8 bits []",
    "BLACKBOX::RANGE [_16]:8 bits []",
    "BLACKBOX::RANGE [_17]:8 bits []",
    "BLACKBOX::RANGE [_18]:8 bits []",
    "BLACKBOX::RANGE [_19]:8 bits []",
    "BLACKBOX::RANGE [_20]:8 bits []",
    "BLACKBOX::RANGE [_21]:8 bits []",
    "BLACKBOX::RANGE [_22]:8 bits []",
    "BLACKBOX::RANGE [_23]:8 bits []",
    "BLACKBOX::RANGE [_24]:8 bits []",
    "BLACKBOX::RANGE [_25]:8 bits []",
    "BLACKBOX::RANGE [_26]:8 bits []",
    "BLACKBOX::RANGE [_27]:8 bits []",
    "BLACKBOX::RANGE [_28]:8 bits []",
    "BLACKBOX::RANGE [_29]:8 bits []",
    "BLACKBOX::RANGE [_30]:8 bits []",
    "BLACKBOX::RANGE [_31]:8 bits []",
    "BLACKBOX::RANGE [_32]:8 bits []",
    "BLACKBOX::RANGE [_33]:8 bits []",
    "BLACKBOX::RANGE [_34]:8 bits []",
    "BLACKBOX::RANGE [_35]:8 bits []",
    "BLACKBOX::RANGE [_36]:8 bits []",
    "BRILLIG CALL func 0: inputs: [Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }])], outputs: [Array([Witness(37), Witness(38), Witness(39), Witness(40), Witness(41), Witness(42), Witness(43), Witness(44), Witness(45), Witness(46), Witness(47), Witness(48), Witness(49), Witness(50), Witness(51), Witness(52), Witness(53), Witness(54), Witness(55), Witness(56), Witness(57), Witness(58), Witness(59), Witness(60), Witness(61), Witness(62), Witness(63), Witness(64), Witness(65), Witness(66), Witness(67), Witness(68)])]",
    "BLACKBOX::RANGE [_37]:8 bits []",
    "BLACKBOX::RANGE [_38]:8 bits []",
    "BLACKBOX::RANGE [_39]:8 bits []",
    "BLACKBOX::RANGE [_40]:8 bits []",
    "BLACKBOX::RANGE [_41]:8 bits []",
    "BLACKBOX::RANGE [_42]:8 bits []",
    "BLACKBOX::RANGE [_43]:8 bits []",
    "BLACKBOX::RANGE [_44]:8 bits []",
    "BLACKBOX::RANGE [_45]:8 bits []",
    "BLACKBOX::RANGE [_46]:8 bits []",
    "BLACKBOX::RANGE [_47]:8 bits []",
    "BLACKBOX::RANGE [_48]:8 bits []",
    "BLACKBOX::RANGE [_49]:8 bits []",
    "BLACKBOX::RANGE [_50]:8 bits []",
    "BLACKBOX::RANGE [_51]:8 bits []",
    "BLACKBOX::RANGE [_52]:8 bits []",
    "BLACKBOX::RANGE [_53]:8 bits []",
    "BLACKBOX::RANGE [_54]:8 bits []",
    "BLACKBOX::RANGE [_55]:8 bits []",
    "BLACKBOX::RANGE [_56]:8 bits []",
    "BLACKBOX::RANGE [_57]:8 bits []",
    "BLACKBOX::RANGE [_58]:8 bits []",
    "BLACKBOX::RANGE [_59]:8 bits []",
    "BLACKBOX::RANGE [_60]:8 bits []",
    "BLACKBOX::RANGE [_61]:8 bits []",
    "BLACKBOX::RANGE [_62]:8 bits []",
    "BLACKBOX::RANGE [_63]:8 bits []",
    "BLACKBOX::RANGE [_64]:8 bits []",
    "BLACKBOX::RANGE [_65]:8 bits []",
    "BLACKBOX::RANGE [_66]:8 bits []",
    "BLACKBOX::RANGE [_67]:8 bits []",
    "BLACKBOX::RANGE [_68]:8 bits []",
    "EXPR [ (-1, _5) (1, _37) 0 ]",
    "EXPR [ (-1, _6) (1, _38) 0 ]",
    "EXPR [ (-1, _7) (1, _39) 0 ]",
    "EXPR [ (-1, _8) (1, _40) 0 ]",
    "EXPR [ (-1, _9) (1, _41) 0 ]",
    "EXPR [ (-1, _10) (1, _42) 0 ]",
    "EXPR [ (-1, _11) (1, _43) 0 ]",
    "EXPR [ (-1, _12) (1, _44) 0 ]",
    "EXPR [ (-1, _13) (1, _45) 0 ]",
    "EXPR [ (-1, _14) (1, _46) 0 ]",
    "EXPR [ (-1, _15) (1, _47) 0 ]",
    "EXPR [ (-1, _16) (1, _48) 0 ]",
    "EXPR [ (-1, _17) (1, _49) 0 ]",
    "EXPR [ (-1, _18) (1, _50) 0 ]",
    "EXPR [ (-1, _19) (1, _51) 0 ]",
    "EXPR [ (-1, _20) (1, _52) 0 ]",
    "EXPR [ (-1, _21) (1, _53) 0 ]",
    "EXPR [ (-1, _22) (1, _54) 0 ]",
    "EXPR [ (-1, _23) (1, _55) 0 ]",
    "EXPR [ (-1, _24) (1, _56) 0 ]",
    "EXPR [ (-1, _25) (1, _57) 0 ]",
    "EXPR [ (-1, _26) (1, _58) 0 ]",
    "EXPR [ (-1, _27) (1, _59) 0 ]",
    "EXPR [ (-1, _28) (1, _60) 0 ]",
    "EXPR [ (-1, _29) (1, _61) 0 ]",
    "EXPR [ (-1, _30) (1, _62) 0 ]",
    "EXPR [ (-1, _31) (1, _63) 0 ]",
    "EXPR [ (-1, _32) (1, _64) 0 ]",
    "EXPR [ (-1, _33) (1, _65) 0 ]",
    "EXPR [ (-1, _34) (1, _66) 0 ]",
    "EXPR [ (-1, _35) (1, _67) 0 ]",
    "EXPR [ (-1, _36) (1, _68) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32873 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 5 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U8) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U8) }, Cast { destination: Direct(32840), source: Direct(32840), bit_size: Integer(U8) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(4) }, Mov { destination: Direct(32773), source: Relative(3) }, Call { location: 35 }, Mov { destination: Relative(1), source: Relative(2) }, Call { location: 46 }, Call { location: 47 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32841 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 32 }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(3) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 35 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32841 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 45 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 38 }, Return, Return, Call { location: 58 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BlackBox(Blake2s { message: HeapVector { pointer: Relative(3), size: Relative(4) }, output: HeapArray { pointer: Relative(5), size: 32 } }), Mov { destination: Relative(1), source: Relative(2) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 63 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pdPRboIwFIDhd+k1Fy3tKa2vshiD2i0kBA2DJYvh3dfyq3MXW0x24y/C+URbLuqY9vPbrhteT+9q83JR+7Hr++5t158O7dSdhvzpReny4oLamEq5uEY0MaQmljgiOctSqZu1m8aUCvWA5688t2MaJrUZ5r6v1Efbz+tF7+d2WDu1Yz6rK5WGY24GX7s+lXdL9T2tfx+tm/o6XEd7H5en502Q67yJ8q/5Wv86b/+4f639HTAPv+B5wDR3oJZHYJsP2kM3/lxw2+QrK2UDiWucJobUxBJHhHiC4lAciqAIiqAIiqAIiqAIiqAIikfxKB7Fo3gUj+JRPIpH8SiNXv+2xpCaWOKIEE8aEkhcE1ACSkAJKAEloASUgBJQAkpEiSgRJaJElIgSUSJKRIkoRutri7OULTF27b5PZVnLus/D4bbK+XD6PN/O3B7883g6pOM8prIjvp/+fCMvVion24LnAwmVt9ul7KAv",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is blake2s in brillig\nfn main(x: [u8; 5], result: [u8; 32]) {\n    // Safety: testing context\n    unsafe {\n        assert(blake2s(x) == result);\n    }\n}\n\nunconstrained fn blake2s(x: [u8; 5]) -> [u8; 32] {\n    std::hash::blake2s(x)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "blake2s"
  ]
}
