---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "index2",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "offset",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "sublen",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _18",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [[EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ]], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], [EXPR [ (1, _7) 0 ], EXPR [ (1, _8) 0 ], EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ]], [EXPR [ (1, _12) 0 ], EXPR [ (1, _13) 0 ], EXPR [ (1, _14) 0 ], EXPR [ (1, _15) 0 ], EXPR [ (1, _16) 0 ]], EXPR [ (1, _17) 0 ], EXPR [ (1, _18) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32855 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 19 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(8), offset_address: Relative(9) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U32) }, Cast { destination: Direct(32840), source: Direct(32840), bit_size: Integer(U32) }, Cast { destination: Direct(32841), source: Direct(32841), bit_size: Integer(U32) }, Cast { destination: Direct(32842), source: Direct(32842), bit_size: Integer(U32) }, Cast { destination: Direct(32843), source: Direct(32843), bit_size: Integer(U32) }, Cast { destination: Direct(32844), source: Direct(32844), bit_size: Integer(U32) }, Cast { destination: Direct(32845), source: Direct(32845), bit_size: Integer(U32) }, Cast { destination: Direct(32846), source: Direct(32846), bit_size: Integer(U32) }, Cast { destination: Direct(32847), source: Direct(32847), bit_size: Integer(U32) }, Cast { destination: Direct(32848), source: Direct(32848), bit_size: Integer(U32) }, Cast { destination: Direct(32849), source: Direct(32849), bit_size: Integer(U32) }, Cast { destination: Direct(32850), source: Direct(32850), bit_size: Integer(U32) }, Cast { destination: Direct(32851), source: Direct(32851), bit_size: Integer(U32) }, Cast { destination: Direct(32852), source: Direct(32852), bit_size: Integer(U32) }, Cast { destination: Direct(32853), source: Direct(32853), bit_size: Integer(U32) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 5 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 69 }, Mov { destination: Relative(1), source: Relative(8) }, Mov { destination: Relative(2), source: Direct(32841) }, Mov { destination: Relative(3), source: Direct(32842) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 32843 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 5 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(4) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 69 }, Mov { destination: Relative(4), source: Relative(8) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 32848 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 5 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(5) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 69 }, Mov { destination: Relative(5), source: Relative(8) }, Mov { destination: Relative(6), source: Direct(32853) }, Mov { destination: Relative(7), source: Direct(32854) }, Call { location: 80 }, Call { location: 81 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32855 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 79 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 72 }, Return, Return, Call { location: 259 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, JumpIf { condition: Relative(10), location: 91 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(8) }, JumpIf { condition: Relative(12), location: 91 }, Call { location: 265 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, BinaryIntOp { destination: Relative(10), op: LessThanEquals, bit_size: U32, lhs: Relative(9), rhs: Relative(2) }, JumpIf { condition: Relative(10), location: 95 }, Call { location: 268 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U32, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(9), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, JumpIf { condition: Relative(9), location: 99 }, Call { location: 268 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, BinaryIntOp { destination: Relative(10), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(10), location: 104 }, Call { location: 268 }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, Const { destination: Relative(12), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(11), location: 110 }, Call { location: 271 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(2) }, Load { destination: Relative(11), source_pointer: Relative(14) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 111 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(13) }, JumpIf { condition: Relative(14), location: 118 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(15) } }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 121 }, Call { location: 271 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, Load { destination: Relative(11), source_pointer: Relative(15) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 101 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(14) }, JumpIf { condition: Relative(15), location: 129 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 6 }, Call { location: 274 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(9) }, Store { destination_pointer: Relative(16), source: Relative(11) }, Store { destination_pointer: Relative(10), source: Relative(14) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(2) }, Load { destination: Relative(1), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(13) }, JumpIf { condition: Relative(9), location: 145 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(15) } }, Const { destination: Relative(1), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Load { destination: Relative(9), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(11) }, JumpIf { condition: Relative(1), location: 152 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Const { destination: Relative(1), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 109 }, JumpIf { condition: Relative(9), location: 166 }, Jump { location: 157 }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 6 }, Call { location: 274 }, Mov { destination: Relative(9), source: Direct(32773) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(2) }, Store { destination_pointer: Relative(15), source: Relative(11) }, Store { destination_pointer: Relative(10), source: Relative(9) }, Jump { location: 175 }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 6 }, Call { location: 274 }, Mov { destination: Relative(9), source: Direct(32773) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(2) }, Store { destination_pointer: Relative(15), source: Relative(1) }, Store { destination_pointer: Relative(10), source: Relative(9) }, Jump { location: 175 }, Load { destination: Relative(9), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(1) }, JumpIf { condition: Relative(9), location: 182 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(9), bit_size: Field, value: 0 }, Store { destination_pointer: Relative(1), source: Relative(9) }, Const { destination: Relative(10), bit_size: Field, value: 246 }, Const { destination: Relative(13), bit_size: Field, value: 159 }, Const { destination: Relative(14), bit_size: Field, value: 32 }, Const { destination: Relative(15), bit_size: Field, value: 176 }, Const { destination: Relative(16), bit_size: Field, value: 8 }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(18) }, Store { destination_pointer: Relative(19), source: Relative(10) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(13) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(14) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(15) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(16) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 1 }, Mov { destination: Relative(2), source: Relative(11) }, Jump { location: 209 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 244 }, Jump { location: 212 }, Load { destination: Relative(2), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(2), rhs: Relative(9) }, Const { destination: Relative(2), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(9), location: 219 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Cast { destination: Relative(2), source: Relative(7), bit_size: Integer(U32) }, Cast { destination: Relative(1), source: Relative(2), bit_size: Field }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(1), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(1), location: 225 }, Jump { location: 243 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(3) }, BinaryIntOp { destination: Relative(2), op: LessThanEquals, bit_size: U32, lhs: Relative(6), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 229 }, Call { location: 296 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(8) }, JumpIf { condition: Relative(2), location: 232 }, Call { location: 271 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(1) }, Load { destination: Relative(2), source_pointer: Relative(6) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(1) }, Load { destination: Relative(3), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(1), location: 242 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Jump { location: 243 }, Return, Load { destination: Relative(11), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, Load { destination: Relative(13), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(8) }, JumpIf { condition: Relative(14), location: 251 }, Call { location: 271 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryFieldOp { destination: Relative(13), op: Add, lhs: Relative(11), rhs: Relative(14) }, Store { destination_pointer: Relative(1), source: Relative(13) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, Mov { destination: Relative(2), source: Relative(11) }, Jump { location: 209 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 264 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 278 }, Jump { location: 280 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 295 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 292 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 285 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 295 }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "rZdRb+IwEIT/S57zYHttr92/UlUVbdMTEqKIwkmniv9+HrxDew9Ud+ZemC+EmThrr0M+ppfl6fjjcb19fXuf7u4/pqf9erNZ/3jcvD2vDuu3bfv2Y3L4KGG68/NUpEvskrrkLtqldKlnqa6Ln+5Ck9BFusQuLUWa5C7apXRpKXGevHOm3jSYimmLytBkmk3VtJjWrr7lKdSbBtOWV6DRNJlmUzUtprVrcKYtr0KDqZiiYA6QCJmghEJA6VrRvDiCJwSCECIhETJBCUgOgGoQHQHJAggEIUQCklHlmAlKQHICVIPkCJ6AZBQ9CQF2lDsVQjXIjuAJgSCESMB4UPashEKoBuoInhAIQsANYpq0BQZMgSqhBQbUUKtBcQRPwKpGMdEdHSIhEZCMYqJLOhRCNUCvdPCEQBBCJCQCkyuTK5OrJQfnCJ4QCEKIhESAvc1yQHeEBMCPMyASEiETlFAIyGnzFdAlHTwByQWAnArIBCUUQjVAX3TwhJYjDiCESMD24gGZoARsMgFQDdAXHTwhWhHQBYKyoAs6KKEQqgG6oANyYEcXdBBCtKqmRMC9p9NpnrgBPx72y4L998uO3Pbp3Wq/bA/T3fa42czTz9XmeP7R+261PethtW9n290v25emLfB1vVlAp/nT7a5bfcpmbo14sad/8If/5k8D/oCd5+xvS2zk+lUvfrnmT9f9Eevr7I/X7/8bfxLef5J8mz+OjD8l3n8aG/8XfxnxK+cvaR3xV67f7NyNfh3w58D5zyHd5peR8efI5s9pZP7Vcf2oG1l/OUdef2j+9dI/KmHEj6eC+eU2f3Qj+48K9w+NA35xvL74kevLZfwiQ/7I+ksqI35l/0uREX/l+KMPQ/548Y9cPwrHH6MO+S/7fxypX7w8/+LQ8/Ovnj/fzv9l/SQd8ucr6+ehHa2e1/s/3jFPSNqvV0+bxQ5fj9vnL2cPv3Y8w3fU3f7teXk57hckfb6oto/71nNzqOlhntp/rftcZ60PePnDqVTnkCMOPQ5zmYO6hxMG9hs=",
  "file_map": {
    "50": {
      "source": "fn main(\n    x: [u32; 5],\n    mut z: u32,\n    t: u32,\n    index: [u32; 5],\n    index2: [u32; 5],\n    offset: u32,\n    sublen: Field,\n) {\n    let idx = (z - 5 * t - 5);\n    //dynamic array test\n    dyn_array(x, idx, idx - 3);\n    //regression for issue 1283\n    let mut s = 0;\n    let x3 = [246, 159, 32, 176, 8];\n    for i in 0..5 {\n        s += x3[index[i]];\n    }\n    assert(s != 0);\n\n    if 3 < (sublen as u32) {\n        assert(index[offset + 3] == index2[3]);\n    }\n}\n\nfn dyn_array(mut x: [u32; 5], y: u32, z: u32) {\n    assert(x[y] == 111);\n    assert(x[z] == 101);\n    x[z] = 0;\n    assert(x[y] == 111);\n    assert(x[1] == 0);\n    if y as u32 < 10 {\n        x[y] = x[y] - 2;\n    } else {\n        x[y] = 0;\n    }\n    assert(x[4] == 109);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
