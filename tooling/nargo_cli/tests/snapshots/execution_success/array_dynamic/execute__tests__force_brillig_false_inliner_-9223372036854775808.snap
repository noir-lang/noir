---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "index2",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "offset",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "sublen",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _74",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "INIT (id: 0, len: 5, witnesses: [_0, _1, _2, _3, _4])",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "INIT (id: 1, len: 5, witnesses: [_7, _8, _9, _10, _11])",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "BLACKBOX::RANGE [(_14, 32)] []",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "BLACKBOX::RANGE [(_16, 32)] []",
    "BLACKBOX::RANGE [(_17, 32)] []",
    "EXPR [ (5, _6) (-1, _19) 0 ]",
    "BLACKBOX::RANGE [(_19, 32)] []",
    "EXPR [ (1, _5) (-1, _19) (-1, _20) 0 ]",
    "BLACKBOX::RANGE [(_20, 32)] []",
    "EXPR [ (1, _20) (-1, _21) -5 ]",
    "EXPR [ (1, _21) (-1, _22) -3 ]",
    "MEM (id: 0, read at: EXPR [ (1, _21) 0 ], value: EXPR [ (1, _23) 0 ]) ",
    "EXPR [ (1, _23) -111 ]",
    "MEM (id: 0, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _24) 0 ]) ",
    "EXPR [ (1, _24) -101 ]",
    "EXPR [ (-1, _25) 0 ]",
    "MEM (id: 0, write EXPR [ (1, _25) 0 ] at: EXPR [ (1, _22) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _21) 0 ], value: EXPR [ (1, _26) 0 ]) ",
    "EXPR [ (1, _26) -111 ]",
    "EXPR [ (-1, _27) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _27) 0 ], value: EXPR [ (1, _28) 0 ]) ",
    "EXPR [ (1, _28) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _21) 4294967286 ], EXPR [ 4294967296 ]], outputs: [_29, _30]",
    "BLACKBOX::RANGE [(_29, 1)] []",
    "BLACKBOX::RANGE [(_30, 32)] []",
    "EXPR [ (1, _21) (-4294967296, _29) (-1, _30) 4294967286 ]",
    "EXPR [ (-1, _21, _29) (1, _21) (-1, _31) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _31) 0 ], value: EXPR [ (1, _32) 0 ]) ",
    "EXPR [ (-1, _29, _32) (2, _29) (1, _32) (-1, _33) -2 ]",
    "BLACKBOX::RANGE [(_33, 32)] []",
    "EXPR [ (-1, _21, _29) (1, _21) (-1, _34) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _34) 0 ], value: EXPR [ (1, _35) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _25) 0 ], value: EXPR [ (1, _36) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _27) 0 ], value: EXPR [ (1, _37) 0 ]) ",
    "EXPR [ (-1, _38) 2 ]",
    "MEM (id: 0, read at: EXPR [ (1, _38) 0 ], value: EXPR [ (1, _39) 0 ]) ",
    "EXPR [ (-1, _40) 3 ]",
    "MEM (id: 0, read at: EXPR [ (1, _40) 0 ], value: EXPR [ (1, _41) 0 ]) ",
    "EXPR [ (-1, _42) 4 ]",
    "MEM (id: 0, read at: EXPR [ (1, _42) 0 ], value: EXPR [ (1, _43) 0 ]) ",
    "INIT (id: 3, len: 5, witnesses: [_36, _37, _39, _41, _43])",
    "EXPR [ (-1, _29, _33) (1, _29, _35) (1, _33) (-1, _44) 0 ]",
    "MEM (id: 3, write EXPR [ (1, _44) 0 ] at: EXPR [ (1, _34) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _42) 0 ], value: EXPR [ (1, _45) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _42) 0 ], value: EXPR [ (1, _46) 0 ]) ",
    "EXPR [ (1, _21, _29) (-1, _47) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _47) 0 ], value: EXPR [ (1, _48) 0 ]) ",
    "EXPR [ (-1, _29, _48) (1, _48) (-1, _49) 0 ]",
    "MEM (id: 0, write EXPR [ (1, _49) 0 ] at: EXPR [ (1, _47) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _42) 0 ], value: EXPR [ (1, _50) 0 ]) ",
    "EXPR [ (-1, _29) (-1, _51) 1 ]",
    "EXPR [ (-1, _29, _45) (1, _29, _46) (1, _45) (-1, _52) 0 ]",
    "EXPR [ (1, _29, _50) (1, _51, _52) -109 ]",
    "EXPR [ (-1, _53) 246 ]",
    "EXPR [ (-1, _54) 159 ]",
    "EXPR [ (-1, _55) 32 ]",
    "EXPR [ (-1, _56) 176 ]",
    "EXPR [ (-1, _57) 8 ]",
    "INIT (id: 4, len: 5, witnesses: [_53, _54, _55, _56, _57])",
    "MEM (id: 4, read at: EXPR [ (1, _7) 0 ], value: EXPR [ (1, _58) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _8) 0 ], value: EXPR [ (1, _59) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _60) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _10) 0 ], value: EXPR [ (1, _61) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _11) 0 ], value: EXPR [ (1, _62) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _58) (1, _59) (1, _60) (1, _61) (1, _62) 0 ]], outputs: [_63]",
    "EXPR [ (1, _58, _63) (1, _59, _63) (1, _60, _63) (1, _61, _63) (1, _62, _63) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _18) 0 ], EXPR [ 4294967296 ]], outputs: [_64, _65]",
    "BLACKBOX::RANGE [(_64, 222)] []",
    "BLACKBOX::RANGE [(_65, 32)] []",
    "EXPR [ (1, _18) (-4294967296, _64) (-1, _65) 0 ]",
    "EXPR [ (-1, _64) (-1, _66) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_66, 222)] []",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-1, _64) 5096253676302562286669017222071363378443840053029366383258766538131 ]], outputs: [_67]",
    "EXPR [ (-1, _64, _67) (5096253676302562286669017222071363378443840053029366383258766538131, _67) (1, _68) -1 ]",
    "EXPR [ (-1, _64, _68) (5096253676302562286669017222071363378443840053029366383258766538131, _68) 0 ]",
    "EXPR [ (1, _65, _68) (268435455, _68) (-1, _69) 0 ]",
    "BLACKBOX::RANGE [(_69, 32)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _65) 4294967299 ], EXPR [ 4294967296 ]], outputs: [_70, _71]",
    "BLACKBOX::RANGE [(_70, 1)] []",
    "BLACKBOX::RANGE [(_71, 32)] []",
    "EXPR [ (-1, _65) (-4294967296, _70) (-1, _71) 4294967299 ]",
    "EXPR [ (-1, _17, _70) (1, _17) (-3, _70) (-1, _72) 3 ]",
    "BLACKBOX::RANGE [(_72, 32)] []",
    "EXPR [ (-1, _70, _72) (1, _72) (-1, _73) 0 ]",
    "MEM (id: 1, read at: EXPR [ (1, _73) 0 ], value: EXPR [ (1, _74) 0 ]) ",
    "EXPR [ (1, _15, _70) (-1, _70, _74) (-1, _15) (1, _74) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "rZbdjpswEIXfxddc2B6Pf/IqVRWRhKyQEInYsFIV7bt3HB/T7QUr1erVF3C+M4Mx4Ke6DKf17TjO19u7Ovx4qtMyTtP4dpxu5/4x3mY5+/zsVD08PpZhkFPqy7hY934Z5oc6zOs0deqjn9bXn97v/fzio19kVHdqmC9CCbyO05B/fXZ/bL2vGvaQjTebzv/g2//mc4NvDcO31rbUT2Hzac/nfd+Rge/2r/8bn6leP7uW+sy1f/axxY9b/dhUP9X143Vo8L2l6lvX5Nf596RbfFcfHs8t1+/DVj+kBj/oBD+Ylv6D3XynG9Y/bfXJNPlbfaIm39X5I44tfqjrn/bX73d+qv07Y5t8t/kt9R3V/p0LLT5v/XvdVH/v/fVTjvrzuPz1xVKG5Z3ZKeMLgrw3BbEgyXx0ymoJExh5JgRWlqaACpw6RIGkSN/WF4QCSTHSqpUYI+GkQQkyEk+SZCSfCHQggx4MYM6TRigVOg0a0IIEOpBBDwYQeQ55jDxGHiOPkcfI45wnjzB7MIARTIVegwbMeTKDPufJpHkHMujBAEYwFQYNGtCCyAuSZ2W+A4M+f06FAYxgKowaNKAFCXQgg8iLOU/uX4xgKkwazHlyv5IFCXRgzst7g49+GfvTNGDrdF3n85ed1OPXvY7UvdZ9uZ2Hy7oMeQ2/xmRV/wY=",
  "file_map": {
    "50": {
      "source": "fn main(\n    x: [u32; 5],\n    mut z: u32,\n    t: u32,\n    index: [u32; 5],\n    index2: [u32; 5],\n    offset: u32,\n    sublen: Field,\n) {\n    let idx = (z - 5 * t - 5);\n    //dynamic array test\n    dyn_array(x, idx, idx - 3);\n    //regression for issue 1283\n    let mut s = 0;\n    let x3 = [246, 159, 32, 176, 8];\n    for i in 0..5 {\n        s += x3[index[i]];\n    }\n    assert(s != 0);\n\n    if 3 < (sublen as u32) {\n        assert(index[offset + 3] == index2[3]);\n    }\n}\n\nfn dyn_array(mut x: [u32; 5], y: u32, z: u32) {\n    assert(x[y] == 111);\n    assert(x[z] == 101);\n    x[z] = 0;\n    assert(x[y] == 111);\n    assert(x[1] == 0);\n    if y as u32 < 10 {\n        x[y] = x[y] - 2;\n    } else {\n        x[y] = 0;\n    }\n    assert(x[4] == 109);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
