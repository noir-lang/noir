---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
global MAX_NOTE_HASHES_PER_TX: u32 = 64;

global MAX_NULLIFIERS_PER_TX: u32 = 64;

global MAX_L2_TO_L1_MSGS_PER_TX: u32 = 2;

global MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u32 = 16;

global MAX_NEW_CONTRACTS_PER_TX: u32 = 1;

global NUM_ENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;

global NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;

global NUM_FIELDS_PER_SHA256: u32 = 2;

global TX_EFFECT_HASH_INPUT_SIZE: u32 = 169;

global TX_EFFECT_HASH_LOG_FIELDS: u32 = 4;

global TX_EFFECT_HASH_FULL_FIELDS: u32 = 165;

struct PublicDataUpdateRequest {
    leaf_slot: Field,
    old_value: Field,
    new_value: Field,
}

struct NewContractData {
    contract_address: Field,
    portal_contract_address: Field,
}

impl NewContractData {
    fn hash(self) -> Field {
        std::hash::pedersen_hash([self.contract_address, self.portal_contract_address])
    }
}

struct DataToHash {
    new_note_hashes: [Field; 64],
    new_nullifiers: [Field; 64],
    public_data_update_requests: [PublicDataUpdateRequest; 16],
    new_l2_to_l1_msgs: [Field; 2],
    encrypted_logs_hash: [Field; 2],
    unencrypted_logs_hash: [Field; 2],
    new_contracts: [NewContractData; 1],
}

struct U256 {
    inner: [u64; 4],
}

impl U256 {
    pub fn from_bytes32(bytes: [u8; 32]) -> Self {
        let high_0: u64 = (
            (
                (
                    (
                        (
                            (((bytes[0] as u64) << 56) + ((bytes[1] as u64) << 48))
                                + ((bytes[2] as u64) << 40)
                        )
                            + ((bytes[3] as u64) << 32)
                    )
                        + ((bytes[4] as u64) << 24)
                )
                    + ((bytes[5] as u64) << 16)
            )
                + ((bytes[6] as u64) << 8)
        )
            + (bytes[7] as u64);
        let high_1: u64 = (
            (
                (
                    (
                        (
                            (((bytes[8] as u64) << 56) + ((bytes[9] as u64) << 48))
                                + ((bytes[10] as u64) << 40)
                        )
                            + ((bytes[11] as u64) << 32)
                    )
                        + ((bytes[12] as u64) << 24)
                )
                    + ((bytes[13] as u64) << 16)
            )
                + ((bytes[14] as u64) << 8)
        )
            + (bytes[15] as u64);
        let low_0: u64 = (
            (
                (
                    (
                        (
                            (((bytes[16] as u64) << 56) + ((bytes[17] as u64) << 48))
                                + ((bytes[18] as u64) << 40)
                        )
                            + ((bytes[19] as u64) << 32)
                    )
                        + ((bytes[20] as u64) << 24)
                )
                    + ((bytes[21] as u64) << 16)
            )
                + ((bytes[22] as u64) << 8)
        )
            + (bytes[23] as u64);
        let low_1: u64 = (
            (
                (
                    (
                        (
                            (((bytes[24] as u64) << 56) + ((bytes[25] as u64) << 48))
                                + ((bytes[26] as u64) << 40)
                        )
                            + ((bytes[27] as u64) << 32)
                    )
                        + ((bytes[28] as u64) << 24)
                )
                    + ((bytes[29] as u64) << 16)
            )
                + ((bytes[30] as u64) << 8)
        )
            + (bytes[31] as u64);
        Self { inner: [high_0, high_1, low_0, low_1] }
    }

    pub fn to_u128_limbs(self) -> [Field; 2] {
        let two_pow_64: Field = 2.pow_32(64);
        let high: Field = ((self.inner[0] as Field) * two_pow_64) + (self.inner[1] as Field);
        let low: Field = ((self.inner[2] as Field) * two_pow_64) + (self.inner[3] as Field);
        [high, low]
    }
}

unconstrained fn main(kernel_data: DataToHash) -> pub [Field; 2] {
    let mut tx_effects_hash_inputs: [Field; 169] = [0; 169];
    let new_note_hashes: [Field; 64] = kernel_data.new_note_hashes;
    let new_nullifiers: [Field; 64] = kernel_data.new_nullifiers;
    let public_data_update_requests: [PublicDataUpdateRequest; 16] =
        kernel_data.public_data_update_requests;
    let l2ToL1Msgs: [Field; 2] = kernel_data.new_l2_to_l1_msgs;
    let encryptedLogsHash: [Field; 2] = kernel_data.encrypted_logs_hash;
    let unencryptedLogsHash: [Field; 2] = kernel_data.unencrypted_logs_hash;
    let mut offset: u32 = 0;
    for j in 0..MAX_NOTE_HASHES_PER_TX {
        {
            let i_3803: u32 = offset + j;
            tx_effects_hash_inputs[i_3803] = new_note_hashes[j];
        }
    }
    offset = offset + MAX_NOTE_HASHES_PER_TX;
    for j in 0..MAX_NULLIFIERS_PER_TX {
        {
            let i_3805: u32 = offset + j;
            tx_effects_hash_inputs[i_3805] = new_nullifiers[j];
        }
    }
    offset = offset + MAX_NULLIFIERS_PER_TX;
    for j in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX {
        {
            let i_3807: u32 = offset + (j * 2);
            tx_effects_hash_inputs[i_3807] = public_data_update_requests[j].leaf_slot;
        };
        {
            let i_3808: u32 = (offset + (j * 2)) + 1;
            tx_effects_hash_inputs[i_3808] = public_data_update_requests[j].new_value;
        }
    }
    offset = offset + (MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX * 2);
    for j in 0..MAX_L2_TO_L1_MSGS_PER_TX {
        {
            let i_3810: u32 = offset + j;
            tx_effects_hash_inputs[i_3810] = l2ToL1Msgs[j];
        }
    }
    offset = offset + MAX_L2_TO_L1_MSGS_PER_TX;
    let contract_leaf: NewContractData = kernel_data.new_contracts[0];
    tx_effects_hash_inputs[offset] = contract_leaf.hash();
    offset = offset + MAX_NEW_CONTRACTS_PER_TX;
    let new_contracts: [NewContractData; 1] = kernel_data.new_contracts;
    tx_effects_hash_inputs[offset] = new_contracts[0].contract_address;
    {
        let i_3813: u32 = offset + 1;
        tx_effects_hash_inputs[i_3813] = new_contracts[0].portal_contract_address;
    };
    offset = offset + (MAX_NEW_CONTRACTS_PER_TX * 2);
    for j in 0..NUM_FIELDS_PER_SHA256 {
        {
            let i_3815: u32 = offset + j;
            tx_effects_hash_inputs[i_3815] = encryptedLogsHash[j];
        }
    }
    offset = offset + (NUM_ENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256);
    for j in 0..NUM_FIELDS_PER_SHA256 {
        {
            let i_3817: u32 = offset + j;
            tx_effects_hash_inputs[i_3817] = unencryptedLogsHash[j];
        }
    }
    offset = offset + (NUM_UNENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256);
    assert(offset == TX_EFFECT_HASH_INPUT_SIZE);
    let mut hash_input_flattened: [u8; 5344] = [0; 5344];
    for offset in 0..TX_EFFECT_HASH_FULL_FIELDS {
        let input_as_bytes: [u8; 32] = tx_effects_hash_inputs[offset].to_be_bytes();
        for byte_index in 0..32 {
            {
                let i_3822: u32 = (offset * 32) + byte_index;
                hash_input_flattened[i_3822] = input_as_bytes[byte_index];
            }
        }
    }
    for log_field_index in 0..TX_EFFECT_HASH_LOG_FIELDS {
        let input_as_bytes: [u8; 16] =
            tx_effects_hash_inputs[TX_EFFECT_HASH_FULL_FIELDS + log_field_index].to_be_bytes();
        for byte_index in 0..16 {
            {
                let i_3826: u32 =
                    ((TX_EFFECT_HASH_FULL_FIELDS * 32) + (log_field_index * 16)) + byte_index;
                hash_input_flattened[i_3826] = input_as_bytes[byte_index];
            }
        }
    }
    let blake2_digest: [u8; 32] = std::hash::blake2s(hash_input_flattened);
    U256::from_bytes32(blake2_digest).to_u128_limbs()
}
