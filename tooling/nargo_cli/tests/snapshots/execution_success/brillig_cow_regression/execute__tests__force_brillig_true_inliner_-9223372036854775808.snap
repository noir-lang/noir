---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "kernel_data",
        "type": {
          "kind": "struct",
          "path": "DataToHash",
          "fields": [
            {
              "name": "new_note_hashes",
              "type": {
                "kind": "array",
                "length": 64,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 64,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "public_data_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "PublicDataUpdateRequest",
                  "fields": [
                    {
                      "name": "leaf_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "encrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_contracts",
              "type": {
                "kind": "array",
                "length": 1,
                "type": {
                  "kind": "struct",
                  "path": "NewContractData",
                  "fields": [
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "portal_contract_address",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 2,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZ3dih43EobvZY590PpX5VZCCE4yWQzGMY69sBjf+6pe1av6BnaCXc2eRI/jmUc/rVJLpQ75+vTH829f/vXruw9//vX3008/f3367dO79+/f/evX93/9/vbzu78+rH/79enSf6RSn35Kb1bZrOxWDiunlbLLelmZrMxWFivNV81XzVfNV81XzdfM18zXzNfM18zXzNfM18zXzNfM183XzdfN183XzdfN183XzdfN1803zDfMN8w3zDfMN8w3zDfMN8w3zDfNN803zTfNN803zTfNN803zTfNJ+YT84n5xHxiPjGfmE/MJ+aT5ctvnvJ1WZmsXL9ftFw/X7VcP9+0lF2my8pkZbZy1de1XD8/tFw/P1eZLyuTldnKYuVqn2ip/bsWFO1gUkiETCgE7aS2FrMY0AmDMAligKmsfcNcBmRCIVRCI3SCmnVIMKUBYoBJDUhWF6Y1oBDY5sY2N5oxtwGTIAadbe5sc2ebMcN16DHFAY3QCWrWx4JpDhADTHSAmvWRYaoDCqESGqETBmESxABTHkAzJr0+bcx6QCU0QicMwiSoWScJJj8gETJhmbPOHw2ADY2wzFmnjcbAhkmQDQVhAEiETFBzVqiERugENReFSRADDZhcFRIhEwqhEhqhE9TcFCZBDDS0Nqi5K2RCIVRCI6h5KAzCJIiBxuCGRMgENU+FSmiEThhWl8bgBjHQGNzANleaNQY3VEIjsM2Vba5ss8ZgXhOgaAxuSIRMWOZyKVRCI3TCICxz0eeuMQjQGNyQCJlQCJWgZp0SGoMbBmESxOrSGNyQCJnANg+aNQY3dMIgsM2DbZ5s82SbNQaLTkiNwQ2V0AidoGadfhqDG8RAY3CDmnX6aQxuKIRKaIROGIRJkA1VY3BDImRCIVRCI3TCIJi5aqCVrqD/Zs2WqpFSpoL+lSgUQiU0QicMwiSIgUZKvRQSIRMKoRIaoRP0LZsUJkEMNFI2JEImFEK3fmlc1KwwCWKgcbFBPUUhEwpBW1gVGqETBmESxEDjYoOadcA1LqoOuMbFhkpoBPVomwefhc7wCmiEThgE/S0dcJ3hAJ3hGxIhEwqhEprVhRkOGIRJEAPMcABbiBkOKIRuU0vnc9NHqfN5g2xoOp9bUkiETCiESmiETlDzenANW66ioL9VFfRnmsIgTIIY6NuhdYVEyIRCqIRG6IRhdemc3yAGOuc3JEImsIU65zc0wsRGr+kEb+v5N53gbSokQiYUgmr0t/RVsKETBmESxECn/IZEWOauz0Sn/IZKaIROGIRJWOauz0Sn/IZEyAQ16+PSKb+hETphECZBDLAd07qwHQNkQiFUQiN0wiBMAw0LfZAaFV1nj0bFhkpoBG2gPiSNig2TIAYaFRsSIRMK9vxNl32Uzcpu5bByWikouwYIymTlPnt0jYXeFDphECZB27X61zU6NiRCJhRCJTRCx/Gmp2HltFJ2qdGDMlmZrSxW1l3iGWvb8YwBgzAJYqDPeEMiZEIh6BheCo3QCYMwCWKgi+GGRMiEQqB50jxpnjRPmifNQrPQLDQLzXjuSaEROmEQJkE2DDx9QCJkQiFUQiN0wiBMAs2J5kRzojnRnGhONCeaE82J5kSzTotRFBIhEwqhEhqhEwZhEsSg0FxoLjQXmgvNheZCc6G50FxorjRXmnVVHVVBf6sp6G91BTHQNXRDImRCIVRCI3TCINDcaO40d5o7zbqGjqGg5qnQCJ0wCJMgBhpfGxIhEwqB5kHzoHnQPGgeNE+aJ82T5knzpHnSPGmeNCO+REEMEF+ARMiEQqiERuiEQVjmeSnIhqnRNJNCIVTC8sys0AmDMAlioNG0IREyoRDUXBQaoRMGYRLEALkhQCJkQiHQnGnONGeaM82Z5kKzRtOsCplQCJXQCJ0wCJMgBhpNG2iuNFeaNb5mU2iEThiESRADjbgNiZAJhUBzo7nR3GhuNDeaO82d5k5zp7nT3GnuNHea99ZEJ9Dem4CwOdE5sHcnOuh7ewLC/kTHZG9QQNihwIec3wr8iZTRJtQxlPKhcqgeQh1TqR9CHaKkdeg2aCJ3BELySNOHE9mjTflQOaR1aIJuIoe6SevQrNtEHlVzfROZ1E2oY/VIrutQOpQPoY6uVA+hjqGEOqbSOIQ6RElI6TqUDiHdeCmVQ0g4JiVkHLNSP4Q8aVGah4SkkWmEjGZVyodQh/Yoow7tR26HUIf2KI9D85CQkOjVfJEg07sJdWiPkOvVBIgg2bupHeqHkDvVXiLhu0lIO+Wr/d05X+3RTvpqP3bWF1QPoQ7t2078ao+Q+dVztiD1u0lISP5uQh3aD6R/N5VDqEP7hgywnv8FKWA9ygtywJvmISEhDayneEEeeFM+pHXoQV6QCtYzuSAXrIdyQTJ40zg0D6EO7SVOIJvSIdShfUOc61FcEOd6qhbE+aZ+aBzSOvQgLIhzEOJ8k9ah51xBnOtBVxDnetIVxPmmdqgf0jr0UCmI801CQpzrEVgQ53qaFcS5njoFcb6pHmqHUIf2EnG+CXVojxDneiBMFwLdMDlmR61HD4YLq2Nz1Kr06LcQWfoCRJ6+AuUgQt4QtTUgautA1DaA1bE5dkfUNoHTUQ4i+LsAkcFHhxD+A01H/BtWx+aIWwL0DWuA4XTEXQF6jGVgoG9YBwb6hoXAsDhWR9SGzmMxMByOqA09xnow0DcsCAN9w4pgmB2LI+4o0HmsCobdETcV6DEWhom+YWWY6BuWBsPkmB1xH4LOY3kwbI6oDT3GCjHRNywRE33DGrERi4RhckRt6DzWCcPqiNrQYywVgr5hrTCcjnIQy4Wg81gvDLOj1iYYEiwZgh5jzRD0DYuG4XBEbegx1g1Bj7FwCDqElcMwOxZH1Ia+YfUw7I6oDT3WBWTdgQL1JuFC03UJISbH7IjbJvRt3zdtbI56Y3Ghx7h1utA33Dtd6BtunoAJd0+GyRG1dWBxrI6obQBR2wSiNgFORzmI+yhD3HVdwOxYHLU23RQt1Np0L7QQ92kFOBynoxzEHZVukhYmx+yI2tBj3FUl9A23VQl9w32V4XCcjqgNnce9lSFqQzdxd5XRIdxeGVbH5tgdh+N0lIO4yzJMjl5b9dqq11a9tuq1Va+tem04CqA/OAtsKofqoXaoHxqH5iEh4UyA4cGhYNOqA8GNrycQxfh+AkGMLyiM9M4ej1dXCYQtvqNA1OJLik26RCB88TUFghPfUyAK8UWFkdaBFuyTA5qwjw4bh+N0lIP7+LAxOWbH4lgddYTQKl0GjISki4BROpQPlUP10LEILfi+wigdyofKoXqoHcIdsg4lPrsgJsfsWByrY3Psjrit7kDcV6M2RK3uVBM+2iAmx+yI2ZqA01EOIhINERsFmB2LY3Vsjt1xOE5HObgjcaPXVr226rXtQNM5i882csaQ4K7Y/i1+FqPT0DKMTmuO3XE4Tkc52C9HtAzD17NjcURtAsRzu4B4bhjJjueWgXhu6FCX04vhHRrJETJ4R3dUWUUVGlS5ogoNqoXfvr154sdjv37+9Pys3449fE3289enj28/PX/4/PTThy/v3795+vfb91/wQ39/fPsB5ee3n9bfLv/zhz9WuYR/vnv/rPTtjf/29fqvrkv6ab+9UI6gfb9BdP+3Des4EjIIDetWOtKGdXV9HUOvIYO3Yb3sIgYc3MzQY4Z5erHWl4gh64HSDGOEDHIMpYTaUMsx1NB8WFfmhYZ1fRYx9HHasG5ZQgYNYDOMEjLouZOGHDEM3Qdvw7qNCBm8DSsJHjHMfMZh5VVDbfAZtdLKoTY0N8R6IfOM5FpsQgaP7tgq1y5NGcHQ1jk0ZDhrdVunvZAhJ29DZEY1JJW3YW29Iwa8Z7chtxRqg5yRXG/1UBvScMMIGfppQymROdlqOk+z1pChnFm9ZKGnWa/qhtCMqo1rdVujGjG0cp5FG6Fx6Od9sTDUi5HPOKxL2YChXxefZl/JtIjB52QvV2SdXK8s9qLXWBvqeev1GnpnvTDMUC9wkbQNKbRO9msON7S7hj5CT3PwzduzhEYSp8B7huuM5DoO32xDuUIjWXI7hthqP4Qj2dbV9V1DbH0Qf+ut672IYfazys3Q6aDNedYoib1xHnsROuOsis9KK6HTYi3ntFjLDO2KS593DdNPKKGnWUtt3obQ6aA28VNSaEdafU/bUiSyKnLnPG+GeuHvrJpjp8Xr7B/WyT3Uhqt79iB0Wpz57MzXAcVnVJrfbah8FOtS/7UW6LR9TbDSqFyq10WUb2lXNuSFQl5XrJQmZ9S6u7hCCtzJb0V6OGD8iCKfyFj7/PyaQl+Or6aD/IEuQw+1opwzxsIcUtRzbF0pzFgr6pkWa1RSSNHPsXPlKEdMUfJR1BZTDAbp2taU+4rgQx31PNQZe6jlZBLy47r9Q4p6OlJaTFGvE6n14T38Q62Q04r6+uz8p42ZnORSlzReW/T0Tfn/WzcLrgt2qK/lIpI7zp6/Xun4u4Z5xQxnwcpSQ4aTfV4r13XbIDd7ETSUeh1DK3cNPYcM5/xZyughw3CD5JuGdaFxsxcxw7qizWdDka/bhhEzpGMI7Q7XXsjb0K/bhlgvmvdixHqRfHM3WshwTrDrxvy6bYiNg5xxkHR3HCSUr0xSvBehnOlLw4gZfBza7XFosXEY3ot53TbExmH4OMjtcZDIOOTrrFErwXXdNoyY4ezyr3JzHJYhNg4t/6+zX9QQG4fm4xC6MX0xDqGVNl/iBpk3DelqN3uRQnn8nPzElkKr3EvDiBnO04xl4XMa3oZ53TbEejG8FxLrRfGnGVujsq8wOXRD9tIwY4YzDjm2wjyMQy6hWZ1Ppi/n0N7+pUFiBh/J0e+OQyhvm7N4GuMqdw2h0+IyeBIjjZvjUFJoThZPNpZa7xpCd0vL4CPZ5t1xCN2IrLTWQ06q3TWETqzL4CMpt8dBQuNQU/OsWL1rCGWTHntRS2gk68mi5Nr7XUNoH7UMZz7U2Ju3yvTk97hrSLGneTJaOfZlyRqH5obQ02wnD5NbnXcNobPeMvhI9nx3HEJ3bCtFeuKihb6nfGGQUFy0k1XL/So3x6FfoTnZz/dz61rlum0YMcPl9zn17jjU0Jz0b1vXxU66bZgxg49k7L35OA6hb5XyuPxWK+XbBokZst+s3R2HkWPjUL0NsZ3YC8O824vYTmycL2zykHLTMEN52mUobgitD/N8cZVjWfcXhppiBh+H2HtzzOyG0NOc/eyCYln3F4bQl0bL4CM55e44hL59z3KdfVTs27UXhlxihjOSsW/XHsdBYnt7/4I/Sxt3DaH/ymgZfCRj783HcQh9oZtlnn2UxM56bihXKEe6DOfO/Qq+N884LEPortn/m7GFctdQQ3fNV/aRbLfHIXbnfnVvQ+y/33s0xHZij70I7cTW6srIWvjwAd33f8MnmWvUlMfvpF4acs7fu96nUCvGdVoxIt/UiN9HrXW7hdpwvn6f8rAP+qE21NOGh3u5HzJkN6S7hhJrw8kvylXL3WfxcFb7EcN556ynGevFeecE50Pp5zvG0uern4VmzaW+OqfOIeXxvwFcqefvbcPo50uxeb36LeU/Gvz7pqihyj1DPx/M9cdPB797FPr55LvPGfp9Li7jeln/L+tPb39/9+nF/83km5o+vXv72/tn++OfXz78/vC3n//zkX/D/xvKx09//f78x5dPz2ry/yXK+sfPfR3xei+/vHlK609pnU7erHxrWn8u+uc1Q1LK+rf44Tze9II/4qeL/vV6zf7yTRv7Xw==",
  "file_map": {
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "50": {
      "source": "// Tests a performance regression found in aztec-packages with brillig cow optimization\nglobal MAX_NOTE_HASHES_PER_TX: u32 = 64;\nglobal MAX_NULLIFIERS_PER_TX: u32 = 64;\nglobal MAX_L2_TO_L1_MSGS_PER_TX: u32 = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u32 = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: u32 = 1;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;\nglobal NUM_FIELDS_PER_SHA256: u32 = 2;\nglobal TX_EFFECT_HASH_INPUT_SIZE: u32 = 169;\nglobal TX_EFFECT_HASH_LOG_FIELDS: u32 = 4;\nglobal TX_EFFECT_HASH_FULL_FIELDS: u32 = 165;\n\nstruct PublicDataUpdateRequest {\n    leaf_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nstruct NewContractData {\n    contract_address: Field,\n    portal_contract_address: Field,\n}\n\nimpl NewContractData {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash([self.contract_address, self.portal_contract_address])\n    }\n}\n\nstruct DataToHash {\n    new_note_hashes: [Field; MAX_NOTE_HASHES_PER_TX],\n    new_nullifiers: [Field; MAX_NULLIFIERS_PER_TX],\n    public_data_update_requests: [PublicDataUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX],\n    new_l2_to_l1_msgs: [Field; MAX_L2_TO_L1_MSGS_PER_TX],\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    new_contracts: [NewContractData; MAX_NEW_CONTRACTS_PER_TX],\n}\n\nstruct U256 {\n    // This is in big-endian order, typically because\n    // sha256 is usually in big endian order.\n    // Note: this means that inner[0] has the most significant 64 bits.\n    inner: [u64; 4],\n}\n\nimpl U256 {\n    pub fn from_bytes32(bytes: [u8; 32]) -> U256 {\n        // We use addition rather than a bitwise OR as the bitshifts ensure that none of the bytes overlap each other.\n        let high_0 = ((bytes[0] as u64) << 56)\n            + ((bytes[1] as u64) << 48)\n            + ((bytes[2] as u64) << 40)\n            + ((bytes[3] as u64) << 32)\n            + ((bytes[4] as u64) << 24)\n            + ((bytes[5] as u64) << 16)\n            + ((bytes[6] as u64) << 8)\n            + (bytes[7] as u64);\n\n        let high_1 = ((bytes[8] as u64) << 56)\n            + ((bytes[9] as u64) << 48)\n            + ((bytes[10] as u64) << 40)\n            + ((bytes[11] as u64) << 32)\n            + ((bytes[12] as u64) << 24)\n            + ((bytes[13] as u64) << 16)\n            + ((bytes[14] as u64) << 8)\n            + (bytes[15] as u64);\n\n        let low_0 = ((bytes[16] as u64) << 56)\n            + ((bytes[17] as u64) << 48)\n            + ((bytes[18] as u64) << 40)\n            + ((bytes[19] as u64) << 32)\n            + ((bytes[20] as u64) << 24)\n            + ((bytes[21] as u64) << 16)\n            + ((bytes[22] as u64) << 8)\n            + (bytes[23] as u64);\n\n        let low_1 = ((bytes[24] as u64) << 56)\n            + ((bytes[25] as u64) << 48)\n            + ((bytes[26] as u64) << 40)\n            + ((bytes[27] as u64) << 32)\n            + ((bytes[28] as u64) << 24)\n            + ((bytes[29] as u64) << 16)\n            + ((bytes[30] as u64) << 8)\n            + (bytes[31] as u64);\n\n        U256 { inner: [high_0, high_1, low_0, low_1] }\n    }\n\n    pub fn to_u128_limbs(self) -> [Field; 2] {\n        let two_pow_64 = 2.pow_32(64);\n\n        let high = (self.inner[0] as Field) * two_pow_64 + self.inner[1] as Field;\n        let low = (self.inner[2] as Field) * two_pow_64 + self.inner[3] as Field;\n\n        [high, low]\n    }\n}\n\nunconstrained fn main(kernel_data: DataToHash) -> pub [Field; NUM_FIELDS_PER_SHA256] {\n    let mut tx_effects_hash_inputs = [0; TX_EFFECT_HASH_INPUT_SIZE];\n\n    let new_note_hashes = kernel_data.new_note_hashes;\n    let new_nullifiers = kernel_data.new_nullifiers;\n    let public_data_update_requests = kernel_data.public_data_update_requests;\n    let l2ToL1Msgs = kernel_data.new_l2_to_l1_msgs;\n    let encryptedLogsHash = kernel_data.encrypted_logs_hash;\n    let unencryptedLogsHash = kernel_data.unencrypted_logs_hash;\n\n    let mut offset = 0;\n\n    for j in 0..MAX_NOTE_HASHES_PER_TX {\n        tx_effects_hash_inputs[offset + j] = new_note_hashes[j];\n    }\n    offset += MAX_NOTE_HASHES_PER_TX;\n\n    for j in 0..MAX_NULLIFIERS_PER_TX {\n        tx_effects_hash_inputs[offset + j] = new_nullifiers[j];\n    }\n    offset += MAX_NULLIFIERS_PER_TX;\n\n    for j in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX {\n        tx_effects_hash_inputs[offset + j * 2] = public_data_update_requests[j].leaf_slot;\n        tx_effects_hash_inputs[offset + j * 2 + 1] = public_data_update_requests[j].new_value;\n    }\n    offset += MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX * 2;\n\n    for j in 0..MAX_L2_TO_L1_MSGS_PER_TX {\n        tx_effects_hash_inputs[offset + j] = l2ToL1Msgs[j];\n    }\n    offset += MAX_L2_TO_L1_MSGS_PER_TX;\n\n    let contract_leaf = kernel_data.new_contracts[0];\n    tx_effects_hash_inputs[offset] = contract_leaf.hash();\n\n    offset += MAX_NEW_CONTRACTS_PER_TX;\n\n    let new_contracts = kernel_data.new_contracts;\n    tx_effects_hash_inputs[offset] = new_contracts[0].contract_address;\n\n    tx_effects_hash_inputs[offset + 1] = new_contracts[0].portal_contract_address;\n\n    offset += MAX_NEW_CONTRACTS_PER_TX * 2;\n\n    for j in 0..NUM_FIELDS_PER_SHA256 {\n        tx_effects_hash_inputs[offset + j] = encryptedLogsHash[j];\n    }\n\n    offset += NUM_ENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256;\n\n    for j in 0..NUM_FIELDS_PER_SHA256 {\n        tx_effects_hash_inputs[offset + j] = unencryptedLogsHash[j];\n    }\n\n    offset += NUM_UNENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256;\n    assert_eq(offset, TX_EFFECT_HASH_INPUT_SIZE); // Sanity check\n    let mut hash_input_flattened =\n        [0; TX_EFFECT_HASH_FULL_FIELDS * 32 + TX_EFFECT_HASH_LOG_FIELDS * 16];\n    for offset in 0..TX_EFFECT_HASH_FULL_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_inputs[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    for log_field_index in 0..TX_EFFECT_HASH_LOG_FIELDS {\n        let input_as_bytes: [u8; 16] =\n            tx_effects_hash_inputs[TX_EFFECT_HASH_FULL_FIELDS + log_field_index].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[TX_EFFECT_HASH_FULL_FIELDS * 32 + log_field_index * 16 + byte_index] =\n                input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = std::hash::blake3(hash_input_flattened);\n    U256::from_bytes32(blake3_digest).to_u128_limbs()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
