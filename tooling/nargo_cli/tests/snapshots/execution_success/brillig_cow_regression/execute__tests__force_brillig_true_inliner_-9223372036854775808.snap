---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "kernel_data",
        "type": {
          "kind": "struct",
          "path": "DataToHash",
          "fields": [
            {
              "name": "new_note_hashes",
              "type": {
                "kind": "array",
                "length": 64,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 64,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "public_data_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "PublicDataUpdateRequest",
                  "fields": [
                    {
                      "name": "leaf_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "encrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_contracts",
              "type": {
                "kind": "array",
                "length": 1,
                "type": {
                  "kind": "struct",
                  "path": "NewContractData",
                  "fields": [
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "portal_contract_address",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 2,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _185",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127, _128, _129, _130, _131, _132, _133, _134, _135, _136, _137, _138, _139, _140, _141, _142, _143, _144, _145, _146, _147, _148, _149, _150, _151, _152, _153, _154, _155, _156, _157, _158, _159, _160, _161, _162, _163, _164, _165, _166, _167, _168, _169, _170, _171, _172, _173, _174, _175, _176, _177, _178, _179, _180, _181, _182, _183]",
    "public parameters indices : []",
    "return value indices : [_184, _185]",
    "BRILLIG CALL func 0: inputs: [Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(34))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(36))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(37))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(38))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(39))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(40))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(41))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(42))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(43))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(44))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(46))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(47))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(48))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(50))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(52))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(53))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(54))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(55))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(56))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(57))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(58))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(59))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(60))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(61))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(63))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(64))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(65))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(66))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(67))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(70))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(71))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(72))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(73))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(74))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(75))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(76))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(77))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(78))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(79))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(80))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(81))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(82))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(83))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(84))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(87))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(88))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(89))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(90))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(94))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(95))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(96))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(97))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(98))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(99))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(100))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(101))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(102))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(103))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(104))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(105))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(106))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(107))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(108))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(109))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(110))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(111))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(112))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(113))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(114))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(115))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(116))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(117))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(118))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(119))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(120))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(121))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(122))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(123))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(124))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(126))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(127))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(128))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(129))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(130))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(131))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(132))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(134))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(135))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(136))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(137))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(138))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(139))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(142))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(143))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(144))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(145))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(147))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(148))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(150))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(151))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(152))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(153))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(154))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(155))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(156))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(157))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(160))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(161))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(162))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(163))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(166))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(167))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(169))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(170))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(171))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(172))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(173))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(174))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(175))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(177))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(178))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(179))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(180))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(181))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(182))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(183))], q_c: 0 }])], outputs: [Array([Witness(184), Witness(185)])]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 33040 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 184 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32854), size_address: Relative(8), offset_address: Relative(9) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32854 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 64 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 65 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 102 }, Mov { destination: Relative(1), source: Relative(8) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32918 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 64 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 65 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 102 }, Mov { destination: Relative(2), source: Relative(8) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32982 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 48 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 49 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(3) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 102 }, Mov { destination: Relative(3), source: Relative(8) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 33030 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(4) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 102 }, Mov { destination: Relative(4), source: Relative(8) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 33032 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(5) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 102 }, Mov { destination: Relative(5), source: Relative(8) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 33034 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(6) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 102 }, Mov { destination: Relative(6), source: Relative(8) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 33036 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(7) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 102 }, Mov { destination: Relative(7), source: Relative(8) }, Call { location: 113 }, Call { location: 133 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 33038 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(3) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 102 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 33038 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 112 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 105 }, Return, Const { destination: Direct(32835), bit_size: Integer(U32), value: 64 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 16 }, Const { destination: Direct(32837), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(32838), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(32839), bit_size: Integer(U32), value: 169 }, Const { destination: Direct(32840), bit_size: Integer(U32), value: 165 }, Const { destination: Direct(32841), bit_size: Integer(U32), value: 4 }, Const { destination: Direct(32842), bit_size: Field, value: 340282366920938463463374607431768211456 }, Const { destination: Direct(32843), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(32844), bit_size: Field, value: 0 }, Const { destination: Direct(32845), bit_size: Integer(U1), value: 1 }, Const { destination: Direct(32846), bit_size: Field, value: 2 }, Const { destination: Direct(32847), bit_size: Integer(U32), value: 3 }, Const { destination: Direct(32848), bit_size: Integer(U32), value: 5 }, Const { destination: Direct(32849), bit_size: Integer(U32), value: 6 }, Const { destination: Direct(32850), bit_size: Integer(U32), value: 7 }, Const { destination: Direct(32851), bit_size: Integer(U32), value: 8 }, Const { destination: Direct(32852), bit_size: Integer(U32), value: 32 }, Const { destination: Direct(32853), bit_size: Integer(U32), value: 256 }, Return, Call { location: 627 }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 170 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 169 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Mov { destination: Relative(12), source: Relative(10) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 148 }, Store { destination_pointer: Relative(12), source: Direct(32844) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Jump { location: 142 }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 157 }, Call { location: 633 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(9) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 165 }, Call { location: 633 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(3) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 173 }, Call { location: 633 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 181 }, Call { location: 633 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(5) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(9) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 189 }, Call { location: 633 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(6) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(9) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 197 }, Call { location: 633 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32843) }, Mov { destination: Relative(8), source: Direct(32843) }, Jump { location: 204 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Direct(32835) }, JumpIf { condition: Relative(11), location: 604 }, Jump { location: 207 }, Load { destination: Relative(8), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32835) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(11) }, JumpIf { condition: Relative(12), location: 212 }, Call { location: 636 }, Store { destination_pointer: Relative(9), source: Relative(11) }, Mov { destination: Relative(1), source: Direct(32843) }, Jump { location: 215 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, JumpIf { condition: Relative(8), location: 581 }, Jump { location: 218 }, Load { destination: Relative(2), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, BinaryIntOp { destination: Relative(11), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 223 }, Call { location: 636 }, Store { destination_pointer: Relative(9), source: Relative(8) }, Mov { destination: Relative(1), source: Direct(32843) }, Jump { location: 226 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(2), location: 538 }, Jump { location: 229 }, Load { destination: Relative(2), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32852) }, BinaryIntOp { destination: Relative(8), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(8), location: 234 }, Call { location: 636 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32838) }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32839) }, JumpIf { condition: Relative(11), location: 240 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(8) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(3) }, Store { destination_pointer: Relative(13), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32838) }, BinaryIntOp { destination: Relative(8), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(8), location: 251 }, Call { location: 636 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, Load { destination: Relative(8), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32839) }, JumpIf { condition: Relative(4), location: 256 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, Store { destination_pointer: Relative(13), source: Relative(8) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(8), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(8), location: 267 }, Call { location: 636 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32838) }, Load { destination: Relative(3), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32837) }, Load { destination: Relative(8), source_pointer: Relative(11) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(12), source: Direct(0) }, Mov { destination: Relative(13), source: Relative(3) }, Mov { destination: Relative(14), source: Relative(8) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(11) }, Call { location: 664 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(7), source: Relative(13) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32839) }, JumpIf { condition: Relative(11), location: 282 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, Store { destination_pointer: Relative(13), source: Relative(7) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32838) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 293 }, Call { location: 636 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Direct(32839) }, JumpIf { condition: Relative(2), location: 296 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(4) }, Store { destination_pointer: Relative(12), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32838) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 307 }, Call { location: 636 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32839) }, JumpIf { condition: Relative(7), location: 310 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Store { destination_pointer: Relative(12), source: Relative(8) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(3), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 321 }, Call { location: 636 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32838) }, Load { destination: Relative(3), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32839) }, JumpIf { condition: Relative(4), location: 326 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, Store { destination_pointer: Relative(11), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32838) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 337 }, Call { location: 636 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32837) }, Load { destination: Relative(7), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32839) }, JumpIf { condition: Relative(5), location: 342 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(5), source: Direct(32773) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 353 }, Call { location: 636 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32838) }, Load { destination: Relative(2), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32839) }, JumpIf { condition: Relative(4), location: 358 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(5) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Store { destination_pointer: Relative(8), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32838) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 369 }, Call { location: 636 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32837) }, Load { destination: Relative(5), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32839) }, JumpIf { condition: Relative(6), location: 374 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Store { destination_pointer: Relative(10), source: Relative(6) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 386 }, Call { location: 636 }, Store { destination_pointer: Relative(9), source: Relative(2) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Direct(32839) }, JumpIf { condition: Relative(3), location: 391 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Const { destination: Relative(2), bit_size: Integer(U8), value: 0 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5345 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 5344 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, Mov { destination: Relative(6), source: Relative(4) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 406 }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Jump { location: 400 }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5344 }, Mov { destination: Relative(1), source: Direct(32843) }, Jump { location: 412 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32840) }, JumpIf { condition: Relative(4), location: 496 }, Jump { location: 415 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5280 }, Mov { destination: Relative(1), source: Direct(32843) }, Jump { location: 418 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, JumpIf { condition: Relative(5), location: 446 }, Jump { location: 421 }, Load { destination: Relative(1), source_pointer: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5344 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BlackBox(Blake3 { message: HeapVector { pointer: Relative(3), size: Relative(4) }, output: HeapArray { pointer: Relative(5), size: 32 } }), Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(4), source: Direct(0) }, Mov { destination: Relative(5), source: Relative(2) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 870 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(5) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(4), source: Direct(0) }, Mov { destination: Relative(5), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 1150 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(2), source: Relative(5) }, Mov { destination: Relative(1), source: Relative(2) }, Return, Load { destination: Relative(6), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Direct(32840), rhs: Relative(1) }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Direct(32839) }, JumpIf { condition: Relative(8), location: 451 }, Call { location: 639 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(7) }, Load { destination: Relative(8), source_pointer: Relative(11) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 11 }, Mov { destination: Relative(11), source: Direct(0) }, Mov { destination: Relative(12), source: Relative(8) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(7) }, Call { location: 1186 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(6), source: Relative(12) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(7) }, BinaryIntOp { destination: Relative(9), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 466 }, Call { location: 636 }, Mov { destination: Relative(5), source: Direct(32843) }, Jump { location: 468 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Direct(32836) }, JumpIf { condition: Relative(7), location: 474 }, Jump { location: 471 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32838) }, Mov { destination: Relative(1), source: Relative(5) }, Jump { location: 418 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(5) }, BinaryIntOp { destination: Relative(9), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 478 }, Call { location: 636 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(5) }, Load { destination: Relative(9), source_pointer: Relative(12) }, Load { destination: Relative(11), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(12), location: 485 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5345 }, Call { location: 642 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(7) }, Store { destination_pointer: Relative(14), source: Relative(9) }, Store { destination_pointer: Relative(2), source: Relative(12) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32838) }, Mov { destination: Relative(5), source: Relative(7) }, Jump { location: 468 }, Load { destination: Relative(5), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(1) }, Load { destination: Relative(6), source_pointer: Relative(8) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 11 }, Mov { destination: Relative(11), source: Direct(0) }, Mov { destination: Relative(12), source: Relative(6) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(7) }, Call { location: 1197 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(5), source: Relative(12) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32852) }, Mov { destination: Relative(4), source: Direct(32843) }, Jump { location: 510 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Direct(32852) }, JumpIf { condition: Relative(7), location: 516 }, Jump { location: 513 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32838) }, Mov { destination: Relative(1), source: Relative(4) }, Jump { location: 412 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(8), op: LessThanEquals, bit_size: U32, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 520 }, Call { location: 636 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(4) }, Load { destination: Relative(8), source_pointer: Relative(11) }, Load { destination: Relative(9), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(11), location: 527 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5345 }, Call { location: 642 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(7) }, Store { destination_pointer: Relative(13), source: Relative(8) }, Store { destination_pointer: Relative(2), source: Relative(11) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32838) }, Mov { destination: Relative(4), source: Relative(7) }, Jump { location: 510 }, Load { destination: Relative(2), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, JumpIf { condition: Relative(12), location: 544 }, Call { location: 636 }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32847) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, Load { destination: Relative(8), source_pointer: Relative(13) }, Load { destination: Relative(12), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Direct(32839) }, JumpIf { condition: Relative(13), location: 552 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(11) }, Store { destination_pointer: Relative(15), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32838) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(8) }, JumpIf { condition: Relative(12), location: 563 }, Call { location: 636 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Load { destination: Relative(2), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Direct(32839) }, JumpIf { condition: Relative(11), location: 570 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(8) }, Store { destination_pointer: Relative(14), source: Relative(2) }, Store { destination_pointer: Relative(10), source: Relative(11) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32838) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 226 }, Load { destination: Relative(8), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(1) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(11) }, JumpIf { condition: Relative(12), location: 586 }, Call { location: 636 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(1) }, Load { destination: Relative(8), source_pointer: Relative(13) }, Load { destination: Relative(12), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Direct(32839) }, JumpIf { condition: Relative(13), location: 593 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(11) }, Store { destination_pointer: Relative(15), source: Relative(8) }, Store { destination_pointer: Relative(10), source: Relative(13) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32838) }, Mov { destination: Relative(1), source: Relative(8) }, Jump { location: 215 }, Load { destination: Relative(11), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(8) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 609 }, Call { location: 636 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(8) }, Load { destination: Relative(11), source_pointer: Relative(14) }, Load { destination: Relative(13), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Direct(32839) }, JumpIf { condition: Relative(14), location: 616 }, Call { location: 639 }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 170 }, Call { location: 642 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Store { destination_pointer: Relative(16), source: Relative(11) }, Store { destination_pointer: Relative(10), source: Relative(14) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32838) }, Mov { destination: Relative(8), source: Relative(11) }, Jump { location: 204 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 632 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 646 }, Jump { location: 648 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 663 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 660 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 653 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 663 }, Return, Call { location: 627 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(6), source: Relative(5) }, Store { destination_pointer: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, Mov { destination: Relative(1), source: Direct(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(2) }, IndirectConst { destination_pointer: Relative(1), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Mov { destination: Relative(5), source: Relative(2) }, Store { destination_pointer: Relative(5), source: Direct(32844) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Direct(32844) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Direct(32844) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Direct(32844) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Direct(32844) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Direct(32844) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(1) }, Mov { destination: Relative(1), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(1), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Mov { destination: Relative(6), source: Relative(5) }, Store { destination_pointer: Relative(6), source: Direct(32844) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32844) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32845) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32844) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32844) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32845) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32844) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32844) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Direct(32845) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(1) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 0 }, Const { destination: Relative(6), bit_size: Field, value: 3728882899078719075161482178784387565366481897740339799480980287259621149274 }, Const { destination: Relative(7), bit_size: Field, value: -9903063709032878667290627648209915537972247634463802596148419711785767431332 }, Const { destination: Relative(8), bit_size: Field, value: 2393473289045184898987089634332637236754766663897650125720167164137088869378 }, Const { destination: Relative(9), bit_size: Field, value: -7135402912423807765050323395026152633898511180575289670895350565966806597339 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(11) }, Store { destination_pointer: Relative(12), source: Relative(6) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(7) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(1) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(8) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(1) }, Mov { destination: Relative(3), source: Direct(32843) }, Jump { location: 744 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, JumpIf { condition: Relative(6), location: 802 }, Jump { location: 747 }, Load { destination: Relative(3), source_pointer: Relative(2) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 642 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32841) }, Store { destination_pointer: Relative(7), source: Direct(32846) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 642 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32848) }, Store { destination_pointer: Relative(7), source: Direct(32844) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(5) }, Const { destination: Relative(4), bit_size: Field, value: -1094708040843609169356775910874053498301840173462935739639689208799068762676 }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 10 }, Call { location: 642 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32849) }, Store { destination_pointer: Relative(8), source: Relative(4) }, Const { destination: Relative(2), bit_size: Field, value: -718703907181967287621274717949248537252263842169639534402461291799004475262 }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 10 }, Call { location: 642 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32850) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 10 }, Call { location: 642 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32851) }, Store { destination_pointer: Relative(7), source: Relative(1) }, Store { destination_pointer: Relative(5), source: Relative(2) }, Mov { destination: Relative(1), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(1), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BlackBox(MultiScalarMul { points: HeapVector { pointer: Relative(4), size: Relative(5) }, scalars: HeapVector { pointer: Relative(6), size: Relative(7) }, outputs: HeapArray { pointer: Relative(8), size: 3 } }), BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32838) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Mov { destination: Relative(1), source: Relative(2) }, Return, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(8) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 11 }, Mov { destination: Relative(11), source: Direct(0) }, Mov { destination: Relative(12), source: Relative(6) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(9) }, Call { location: 1208 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(7), source: Relative(12) }, Mov { destination: Relative(8), source: Relative(13) }, Load { destination: Relative(6), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 642 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(9) }, Store { destination_pointer: Relative(13), source: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32838) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 642 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(6) }, Store { destination_pointer: Relative(12), source: Relative(8) }, Store { destination_pointer: Relative(2), source: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Direct(32847) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(6) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32838) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(11) }, Load { destination: Relative(12), source_pointer: Relative(14) }, Load { destination: Relative(11), source_pointer: Relative(5) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 10 }, Call { location: 642 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(6) }, Store { destination_pointer: Relative(15), source: Relative(7) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 10 }, Call { location: 642 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(9) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32838) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 10 }, Call { location: 642 }, Mov { destination: Relative(8), source: Direct(32773) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(7) }, Store { destination_pointer: Relative(11), source: Relative(12) }, Store { destination_pointer: Relative(5), source: Relative(8) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32838) }, Mov { destination: Relative(3), source: Relative(6) }, Jump { location: 744 }, Call { location: 627 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32838) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U64) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 56 }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U64, lhs: Relative(3), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, Load { destination: Relative(3), source_pointer: Relative(5) }, Cast { destination: Relative(5), source: Relative(3), bit_size: Integer(U64) }, Const { destination: Relative(3), bit_size: Integer(U8), value: 48 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(3) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 885 }, Call { location: 636 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32847) }, Load { destination: Relative(4), source_pointer: Relative(6) }, Cast { destination: Relative(6), source: Relative(4), bit_size: Integer(U64) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 40 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U64, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U64, lhs: Relative(5), rhs: Relative(7) }, BinaryIntOp { destination: Relative(8), op: LessThanEquals, bit_size: U64, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 894 }, Call { location: 636 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Load { destination: Relative(5), source_pointer: Relative(7) }, Cast { destination: Relative(7), source: Relative(5), bit_size: Integer(U64) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(8), op: Shl, bit_size: U64, lhs: Relative(7), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, BinaryIntOp { destination: Relative(9), op: LessThanEquals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 903 }, Call { location: 636 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32848) }, Load { destination: Relative(6), source_pointer: Relative(8) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U64) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 24 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U64, lhs: Relative(8), rhs: Relative(6) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U64, lhs: Relative(7), rhs: Relative(9) }, BinaryIntOp { destination: Relative(10), op: LessThanEquals, bit_size: U64, lhs: Relative(7), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 912 }, Call { location: 636 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32849) }, Load { destination: Relative(7), source_pointer: Relative(9) }, Cast { destination: Relative(9), source: Relative(7), bit_size: Integer(U64) }, Const { destination: Relative(7), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(10), op: Shl, bit_size: U64, lhs: Relative(9), rhs: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U64, lhs: Relative(8), rhs: Relative(10) }, BinaryIntOp { destination: Relative(11), op: LessThanEquals, bit_size: U64, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 921 }, Call { location: 636 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32850) }, Load { destination: Relative(8), source_pointer: Relative(10) }, Cast { destination: Relative(10), source: Relative(8), bit_size: Integer(U64) }, Const { destination: Relative(8), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(11), op: Shl, bit_size: U64, lhs: Relative(10), rhs: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U64, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U64, lhs: Relative(9), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 930 }, Call { location: 636 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32851) }, Load { destination: Relative(9), source_pointer: Relative(11) }, Cast { destination: Relative(11), source: Relative(9), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U64, lhs: Relative(10), rhs: Relative(11) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U64, lhs: Relative(10), rhs: Relative(9) }, JumpIf { condition: Relative(12), location: 937 }, Call { location: 636 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(12) }, Cast { destination: Relative(10), source: Relative(11), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(11), op: Shl, bit_size: U64, lhs: Relative(10), rhs: Relative(2) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Cast { destination: Relative(10), source: Relative(12), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U64, lhs: Relative(10), rhs: Relative(3) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U64, lhs: Relative(11), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U64, lhs: Relative(11), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 951 }, Call { location: 636 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Cast { destination: Relative(11), source: Relative(12), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U64, lhs: Relative(11), rhs: Relative(4) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U64, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U64, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(13), location: 960 }, Call { location: 636 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Cast { destination: Relative(10), source: Relative(12), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U64, lhs: Relative(10), rhs: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U64, lhs: Relative(11), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U64, lhs: Relative(11), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 969 }, Call { location: 636 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Cast { destination: Relative(11), source: Relative(12), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U64, lhs: Relative(11), rhs: Relative(6) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U64, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U64, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(13), location: 978 }, Call { location: 636 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 14 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(10) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Cast { destination: Relative(10), source: Relative(12), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U64, lhs: Relative(10), rhs: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U64, lhs: Relative(11), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U64, lhs: Relative(11), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 987 }, Call { location: 636 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 15 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Cast { destination: Relative(11), source: Relative(12), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U64, lhs: Relative(11), rhs: Relative(8) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U64, lhs: Relative(10), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U64, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(13), location: 996 }, Call { location: 636 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, Load { destination: Relative(10), source_pointer: Relative(12) }, Cast { destination: Relative(12), source: Relative(10), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U64, lhs: Relative(11), rhs: Relative(12) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U64, lhs: Relative(11), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 1003 }, Call { location: 636 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Cast { destination: Relative(11), source: Relative(12), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U64, lhs: Relative(11), rhs: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 18 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Cast { destination: Relative(11), source: Relative(13), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(13), op: Shl, bit_size: U64, lhs: Relative(11), rhs: Relative(3) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U64, lhs: Relative(12), rhs: Relative(13) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U64, lhs: Relative(12), rhs: Relative(11) }, JumpIf { condition: Relative(14), location: 1017 }, Call { location: 636 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 19 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Cast { destination: Relative(12), source: Relative(13), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(13), op: Shl, bit_size: U64, lhs: Relative(12), rhs: Relative(4) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U64, lhs: Relative(11), rhs: Relative(13) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U64, lhs: Relative(11), rhs: Relative(12) }, JumpIf { condition: Relative(14), location: 1026 }, Call { location: 636 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 20 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Cast { destination: Relative(11), source: Relative(13), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(13), op: Shl, bit_size: U64, lhs: Relative(11), rhs: Relative(5) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U64, lhs: Relative(12), rhs: Relative(13) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U64, lhs: Relative(12), rhs: Relative(11) }, JumpIf { condition: Relative(14), location: 1035 }, Call { location: 636 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Cast { destination: Relative(12), source: Relative(13), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(13), op: Shl, bit_size: U64, lhs: Relative(12), rhs: Relative(6) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U64, lhs: Relative(11), rhs: Relative(13) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U64, lhs: Relative(11), rhs: Relative(12) }, JumpIf { condition: Relative(14), location: 1044 }, Call { location: 636 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 22 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Cast { destination: Relative(11), source: Relative(13), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(13), op: Shl, bit_size: U64, lhs: Relative(11), rhs: Relative(7) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U64, lhs: Relative(12), rhs: Relative(13) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U64, lhs: Relative(12), rhs: Relative(11) }, JumpIf { condition: Relative(14), location: 1053 }, Call { location: 636 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 23 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Cast { destination: Relative(12), source: Relative(13), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(13), op: Shl, bit_size: U64, lhs: Relative(12), rhs: Relative(8) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U64, lhs: Relative(11), rhs: Relative(13) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U64, lhs: Relative(11), rhs: Relative(12) }, JumpIf { condition: Relative(14), location: 1062 }, Call { location: 636 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 24 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Cast { destination: Relative(11), source: Relative(13), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U64, lhs: Relative(12), rhs: Relative(11) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U64, lhs: Relative(12), rhs: Relative(13) }, JumpIf { condition: Relative(14), location: 1070 }, Call { location: 636 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 25 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(12), source_pointer: Relative(14) }, Cast { destination: Relative(11), source: Relative(12), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U64, lhs: Relative(11), rhs: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 26 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Load { destination: Relative(11), source_pointer: Relative(14) }, Cast { destination: Relative(2), source: Relative(11), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(11), op: Shl, bit_size: U64, lhs: Relative(2), rhs: Relative(3) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U64, lhs: Relative(12), rhs: Relative(11) }, BinaryIntOp { destination: Relative(3), op: LessThanEquals, bit_size: U64, lhs: Relative(12), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 1084 }, Call { location: 636 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 27 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(12) }, Cast { destination: Relative(3), source: Relative(11), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(11), op: Shl, bit_size: U64, lhs: Relative(3), rhs: Relative(4) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U64, lhs: Relative(2), rhs: Relative(11) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 1093 }, Call { location: 636 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 28 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Load { destination: Relative(4), source_pointer: Relative(11) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U64, lhs: Relative(2), rhs: Relative(5) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U64, lhs: Relative(3), rhs: Relative(4) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U64, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 1102 }, Call { location: 636 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(5) }, Cast { destination: Relative(3), source: Relative(4), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U64, lhs: Relative(3), rhs: Relative(6) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 1111 }, Call { location: 636 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 30 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, Load { destination: Relative(4), source_pointer: Relative(5) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U64, lhs: Relative(2), rhs: Relative(7) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U64, lhs: Relative(3), rhs: Relative(4) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U64, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 1120 }, Call { location: 636 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 31 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(5) }, Cast { destination: Relative(3), source: Relative(4), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U64, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 1129 }, Call { location: 636 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32852) }, Load { destination: Relative(2), source_pointer: Relative(4) }, Cast { destination: Relative(1), source: Relative(2), bit_size: Integer(U64) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U64, lhs: Relative(3), rhs: Relative(1) }, BinaryIntOp { destination: Relative(4), op: LessThanEquals, bit_size: U64, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 1136 }, Call { location: 636 }, Mov { destination: Relative(1), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(1), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Mov { destination: Relative(4), source: Relative(3) }, Store { destination_pointer: Relative(4), source: Relative(9) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(10) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(13) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Return, Call { location: 627 }, Const { destination: Relative(2), bit_size: Field, value: 64 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, Mov { destination: Relative(5), source: Direct(0) }, Mov { destination: Relative(6), source: Direct(32846) }, Mov { destination: Relative(7), source: Relative(2) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(4) }, Call { location: 1226 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(6) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32838) }, Load { destination: Relative(2), source_pointer: Relative(4) }, Cast { destination: Relative(4), source: Relative(2), bit_size: Field }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, Load { destination: Relative(4), source_pointer: Relative(5) }, Cast { destination: Relative(5), source: Relative(4), bit_size: Field }, BinaryFieldOp { destination: Relative(4), op: Add, lhs: Relative(2), rhs: Relative(5) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32847) }, Load { destination: Relative(2), source_pointer: Relative(5) }, Cast { destination: Relative(5), source: Relative(2), bit_size: Field }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(5), rhs: Relative(3) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Load { destination: Relative(3), source_pointer: Relative(5) }, Cast { destination: Relative(1), source: Relative(3), bit_size: Field }, BinaryFieldOp { destination: Relative(3), op: Add, lhs: Relative(2), rhs: Relative(1) }, Mov { destination: Relative(1), source: Direct(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(2) }, IndirectConst { destination_pointer: Relative(1), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Mov { destination: Relative(5), source: Relative(2) }, Store { destination_pointer: Relative(5), source: Relative(4) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(3) }, Return, Call { location: 627 }, Const { destination: Relative(3), bit_size: Integer(U1), value: 0 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 16 }, BlackBox(ToRadix { input: Relative(1), radix: Direct(32853), output_pointer: Relative(4), num_limbs: Relative(5), output_bits: Relative(3) }), Mov { destination: Relative(1), source: Relative(2) }, Return, Call { location: 627 }, Const { destination: Relative(3), bit_size: Integer(U1), value: 0 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 32 }, BlackBox(ToRadix { input: Relative(1), radix: Direct(32853), output_pointer: Relative(4), num_limbs: Relative(5), output_bits: Relative(3) }), Mov { destination: Relative(1), source: Relative(2) }, Return, Call { location: 627 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, Mov { destination: Relative(5), source: Direct(0) }, Mov { destination: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(4) }, Call { location: 1274 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(2), source: Relative(6) }, Mov { destination: Relative(3), source: Relative(7) }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Direct(32842), rhs: Relative(3) }, BinaryFieldOp { destination: Relative(5), op: Add, lhs: Relative(2), rhs: Relative(4) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(1), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 1223 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Mov { destination: Relative(1), source: Relative(2) }, Mov { destination: Relative(2), source: Relative(3) }, Return, Call { location: 627 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(5), bit_size: Field, value: 1 }, Store { destination_pointer: Relative(4), source: Relative(5) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(8), bit_size: Integer(U1), value: 1 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 32 }, BlackBox(ToRadix { input: Relative(2), radix: Relative(7), output_pointer: Relative(9), num_limbs: Relative(10), output_bits: Relative(8) }), Const { destination: Relative(11), bit_size: Integer(U32), value: 32 }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(11) }, Call { location: 1283 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 33 }, Mov { destination: Relative(3), source: Direct(32838) }, Jump { location: 1247 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(7), location: 1252 }, Jump { location: 1250 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Return, Load { destination: Relative(7), source_pointer: Relative(4) }, BinaryFieldOp { destination: Relative(8), op: Mul, lhs: Relative(7), rhs: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U32, lhs: Direct(32852), rhs: Relative(3) }, BinaryIntOp { destination: Relative(9), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Direct(32852) }, JumpIf { condition: Relative(9), location: 1258 }, Call { location: 1302 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Direct(32852) }, JumpIf { condition: Relative(9), location: 1261 }, Call { location: 639 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(7) }, Load { destination: Relative(9), source_pointer: Relative(11) }, Cast { destination: Relative(7), source: Relative(9), bit_size: Field }, BinaryFieldOp { destination: Relative(9), op: Mul, lhs: Relative(8), rhs: Relative(1) }, BinaryFieldOp { destination: Relative(10), op: Mul, lhs: Relative(7), rhs: Relative(9) }, BinaryFieldOp { destination: Relative(9), op: Sub, lhs: Relative(5), rhs: Relative(7) }, BinaryFieldOp { destination: Relative(7), op: Mul, lhs: Relative(9), rhs: Relative(8) }, BinaryFieldOp { destination: Relative(8), op: Add, lhs: Relative(10), rhs: Relative(7) }, Store { destination_pointer: Relative(4), source: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32838) }, Mov { destination: Relative(3), source: Relative(7) }, Jump { location: 1247 }, Call { location: 627 }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U128) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Field }, BinaryFieldOp { destination: Relative(3), op: Sub, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(1), bit_size: Field, value: 8680525429001239497728366687280168587232520577698044359798894838135247199343 }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(3), rhs: Relative(1) }, Mov { destination: Relative(1), source: Relative(2) }, Mov { destination: Relative(2), source: Relative(4) }, Return, Const { destination: Direct(32774), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Direct(32773), op: Div, bit_size: U32, lhs: Direct(32772), rhs: Direct(32774) }, Mov { destination: Direct(32776), source: Direct(32772) }, Const { destination: Direct(32777), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Direct(32778), op: LessThan, bit_size: U32, lhs: Direct(32777), rhs: Direct(32773) }, Not { destination: Direct(32778), source: Direct(32778), bit_size: U1 }, JumpIf { condition: Direct(32778), location: 1301 }, BinaryIntOp { destination: Direct(32776), op: Sub, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32777) }, Load { destination: Direct(32774), source_pointer: Direct(32779) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32776) }, Load { destination: Direct(32775), source_pointer: Direct(32779) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32777) }, Store { destination_pointer: Direct(32779), source: Direct(32775) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32776) }, Store { destination_pointer: Direct(32779), source: Direct(32774) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 1287 }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "tZ3djhY3EobvZY45aP+7citRFJFkskJCBBFYaYW493W9rtf1jbQTQbX2BD/DzPf4p13udrkHvj798fzbl3/9+u7Dn3/9/fTTz1+ffvv07v37d//69f1fv7/9/O6vD+tvvz5d+kcq9emn9GaVzcpu5bByWim7rJeVycpsZbHSfNV81XzVfNV81XzNfM18zXzNfM18zXzNfM18zXzNfN183XzdfN183XzdfN183XzdfN18w3zDfMN8w3zDfMN8w3zDfMN8w3zTfNN803zTfNN803zTfNN803zTfGI+MZ+YT8wn5hPzifnEfGI+Wb785ilfl5XJyvX5ouX6+arl+vmmpewyXVYmK7OVq76u5fr5oeX6+bnKfFmZrMxWFitX+0RL7d+1oGgHk0IiZEIhaCe1tZjFgE4YhEkQA0xl7RvmMiATCqESGqET1KxDgikNEANMakCyujCtAYXANje2udGMuQ2YBDHobHNnmzvbjBmuQ48pDmiETlCzXhZMc4AYYKID1KyXDFMdUAiV0AidMAiTIAaY8gCaMen1amPWAyqhETphECZBzTpJMPkBiZAJy5x1/mgAbGiEZc46bTQGNkyCbCgIA0AiZIKas0IlNEInqLkoTIIYaMDkqpAImVAIldAInaDmpjAJYqChtUHNXSETCqESGkHNQ2EQJkEMNAY3JEImqHkqVEIjdMKwujQGN4iBxuAGtrnSrDG4oRIagW2ubHNlmzUG85oARWNwQyJkwjKXS6ESGqETBmGZi153jUGAxuCGRMiEQqgENeuU0BjcMAiTIFaXxuCGRMgEtnnQrDG4oRMGgW0ebPNkmyfbrDFYdEJqDG6ohEboBDXr9NMY3CAGGoMb1KzTT2NwQyFUQiN0wiBMgmyoGoMbEiETCqESGqETBsHMVQOtdAX9mzVbqkZKmQr6LVEohEpohE4YhEkQA42UeikkQiYUQiU0QifoXTYpTIIYaKRsSIRMKIRu/dK4qFlhEsRA42KDeopCJhSCtrAqNEInDMIkiIHGxQY164BrXFQdcI2LDZXQCOrRNg9eC53hFdAInTAI+ikdcJ3hAJ3hGxIhEwqhEprVhRkOGIRJEAPMcABbiBkOKIRuU0vnc9NLqfN5g2xoOp9bUkiETCiESmiETlDzunANj1xFQT9VFfRnmsIgTIIY6N2hdYVEyIRCqIRG6IRhdemc3yAGOuc3JEImsIU65zc0wsSDXtMJ3tb1bzrB21RIhEwoBNXop/RWsKETBmESxECn/IZEWOau10Sn/IZKaIROGIRJWOau10Sn/IZEyAQ16+XSKb+hETphECZBDPA4pnXhcQyQCYVQCY3QCYMwDTQs9EJqVHSdPRoVGyqhEbSBepE0KjZMghhoVGxIhEwoeOZvuuyjbFZ2K4eV00pB2TVAUCYr996jayz0ptAJgzAJ2q7Vv67RsSERMqEQKqEROrY3PQ0rp5WyS40elMnKbGWxsu4S11jbjmsMGIRJEAO9xhsSIRMKQcfwUmiEThiESRADXQw3JEImFALNk+ZJ86R50jxpFpqFZqFZaMZ1TwqN0AmDMAmyYeDqAxIhEwqhEhqhEwZhEmhONCeaE82J5kRzojnRnGhONCeadVqMopAImVAIldAInTAIkyAGheZCc6G50FxoLjQXmgvNheZCc6W50qyr6qgK+qmmoJ/qCmKga+iGRMiEQqiERuiEQaC50dxp7jR3mnUNHUNBzVOhETphECZBDDS+NiRCJhQCzYPmQfOgedA8aJ40T5onzZPmSfOkedI8aUZ8iYIYIL4AiZAJhVAJjdAJg7DM81KQDVOjaSaFQqiE5ZlZoRMGYRLEQKNpQyJkQiGouSg0QicMwiSIAXJDgETIhEKgOdOcac40Z5ozzYVmjaZZFTKhECqhETphECZBDDSaNtBcaa40a3zNptAInTAIkyAGGnEbEiETCoHmRnOjudHcaG40d5o7zZ3mTnOnudPcae4070cTnUD72QSEhxOdA/vpRAd9P56A8HyiY7IfUEB4QoEPOb8V+BMpo02oYyjlQ+VQPYQ6plI/hDpESevQx6CJ3BEIySNNH05kjzblQ+WQ1qEJuokc6iatQ7NuE3lUzfVNZFI3oY7VI7muQ+lQPoQ6ulI9hDqGEuqYSuMQ6hAlIaXrUDqEdOOlVA4h4ZiUkHHMSv0Q8qRFaR4SkkamETKaVSkfQh3ao4w6tB+5HUId2qM8Ds1DQkKiV/NFgkzvJtShPUKuVxMggmTvpnaoH0LuVHuJhO8mIe2Ur/Z353y1Rzvpq/3YWV9QPYQ6tG878as9QuZX99mC1O8mISH5uwl1aD+Q/t1UDqEO7RsywLr/F6SAdSsvyAFvmoeEhDSw7uIFeeBN+ZDWoRt5QSpY9+SCXLBuygXJ4E3j0DyEOrSX2IFsSodQh/YNca5bcUGc665aEOeb+qFxSOvQjbAgzkGI801ah+5zBXGuG11BnOtOVxDnm9qhfkjr0E2lIM43CQlxrltgQZzrblYQ57rrFMT5pnqoHUId2kvE+SbUoT1CnOuGMF0IdMPkmB21Ht0YLqyOzVGr0q3fQmTpCxB5+gqUgwh5Q9TWgKitA1HbAFbH5tgdUdsETkc5iODvAkQGHx1C+A80HfFvWB2bI04J0DesAYbTEWcF6DGWgYG+YR0Y6BsWAsPiWB1RGzqPxcBwOKI29BjrwUDfsCAM9A0rgmF2LI44o0DnsSoYdkecVKDHWBgm+oaVYaJvWBoMk2N2xHkIOo/lwbA5ojb0GCvERN+wREz0DWvERiwShskRtaHzWCcMqyNqQ4+xVAj6hrXCcDrKQSwXgs5jvTDMjlqbYEiwZAh6jDVD0DcsGobDEbWhx1g3BD3GwiHoEFYOw+xYHFEb+obVw7A7ojb0WBeQdQYK1JOEC03XJYSYHLMjTpvQt33etLE56onFhR7j1OlC33DudKFvOHkCJpw9GSZH1NaBxbE6orYBRG0TiNoEOB3lIM6jDHHWdQGzY3HU2vShaKHWps9CC3GeVoDDcTrKQZxR6UPSwuSYHVEbeoyzqoS+4bQqoW84rzIcjtMRtaHzOLcyRG3oJs6uMjqE0yvD6tgcu+NwnI5yEGdZhsnRa6teW/XaqtdWvbbqtVWvDVsB9Ad7gU3lUD3UDvVD49A8JCTsCTA82BRsWnUguPH2BKIY708giPEGhZGe2ePy6iqBsMV7FIhavEmxSZcIhC/epkBw4n0KRCHeqDDSOtCCvXNAE/bWYeNwnI5ycG8fNibH7Fgcq6OOEFqly4CRkHQRMEqH8qFyqB46FqEF71cYpUP5UDlUD7VDOEPWocRrF8TkmB2LY3Vsjt0Rp9UdiPNq1Iao1SfVhJc2iMkxO2K2JuB0lIOIREPERgFmx+JYHZtjdxyO01EO7kjc6LVVr616bTvQdM7itY2cMSQ4K7a/xc9idBpahtFpzbE7DsfpKAf75YiWYfh6diyOqE2AuG4XENcNI9lx3TIQ1w0d6nJ6MbxDIzlCBu/ojiqrqEKDKldUoUG18Nu3N098eezXz5+en/XdsYe3yX7++vTx7afnD5+ffvrw5f37N0//fvv+C37o749vP6D8/PbT+u7yP3/4Y5VL+Oe7989K3974p6/XP7oO6ad9eqEcQft+g+jz3zas7UjIIDSsU+lIG9bR9XUMvYYM3oZ1s4sYsHEzQ48Z5unFWl8ihqwbSjOMETLIMZQSakMtx1BD82EdmRca1vFZxNDHacM6ZQkZNIDNMErIoPtOGnLEMPQ5eBvWaUTI4G1YSfCIYeYzDiuvGmqDz6iVVg61obkh1guZZyTXYhMyeHTHVrl2acoIhrb2oSHDWavb2u2FDDl5GyIzqiGpvA3r0TtiwH12G3JLoTbIGcl1Vw+1IQ03jJChnzaUEpmTraZzNWsNGcqZ1UsWupr1qm4IzajauFa3NaoRQyvnWrQRGod+7hcLQ70Y+YzDOpQNGPp18Wr2lUyLGHxO9nJF1sl1y2Iveo21oZ67Xq+he9YLwwz1AgdJ25BC62S/5nBDu2voI3Q1B++8PUtoJLELvGe4zkiu7fDNNpQrNJIlt2OIrfZDOJJtHV3fNcTWB/G73jreixhmP6vcDO0O2pxnjZLYHeexF6E9zqr4rLQS2i3WcnaLtczQU3Hp865h+g4ldDVrqc3bENod1Ca+Swo9kVZ/pm0pElkVuXPuN0O98HtWzbHd4nWeH9bOPdSGq3v2ILRbXLuzs1aP6s+TaX6vYVZeinWo/1oLdNq+JlhpVC7V6yDqoQnyUiGvK1ZKkzNqnV1cIQXO5LciPWwwfkSRT2Ss5/z8mkJvjq+mg/yCLkMPtaKcPcbCHFLUs21dKcxYK+qZFmtUUkjRz7Zz5ShHTFHyUdQWUwwG6XqsKfcVwYs66rmoM3ZRy8kk5Md1+4cU9XSktJiiXidS68N9+IdaIacV9fXZ+Y8b2JNsbCvn99qip3fK/9+6WXBcsEN9LReR3HH2/PVKx981zCtmOAtWlhoynOzzWrmu2wa52YugodTrGFq5a+g5ZDj7z1JGDxmGGyTfNKwDjZu9iBnWEW0+DxT5um0YMUM6htDT4XoW8jb067Yh1ovmvRixXiR/uBstZDg72HVift02xMZBzjhIujsOEspXJinei1DO9KVhxAw+Du32OLTYOAzvxbxuG2LjMHwc5PY4SGQc8nXWqJXgum4bRsxwnvKvcnMcliE2Di3/r71f1BAbh+bjEDoxfTEOoZU2X+IGmTcN6Wo3e5FCefycfMeWQqvcS8OIGc7VjGXhcxrehnndNsR6MbwXEutF8asZW6OyrzA5dEL20jBjhjMOObbCPIxDLqFZnU+mL+fQs/1Lg8QMPpKj3x2HUN42Z/E0xlXuGkK7xWXwJEYaN8ehpNCcLJ5sLLXeNYTOlpbBR7LNu+MQOhFZaa2HnFS7awjtWJfBR1Juj4OExqGm5lmxetcQyiY99qKW0EjWk0XJtfe7htBz1DKc+VBjd94q05Pf464hxa7myWjl2JslaxyaG0JXs508TG513jWE9nrL4CPZ891xCJ2xrRTpiYsWep/yhUFCcdFOVi33q9wch36F5mQ/78+tY5XrtmHEDJef59S741BDc9LfbV0HO+m2YcYMPpKx++bjOITeVcrj8lOtlG8bJGbIfrJ2dxxGjo1D9TbEnsReGObdXsSexMZ5wyYPKTcNM5SnXYbihtD6MM8bVzmWdX9hqClm8HGI3TfHzG4IXc3Zz1NQLOv+whB602gZfCSn3B2H0LvvWa7zHBV7d+2FIZeY4Yxk7N21x3GQ2LO9v8GfpY27htBvGS2Dj2Tsvvk4DqE3dLPM8xwlsb2eG8oVypEuwzlzv4L3zTMOyxA6a/bfGVsodw01dNZ8ZR/JdnscYmfuV/c2xH5/79EQexJ77EXoSWxc5847Htvw/e+iDPzTQ9uQHt8Ze2nI+R9eXUv5/I5Pesxx/kgrzu5/oYQMZ+c9om04L1qNx8z9Dxjy+c21hSPWC3HDvGtIoTbk837TyOW6ey0e7lo/0oaT41wP97FenBxncD6Uft5jLH2++loo6nnNMc8m5fF3ANdl+d42jH7eFJvXq+9S/qPB32+KGqrcM/SzPPTHVwe/exT6eeW7zxn6/HUWyZf1/7K+evv7u08v/jeTb2r69O7tb++f7cs/v3z4/eG7n//zkd/h/4by8dNfvz//8eXTs5r8v0RZf/zc1xav9/LLm6e0vkprd/Jm5VvT+rro12uGpJT1u/jhPN70gi/x00W/vW6zv3zTxv4X",
  "file_map": {
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "50": {
      "source": "// Tests a performance regression found in aztec-packages with brillig cow optimization\nglobal MAX_NOTE_HASHES_PER_TX: u32 = 64;\nglobal MAX_NULLIFIERS_PER_TX: u32 = 64;\nglobal MAX_L2_TO_L1_MSGS_PER_TX: u32 = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u32 = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: u32 = 1;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;\nglobal NUM_FIELDS_PER_SHA256: u32 = 2;\nglobal TX_EFFECT_HASH_INPUT_SIZE: u32 = 169;\nglobal TX_EFFECT_HASH_LOG_FIELDS: u32 = 4;\nglobal TX_EFFECT_HASH_FULL_FIELDS: u32 = 165;\n\nstruct PublicDataUpdateRequest {\n    leaf_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nstruct NewContractData {\n    contract_address: Field,\n    portal_contract_address: Field,\n}\n\nimpl NewContractData {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash([self.contract_address, self.portal_contract_address])\n    }\n}\n\nstruct DataToHash {\n    new_note_hashes: [Field; MAX_NOTE_HASHES_PER_TX],\n    new_nullifiers: [Field; MAX_NULLIFIERS_PER_TX],\n    public_data_update_requests: [PublicDataUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX],\n    new_l2_to_l1_msgs: [Field; MAX_L2_TO_L1_MSGS_PER_TX],\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    new_contracts: [NewContractData; MAX_NEW_CONTRACTS_PER_TX],\n}\n\nstruct U256 {\n    // This is in big-endian order, typically because\n    // sha256 is usually in big endian order.\n    // Note: this means that inner[0] has the most significant 64 bits.\n    inner: [u64; 4],\n}\n\nimpl U256 {\n    pub fn from_bytes32(bytes: [u8; 32]) -> U256 {\n        // We use addition rather than a bitwise OR as the bitshifts ensure that none of the bytes overlap each other.\n        let high_0 = ((bytes[0] as u64) << 56)\n            + ((bytes[1] as u64) << 48)\n            + ((bytes[2] as u64) << 40)\n            + ((bytes[3] as u64) << 32)\n            + ((bytes[4] as u64) << 24)\n            + ((bytes[5] as u64) << 16)\n            + ((bytes[6] as u64) << 8)\n            + (bytes[7] as u64);\n\n        let high_1 = ((bytes[8] as u64) << 56)\n            + ((bytes[9] as u64) << 48)\n            + ((bytes[10] as u64) << 40)\n            + ((bytes[11] as u64) << 32)\n            + ((bytes[12] as u64) << 24)\n            + ((bytes[13] as u64) << 16)\n            + ((bytes[14] as u64) << 8)\n            + (bytes[15] as u64);\n\n        let low_0 = ((bytes[16] as u64) << 56)\n            + ((bytes[17] as u64) << 48)\n            + ((bytes[18] as u64) << 40)\n            + ((bytes[19] as u64) << 32)\n            + ((bytes[20] as u64) << 24)\n            + ((bytes[21] as u64) << 16)\n            + ((bytes[22] as u64) << 8)\n            + (bytes[23] as u64);\n\n        let low_1 = ((bytes[24] as u64) << 56)\n            + ((bytes[25] as u64) << 48)\n            + ((bytes[26] as u64) << 40)\n            + ((bytes[27] as u64) << 32)\n            + ((bytes[28] as u64) << 24)\n            + ((bytes[29] as u64) << 16)\n            + ((bytes[30] as u64) << 8)\n            + (bytes[31] as u64);\n\n        U256 { inner: [high_0, high_1, low_0, low_1] }\n    }\n\n    pub fn to_u128_limbs(self) -> [Field; 2] {\n        let two_pow_64 = 2.pow_32(64);\n\n        let high = (self.inner[0] as Field) * two_pow_64 + self.inner[1] as Field;\n        let low = (self.inner[2] as Field) * two_pow_64 + self.inner[3] as Field;\n\n        [high, low]\n    }\n}\n\nunconstrained fn main(kernel_data: DataToHash) -> pub [Field; NUM_FIELDS_PER_SHA256] {\n    let mut tx_effects_hash_inputs = [0; TX_EFFECT_HASH_INPUT_SIZE];\n\n    let new_note_hashes = kernel_data.new_note_hashes;\n    let new_nullifiers = kernel_data.new_nullifiers;\n    let public_data_update_requests = kernel_data.public_data_update_requests;\n    let l2ToL1Msgs = kernel_data.new_l2_to_l1_msgs;\n    let encryptedLogsHash = kernel_data.encrypted_logs_hash;\n    let unencryptedLogsHash = kernel_data.unencrypted_logs_hash;\n\n    let mut offset = 0;\n\n    for j in 0..MAX_NOTE_HASHES_PER_TX {\n        tx_effects_hash_inputs[offset + j] = new_note_hashes[j];\n    }\n    offset += MAX_NOTE_HASHES_PER_TX;\n\n    for j in 0..MAX_NULLIFIERS_PER_TX {\n        tx_effects_hash_inputs[offset + j] = new_nullifiers[j];\n    }\n    offset += MAX_NULLIFIERS_PER_TX;\n\n    for j in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX {\n        tx_effects_hash_inputs[offset + j * 2] = public_data_update_requests[j].leaf_slot;\n        tx_effects_hash_inputs[offset + j * 2 + 1] = public_data_update_requests[j].new_value;\n    }\n    offset += MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX * 2;\n\n    for j in 0..MAX_L2_TO_L1_MSGS_PER_TX {\n        tx_effects_hash_inputs[offset + j] = l2ToL1Msgs[j];\n    }\n    offset += MAX_L2_TO_L1_MSGS_PER_TX;\n\n    let contract_leaf = kernel_data.new_contracts[0];\n    tx_effects_hash_inputs[offset] = contract_leaf.hash();\n\n    offset += MAX_NEW_CONTRACTS_PER_TX;\n\n    let new_contracts = kernel_data.new_contracts;\n    tx_effects_hash_inputs[offset] = new_contracts[0].contract_address;\n\n    tx_effects_hash_inputs[offset + 1] = new_contracts[0].portal_contract_address;\n\n    offset += MAX_NEW_CONTRACTS_PER_TX * 2;\n\n    for j in 0..NUM_FIELDS_PER_SHA256 {\n        tx_effects_hash_inputs[offset + j] = encryptedLogsHash[j];\n    }\n\n    offset += NUM_ENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256;\n\n    for j in 0..NUM_FIELDS_PER_SHA256 {\n        tx_effects_hash_inputs[offset + j] = unencryptedLogsHash[j];\n    }\n\n    offset += NUM_UNENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256;\n    assert_eq(offset, TX_EFFECT_HASH_INPUT_SIZE); // Sanity check\n    let mut hash_input_flattened =\n        [0; TX_EFFECT_HASH_FULL_FIELDS * 32 + TX_EFFECT_HASH_LOG_FIELDS * 16];\n    for offset in 0..TX_EFFECT_HASH_FULL_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_inputs[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    for log_field_index in 0..TX_EFFECT_HASH_LOG_FIELDS {\n        let input_as_bytes: [u8; 16] =\n            tx_effects_hash_inputs[TX_EFFECT_HASH_FULL_FIELDS + log_field_index].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[TX_EFFECT_HASH_FULL_FIELDS * 32 + log_field_index * 16 + byte_index] =\n                input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = std::hash::blake3(hash_input_flattened);\n    U256::from_bytes32(blake3_digest).to_u128_limbs()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
