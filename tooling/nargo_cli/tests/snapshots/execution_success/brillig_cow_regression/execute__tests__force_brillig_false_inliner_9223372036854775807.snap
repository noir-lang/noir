---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "kernel_data",
        "type": {
          "kind": "struct",
          "path": "DataToHash",
          "fields": [
            {
              "name": "new_note_hashes",
              "type": {
                "kind": "array",
                "length": 64,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 64,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "public_data_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "PublicDataUpdateRequest",
                  "fields": [
                    {
                      "name": "leaf_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "encrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_contracts",
              "type": {
                "kind": "array",
                "length": 1,
                "type": {
                  "kind": "struct",
                  "path": "NewContractData",
                  "fields": [
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "portal_contract_address",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 2,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "50": {
      "source": "// Tests a performance regression found in aztec-packages with brillig cow optimization\nglobal MAX_NOTE_HASHES_PER_TX: u32 = 64;\nglobal MAX_NULLIFIERS_PER_TX: u32 = 64;\nglobal MAX_L2_TO_L1_MSGS_PER_TX: u32 = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u32 = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: u32 = 1;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;\nglobal NUM_FIELDS_PER_SHA256: u32 = 2;\nglobal TX_EFFECT_HASH_INPUT_SIZE: u32 = 169;\nglobal TX_EFFECT_HASH_LOG_FIELDS: u32 = 4;\nglobal TX_EFFECT_HASH_FULL_FIELDS: u32 = 165;\n\nstruct PublicDataUpdateRequest {\n    leaf_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nstruct NewContractData {\n    contract_address: Field,\n    portal_contract_address: Field,\n}\n\nimpl NewContractData {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash([self.contract_address, self.portal_contract_address])\n    }\n}\n\nstruct DataToHash {\n    new_note_hashes: [Field; MAX_NOTE_HASHES_PER_TX],\n    new_nullifiers: [Field; MAX_NULLIFIERS_PER_TX],\n    public_data_update_requests: [PublicDataUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX],\n    new_l2_to_l1_msgs: [Field; MAX_L2_TO_L1_MSGS_PER_TX],\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    new_contracts: [NewContractData; MAX_NEW_CONTRACTS_PER_TX],\n}\n\nstruct U256 {\n    // This is in big-endian order, typically because\n    // sha256 is usually in big endian order.\n    // Note: this means that inner[0] has the most significant 64 bits.\n    inner: [u64; 4],\n}\n\nimpl U256 {\n    pub fn from_bytes32(bytes: [u8; 32]) -> U256 {\n        // We use addition rather than a bitwise OR as the bitshifts ensure that none of the bytes overlap each other.\n        let high_0 = ((bytes[0] as u64) << 56)\n            + ((bytes[1] as u64) << 48)\n            + ((bytes[2] as u64) << 40)\n            + ((bytes[3] as u64) << 32)\n            + ((bytes[4] as u64) << 24)\n            + ((bytes[5] as u64) << 16)\n            + ((bytes[6] as u64) << 8)\n            + (bytes[7] as u64);\n\n        let high_1 = ((bytes[8] as u64) << 56)\n            + ((bytes[9] as u64) << 48)\n            + ((bytes[10] as u64) << 40)\n            + ((bytes[11] as u64) << 32)\n            + ((bytes[12] as u64) << 24)\n            + ((bytes[13] as u64) << 16)\n            + ((bytes[14] as u64) << 8)\n            + (bytes[15] as u64);\n\n        let low_0 = ((bytes[16] as u64) << 56)\n            + ((bytes[17] as u64) << 48)\n            + ((bytes[18] as u64) << 40)\n            + ((bytes[19] as u64) << 32)\n            + ((bytes[20] as u64) << 24)\n            + ((bytes[21] as u64) << 16)\n            + ((bytes[22] as u64) << 8)\n            + (bytes[23] as u64);\n\n        let low_1 = ((bytes[24] as u64) << 56)\n            + ((bytes[25] as u64) << 48)\n            + ((bytes[26] as u64) << 40)\n            + ((bytes[27] as u64) << 32)\n            + ((bytes[28] as u64) << 24)\n            + ((bytes[29] as u64) << 16)\n            + ((bytes[30] as u64) << 8)\n            + (bytes[31] as u64);\n\n        U256 { inner: [high_0, high_1, low_0, low_1] }\n    }\n\n    pub fn to_u128_limbs(self) -> [Field; 2] {\n        let two_pow_64 = 2.pow_32(64);\n\n        let high = (self.inner[0] as Field) * two_pow_64 + self.inner[1] as Field;\n        let low = (self.inner[2] as Field) * two_pow_64 + self.inner[3] as Field;\n\n        [high, low]\n    }\n}\n\nunconstrained fn main(kernel_data: DataToHash) -> pub [Field; NUM_FIELDS_PER_SHA256] {\n    let mut tx_effects_hash_inputs = [0; TX_EFFECT_HASH_INPUT_SIZE];\n\n    let new_note_hashes = kernel_data.new_note_hashes;\n    let new_nullifiers = kernel_data.new_nullifiers;\n    let public_data_update_requests = kernel_data.public_data_update_requests;\n    let l2ToL1Msgs = kernel_data.new_l2_to_l1_msgs;\n    let encryptedLogsHash = kernel_data.encrypted_logs_hash;\n    let unencryptedLogsHash = kernel_data.unencrypted_logs_hash;\n\n    let mut offset = 0;\n\n    for j in 0..MAX_NOTE_HASHES_PER_TX {\n        tx_effects_hash_inputs[offset + j] = new_note_hashes[j];\n    }\n    offset += MAX_NOTE_HASHES_PER_TX;\n\n    for j in 0..MAX_NULLIFIERS_PER_TX {\n        tx_effects_hash_inputs[offset + j] = new_nullifiers[j];\n    }\n    offset += MAX_NULLIFIERS_PER_TX;\n\n    for j in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX {\n        tx_effects_hash_inputs[offset + j * 2] = public_data_update_requests[j].leaf_slot;\n        tx_effects_hash_inputs[offset + j * 2 + 1] = public_data_update_requests[j].new_value;\n    }\n    offset += MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX * 2;\n\n    for j in 0..MAX_L2_TO_L1_MSGS_PER_TX {\n        tx_effects_hash_inputs[offset + j] = l2ToL1Msgs[j];\n    }\n    offset += MAX_L2_TO_L1_MSGS_PER_TX;\n\n    let contract_leaf = kernel_data.new_contracts[0];\n    tx_effects_hash_inputs[offset] = contract_leaf.hash();\n\n    offset += MAX_NEW_CONTRACTS_PER_TX;\n\n    let new_contracts = kernel_data.new_contracts;\n    tx_effects_hash_inputs[offset] = new_contracts[0].contract_address;\n\n    tx_effects_hash_inputs[offset + 1] = new_contracts[0].portal_contract_address;\n\n    offset += MAX_NEW_CONTRACTS_PER_TX * 2;\n\n    for j in 0..NUM_FIELDS_PER_SHA256 {\n        tx_effects_hash_inputs[offset + j] = encryptedLogsHash[j];\n    }\n\n    offset += NUM_ENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256;\n\n    for j in 0..NUM_FIELDS_PER_SHA256 {\n        tx_effects_hash_inputs[offset + j] = unencryptedLogsHash[j];\n    }\n\n    offset += NUM_UNENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256;\n    assert_eq(offset, TX_EFFECT_HASH_INPUT_SIZE); // Sanity check\n    let mut hash_input_flattened =\n        [0; TX_EFFECT_HASH_FULL_FIELDS * 32 + TX_EFFECT_HASH_LOG_FIELDS * 16];\n    for offset in 0..TX_EFFECT_HASH_FULL_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_inputs[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    for log_field_index in 0..TX_EFFECT_HASH_LOG_FIELDS {\n        let input_as_bytes: [u8; 16] =\n            tx_effects_hash_inputs[TX_EFFECT_HASH_FULL_FIELDS + log_field_index].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[TX_EFFECT_HASH_FULL_FIELDS * 32 + log_field_index * 16 + byte_index] =\n                input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = std::hash::blake3(hash_input_flattened);\n    U256::from_bytes32(blake3_digest).to_u128_limbs()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
