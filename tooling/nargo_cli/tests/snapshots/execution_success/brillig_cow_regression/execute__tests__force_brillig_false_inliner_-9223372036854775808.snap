---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "kernel_data",
        "type": {
          "kind": "struct",
          "path": "DataToHash",
          "fields": [
            {
              "name": "new_note_hashes",
              "type": {
                "kind": "array",
                "length": 64,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_nullifiers",
              "type": {
                "kind": "array",
                "length": 64,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "public_data_update_requests",
              "type": {
                "kind": "array",
                "length": 16,
                "type": {
                  "kind": "struct",
                  "path": "PublicDataUpdateRequest",
                  "fields": [
                    {
                      "name": "leaf_slot",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "old_value",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "new_value",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            },
            {
              "name": "new_l2_to_l1_msgs",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "encrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "unencrypted_logs_hash",
              "type": {
                "kind": "array",
                "length": 2,
                "type": {
                  "kind": "field"
                }
              }
            },
            {
              "name": "new_contracts",
              "type": {
                "kind": "array",
                "length": 1,
                "type": {
                  "kind": "struct",
                  "path": "NewContractData",
                  "fields": [
                    {
                      "name": "contract_address",
                      "type": {
                        "kind": "field"
                      }
                    },
                    {
                      "name": "portal_contract_address",
                      "type": {
                        "kind": "field"
                      }
                    }
                  ]
                }
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 2,
        "type": {
          "kind": "field"
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "50": {
      "source": "// Tests a performance regression found in aztec-packages with brillig cow optimization\nglobal MAX_NOTE_HASHES_PER_TX: u32 = 64;\nglobal MAX_NULLIFIERS_PER_TX: u32 = 64;\nglobal MAX_L2_TO_L1_MSGS_PER_TX: u32 = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: u32 = 16;\nglobal MAX_NEW_CONTRACTS_PER_TX: u32 = 1;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: u32 = 1;\nglobal NUM_FIELDS_PER_SHA256: u32 = 2;\nglobal TX_EFFECT_HASH_INPUT_SIZE: u32 = 169;\nglobal TX_EFFECT_HASH_LOG_FIELDS: u32 = 4;\nglobal TX_EFFECT_HASH_FULL_FIELDS: u32 = 165;\n\nstruct PublicDataUpdateRequest {\n    leaf_slot: Field,\n    old_value: Field,\n    new_value: Field,\n}\n\nstruct NewContractData {\n    contract_address: Field,\n    portal_contract_address: Field,\n}\n\nimpl NewContractData {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash([self.contract_address, self.portal_contract_address])\n    }\n}\n\nstruct DataToHash {\n    new_note_hashes: [Field; MAX_NOTE_HASHES_PER_TX],\n    new_nullifiers: [Field; MAX_NULLIFIERS_PER_TX],\n    public_data_update_requests: [PublicDataUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX],\n    new_l2_to_l1_msgs: [Field; MAX_L2_TO_L1_MSGS_PER_TX],\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    new_contracts: [NewContractData; MAX_NEW_CONTRACTS_PER_TX],\n}\n\nstruct U256 {\n    // This is in big-endian order, typically because\n    // sha256 is usually in big endian order.\n    // Note: this means that inner[0] has the most significant 64 bits.\n    inner: [u64; 4],\n}\n\nimpl U256 {\n    pub fn from_bytes32(bytes: [u8; 32]) -> U256 {\n        // We use addition rather than a bitwise OR as the bitshifts ensure that none of the bytes overlap each other.\n        let high_0 = ((bytes[0] as u64) << 56)\n            + ((bytes[1] as u64) << 48)\n            + ((bytes[2] as u64) << 40)\n            + ((bytes[3] as u64) << 32)\n            + ((bytes[4] as u64) << 24)\n            + ((bytes[5] as u64) << 16)\n            + ((bytes[6] as u64) << 8)\n            + (bytes[7] as u64);\n\n        let high_1 = ((bytes[8] as u64) << 56)\n            + ((bytes[9] as u64) << 48)\n            + ((bytes[10] as u64) << 40)\n            + ((bytes[11] as u64) << 32)\n            + ((bytes[12] as u64) << 24)\n            + ((bytes[13] as u64) << 16)\n            + ((bytes[14] as u64) << 8)\n            + (bytes[15] as u64);\n\n        let low_0 = ((bytes[16] as u64) << 56)\n            + ((bytes[17] as u64) << 48)\n            + ((bytes[18] as u64) << 40)\n            + ((bytes[19] as u64) << 32)\n            + ((bytes[20] as u64) << 24)\n            + ((bytes[21] as u64) << 16)\n            + ((bytes[22] as u64) << 8)\n            + (bytes[23] as u64);\n\n        let low_1 = ((bytes[24] as u64) << 56)\n            + ((bytes[25] as u64) << 48)\n            + ((bytes[26] as u64) << 40)\n            + ((bytes[27] as u64) << 32)\n            + ((bytes[28] as u64) << 24)\n            + ((bytes[29] as u64) << 16)\n            + ((bytes[30] as u64) << 8)\n            + (bytes[31] as u64);\n\n        U256 { inner: [high_0, high_1, low_0, low_1] }\n    }\n\n    pub fn to_u128_limbs(self) -> [Field; 2] {\n        let two_pow_64 = 2.pow_32(64);\n\n        let high = (self.inner[0] as Field) * two_pow_64 + self.inner[1] as Field;\n        let low = (self.inner[2] as Field) * two_pow_64 + self.inner[3] as Field;\n\n        [high, low]\n    }\n}\n\nunconstrained fn main(kernel_data: DataToHash) -> pub [Field; NUM_FIELDS_PER_SHA256] {\n    let mut tx_effects_hash_inputs = [0; TX_EFFECT_HASH_INPUT_SIZE];\n\n    let new_note_hashes = kernel_data.new_note_hashes;\n    let new_nullifiers = kernel_data.new_nullifiers;\n    let public_data_update_requests = kernel_data.public_data_update_requests;\n    let l2ToL1Msgs = kernel_data.new_l2_to_l1_msgs;\n    let encryptedLogsHash = kernel_data.encrypted_logs_hash;\n    let unencryptedLogsHash = kernel_data.unencrypted_logs_hash;\n\n    let mut offset = 0;\n\n    for j in 0..MAX_NOTE_HASHES_PER_TX {\n        tx_effects_hash_inputs[offset + j] = new_note_hashes[j];\n    }\n    offset += MAX_NOTE_HASHES_PER_TX;\n\n    for j in 0..MAX_NULLIFIERS_PER_TX {\n        tx_effects_hash_inputs[offset + j] = new_nullifiers[j];\n    }\n    offset += MAX_NULLIFIERS_PER_TX;\n\n    for j in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX {\n        tx_effects_hash_inputs[offset + j * 2] = public_data_update_requests[j].leaf_slot;\n        tx_effects_hash_inputs[offset + j * 2 + 1] = public_data_update_requests[j].new_value;\n    }\n    offset += MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX * 2;\n\n    for j in 0..MAX_L2_TO_L1_MSGS_PER_TX {\n        tx_effects_hash_inputs[offset + j] = l2ToL1Msgs[j];\n    }\n    offset += MAX_L2_TO_L1_MSGS_PER_TX;\n\n    let contract_leaf = kernel_data.new_contracts[0];\n    tx_effects_hash_inputs[offset] = contract_leaf.hash();\n\n    offset += MAX_NEW_CONTRACTS_PER_TX;\n\n    let new_contracts = kernel_data.new_contracts;\n    tx_effects_hash_inputs[offset] = new_contracts[0].contract_address;\n\n    tx_effects_hash_inputs[offset + 1] = new_contracts[0].portal_contract_address;\n\n    offset += MAX_NEW_CONTRACTS_PER_TX * 2;\n\n    for j in 0..NUM_FIELDS_PER_SHA256 {\n        tx_effects_hash_inputs[offset + j] = encryptedLogsHash[j];\n    }\n\n    offset += NUM_ENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256;\n\n    for j in 0..NUM_FIELDS_PER_SHA256 {\n        tx_effects_hash_inputs[offset + j] = unencryptedLogsHash[j];\n    }\n\n    offset += NUM_UNENCRYPTED_LOGS_HASHES_PER_TX * NUM_FIELDS_PER_SHA256;\n    assert_eq(offset, TX_EFFECT_HASH_INPUT_SIZE); // Sanity check\n    let mut hash_input_flattened =\n        [0; TX_EFFECT_HASH_FULL_FIELDS * 32 + TX_EFFECT_HASH_LOG_FIELDS * 16];\n    for offset in 0..TX_EFFECT_HASH_FULL_FIELDS {\n        let input_as_bytes: [u8; 32] = tx_effects_hash_inputs[offset].to_be_bytes();\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    for log_field_index in 0..TX_EFFECT_HASH_LOG_FIELDS {\n        let input_as_bytes: [u8; 16] =\n            tx_effects_hash_inputs[TX_EFFECT_HASH_FULL_FIELDS + log_field_index].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[TX_EFFECT_HASH_FULL_FIELDS * 32 + log_field_index * 16 + byte_index] =\n                input_as_bytes[byte_index];\n        }\n    }\n\n    let blake3_digest = std::hash::blake3(hash_input_flattened);\n    U256::from_bytes32(blake3_digest).to_u128_limbs()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
