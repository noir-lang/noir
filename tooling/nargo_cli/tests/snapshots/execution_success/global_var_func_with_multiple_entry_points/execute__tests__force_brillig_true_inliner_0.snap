---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/7VWzU7DMAx2uwYIUw/AhReACxyytdN6nMSA54iY+hx9dBRhr67nomlzLE1JZOfz3+esBfxJgb8kFa4lnArZ7HAN18nKECvkjLPIFOcxUL4vYL7wG1w9TJuU9AvDhL0SkxV+F9rOK/kZxt94hpkBf034VR78cIs4X8MUH4TfGqbDy++Qjg/yN+ruUE/7B9x7gZej7zwm67o9KfGXLLckH8NYDyO/x3nZ22OvCfvTHrtZYv9fR+gJ10DUTHKNc1HeldzjOqfcpdo5YfuMK3HHCbydTS3CI8MF4Svze9LWSj1IaiXvQuhumK4UeXCRfeU5JR68M1xpN3ePZD+cxjd3/o8jdHbKXZoBJ2xfcM3cJ5Uj5GsJ4xtTDfb+t10I5HfB6iD7wP07Yf+G53slj+qKOPttXPVN7OMmHg7tT5R1SlKyOp3z5lCvL+WT/K8BsJtX6VdyVeMx2bYivlzfEBpXyVfqwS/kgSRS/QsAAA==",
  "debug_symbols": "pZTNjoMgEIDfhbMHhx8FX6VpGmppQ0LQUN1k0/juO4js6sE96IXPAb8ZhhA+5GHu4+tm/bN7k+byIfdgnbOvm+taPdjO4+yHlHEASRpaEFCkYQWhOMcRkEATWAInjUCIhCqhTpAJagYrEzBLjcAsEoFZFIIniIRqBscISiSGAEjMCrgrLheqRFEuhMhpKkhu6DYEY2I/qw6x714H4wfS+NG5gnxpN84/vXvtZw464CpWNv6BxIRP60z8moo/u9xXQchFhlr96mLrw75PZfapEif9I/VZPM7ZZyCP+FRkn8Oe/9/5SZX3D+WeX+37HNjic3rW50d8VmefswP9C5brC05P+tURX+TzF9X2/l0x0q0NmzdjipmC1XdnlvA5+na1Onz3eSW/OX3oWvMYg4mZVg8PjhcmC86uU6z2Aw==",
  "file_map": {
    "50": {
      "source": "global ONE: Field = 1;\nglobal TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_one(x, y);\n        entry_point_two(x, y);\n    }\n}\n\nunconstrained fn entry_point_one(x: Field, y: Field) {\n    let z = ONE + x + y;\n    assert(z == 2);\n    inner_func(x, y);\n}\n\nunconstrained fn entry_point_two(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    inner_func(x, y);\n}\n\nunconstrained fn inner_func(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
