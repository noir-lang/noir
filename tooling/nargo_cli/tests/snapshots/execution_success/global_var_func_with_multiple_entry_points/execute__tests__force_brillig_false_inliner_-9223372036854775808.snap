---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1WS07DMBC10wYIVSU+C9jBgrID3CYoWUaiwDkiqpwjR4eImXrycKFqbdFWGamynbHffDzjPq2+RX/9IpoPaeS1FE1jSaPZTqYesUxIP3UIP4eQ+D7RgRKtla1q7XBefmPhS3miMYHv7ZmBx8ATh0++8AuTFQnE59n/NBGYAfBnieMePeKbY8J5a7r4CuyOaS1rhs+wTjb0O+lOSM/zc5ongBfi3qVPvvN26fA/ErG18tLYfHiyu+yXuX/sGWO/+sdOR3T/txa6U2sKcoa1JmsRz2LtSV3sOMu5i2HvNY1cOzHglX5yYS4ErgJbgd+TbOzIB8vYEbcG3ZHQRRCHFLxXGVNbB/cCF/exjJTtpWHTxSnpu9lC8sIYtjcg/Fj99F3aj2H/hNan4D/nuNzQzzqvpnVa1dVztVhkHxXWTCuRyNM6vcV97eotveIsvmvYa+WG8YFkaDdWq99X7NtH8C/Uf6Wrb9nWCPxQam85U95zpt+FOZPsp3U5E59xcSbmU8iZzmgemDPlB8qZZgE505LX3FjoneM1VzT2vMbaDsVrJgIX97HsA6+5o/Uu8Jq/emveWN0h8ZoH8O+/eM0nYYkD4y4VAAA=",
  "debug_symbols": "pZTNjoMgFEbfhTUL+RP0VSZNQy1tTIgaqk0mje8+Fy50OpnMLOjGT8DDPQHkQc7utF2P43SZb6T/eJBTGL0fr0c/D3Yd5wl6H6SJD2ZIzyhhHek5JRz6BATD4BgCQ5JeQiiMFkNjGIwuhWgwoNVRIqHFGkiYlEEpyXOKnDKnirmDS/KCiRVNei3qadTTqKdRT6OeQT2Degb1DOoZ1DOoByFM8op6yavJ9f/120GsrN5xDc5FyZflhEVebHDTSvpp856Su/Vb+ui22CnlagOMQkU3nSFhwsvoXXzb6Tfd/I1yYzLMO/XEVRXfVfCC8cwLZmp4rgovWQUvmci85M2bvKzhhS68FDW8Kpsv27aCV6L4K8nf5Kvqq67wbc35Y6qcP6Zrzh8zpT5nP/f/AC07jOHXBRdPbPyv43bdbRjtybs4FultGsqn0Fw/lzJSbsslzIM7b8HFaV+uTHh+CE6FPjxvq9TFqGgPe7T5Ag==",
  "file_map": {
    "50": {
      "source": "global ONE: Field = 1;\nglobal TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_one(x, y);\n        entry_point_two(x, y);\n    }\n}\n\nunconstrained fn entry_point_one(x: Field, y: Field) {\n    let z = ONE + x + y;\n    assert(z == 2);\n    inner_func(x, y);\n}\n\nunconstrained fn entry_point_two(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    inner_func(x, y);\n}\n\nunconstrained fn inner_func(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point_one",
    "entry_point_two"
  ]
}
