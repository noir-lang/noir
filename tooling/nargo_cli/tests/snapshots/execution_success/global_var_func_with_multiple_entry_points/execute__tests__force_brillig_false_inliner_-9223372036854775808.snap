---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1WS07DMBC10wYIVSU+C9jBgrID3CYoWUaiwDkiqpwjR4eImXrycKFqbdFWGamynbHffDzjPq2+RX/9IpoPaeS1FE1jSaPZTqYesUxIP3UIP4eQ+D7RgRKtla1q7XBefmPhS3miMYHv7ZmBx8ATh0++8AuTFQnE59n/NBGYAfBnieMePeKbY8J5a7r4CuyOaS1rhs+wTjb0O+lOSM/zc5ongBfi3qVPvvN26fA/ErG18tLYfHiyu+yXuX/sGWO/+sdOR3T/txa6U2sKcoa1JmsRz2LtSV3sOMu5i2HvNY1cOzHglX5yYS4ErgJbgd+TbOzIB8vYEbcG3ZHQRRCHFLxXGVNbB/cCF/exjJTtpWHTxSnpu9lC8sIYtjcg/Fj99F3aj2H/hNan4D/nuNzQzzqvpnVa1dVztVhkHxXWTCuRyNM6vcV97eotveIsvmvYa+WG8YFkaDdWq99X7NtH8C/Uf6Wrb9nWCPxQam85U95zpt+FOZPsp3U5E59xcSbmU8iZzmgemDPlB8qZZgE505LX3FjoneM1VzT2vMbaDsVrJgIX97HsA6+5o/Uu8Jq/emveWN0h8ZoH8O+/eM0nYYkD4y4VAAA=",
  "debug_symbols": "3dbNaoQwEADgd8nZQ5LJxOirlLL4t4sgKv4UivjujWJoG4I61705hs/RmJlkYWWVz69H3T67kaUfC2u6IpvqrrXRwvh+a+yzdovGKRsmlgo0Eava0l7FyRqxZ91ULEW+fkZMBIFJDiAF/wdskA9109Svh593YcKEHiaNyy4T9LMnV8J/Xxn8QhDyECCMLwRZSLIAslBBIdEJJXyBZKHJIiYLQxYJVQAni2AOBDgEKukJxa+E9kVwXSG60kHtr3YlyQLIQpEF0sS6Nw1b7cG1ooSbMSW5X+3mSqhb/UFB7ISCW/3hVAiykGQR/I8KuRNa3+oPpwLJQpNFTBaGLBKqAEOt9uv+oO/1h7O6eov+sNroKxvqLG+qbaffBue2cBu/Dafv3o24o0E/dEVVzkO1HRL+nA+2OQQZQfzbRPZbIgJtM9lsPw==",
  "file_map": {
    "50": {
      "source": "global ONE: Field = 1;\nglobal TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_one(x, y);\n        entry_point_two(x, y);\n    }\n}\n\nunconstrained fn entry_point_one(x: Field, y: Field) {\n    let z = ONE + x + y;\n    assert(z == 2);\n    inner_func(x, y);\n}\n\nunconstrained fn entry_point_two(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    inner_func(x, y);\n}\n\nunconstrained fn inner_func(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point_one",
    "entry_point_two"
  ]
}
