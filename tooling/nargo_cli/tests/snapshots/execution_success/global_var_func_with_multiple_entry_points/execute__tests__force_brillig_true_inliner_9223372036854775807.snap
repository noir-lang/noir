---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/7VVwU7DMAx1umYQJg7AhRsnuMAhW4vWYyUGfEfE1O/op6Nq9up43mVzLE3JZPv5+dnZHBzM4WeyGs8KTo1iejzjdbY2xIolebpCPI9E+d3BeeE/8AyQD2nyLwwbDgonK/wutl1Q+jPk3wSGWQB/Q/h1Gfx4gzg/Y44Pou495I+X55CPP+Rf9N2in+4PeA8Cr8TcOSdr3Z4U/hXrbbKvcdbDqO7xvezssTeE/W2P3axw/m8zdLZrIDSTu8Z3UebK3eM+r+SSdl7EPuNJu+MFXm+jRXxkuCBqSf5kNJNLdQkKbm/TTyt7kJpr86DYF8FvKXJ6G46q5kvQdSPbjbNPau7O5Gq7WIneeS7N1YvYV8h1KfT/oupCtVYw/5bVo339bRcj1V0wHeQceH0v4t/x+53SR30Fz2Gb1kOThvSZ9vv2L0mdJquYTv/JlUBZ4QoAAA==",
  "debug_symbols": "zdbfioQgFAbwd/G6Cz1HS3uVZRn6Y4MQFVYLS/Tua0tCuMvcNM50ExmfP76LlLOQWpfz/Wa6ph9J/rGQtq+KyfSdWy1rQkpr2tbcb8fPhG4PJn/z41B023KcCjuRnAmZEN3V7i1Tbn9jWk1yQdfkTxSkj4ISx+hnQph6Iq4CHOhJHBnsUWQyxFlMHGLiGBPnZ3EQHufscVQg7lHBIewh3tMjDXukL+whlO+RhgcNsov0kBfpoa7RA+lFevx/nUm/Axh9jHPmDwEHGuLwRJyHOJ7FMfM4xxDnMXERE0+j4atbfRXWFGWr9/GhmbvqME1M34MOBovB9pWuZ6u3EeMwXWz/P8qEo2Md/QM=",
  "file_map": {
    "50": {
      "source": "global ONE: Field = 1;\nglobal TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_one(x, y);\n        entry_point_two(x, y);\n    }\n}\n\nunconstrained fn entry_point_one(x: Field, y: Field) {\n    let z = ONE + x + y;\n    assert(z == 2);\n    inner_func(x, y);\n}\n\nunconstrained fn entry_point_two(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    inner_func(x, y);\n}\n\nunconstrained fn inner_func(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
