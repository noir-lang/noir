---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1Wy07DMBC020QQKiQeBzhRDsDZTYKSYyRe3xFR5Tvy6RCxW29HDkKwFm2VlSLbcTw7Hq+za82X2c9nRv2EWh5Ls9Q21Lq/2UoRy8XkaWPwTED4SehIQlvjo9oGyMt3bHwoD9Rm8H5YM1fceBbgpIVfu7LOYH/K/ItMYEbAz7PAOSriuyPCee238Q34PaWxjBlew3PyQr/R3DHNc/+c+hngxTh3yUlbt8sA/5nY22BPvddDye/mvjzrY+eM/aKPXSzo/G899FasGdAMY03GIq7F2JNzaWAta5fCt9fUcuykgNfoaOEuBK4BX8ifjc8kpIsdWYsxiTo1Ovsp0W9qxu8Gar4EfrH+cyHN2dfC+Dub9Pr+q9o59jvvvQ54xtJ/Ct/f0/hkZB/NL3l2VbvqirZrH9v1unxvUafBZkIn5rHndUE11QXfG9cF8r/z07qA14TqAq4ZsC44o37kuqA60Logj1gXbHL30kPvXO6+onYXczdzPrTcfQP8ptzt5+X3dzT+79z9ASjPb372EgAA",
  "debug_symbols": "tZXbaoQwFEX/Jc95yN3EXyll8JIZAqLipVDEf28UQ6dpmDHM5M2jWeuoZOcsoNblfLuY9tqNIP9YQNNVxWS61lYLQPutsS/arRqnYphAjrmEQLe1vcrUCsHVNBrkHK2fEOAgINUBEIz+ALYoB9M05nbx+y4Ay5CMSNedKO53V88I/31J8AspJgdBsfQJHE2QaIJGEyxIEO4Ihu8J+G8pp/RYyhnx5fyNcuHLxaty7nYXF/6GIFlKuUwpVwnlFCWTr/sZYMMb/PMMu43ACPLDK58R7FTcGc0cweipuD8kcDRBoolg3BlHjhDihfCyN8rFqZMhRv4oAiKlPEsplynlKpl8tdVXMZiibPQ2h7eHc1u5sWzL6bt3T9zg7oeu0vU86G2E303vLWqUQJr9ngn7LQypsJ1stx8=",
  "file_map": {
    "50": {
      "source": "global ONE: Field = 1;\nglobal TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_one(x, y);\n        entry_point_two(x, y);\n    }\n}\n\nunconstrained fn entry_point_one(x: Field, y: Field) {\n    let z = ONE + x + y;\n    assert(z == 2);\n    inner_func(x, y);\n}\n\nunconstrained fn entry_point_two(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n    inner_func(x, y);\n}\n\nunconstrained fn inner_func(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point_one",
    "entry_point_two"
  ]
}
