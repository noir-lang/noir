---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "verification_key",
        "type": {
          "kind": "array",
          "length": 114,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "proof",
        "type": {
          "kind": "array",
          "length": 109,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "public_inputs",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "public"
      },
      {
        "name": "key_hash",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "proof_b",
        "type": {
          "kind": "array",
          "length": 109,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/+3YVXCVVxiF4X2SoMFdQ3B3t5DglroLpe5G3Sh1dzdK3d2NUnf34u7uDu/s/wzvDVxwfTIDPORMLrPX+lYqxK/iVAhZiXcy5O78M0b/52tb4pScJWfLOXIJuaRcSi4tl5HLyrlyObm8XEGuKFeSK8tV5KpyNbm6XEOuKdeSa8t15LpyPbm+nCc3kPPlhnIjubHcRG4qN5Obyy3klnIrubXcRm4rt5Pbyx3kjnInubPcRe4qd5O7yz3knnIvubfcR+4rF8j95EK5SO4vD5AHyoPkwfIQeag8TB4uj5BHysXyPvK+8n7y/vIB8oHyQfLB8iHyofJh8uHyEfKR8lHy0fIo+Rh5tHysfJx8vHyCfKJ8knyyfIp8qnyafLp8hnymfJZ8tnyOfG5ifi4k3xujz8+Tz5cvkC+UL5Ivli+RL5Uvky+Xr5DHylfK4+Sr5Kvla+Rr5evk6+Ub5Bvlm+Sb5VvkW+Xb5NvlO+Q75bvku+V75Hvl++T75QfkB+WH5IflR+RH5cfk8fLj8gT5CflJ+Sn5afkZ+Vn5Ofl5+QX5Rfkl+WX5FflV+TX5dfkN+U35Lflt+R35Xfk9+X35A/lD+SP5Y/kTeaL8qTxJ/kz+XP5C/lL+Sv5a/kb+Vv5O/l7+Qf5R/kn+Wf5F/lX+Tf5d/kP+U/5L/lv+R/5X/k/+X54sT5GnytPkkPw7Xd+bkTj9Waav7nKmr0Zn+mp0kZzpq9GZvhq9t311pj6fJc+W58hz5XnyfHmBvFBeJC+Wl8hL5WXycnmFvFJeJa+W18hr5XXyenmDvFHeJG+Wt8hb5W3ydpm/0k7JWXK2nCOXkEvKpeTSchm5rJwrl5PLyxXkinIlubJcRa4qV5OryzXkmnItubZcR64r15Pry3lyAzlfbig3khvLTeSmcjO5udxCbim3klvLbeS2cju5vdxB7ih3kjvLXeSucje5u9xD7in3knvLfeS+coHcTy6Ui+T+8gB5oDxIHiwPkYfKw+Th8gh5pFwsh+TfPfXVnMTF6R9Ivk8/zU4+p4fSP+md9E16Jv2SXkmfpEfSH+mN9EV6Iv2QXkgfpAfS/+h99D16Hv2OXkefo8flhdjb8kPsafQzehl9jB5G/6J30bfoWfQrehV9ih5Ff6I30ZfoSfQjehF9iB5E/6H30HfoOfQbeg19hh5TEGJvKQyxp9BP6CX0EXoI/YPeQd+gZ9Av6BX0CXoE/YHeQF+gJ9AP6AX0AXoA+U/uk/fkPPlOrpPn5PioEHN7dIg5TT6Ty+QxOUz+krvkLTlLvpKr5Cl5SH6Sm+QlOckNwn7DbsNew07DPsMuwx7DDsP+wu7C3jI2xH1lXIh7CjsK+wm7CXsJOwn7CLsIewg7CPsHuwd7BzsH+wa7BnsGOwb7BbsFewU7BfsEuwR7BDsE+wO7A3vD+BD3hQkh7gnsCOwH7AbsBewE7APsAuwB7ADc/9z93Pvc+dz33PXc89zx3O/c7dzr3Onc59zl3OPc4dzf3N3c2xNDvK8nhXhPc0dzP3M3cy9zJ3MfcxdzD3MHc/9y93Lvcudy33LXcs9yx3K/crdyr3Kncp9yl3KPcodyf3J3cm9OC/F3c2aIPYb+Qm+hr9BT6Cf0EvoIPYT+Qe+gb9Az6Bf0CvoEPYL+QG+gL9AT6Af0AvoAPYD8J/fTeU++84tPnpPj5De5TV6T0+QzuUwek8PkL7lL3pKz5Cu5Sp6So+QnuUlekpPkI7lIHpKD5B+5R96Rc+RbfirmGTlGfpFb5BU5RT6RS+QROUT+kDvkDTlDvpAr5Ak5Qn6QG+QFOUE+kAvkATnA+8+7z3vPO8/7zrvOe847zvvNu817zTvN+8y7zHvMO8z7y7vLu5l+OqeH3X/tAIYu/DzgGgAA",
  "debug_symbols": "nY/LCsMgEEX/ZdYujCF95FdKCcZHEETFR6GI/14Tagi0q+zmzL1zYDJwMadlUkbaAOMjg7aMRmVNpQx4WwVHzUohUh9h7Lp+QCAMryPBpCCQSgsYB1zQb5kMl1bue7yXCSlPBN1fP8H33X+9nfdXmL3SWi3T8au6flGv6KzFF2Uy7JDGt2tJu3feMsGTF6tpy6r+Aw==",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// This circuit aggregates two recursive proofs from `double_verify_proof_recursive`.\n// Recursive aggregation is a backend-specific process and it is expected for backends\n// to attach any extra data they may need (e.g. aggregation objects) to their proofs.\n// Whether the proof we are verifying itself contains a recursive proof is expected to be\n// a circuit constant by the barretenberg. Barretenberg hides this circuit constant in the\n// proof serialization. Thus, we must have separate circuits for verifying a normal proof and a recursive proof\n// with two different proof sizes.\nfn main(\n    verification_key: [Field; 114],\n    // This is the proof without user-specified public inputs attached.\n    //\n    // This means: the size of this does not change with the number of public inputs unless\n    // they have been attached by the backend.\n    proof: [Field; 109],\n    public_inputs: pub [Field; 1],\n    // This is currently not public. It is fine given that the vk is a part of the circuit definition.\n    // I believe we want to eventually make it public too though.\n    key_hash: Field,\n    proof_b: [Field; 109],\n) {\n    std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    std::verify_proof(verification_key, proof_b, public_inputs, key_hash);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
