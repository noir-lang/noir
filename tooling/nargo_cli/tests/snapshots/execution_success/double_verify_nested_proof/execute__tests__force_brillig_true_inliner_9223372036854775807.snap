---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "verification_key",
        "type": {
          "kind": "array",
          "length": 114,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "proof",
        "type": {
          "kind": "array",
          "length": 109,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "public_inputs",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "public"
      },
      {
        "name": "key_hash",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "proof_b",
        "type": {
          "kind": "array",
          "length": 109,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _333",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127, _128, _129, _130, _131, _132, _133, _134, _135, _136, _137, _138, _139, _140, _141, _142, _143, _144, _145, _146, _147, _148, _149, _150, _151, _152, _153, _154, _155, _156, _157, _158, _159, _160, _161, _162, _163, _164, _165, _166, _167, _168, _169, _170, _171, _172, _173, _174, _175, _176, _177, _178, _179, _180, _181, _182, _183, _184, _185, _186, _187, _188, _189, _190, _191, _192, _193, _194, _195, _196, _197, _198, _199, _200, _201, _202, _203, _204, _205, _206, _207, _208, _209, _210, _211, _212, _213, _214, _215, _216, _217, _218, _219, _220, _221, _222, _224, _225, _226, _227, _228, _229, _230, _231, _232, _233, _234, _235, _236, _237, _238, _239, _240, _241, _242, _243, _244, _245, _246, _247, _248, _249, _250, _251, _252, _253, _254, _255, _256, _257, _258, _259, _260, _261, _262, _263, _264, _265, _266, _267, _268, _269, _270, _271, _272, _273, _274, _275, _276, _277, _278, _279, _280, _281, _282, _283, _284, _285, _286, _287, _288, _289, _290, _291, _292, _293, _294, _295, _296, _297, _298, _299, _300, _301, _302, _303, _304, _305, _306, _307, _308, _309, _310, _311, _312, _313, _314, _315, _316, _317, _318, _319, _320, _321, _322, _323, _324, _325, _326, _327, _328, _329, _330, _331, _332, _333]",
    "public parameters indices : [_223]",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(34))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(35))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(36))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(37))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(38))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(39))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(40))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(41))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(42))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(43))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(44))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(46))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(47))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(48))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(49))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(50))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(52))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(53))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(54))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(55))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(56))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(57))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(58))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(59))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(60))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(61))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(62))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(63))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(64))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(65))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(66))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(67))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(68))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(70))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(71))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(72))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(73))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(74))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(75))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(76))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(77))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(78))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(79))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(80))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(81))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(82))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(83))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(84))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(86))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(87))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(88))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(89))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(90))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(93))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(94))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(95))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(96))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(97))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(98))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(99))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(100))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(101))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(102))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(103))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(104))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(105))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(106))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(107))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(108))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(109))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(110))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(111))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(112))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(113))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(114))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(115))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(116))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(117))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(118))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(119))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(120))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(121))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(122))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(123))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(124))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(126))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(127))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(128))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(129))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(130))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(131))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(132))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(133))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(134))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(135))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(136))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(137))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(138))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(139))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(142))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(143))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(144))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(145))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(147))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(148))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(150))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(151))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(152))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(153))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(154))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(155))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(156))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(157))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(160))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(161))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(162))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(163))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(166))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(167))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(169))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(170))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(171))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(172))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(173))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(174))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(175))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(176))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(177))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(178))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(179))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(180))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(181))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(182))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(183))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(184))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(185))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(186))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(187))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(188))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(189))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(190))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(191))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(192))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(193))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(194))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(195))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(196))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(197))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(198))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(199))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(200))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(201))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(202))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(203))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(204))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(205))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(206))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(208))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(209))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(210))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(211))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(214))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(215))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(216))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(217))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(218))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(219))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(220))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(221))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(222))], q_c: 0 }]), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(223))], q_c: 0 }]), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(224))], q_c: 0 }), Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(225))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(226))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(227))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(228))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(229))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(230))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(231))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(232))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(233))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(234))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(235))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(236))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(237))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(238))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(239))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(240))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(241))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(242))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(243))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(244))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(245))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(247))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(248))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(249))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(250))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(251))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(252))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(253))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(254))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(255))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(256))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(257))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(258))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(259))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(260))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(261))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(262))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(263))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(264))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(265))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(266))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(267))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(268))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(269))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(270))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(271))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(272))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(273))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(274))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(275))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(276))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(277))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(278))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(279))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(280))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(281))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(282))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(283))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(284))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(286))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(287))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(288))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(289))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(290))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(291))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(292))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(293))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(294))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(295))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(296))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(297))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(298))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(299))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(300))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(301))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(302))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(303))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(304))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(305))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(306))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(307))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(308))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(309))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(310))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(311))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(312))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(313))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(314))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(315))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(316))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(317))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(318))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(319))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(320))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(321))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(322))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(323))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(324))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(325))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(327))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(328))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(329))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(330))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(331))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(332))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(333))], q_c: 0 }])], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 33170 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 334 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(6), offset_address: Relative(7) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 114 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 115 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(8) }, Mov { destination: Direct(32773), source: Relative(7) }, Call { location: 60 }, Mov { destination: Relative(1), source: Relative(6) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32950 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 109 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 110 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(8) }, Mov { destination: Direct(32773), source: Relative(7) }, Call { location: 60 }, Mov { destination: Relative(2), source: Relative(6) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 33059 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 1 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(3) }, Mov { destination: Direct(32772), source: Relative(8) }, Mov { destination: Direct(32773), source: Relative(7) }, Call { location: 60 }, Mov { destination: Relative(3), source: Relative(6) }, Mov { destination: Relative(4), source: Direct(33060) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 33061 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 109 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 110 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(5) }, Mov { destination: Direct(32772), source: Relative(8) }, Mov { destination: Direct(32773), source: Relative(7) }, Call { location: 60 }, Mov { destination: Relative(5), source: Relative(6) }, Call { location: 71 }, Call { location: 72 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 33170 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 70 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 63 }, Return, Return, Call { location: 91 }, Load { destination: Relative(6), source_pointer: Relative(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 79 }, Call { location: 97 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(3) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(6) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 87 }, Call { location: 97 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 96 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZFNCoMwEIXvMuss8oPaeJUiEnUsgRAlTQpFcvcmpda6sJRuMpl5Mx8P3gIDduHSajtOV6jPC3ROG6MvrZl65fVk03QBmp+ThJrHSGCVWu8Qs/Kxmwizcmg91DYYQ+CmTHguXWdln9Url1RKAO2QagKO2mD+RbJd0+NTxkTxumac8jeg2BPYFwIvypUgxGaB8589cCrfHqrTkQfxn4cmdarXbpdCzCynVWfw1Y7B9h+qv8+rsqY4u6nHITjMpC1KkYIqKaloQ4ClyVkyIsvcsNxURMomZhsP",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// This circuit aggregates two recursive proofs from `double_verify_proof_recursive`.\n// Recursive aggregation is a backend-specific process and it is expected for backends\n// to attach any extra data they may need (e.g. aggregation objects) to their proofs.\n// Whether the proof we are verifying itself contains a recursive proof is expected to be\n// a circuit constant by the barretenberg. Barretenberg hides this circuit constant in the\n// proof serialization. Thus, we must have separate circuits for verifying a normal proof and a recursive proof\n// with two different proof sizes.\nfn main(\n    verification_key: [Field; 114],\n    // This is the proof without user-specified public inputs attached.\n    //\n    // This means: the size of this does not change with the number of public inputs unless\n    // they have been attached by the backend.\n    proof: [Field; 109],\n    public_inputs: pub [Field; 1],\n    // This is currently not public. It is fine given that the vk is a part of the circuit definition.\n    // I believe we want to eventually make it public too though.\n    key_hash: Field,\n    proof_b: [Field; 109],\n) {\n    std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    std::verify_proof(verification_key, proof_b, public_inputs, key_hash);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
