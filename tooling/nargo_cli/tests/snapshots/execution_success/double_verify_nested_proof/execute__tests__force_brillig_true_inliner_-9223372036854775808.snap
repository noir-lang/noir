---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "verification_key",
        "type": {
          "kind": "array",
          "length": 114,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "proof",
        "type": {
          "kind": "array",
          "length": 109,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "public_inputs",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "public"
      },
      {
        "name": "key_hash",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "proof_b",
        "type": {
          "kind": "array",
          "length": 109,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ZY5bCoMwEEX3Mt/5yANt41ZEJOoogZBIjIUi2XsnpQ9pf4Y5w2XuOWDCYV966+ewQdMe4MJokg2e6MgMhmids0t/PgMv46qf+W01vuCWTEzQCKEqBugnWiWX9GG2DqGpeGb/YVnV77BS/BOWMneZ6GaiNYPDl8u8+/Gklu4r/liuMYw47RGL71dVkWnN2YV3DARdWi2YrguIAhemNfVR5wM=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// This circuit aggregates two recursive proofs from `double_verify_proof_recursive`.\n// Recursive aggregation is a backend-specific process and it is expected for backends\n// to attach any extra data they may need (e.g. aggregation objects) to their proofs.\n// Whether the proof we are verifying itself contains a recursive proof is expected to be\n// a circuit constant by the barretenberg. Barretenberg hides this circuit constant in the\n// proof serialization. Thus, we must have separate circuits for verifying a normal proof and a recursive proof\n// with two different proof sizes.\nfn main(\n    verification_key: [Field; 114],\n    // This is the proof without user-specified public inputs attached.\n    //\n    // This means: the size of this does not change with the number of public inputs unless\n    // they have been attached by the backend.\n    proof: [Field; 109],\n    public_inputs: pub [Field; 1],\n    // This is currently not public. It is fine given that the vk is a part of the circuit definition.\n    // I believe we want to eventually make it public too though.\n    key_hash: Field,\n    proof_b: [Field; 109],\n) {\n    std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    std::verify_proof(verification_key, proof_b, public_inputs, key_hash);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
