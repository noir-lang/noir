---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 1
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 1
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : 1",
    "private parameters indices : [0, 1]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "EXPR [ (-1, _0, _1) (1, _0) (1, _1) -1 ]"
  ],
  "debug_symbols": "ZY1bCsMgEEX3Mt9+JIK0dSulBJ9hQFR8FIpk7zWhgtDPc++ZOw20kXXf0NuQgT8buKBEweA7NaBXlKPwJ+UiUgF+YwSM18DXhR0ELDoDnC0H+TPXOx3qg87qq4NM6Bzu2/ywx2+RUEhnfmirV1NbPnE04z6moIyuyZxLV9fnvw==",
  "file_map": {
    "50": {
      "source": "use my_submodule::my_helper;\n\nfn main(x: u1, y: u1) {\n    my_helper();\n    my_submodule::my_bool_or(x, y);\n}\n\nmod my_submodule {\n    pub fn my_bool_or(x: u1, y: u1) {\n        assert(x | y == 1);\n    }\n\n    pub fn my_helper() {}\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
