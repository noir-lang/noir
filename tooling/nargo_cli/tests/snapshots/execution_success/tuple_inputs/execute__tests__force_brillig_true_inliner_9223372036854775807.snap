---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "field"
            },
            {
              "kind": "field"
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "struct_pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "struct",
              "path": "Foo",
              "fields": [
                {
                  "name": "a",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "bar",
                  "type": {
                    "kind": "struct",
                    "path": "Bar",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "array",
                          "length": 3,
                          "type": {
                            "kind": "field"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "kind": "struct",
              "path": "Bar",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdrRbuIwEAXQf8kzD57x2GP3V1ZVRVtaISGoKF1pVfXfl7AkoGTW1a3xS9WgnItgkjGZ5LN7Xj1+vD6sty+79+7u12e32T0tD+vd9rj1+bXoHvfrzWb9+nD9cuf6P8mf9n9/W277zffDcn/o7phl0a22z/1/4ehf1ptVdxfc1/2iSwKLAIuIimwL8YMQmYpsCXHpLITTRJBzOCGcME48TswyShyJuhkJOIk4UZwknGSYkMMJ4YRx4nGCV5/w6hNefcKrT3b1hUdC12Qx21VjOO+qyrP03DKdXdN0apoulemUlc77Uk5XO/+L1+r4HIfu7zhO47Gj5kQyTLzDiVm0wMNKFq4/ypkwTjxOBCcBJxEnipOEkwwTcTjBqy949QWvvuDVF3vFSGEkWtF+JDZN15bpwVWml1tn8NXxpdYZBIo/kYCTiBO7EehIdPYzOCScZJhEhxPCCePE40RwEnAScYJXP+LVj3j1Fa++2tUXGkmuaD/KTdN90/RYmV5unZqr40utMzko/kQIJ4wTs2jRDct7pNnybg+CyiTgJH5DeHZBmMwaRh2mRzFNZ0GU7Y8vbiBh9i7ZbDdKw5WqzmcuOdnEF0hGCdtTqjIhnJjHmI5XNhr8jHicCE4CTsxjrNSG2J5SlUmCCXHLZsdU26mPx9ql2ZGfxkvb+NA2PlbHk15WgjCN17bxqW18vul3f71MGr8HdOxDabKgMruu4XrNTG3juW187QV4uX1w7RV4+QRkbRuf2sbn6vjSCehd23hqG883/e5/3j5800kJe2kbH9rG195YKbcPX3tnpXwCimsbT23juTq+dALaA+DbxUvb+HDT7/7n7eM/M+gb3aNi0bbxqWl8MM8QjkM8x+nFPgfGiceJ4CTgJOJEcZJwkmFiz6/LBK9+xKsf8erH76qfaEYCTiJOFCdm9b3LZ+J5NlKw59dFYs+vy4RwYlc/l4jHieAk4MSsvg/DONHH2QxKFScJJxkm9sjaS4kQThgnHidm9f04GfZpNue0R9ZlEnGiOEk4yRj5Om79Xu7Xy8fN6vwk6cvH9unqwdLDn7fV5BnTt/3uafX8sV/1T5teHjTti6Vukdx9//TdcYMzLzhrv0mnzbTwzh3f8/i+fwE=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(pair: (Field, Field), x: [(u8, u8, u8); 2], struct_pair: (Foo, Bar)) -> pub (Field, u8) {\n    let mut start_val = 0;\n    for i in 0..2 {\n        assert(x[i].0 == start_val);\n        assert(x[i].1 == start_val + 1);\n        assert(x[i].2 == start_val + 2);\n        start_val += 3;\n    }\n\n    assert(struct_pair.0.a == 1);\n    assert(struct_pair.0.b == [2, 3, 20]);\n    assert(struct_pair.0.bar.inner == [100, 101, 102]);\n    assert(struct_pair.1.inner == [103, 104, 105]);\n\n    let (u, v) = if pair.0 as u32 < 1 {\n        (pair.0, pair.0 + 1)\n    } else {\n        (pair.0 + 1, pair.0)\n    };\n\n    assert(u == pair.0 + 1);\n    assert(v == pair.0);\n\n    (u, v as u8)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
