---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "field"
            },
            {
              "kind": "field"
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "struct_pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "struct",
              "path": "Foo",
              "fields": [
                {
                  "name": "a",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "bar",
                  "type": {
                    "kind": "struct",
                    "path": "Bar",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "array",
                          "length": 3,
                          "type": {
                            "kind": "field"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "kind": "struct",
              "path": "Bar",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdvRbuIwEAXQf8kzD/aMPTPur6xWFW1phYSgonSlVdV/38ASiojl6jaZl6pBOReJcewwJh/d0+rh/eV+vX3evXV3vz66ze5xeVjvtv3Rx+eie9ivN5v1y/31y104/jE+nf/2utweD98Oy/2huyNKi261fTr+l3v/vN6surscPn8vOkuwyLAQVJS6SDyIlG5FqYkU7CwS2Y2IIeAk4oRwwjhJOMk4EZwoTgwnePUjXv2IVz/Wqy8XomFEGCcJJxknghPFieGkwIQCTiJO8OoTXn3Cq0949ale/UQXEq/JYnSqSj6fqkqjdHVNN9f04pnOYWJ6LBrP58ZiVyf/j4++8eQbz77xyTc++8aLb7y6xiffcZ+mj5wiw91oILmNx0bOiWScCE4UJ4aTApMccBJxQjhhnODVz9XqZxq+8eTrIXYmghPFieGkwEQCTiJOCCeMk4QTvPqCV1/w6gtefalf+5YvRCfcDmlwTY+u6TQxvb2kKfvGJ9/47BsvvvHqG2++8cU13nzHvU0fOa1bOcNGzokoTgwn9WVWL0RH7agScBJxQjhhnCScZJwIThQnhhO4+hQCTiJOCCf16qd4IeXnyy7Ve+OzpWfXdJmY3pw6qd6dny/efOOLa3x9h2C++OgbT77x7BvvO+7j9JHTuGUgwkbOiUScEE6qVZMwfJ2TKCOScJJxIt8QCiNSraHosKssdrtHTPV2saQwkDx6l3qXU+OwU6KjPT9iqxNukAKTen+0TSJOqmNML50szTwijJOEk4yT6hhrLr/1bmmbGEyy71Sdp07V/Y3j12QX+TY++cZn33iZHB/1ayXIt/HqG2++8WXWz/56mazcB+tlHrLbBVWC63ot0TeefONdO2ckUztn7QtQ1DfefOPL5PjWBTi52/1NfPSNp1k/+59PHzN0xlsX4Ayd8WZ89o2f+uOY9vShU38d074ALfjGR994mhzfugCNfeOTb3ye9bP/+fRh039I07oATX3jzTW+vj/Q3/MMREZf9uv7A23COEk4yTgRnChODCcFJVzfH2iTiBPCCePku+pbHJGME8GJ4qRafQ7lTJhoRApM6u3uNok4qVe/tAjjJOEk46Rafc5DO5GFR0RxYjgpMKm3rDm1SMQJ4YRxUq0+XzrDbDYiGSeCE8WJ4aRg5LM/+rPcr5cPm9X5CbPn9+3j1QNnh7+vq5tnz173u8fV0/t+dXwK7esBtGOxNCws/D4+ldMfMNOCWY+Hx+HCfdODE/fv2b/vPw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(pair: (Field, Field), x: [(u8, u8, u8); 2], struct_pair: (Foo, Bar)) -> pub (Field, u8) {\n    let mut start_val = 0;\n    for i in 0..2 {\n        assert(x[i].0 == start_val);\n        assert(x[i].1 == start_val + 1);\n        assert(x[i].2 == start_val + 2);\n        start_val += 3;\n    }\n\n    assert(struct_pair.0.a == 1);\n    assert(struct_pair.0.b == [2, 3, 20]);\n    assert(struct_pair.0.bar.inner == [100, 101, 102]);\n    assert(struct_pair.1.inner == [103, 104, 105]);\n\n    let (u, v) = if pair.0 as u32 < 1 {\n        (pair.0, pair.0 + 1)\n    } else {\n        (pair.0 + 1, pair.0)\n    };\n\n    assert(u == pair.0 + 1);\n    assert(v == pair.0);\n\n    (u, v as u8)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
