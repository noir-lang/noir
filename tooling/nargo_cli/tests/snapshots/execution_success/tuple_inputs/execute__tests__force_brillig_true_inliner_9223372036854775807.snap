---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "field"
            },
            {
              "kind": "field"
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "struct_pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "struct",
              "path": "Foo",
              "fields": [
                {
                  "name": "a",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "bar",
                  "type": {
                    "kind": "struct",
                    "path": "Bar",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "array",
                          "length": 3,
                          "type": {
                            "kind": "field"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "kind": "struct",
              "path": "Bar",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _19",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17]",
    "public parameters indices : []",
    "return value indices : [_18, _19]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], [EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], EXPR [ (1, _7) 0 ]], EXPR [ (1, _8) 0 ], [EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ]], [EXPR [ (1, _12) 0 ], EXPR [ (1, _13) 0 ], EXPR [ (1, _14) 0 ]], [EXPR [ (1, _15) 0 ], EXPR [ (1, _16) 0 ], EXPR [ (1, _17) 0 ]]], outputs: [_18, _19]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32856 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 18 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(8), offset_address: Relative(9) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U8) }, Cast { destination: Direct(32840), source: Direct(32840), bit_size: Integer(U8) }, Cast { destination: Direct(32841), source: Direct(32841), bit_size: Integer(U8) }, Cast { destination: Direct(32842), source: Direct(32842), bit_size: Integer(U8) }, Cast { destination: Direct(32843), source: Direct(32843), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 6 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(3) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 70 }, Mov { destination: Relative(3), source: Relative(8) }, Mov { destination: Relative(4), source: Direct(32844) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 32845 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(5) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 70 }, Mov { destination: Relative(5), source: Relative(8) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 32848 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(6) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 70 }, Mov { destination: Relative(6), source: Relative(8) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 32851 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(7) }, Mov { destination: Direct(32772), source: Relative(10) }, Mov { destination: Direct(32773), source: Relative(9) }, Call { location: 70 }, Mov { destination: Relative(7), source: Relative(8) }, Call { location: 81 }, Call { location: 82 }, Mov { destination: Direct(32854), source: Relative(1) }, Mov { destination: Direct(32855), source: Relative(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32854 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Stop { return_data: HeapVector { pointer: Relative(3), size: Relative(4) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 80 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 73 }, Return, Return, Call { location: 306 }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(10), bit_size: Integer(U8), value: 0 }, Store { destination_pointer: Relative(9), source: Relative(10) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 3 }, Mov { destination: Relative(8), source: Relative(10) }, Jump { location: 96 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Relative(11) }, JumpIf { condition: Relative(2), location: 265 }, Jump { location: 99 }, Const { destination: Relative(3), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(4), rhs: Relative(3) }, JumpIf { condition: Relative(8), location: 104 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Load { destination: Relative(4), source_pointer: Relative(5) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(4) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 110 }, Call { location: 312 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(4) }, Const { destination: Relative(4), bit_size: Field, value: 2 }, Const { destination: Relative(9), bit_size: Field, value: 3 }, Const { destination: Relative(11), bit_size: Field, value: 20 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(9) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(11) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(9), bit_size: Integer(U1), value: 1 }, Store { destination_pointer: Relative(4), source: Relative(9) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 132 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, JumpIf { condition: Relative(8), location: 252 }, Jump { location: 135 }, Load { destination: Relative(5), source_pointer: Relative(4) }, JumpIf { condition: Relative(5), location: 139 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Load { destination: Relative(4), source_pointer: Relative(6) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 145 }, Call { location: 312 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, Const { destination: Relative(4), bit_size: Field, value: 100 }, Const { destination: Relative(8), bit_size: Field, value: 101 }, Const { destination: Relative(11), bit_size: Field, value: 102 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(8) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(11) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 166 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, JumpIf { condition: Relative(5), location: 239 }, Jump { location: 169 }, Load { destination: Relative(5), source_pointer: Relative(4) }, JumpIf { condition: Relative(5), location: 173 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Const { destination: Relative(4), bit_size: Field, value: 103 }, Const { destination: Relative(5), bit_size: Field, value: 104 }, Const { destination: Relative(6), bit_size: Field, value: 105 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(11) }, Store { destination_pointer: Relative(14), source: Relative(4) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(6) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 192 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, JumpIf { condition: Relative(5), location: 226 }, Jump { location: 195 }, Load { destination: Relative(6), source_pointer: Relative(4) }, JumpIf { condition: Relative(6), location: 199 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(6), bit_size: Field }, Cast { destination: Relative(6), source: Relative(4), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(10) }, BinaryFieldOp { destination: Relative(6), op: Add, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 209 }, Jump { location: 206 }, Mov { destination: Relative(2), source: Relative(6) }, Mov { destination: Relative(5), source: Relative(1) }, Jump { location: 212 }, Mov { destination: Relative(2), source: Relative(1) }, Mov { destination: Relative(5), source: Relative(6) }, Jump { location: 212 }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(3), location: 216 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(5), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 220 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Cast { destination: Relative(3), source: Relative(5), bit_size: Integer(U8) }, Cast { destination: Relative(1), source: Relative(3), bit_size: Field }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Relative(2) }, Mov { destination: Relative(2), source: Relative(3) }, Return, Load { destination: Relative(5), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Load { destination: Relative(6), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, Load { destination: Relative(11), source_pointer: Relative(15) }, BinaryFieldOp { destination: Relative(14), op: Equals, lhs: Relative(6), rhs: Relative(11) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(14) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(13) }, Mov { destination: Relative(2), source: Relative(5) }, Jump { location: 192 }, Load { destination: Relative(5), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Load { destination: Relative(8), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, Load { destination: Relative(11), source_pointer: Relative(16) }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(8), rhs: Relative(11) }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(15) }, Store { destination_pointer: Relative(4), source: Relative(8) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(13) }, Mov { destination: Relative(2), source: Relative(5) }, Jump { location: 166 }, Load { destination: Relative(8), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, Load { destination: Relative(11), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, Load { destination: Relative(15), source_pointer: Relative(17) }, BinaryFieldOp { destination: Relative(16), op: Equals, lhs: Relative(11), rhs: Relative(15) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(16) }, Store { destination_pointer: Relative(4), source: Relative(11) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(13) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 132 }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U32, lhs: Relative(8), rhs: Relative(12) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, Load { destination: Relative(17), source_pointer: Relative(19) }, Load { destination: Relative(18), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U8, lhs: Relative(17), rhs: Relative(18) }, JumpIf { condition: Relative(19), location: 274 }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(20) } }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(13) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U8, lhs: Relative(18), rhs: Relative(14) }, BinaryIntOp { destination: Relative(20), op: LessThanEquals, bit_size: U8, lhs: Relative(18), rhs: Relative(17) }, JumpIf { condition: Relative(20), location: 282 }, Call { location: 315 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U8, lhs: Relative(19), rhs: Relative(17) }, JumpIf { condition: Relative(20), location: 286 }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(21) } }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Load { destination: Relative(2), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U8, lhs: Relative(18), rhs: Relative(15) }, BinaryIntOp { destination: Relative(19), op: LessThanEquals, bit_size: U8, lhs: Relative(18), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 294 }, Call { location: 315 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 298 }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(20) } }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U8, lhs: Relative(18), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: LessThanEquals, bit_size: U8, lhs: Relative(18), rhs: Relative(2) }, JumpIf { condition: Relative(17), location: 302 }, Call { location: 315 }, Store { destination_pointer: Relative(9), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(13) }, Mov { destination: Relative(8), source: Relative(2) }, Jump { location: 96 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 311 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
