---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "field"
            },
            {
              "kind": "field"
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "struct_pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "struct",
              "path": "Foo",
              "fields": [
                {
                  "name": "a",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "bar",
                  "type": {
                    "kind": "struct",
                    "path": "Bar",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "array",
                          "length": 3,
                          "type": {
                            "kind": "field"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "kind": "struct",
              "path": "Bar",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZjNbupKEITfxWsW0z3/eZWjKCIJOUJCJOKEK11FvPud8nQBZwFCY91N6nOgy552uW38M71vXo+/X7b7j88/09Ovn+n1sN3ttr9fdp9v6+/t577992dy+FP89CSrqYQusUuapTbRJnV68qtJnDMVUzX1psE0mibTbFpMzU/MT8xPml+AetNgGk2TaTYtprWrOlMxNT81PzU/NT9tfgmaTYtp7eqbX4aKqZp602AaTZNp7hqsPrTvF2j7foRG02SaTYtp7RqdqZiqqTc1v9j8KjSZZtNiWrsmZyqmaupNg6n5JfNL5pfMLzU/afGQ7AhCaJaiAE8IhEhIhEwohGpQ6DMHEuGYI+kAmVAIqMIJrY4gBCV4QiBEQiJkQiGYszpHEIIS4JwAgRAJcM6ATCiEaoCLoIMQlOAJ9EHSpUVJEXWJACEoAVUVEAiRgOvZAZqPtvOliLIqoB2hekA7QsW6fDVAjDsIoe1LsS8ku0MgRAL2hSYg3R2KQeQCEWSdIRAiAeVYKcLcoRAwPrAK5HnuBgLdQQkWNkWGPVaKEHcoBPjgO4hxByFgsmGlc4zRljnGM0RCma9uRWY9VlwcQQiwwYoxZDsEAmYkjhS5njWblq6IsMdJQ4Q7eEIgRAImI1qCCHcohNrBI8JBAEJQgidgQiogEhIhE+DsAdUAEe4gBDgHgCcEQiTAOQIyoRCqwTzRE0AISvAEOGdAJCRCJhQCnPPptJp4J3z5Pmw2uBFe3RrbDfNrfdjsv6en/XG3W03/rHfH+Ut/vtb7Wb/Xh/Zp6+tm/960GX5sdxvQaXWpdrdLFVfSXNyuz3N5fLweje71IQzUB1esPmgZqU/n+uxG6hEmq5db9fF2fU7R6nPWgfo27cUM2ry/OoLHDWriGXCabhjc6UBUnsF4Xf54B0s81+db9eIWtvCewWM9vO+wtIn53IQ8EuMY5Fxfb/ZgaQ5lcRDl/0xickxikpEkXtXryCxImbMwlZFZlgIHcYoj+8/CWZaHZmEWv6z+PAtz9CP1SzPYnm8vCRI/kMFWli8ZjEMO18dwK8Va77Qhn09DSQPD6MEuuMVdcEu74P2yLiyOwuIkLA6Cz8tacO8cJF6O7efDyKPZpb7ISH2tVt+ezAfq25M561WX7X+o3p/HsR96NPXxXJ/8sv2P1Z9vR778Pc6f29b6bXv46z3aCU6H7fp1t7HNj+P+7erT73+/+Anfw30dPt8278fDBk6Xl3HtN82v7FbFPeM1Wdvw7eeo9xmbgs32tOKDfz7hUP4D",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(pair: (Field, Field), x: [(u8, u8, u8); 2], struct_pair: (Foo, Bar)) -> pub (Field, u8) {\n    let mut start_val = 0;\n    for i in 0..2 {\n        assert(x[i].0 == start_val);\n        assert(x[i].1 == start_val + 1);\n        assert(x[i].2 == start_val + 2);\n        start_val += 3;\n    }\n\n    assert(struct_pair.0.a == 1);\n    assert(struct_pair.0.b == [2, 3, 20]);\n    assert(struct_pair.0.bar.inner == [100, 101, 102]);\n    assert(struct_pair.1.inner == [103, 104, 105]);\n\n    let (u, v) = if pair.0 as u32 < 1 {\n        (pair.0, pair.0 + 1)\n    } else {\n        (pair.0 + 1, pair.0)\n    };\n\n    assert(u == pair.0 + 1);\n    assert(v == pair.0);\n\n    (u, v as u8)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
