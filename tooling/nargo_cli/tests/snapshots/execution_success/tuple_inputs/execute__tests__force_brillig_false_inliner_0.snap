---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "field"
            },
            {
              "kind": "field"
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "struct_pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "struct",
              "path": "Foo",
              "fields": [
                {
                  "name": "a",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "bar",
                  "type": {
                    "kind": "struct",
                    "path": "Bar",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "array",
                          "length": 3,
                          "type": {
                            "kind": "field"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "kind": "struct",
              "path": "Bar",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/+2Zb2/aMBDGL4Su/Fm3tYXCChT6ASbZJCnJu36VsoaPvY+x15tbn2QcB6n4OTSknVQ5xOnD785n57ATerfHv38/qGmJbZ9tq+JMd3BaSpIzdbQy9ZTn9WZd60y/qHW1LQuVF9unUpe6KIvXdZlldZmXm2pbbVSl86zWu6LKdifg7AI46927SXJe4DhrSc5POM5XSc5LHOdPSc4encc86tN5zKMBncc8GsI4a9F59BnGWYlyXuE4Ref7FxznVpLzK47zRZLzG46zkuS8xnGWXavToaahuYFaKoAbq635wo3FyLZjDkhqW9Pxy7tnHlp5UKlgEI8c/LV9yesR4QqGMckMbseLXywn0ue7gM/Harp5dGdzq2s/J9S0RDAuCF/YJpLAk0CCxMJPCDdZp0B/pWI4pfaV/lj9KWEXA7TfY+t3W+581FgXOd7fgTF0Fxeja3agPrK4qDjTyJeDy3svCXwvoDsj2QVBxdmb3zMnwCDdg9sJsXGYnYhTxZlGcv4v233K/bJ9btsFB4RXP9Px27tnHup5UP9g2W5/syk9J9zkWZDM4KLLdqTPD3s+x6m5efRgc+uUZfsc7AvbUhJ4SaHSK055SbjJuiLZtzQihisKrfRxyivCLgZovxctfsfqPgL9dhcEo9unfUMvjATM+xswV5vPKs70LTinQFxvY8+V2Y3jf2JjkNp+c0BrDj/NwWLP5og5bDIHOeaQxBxAmM19s3FuNqWvA7E0+reB+1zIcN4NHIYU5+ua9Ycy+uqSmjZwrodeH/vfDfxf0vK547WHnj30Mr8K9LEmj5HLy370vXbs6AJjqVl/JKMfHKuxcz3y/HTj/QxiYD0u3C+oaR2vj5/150yC59M+Sxr4LjbOmZFzj+P5B62QQv9FJAAA",
  "debug_symbols": "tZXdjoMgEIXfhWsu+Af7KptNYy1tTIgaqptsmr77Djh07YWbDUlv/GTwjGdkkDs5+9NyPfbDZbyRw8ednGIfQn89hrFr534cIHp/UFKGxzl6DyGymQfV1EY/zOQwLCFQ8tWGJT90m9ohc24jzDJK/HAGQsJLH3y6e9BfNduXCiNQLIx5ynWN3vEafdOgXgpRoZeqFC+NrNAr5lCvhKvRq1K/srv1mz/qZ8yUD8j4poJ/G3Aa9VrYPQPujQa04sWAbfYMcPZGB4ZJ1Bte08MbvWA1+mcPGl2lt6ronarQW17826oets8etrpmD1lTWtDa1z38CaO26+PLX48wWGhKOGxZSgR0MCUyR1SO6BwxkIASm/eOy9cmXznL3cz5CrFCrh3GFVIjIQtPr7JIh2xWCobkSIGUSIXUSMwnUr5k3iGblTLlA5My5bPAlA/8SYlUSI00SIt0yGalYkiOzPkeaSVi356Cx0Pksgzd5kyZv6cyU06dKY6dPy/Rp5XIc7A2Pw==",
  "file_map": {
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(pair: (Field, Field), x: [(u8, u8, u8); 2], struct_pair: (Foo, Bar)) -> pub (Field, u8) {\n    let mut start_val = 0;\n    for i in 0..2 {\n        assert(x[i].0 == start_val);\n        assert(x[i].1 == start_val + 1);\n        assert(x[i].2 == start_val + 2);\n        start_val += 3;\n    }\n\n    assert(struct_pair.0.a == 1);\n    assert(struct_pair.0.b == [2, 3, 20]);\n    assert(struct_pair.0.bar.inner == [100, 101, 102]);\n    assert(struct_pair.1.inner == [103, 104, 105]);\n\n    let (u, v) = if pair.0 as u32 < 1 {\n        (pair.0, pair.0 + 1)\n    } else {\n        (pair.0 + 1, pair.0)\n    };\n\n    assert(u == pair.0 + 1);\n    assert(v == pair.0);\n\n    (u, v as u8)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
