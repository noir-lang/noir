---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "field"
            },
            {
              "kind": "field"
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "struct_pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "struct",
              "path": "Foo",
              "fields": [
                {
                  "name": "a",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "bar",
                  "type": {
                    "kind": "struct",
                    "path": "Bar",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "array",
                          "length": 3,
                          "type": {
                            "kind": "field"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "kind": "struct",
              "path": "Bar",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _33",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17]",
    "public parameters indices : []",
    "return value indices : [_18, _19]",
    "EXPR [ (1, _2) 0 ]",
    "EXPR [ (1, _3) -1 ]",
    "EXPR [ (1, _4) -2 ]",
    "EXPR [ (1, _5) -3 ]",
    "EXPR [ (1, _6) -4 ]",
    "EXPR [ (1, _7) -5 ]",
    "EXPR [ (1, _8) -1 ]",
    "EXPR [ (1, _9) -2 ]",
    "EXPR [ (1, _10) -3 ]",
    "EXPR [ (1, _11) -20 ]",
    "EXPR [ (1, _12) -100 ]",
    "EXPR [ (1, _13) -101 ]",
    "EXPR [ (1, _14) -102 ]",
    "EXPR [ (1, _15) -103 ]",
    "EXPR [ (1, _16) -104 ]",
    "EXPR [ (1, _17) -105 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(20)), Simple(Witness(21))]",
    "BLACKBOX::RANGE [(_20, 222)] []",
    "BLACKBOX::RANGE [(_21, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _20) (-1, _21) 0 ]",
    "EXPR [ (-1, _20) (-1, _22) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_22, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(20))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(23))]",
    "EXPR [ (-1, _20, _23) (5096253676302562286669017222071363378443840053029366383258766538131, _23) (1, _24) -1 ]",
    "EXPR [ (-1, _20, _24) (5096253676302562286669017222071363378443840053029366383258766538131, _24) 0 ]",
    "EXPR [ (1, _21, _24) (1, _24, _24) (268435454, _24) (-1, _25) 0 ]",
    "BLACKBOX::RANGE [(_25, 32)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 })], outputs: [Simple(Witness(26))]",
    "EXPR [ (1, _21, _26) (1, _27) -1 ]",
    "EXPR [ (1, _21, _27) 0 ]",
    "EXPR [ (-1, _27) 0 ]",
    "EXPR [ (1, _27) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(28)), Simple(Witness(29))]",
    "BLACKBOX::RANGE [(_28, 246)] []",
    "BLACKBOX::RANGE [(_29, 8)] []",
    "EXPR [ (1, _0) (-256, _28) (-1, _29) 0 ]",
    "EXPR [ (-1, _28) (-1, _30) 85500948718122168836900022442411230814642048439125134155071110103811751936 ]",
    "BLACKBOX::RANGE [(_30, 246)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(28))], q_c: 85500948718122168836900022442411230814642048439125134155071110103811751936 })], outputs: [Simple(Witness(31))]",
    "EXPR [ (-1, _28, _31) (85500948718122168836900022442411230814642048439125134155071110103811751936, _31) (1, _32) -1 ]",
    "EXPR [ (-1, _28, _32) (85500948718122168836900022442411230814642048439125134155071110103811751936, _32) 0 ]",
    "EXPR [ (1, _29, _32) (1, _32, _32) (-1, _33) 0 ]",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "EXPR [ (-1, _0) (1, _18) -1 ]",
    "EXPR [ (1, _19) (-1, _29) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "tZXdjoMgEIXfhWsvYPi1r7LZNLaljQlRQ3WTTdN33xGHrr1ws6HpjZ8OnsmBGeDGTv4wXfZtd+6vbPdxY4fYhtBe9qE/NmPbdxi93SuWP/dj9B5DbDWOqqGJvhvZrptCqNhXE6b003VousSxiTjKK+a7ExITntvg57d79avm21IwQGIw5iHXJXonSvR1TXrJ5Wt6gAK9VHnxpFKv6U2Jf8Ud6RW4Er3K66/s5vq7P9aPc5MLyMVqBv824DTpNdgtA4K/0YFWIjuw9aYDeKMDwyXpjSjZRCs98BL9owmNLtJblfWuZBNYkf3boia2jya2umQTWZN70NrnQ+ATv5pjG5+OXcax0BUT2LwVA5x0xWSKqBTRKWIwWcVs2jwuPev0FHxpZyGIQJRLkwlF1ERMJDCrsERHrBcCJwoiECVRETWR8sGcD6cNjlgvlHM+9CnnfHg2Spi7GimJiqiJhmiJjlgvVJwoiCnffS5GbJtD8HSRnafuuLrXxu8hj+Sbb4j90Z+m6OdipDEszw8=",
  "file_map": {
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(pair: (Field, Field), x: [(u8, u8, u8); 2], struct_pair: (Foo, Bar)) -> pub (Field, u8) {\n    let mut start_val = 0;\n    for i in 0..2 {\n        assert(x[i].0 == start_val);\n        assert(x[i].1 == start_val + 1);\n        assert(x[i].2 == start_val + 2);\n        start_val += 3;\n    }\n\n    assert(struct_pair.0.a == 1);\n    assert(struct_pair.0.b == [2, 3, 20]);\n    assert(struct_pair.0.bar.inner == [100, 101, 102]);\n    assert(struct_pair.1.inner == [103, 104, 105]);\n\n    let (u, v) = if pair.0 as u32 < 1 {\n        (pair.0, pair.0 + 1)\n    } else {\n        (pair.0 + 1, pair.0)\n    };\n\n    assert(u == pair.0 + 1);\n    assert(v == pair.0);\n\n    (u, v as u8)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
