---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "field"
            },
            {
              "kind": "field"
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "tuple",
            "fields": [
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              },
              {
                "kind": "integer",
                "sign": "unsigned",
                "width": 8
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "struct_pair",
        "type": {
          "kind": "tuple",
          "fields": [
            {
              "kind": "struct",
              "path": "Foo",
              "fields": [
                {
                  "name": "a",
                  "type": {
                    "kind": "field"
                  }
                },
                {
                  "name": "b",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                },
                {
                  "name": "bar",
                  "type": {
                    "kind": "struct",
                    "path": "Bar",
                    "fields": [
                      {
                        "name": "inner",
                        "type": {
                          "kind": "array",
                          "length": 3,
                          "type": {
                            "kind": "field"
                          }
                        }
                      }
                    ]
                  }
                }
              ]
            },
            {
              "kind": "struct",
              "path": "Bar",
              "fields": [
                {
                  "name": "inner",
                  "type": {
                    "kind": "array",
                    "length": 3,
                    "type": {
                      "kind": "field"
                    }
                  }
                }
              ]
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfLTuswFEX/JeMM7OM3v4IQKiWgSlFbhfZKV6j/fr3rfUIZcIXcCWuF9Gwn8XEen8Pr9HJ+f97t3w4fw8Pj5/Cy7OZ59/48H7ab0+6wr//9HAz+5DQ82HHIuaFcUUxD3SfjYE3ddKAlhXSkJwMZyURmsjRa5lnmWebZmudBTwYykonMZGkUQ1pSSOYJ84R5wjypeQHMZGl0hrSkkI70ZCAjyTzHPMc8zzzPPM88zzzPPM88X/MimMhMlsZgSEsK6UhPBpJ5gXmBeYF5seYl0JJCOtKTgYxkIjNZGhPzUs3LoJCO9GQgI5nITJbGbEjmZeZl5mXm5ZpXwEgmMpOlEe19pSWFdKQnmVdqnjWQpJJVsGDqUhGsCSsQ/Lh2s6DLrYfUYWyAiIpT8Sp1KBshUSWpZBWMVa+roN+bWBWUZ0hUSSpZpVDQ3k2siqg4Fa+iyU6TnSajzW2BFAoavYlVqcliIE7FqwSVmiy4huj3JlmlUNDygsuLnm8iKk4Fybjy6PsmUSWpIBmTgt6/Cpq/iVURFUdBg16vMzq0SVZBDmYQTdrEqoiKU/EqQSWqaA6aUTDdRX+MNhSMhT5sklRwOpgL9CHE4V7dBDdXA2Ggw+26CZLj5TIO+jx4Pi3ThMfBzQOiPjaOm2Xan4aH/Xmex+HPZj5ff/Rx3OyvPG2WurcOMu1fK2vg226eYJfxq9r8XCq4vNfi2sJrefh9vXda731HvTeZ9V5yT31c65Ppqfey1tuO+iB6/qFOaMf4Oaz1qWf8tNannusXvF3rS0d9NHr+0cb76qVn/mLS/o25p/+i18UTQ8/4yWr/pa7+TdbdV7/2bwqupz5q/6QkPes/6vgS4331uWf9OVNY76Tr+Mt99S5o/7jYc/2dv7N+7X+Xe/qnvlHpDaC+U93MwO8DStQZNLe3wF/PgDFfAdb1BOA9QI8g3HsEP52ClP+sorSu4vyt/qlubLa75dt33wVBy27zMk/cfDvvtzd7T3+Puke/G4/LYTu9npcJSV8fj/WF4jGZMZsnfN3VjboKR0kWm/X149GZNNYl8nTBofwD",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(pair: (Field, Field), x: [(u8, u8, u8); 2], struct_pair: (Foo, Bar)) -> pub (Field, u8) {\n    let mut start_val = 0;\n    for i in 0..2 {\n        assert(x[i].0 == start_val);\n        assert(x[i].1 == start_val + 1);\n        assert(x[i].2 == start_val + 2);\n        start_val += 3;\n    }\n\n    assert(struct_pair.0.a == 1);\n    assert(struct_pair.0.b == [2, 3, 20]);\n    assert(struct_pair.0.bar.inner == [100, 101, 102]);\n    assert(struct_pair.1.inner == [103, 104, 105]);\n\n    let (u, v) = if pair.0 as u32 < 1 {\n        (pair.0, pair.0 + 1)\n    } else {\n        (pair.0 + 1, pair.0)\n    };\n\n    assert(u == pair.0 + 1);\n    assert(v == pair.0);\n\n    (u, v as u8)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
