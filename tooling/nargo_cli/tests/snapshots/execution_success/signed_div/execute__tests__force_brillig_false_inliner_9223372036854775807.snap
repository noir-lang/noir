---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "ops",
        "type": {
          "kind": "array",
          "length": 15,
          "type": {
            "kind": "struct",
            "path": "SignedDivOp",
            "fields": [
              {
                "name": "lhs",
                "type": {
                  "kind": "integer",
                  "sign": "signed",
                  "width": 8
                }
              },
              {
                "name": "rhs",
                "type": {
                  "kind": "integer",
                  "sign": "signed",
                  "width": 8
                }
              },
              {
                "name": "result",
                "type": {
                  "kind": "integer",
                  "sign": "signed",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _139",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "BLACKBOX::RANGE [(_9, 8)] []",
    "BLACKBOX::RANGE [(_10, 8)] []",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "BLACKBOX::RANGE [(_16, 8)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "BLACKBOX::RANGE [(_18, 8)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "BLACKBOX::RANGE [(_20, 8)] []",
    "BLACKBOX::RANGE [(_21, 8)] []",
    "BLACKBOX::RANGE [(_22, 8)] []",
    "BLACKBOX::RANGE [(_23, 8)] []",
    "BLACKBOX::RANGE [(_24, 8)] []",
    "BLACKBOX::RANGE [(_25, 8)] []",
    "BLACKBOX::RANGE [(_26, 8)] []",
    "BLACKBOX::RANGE [(_27, 8)] []",
    "BLACKBOX::RANGE [(_28, 8)] []",
    "BLACKBOX::RANGE [(_29, 8)] []",
    "BLACKBOX::RANGE [(_30, 8)] []",
    "BLACKBOX::RANGE [(_31, 8)] []",
    "BLACKBOX::RANGE [(_32, 8)] []",
    "BLACKBOX::RANGE [(_33, 8)] []",
    "BLACKBOX::RANGE [(_34, 8)] []",
    "BLACKBOX::RANGE [(_35, 8)] []",
    "BLACKBOX::RANGE [(_36, 8)] []",
    "BLACKBOX::RANGE [(_37, 8)] []",
    "BLACKBOX::RANGE [(_38, 8)] []",
    "BLACKBOX::RANGE [(_39, 8)] []",
    "BLACKBOX::RANGE [(_40, 8)] []",
    "BLACKBOX::RANGE [(_41, 8)] []",
    "BLACKBOX::RANGE [(_42, 8)] []",
    "BLACKBOX::RANGE [(_43, 8)] []",
    "BLACKBOX::RANGE [(_44, 8)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(45)), Simple(Witness(46))]",
    "BLACKBOX::RANGE [(_45, 1)] []",
    "BLACKBOX::RANGE [(_46, 7)] []",
    "EXPR [ (1, _1) (-128, _45) (-1, _46) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(47)), Simple(Witness(48))]",
    "BLACKBOX::RANGE [(_47, 1)] []",
    "BLACKBOX::RANGE [(_48, 7)] []",
    "EXPR [ (1, _0) (-128, _47) (-1, _48) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(1), Witness(45))], linear_combinations: [(1, Witness(1)), (256, Witness(45))], q_c: 0 })], outputs: [Simple(Witness(49))]",
    "EXPR [ (-2, _1, _45) (1, _1) (256, _45) (-1, _50) 0 ]",
    "EXPR [ (1, _49, _50) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(0), Witness(47))], linear_combinations: [(1, Witness(0)), (256, Witness(47))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(50))], q_c: 0 })], outputs: [Simple(Witness(51)), Simple(Witness(52))]",
    "BLACKBOX::RANGE [(_51, 8)] []",
    "BLACKBOX::RANGE [(_52, 8)] []",
    "EXPR [ (1, _50) (-1, _52) (-1, _53) -1 ]",
    "BLACKBOX::RANGE [(_53, 8)] []",
    "EXPR [ (-2, _0, _47) (-1, _50, _51) (1, _0) (256, _47) (-1, _52) 0 ]",
    "EXPR [ (-1, _51) (-1, _54) 128 ]",
    "EXPR [ (-2, _45, _47) (1, _45) (1, _47) (-1, _55) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(51))], q_c: 0 })], outputs: [Simple(Witness(56))]",
    "EXPR [ (1, _51, _56) (1, _57) -1 ]",
    "EXPR [ (1, _51, _57) 0 ]",
    "EXPR [ (2, _54, _55) (1, _51) (-1, _58) 0 ]",
    "EXPR [ (-1, _57) (-1, _59) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(52))], q_c: 0 })], outputs: [Simple(Witness(60))]",
    "EXPR [ (1, _52, _60) (1, _61) -1 ]",
    "EXPR [ (1, _52, _61) 0 ]",
    "EXPR [ (-2, _47, _52) (256, _47) (1, _52) (-1, _62) 0 ]",
    "EXPR [ (-1, _61) (-1, _63) 1 ]",
    "EXPR [ (1, _58, _59) (-1, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(64)), Simple(Witness(65))]",
    "BLACKBOX::RANGE [(_64, 1)] []",
    "BLACKBOX::RANGE [(_65, 7)] []",
    "EXPR [ (1, _4) (-128, _64) (-1, _65) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(66)), Simple(Witness(67))]",
    "BLACKBOX::RANGE [(_66, 1)] []",
    "BLACKBOX::RANGE [(_67, 7)] []",
    "EXPR [ (1, _3) (-128, _66) (-1, _67) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(4), Witness(64))], linear_combinations: [(1, Witness(4)), (256, Witness(64))], q_c: 0 })], outputs: [Simple(Witness(68))]",
    "EXPR [ (-2, _4, _64) (1, _4) (256, _64) (-1, _69) 0 ]",
    "EXPR [ (1, _68, _69) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(3), Witness(66))], linear_combinations: [(1, Witness(3)), (256, Witness(66))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(69))], q_c: 0 })], outputs: [Simple(Witness(70)), Simple(Witness(71))]",
    "BLACKBOX::RANGE [(_70, 8)] []",
    "BLACKBOX::RANGE [(_71, 8)] []",
    "EXPR [ (1, _69) (-1, _71) (-1, _72) -1 ]",
    "BLACKBOX::RANGE [(_72, 8)] []",
    "EXPR [ (-2, _3, _66) (-1, _69, _70) (1, _3) (256, _66) (-1, _71) 0 ]",
    "EXPR [ (-1, _70) (-1, _73) 128 ]",
    "EXPR [ (-2, _64, _66) (1, _64) (1, _66) (-1, _74) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(70))], q_c: 0 })], outputs: [Simple(Witness(75))]",
    "EXPR [ (1, _70, _75) (1, _76) -1 ]",
    "EXPR [ (1, _70, _76) 0 ]",
    "EXPR [ (2, _73, _74) (1, _70) (-1, _77) 0 ]",
    "EXPR [ (-1, _76) (-1, _78) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(71))], q_c: 0 })], outputs: [Simple(Witness(79))]",
    "EXPR [ (1, _71, _79) (1, _80) -1 ]",
    "EXPR [ (1, _71, _80) 0 ]",
    "EXPR [ (-2, _66, _71) (256, _66) (1, _71) (-1, _81) 0 ]",
    "EXPR [ (-1, _80) (-1, _82) 1 ]",
    "EXPR [ (1, _77, _78) (-1, _5) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(83)), Simple(Witness(84))]",
    "BLACKBOX::RANGE [(_83, 1)] []",
    "BLACKBOX::RANGE [(_84, 7)] []",
    "EXPR [ (1, _7) (-128, _83) (-1, _84) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(85)), Simple(Witness(86))]",
    "BLACKBOX::RANGE [(_85, 1)] []",
    "BLACKBOX::RANGE [(_86, 7)] []",
    "EXPR [ (1, _6) (-128, _85) (-1, _86) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(7), Witness(83))], linear_combinations: [(1, Witness(7)), (256, Witness(83))], q_c: 0 })], outputs: [Simple(Witness(87))]",
    "EXPR [ (-2, _7, _83) (1, _7) (256, _83) (-1, _88) 0 ]",
    "EXPR [ (1, _87, _88) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(6), Witness(85))], linear_combinations: [(1, Witness(6)), (256, Witness(85))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(88))], q_c: 0 })], outputs: [Simple(Witness(89)), Simple(Witness(90))]",
    "BLACKBOX::RANGE [(_89, 8)] []",
    "BLACKBOX::RANGE [(_90, 8)] []",
    "EXPR [ (1, _88) (-1, _90) (-1, _91) -1 ]",
    "BLACKBOX::RANGE [(_91, 8)] []",
    "EXPR [ (-2, _6, _85) (-1, _88, _89) (1, _6) (256, _85) (-1, _90) 0 ]",
    "EXPR [ (-1, _89) (-1, _92) 128 ]",
    "EXPR [ (-2, _83, _85) (1, _83) (1, _85) (-1, _93) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(89))], q_c: 0 })], outputs: [Simple(Witness(94))]",
    "EXPR [ (1, _89, _94) (1, _95) -1 ]",
    "EXPR [ (1, _89, _95) 0 ]",
    "EXPR [ (2, _92, _93) (1, _89) (-1, _96) 0 ]",
    "EXPR [ (-1, _95) (-1, _97) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(90))], q_c: 0 })], outputs: [Simple(Witness(98))]",
    "EXPR [ (1, _90, _98) (1, _99) -1 ]",
    "EXPR [ (1, _90, _99) 0 ]",
    "EXPR [ (-2, _85, _90) (256, _85) (1, _90) (-1, _100) 0 ]",
    "EXPR [ (-1, _99) (-1, _101) 1 ]",
    "EXPR [ (1, _96, _97) (-1, _8) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(102)), Simple(Witness(103))]",
    "BLACKBOX::RANGE [(_102, 1)] []",
    "BLACKBOX::RANGE [(_103, 7)] []",
    "EXPR [ (1, _10) (-128, _102) (-1, _103) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(104)), Simple(Witness(105))]",
    "BLACKBOX::RANGE [(_104, 1)] []",
    "BLACKBOX::RANGE [(_105, 7)] []",
    "EXPR [ (1, _9) (-128, _104) (-1, _105) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(10), Witness(102))], linear_combinations: [(1, Witness(10)), (256, Witness(102))], q_c: 0 })], outputs: [Simple(Witness(106))]",
    "EXPR [ (-2, _10, _102) (1, _10) (256, _102) (-1, _107) 0 ]",
    "EXPR [ (1, _106, _107) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(9), Witness(104))], linear_combinations: [(1, Witness(9)), (256, Witness(104))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(107))], q_c: 0 })], outputs: [Simple(Witness(108)), Simple(Witness(109))]",
    "BLACKBOX::RANGE [(_108, 8)] []",
    "BLACKBOX::RANGE [(_109, 8)] []",
    "EXPR [ (1, _107) (-1, _109) (-1, _110) -1 ]",
    "BLACKBOX::RANGE [(_110, 8)] []",
    "EXPR [ (-2, _9, _104) (-1, _107, _108) (1, _9) (256, _104) (-1, _109) 0 ]",
    "EXPR [ (-1, _108) (-1, _111) 128 ]",
    "EXPR [ (-2, _102, _104) (1, _102) (1, _104) (-1, _112) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(108))], q_c: 0 })], outputs: [Simple(Witness(113))]",
    "EXPR [ (1, _108, _113) (1, _114) -1 ]",
    "EXPR [ (1, _108, _114) 0 ]",
    "EXPR [ (2, _111, _112) (1, _108) (-1, _115) 0 ]",
    "EXPR [ (-1, _114) (-1, _116) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(109))], q_c: 0 })], outputs: [Simple(Witness(117))]",
    "EXPR [ (1, _109, _117) (1, _118) -1 ]",
    "EXPR [ (1, _109, _118) 0 ]",
    "EXPR [ (-2, _104, _109) (256, _104) (1, _109) (-1, _119) 0 ]",
    "EXPR [ (-1, _118) (-1, _120) 1 ]",
    "EXPR [ (1, _115, _116) (-1, _11) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(121)), Simple(Witness(122))]",
    "BLACKBOX::RANGE [(_121, 1)] []",
    "BLACKBOX::RANGE [(_122, 7)] []",
    "EXPR [ (1, _13) (-128, _121) (-1, _122) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(123)), Simple(Witness(124))]",
    "BLACKBOX::RANGE [(_123, 1)] []",
    "BLACKBOX::RANGE [(_124, 7)] []",
    "EXPR [ (1, _12) (-128, _123) (-1, _124) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(13), Witness(121))], linear_combinations: [(1, Witness(13)), (256, Witness(121))], q_c: 0 })], outputs: [Simple(Witness(125))]",
    "EXPR [ (-2, _13, _121) (1, _13) (256, _121) (-1, _126) 0 ]",
    "EXPR [ (1, _125, _126) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(12), Witness(123))], linear_combinations: [(1, Witness(12)), (256, Witness(123))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(126))], q_c: 0 })], outputs: [Simple(Witness(127)), Simple(Witness(128))]",
    "BLACKBOX::RANGE [(_127, 8)] []",
    "BLACKBOX::RANGE [(_128, 8)] []",
    "EXPR [ (1, _126) (-1, _128) (-1, _129) -1 ]",
    "BLACKBOX::RANGE [(_129, 8)] []",
    "EXPR [ (-2, _12, _123) (-1, _126, _127) (1, _12) (256, _123) (-1, _128) 0 ]",
    "EXPR [ (-1, _127) (-1, _130) 128 ]",
    "EXPR [ (-2, _121, _123) (1, _121) (1, _123) (-1, _131) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(127))], q_c: 0 })], outputs: [Simple(Witness(132))]",
    "EXPR [ (1, _127, _132) (1, _133) -1 ]",
    "EXPR [ (1, _127, _133) 0 ]",
    "EXPR [ (2, _130, _131) (1, _127) (-1, _134) 0 ]",
    "EXPR [ (-1, _133) (-1, _135) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(128))], q_c: 0 })], outputs: [Simple(Witness(136))]",
    "EXPR [ (1, _128, _136) (1, _137) -1 ]",
    "EXPR [ (1, _128, _137) 0 ]",
    "EXPR [ (-2, _123, _128) (256, _123) (1, _128) (-1, _138) 0 ]",
    "EXPR [ (-1, _137) (-1, _139) 1 ]",
    "EXPR [ (1, _134, _135) (-1, _14) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pdXBbptAFIXhd2HtBWcGZoa8SlVF2MYREsIWsSNVVt692Od3kywqVenqBpP7GeRz4Frth+3l5XmcD8fX6unHtdou4zSNL8/Tcdefx+O8fnp931SPw+fzMgzrR9Wn8+vWqV+G+Vw9zZdp2lRv/XS5/9PrqZ/v89wv69l6Uw3zfp0reBin4fbX++Zju/77qmLHspr2z3r77/tteOy35Tv7H9+fwnf2U/PYz/X/fX/OX/Z/rkf9bly+/GJV01ZPcVM1ySN7FI/uPtraQx7BI3o0HlZaK62V1kprJVlJVpKVZCVZSVaSlWQlWUlWspVsJVvJVvKqtOuwkq1kK9lKtlKsFCvFSrFSfC3FSrFSrBQrxUpnpbPSWemsdFY6K52VzkpnpbOiumaKGZiR6dtS3XKcmJlZmHjCE57whKeGiSc84QlPeAEv4AW8gBfwAl7AC3gBL+BFvIgX8SJe5H4jXsSLeBEv4jV4DV6D1+A1XB9JF1EXWRdhF2kXcRd5F4EXiReRF5kXoRepF7EXuRfBF8kX0RfZV+J+Sb+Iv8i/KIBogKiA6IAogWiBMtdHD0QRRBNEFUQXRBlEG0QdRB9EIUQjRCVEJ0QpRCtELUQvRDFEM3Srxu3J/NYvY7+dBl4ch8u8+/QeOf86Pc483jSn5bgb9pdluD3B7ufWZ9pv",
  "file_map": {
    "50": {
      "source": "struct SignedDivOp {\n    lhs: i8,\n    rhs: i8,\n    result: i8,\n}\n\nfn main(ops: [SignedDivOp; 15]) {\n    for i in 0..15 {\n        assert_eq(ops[i].lhs / ops[i].rhs, ops[i].result);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
