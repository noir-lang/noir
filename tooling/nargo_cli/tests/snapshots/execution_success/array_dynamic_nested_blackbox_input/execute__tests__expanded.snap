---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
struct Bar {
    inner: [u8; 3],
}

struct Foo {
    a: Field,
    b: [Field; 3],
    bar: Bar,
}

fn main(mut x: [Foo; 3], y: pub u32, hash_result: pub [u8; 32]) {
    {
<<<<<<< HEAD
        let i_4235: u32 = y - 1_u32;
        x[i_4235].bar.inner = [106_u8, 107_u8, 10_u8];
    };
    let mut hash_input: [u8; 3] = x[y - 1_u32].bar.inner;
    {
        let i_4237: u32 = y - 1_u32;
        hash_input[i_4237] = 0_u8;
=======
        let i_3949: u32 = y - 1_u32;
        x[i_3949].bar.inner = [106_u8, 107_u8, 10_u8];
    };
    let mut hash_input: [u8; 3] = x[y - 1_u32].bar.inner;
    {
        let i_3951: u32 = y - 1_u32;
        hash_input[i_3951] = 0_u8;
>>>>>>> 5b65f9637e85a4177692c3190cb35ea678fb15e9
    };
    let hash: [u8; 32] = std::hash::blake3(hash_input);
    assert(hash == hash_result);
}
