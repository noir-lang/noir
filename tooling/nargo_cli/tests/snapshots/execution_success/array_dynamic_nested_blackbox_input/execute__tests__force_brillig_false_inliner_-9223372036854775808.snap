---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "hash_result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1d+XfTRhDeOGmBBChtyn053De7kmXLXE0LLS0tpaW0hbQpxInNEe77vvuftf9XZ5oVCHnCL/qWxzy8782T/Clef9/OzGqklZ0+M9Nekv3t9/vI+v12gGxuAftIwD4WsCEBmy9gCwTsMwEbFrDPPdbvuS82rxsfr/hjA54385zj3zOPbNDznO95LCT7hGwR2aeex7D/nOLYLBH4LBWwZQK2XMBWCNhKAVslYKsFbI2ArRWwqoCNCNg6AVsvYBsEbKOAbRKwzQK2RcC2Ctg2AdsuYDsEbKeA7RKw3QJmBcwJWCRgsYDVBCzxGMcxt4rpbn1+O+q3tlxziwF9dWbapEC3bN8u28mPRd1vG6YwgAxUCwT6Aw5YbOu1WrsRtV3sJmzUbKWJrSWteupSl6TJVJTGcTutpY1mq9mwTVeL266TNKOO76tevq/Y92UbgRxZDLiyPOs4X9h3mCgxLlHaqUA3SKJkH9TMBiRLFAaqBQLgRImRiZIaXAA2AzkSnSgpzhc2JM89SnjuxfF0IXnuw/GsheS5H8ezEZLnARzPoPn+BY5nKyTPURzPdkieX+J4dkLy/ArG00UheR7E8Uy41uBCZdD3x+cQnp957uN5hXM2ywf2I4/RQdPdKgWNtlxD1CyvxusQsK+KkYtckG47W8zYcs0dUsDx6wAcRaJlg+AbGNH6hBRMyEHV5Cw0R5yfCgEFnu3eGMyywXk4QPBIzinL81sYz3pLaxIBfRUsiXB+CpxEh4HB+Z3RkURHcDzVnomAvgqWREeQHLXWoHsUcPy+5yjr9irg+EMAjiLRslP0URzRSGtAHVXA8UejJKCO4YjGWgPqmAKOP5neqcTtU8DxZ6Mk84/jiCZaA+q4Ao6/GCUBdQJHtK41oE4o4Pir6Z1K3H4FHH/rOcq6Awo4/h6Ao0i07BR9Eke0qTWgTirgeArJkVfl2bJVeb4rxTc8+BqVLyu4YuUig88LPOVwNJ8y3e19XpUfA/ZVMa+fmsw3kO5gQTOmgOMfBnxKMwodBR2EQBz/DMDx/4ZeqMsPZtnMHwfy0hqc4wo4/mWUBOc4MDhP94LTnVbA8YwB1278dZisHuFpmaP/jOlu6OBF1mcTBlufDZhgwRvs0YIJ8/4HL3RVPbCjPuhHC1o9R+l4tGCy5ygdS/ZTSI5Mjn+zoD9HllM2+274ZG5/yu/z12b4Kylnyc6RnSe7QDZNdpHsEtllsitkV8mukV0nu0F2k+wW2W2yO2R3ye6R3Sd7QPaQ7BHZY7InZE/JnpE9J3thZn5DIt+KtUTZc/YSoKPaBh9MITQvBWruKNG8DKj5rBLNy4GazynRvAKo+bwSzSuBmi8o0bwKqHlaiebVQM0XlWheA9R8SYnmtUDNl5VorgI1X1GieQSo+aoSzeuAmq8p0bweqPm6Es0bgJpvKNG8Eaj5phLNm4CabynRvBmo+bYSzVuAmu8o0bwVqPmuEs3bgJrvKdG8Haj5vhLNO4CaHyjRvBOo+aESzbuAmh8p0bwbqPmxEs0WqPmJEs0OqPmpEs0RUPMzJZpjoObnSjTXgJpfKNGcADW/BGrmtfDs4YaQ/wtgJPcZvC7N67S8bsnreLyuxes8vO7B6wB8X5zvE1f9+/i+Gt9n4vsufB+Cr8v5OpWv2/g6hut6rnO57uM6iOsCPk+yQ3ke5XmF84zjLhF8bPz7ZrBFC8f+mf43d8i4WY5lD0PM9dt5fjuYO87jN+pf23ItyvofCtO/nWO622Buf6hwLBs/6eGYvlleVwrbt/1tEc9jC4RjWZ/Dfpvnm+n4DxYlckrAYwAA",
  "debug_symbols": "ldjBisIwEIDhd8nZQzNJphNfZVmkapVCaaXWhUV8961iF9Fe/lsnw5/LBz3k6vb19nLcNN2hP7v119W1/a4am76bpquL8jg7n6ruPp7HahjdWkJYubrb37/stnKHpq3dOhW375WLARcRFwkXulz4/yK/FyUuDBeZFqnAhceF4CLgIuIi4QKbJ2yesHnC5orNFZsrNldsrthcsblic8Xmis0Vm5fYvFw2z/M/MRT+vRBcBFxEXCRcKC5KXBguMi2swAU2N2xu2NywuWFzw+aGzQ2bGzbP2Dxj84zNMzbPi+Yx6bOIZXgvEi4UF4vmMcdnkeSjMFxkWvii4Mmiegp5TpJ+JMKTwJPIk8QT5UnJE+NJxokveML1Pdf3XN9zfc/1Pdf3XN9zfc/1hesL1xeuL1xfuL5wfeH6wvWF6wvXD1w/cP0A9adhOzRt2xw3r48/0/FPNTTVtq2f4+HS7V624+9p3sz9aeh39f4y1PebHrvp+j8=",
  "file_map": {
    "50": {
      "source": "struct Bar {\n    inner: [u8; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(mut x: [Foo; 3], y: pub Field, hash_result: pub [u8; 32]) {\n    // Simple dynamic array set for entire inner most array\n    x[y - 1].bar.inner = [106, 107, 10];\n    let mut hash_input = x[y - 1].bar.inner;\n    // Make sure that we are passing a dynamic array to the black box function call\n    // by setting the array using a dynamic index here\n    hash_input[y - 1] = 0;\n    let hash = std::hash::blake3(hash_input);\n    assert_eq(hash, hash_result);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
