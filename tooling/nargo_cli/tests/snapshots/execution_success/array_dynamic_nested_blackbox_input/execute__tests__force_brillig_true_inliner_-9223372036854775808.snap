---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "hash_result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pdXNbqMwFAXgd/Gaha//nVepoogkpEJCJKIw0iji3edeOE4yi1Yt3eSzMffgYDB3dW6O0/uh7S/XD7V7u6vj0HZd+37orqd6bK89H70rLT+Ug9pRxUaYYF40WkOCBlq1M6KDXu2sGGCECeZV0pCggRY6iDxCHiGPkEd5va7RkKCBmJ/B/IyHAXKeExPMq1ZDggZa6KCHASLPIs8iz3GeFwkaaKGDHgYYIecFMa96DQkaaKGDHnJeFCNMMK8GDQkaaKGDHq55VlvooIc8nsQIE8yrsv6LBA20EOfLemYRx2UdSUvDl0YoDXl0SRqpNDIasppkpYE4Wc5Fjs3zXKnyShzGoWnkjXh5R/jNudVD049q109dV6k/dTctJ33c6n5xrAce5Vk0/ZnlwEvbNdKaq2e1/ryUHywU86PzKPc/qKdHfd5SHx7XD35LfS71VtOGeucD6l20W+qzQ703W+q9zaXehw31vHGWBeC98+UOfD8glzvAm2v4eQBv0c8AslsCKD5n4H87g8/+ApkvbgJ/R8pd5K3+NWHPnfrUDv99vGaJGtr62DXoXqb+9DI6/r2VkfLxuw3XU3OehkaSnl9A/nkzMVYmpz1vDNyjRBVl4h4tgyFVJlrpknRzrvhR388ytX8=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [u8; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(mut x: [Foo; 3], y: pub Field, hash_result: pub [u8; 32]) {\n    // Simple dynamic array set for entire inner most array\n    x[y - 1].bar.inner = [106, 107, 10];\n    let mut hash_input = x[y - 1].bar.inner;\n    // Make sure that we are passing a dynamic array to the black box function call\n    // by setting the array using a dynamic index here\n    hash_input[y - 1] = 0;\n    let hash = std::hash::blake3(hash_input);\n    assert_eq(hash, hash_result);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
