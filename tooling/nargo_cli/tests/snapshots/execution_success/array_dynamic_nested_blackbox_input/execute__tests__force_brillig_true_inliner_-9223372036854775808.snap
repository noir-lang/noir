---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "hash_result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndjZiuJAFIDhd8l1LqrOqdVXGYbGJTYBUXEZGMR3n4pjWknSNH9uxBK+bH8Ki7pVm2Z1/fxo99vDuVr8ulW7w3p5aQ/7Mrrd62p1ane79vPj/efKdB9i3AOcj8t9Nz5flqdLtRDVumr2m+5bKgfYtrumWnhz/10X4jkJnEROEicZE2s4sdPEfpE8IsKJcuI4ma4fvm4/+BEJnEROEicZEzGcWE6EE+XEccLrC68vvL7w+pLxy6+GEz73lc995XNf+dxXz0ngZLp+7lOqsSOSOMmYOMOJ5UQ4UU4cJ56TwAmv7ybrOx+exEUdkYyJN5xYToQT5cRx4jmZrO+yexIvYxI5SZxkTILhxHIinCgnjhPPCa8feP3A6wdeP/L6kdePk/W95p74MCLKiePEcxI4iZwkTjImyXBiOeH1E6+feP3E6ydeP/H6iddPvH7G9VUiJ4kTfC86vea3OfbLcZvT2/Lqv4nTJvf//GIkDE3m5/lmdW3M6zxWh8bOMDLDTC+wjY2vZ+CHxs0wfoYJP9/Pe5963KXsAvZdys7L8Pgz+k+vyH8wGZp7GfxZntrlatc8Nzq31/36bd/z8vfYDLZAj6fDutlcT023GfraB+3ePS1PQcV311JGNtnaZltGjw0/yVJLjt3QPoapVmPKNZTr+Ac=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [u8; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(mut x: [Foo; 3], y: pub Field, hash_result: pub [u8; 32]) {\n    // Simple dynamic array set for entire inner most array\n    x[y - 1].bar.inner = [106, 107, 10];\n    let mut hash_input = x[y - 1].bar.inner;\n    // Make sure that we are passing a dynamic array to the black box function call\n    // by setting the array using a dynamic index here\n    hash_input[y - 1] = 0;\n    let hash = std::hash::blake3(hash_input);\n    assert_eq(hash, hash_result);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
