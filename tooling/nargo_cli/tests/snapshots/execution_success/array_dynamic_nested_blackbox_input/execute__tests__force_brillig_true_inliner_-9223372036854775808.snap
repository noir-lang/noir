---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "hash_result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pdXNbqMwFAXgd2HNwtf/zqtUUUQSp0JCJKIw0iji3edeOE4yi1Yt3eSzMfdAbDD36pyP0/uh7S/Xj2r3dq+OQ9t17fuhu56asb32fPReKfmh5Ksd1WyAsdppMS1qpSBBDQ200EEPA4wQeYQ8Qh4hj5BHyCPkEfKI84wYYVrVChLU0EALHfQQeRp5mvMsaxQkqKGBFjroYYARIs9ynhMJamighQ56GCDneTGtOgUJamighQ5yXhADjDCtegUJamighQ6ueUYZaKGDPB7FACNMq7L+iwQ1NBDny3omEcdlHUlJw5WGLw15dEkasTQSGrKaZKSBOFnORY5N81xX5ZU4jEPO8ka8vCP85tyaIfdjteunrqurP003LSd93Jp+cWwGHuW7yP2Z5cBL22VpzfWzWn1eyg8WivnReZS779f7R713W+oNPa6fttSncn2jaEO9dR71Npgt9cmi3ukt9c6kUu/8hnreOMsE8t75MgPfD0hlBnhz9T8P4C36GUBmSwCF5x24397BZ3+B9BeTwN+RMou81b8m7LnTnNrhv4/XLFFD2xy7jO5l6k8vo+PfWxkpH7/bcD3l8zRkSXp+AfnnTYdQ6xT3vDFwjyLVlIh7tAz6WOtgpEvSTanmR30/y639Aw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [u8; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(mut x: [Foo; 3], y: pub Field, hash_result: pub [u8; 32]) {\n    // Simple dynamic array set for entire inner most array\n    x[y - 1].bar.inner = [106, 107, 10];\n    let mut hash_input = x[y - 1].bar.inner;\n    // Make sure that we are passing a dynamic array to the black box function call\n    // by setting the array using a dynamic index here\n    hash_input[y - 1] = 0;\n    let hash = std::hash::blake3(hash_input);\n    assert_eq(hash, hash_result);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
