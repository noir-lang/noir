---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "hash_result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pdXfjqowEAbwd+Gai06nf32VjTGouCEhaFg9yYnh3c8MfFXPxW522Rt/LWU+sIVyr47t/va+64bT+aPavN2r/dj1ffe+68+H5tqdBzl6r4z+UA7VhmoxwlRtrJpnrTGQoIUMHfQwwAgTRB4hj5BHyCPkEfIIeYQ8kjxWE8yL1kCCFjJ00MMAJc+pCeZFNpCghQwd9DBA5DHyGHlO8rxK0EKGDnoYYISSF9S86A0kaCFDBz2UvKhGmGBeDAYStJChgx4ueWwYOuihjCc1wgTzoq7/LEELGeJ8Xc+s4riuIxlt+NIIpaGPLmkjlUZGQ1eTWBuI0+Wcldg8TXVVXonddWxbfSNe3hF5cy7N2A7XajPc+r6u/jT9bT7p49IMs9dmlFG5i3Y4ihJ46vpWW1P9rDafl8qDhWJ5dB7l/vv14VEf/Jp6psf185r6XK7PhlbUOx9Q7yKvqc8O9d6uqfecS70PK+pl4ywTKHvnywx8PyCXGZDNNfw8QLboZwDxmgCKzzvwv72Dz/4C2S8mQb4jZRZlq39N2EqnOXTjfx+vSaPGrtn3Lbqn23B4Gb3+vZSR8vG7jOdDe7yNrSY9v4Dy82ZjrG1OW9kYpEeJasokPZoHQ6ptZO2SdnOu5VHfTnpr/wA=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [u8; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(mut x: [Foo; 3], y: pub Field, hash_result: pub [u8; 32]) {\n    // Simple dynamic array set for entire inner most array\n    x[y - 1].bar.inner = [106, 107, 10];\n    let mut hash_input = x[y - 1].bar.inner;\n    // Make sure that we are passing a dynamic array to the black box function call\n    // by setting the array using a dynamic index here\n    hash_input[y - 1] = 0;\n    let hash = std::hash::blake3(hash_input);\n    assert_eq(hash, hash_result);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
