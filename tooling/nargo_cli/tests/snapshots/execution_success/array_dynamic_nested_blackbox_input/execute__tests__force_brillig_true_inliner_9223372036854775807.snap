---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "hash_result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdjfiuIwFAbwd+l1L3LOyb/jqyzLULUOhVKl6sIivvumxY5d24v5cHIzTMTfR+iXRM2t2Nfb6+dH0x2O52Lz61a0x111aY5dGt3uZbHtm7ZtPj/mLxdm+MOGR3A+Vd0wPl+q/lJsWKQs6m4//BdTwKFp62LjzP13mYjgxOLE4cTjJOAk4kRhQmad0BfRBSGcME4EJxYn6+37ryfm3YJ4nAScRJwoTNjghHDCOBGcWJzg7TPePuPtM94+K7z4Bd/7gu99wfe+4Htf8L0vDiceJ+vt61SlGFqQiBOFiTU4IZwwTgQnFicOJx4nePt2tX3r/IPYIAuiMHEGJ4QTxongxOLE4WS1fav2QRwvScBJxInCxBucEE4YJ4ITixOHE7x9j7fv8fY93n7A2w94+2G1fSc6EefnpPz+W8d0yZpus6brm+mkYfrGQRpnnyBjfOS343U6B9Pvdv8ajz35kVicOJx4nAScRJwoTNTghHDCOMHbV5d1uat/M56NeS53ktf4kDc+5o3Xt+MpPM8C93+8GJM3nvLG848++/lBubKI0+XktIjThdDrVCTnmS3G5o13+eLvafCn6ptq29aPa+bDtdvNbp0vf0/1ywX0qT/u6v21r4er6Oct9LBahU0ploZppxFFKkmH0XgRKiaWQjIMh6UnZNPQpzmkefwD",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [u8; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(mut x: [Foo; 3], y: pub Field, hash_result: pub [u8; 32]) {\n    // Simple dynamic array set for entire inner most array\n    x[y - 1].bar.inner = [106, 107, 10];\n    let mut hash_input = x[y - 1].bar.inner;\n    // Make sure that we are passing a dynamic array to the black box function call\n    // by setting the array using a dynamic index here\n    hash_input[y - 1] = 0;\n    let hash = std::hash::blake3(hash_input);\n    assert_eq(hash, hash_result);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
