---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "integer",
                          "sign": "unsigned",
                          "width": 8
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "hash_result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdVNjuIwEAXgu2SdhcvlX66CEAoQWpGigNIw0gjl7lNFnoFZMOpJqzd8NnG9BMfYt+rQ7q4f2244nj6r1fpW7cau77uPbX/aN5fuNMi3t8roB2VXragWPQwwwgTzXWsMJGghQwc9DDBCybNqniUDCVrI0EEPJY/VCBPMs9ZAghYydNBD5FnJc2qCeZYNJGghQwc9DBB5jDxGnpM8rxK0kKGDHgYYoeQFNc96AwlayNBBDyUvqREmKHlZDAYStJChgx6G2YjxUd+/0YYMiGqAEeJGSReSrohEpWFLQ9eSvuzkSsOXhi4nnccUcZ+USkNXqJmmuirLfHsZ21ZX+cu6l3/DuRnb4VKthmvf19Wvpr/eB32em+HupRnlqkS2w0GUwGPXt9qa6me1eV8qk4VimaZHuf96PT/qOS2qp0d9XlKfy/3Z0IJ65wPqXeQl9dmh3tsl9Z5zqffhXX38uXrZPMsLkP3zZQa/HpDLDMoGG/4/QLbpZwDxkgCKzyfw332Cdz+B+B+TIGdJmUXZ7l8TNtJp9t3414E2adTYNbu+Rfd4HfYvVy+/z+VKORDP42nfHq5jq0nPU1E+1rL0a7Z2U1eyG60pUU2ZpKcH1tpmW9sctUs61rKM9ZtJH+0P",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [u8; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nfn main(mut x: [Foo; 3], y: pub Field, hash_result: pub [u8; 32]) {\n    // Simple dynamic array set for entire inner most array\n    x[y - 1].bar.inner = [106, 107, 10];\n    let mut hash_input = x[y - 1].bar.inner;\n    // Make sure that we are passing a dynamic array to the black box function call\n    // by setting the array using a dynamic index here\n    hash_input[y - 1] = 0;\n    let hash = std::hash::blake3(hash_input);\n    assert_eq(hash, hash_result);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
