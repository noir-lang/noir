---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZZBbuMwDEXv4nUWpiRScq9SFIWbuoUBwwncZIBBkbsPafOn7SLFjAbd5D/FIiV9UbLfm+fh6fz6OM4vh7fm7v69eVrGaRpfH6fDvj+Nh1n/fW9a+6FOJexUyTW4Rtfkyq7S3EXT7Fpcu1VD27qSa3CNrsmVXcU1uxZXz0eeL6gmU83Dpponm7KruGqeYlpcu01j60quwTW6JlePT9q/M9X+Yhpcoyt7Px2XWoMMKAAdmkiBWwABNBvZsjhuw3ByZVe3gd0GcRvEbRW3VdxWcVvFbRW3VdxW8XxiczIfcwuwOZmjOQA0J9kac3Io1sfcLfaPLbvoOGQTLQLIgALoHKzGNiBAAERAAvC2wVZoq+ZVoxWWzSFaZYXWIAAiIAEYoFkCGWRAAXQOVmIbEMAyB4MISAAGCCADCsAyq9vRinYDAgSAZU4GCcAAAWRAAXQOVs7BbLF63iAAIiABGCDb9kWr8g0KoHOwwt+AAAEQAWsZXC67BjfK42kZBrtQPl0xevEc+2WYT83dfJ6mXfOrn85rp7djP6966hd9qhs1zM+qmvBlnAajy+4jur0dmpPHEtE1mr+G04+Fawl6vNZgRbweS4/Xg1kRLxnWSWlrlh+x/pxuji8/F69vEcIGdOXTDvx9gk7gYBvk3xPo++ojAcWaBHYpYQb8vzO4tQQK35igL1W4GCjfyvBNGUfsgl4MNcdAIuJzqIq/HqNcKuJTxx6fupr5M2MHONccYwlYv3DN+vkaz6Fm/RzhH6eq8ekaH2quIZZ89a9q/IL6467mGuZ83b/u6/gP2ur34/Lly/dimZaxf5oGb76c5/2np6ffRzzBl/NxOeyH5/MyWKaPz2f9ubfqjSU+6HtRW5TzjkrWFq0PU95FDtYka2qlRS4PF5vaHw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
