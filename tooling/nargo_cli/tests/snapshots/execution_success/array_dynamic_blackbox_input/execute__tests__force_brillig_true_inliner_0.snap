---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZZBbuMwDEXv4nUWpiRScq9SFIWbuoUBwwncZIBBkbsPafOn7SLFjAbd5D/FIiV9UbLfm+fh6fz6OM4vh7fm7v69eVrGaRpfH6fDvj+Nh1n/fW9a+6FOJexUyTW4Rtfkyq7S3EXT7Fpcu1VD27qSa3CNrsmVXcU1uxZXz0eeL6gmU83Dpponm7KruGqeYlpcu01j60quwTW6JlePT9q/M9X+Yhpcoyt7Px2XWoMMKAAdmkiBWwABNBvZsjhuw3ByZVe3gd0GcRvEbRW3VdxWcVvFbRW3VdxW8XxiczIfcwuwOZmjOQA0J9kac3Io1sfcLfaPLbvoOGQTLQLIgALoHKzGNiBAAERAAvC2wVZoq+ZVoxVWaA0IEAARkABWrWQggAwogM7BSmwDAljmYBABCcAAAWRAAVhmdTta0W5AgACwzMkgARgggAwogM7ByjmYLVbPGwRABCQAA2TbvmhVvkEBdA5W+BsQIAAiYC2Dy2XX4EZ5PC3DYBfKpytGL55jvwzzqbmbz9O0a37103nt9Hbs51VP/aJPdceG+VlVE76M02B02X1Et7dDc/JYIrpG89dw+rFwLUGP1xqsiNdj6fF6MCviJcM6KW3N8iPWn9PN8eXn4vUtQtiArnzagb9P0AkcbIP8ewJ9X30koFiTwC5GzID/dwa3lkDhGxP0pQoXA+VbGb4p44hd0Iuh5hhIRHwOVfHXY5RLRXzq2ONTVzN/ZuwA55pjLAHrF65ZP1/jOdSsnyP841Q1Pl3jQ801xJKv/lWNX1B/3NVcw5yv+9d9Hf9BW/1+XL58+V4s0zL2T9PgzZfzvP/09PT7iCf4cj4uh/3wfF4Gy/Tx+aw/91a9scQHfS9qi3LeUcnaovVhyrvIwZpkTa20yOXhYlP7Aw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
