---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zdtvi+IwEAbw79LXfZGZyUwSv8pxLK7WRRAV/xwc4ne/VqxKc5TjwuP2zUKW+GPY5rGZdnOpls3n+etjvV3tjtXsx6Xa7Bbz03q3bUeXa119Htabzfrr4/XXlet+UHK3Dxz38203Pp7mh1M1C76umu2ymhFR+/nVetNUM3XX+p9n/qxbm4A2A20B2h5oK9A2oB2AdgTaCWazc0CbgDYDbQHahbkUx/ep4iTDFYkbEg9IPCLxBMTJIXFC4ozEBYkjE0rIhBIyoYRMKCETyoU4W7xPZUtDXApDZMHdp1p0GV56k5N+avDpP6fe6pCJ1OEnUkd4Wx3tppV6NsUX91aId28sJFkfA8c2LIRAhdxwRuKCxHUqC8XeVkjbUjwXCsmwkDCVQuJUCklvLITCM8M6KETdVAqhqRTC37RGXr9e/xL1tovsS2j3ZcOiZSL3BPVTKUSnUghym6vIRtSQjaghG1FDNqKGbEQN2YgashE1ZCNqyEbUkAm10oRKv8MTCUM8OCRemlCTHg+c4YzESxNqjwsaYoZ7IB4L/+Y+6X2qT9kFjYWVq/a3OQ3ZOo+F3y3G/QU1zS5oNCQekHhE4gmIl768HccJiTMSFyTukTgyoQmZ0IRMaEImNAETKs4hcULijMRLEzrydF6cR+KKxCNuayGlL0T1cUGVh5siKX0hOo4TEmckLki8dK8o/S5XfZbQ0hei47gh8cI7kdID55ThEYknIM4OiRMSZyQuSLw0oRYe3Vy2zlmRuCHxgMRLExr75y2aKMMTEBeHxAmJMxIXJO6ReGlCw+NhTsrWuRgSD0i8NKEjz7hEEhAv/beOcZyQOCNxQeIeiSsSNxR+bUe/5of1/HPT3I94rM7bxcuJj9PvfTM4/LE/7BbN8nxoumMgzxMg3ZIWo1oid0W3Iwqhphja0a2rE59qUd8NuxUqGmsx19bQ1vEH",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
