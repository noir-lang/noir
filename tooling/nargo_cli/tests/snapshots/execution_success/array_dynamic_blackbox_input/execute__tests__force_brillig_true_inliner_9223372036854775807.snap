---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zdvfquIwEAbwd+m1F5mZZJL4Ksty8Gg9FETFPwuL+O6bilVpl7Ls8Hl6cyCH+GOw/WwmbS/Vqv48f3002/XuWM1/XKrNbrk4NbttGV2us+rz0Gw2zdfH678r1/6h7G4fOO4X23Z8PC0Op2oe/ayqt6tqTkTl8+tmU1fz4K6zf575c1ZsAtoMtAVoe6AdgLYC7Qi0E9DOMJudA9oEtBloC9A25lIc36eKkwEekLgi8YjEExLPQJwcEickzkhckDgyoYRMKCETSsiEEjKhbMRZ030qa+7jYgyRRnefqskNcOtFTrqp0ef/nHqrQyZSh59IHfFtdZRFK3VsTi/urRDv3lhI1i4GjrVfCIEKueGMxAWJh6mcKPq2QkpL8TxRSPqFxKkUkqZSSH5jIRSfGQ69QoKbSiE0lUL4m86R15/Xv0S9dJFdCWVd1i9aJnJNCH4qhYSpFIJc5gZkI6rIRlSRjagiG1FFNqKKbEQV2YgqshFVZCOqyISqNaHSrfBEYh+PDolbE6rS4ZEHOCNxa0L1cUBjGuAeiCfjd+5zuE/1eXBAk7HyELrLXIiD8zwZf1uUuwOqYXBAkyLxiMQTEs9A3HrzdhwnJM5IXJC4R+LIhGZkQjMyoRmZ0AxMqDiHxAmJMxK3JnRkd16cR+IBiSfc0kKsN0TD44AG7i+KxHpDdBwnJM5IXJC4da0o3So3+EFCrTdEx3FF4hGJJySegThbE0oPnPMAJyTOSFyQuEfiAYkrErcmVOOjyR2e5wmJZyAuDolbE5q6baiQaYAzEhck7pF4QOKKxCMStyY0Pva48vA8z0Dc+ljHOE5InJG4IHFrQkd2RMX6HMg4rkg8IvGExDMQtz4rMY4TEmcUfi2jX4tDs/jc1PcXgtbn7fLl/aDT733de1Vof9gt69X5ULcvDT3fF2q/XilbGJKpLbqMKMYZpVhGtz0ACWEm6tph+22J+jLUUkOp4w8=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
