---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZZBbuMwDEXv4nUWpiRScq9SFIWbuoUBwwncZIBBkbsPafOn7SLFjAbd5D/FIiV9UbLfm+fh6fz6OM4vh7fm7v69eVrGaRpfH6fDvj+Nh1n/fW9a+6FOJexUyTW4Rtfkyq7S3EXT7Fpcu1VD27qSa3CNrsmVXcU1uxZXz0eeL6gmU83Dpponm7KruGqeYlpcu01j60quwTW6JlePT9q/M9X+Yhpcoyt7Px2XWoMMKAAdmkiBWwABNBvZsjhuw3ByZVe3gd0GcRvEbRW3VdxWcVvFbRW3VdxW8XxiczIfcwuwOZmjOQA0J9kac3Io1sfcLfaPLbvoOGQTLQLIgALoHKzGNiBAAERAAvC2wVZoq+ZVoxWWzSFaZYXWIAAiIAGsWslAABlQAJ2DldgGBLDMwSACEoABAsiAArDM6na0ot2AAAEQAQnAAMucDDKgACyzuWHlvAEBAiACEoABsm1ftCrfoAA6Byv8DQgQABGwlsHlsmtwozyelmGwC+XTFaMXz7FfhvnU3M3nado1v/rpvHZ6O/bzqqd+0ae6Y8P8rKoJX8ZpMLrsPqLb26E5eSwRXaP5azj9WLiWoMdrDVbE67H0eD2YFfGSYZ2Utmb5EevP6eb48nPx+hYhbEBXPu3A3yfoBA62Qf49gb6vPhJQrElglxJmwP87g1tLoPCNCfpShYuB8q0M35RxxC7oxVBzDCQiPoeq+OsxyqUiPnXs8amrmT8zdoBzzTGWgPUL16yfI9bPqSr+Oj6HGv+YruOHmmuIC+qHu5prlPPV/65q/ZKv+/c1/kFb/X5cvnz5XizTMvZP0+DNl/O8//T09PuIJ/hyPi6H/fB8XgbL9PH5rD/3Vr2xxAd9L2qLct5Rydqi9WHKu8jBmmRNrbTI5eFiU/sD",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
