---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {
    compute_root(leaf, path, index, root);
}

fn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {
    let mut current: [u8; 32] = leaf;
    let mut index: u32 = _index;
    for i in 0..2 {
        let mut hash_input: [u8; 64] = [0; 64];
        let offset: u32 = i * 32;
        let is_right: bool = (index & 1) != 0;
        let a: u32 = if is_right { 32 } else { 0 };
        let b: u32 = if is_right { 0 } else { 32 };
        for j in 0..32 {
            {
                let i_3790: u32 = j + a;
                hash_input[i_3790] = current[j];
            };
            {
                let i_3791: u32 = j + b;
                hash_input[i_3791] = path[offset + j];
            }
        }
        current = std::hash::blake3(hash_input);
        index = index >> 1;
    }
    assert(root == current);
}
