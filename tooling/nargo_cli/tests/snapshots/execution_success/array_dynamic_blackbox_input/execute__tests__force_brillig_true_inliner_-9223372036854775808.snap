---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndnfSiMxFMfxd5nrXiQ5OfnTV1kWqTpKobRS68IifffNuJ22NLHyzY0Q5WOS+c1kMiefw/P4+PH6sN6+7N6H5a/PYbN7Wh3Wu21pfR4Xw+N+vdmsXx+ufz2Y6YfN/gu8v622U/v9sNofhmX0i2HcPg9La23xL+vNOCzVHH8vilAsAhYRi4RFhsIZg4XFwlFhcR+W9yFYeCwUi4BF874S405EjFQkcZIxcYYTy4njRDjxnCgngROevuPpO56+8PSFpy/N6buQTsSFfEt8c2AhmhMJyVSkvRzJ/FRGX/fiOBFOPCfKSeAkcpI4yZio4YSnr3yFUb7CKF9hlK8wylcY5SuM8hUm8BUm8BUm8PdL4OmHdvpiZyKxIspJO/0gM4muIpGTdvrhPP2YKpIxic25+Kwn4nM1/djsRTWciMYql9R+Wbh5+kGr6SfLieNEOPGcKCeBk8hJ4iRjkvlWIVtOHCeKb/72B6uep6+uesTaX6z3SeIkUyLtj9b7pJmLyrzCqHcVcZwIJ54T5SRw0k7fnonLFUmcZEys4cRy4jgRTtrph3h+JVW5tGsK90ngJHLSTj/NGxLNtiIZk3ZV4T6xnDhOhBPPSTv9eN7D5CqXdlXhPomcJE4yJu2qwn1i6a5PxHEinHhOlJPASeQkcYJ348IrJMIrJMIrJNKukJSS//wkl1r+1aP838QOkzpM5qZdJfnB2A7jOox0mI589JvrlucbtJxrhBsTOq5Bu8BQDmYu/Vi5NdJhfIfRtrHxcg301oQOEztM+nk+1/ks6lycOZ+rlGOU2//fkX80HcZCcyyNP6v9evW4GU+HoS8f26ers9HD37fx5pj0bb97Gp8/9uN0YHo5K53GK0kW3vhpLKVlY1zYFEvra589XSJn8tScxinlrxJzGUMZxz8=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
