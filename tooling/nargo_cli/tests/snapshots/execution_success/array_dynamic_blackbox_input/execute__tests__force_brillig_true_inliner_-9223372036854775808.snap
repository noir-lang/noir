---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZZLbuMwEETvorUX4qf5yVWCIHAcJTAg2IZiDzAIfPfplqpkzyKDDLNxPYrqUpNs0vzsXoeXy/vz/vB2/OgeHj+7l2k/jvv35/G42573x4M+/ex6+3E1dg9uoyrQBM3QAq2z+r6HOqhf1KHt2A7QCBVogqq/Ny3QuqjvoQ7qoQEaoQJNUPh5+Hn4BfgF+AV9L6hGfR5N9bmYemiARqhAEzRDC7QuKj0UfoJ8BfkK8hXkK8hXkK8g34R8E/JNGH+CX1K/ZCpQ9cumGap+xbQumrW/mtr69QrFFtBWoDiCJwRCJAghETKhECqgYkqrg3qomVjuc23NkAmFUBcIc30FA0fwhECIBCEkgjlHg0KoANcTHMETAsGcxUAIiZAJ5pwMKsBqdgFH8IRAiARzzgaJkAmFUAFWvQu4ZflC8IRAiAQhJEImFALKIKDOA+o8oM6D1bkrBplQCBVgtb6AI3hCINDHCttpBYbEl+eSthzmmp4hEmyXOINEyATbKLbEiYa5J5hzvV43HQ+45/M0DHa+3Z14eg6ettNwOHcPh8s4brpf2/Eyv/Rx2h5mPW8n7dVEhsOrqhq+7cfB6Lq5Rfdfh+aIWOfcGi3fDtdaR7wWe0O87n7E6/5viE+ZY0+lb4jPgePPseX7WuYcf8gt8SkwPvum+HX+c2mIj1UQH2tL/iIJ8ZJb1j95jj9Jy/hljRffMn4JnD+JTd93a7xvqR9JeZ2/pu8X1p/Ulv0reV2/2vJ9vXUxAb143WXwfYPKDPRmlv7fQO93NwMXWgxcvmUgP83gqyF4/49J8P16DOs9897hSRvb3X766yZ8Natpv30ZBzTfLofdXe/594k9vEmfpuNueL1MgzndrtP68xhK2MQ+Pukfk7ZczhtXsrbs/vFoqfm+WtPZu9obcn26Wmp/AA==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
