---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZbNbuMwDITfxeccrB/qp69SFEWaukUAIwncZIFFkXdf0p5xsocuuuol88k2x6RFKfrsXoeXy/vz/vB2/OgeHj+7l2k/jvv35/G42573x4Ne/ex6+3E1dg9uoyrQBM3QAq2z+r6HOqhf1GHsOA7QCBVogqq/Ny3QuqjvoQ7qoQEaoQJNUPh5+Hn4BfgF+AV9LqhGvR5N9bqYemiARqhAEzRDC7QuKj0UfoJ8BfkK8hXkK8hXkK8g34R8E/JNqD/BL6lfMhWo+mXTDFW/YloXzXq/mtr89QrFJtBmoDiCJwRCJAghETKhECqg4pNWB/VQWVKYW8tqmHtrhkKoC4S5vYKBI3hCIESCEBLBnKNBIVSA6wmO4AmBYM5iIIREyIRCqABr2QXMORl4QiCYczYQQiJkQiFUgDXvAm6ZvRA8IRAiQQiJkAmFgC4IaPOANg9o82Bt7opBJhRCBVirL+AInhAI9LG+djr7IfHhuaMth7mlZ4gEWyTOIBEywdaJTXGiYe4J5lyv103H/e35PA2DbW93G55ug6ftNBzO3cPhMo6b7td2vMwPfZy2h1nP20nvaiLD4VVVDd/242B03dyi+69Dc0Ssc26Nlm+Ha68jXpu9IV4XP+J1+TfEp8zaU+kb4nNg/Tm2vF/bnPWH3BKfAuOzb4pfv38uDfGxCuJjbclfJCFecsv8J8/6k7TUL4H1S2yKX98vvuX7iVvf71v6Rwr7R2rL+pO8fv/aVH/K6/y1xOuhiwXoueuugu8bVFagB7P0/wZ6vLsZuNBi4PItA/lpBl+V4P0/PoLv121Yj5n3Dk862O72018H4atZTfvtyzhg+HY57O7unn+feIcH6dN03A2vl2kwp9tpWn8eQwmb2Mcn/WPSkct540rWkZ0/Hi0131cbOntW74Zcn66W2h8=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
