---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndnRbuIwEIXhd8l1LmyPPWPzKqtVRdu0QkJQUbrSquq7r7MlFGGr1c9NJRc+HOeQSfC8D4/T/dvz3Wb3tH8dVr/eh+3+YX3c7Hd19P4xDveHzXa7eb67/Pfg5j++xP/g9WW9m8evx/XhOKwsjsO0exxW3vvqnzbbaVgl9/F7rCJhoVgYFhmLAkVwDguPRaDC4zk8n0OwiFgkLBQLwyJjgb9XAX+vAs484MwDzjzgzEM3c3HhRMRJQ5QT4yRzUjARx4nnJHAinEROePrC0xeevvD0hacfu8sPmk8kaGlI98DU3Ilodg3plyNZrkqLzSzJceI5CZwIJ5GTxIlyYpxkTnj6yiuM8gqjvMIorzDKK4zyCqO8wiivMMorjPH7i/H0rZ+++IWINUQ46aevshALDUmc9NPX8/ItN8Qwyd21xJJOJJZm+bk7S0p6IsmaXHL/ZhGW5Wtqlp8LJsVx4jkJnAgnkZPEiXJinPD0C05fnOPEcxI4EU4iJ4kTpY9w4owT/KAo/X2E74qS9DcS0nn5KeSGCCeRk8SJctKvybJU/hSb9PvbCd+Tgkl/QyH5MwmlIZ6TwIlwEjlJnCgn/fTVznfkNpfMScGkv6vwPemnn5fnsVR8QwInwknkJHGinBgn/fTt/AhX2lwKJtFx4umzpcTAiXASOUmcKCfGSeakYMI3IoRvRAjfiJD+rkJt9CwXTO3gXFwxnyb2TVlOQO2W6LXRG+bpnoHa7vmax8u1yTeYwk3/J3x9o32dg3Rt/A0m3GDk5/Vc5jO2uQR37g7U5sz159+Qf/83/w9Gofmogz/rw2Z9v51OLdant93DRcf1+Pdlumq+vhz2D9Pj22Ga27BfHdg5X8lhjE7mY6kjbzb6bHXk5xfnUxRcmYdzrmJllOzrMdTj+Ac=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
