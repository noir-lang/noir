---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ndnRauMwEIXhd/G1L6QZaSTlVZalpK1bAiEpabqwlLz72iVOQiSy/L4pqOGrLB97omq+u9fh+ev9abN72392q1/f3Xb/sj5u9rtx9H3qu+fDZrvdvD/d/rpz0w9fwg/4/FjvpvHncX04dqsU+m7YvXYr7/3o3zbboVtFd/rdjyJiYVgkLDIWBQpxDguPhVDh8Ryez6FYBCwiFoZFwiJjgZ8rwc+V4MwFZy44c8GZSzNzdXIm6rQixkniJHNSMFHHiedEOFFOAic8feXpK09fefrK0w/N5YvlMxErFWlemCV3JpZdRdrlSOe3MoVqlug48ZwIJ8pJ4CRyYpwkTjInPH3jFcZ4hTFeYYxXGOMVxniFMV5hjFcY4xUm8e+XxNNP7fTVz0RTRZSTdvqmM0lSkchJO327LD/liiRMcnMtocQzCaVafm7OEqOdSUxVLrn9ZSHz8i1Wy88Fk+I48ZwIJ8pJ4CRyYpwkTnj6BaevznHiORFOlJPASeTE6BZOXeIEbxS1fY7wqChp+yAhXpYfJVdEOQmcRE6Mk3ZN1rnyx1Cl3z5OeEwKJu0DhcfEcyKctNP3FyKlIoGTyIlxkjjJnBRM2qcK0dJlq1Dl0j5VeEyEE+WknX6eN4qx+IpEToyTxEnmpGASHCft9NNlb1mqXIJwopwETiInxgnejWv76OYxKZi0j24eE8+JcKKcBE4iJoaPodSUk8BJ8xkbW2Pzmzz2vG5e5R/T/od/bHXNN2DsL9m9kQXzNO/A2CC7zuP13oQFJi4w1jY+Xe9BvDdpgckLTPn/em7z6etcxF36KWM76+7v5wX5Z7/ACDSncfBnfdisn7fDuSn99rV7uelRH/9+DHft6o/D/mV4/ToMU+P62rOe1qjF98HLdC3jyKfU+5zGkZ8+nG6RuDINp7Vpjr2On55O43X8Aw==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
