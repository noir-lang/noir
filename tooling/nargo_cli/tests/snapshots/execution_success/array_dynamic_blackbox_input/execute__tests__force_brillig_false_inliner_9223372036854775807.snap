---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "leaf",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "path",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "index",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "root",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _522",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127, _128]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "BLACKBOX::RANGE [(_9, 8)] []",
    "BLACKBOX::RANGE [(_10, 8)] []",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "BLACKBOX::RANGE [(_16, 8)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "BLACKBOX::RANGE [(_18, 8)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "BLACKBOX::RANGE [(_20, 8)] []",
    "BLACKBOX::RANGE [(_21, 8)] []",
    "BLACKBOX::RANGE [(_22, 8)] []",
    "BLACKBOX::RANGE [(_23, 8)] []",
    "BLACKBOX::RANGE [(_24, 8)] []",
    "BLACKBOX::RANGE [(_25, 8)] []",
    "BLACKBOX::RANGE [(_26, 8)] []",
    "BLACKBOX::RANGE [(_27, 8)] []",
    "BLACKBOX::RANGE [(_28, 8)] []",
    "BLACKBOX::RANGE [(_29, 8)] []",
    "BLACKBOX::RANGE [(_30, 8)] []",
    "BLACKBOX::RANGE [(_31, 8)] []",
    "BLACKBOX::RANGE [(_32, 8)] []",
    "BLACKBOX::RANGE [(_33, 8)] []",
    "BLACKBOX::RANGE [(_34, 8)] []",
    "BLACKBOX::RANGE [(_35, 8)] []",
    "BLACKBOX::RANGE [(_36, 8)] []",
    "BLACKBOX::RANGE [(_37, 8)] []",
    "BLACKBOX::RANGE [(_38, 8)] []",
    "BLACKBOX::RANGE [(_39, 8)] []",
    "BLACKBOX::RANGE [(_40, 8)] []",
    "BLACKBOX::RANGE [(_41, 8)] []",
    "BLACKBOX::RANGE [(_42, 8)] []",
    "BLACKBOX::RANGE [(_43, 8)] []",
    "BLACKBOX::RANGE [(_44, 8)] []",
    "BLACKBOX::RANGE [(_45, 8)] []",
    "BLACKBOX::RANGE [(_46, 8)] []",
    "BLACKBOX::RANGE [(_47, 8)] []",
    "BLACKBOX::RANGE [(_48, 8)] []",
    "BLACKBOX::RANGE [(_49, 8)] []",
    "BLACKBOX::RANGE [(_50, 8)] []",
    "BLACKBOX::RANGE [(_51, 8)] []",
    "BLACKBOX::RANGE [(_52, 8)] []",
    "BLACKBOX::RANGE [(_53, 8)] []",
    "BLACKBOX::RANGE [(_54, 8)] []",
    "BLACKBOX::RANGE [(_55, 8)] []",
    "BLACKBOX::RANGE [(_56, 8)] []",
    "BLACKBOX::RANGE [(_57, 8)] []",
    "BLACKBOX::RANGE [(_58, 8)] []",
    "BLACKBOX::RANGE [(_59, 8)] []",
    "BLACKBOX::RANGE [(_60, 8)] []",
    "BLACKBOX::RANGE [(_61, 8)] []",
    "BLACKBOX::RANGE [(_62, 8)] []",
    "BLACKBOX::RANGE [(_63, 8)] []",
    "BLACKBOX::RANGE [(_64, 8)] []",
    "BLACKBOX::RANGE [(_65, 8)] []",
    "BLACKBOX::RANGE [(_66, 8)] []",
    "BLACKBOX::RANGE [(_67, 8)] []",
    "BLACKBOX::RANGE [(_68, 8)] []",
    "BLACKBOX::RANGE [(_69, 8)] []",
    "BLACKBOX::RANGE [(_70, 8)] []",
    "BLACKBOX::RANGE [(_71, 8)] []",
    "BLACKBOX::RANGE [(_72, 8)] []",
    "BLACKBOX::RANGE [(_73, 8)] []",
    "BLACKBOX::RANGE [(_74, 8)] []",
    "BLACKBOX::RANGE [(_75, 8)] []",
    "BLACKBOX::RANGE [(_76, 8)] []",
    "BLACKBOX::RANGE [(_77, 8)] []",
    "BLACKBOX::RANGE [(_78, 8)] []",
    "BLACKBOX::RANGE [(_79, 8)] []",
    "BLACKBOX::RANGE [(_80, 8)] []",
    "BLACKBOX::RANGE [(_81, 8)] []",
    "BLACKBOX::RANGE [(_82, 8)] []",
    "BLACKBOX::RANGE [(_83, 8)] []",
    "BLACKBOX::RANGE [(_84, 8)] []",
    "BLACKBOX::RANGE [(_85, 8)] []",
    "BLACKBOX::RANGE [(_86, 8)] []",
    "BLACKBOX::RANGE [(_87, 8)] []",
    "BLACKBOX::RANGE [(_88, 8)] []",
    "BLACKBOX::RANGE [(_89, 8)] []",
    "BLACKBOX::RANGE [(_90, 8)] []",
    "BLACKBOX::RANGE [(_91, 8)] []",
    "BLACKBOX::RANGE [(_92, 8)] []",
    "BLACKBOX::RANGE [(_93, 8)] []",
    "BLACKBOX::RANGE [(_94, 8)] []",
    "BLACKBOX::RANGE [(_95, 8)] []",
    "BLACKBOX::RANGE [(_96, 32)] []",
    "BLACKBOX::RANGE [(_97, 8)] []",
    "BLACKBOX::RANGE [(_98, 8)] []",
    "BLACKBOX::RANGE [(_99, 8)] []",
    "BLACKBOX::RANGE [(_100, 8)] []",
    "BLACKBOX::RANGE [(_101, 8)] []",
    "BLACKBOX::RANGE [(_102, 8)] []",
    "BLACKBOX::RANGE [(_103, 8)] []",
    "BLACKBOX::RANGE [(_104, 8)] []",
    "BLACKBOX::RANGE [(_105, 8)] []",
    "BLACKBOX::RANGE [(_106, 8)] []",
    "BLACKBOX::RANGE [(_107, 8)] []",
    "BLACKBOX::RANGE [(_108, 8)] []",
    "BLACKBOX::RANGE [(_109, 8)] []",
    "BLACKBOX::RANGE [(_110, 8)] []",
    "BLACKBOX::RANGE [(_111, 8)] []",
    "BLACKBOX::RANGE [(_112, 8)] []",
    "BLACKBOX::RANGE [(_113, 8)] []",
    "BLACKBOX::RANGE [(_114, 8)] []",
    "BLACKBOX::RANGE [(_115, 8)] []",
    "BLACKBOX::RANGE [(_116, 8)] []",
    "BLACKBOX::RANGE [(_117, 8)] []",
    "BLACKBOX::RANGE [(_118, 8)] []",
    "BLACKBOX::RANGE [(_119, 8)] []",
    "BLACKBOX::RANGE [(_120, 8)] []",
    "BLACKBOX::RANGE [(_121, 8)] []",
    "BLACKBOX::RANGE [(_122, 8)] []",
    "BLACKBOX::RANGE [(_123, 8)] []",
    "BLACKBOX::RANGE [(_124, 8)] []",
    "BLACKBOX::RANGE [(_125, 8)] []",
    "BLACKBOX::RANGE [(_126, 8)] []",
    "BLACKBOX::RANGE [(_127, 8)] []",
    "BLACKBOX::RANGE [(_128, 8)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _96) 0 ], EXPR [ 2 ]], outputs: [_129, _130]",
    "BLACKBOX::RANGE [(_129, 31)] []",
    "BLACKBOX::RANGE [(_130, 1)] []",
    "EXPR [ (1, _96) (-2, _129) (-1, _130) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _130) 0 ]], outputs: [_131]",
    "EXPR [ (1, _130, _131) (1, _132) -1 ]",
    "EXPR [ (1, _130, _132) 0 ]",
    "EXPR [ (-32, _132) (-1, _133) 32 ]",
    "BLACKBOX::RANGE [(_133, 6)] []",
    "EXPR [ (-1, _134) 0 ]",
    "INIT (id: 3, len: 64, witnesses: [_134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134])",
    "INIT (id: 4, len: 64, witnesses: [_134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134, _134])",
    "MEM (id: 4, write EXPR [ (1, _0) 0 ] at: EXPR [ (1, _133) 0 ]) ",
    "EXPR [ (32, _132) (-1, _135) 0 ]",
    "BLACKBOX::RANGE [(_135, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _32) 0 ] at: EXPR [ (1, _135) 0 ]) ",
    "EXPR [ (1, _133) (-1, _136) 1 ]",
    "BLACKBOX::RANGE [(_136, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _1) 0 ] at: EXPR [ (1, _136) 0 ]) ",
    "EXPR [ (1, _135) (-1, _137) 1 ]",
    "BLACKBOX::RANGE [(_137, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _33) 0 ] at: EXPR [ (1, _137) 0 ]) ",
    "EXPR [ (1, _133) (-1, _138) 2 ]",
    "BLACKBOX::RANGE [(_138, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _2) 0 ] at: EXPR [ (1, _138) 0 ]) ",
    "EXPR [ (1, _135) (-1, _139) 2 ]",
    "BLACKBOX::RANGE [(_139, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _34) 0 ] at: EXPR [ (1, _139) 0 ]) ",
    "EXPR [ (1, _133) (-1, _140) 3 ]",
    "BLACKBOX::RANGE [(_140, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _3) 0 ] at: EXPR [ (1, _140) 0 ]) ",
    "EXPR [ (1, _135) (-1, _141) 3 ]",
    "BLACKBOX::RANGE [(_141, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _35) 0 ] at: EXPR [ (1, _141) 0 ]) ",
    "EXPR [ (1, _133) (-1, _142) 4 ]",
    "BLACKBOX::RANGE [(_142, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _4) 0 ] at: EXPR [ (1, _142) 0 ]) ",
    "EXPR [ (1, _135) (-1, _143) 4 ]",
    "BLACKBOX::RANGE [(_143, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _36) 0 ] at: EXPR [ (1, _143) 0 ]) ",
    "EXPR [ (1, _133) (-1, _144) 5 ]",
    "BLACKBOX::RANGE [(_144, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _5) 0 ] at: EXPR [ (1, _144) 0 ]) ",
    "EXPR [ (1, _135) (-1, _145) 5 ]",
    "BLACKBOX::RANGE [(_145, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _37) 0 ] at: EXPR [ (1, _145) 0 ]) ",
    "EXPR [ (1, _133) (-1, _146) 6 ]",
    "BLACKBOX::RANGE [(_146, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _6) 0 ] at: EXPR [ (1, _146) 0 ]) ",
    "EXPR [ (1, _135) (-1, _147) 6 ]",
    "BLACKBOX::RANGE [(_147, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _38) 0 ] at: EXPR [ (1, _147) 0 ]) ",
    "EXPR [ (1, _133) (-1, _148) 7 ]",
    "BLACKBOX::RANGE [(_148, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _7) 0 ] at: EXPR [ (1, _148) 0 ]) ",
    "EXPR [ (1, _135) (-1, _149) 7 ]",
    "BLACKBOX::RANGE [(_149, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _39) 0 ] at: EXPR [ (1, _149) 0 ]) ",
    "EXPR [ (1, _133) (-1, _150) 8 ]",
    "BLACKBOX::RANGE [(_150, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _8) 0 ] at: EXPR [ (1, _150) 0 ]) ",
    "EXPR [ (1, _135) (-1, _151) 8 ]",
    "BLACKBOX::RANGE [(_151, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _40) 0 ] at: EXPR [ (1, _151) 0 ]) ",
    "EXPR [ (1, _133) (-1, _152) 9 ]",
    "BLACKBOX::RANGE [(_152, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _9) 0 ] at: EXPR [ (1, _152) 0 ]) ",
    "EXPR [ (1, _135) (-1, _153) 9 ]",
    "BLACKBOX::RANGE [(_153, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _41) 0 ] at: EXPR [ (1, _153) 0 ]) ",
    "EXPR [ (1, _133) (-1, _154) 10 ]",
    "BLACKBOX::RANGE [(_154, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _10) 0 ] at: EXPR [ (1, _154) 0 ]) ",
    "EXPR [ (1, _135) (-1, _155) 10 ]",
    "BLACKBOX::RANGE [(_155, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _42) 0 ] at: EXPR [ (1, _155) 0 ]) ",
    "EXPR [ (1, _133) (-1, _156) 11 ]",
    "BLACKBOX::RANGE [(_156, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _11) 0 ] at: EXPR [ (1, _156) 0 ]) ",
    "EXPR [ (1, _135) (-1, _157) 11 ]",
    "BLACKBOX::RANGE [(_157, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _43) 0 ] at: EXPR [ (1, _157) 0 ]) ",
    "EXPR [ (1, _133) (-1, _158) 12 ]",
    "BLACKBOX::RANGE [(_158, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _12) 0 ] at: EXPR [ (1, _158) 0 ]) ",
    "EXPR [ (1, _135) (-1, _159) 12 ]",
    "BLACKBOX::RANGE [(_159, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _44) 0 ] at: EXPR [ (1, _159) 0 ]) ",
    "EXPR [ (1, _133) (-1, _160) 13 ]",
    "BLACKBOX::RANGE [(_160, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _13) 0 ] at: EXPR [ (1, _160) 0 ]) ",
    "EXPR [ (1, _135) (-1, _161) 13 ]",
    "BLACKBOX::RANGE [(_161, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _45) 0 ] at: EXPR [ (1, _161) 0 ]) ",
    "EXPR [ (1, _133) (-1, _162) 14 ]",
    "BLACKBOX::RANGE [(_162, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _14) 0 ] at: EXPR [ (1, _162) 0 ]) ",
    "EXPR [ (1, _135) (-1, _163) 14 ]",
    "BLACKBOX::RANGE [(_163, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _46) 0 ] at: EXPR [ (1, _163) 0 ]) ",
    "EXPR [ (1, _133) (-1, _164) 15 ]",
    "BLACKBOX::RANGE [(_164, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _15) 0 ] at: EXPR [ (1, _164) 0 ]) ",
    "EXPR [ (1, _135) (-1, _165) 15 ]",
    "BLACKBOX::RANGE [(_165, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _47) 0 ] at: EXPR [ (1, _165) 0 ]) ",
    "EXPR [ (1, _133) (-1, _166) 16 ]",
    "BLACKBOX::RANGE [(_166, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _16) 0 ] at: EXPR [ (1, _166) 0 ]) ",
    "EXPR [ (1, _135) (-1, _167) 16 ]",
    "BLACKBOX::RANGE [(_167, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _48) 0 ] at: EXPR [ (1, _167) 0 ]) ",
    "EXPR [ (1, _133) (-1, _168) 17 ]",
    "BLACKBOX::RANGE [(_168, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _17) 0 ] at: EXPR [ (1, _168) 0 ]) ",
    "EXPR [ (1, _135) (-1, _169) 17 ]",
    "BLACKBOX::RANGE [(_169, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _49) 0 ] at: EXPR [ (1, _169) 0 ]) ",
    "EXPR [ (1, _133) (-1, _170) 18 ]",
    "BLACKBOX::RANGE [(_170, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _18) 0 ] at: EXPR [ (1, _170) 0 ]) ",
    "EXPR [ (1, _135) (-1, _171) 18 ]",
    "BLACKBOX::RANGE [(_171, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _50) 0 ] at: EXPR [ (1, _171) 0 ]) ",
    "EXPR [ (1, _133) (-1, _172) 19 ]",
    "BLACKBOX::RANGE [(_172, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _19) 0 ] at: EXPR [ (1, _172) 0 ]) ",
    "EXPR [ (1, _135) (-1, _173) 19 ]",
    "BLACKBOX::RANGE [(_173, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _51) 0 ] at: EXPR [ (1, _173) 0 ]) ",
    "EXPR [ (1, _133) (-1, _174) 20 ]",
    "BLACKBOX::RANGE [(_174, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _20) 0 ] at: EXPR [ (1, _174) 0 ]) ",
    "EXPR [ (1, _135) (-1, _175) 20 ]",
    "BLACKBOX::RANGE [(_175, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _52) 0 ] at: EXPR [ (1, _175) 0 ]) ",
    "EXPR [ (1, _133) (-1, _176) 21 ]",
    "BLACKBOX::RANGE [(_176, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _21) 0 ] at: EXPR [ (1, _176) 0 ]) ",
    "EXPR [ (1, _135) (-1, _177) 21 ]",
    "BLACKBOX::RANGE [(_177, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _53) 0 ] at: EXPR [ (1, _177) 0 ]) ",
    "EXPR [ (1, _133) (-1, _178) 22 ]",
    "BLACKBOX::RANGE [(_178, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _22) 0 ] at: EXPR [ (1, _178) 0 ]) ",
    "EXPR [ (1, _135) (-1, _179) 22 ]",
    "BLACKBOX::RANGE [(_179, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _54) 0 ] at: EXPR [ (1, _179) 0 ]) ",
    "EXPR [ (1, _133) (-1, _180) 23 ]",
    "BLACKBOX::RANGE [(_180, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _23) 0 ] at: EXPR [ (1, _180) 0 ]) ",
    "EXPR [ (1, _135) (-1, _181) 23 ]",
    "BLACKBOX::RANGE [(_181, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _55) 0 ] at: EXPR [ (1, _181) 0 ]) ",
    "EXPR [ (1, _133) (-1, _182) 24 ]",
    "BLACKBOX::RANGE [(_182, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _24) 0 ] at: EXPR [ (1, _182) 0 ]) ",
    "EXPR [ (1, _135) (-1, _183) 24 ]",
    "BLACKBOX::RANGE [(_183, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _56) 0 ] at: EXPR [ (1, _183) 0 ]) ",
    "EXPR [ (1, _133) (-1, _184) 25 ]",
    "BLACKBOX::RANGE [(_184, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _25) 0 ] at: EXPR [ (1, _184) 0 ]) ",
    "EXPR [ (1, _135) (-1, _185) 25 ]",
    "BLACKBOX::RANGE [(_185, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _57) 0 ] at: EXPR [ (1, _185) 0 ]) ",
    "EXPR [ (1, _133) (-1, _186) 26 ]",
    "BLACKBOX::RANGE [(_186, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _26) 0 ] at: EXPR [ (1, _186) 0 ]) ",
    "EXPR [ (1, _135) (-1, _187) 26 ]",
    "BLACKBOX::RANGE [(_187, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _58) 0 ] at: EXPR [ (1, _187) 0 ]) ",
    "EXPR [ (1, _133) (-1, _188) 27 ]",
    "BLACKBOX::RANGE [(_188, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _27) 0 ] at: EXPR [ (1, _188) 0 ]) ",
    "EXPR [ (1, _135) (-1, _189) 27 ]",
    "BLACKBOX::RANGE [(_189, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _59) 0 ] at: EXPR [ (1, _189) 0 ]) ",
    "EXPR [ (1, _133) (-1, _190) 28 ]",
    "BLACKBOX::RANGE [(_190, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _28) 0 ] at: EXPR [ (1, _190) 0 ]) ",
    "EXPR [ (1, _135) (-1, _191) 28 ]",
    "BLACKBOX::RANGE [(_191, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _60) 0 ] at: EXPR [ (1, _191) 0 ]) ",
    "EXPR [ (1, _133) (-1, _192) 29 ]",
    "BLACKBOX::RANGE [(_192, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _29) 0 ] at: EXPR [ (1, _192) 0 ]) ",
    "EXPR [ (1, _135) (-1, _193) 29 ]",
    "BLACKBOX::RANGE [(_193, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _61) 0 ] at: EXPR [ (1, _193) 0 ]) ",
    "EXPR [ (1, _133) (-1, _194) 30 ]",
    "BLACKBOX::RANGE [(_194, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _30) 0 ] at: EXPR [ (1, _194) 0 ]) ",
    "EXPR [ (1, _135) (-1, _195) 30 ]",
    "BLACKBOX::RANGE [(_195, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _62) 0 ] at: EXPR [ (1, _195) 0 ]) ",
    "EXPR [ (1, _133) (-1, _196) 31 ]",
    "BLACKBOX::RANGE [(_196, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _31) 0 ] at: EXPR [ (1, _196) 0 ]) ",
    "EXPR [ (1, _135) (-1, _197) 31 ]",
    "BLACKBOX::RANGE [(_197, 6)] []",
    "MEM (id: 4, write EXPR [ (1, _63) 0 ] at: EXPR [ (1, _197) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _134) 0 ], value: EXPR [ (1, _198) 0 ]) ",
    "EXPR [ (-1, _199) 1 ]",
    "MEM (id: 4, read at: EXPR [ (1, _199) 0 ], value: EXPR [ (1, _200) 0 ]) ",
    "EXPR [ (-1, _201) 2 ]",
    "MEM (id: 4, read at: EXPR [ (1, _201) 0 ], value: EXPR [ (1, _202) 0 ]) ",
    "EXPR [ (-1, _203) 3 ]",
    "MEM (id: 4, read at: EXPR [ (1, _203) 0 ], value: EXPR [ (1, _204) 0 ]) ",
    "EXPR [ (-1, _205) 4 ]",
    "MEM (id: 4, read at: EXPR [ (1, _205) 0 ], value: EXPR [ (1, _206) 0 ]) ",
    "EXPR [ (-1, _207) 5 ]",
    "MEM (id: 4, read at: EXPR [ (1, _207) 0 ], value: EXPR [ (1, _208) 0 ]) ",
    "EXPR [ (-1, _209) 6 ]",
    "MEM (id: 4, read at: EXPR [ (1, _209) 0 ], value: EXPR [ (1, _210) 0 ]) ",
    "EXPR [ (-1, _211) 7 ]",
    "MEM (id: 4, read at: EXPR [ (1, _211) 0 ], value: EXPR [ (1, _212) 0 ]) ",
    "EXPR [ (-1, _213) 8 ]",
    "MEM (id: 4, read at: EXPR [ (1, _213) 0 ], value: EXPR [ (1, _214) 0 ]) ",
    "EXPR [ (-1, _215) 9 ]",
    "MEM (id: 4, read at: EXPR [ (1, _215) 0 ], value: EXPR [ (1, _216) 0 ]) ",
    "EXPR [ (-1, _217) 10 ]",
    "MEM (id: 4, read at: EXPR [ (1, _217) 0 ], value: EXPR [ (1, _218) 0 ]) ",
    "EXPR [ (-1, _219) 11 ]",
    "MEM (id: 4, read at: EXPR [ (1, _219) 0 ], value: EXPR [ (1, _220) 0 ]) ",
    "EXPR [ (-1, _221) 12 ]",
    "MEM (id: 4, read at: EXPR [ (1, _221) 0 ], value: EXPR [ (1, _222) 0 ]) ",
    "EXPR [ (-1, _223) 13 ]",
    "MEM (id: 4, read at: EXPR [ (1, _223) 0 ], value: EXPR [ (1, _224) 0 ]) ",
    "EXPR [ (-1, _225) 14 ]",
    "MEM (id: 4, read at: EXPR [ (1, _225) 0 ], value: EXPR [ (1, _226) 0 ]) ",
    "EXPR [ (-1, _227) 15 ]",
    "MEM (id: 4, read at: EXPR [ (1, _227) 0 ], value: EXPR [ (1, _228) 0 ]) ",
    "EXPR [ (-1, _229) 16 ]",
    "MEM (id: 4, read at: EXPR [ (1, _229) 0 ], value: EXPR [ (1, _230) 0 ]) ",
    "EXPR [ (-1, _231) 17 ]",
    "MEM (id: 4, read at: EXPR [ (1, _231) 0 ], value: EXPR [ (1, _232) 0 ]) ",
    "EXPR [ (-1, _233) 18 ]",
    "MEM (id: 4, read at: EXPR [ (1, _233) 0 ], value: EXPR [ (1, _234) 0 ]) ",
    "EXPR [ (-1, _235) 19 ]",
    "MEM (id: 4, read at: EXPR [ (1, _235) 0 ], value: EXPR [ (1, _236) 0 ]) ",
    "EXPR [ (-1, _237) 20 ]",
    "MEM (id: 4, read at: EXPR [ (1, _237) 0 ], value: EXPR [ (1, _238) 0 ]) ",
    "EXPR [ (-1, _239) 21 ]",
    "MEM (id: 4, read at: EXPR [ (1, _239) 0 ], value: EXPR [ (1, _240) 0 ]) ",
    "EXPR [ (-1, _241) 22 ]",
    "MEM (id: 4, read at: EXPR [ (1, _241) 0 ], value: EXPR [ (1, _242) 0 ]) ",
    "EXPR [ (-1, _243) 23 ]",
    "MEM (id: 4, read at: EXPR [ (1, _243) 0 ], value: EXPR [ (1, _244) 0 ]) ",
    "EXPR [ (-1, _245) 24 ]",
    "MEM (id: 4, read at: EXPR [ (1, _245) 0 ], value: EXPR [ (1, _246) 0 ]) ",
    "EXPR [ (-1, _247) 25 ]",
    "MEM (id: 4, read at: EXPR [ (1, _247) 0 ], value: EXPR [ (1, _248) 0 ]) ",
    "EXPR [ (-1, _249) 26 ]",
    "MEM (id: 4, read at: EXPR [ (1, _249) 0 ], value: EXPR [ (1, _250) 0 ]) ",
    "EXPR [ (-1, _251) 27 ]",
    "MEM (id: 4, read at: EXPR [ (1, _251) 0 ], value: EXPR [ (1, _252) 0 ]) ",
    "EXPR [ (-1, _253) 28 ]",
    "MEM (id: 4, read at: EXPR [ (1, _253) 0 ], value: EXPR [ (1, _254) 0 ]) ",
    "EXPR [ (-1, _255) 29 ]",
    "MEM (id: 4, read at: EXPR [ (1, _255) 0 ], value: EXPR [ (1, _256) 0 ]) ",
    "EXPR [ (-1, _257) 30 ]",
    "MEM (id: 4, read at: EXPR [ (1, _257) 0 ], value: EXPR [ (1, _258) 0 ]) ",
    "EXPR [ (-1, _259) 31 ]",
    "MEM (id: 4, read at: EXPR [ (1, _259) 0 ], value: EXPR [ (1, _260) 0 ]) ",
    "EXPR [ (-1, _261) 32 ]",
    "MEM (id: 4, read at: EXPR [ (1, _261) 0 ], value: EXPR [ (1, _262) 0 ]) ",
    "EXPR [ (-1, _263) 33 ]",
    "MEM (id: 4, read at: EXPR [ (1, _263) 0 ], value: EXPR [ (1, _264) 0 ]) ",
    "EXPR [ (-1, _265) 34 ]",
    "MEM (id: 4, read at: EXPR [ (1, _265) 0 ], value: EXPR [ (1, _266) 0 ]) ",
    "EXPR [ (-1, _267) 35 ]",
    "MEM (id: 4, read at: EXPR [ (1, _267) 0 ], value: EXPR [ (1, _268) 0 ]) ",
    "EXPR [ (-1, _269) 36 ]",
    "MEM (id: 4, read at: EXPR [ (1, _269) 0 ], value: EXPR [ (1, _270) 0 ]) ",
    "EXPR [ (-1, _271) 37 ]",
    "MEM (id: 4, read at: EXPR [ (1, _271) 0 ], value: EXPR [ (1, _272) 0 ]) ",
    "EXPR [ (-1, _273) 38 ]",
    "MEM (id: 4, read at: EXPR [ (1, _273) 0 ], value: EXPR [ (1, _274) 0 ]) ",
    "EXPR [ (-1, _275) 39 ]",
    "MEM (id: 4, read at: EXPR [ (1, _275) 0 ], value: EXPR [ (1, _276) 0 ]) ",
    "EXPR [ (-1, _277) 40 ]",
    "MEM (id: 4, read at: EXPR [ (1, _277) 0 ], value: EXPR [ (1, _278) 0 ]) ",
    "EXPR [ (-1, _279) 41 ]",
    "MEM (id: 4, read at: EXPR [ (1, _279) 0 ], value: EXPR [ (1, _280) 0 ]) ",
    "EXPR [ (-1, _281) 42 ]",
    "MEM (id: 4, read at: EXPR [ (1, _281) 0 ], value: EXPR [ (1, _282) 0 ]) ",
    "EXPR [ (-1, _283) 43 ]",
    "MEM (id: 4, read at: EXPR [ (1, _283) 0 ], value: EXPR [ (1, _284) 0 ]) ",
    "EXPR [ (-1, _285) 44 ]",
    "MEM (id: 4, read at: EXPR [ (1, _285) 0 ], value: EXPR [ (1, _286) 0 ]) ",
    "EXPR [ (-1, _287) 45 ]",
    "MEM (id: 4, read at: EXPR [ (1, _287) 0 ], value: EXPR [ (1, _288) 0 ]) ",
    "EXPR [ (-1, _289) 46 ]",
    "MEM (id: 4, read at: EXPR [ (1, _289) 0 ], value: EXPR [ (1, _290) 0 ]) ",
    "EXPR [ (-1, _291) 47 ]",
    "MEM (id: 4, read at: EXPR [ (1, _291) 0 ], value: EXPR [ (1, _292) 0 ]) ",
    "EXPR [ (-1, _293) 48 ]",
    "MEM (id: 4, read at: EXPR [ (1, _293) 0 ], value: EXPR [ (1, _294) 0 ]) ",
    "EXPR [ (-1, _295) 49 ]",
    "MEM (id: 4, read at: EXPR [ (1, _295) 0 ], value: EXPR [ (1, _296) 0 ]) ",
    "EXPR [ (-1, _297) 50 ]",
    "MEM (id: 4, read at: EXPR [ (1, _297) 0 ], value: EXPR [ (1, _298) 0 ]) ",
    "EXPR [ (-1, _299) 51 ]",
    "MEM (id: 4, read at: EXPR [ (1, _299) 0 ], value: EXPR [ (1, _300) 0 ]) ",
    "EXPR [ (-1, _301) 52 ]",
    "MEM (id: 4, read at: EXPR [ (1, _301) 0 ], value: EXPR [ (1, _302) 0 ]) ",
    "EXPR [ (-1, _303) 53 ]",
    "MEM (id: 4, read at: EXPR [ (1, _303) 0 ], value: EXPR [ (1, _304) 0 ]) ",
    "EXPR [ (-1, _305) 54 ]",
    "MEM (id: 4, read at: EXPR [ (1, _305) 0 ], value: EXPR [ (1, _306) 0 ]) ",
    "EXPR [ (-1, _307) 55 ]",
    "MEM (id: 4, read at: EXPR [ (1, _307) 0 ], value: EXPR [ (1, _308) 0 ]) ",
    "EXPR [ (-1, _309) 56 ]",
    "MEM (id: 4, read at: EXPR [ (1, _309) 0 ], value: EXPR [ (1, _310) 0 ]) ",
    "EXPR [ (-1, _311) 57 ]",
    "MEM (id: 4, read at: EXPR [ (1, _311) 0 ], value: EXPR [ (1, _312) 0 ]) ",
    "EXPR [ (-1, _313) 58 ]",
    "MEM (id: 4, read at: EXPR [ (1, _313) 0 ], value: EXPR [ (1, _314) 0 ]) ",
    "EXPR [ (-1, _315) 59 ]",
    "MEM (id: 4, read at: EXPR [ (1, _315) 0 ], value: EXPR [ (1, _316) 0 ]) ",
    "EXPR [ (-1, _317) 60 ]",
    "MEM (id: 4, read at: EXPR [ (1, _317) 0 ], value: EXPR [ (1, _318) 0 ]) ",
    "EXPR [ (-1, _319) 61 ]",
    "MEM (id: 4, read at: EXPR [ (1, _319) 0 ], value: EXPR [ (1, _320) 0 ]) ",
    "EXPR [ (-1, _321) 62 ]",
    "MEM (id: 4, read at: EXPR [ (1, _321) 0 ], value: EXPR [ (1, _322) 0 ]) ",
    "EXPR [ (-1, _323) 63 ]",
    "MEM (id: 4, read at: EXPR [ (1, _323) 0 ], value: EXPR [ (1, _324) 0 ]) ",
    "BLACKBOX::BLAKE3 [(_198, 8), (_200, 8), (_202, 8), (_204, 8), (_206, 8), (_208, 8), (_210, 8), (_212, 8), (_214, 8), (_216, 8), (_218, 8), (_220, 8), (_222, 8), (_224, 8), (_226, 8), (_228, 8), (_230, 8), (_232, 8), (_234, 8), (_236, 8), (_238, 8), (_240, 8), (_242, 8), (_244, 8), (_246, 8), (_248, 8), (_250, 8), (_252, 8), (_254, 8), (_256, 8), (_258, 8), (_260, 8), (_262, 8), (_264, 8), (_266, 8), (_268, 8), (_270, 8), (_272, 8), (_274, 8), (_276, 8), (_278, 8), (_280, 8), (_282, 8), (_284, 8), (_286, 8), (_288, 8), (_290, 8), (_292, 8), (_294, 8), (_296, 8), (_298, 8), (_300, 8), (_302, 8), (_304, 8), (_306, 8), (_308, 8), (_310, 8), (_312, 8), (_314, 8), (_316, 8), (_318, 8), (_320, 8), (_322, 8), (_324, 8)] [_325, _326, _327, _328, _329, _330, _331, _332, _333, _334, _335, _336, _337, _338, _339, _340, _341, _342, _343, _344, _345, _346, _347, _348, _349, _350, _351, _352, _353, _354, _355, _356]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _96) 0 ], EXPR [ 2 ]], outputs: [_357, _358]",
    "BLACKBOX::RANGE [(_357, 31)] []",
    "BLACKBOX::RANGE [(_358, 1)] []",
    "EXPR [ (1, _96) (-2, _357) (-1, _358) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _357) 0 ], EXPR [ 2 ]], outputs: [_359, _360]",
    "BLACKBOX::RANGE [(_359, 31)] []",
    "BLACKBOX::RANGE [(_360, 1)] []",
    "EXPR [ (1, _357) (-2, _359) (-1, _360) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _360) 0 ]], outputs: [_361]",
    "EXPR [ (1, _360, _361) (1, _362) -1 ]",
    "EXPR [ (1, _360, _362) 0 ]",
    "EXPR [ (-32, _362) (-1, _363) 32 ]",
    "BLACKBOX::RANGE [(_363, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _325) 0 ] at: EXPR [ (1, _363) 0 ]) ",
    "EXPR [ (32, _362) (-1, _364) 0 ]",
    "BLACKBOX::RANGE [(_364, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _64) 0 ] at: EXPR [ (1, _364) 0 ]) ",
    "EXPR [ (1, _363) (-1, _365) 1 ]",
    "BLACKBOX::RANGE [(_365, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _326) 0 ] at: EXPR [ (1, _365) 0 ]) ",
    "EXPR [ (1, _364) (-1, _366) 1 ]",
    "BLACKBOX::RANGE [(_366, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _65) 0 ] at: EXPR [ (1, _366) 0 ]) ",
    "EXPR [ (1, _363) (-1, _367) 2 ]",
    "BLACKBOX::RANGE [(_367, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _327) 0 ] at: EXPR [ (1, _367) 0 ]) ",
    "EXPR [ (1, _364) (-1, _368) 2 ]",
    "BLACKBOX::RANGE [(_368, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _66) 0 ] at: EXPR [ (1, _368) 0 ]) ",
    "EXPR [ (1, _363) (-1, _369) 3 ]",
    "BLACKBOX::RANGE [(_369, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _328) 0 ] at: EXPR [ (1, _369) 0 ]) ",
    "EXPR [ (1, _364) (-1, _370) 3 ]",
    "BLACKBOX::RANGE [(_370, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _67) 0 ] at: EXPR [ (1, _370) 0 ]) ",
    "EXPR [ (1, _363) (-1, _371) 4 ]",
    "BLACKBOX::RANGE [(_371, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _329) 0 ] at: EXPR [ (1, _371) 0 ]) ",
    "EXPR [ (1, _364) (-1, _372) 4 ]",
    "BLACKBOX::RANGE [(_372, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _68) 0 ] at: EXPR [ (1, _372) 0 ]) ",
    "EXPR [ (1, _363) (-1, _373) 5 ]",
    "BLACKBOX::RANGE [(_373, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _330) 0 ] at: EXPR [ (1, _373) 0 ]) ",
    "EXPR [ (1, _364) (-1, _374) 5 ]",
    "BLACKBOX::RANGE [(_374, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _69) 0 ] at: EXPR [ (1, _374) 0 ]) ",
    "EXPR [ (1, _363) (-1, _375) 6 ]",
    "BLACKBOX::RANGE [(_375, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _331) 0 ] at: EXPR [ (1, _375) 0 ]) ",
    "EXPR [ (1, _364) (-1, _376) 6 ]",
    "BLACKBOX::RANGE [(_376, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _70) 0 ] at: EXPR [ (1, _376) 0 ]) ",
    "EXPR [ (1, _363) (-1, _377) 7 ]",
    "BLACKBOX::RANGE [(_377, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _332) 0 ] at: EXPR [ (1, _377) 0 ]) ",
    "EXPR [ (1, _364) (-1, _378) 7 ]",
    "BLACKBOX::RANGE [(_378, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _71) 0 ] at: EXPR [ (1, _378) 0 ]) ",
    "EXPR [ (1, _363) (-1, _379) 8 ]",
    "BLACKBOX::RANGE [(_379, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _333) 0 ] at: EXPR [ (1, _379) 0 ]) ",
    "EXPR [ (1, _364) (-1, _380) 8 ]",
    "BLACKBOX::RANGE [(_380, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _72) 0 ] at: EXPR [ (1, _380) 0 ]) ",
    "EXPR [ (1, _363) (-1, _381) 9 ]",
    "BLACKBOX::RANGE [(_381, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _334) 0 ] at: EXPR [ (1, _381) 0 ]) ",
    "EXPR [ (1, _364) (-1, _382) 9 ]",
    "BLACKBOX::RANGE [(_382, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _73) 0 ] at: EXPR [ (1, _382) 0 ]) ",
    "EXPR [ (1, _363) (-1, _383) 10 ]",
    "BLACKBOX::RANGE [(_383, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _335) 0 ] at: EXPR [ (1, _383) 0 ]) ",
    "EXPR [ (1, _364) (-1, _384) 10 ]",
    "BLACKBOX::RANGE [(_384, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _74) 0 ] at: EXPR [ (1, _384) 0 ]) ",
    "EXPR [ (1, _363) (-1, _385) 11 ]",
    "BLACKBOX::RANGE [(_385, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _336) 0 ] at: EXPR [ (1, _385) 0 ]) ",
    "EXPR [ (1, _364) (-1, _386) 11 ]",
    "BLACKBOX::RANGE [(_386, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _75) 0 ] at: EXPR [ (1, _386) 0 ]) ",
    "EXPR [ (1, _363) (-1, _387) 12 ]",
    "BLACKBOX::RANGE [(_387, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _337) 0 ] at: EXPR [ (1, _387) 0 ]) ",
    "EXPR [ (1, _364) (-1, _388) 12 ]",
    "BLACKBOX::RANGE [(_388, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _76) 0 ] at: EXPR [ (1, _388) 0 ]) ",
    "EXPR [ (1, _363) (-1, _389) 13 ]",
    "BLACKBOX::RANGE [(_389, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _338) 0 ] at: EXPR [ (1, _389) 0 ]) ",
    "EXPR [ (1, _364) (-1, _390) 13 ]",
    "BLACKBOX::RANGE [(_390, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _77) 0 ] at: EXPR [ (1, _390) 0 ]) ",
    "EXPR [ (1, _363) (-1, _391) 14 ]",
    "BLACKBOX::RANGE [(_391, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _339) 0 ] at: EXPR [ (1, _391) 0 ]) ",
    "EXPR [ (1, _364) (-1, _392) 14 ]",
    "BLACKBOX::RANGE [(_392, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _78) 0 ] at: EXPR [ (1, _392) 0 ]) ",
    "EXPR [ (1, _363) (-1, _393) 15 ]",
    "BLACKBOX::RANGE [(_393, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _340) 0 ] at: EXPR [ (1, _393) 0 ]) ",
    "EXPR [ (1, _364) (-1, _394) 15 ]",
    "BLACKBOX::RANGE [(_394, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _79) 0 ] at: EXPR [ (1, _394) 0 ]) ",
    "EXPR [ (1, _363) (-1, _395) 16 ]",
    "BLACKBOX::RANGE [(_395, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _341) 0 ] at: EXPR [ (1, _395) 0 ]) ",
    "EXPR [ (1, _364) (-1, _396) 16 ]",
    "BLACKBOX::RANGE [(_396, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _80) 0 ] at: EXPR [ (1, _396) 0 ]) ",
    "EXPR [ (1, _363) (-1, _397) 17 ]",
    "BLACKBOX::RANGE [(_397, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _342) 0 ] at: EXPR [ (1, _397) 0 ]) ",
    "EXPR [ (1, _364) (-1, _398) 17 ]",
    "BLACKBOX::RANGE [(_398, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _81) 0 ] at: EXPR [ (1, _398) 0 ]) ",
    "EXPR [ (1, _363) (-1, _399) 18 ]",
    "BLACKBOX::RANGE [(_399, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _343) 0 ] at: EXPR [ (1, _399) 0 ]) ",
    "EXPR [ (1, _364) (-1, _400) 18 ]",
    "BLACKBOX::RANGE [(_400, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _82) 0 ] at: EXPR [ (1, _400) 0 ]) ",
    "EXPR [ (1, _363) (-1, _401) 19 ]",
    "BLACKBOX::RANGE [(_401, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _344) 0 ] at: EXPR [ (1, _401) 0 ]) ",
    "EXPR [ (1, _364) (-1, _402) 19 ]",
    "BLACKBOX::RANGE [(_402, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _83) 0 ] at: EXPR [ (1, _402) 0 ]) ",
    "EXPR [ (1, _363) (-1, _403) 20 ]",
    "BLACKBOX::RANGE [(_403, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _345) 0 ] at: EXPR [ (1, _403) 0 ]) ",
    "EXPR [ (1, _364) (-1, _404) 20 ]",
    "BLACKBOX::RANGE [(_404, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _84) 0 ] at: EXPR [ (1, _404) 0 ]) ",
    "EXPR [ (1, _363) (-1, _405) 21 ]",
    "BLACKBOX::RANGE [(_405, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _346) 0 ] at: EXPR [ (1, _405) 0 ]) ",
    "EXPR [ (1, _364) (-1, _406) 21 ]",
    "BLACKBOX::RANGE [(_406, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _85) 0 ] at: EXPR [ (1, _406) 0 ]) ",
    "EXPR [ (1, _363) (-1, _407) 22 ]",
    "BLACKBOX::RANGE [(_407, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _347) 0 ] at: EXPR [ (1, _407) 0 ]) ",
    "EXPR [ (1, _364) (-1, _408) 22 ]",
    "BLACKBOX::RANGE [(_408, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _86) 0 ] at: EXPR [ (1, _408) 0 ]) ",
    "EXPR [ (1, _363) (-1, _409) 23 ]",
    "BLACKBOX::RANGE [(_409, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _348) 0 ] at: EXPR [ (1, _409) 0 ]) ",
    "EXPR [ (1, _364) (-1, _410) 23 ]",
    "BLACKBOX::RANGE [(_410, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _87) 0 ] at: EXPR [ (1, _410) 0 ]) ",
    "EXPR [ (1, _363) (-1, _411) 24 ]",
    "BLACKBOX::RANGE [(_411, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _349) 0 ] at: EXPR [ (1, _411) 0 ]) ",
    "EXPR [ (1, _364) (-1, _412) 24 ]",
    "BLACKBOX::RANGE [(_412, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _88) 0 ] at: EXPR [ (1, _412) 0 ]) ",
    "EXPR [ (1, _363) (-1, _413) 25 ]",
    "BLACKBOX::RANGE [(_413, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _350) 0 ] at: EXPR [ (1, _413) 0 ]) ",
    "EXPR [ (1, _364) (-1, _414) 25 ]",
    "BLACKBOX::RANGE [(_414, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _89) 0 ] at: EXPR [ (1, _414) 0 ]) ",
    "EXPR [ (1, _363) (-1, _415) 26 ]",
    "BLACKBOX::RANGE [(_415, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _351) 0 ] at: EXPR [ (1, _415) 0 ]) ",
    "EXPR [ (1, _364) (-1, _416) 26 ]",
    "BLACKBOX::RANGE [(_416, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _90) 0 ] at: EXPR [ (1, _416) 0 ]) ",
    "EXPR [ (1, _363) (-1, _417) 27 ]",
    "BLACKBOX::RANGE [(_417, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _352) 0 ] at: EXPR [ (1, _417) 0 ]) ",
    "EXPR [ (1, _364) (-1, _418) 27 ]",
    "BLACKBOX::RANGE [(_418, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _91) 0 ] at: EXPR [ (1, _418) 0 ]) ",
    "EXPR [ (1, _363) (-1, _419) 28 ]",
    "BLACKBOX::RANGE [(_419, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _353) 0 ] at: EXPR [ (1, _419) 0 ]) ",
    "EXPR [ (1, _364) (-1, _420) 28 ]",
    "BLACKBOX::RANGE [(_420, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _92) 0 ] at: EXPR [ (1, _420) 0 ]) ",
    "EXPR [ (1, _363) (-1, _421) 29 ]",
    "BLACKBOX::RANGE [(_421, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _354) 0 ] at: EXPR [ (1, _421) 0 ]) ",
    "EXPR [ (1, _364) (-1, _422) 29 ]",
    "BLACKBOX::RANGE [(_422, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _93) 0 ] at: EXPR [ (1, _422) 0 ]) ",
    "EXPR [ (1, _363) (-1, _423) 30 ]",
    "BLACKBOX::RANGE [(_423, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _355) 0 ] at: EXPR [ (1, _423) 0 ]) ",
    "EXPR [ (1, _364) (-1, _424) 30 ]",
    "BLACKBOX::RANGE [(_424, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _94) 0 ] at: EXPR [ (1, _424) 0 ]) ",
    "EXPR [ (1, _363) (-1, _425) 31 ]",
    "BLACKBOX::RANGE [(_425, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _356) 0 ] at: EXPR [ (1, _425) 0 ]) ",
    "EXPR [ (1, _364) (-1, _426) 31 ]",
    "BLACKBOX::RANGE [(_426, 6)] []",
    "MEM (id: 3, write EXPR [ (1, _95) 0 ] at: EXPR [ (1, _426) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _134) 0 ], value: EXPR [ (1, _427) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _199) 0 ], value: EXPR [ (1, _428) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _201) 0 ], value: EXPR [ (1, _429) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _203) 0 ], value: EXPR [ (1, _430) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _205) 0 ], value: EXPR [ (1, _431) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _207) 0 ], value: EXPR [ (1, _432) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _209) 0 ], value: EXPR [ (1, _433) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _211) 0 ], value: EXPR [ (1, _434) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _213) 0 ], value: EXPR [ (1, _435) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _215) 0 ], value: EXPR [ (1, _436) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _217) 0 ], value: EXPR [ (1, _437) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _219) 0 ], value: EXPR [ (1, _438) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _221) 0 ], value: EXPR [ (1, _439) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _223) 0 ], value: EXPR [ (1, _440) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _225) 0 ], value: EXPR [ (1, _441) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _227) 0 ], value: EXPR [ (1, _442) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _229) 0 ], value: EXPR [ (1, _443) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _231) 0 ], value: EXPR [ (1, _444) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _233) 0 ], value: EXPR [ (1, _445) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _235) 0 ], value: EXPR [ (1, _446) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _237) 0 ], value: EXPR [ (1, _447) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _239) 0 ], value: EXPR [ (1, _448) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _241) 0 ], value: EXPR [ (1, _449) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _243) 0 ], value: EXPR [ (1, _450) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _245) 0 ], value: EXPR [ (1, _451) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _247) 0 ], value: EXPR [ (1, _452) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _249) 0 ], value: EXPR [ (1, _453) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _251) 0 ], value: EXPR [ (1, _454) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _253) 0 ], value: EXPR [ (1, _455) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _255) 0 ], value: EXPR [ (1, _456) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _257) 0 ], value: EXPR [ (1, _457) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _259) 0 ], value: EXPR [ (1, _458) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _261) 0 ], value: EXPR [ (1, _459) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _263) 0 ], value: EXPR [ (1, _460) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _265) 0 ], value: EXPR [ (1, _461) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _267) 0 ], value: EXPR [ (1, _462) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _269) 0 ], value: EXPR [ (1, _463) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _271) 0 ], value: EXPR [ (1, _464) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _273) 0 ], value: EXPR [ (1, _465) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _275) 0 ], value: EXPR [ (1, _466) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _277) 0 ], value: EXPR [ (1, _467) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _279) 0 ], value: EXPR [ (1, _468) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _281) 0 ], value: EXPR [ (1, _469) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _283) 0 ], value: EXPR [ (1, _470) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _285) 0 ], value: EXPR [ (1, _471) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _287) 0 ], value: EXPR [ (1, _472) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _289) 0 ], value: EXPR [ (1, _473) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _291) 0 ], value: EXPR [ (1, _474) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _293) 0 ], value: EXPR [ (1, _475) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _295) 0 ], value: EXPR [ (1, _476) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _297) 0 ], value: EXPR [ (1, _477) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _299) 0 ], value: EXPR [ (1, _478) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _301) 0 ], value: EXPR [ (1, _479) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _303) 0 ], value: EXPR [ (1, _480) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _305) 0 ], value: EXPR [ (1, _481) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _307) 0 ], value: EXPR [ (1, _482) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _309) 0 ], value: EXPR [ (1, _483) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _311) 0 ], value: EXPR [ (1, _484) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _313) 0 ], value: EXPR [ (1, _485) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _315) 0 ], value: EXPR [ (1, _486) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _317) 0 ], value: EXPR [ (1, _487) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _319) 0 ], value: EXPR [ (1, _488) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _321) 0 ], value: EXPR [ (1, _489) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _323) 0 ], value: EXPR [ (1, _490) 0 ]) ",
    "BLACKBOX::BLAKE3 [(_427, 8), (_428, 8), (_429, 8), (_430, 8), (_431, 8), (_432, 8), (_433, 8), (_434, 8), (_435, 8), (_436, 8), (_437, 8), (_438, 8), (_439, 8), (_440, 8), (_441, 8), (_442, 8), (_443, 8), (_444, 8), (_445, 8), (_446, 8), (_447, 8), (_448, 8), (_449, 8), (_450, 8), (_451, 8), (_452, 8), (_453, 8), (_454, 8), (_455, 8), (_456, 8), (_457, 8), (_458, 8), (_459, 8), (_460, 8), (_461, 8), (_462, 8), (_463, 8), (_464, 8), (_465, 8), (_466, 8), (_467, 8), (_468, 8), (_469, 8), (_470, 8), (_471, 8), (_472, 8), (_473, 8), (_474, 8), (_475, 8), (_476, 8), (_477, 8), (_478, 8), (_479, 8), (_480, 8), (_481, 8), (_482, 8), (_483, 8), (_484, 8), (_485, 8), (_486, 8), (_487, 8), (_488, 8), (_489, 8), (_490, 8)] [_491, _492, _493, _494, _495, _496, _497, _498, _499, _500, _501, _502, _503, _504, _505, _506, _507, _508, _509, _510, _511, _512, _513, _514, _515, _516, _517, _518, _519, _520, _521, _522]",
    "EXPR [ (1, _97) (-1, _491) 0 ]",
    "EXPR [ (1, _98) (-1, _492) 0 ]",
    "EXPR [ (1, _99) (-1, _493) 0 ]",
    "EXPR [ (1, _100) (-1, _494) 0 ]",
    "EXPR [ (1, _101) (-1, _495) 0 ]",
    "EXPR [ (1, _102) (-1, _496) 0 ]",
    "EXPR [ (1, _103) (-1, _497) 0 ]",
    "EXPR [ (1, _104) (-1, _498) 0 ]",
    "EXPR [ (1, _105) (-1, _499) 0 ]",
    "EXPR [ (1, _106) (-1, _500) 0 ]",
    "EXPR [ (1, _107) (-1, _501) 0 ]",
    "EXPR [ (1, _108) (-1, _502) 0 ]",
    "EXPR [ (1, _109) (-1, _503) 0 ]",
    "EXPR [ (1, _110) (-1, _504) 0 ]",
    "EXPR [ (1, _111) (-1, _505) 0 ]",
    "EXPR [ (1, _112) (-1, _506) 0 ]",
    "EXPR [ (1, _113) (-1, _507) 0 ]",
    "EXPR [ (1, _114) (-1, _508) 0 ]",
    "EXPR [ (1, _115) (-1, _509) 0 ]",
    "EXPR [ (1, _116) (-1, _510) 0 ]",
    "EXPR [ (1, _117) (-1, _511) 0 ]",
    "EXPR [ (1, _118) (-1, _512) 0 ]",
    "EXPR [ (1, _119) (-1, _513) 0 ]",
    "EXPR [ (1, _120) (-1, _514) 0 ]",
    "EXPR [ (1, _121) (-1, _515) 0 ]",
    "EXPR [ (1, _122) (-1, _516) 0 ]",
    "EXPR [ (1, _123) (-1, _517) 0 ]",
    "EXPR [ (1, _124) (-1, _518) 0 ]",
    "EXPR [ (1, _125) (-1, _519) 0 ]",
    "EXPR [ (1, _126) (-1, _520) 0 ]",
    "EXPR [ (1, _127) (-1, _521) 0 ]",
    "EXPR [ (1, _128) (-1, _522) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "ndnNTlxJEgXgd6k1i8z4T7/KaGRhG7eQELYwjDSy/O5z88Y51e4Fo+5aZRo4p+pDFTgofl6+PHx6++Pj4/PXbz8uH/718/Lp5fHp6fGPj0/fPt+/Pn57Pj7689fdhf/8+Pry8HB86PLb54/U9/uXh+fXy4fnt6enu8t/7p/ezi/68f3++Txf71+Oz467y8Pzl+M8Cr8+Pj3s26+7P9Pj/WgasnPOa9r/Gp/vx3UI8jr0lnwo8yk35a+Pn3VD3pV5t1se3+c1L+uWfAbz66bH92s+b/n+u+j1+d/0/Yu8Pv4tzz+ujx/+fv7/FEyNyVewZlwr5vrbTyE5PlHjBkIqRyjt/ZeAvV8gYy40yJA/Cf4PGnRcG7R+b/j38Y/7z48vf/m5c5myjom5u0wdOCdOwamXD7ZPw+k442jdZ+Ks49u2z9WnDZwT59GX+1ScR1/t8+hb+0SfJb7+6JtjX1YHfHTAZwdcOuDaATcE3BEIBBKBQgDPMAYCMTsQ0oHQDoR1IByBYCARKARWB3J0IGFOQSCBTqAT6AQ6gU6iE+gCuoAuoAvoIrqALqAL6AK6gF5EL6AX0AvoBfQCehG9gF5Ar0bLaPTx2j0Dxwu3A8fr7wzIaLQMRyAQSASKgUbLbLTMRststMxGywRapiMQCCQChUCjRYAWabRIo0UaLdJoEUcgGEgECgGgFWgFWolWoBVoBRrjIgq0Eq1AG9AGtAFtQBvRBrQBbUAb0Aa0E+1AO9AOtAPtQDvRDrQD7UAH0AF0EB1AB9ABdAAdQAfRAXQCnUAn0Al0Ep1AJ9AJdAKdQBfRBXQBXUAX0AV0EV1AF9AF9AJ6Ab2IXkAvoBfQC+gF9CJ6NVpHo3U0WkejdTRaB9A6HIFAIBEoBBqtE2idjdbZaJ2N1tlonY5AMJAIFAKNVmm0SqNVgFZptEqjVRyBQCARKAaAVqD3wOxNSc+JOS/Ki/HivAQvyUvxsnDZc9MXNhubjc3GZmOzsdnYbGw2Njubnc3OZmezs9nZ7Gx2Njubnc3B5mBzsDnYHGwONgebg83B5mBzsjnZnGxONiebk83J5mRzsjnZXGwuNhebi83F5mJzsbnYXGwuNi82LzYvNi82LzYvNi82LzYvNi802xi8TF6EF+XFeHFegpfkpXhh82TzZPNk82TzZPNk82TzZPNk82SzsFnYLGwWNgubhc3CZmGzsFnYrGzmDBpn0DiDxhk0zqBxBo0zaJxB4wwaZ9A4g8YZNM6gcQaNM2icQeMMGmfQOIPGGTTOoHEGjTNonEHjDBpn0DiDxhm0cwaPvdbOGTwvkxfhRc/V1/YInqfjDJx5rsC2x+88V59Y/2zP3nnK+cPQsP3ZHrzz9PNnoe2xW/tMfH3h6/dzPH542p65HdgjtwN74nZgD9wO7HnbgXPczkAgkAgUAqsDq5dyOydtB1Zv5bYHbQf2nO3AHrMzEAgkA4XAOgO+R2zts80+2uznfI19abQPRyAQSAQKAaB9Ntpno3022mejfTbapzMQCCQChUCjXRrtArRLo10a7dJoF0cgEEgGCgGgFWgFWoFWohVoBVqBxi9Ljl+WXIk2oA1oA9qANqCNaAPagDagDWgH2ol2oB1oB9qBdqCdaAfagQ6gA+gAOogOoAPoADqADqCD6AQ6gU6gE+gEOolOoBPoBDqBLqCL6AK6gC6gC+gCuoguoAvoBfQCegG9iF5AL6AX0AvoBfQCOkajYzQ6RqNjNDpGo2M4A4FAIlAINDpmo2MCHbPRMRsds9ExHYFAIBkoBBod0uiQRoc0OgTokEaHOAKBQCJQCBCtQCvQCrQCrUAr0Qq0Aq1AK9B4dyGMaLy9EAa0AW1AG9BGtAFtQDvQDrQD7UQ70A60A+1AO9BOdAAdQHPHC+54wR0vuOMFd7zgjhfc8YI7XnDHC+54wR0vuOMFd7zgjhfc8YI7XnDHC+54wR0vuOMFd7zgjhfc8YI7XnDHC+54wR0vuOMFd7zgjhfc8YI7XnDHC+54wR0vuOMFd7zgjpfc8ZI7XnLHS+54yR0vueMld7zkjpfc8ZI7XnLHS+54yR0vueMld7zkjpfc8ZI7XnLHS+54yR0vueMld7zkjpfc8ZI7XnLHy/P/JduX4mXhcu5452XyIrwoL8aL8xK8sFnZrGw2Nhubjc3GZmOzsdnYbGw2Nhubnc3OZmezs9nZ7Gx2Njubzx3Pfu03R18e7z89PfzoP6x8fXv+/NvfWV7/+52f4V9ivr98+/zw5e3lYb83en7ueLf0fw==",
  "file_map": {
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{\n    if crate::runtime::is_unconstrained() {\n        // Temporary measure while Barretenberg is main proving system.\n        // Please open an issue if you're working on another proving system and running into problems due to this.\n        crate::static_assert(\n            N <= 1024,\n            \"Barretenberg cannot prove blake3 hashes with inputs larger than 1024 bytes\",\n        );\n    }\n    __blake3(input)\n}\n\n#[foreign(blake3)]\nfn __blake3<let N: u32>(input: [u8; N]) -> [u8; 32] {}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::hash::Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: $crate::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher {\n    type H: Hasher;\n\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    type H = H;\n\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u8 as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u16 as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u32 as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as u64 as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "50": {
      "source": "fn main(leaf: [u8; 32], path: [u8; 64], index: u32, root: [u8; 32]) {\n    compute_root(leaf, path, index, root);\n}\n\nfn compute_root(leaf: [u8; 32], path: [u8; 64], _index: u32, root: [u8; 32]) {\n    let mut current = leaf;\n    let mut index = _index;\n\n    for i in 0..2 {\n        let mut hash_input = [0; 64];\n        let offset = i * 32;\n        let is_right = (index & 1) != 0;\n        let a = if is_right { 32 } else { 0 };\n        let b = if is_right { 0 } else { 32 };\n\n        for j in 0..32 {\n            hash_input[j + a] = current[j];\n            hash_input[j + b] = path[offset + j];\n        }\n\n        current = std::hash::blake3(hash_input);\n        index = index >> 1;\n    }\n\n    // Regression for issue #4258\n    assert(root == current);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
