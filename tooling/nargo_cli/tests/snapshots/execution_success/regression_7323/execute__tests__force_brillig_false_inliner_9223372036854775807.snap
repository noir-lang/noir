---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "16078247100671166886": {
        "error_kind": "fmtstring",
        "length": 28,
        "item_types": []
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _6",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -1 })], outputs: [Simple(Witness(1))]",
    "EXPR [ (1, _0, _1) (-1, _1) (1, _2) -1 ]",
    "EXPR [ (1, _0, _2) (-1, _2) 0 ]",
    "EXPR [ (-1, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -2 })], outputs: [Simple(Witness(3))]",
    "EXPR [ (1, _0, _3) (-2, _3) (1, _4) -1 ]",
    "EXPR [ (1, _0, _4) (-2, _4) 0 ]",
    "EXPR [ (-1, _4) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -3 })], outputs: [Simple(Witness(5))]",
    "EXPR [ (1, _0, _5) (-3, _5) (1, _6) -1 ]",
    "EXPR [ (1, _0, _6) (-3, _6) 0 ]",
    "EXPR [ (-1, _6) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "tZLdzoMgDIbvpcccKOhw3sqXLwa1LiQEDYMli/HeV5ns58BkO9hJCy0Pbymdocc2nBpth/EM9d8MrdPG6FNjxk55PVqKzguDtG28Q6QQvOSJmpRD66G2wRgGF2VCPHSelI3eK0fZjAHanjxdOGiD62phTzrbR3lVbLDg/IGX73y+z0u+4VI+6EJ8qi6ETOqy3FMXP1M/psYVvNpTL79X/6ed6rR7+2sQ1GwGRexmGe0hWkkQgyq+8xhtnt1dDvVhWeWdVq3BbWKGYLuXAfLXKWXSiE1u7LAPDtcCYo5KugE=",
  "file_map": {
    "43": {
      "source": "pub fn panic<T, U, let N: u32>(message: fmtstr<N, T>) -> U {\n    assert(false, message);\n    crate::mem::zeroed()\n}\n",
      "path": "std/panic.nr"
    },
    "50": {
      "source": "// This program lead to panics previously due to the compiler lowering it to multiple blocks\n// which all jumped to the same end block. It runs now due to the compiler lowering to the\n// equivalent of a nested series of if-else instead.\nfn main(x: Field) {\n    match x {\n        1 => panic(f\"Branch 1 should not be taken\"),\n        2 => panic(f\"Branch 2 should not be taken\"),\n        3 => panic(f\"Branch 3 should not be taken\"),\n        _ => (),\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
