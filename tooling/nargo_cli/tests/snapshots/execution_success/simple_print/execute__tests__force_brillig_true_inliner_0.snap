---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2a247TMBCGnTY9OG0hTffA9imSptuUu17Ag4QtlbhBCPEA+3DcwFOhaD2pO0xQof+wvtiRVjk4/eb3eDyxo43Mk0Xur7HYHXvmd6Nndu6YX2YFkJVr6oyUdLZC/fPIdAf+pztaczpITXsf2GEraELxt/l6Y4X+AfWX1mMq8FfEj3X4+chx3j2e8g3zOzOnk9f/DbX5E/m9axu7djp/5c4t42mMu68JHbeFoJ98TVxfv7O++nHFTfTqg5QjOP6qzcGBCn/T6h/q8N8Sf6TD/0j8sQ5/TXyrwi9r4ic6+tu5ONHh3xN/qsN/IP5MhV/tqX5SbSQfxhxrx2vvPq6OFYW0Fuize77/hGlFrwci5o/08PhQraXYpYLWVGjjNTgV/KSCH4kVA1kDIGsIZI2ArDGQhYy9DVRXAmQhc2ICZE2BrFDzi94bUi1vbOeO+WVWWME3kJ9TLOZCLKTa3Iwt1bUvXz99/maYxd65Hxi6jtg5OU7Zc2kHz3Tw/OtU+M05L+S5dx+5oYyYP2PkFzL5/18v5HMHnWKXCVpToY2PcSb4yQQ/EovabAd7B4nJppA2lzh+tZJyDMhvN0SZCn/VLpgXOvGviH+lE592w3Wto39L/BsVftnmz61OfHKa42/M0Xh9vPPu4+pRuT63PpL/hGnVqo93TA+PD6+PS0FrKrTxDctS8LMU/EisGMgaAFlDIGsEZI2BLGTsbaC6IiCrFygL2cc5kIUcxyxQXVMgawJkIWvOAsi6ArKugaxQa+ENkBXqHELmBLJ+3QJZyLkdaq6+rAufr0a/rAv/jpUAWcicQNYJ5Nok1PyaKbIigSV9X6Rne8Lz0n77nz9Cc2FdAkr2+z99jOYdlbiGXZcCp0lcmuzx47EN9WGj2j597W+s7/gDc3zp+BZ77f7zP9y1P/npGF+g81DVxaGsD/V9vd+vH+qM8Rvz/xPnF/rnVE57KAAA",
  "debug_symbols": "tdbNiuJQEIbhe8naRepU1fnpW2kaiRqbQIiS1oFBvPc58fvs0YWzGXrjq8Z6NGBFL82u35w/18O0P3w1b++XZjMP4zh8rsfDtjsNh6k+e2na5Ua8edNVIxFJSEbKLaFFBAmIIoZACVAClAAlQFEoCkWhKBSFolAUikJRKArFoBgUg2JQDIpBMSgGxaAYFIfiUByKQ3EoDsWhOBSH4lAilAglQolVsRpDHIlIVaQmI+WW1CKCBEQRQxypSqpJSEbKLblFBAmIIoY4AiVDyVAylAKlQClQCpQCpUApUAqUAqVAkbZlhQ2sssY6G9nEZpae0BN6Qk/oCT2hJ/SEntATeoFeoBfoBXqBXqAX6AV6gV6gp/SUntJTekpP6Sk9paf0lJ7RM3pGz+gZPaNn9Iye0TN6Ts/pOT2n5/ScntNzek7P6UV6kV6kF+lFepFepBfpRXqRXqKX6CV6iV6il+hxEYSbIFwF4S4Il0G4DcJ1EO6DcCGEGyFcCeFOCJdCuBXCtRDuhSyLkZcqW718va6a++V1fZr7frm6Plxv61X42M39dGrepvM4rppf3Xi+vejr2E23nrq5Hm1XTT/taiu4H8Z+uXdd/Z1uX4/WbzCH63fqe9yf5+X1fC7C+RL0ez6Ep/nwc/PJEudTbl/N/+v8ze7nH+3V+ft/fv74c/Ovz/+jPuq2w/z0C35dpHnoNmPPh/vztH04evp9vB+5/wM4zodtvzvP/SI9/A2ot+9S4iq08nFd3u8P",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32, T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Simple program for testing the logging\n// of single witnesses and witness arrays.\nfn main(x: Field, y: pub Field) {\n    std::println(x);\n    std::println([x, y]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
