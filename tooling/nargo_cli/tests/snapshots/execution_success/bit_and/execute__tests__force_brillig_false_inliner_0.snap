---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _29",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(4)), Simple(Witness(5))]",
    "BLACKBOX::RANGE [(_4, 246)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "EXPR [ (1, _0) (-256, _4) (-1, _5) 0 ]",
    "EXPR [ (-1, _4) (-1, _6) 85500948718122168836900022442411230814642048439125134155071110103811751936 ]",
    "BLACKBOX::RANGE [(_6, 246)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(4))], q_c: 85500948718122168836900022442411230814642048439125134155071110103811751936 })], outputs: [Simple(Witness(7))]",
    "EXPR [ (-1, _4, _7) (85500948718122168836900022442411230814642048439125134155071110103811751936, _7) (1, _8) -1 ]",
    "EXPR [ (-1, _4, _8) (85500948718122168836900022442411230814642048439125134155071110103811751936, _8) 0 ]",
    "EXPR [ (1, _5, _8) (1, _8, _8) (-1, _9) 0 ]",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(10)), Simple(Witness(11))]",
    "BLACKBOX::RANGE [(_10, 246)] []",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "EXPR [ (1, _1) (-256, _10) (-1, _11) 0 ]",
    "EXPR [ (-1, _10) (-1, _12) 85500948718122168836900022442411230814642048439125134155071110103811751936 ]",
    "BLACKBOX::RANGE [(_12, 246)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(10))], q_c: 85500948718122168836900022442411230814642048439125134155071110103811751936 })], outputs: [Simple(Witness(13))]",
    "EXPR [ (-1, _10, _13) (85500948718122168836900022442411230814642048439125134155071110103811751936, _13) (1, _14) -1 ]",
    "EXPR [ (-1, _10, _14) (85500948718122168836900022442411230814642048439125134155071110103811751936, _14) 0 ]",
    "EXPR [ (1, _11, _14) (1, _14, _14) (-1, _15) 0 ]",
    "BLACKBOX::RANGE [(_15, 1)] []",
    "BLACKBOX::AND [(_5, 8), (_11, 8)] [_16]",
    "EXPR [ (-1, _5) (1, _16) 0 ]",
    "EXPR [ (1, _0) 0 ]",
    "EXPR [ (1, _1) -16 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(17)), Simple(Witness(18))]",
    "BLACKBOX::RANGE [(_17, 246)] []",
    "BLACKBOX::RANGE [(_18, 8)] []",
    "EXPR [ (1, _2) (-256, _17) (-1, _18) 0 ]",
    "EXPR [ (-1, _17) (-1, _19) 85500948718122168836900022442411230814642048439125134155071110103811751936 ]",
    "BLACKBOX::RANGE [(_19, 246)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(17))], q_c: 85500948718122168836900022442411230814642048439125134155071110103811751936 })], outputs: [Simple(Witness(20))]",
    "EXPR [ (-1, _17, _20) (85500948718122168836900022442411230814642048439125134155071110103811751936, _20) (1, _21) -1 ]",
    "EXPR [ (-1, _17, _21) (85500948718122168836900022442411230814642048439125134155071110103811751936, _21) 0 ]",
    "EXPR [ (1, _18, _21) (1, _21, _21) (-1, _22) 0 ]",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(23)), Simple(Witness(24))]",
    "BLACKBOX::RANGE [(_23, 246)] []",
    "BLACKBOX::RANGE [(_24, 8)] []",
    "EXPR [ (1, _3) (-256, _23) (-1, _24) 0 ]",
    "EXPR [ (-1, _23) (-1, _25) 85500948718122168836900022442411230814642048439125134155071110103811751936 ]",
    "BLACKBOX::RANGE [(_25, 246)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(23))], q_c: 85500948718122168836900022442411230814642048439125134155071110103811751936 })], outputs: [Simple(Witness(26))]",
    "EXPR [ (-1, _23, _26) (85500948718122168836900022442411230814642048439125134155071110103811751936, _26) (1, _27) -1 ]",
    "EXPR [ (-1, _23, _27) (85500948718122168836900022442411230814642048439125134155071110103811751936, _27) 0 ]",
    "EXPR [ (1, _24, _27) (1, _27, _27) (-1, _28) 0 ]",
    "BLACKBOX::RANGE [(_28, 1)] []",
    "BLACKBOX::AND [(_18, 8), (_24, 8)] [_29]",
    "EXPR [ (-1, _18) (1, _29) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "nZTRioMwEEX/Jc8+JJNEY39lWUpq0yIElVQLS+m/7zTXdNuHheLLHDWeq2GG3MQxHJbzvh9O40Xsvm7ikPoY+/M+jp2f+3Hgp7d7Jcrtfk4h8CPxss7W5FMYZrEblhgrcfVxyS9dJj9kzj7xqqxEGI5MDjz1MTyu7tWfLf9XlatXWbX6qduPfVJ69YnkFl/b4lva5Jvi12aDr035vjbtBt/Isn+jtuzf6NI8o5stvlXFr90m//l99/7/33znuz69TayQPCiVULlSrjpXk6vNtc61ydXl2sJaZbaJQYAGDGCBGmgAB7QZJAGkEKdwB4hTeBCIU7ifZAFO4emmBnBAm6EloAACNGAACyBFc0rDcECbYSSgAAI0YAAL1ABSDKc4Bqc8hu7qU+8PMaxnwmkZupcjYv6Zyko5RKY0duG4pPBoTl7jdv0C",
  "file_map": {
    "50": {
      "source": "// You can only do bit operations with integers.\n// (Kobi/Daira/Circom/#37) https://github.com/iden3/circom/issues/37\nfn main(x: Field, y: Field, a: Field, b: Field) {\n    let x_as_u8 = x as u8;\n    let y_as_u8 = y as u8;\n\n    assert((x_as_u8 & y_as_u8) == x_as_u8);\n    //bitwise and with 1 bit:\n    let flag = (x == 0) & (y == 16);\n    assert(flag);\n    //bitwise and with odd bits:\n    let a_as_u8 = a as u8;\n    let b_as_u8 = b as u8;\n    assert((a_as_u8 & b_as_u8) == a_as_u8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
