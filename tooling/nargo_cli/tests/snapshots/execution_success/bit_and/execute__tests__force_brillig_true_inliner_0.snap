---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 15 }, Call { location: 16 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 50 }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(6), bit_size: Field }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Cast { destination: Relative(7), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(7), bit_size: Field }, Cast { destination: Relative(7), source: Relative(5), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(5), op: And, bit_size: U8, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 28 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(5), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(1), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 33 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(1), bit_size: Field, value: 16 }, BinaryFieldOp { destination: Relative(5), op: Equals, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 38 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U8) }, Cast { destination: Relative(1), source: Relative(2), bit_size: Field }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(3), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(1), source: Relative(3), bit_size: Field }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(1), op: And, bit_size: U8, lhs: Relative(2), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U8, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 49 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 55 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "ndPNioMwFAXgd8naRf41vkopJbWxBEKUVAcG8d3n6jUduxgYsvFT4zkxShbycPf5efOxH16kvSzknnwI/nkLQ2cnP0S4uxC6HVhNWlYR1iBmh8MQBxjCEUFaAUjSSkAhGqkRaFGA2REUYQhHBCIRhWikRqBFA2ZHUgRaaoAjAoGWBoAWA2ikRqDFrGtF8ppvU3JuW/LpI8CnGW1ycSJtnEOoyJcN8/7Qa7Rxd7IJRmlFXHyAUNj74LaztfpN07+jrNFHmBnxjqt/5zkTR55zWpIXKucVL8rLnNeyIC9knl9IU5CXNK9fspL1S5F/nhR1SV6xnNdNUf49f/P5/le4sp1PH9ty3ZqSt/fgjst+jt1pdPoe80je1mMaOveYk9uaTnsbjheYXanrus32Aw==",
  "file_map": {
    "50": {
      "source": "// You can only do bit operations with integers.\n// (Kobi/Daira/Circom/#37) https://github.com/iden3/circom/issues/37\nfn main(x: Field, y: Field, a: Field, b: Field) {\n    let x_as_u8 = x as u8;\n    let y_as_u8 = y as u8;\n\n    assert((x_as_u8 & y_as_u8) == x_as_u8);\n    //bitwise and with 1 bit:\n    let flag = (x == 0) & (y == 16);\n    assert(flag);\n    //bitwise and with odd bits:\n    let a_as_u8 = a as u8;\n    let b_as_u8 = b as u8;\n    assert((a_as_u8 & b_as_u8) == a_as_u8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
