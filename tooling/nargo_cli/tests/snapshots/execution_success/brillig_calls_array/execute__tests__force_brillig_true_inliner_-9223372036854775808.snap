---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VXTY/TMBCdfHk3RVUruCFxgwO3ZJNu2gusRMv2J3BChC7lxIk/EIk/TsN62smL4wTWPjBS5CSevDdvMh4nAT1aeDoCfR7rMRBjRF3juTs9Zk+z3CFW5ivG4D+IMfQQ4x+L4OWHNGws6pceUz2GYj5yKDoFXpf466zcpAZ9DuMvUsipL/zID352pXE+Nhd81EJiZD98JhI+98LnfsBnL3z24MOaPdXEreecFnPqrzPWwtyxH+4yAD4CnQT8M/Jav3kAfBwP5ofP5+zTXOIJYC5u+jp4Lmm6Olq7Ph0vhR/WVij83ojzt/rccz1uPPeQ7IVFM9+7auhs5zUv7nFeOc/X0h/mUjEXN12emb6OBY/E4jgS8H+trxd6VOIZfn5p4FfA34nbcA/zkhr8U4O/Oh2v9PkzuuybH5oLno99c+sH/4bxd37wizZH7Rp7r/EW1K9L7Jm+9kDsUVybyBmKd449XPa3BO7x11irdwf6ZA+09cUlDa9hz3vKintmQn3jOQW6iLp7kNQoTcbd5mcvcNEPOWWtKMiFj159so2tVky1i7XwDuJM/MSZPRe4BFyyP8WNe/5q/bimWuO9IaH+u5f8Cfhv9fXMoCN+QpzHqs6PRX2sV/XDQ3moMU+thSJPrvnrqlgfbspD9XVV1MXtKL/skZ77YDmnfi9jwx7wL+tcfo99Ebjoh5xyXSF/BJzYP3n/XZC5L0issW/ULWDJ5+MJWDZu1qUG/BkvAf9Pemxz2gDmWG52oMcWn2mfQs0mbjXgH4Ie9v9s0GP7Zsc1YtMuawvrwvTP+7c1hu9ekXlviEA7+3+nvvYp9dTathnWM6U2bXqSET1DtfnDoicZ0bOz6MEeEDjWEwzo+WnQM+Vf39MeP/lf//wvReZavHMTT257t0P/+u2cMsS6NMzhulQGHmXgMWHFDrEC0DPUp1x/S5SrujrUVZ5vyvxbma/GviV+A3miIh4xGAAA",
  "debug_symbols": "pZXdjoIwEIXfpddcdKb/vooxBrVuSAgahE02hnffKeOs7iZ7U2/4TsXvFAopd3XKh/lj3w3ny01ttnd1GLu+7z72/eXYTt1loF/vSpeDoyM0ygEDGYZhGY7hGUFtkBAZaYXXDFgRSDcEy3AMzwiMyEgrIumWAAy6CEcwDGrxBMfwjMCglkBIKxK1RAIwkGEYJCRCZJAAulGgtQSQgBLKGkAJVkJZByzBSwgSooTSTHcEoCWUZlsCSjASrAQnwUsIEqKE9AioJUgzSjNKM0ozrs3L0ih59PtpzLk8+Zd3gd6QazvmYVKbYe77Rn22/bz+6XZth5VTO9JZWpg8nIhUeO76XNLSPG39vwrRPWRI6Ud3FT5qW+GblB6+1aHCt+Vpsg9VPsriWbTvzV/nYxDfwHvzV/lGi2+q1v/Fh6r54emH93ysmh+ffnjP/7P+Oxq1x278tbsvpWns2kOfH8PzPBxfzk5fVzkjX4freDnm0zzm0vT8RNCmskXfGL8rGxwNvGl8LAPagLaAsQGjd0u5kG8=",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is brillig calls passing arrays around\nfn main(x: [u32; 3]) {\n    // Safety: testing context\n    unsafe {\n        assert(entry_point(x) == 9);\n        another_entry_point(x);\n    }\n}\n\nunconstrained fn inner(x: [u32; 3]) -> [u32; 3] {\n    [x[0] + 1, x[1] + 1, x[2] + 1]\n}\n\nunconstrained fn entry_point(x: [u32; 3]) -> u32 {\n    let y = inner(x);\n    y[0] + y[1] + y[2]\n}\n\nunconstrained fn nested_fn_that_allocates(value: u32) -> u32 {\n    let x = [value, value, value];\n    let y = inner(x);\n    y[0] + y[1] + y[2]\n}\n\nunconstrained fn another_entry_point(x: [u32; 3]) {\n    assert(x[0] == 1);\n    assert(x[1] == 2);\n    assert(x[2] == 3);\n    assert(nested_fn_that_allocates(1) == 6);\n    // x should be unchanged\n    assert(x[0] == 1);\n    assert(x[1] == 2);\n    assert(x[2] == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
