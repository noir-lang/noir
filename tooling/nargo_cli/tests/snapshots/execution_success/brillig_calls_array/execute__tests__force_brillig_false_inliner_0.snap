---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZT4vTQBSfSZPstrLs4t4UxYMr6CnTJE0CHoq27upFD4InhfQf6MUFQU9CwC8gCH5eG53XvL7MJF3N7LZuBkomMy+/96fvvZl5w9mf1ln+XNnn8p3L93tkjCvGLDlmIwyMhRvMDeXT+7cmGsTyTMnId0BGq0EZOfq/6f/fuOAdhOV7gyCYR/258EXq9ZNJHHpBOBnEIhZhHM76se/P4yCOkkkSeYkI/LlYhIk/X/xusc0KJwdZWwe+fg7MsJCQ1TrECSymbzD3WT67ZBwca9iQ8l2E2zR+7AVpl+jXsPx+l9jUFH7HDL63J3GeZQU+1YWhJ9DRbzqI5hTRnGpozhDNGaEBnQ35xMCwTf0DVo4z0AV422Z4B5zwY0RPRvj3mFH/FZzwA3mofaB/ADRZIQ8nc3ZW1gPmnGxdj7ztL3+3ER31LQvRPUD9RwT7eVaWyWT8L301Meyr4pjpYx503MvYqq3yARoDm4Od9jE9meuiOTtb59OT7zbig7FADofQn8j3Q/l00Tfw/ZGCv0v4r8mtGMM2olgdxRjQ5yeUu7J/gxVr6tOswDOxpo7M4PcBf2wG389tlMffC7ApMxoDAeQEnKOgwZyDeKtyLDTVphvnoVcIl9JRntjfgP8h0+cv03sFmsshTilPkM1i5bUO29ghYzGy0znBo+sZHQMbHLGy7Tjp161FEJcqW9sEy6nBGhEs/L2zAVYVb6h8uBp6wHMI/RP5zO38iWDW2WZM9KmSz1Jg6eIIf+9q6C2iD9CfKfSpWudxDrazYr6pWIniopIA65/DFBUFxN8h9C/lew/Jz5Dew7+UcxGlYuGnizRMZ7Ngmt4k+IzYCedhztZjnTF1LNL40e0tdFiqWKzyERU+9ZE38rmpz2N9RpleH3sDrCp9nBp9bKIP0L+t0Kcqj+RtXKEPjU/esD5co89Uoc8m5ygs71Wco1Z7Uab2xWEz8ohN1xuL2M5VyHqkmKNx6Sr4uAo+Kiy7QSxO9NHl86bzZBr58bQfTKNJ6Kf+oDZPNs0/CNNomkZCJIGYByKs4/9T9ne8Xpe09brq1tbrmv/P2nrdqm1Nve4WotPl/ZzuBPUfyr5hf0wM5xDvuEJnGNv2mtx9+b7NNbk7st/W5Grbqib3AdkbxyzYG/sttudFzoK4rqQ6aziEHm49Dedqj+7BVHvdOnuMsubsMdLYY7BD9hhfwB68xh5jYg+gf0zsYWpvprIH8KLrGKYzvJ5svMcA/j1mbv300B5DVR9UnW8OWPl/o2dG7Ge0JqHywY6Cz2Vh/U/3GecIl9JRntftPuM1stN3gkdjUef77X1GGZ/eZ7yTz9zOPwjmLt5nzBT6mDzTLNugKhaq6rdA/57Iaaguq1xjgdcu3Ot8lO/bcK9zGXt5jGXiXueLfG4a+1ifUabX56rudb5W6LOL9zrfFPq09zqr1t7rsPK61t7rFPx/Ac8aAGHqMgAA",
  "debug_symbols": "tdrRbuIwEAXQf8lzHmzP2GP3V1arira0QkJQUbrSquLf16AaaOxNcgXzUjUl58p04sTy5Kt7WT59vj2uNq/bj+7h11e33j4v9qvtJh99dXT608f7YnM8+tgvdvvuwUbfd8vNS/4tpUPfva7Wy+7Bm8PvvuNx4AwPgG8BZ8+A5AfIB0+71Xq9env8MVBz/MHN4VJK32FsZDhchoWHRYCFwCLCIqHCG1hYWDhYwDX3cM09XHMP19zDNffNmrOlImwlEipCs+bsTBFuOJ+DhYWbGFUtCBYMCw+L0P7mUgTZoRBYTNW8FgkVYmBhURHbdwZTBFVXe3SwoAlhq1ExLDwsAizadwZ7EdU3j7BIE8INR5UMLCwsHCzaNXcXMfzmiWHhJ0R1tacAC4FFhEVChTUGJxYnDieEE8aJx0nAieAk4gSsfj6wpzV2sziB+dsFjsOVJsGCJ4SnWavyURFgIbBoliWE8nwPYmetysdEe1V+LcKsVfmocLAgWLRrnsq6MSSetSofFWFKpFmr8lERYZFQ0V6Vy/m5KGyuRV+dGqlctJFp1gL+XuFOM5w0w1kz3GuGB81w0QyPmuFJMVw0Z6jcOkM9l+01Xz2zxGmGk2Y4a4Z7zfCgGS6a4VEzPCmGR6MZrjlDo+YMjZozNGrO0Kg5Q+PNM9SXjVwfqnDRDL95hoZQwsUc5mwb3Sk8mfv9W+pwqxnuNMNJM/zmGSp0Dp+3cXav8DvO0DpcNMOjZnhSDP/PfuB1uj/M2g8cJw4nhBOGiZ3qMFQ9CWsZJ3CPwdqAE8FJxMlUn6HqTFhncAJ3GqxzOCGcME6m9pxd/fUDTvA9Z4fvOTu840B4x4HwjgPhHQfCOw7EOME7DoR3HAivPuHVJ7z6jFefweof8tGfxW61eFovj28SHT/83DyXF4vy4f7ve/mkvHr0vts+L18+d8vjS0iX94+Ol0Ru3pOcnif5QLiXdLrv5YN8I+/zbfbcSTmdHXoK5ezcLMon2PP5LL3llEeYR/kP",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is brillig calls passing arrays around\nfn main(x: [u32; 3]) {\n    // Safety: testing context\n    unsafe {\n        assert(entry_point(x) == 9);\n        another_entry_point(x);\n    }\n}\n\nunconstrained fn inner(x: [u32; 3]) -> [u32; 3] {\n    [x[0] + 1, x[1] + 1, x[2] + 1]\n}\n\nunconstrained fn entry_point(x: [u32; 3]) -> u32 {\n    let y = inner(x);\n    y[0] + y[1] + y[2]\n}\n\nunconstrained fn nested_fn_that_allocates(value: u32) -> u32 {\n    let x = [value, value, value];\n    let y = inner(x);\n    y[0] + y[1] + y[2]\n}\n\nunconstrained fn another_entry_point(x: [u32; 3]) {\n    assert(x[0] == 1);\n    assert(x[1] == 2);\n    assert(x[2] == 3);\n    assert(nested_fn_that_allocates(1) == 6);\n    // x should be unchanged\n    assert(x[0] == 1);\n    assert(x[1] == 2);\n    assert(x[2] == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point",
    "another_entry_point"
  ]
}
