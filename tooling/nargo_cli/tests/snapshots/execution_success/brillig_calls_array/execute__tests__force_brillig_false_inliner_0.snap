---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VYzY7TMBC287fbotWu4IiEuMCBk904TcKpgpaWEydOnNJtIiReIo9OA55mOh2n3W182JEix/b4m/kmnnFdKf5LuH9i+y5tX9r+ezImmbHAjkUIA2NhgbmFbdV1okfEUr58lC/Ax2BEHyX63vT7j+54iLBSNTemzme1TnWlZuW2yJTJtvNCFzorst2sSNO6MEVebstcldqktW6yMq2bf1J0vkWM47DJXQKc/th2YtsAzYcjcp4Qu2PiF8pUE4bfiP6nExJTX/ihH3x1Y3G+tT0+5SJQC3p0TYh01khn7dDZIJ0N0QHOnvbE3HNM0ztxmmfABWxHfmwbSewJwlMQ+1Phdf9qSeyBPzQ+8H4HOm3vjyRzUXvKA+bi9phHJ7f75y3So3srQHof0fsngv29PfXJZ/7v92rpea/qN8Kd88DxphUHOdQDNAYxhzjdYn0yN0FzUXtsZ2r7EbKDscCPmOh/sP172yZoDax/YOwnxP6R38wYjhHFCpkx0E/2zzv7/kr0Z+rXtsfzcaYu/eDPAH/lBz/tYtTl3xeIqfCaAwZqAq5RIDCHLxVcjQXhLgm4Dm0QLtWjNvF+o/ZDYpPWU9hb94I/SzHWudq8JFh4fXQB1pBt4JU49AEvJvqfbdvF9DfBPBebFeEz5F/AYFHOnO3EoR8QPqC/YPgMnVW4jkTtsf+Apa6QvOgvP1DDY8FcgpD9mOivbX+K/BcoJotn+tnklW7Sqqmyarczj9Vrgi9InHAtGdojeD3NH9f5+JRcpDmSMPoYLyb6P2zL7fmhvOtk2br5XJLDQ3ziM3xcOfxzgE8shvmsBvjQWilH5iMdfH4xfC65C9A/rBa2r66Ti+8Ch99TQnj7LavQXYD7tq67QDeXML4+MHM0LxPGTsLY4bCiEbEk4eOq52PXSZNV+WOVa10aXRudnauTfwGuDeZuRRUAAA==",
  "debug_symbols": "pZTdjoMgEEbfhWsv+BPEV2maxlq2MSFqqDbZNL77Ds6wthebbPSmRwrngxEzL3bz1/l+6fqv4cHq04tdYxdCd7+EoW2mbujh3xfj6UcrVouCaY0oEQZhERXCrShBkwCBkKxWAIWAFA0oEQZhEZBSAtwKAykGIBASoVZYgAVoBIRVAIOwiAoBYa5gFUdAmOBASVRETUzFQQWVIabyoIaqIjqk40RBlERF1MSSaIiU5yjPUZ7gPD+sictSsHwRlyl6n+7h7WbgvsYm+n5idT+HULBnE+Z10WNs+pVTE2EWavL9DQiBX13w6WkpNpv/rSrnSNbc/urlv30tVPbFLl/mw2upj+2/z5c2+0oc23+Xr3j21a73/+aLXfuLzbfHfLlrf7n59pi/6/2LqiRfOHfIl/zz+zvDqGm7+NlrU+uAE6fOkZY/m9g11+DTXLLnvs1LYTh9j3kmN+4xDq2/zdGn2K17Q+wJvmRlz6m7wMCYwoo0gE5zElwXgpvzkk71Aw==",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested is brillig calls passing arrays around\nfn main(x: [u32; 3]) {\n    // Safety: testing context\n    unsafe {\n        assert(entry_point(x) == 9);\n        another_entry_point(x);\n    }\n}\n\nunconstrained fn inner(x: [u32; 3]) -> [u32; 3] {\n    [x[0] + 1, x[1] + 1, x[2] + 1]\n}\n\nunconstrained fn entry_point(x: [u32; 3]) -> u32 {\n    let y = inner(x);\n    y[0] + y[1] + y[2]\n}\n\nunconstrained fn nested_fn_that_allocates(value: u32) -> u32 {\n    let x = [value, value, value];\n    let y = inner(x);\n    y[0] + y[1] + y[2]\n}\n\nunconstrained fn another_entry_point(x: [u32; 3]) {\n    assert(x[0] == 1);\n    assert(x[1] == 2);\n    assert(x[2] == 3);\n    assert(nested_fn_that_allocates(1) == 6);\n    // x should be unchanged\n    assert(x[0] == 1);\n    assert(x[1] == 2);\n    assert(x[2] == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point"
  ]
}
