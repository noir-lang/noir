---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main(x: [u32; 3]) {
    // Safety: comment added by `nargo expand`
    unsafe {
        assert(entry_point(x) == 9_u32);
        another_entry_point(x);
    }
}

unconstrained fn inner(x: [u32; 3]) -> [u32; 3] {
    [x[0_u32] + 1_u32, x[1_u32] + 1_u32, x[2_u32] + 1_u32]
}

unconstrained fn entry_point(x: [u32; 3]) -> u32 {
    let y: [u32; 3] = inner(x);
    (y[0_u32] + y[1_u32]) + y[2_u32]
}

unconstrained fn nested_fn_that_allocates(value: u32) -> u32 {
    let x: [u32; 3] = [value, value, value];
    let y: [u32; 3] = inner(x);
    (y[0_u32] + y[1_u32]) + y[2_u32]
}

unconstrained fn another_entry_point(x: [u32; 3]) {
    assert(x[0_u32] == 1_u32);
    assert(x[1_u32] == 2_u32);
    assert(x[2_u32] == 3_u32);
    assert(nested_fn_that_allocates(1_u32) == 6_u32);
    assert(x[0_u32] == 1_u32);
    assert(x[1_u32] == 2_u32);
    assert(x[2_u32] == 3_u32);
}
