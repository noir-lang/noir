---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _6",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 64)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(1)), Simple(Witness(2))]",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "EXPR [ (2, _0) (-18446744073709551616, _1) (-1, _2) 0 ]",
    "EXPR [ (1, _2) -128 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [(_4, 2)] []",
    "EXPR [ (1, _0) (-4, _3) (-1, _4) 0 ]",
    "EXPR [ (1, _3) -16 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(9223372036854775808, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [(_5, 63)] []",
    "EXPR [ (9223372036854775808, _0) (-18446744073709551616, _5) (-1, _6) 0 ]",
    "EXPR [ (1, _6) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pZLPDoIwDMbfpeceYJugvIoxZEAxS5ZB5mZiiO9umeCfgxe8tFu//ZovXSfoqInn2rh+uEB1nKDxxlpzru3Q6mAGx9XpjrBe6+CJuAQfOlOj9uQCVC5ai3DVNqZHl1G7lIP2rGYI5DrO3LA3lubTHd909hsVUi6wkIcXvtvCq2ILX6zmRfEnX4oNvJTlwkul/uS/53fim26N//pxyKHKEUSKMkXF1hF23AChSLFMcQ+VQjhwM4Q8e6b8mRifZ3XV3ujG0rJKfXTtx2aF27gq6+6Nfmipi55mT0ljlw8=",
  "file_map": {
    "50": {
      "source": "fn main(x: u64) {\n    let two: u64 = 2;\n    let three: u64 = 3;\n    // shifts on constant values\n    assert(two << 2 == 8);\n    assert((two << 3) / 8 == two);\n    assert((three >> 1) == 1);\n    // shifts on runtime values\n    assert(x << 1 == 128);\n    assert(x >> 2 == 16);\n\n    regression_2250();\n\n    //regression for 3481\n    assert(x << 63 == 0);\n\n    assert_eq((1 as u64) << 32, 0x0100000000);\n\n    //regression for 6201\n    let a: i16 = -769;\n    assert_eq(a >> 3, -97);\n}\n\nfn regression_2250() {\n    let a: u1 = 1 >> 1;\n    assert(a == 0);\n\n    let b: u32 = 1 >> 32;\n    assert(b == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
