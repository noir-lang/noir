---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 106 }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(3), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U64, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 22 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U64), value: 16 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U64, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 29 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 63 }, BinaryIntOp { destination: Relative(3), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U64, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 36 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(3), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(3), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(4) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U64) }, Const { destination: Relative(4), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Not { destination: Relative(1), source: Relative(5), bit_size: U1 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U64, lhs: Relative(3), rhs: Relative(4) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(1) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 49 }, Call { location: 112 }, Const { destination: Relative(1), bit_size: Integer(U64), value: 62 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 54 }, Jump { location: 98 }, Const { destination: Relative(7), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(7) }, JumpIf { condition: Relative(6), location: 58 }, Call { location: 115 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 1 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 2 }, Const { destination: Relative(10), bit_size: Integer(U64), value: 1 }, Cast { destination: Relative(11), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 69 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U64, lhs: Relative(10), rhs: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Jump { location: 63 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U64, lhs: Relative(2), rhs: Relative(8) }, Const { destination: Relative(17), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U64, lhs: Relative(17), rhs: Relative(3) }, Const { destination: Relative(18), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U64, lhs: Relative(18), rhs: Relative(3) }, JumpIf { condition: Relative(12), location: 76 }, Jump { location: 78 }, Mov { destination: Relative(13), source: Relative(19) }, Jump { location: 80 }, Mov { destination: Relative(13), source: Relative(3) }, Jump { location: 80 }, Const { destination: Relative(17), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U64, lhs: Relative(17), rhs: Relative(10) }, Const { destination: Relative(18), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U64, lhs: Relative(18), rhs: Relative(10) }, JumpIf { condition: Relative(14), location: 86 }, Jump { location: 88 }, Mov { destination: Relative(15), source: Relative(19) }, Jump { location: 90 }, Mov { destination: Relative(15), source: Relative(10) }, Jump { location: 90 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U64, lhs: Relative(13), rhs: Relative(15) }, BinaryIntOp { destination: Relative(16), op: Xor, bit_size: U1, lhs: Relative(12), rhs: Relative(14) }, JumpIf { condition: Relative(16), location: 94 }, Jump { location: 96 }, Const { destination: Relative(17), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U64, lhs: Relative(17), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U64, lhs: Relative(3), rhs: Relative(8) }, Jump { location: 100 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, Jump { location: 100 }, Const { destination: Relative(1), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U64, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 105 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 111 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pdRNjqpAFEDhvdSYAfVfxVY6xqBih4SgoeElL4a998Ujtj3oCU48VeL9NKTkpk7NYfrct/358qWqj5s6DG3XtZ/77nKsx/bSy7s3VS4v2qtKF0oHElVlJInke0xJNDGqshJLnKqcxJNAIklEFF8oWxJRgsQQSxzxRJQoESVJEsn3uJJoYogljngSCIpDcaLkQvmSaGKIJY54EkgkiaAElIASUAJKQAkoASWgBJSAElEiSkSJKBElokSUiBJRIkpCSSgJJaEklISSUBJKQkkoGSWjZJSMklEySkbJKBklo+hSGF0uC70uzLqw68Iti3ku1Hom9+PQNMuRfDmkcnSv9dD0o6r6qesK9a/upvuHvq51f+9YD3JVyKY/SQU8t12zrObiZ7r8e9RY+xg2Nj/H/ZZ5F7bMh/XHm/DmfDQb5q2Nj3nr3JvzW+6ff94/7/Smef2cN2/Op/fm/e/7t5NdfWyHX4/deZGGtj50zWN7nvrjy9Xx/3W9sj62r8Pl2JymoVmkl2e3vH7oMhRa6538p/Sy1Ua2bjcvX/8N",
  "file_map": {
    "50": {
      "source": "fn main(x: u64) {\n    let two: u64 = 2;\n    let three: u64 = 3;\n    // shifts on constant values\n    assert(two << 2 == 8);\n    assert((two << 3) / 8 == two);\n    assert((three >> 1) == 1);\n    // shifts on runtime values\n    assert(x << 1 == 128);\n    assert(x >> 2 == 16);\n\n    regression_2250();\n\n    //regression for 3481\n    assert(x << 63 == 0);\n\n    assert_eq(1_u64 << 32, 0x0100000000);\n\n    //regression for 6201\n    let a: i16 = -769;\n    assert_eq(a >> 3, -97);\n\n    regression_8310();\n\n    //regression 8791\n    assert(-(x as i64) >> 62 == -1);\n    assert(a >> 14 == -1);\n}\n\nfn regression_2250() {\n    let b: u32 = 1 >> 31;\n    assert(b == 0);\n}\n\nfn regression_8310() {\n    let x: i64 = -356710612598522715;\n    let b = x >> 62;\n    assert(b == -1);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
