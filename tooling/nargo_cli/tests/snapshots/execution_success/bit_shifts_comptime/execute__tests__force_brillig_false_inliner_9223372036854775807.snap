---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _32",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:64 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(1)), Simple(Witness(2))]",
    "BLACKBOX::RANGE [_1]:1 bits []",
    "EXPR [ (2, _0) (-18446744073709551616, _1) (-1, _2) 0 ]",
    "EXPR [ (1, _2) -128 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [_4]:2 bits []",
    "EXPR [ (1, _0) (-4, _3) (-1, _4) 0 ]",
    "EXPR [ (1, _3) -16 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(9223372036854775808, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [_5]:63 bits []",
    "EXPR [ (9223372036854775808, _0) (-18446744073709551616, _5) (-1, _6) 0 ]",
    "EXPR [ (1, _6) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 36893488147419103232 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(7)), Simple(Witness(8))]",
    "BLACKBOX::RANGE [_7]:2 bits []",
    "BLACKBOX::RANGE [_8]:64 bits []",
    "EXPR [ (-1, _0) (-18446744073709551616, _7) (-1, _8) 36893488147419103232 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 9223372036854775808 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(9)), Simple(Witness(10))]",
    "BLACKBOX::RANGE [_9]:1 bits []",
    "BLACKBOX::RANGE [_10]:64 bits []",
    "EXPR [ (1, _0) (-18446744073709551616, _9) (-1, _10) 9223372036854775808 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 9223372036854775808 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(11)), Simple(Witness(12))]",
    "BLACKBOX::RANGE [_11]:1 bits []",
    "BLACKBOX::RANGE [_12]:64 bits []",
    "EXPR [ (1, _8) (-18446744073709551616, _11) (-1, _12) 9223372036854775808 ]",
    "EXPR [ (-1, _9, _11) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 9223372036854775808 })], outputs: [Simple(Witness(13)), Simple(Witness(14))]",
    "BLACKBOX::RANGE [_13]:1 bits []",
    "BLACKBOX::RANGE [_14]:63 bits []",
    "EXPR [ (1, _8) (-9223372036854775808, _13) (-1, _14) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 36893488147419103232 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 36893488147419103232 })], outputs: [Simple(Witness(15)), Simple(Witness(16))]",
    "BLACKBOX::RANGE [_15]:1 bits []",
    "BLACKBOX::RANGE [_16]:65 bits []",
    "EXPR [ (1, _8) (-36893488147419103232, _15) (-1, _16) 36893488147419103232 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(2, Witness(15), Witness(13))], linear_combinations: [(1, Witness(8)), (-1, Witness(13)), (-1, Witness(15))], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(17)), Simple(Witness(18))]",
    "BLACKBOX::RANGE [_17]:1 bits []",
    "BLACKBOX::RANGE [_18]:64 bits []",
    "EXPR [ (2, _13, _15) (1, _8) (-1, _13) (-1, _15) (-18446744073709551616, _17) (-1, _18) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 9223372036854775808 })], outputs: [Simple(Witness(19)), Simple(Witness(20))]",
    "BLACKBOX::RANGE [_19]:1 bits []",
    "BLACKBOX::RANGE [_20]:63 bits []",
    "EXPR [ (1, _18) (-9223372036854775808, _19) (-1, _20) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(18), Witness(19))], linear_combinations: [(1, Witness(18)), (18446744073709551616, Witness(19))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 9223372036854775808 })], outputs: [Simple(Witness(21)), Simple(Witness(22))]",
    "BLACKBOX::RANGE [_21]:1 bits []",
    "BLACKBOX::RANGE [_22]:63 bits []",
    "EXPR [ (-2, _18, _19) (1, _18) (18446744073709551616, _19) (-9223372036854775808, _21) (-1, _22) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 })], outputs: [Simple(Witness(23))]",
    "EXPR [ (1, _21, _23) (1, _24) -1 ]",
    "EXPR [ (1, _21, _24) 0 ]",
    "EXPR [ (2, _19, _21) (-18446744073709551616, _19) (-1, _21) (-1, _25) 18446744073709551616 ]",
    "EXPR [ (-1, _24) (-1, _26) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 0 })], outputs: [Simple(Witness(27))]",
    "EXPR [ (1, _22, _27) (1, _28) -1 ]",
    "EXPR [ (1, _22, _28) 0 ]",
    "EXPR [ (-2, _19, _22) (18446744073709551616, _19) (1, _22) (-1, _29) 0 ]",
    "EXPR [ (-1, _28) (-1, _30) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-2, Witness(15), Witness(13)), (1, Witness(25), Witness(26))], linear_combinations: [(1, Witness(13)), (1, Witness(15))], q_c: 36893488147419103231 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 18446744073709551616 })], outputs: [Simple(Witness(31)), Simple(Witness(32))]",
    "BLACKBOX::RANGE [_31]:2 bits []",
    "EXPR [ (-2, _13, _15) (1, _25, _26) (1, _13) (1, _15) (-18446744073709551616, _31) (-1, _32) 36893488147419103231 ]",
    "EXPR [ (1, _32) -18446744073709551615 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZTNjoIwFEbfpesuaHsvf68ymRjEakgaIBVMJsZ3n2s/cHQxG9j0CPUcpSW9q5M/zpdD15+Hq6q/7uoYuxC6yyEMbTN1Qy937w+t1svDFL2XW+ptXqyxib6fVN3PIWh1a8KcvnQdmz5xaqLMZlr5/iSU4LkL/vnpof/s7H/VOrfI1lUvnbf4lG/x8/XP23ynX9gNvnPF4juinf6W9WNXLj5vWj92+csv9vnsdvqfz/8tV03bxY83XhlVG61sGl0aSbZOK5YF1CpPY5HGUtWkVSUxrUwGGEB0+VUjviyeIYCBHCiAEqgSbAYYwAKoWFQsKlYqlaAASqBKcBlgAAs4gAAGUHGoOFQcKoQKoUKoECqECqFCqBAqhAqhwqgwKowKo8KoMCqMCqPCqLBUzPPQuDWxa47BL4fSee7btzNq+hnXmfUUG+PQ+tMc/XN305zs9y8=",
  "file_map": {
    "50": {
      "source": "fn main(x: u64) {\n    let two: u64 = 2;\n    let three: u64 = 3;\n    // shifts on constant values\n    assert(two << 2 == 8);\n    assert((two << 3) / 8 == two);\n    assert((three >> 1) == 1);\n    // shifts on runtime values\n    assert(x << 1 == 128);\n    assert(x >> 2 == 16);\n\n    regression_2250();\n\n    //regression for 3481\n    assert(x << 63 == 0);\n\n    assert_eq((1 as u64) << 32, 0x0100000000);\n\n    //regression for 6201\n    let a: i16 = -769;\n    assert_eq(a >> 3, -97);\n\n    regression_8310();\n\n    //regression 8791\n    assert(-(x as i64) >> 63 == -1);\n    assert(a >> 27 == -1);\n}\n\nfn regression_2250() {\n    let a: u1 = 1 >> 1;\n    assert(a == 0);\n\n    let b: u32 = 1 >> 32;\n    assert(b == 0);\n}\n\nfn regression_8310() {\n    let x: i64 = -356710612598522715;\n    let b = x >> 64;\n    assert(b == -1);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
