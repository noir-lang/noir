---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
fn main(b: bool) -> pub u32 {
    let mut ctx_limit: u32 = 3_u32;
    // Safety: comment added by `nargo expand`
    unsafe {
        func_2_proxy(if { b } { &[10_u32] } else { &[20_u32, 30_u32] }, ctx_limit)
    }
}

unconstrained fn func_2(a: [u32], ctx_limit: &mut u32) -> u32 {
    if *ctx_limit == 0_u32 {
        a[1_u32 % a.len()]
    } else {
        *(ctx_limit) = *ctx_limit - 1_u32;
        let i: u32 = 3_u32 % a.len();
        let b: u32 = a[i];
        let ab: [u32] = a.push_back(b);
        println((a, i, b, ab));
        func_2(ab, ctx_limit)
    }
}

unconstrained fn func_2_proxy(a: [u32], mut ctx_limit: u32) -> u32 {
    func_2(a, &mut ctx_limit)
}
