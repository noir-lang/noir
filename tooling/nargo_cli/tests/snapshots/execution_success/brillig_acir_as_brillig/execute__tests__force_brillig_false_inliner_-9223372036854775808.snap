---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1WbU+DMBAubKjT+BKNHzQxLi7xi1/atR0l0YRE/SFswO/gpwvZNdxuZWYbuMztkuYKHM8999By9djc/HIEMPfK0QNf2bAcffSMmr0Xg+fbmWgRi3sOnp0R9xCW5BOlsnCcCSkSPo6mRnOlpxMjjNBGp2MjZWaUCaNpFPJIKJmJXEcyy+fWB377LLjfNXG/PcHTituqVU7NFjcCPyD37S6KW6p1gHDbxjdcTQZs+Vu1yF8OALNLfSxmB/j8FHC+ihqf1sKQt3H0ner5JVve3DbmrBxXrJ5fw/wS/DfCsu93qW25NnTH2oo71qznBejw+Ae1cviJ4/yM1d0Q7z2cH/87ThriLV5A4u/BVzUOCabn4NBbk0OPxLg4PDg4VLrbf0K/WKwjhvt8CwtN3Sx6Rc0L685I/oDEP8P1OaqRodriDXnmYSJymeSJTtJUzZJbgl+Zj3RqO7/SSThLQiEiJTIl9G/5P2B+7EEr7diD2GY96Abmh9qD7Lr8LLrJbXvcE1vUFR+gaU+hfDDfph5k8QISj3sQPs92qLey66/Pls0+CxzcPUc87RmYd1XTK8KlcTQn1svm34de+ALXh94Ld7mP3sD/130kES6Nozmb9tEuv49BtYwIB9dZ21+TAz2Puzi8OzhUuvwARohCAIoTAAA=",
  "debug_symbols": "pZTNqoMwEEbfJWsXTv7jqxQp1qZFEBWrhUvx3e/EMd520XJJNx41OZlMlO/Bzv40X49Nd+lvrDg82Gls2ra5Htu+rqam7/Dtg+XhApoVkDEwBEtwK3hOAFYIBCcIgkQsOHVdBG1JtiRbki3JVmQrshXZAYqgCWaFQF1nTOYEIHAC6gYhCYqgCYZgCW6FQs8iBEESFCG0niPNRrsxdJ8v2Fw8ruM0eh8afTo/PNWhGn03saKb2zZj96qd10m3oepWTtWIo7ii785IXPDStD7cLdmfnb9XuYVN5lbvuvq/b9Tum3c+/+CDjj6HhPoWYvMWVIqf891P6d8Is/lG8hSfu90XCb62sb52KfW1cbv/tr774Asb/aT9m7h9B1/ZKd8OVPx3QLvvfCNf/BKfqroZX9MQcwZC2CHwp8O8AEw5zAsI8r0am+rU+jAzrDV3dRTxcfoZ4kgM2mHsa3+eRx+KPKUtXg9cZwJKzEkseRA8E7Lcg3Qdd+FVHFeZMOUSdv0L",
  "file_map": {
    "50": {
      "source": "fn main(x: u32) {\n    // Safety: testing context\n    unsafe {\n        assert(entry_point(x) == 2);\n        swap_entry_point(x, x + 1);\n        assert(deep_entry_point(x) == 4);\n    }\n}\n\nfn inner(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn entry_point(x: u32) -> u32 {\n    inner(x + 1)\n}\n\nfn swap(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nunconstrained fn swap_entry_point(x: u32, y: u32) {\n    let swapped = swap(x, y);\n    assert(swapped.0 == y);\n    assert(swapped.1 == x);\n    let swapped_twice = swap(swapped.0, swapped.1);\n    assert(swapped_twice.0 == x);\n    assert(swapped_twice.1 == y);\n}\n\nfn level_3(x: u32) -> u32 {\n    x + 1\n}\n\nfn level_2(x: u32) -> u32 {\n    level_3(x + 1)\n}\n\nfn level_1(x: u32) -> u32 {\n    level_2(x + 1)\n}\n\nunconstrained fn deep_entry_point(x: u32) -> u32 {\n    level_1(x + 1)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "entry_point",
    "deep_entry_point"
  ]
}
