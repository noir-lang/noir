---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91WsU7DMBB12gQIFUKClYFPsKmjtCxUaiXEwsjCZLVUDPAP+XRk6aw8PdyqtHEbccsl8uXd3XtnO5lqLROf07uKxMzE68PMdIilo4VusxDzLb4UP4D1YYfNlpS3S/yJtlUZ6a/D+selYKbkJ2AmwNfngrNoWnzuRYEPcfyNX7+SZ5yzEHMh6+H5Wp5L+iaF/gn10beR+gfQm7d5kyS3GQmXlrhMNCs26BsOQ7SwVkBu5IRtSO9Yt+/pEXA5jnOitsVxuHjIiItc8Dftn4Li76jOIk2d+gZwlYprFOpV0APyjPOLPZ1F4hGvoPh78V7fBfXft5kNa2eRvvaZ52fA5TjVcy726fcFcDmOc27bvynuBc8Fz/Km/Rvy8yyPqc48TZ3R/RtyjVR7x+RN9/nridYh77BpeWDtMX9B8VN5v9zQx2zPOte1M+uxW7vKrVZ26ZgnbwPgCe/JY597T+Lx3Msi+Xj+dq1hl3mdR2rwvHSti61cvXS1MVNrPqyp/qLLqXV6Vb856tuZfMgd9Aa4HMc5Y/8Lp9bnHXr5j/osAZfjOGcf9fmEXk51zn1FavC8/ACyak0e1REAAA==",
  "debug_symbols": "pdXNboMwDAfwd8mZQ5wvJ32Vqqpom05IiFYMJk0V7z4HJ6yb1B2yS38G+ndEsOAhLvE0vx274Xp7F7v9Q5zGru+7t2N/O7dTdxvo7EPI9ANO7KARgIxnwoqSDDCK0WKnCMNYxjHIUBdNhBUtGWCoiyE0YxjLOAYZz1AX2wgjGWAUoxnDWIa6OAIZz4QVKxk6wkY4yQCjGOoZCMNYxq0gnQRJ2qzLYjZtH+0RBtbLLGRVVmdNNuVp47zPBjbIbMrT5gWV1VmTtVmXRRZkamBSAaVQpdClSE1cKmwpXClSH7csjSiDc5zGGNPcPE0Szde9HeMwid0w930jPtp+Xv/0fm+H1akd6SrtUBwuJDW8dn1M1dJ8p+XrKGLOBtjCtiLtKtKgShy0qsnL77yuyduyceDC//JoKvLKQ84rX7N/Cu2Wx1d5/0c+zSLnVc3T91Du34OtyUu15WvuH3V5/mhq5gdV2PI18+N8Wd+FmvUdhi3/cn2wfzTQvjT4dQMHOmrP3fjjw7SkTmPXnvqYD6/zcH66On3ey5XyYbuPt3O8zGNMnZ6+bvS7t6qxeKDXGb0D9843KA9LWvoL",
  "file_map": {
    "50": {
      "source": "fn main(x: u32) {\n    // Safety: testing context\n    unsafe {\n        assert(entry_point(x) == 2);\n        swap_entry_point(x, x + 1);\n        assert(deep_entry_point(x) == 4);\n    }\n}\n\nfn inner(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn entry_point(x: u32) -> u32 {\n    inner(x + 1)\n}\n\nfn swap(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nunconstrained fn swap_entry_point(x: u32, y: u32) {\n    let swapped = swap(x, y);\n    assert(swapped.0 == y);\n    assert(swapped.1 == x);\n    let swapped_twice = swap(swapped.0, swapped.1);\n    assert(swapped_twice.0 == x);\n    assert(swapped_twice.1 == y);\n}\n\nfn level_3(x: u32) -> u32 {\n    x + 1\n}\n\nfn level_2(x: u32) -> u32 {\n    level_3(x + 1)\n}\n\nfn level_1(x: u32) -> u32 {\n    level_2(x + 1)\n}\n\nunconstrained fn deep_entry_point(x: u32) -> u32 {\n    level_1(x + 1)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
