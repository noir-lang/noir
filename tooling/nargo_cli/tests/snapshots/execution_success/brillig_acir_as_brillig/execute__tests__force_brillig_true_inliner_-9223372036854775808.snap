---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91VTU/DMAztJ1AmhARXfgBcIGGpul3QJBASF45cOEC00d/Rn44i2ar1SMdX0k7zxa3iPj8/u06a9JaSL+A98cSsyKv/mQ6IpbxEtxnHvJOvyGfiPA9YbAV5Q+IvlKkrT30B+c8rwoypD2NGwFeHhPPQ9fhYSyI8x+E37vyEnuWcccwRnfPzKT1X8E2M/kfsjzr38M9Ebc7uuyi59Yy0vAItI82K4f7yMpTGZ6XILTVBy+Fd8nY13QhcjMOcsrflOFrcpqBFQfhD/08J8RfAs4zDU50J3JE1GnVelgIX4zDntnmJsYecFilwHpoXzl9C/CXwLOLw9M4L55ol/U4ruvD5m4VSnDfveh2w9zJ/CfHX9H48UMfqjzzbxup2bltb283GrC3q5CwTOsm9zH3NRGyefL0r5T0he3/giZd4OCuGvOPwCBxSD4fslxx+Mq8LD4epdbnzcNq1HSi1RftuBz4JXIzDnL77wPUn9H9jatusbaP10ugPo+td/m+eye/rfLwIXIzDnEPzMWV/XkUtU+21Nw8Hp8sndEVIKjUQAAA=",
  "debug_symbols": "pdRLbsMgEAbgu7D2guE1kKtEUeQkpLJkOZFrV6oi372DB9y0UrqgG38h+B8MSPMQl3ia347dcL29i93+IU5j1/fd27G/ndupuw3070PI9AAndtAIQMYzYUVJBhjFaLFThGEs4xhkqIomwoqWDDCK0YxhqIohHIOMZ8KKoZElwoqVDDBUEwnNGMYylPNEWHGSAYZygdCMYSzjGGT8CtIrIEmbdVnMpuOjM8LAepmFrMrqrMmmPB2c99nABplNeTqEoLI6m/JmWRpRLvY4jTGme326abr/ezvGYRK7Ye77Rny0/by+9H5vh9WpHWmWdhCHC0kFr10f06+l+U7L11HEnA2whW1F2lWkwZYPBxf+l0dTkVcecl75mu9XaLc8vsq7P/LgSl7VnL6Hsn8PtiYv1Zav2T/qcv1oVE1ehS2vK/LOl/VdqFnfYdjyL9cH/UcB7UuBXxs40Kg9d+OPxr2kSmPXnvqYh9d5OD/NTp/3MlMa/328neNlHmOq9NT96bk30Bh3oK5PXWaPskF1WNLSXw==",
  "file_map": {
    "50": {
      "source": "fn main(x: u32) {\n    // Safety: testing context\n    unsafe {\n        assert(entry_point(x) == 2);\n        swap_entry_point(x, x + 1);\n        assert(deep_entry_point(x) == 4);\n    }\n}\n\nfn inner(x: u32) -> u32 {\n    x + 1\n}\n\nunconstrained fn entry_point(x: u32) -> u32 {\n    inner(x + 1)\n}\n\nfn swap(x: u32, y: u32) -> (u32, u32) {\n    (y, x)\n}\n\nunconstrained fn swap_entry_point(x: u32, y: u32) {\n    let swapped = swap(x, y);\n    assert(swapped.0 == y);\n    assert(swapped.1 == x);\n    let swapped_twice = swap(swapped.0, swapped.1);\n    assert(swapped_twice.0 == x);\n    assert(swapped_twice.1 == y);\n}\n\nfn level_3(x: u32) -> u32 {\n    x + 1\n}\n\nfn level_2(x: u32) -> u32 {\n    level_3(x + 1)\n}\n\nfn level_1(x: u32) -> u32 {\n    level_2(x + 1)\n}\n\nunconstrained fn deep_entry_point(x: u32) -> u32 {\n    level_1(x + 1)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
