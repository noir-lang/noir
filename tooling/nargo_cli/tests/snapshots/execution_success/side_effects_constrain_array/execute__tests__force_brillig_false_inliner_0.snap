---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : 2",
    "private parameters indices : []",
    "public parameters indices : [0]",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 4294967306 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(1)), Simple(Witness(2))]",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "EXPR [ (-1, _0) (-4294967296, _1) (-1, _2) 4294967306 ]",
    "EXPR [ (1, _1) -1 ]",
    "",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    ""
  ],
  "debug_symbols": "lY9LCsMgFEX38sYZWE1LcSulBL9BEBU/hSLZezUkkEImmb1zL+fCqyAVL/NknPYJ6KuC9YJl412jCrc1SoG5TimzmIHiJxpAOdmvxzKANlYBvaPlPQC+KpCrwngmEDRuAsH/QgMejbVmno6ftfjDomHcqg11ceLQ5m/Ym90P0QslS1R9ae3a/A8=",
  "file_map": {
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nfn main(y: pub u32) {\n    let bar = Bar { inner: [100, 101, 102] };\n\n    // The assert inside the if should be hit\n    if y < 10 {\n        assert(bar.inner == [100, 101, 102]);\n    }\n\n    // The assert inside the if should not be hit\n    if y > 10 {\n        assert(bar.inner == [0, 1, 2]);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
