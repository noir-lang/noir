---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32837), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32837) }, Call { location: 13 }, Call { location: 16 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Const { destination: Direct(32835), bit_size: Field, value: 3 }, Const { destination: Direct(32836), bit_size: Field, value: 14 }, Return, Call { location: 49 }, Cast { destination: Relative(2), source: Relative(1), bit_size: Field }, BinaryFieldOp { destination: Relative(1), op: Mul, lhs: Relative(2), rhs: Direct(32835) }, Const { destination: Relative(2), bit_size: Field, value: 15 }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 24 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(4), source: Direct(0) }, Mov { destination: Relative(5), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 55 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(2), source: Relative(5) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(2), rhs: Direct(32836) }, JumpIf { condition: Relative(1), location: 36 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Const { destination: Relative(1), bit_size: Integer(U1), value: 0 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(4), source: Direct(0) }, Mov { destination: Relative(5), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 55 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(2), source: Relative(5) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(1), location: 48 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 54 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 49 }, Not { destination: Relative(2), source: Relative(1), bit_size: U1 }, Cast { destination: Relative(3), source: Relative(1), bit_size: Field }, Cast { destination: Relative(1), source: Relative(2), bit_size: Field }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(3), rhs: Direct(32836) }, BinaryFieldOp { destination: Relative(3), op: Mul, lhs: Relative(1), rhs: Direct(32835) }, BinaryFieldOp { destination: Relative(1), op: Add, lhs: Relative(2), rhs: Relative(3) }, Return]"
  ],
  "debug_symbols": "pdPNioMwEAfwd5lzDvlU46uUUlKblkCIkurCUnz3HZ211UOXxV7yM8b560TygIs/D7dTSNf2DvXhAeccYgy3U2wb14c24d0H8GkQJdSSgaigVoiFWjOQnBCEJBShoTaIIQqiJCrCzihOCAJTCkQRmjAEppRISVSEndGcEIQkFIEpFWKIgsCUahwZLM2e+uz91Ouqe9yTzmWfeqjTECODLxeH+aF759Js7zKucgY+XVAMvIbop6uRvar5+1Kh7FItNH8FmG2C+CNB2meA3FNv5FJv7Lv6f3dQ7Ukwonh+ghIfJ+zqwpT2tQ3mw4SCb//EEWeuCXlztsYpKwd3jv53eh1Ss1rtv7tlZTmbXW4bfxmyn5JWBxTHg7bM6OM4ve0H",
  "file_map": {
    "50": {
      "source": "trait Fieldable {\n    fn to_field(self) -> Field;\n}\n\nimpl Fieldable for u32 {\n    fn to_field(self) -> Field {\n        let res = self as Field;\n        res * 3\n    }\n}\n\nimpl Fieldable for [u32; 3] {\n    fn to_field(self) -> Field {\n        let res = self[0] + self[1] + self[2];\n        res as Field\n    }\n}\n\nimpl Fieldable for bool {\n    fn to_field(self) -> Field {\n        if self {\n            14\n        } else {\n            3\n        }\n    }\n}\n\nimpl Fieldable for (u32, bool) {\n    fn to_field(self) -> Field {\n        if self.1 {\n            self.0 as Field\n        } else {\n            32\n        }\n    }\n}\n\nimpl Fieldable for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl Fieldable for str<6> {\n    fn to_field(self) -> Field {\n        6\n    }\n}\n\nimpl Fieldable for () {\n    fn to_field(self) -> Field {\n        0\n    }\n}\n\ntype Point2D = [Field; 2];\ntype Point2DAlias = Point2D;\n\nimpl Fieldable for Point2DAlias {\n    fn to_field(self) -> Field {\n        self[0] + self[1]\n    }\n}\n\nimpl Fieldable for fmtstr<14, (Field, Field)> {\n    fn to_field(self) -> Field {\n        52\n    }\n}\n\nimpl Fieldable for fn(u32) -> u32 {\n    fn to_field(self) -> Field {\n        self(10) as Field\n    }\n}\n\nfn some_func(x: u32) -> u32 {\n    x * 2 - 3\n}\n\nimpl Fieldable for u64 {\n    fn to_field(self) -> Field {\n        66 as Field\n    }\n}\n// x = 15\nfn main(x: u32) {\n    assert(x.to_field() == 15);\n    let arr: [u32; 3] = [3, 5, 8];\n    assert(arr.to_field() == 16);\n    let b_true = 2 == 2;\n    assert(b_true.to_field() == 14);\n    let b_false = 2 == 3;\n    assert(b_false.to_field() == 3);\n    let f = 13 as Field;\n    assert(f.to_field() == 13);\n    let k_true = (12 as u32, true);\n    assert(k_true.to_field() == 12);\n    let k_false = (11 as u32, false);\n    assert(k_false.to_field() == 32);\n    let m = \"String\";\n    assert(m.to_field() == 6);\n    let unit = ();\n    assert(unit.to_field() == 0);\n    let point: Point2DAlias = [2, 3];\n    assert(point.to_field() == 5);\n    let i: Field = 2;\n    let j: Field = 6;\n    assert(f\"i: {i}, j: {j}\".to_field() == 52);\n    assert(some_func.to_field() == 17);\n\n    let mut y = 0 as u64;\n    assert(y.to_field() == 66);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
