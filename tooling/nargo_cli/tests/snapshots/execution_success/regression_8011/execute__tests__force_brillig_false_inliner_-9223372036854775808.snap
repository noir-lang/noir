---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "14990209321349310352": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "15764276373176857197": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : [_0]",
    "BRILLIG CALL func 0: inputs: [], outputs: [_0]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32837), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 12 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Const { destination: Direct(32835), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 1 }, Return, Call { location: 33 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(3), source: Direct(0) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 39 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(4) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(4), source: Direct(0) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 65 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(2), source: Relative(5) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 32 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 38 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15764276373176857197 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 33 }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32835) }, Const { destination: Relative(3), bit_size: Integer(U64), value: 18446744073709551611 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 10 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 1 }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 48 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U64, lhs: Relative(1), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(3), location: 56 }, Jump { location: 54 }, Load { destination: Relative(1), source_pointer: Relative(2) }, Return, Load { destination: Relative(3), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 61 }, Call { location: 88 }, Store { destination_pointer: Relative(2), source: Relative(6) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U64, lhs: Relative(1), rhs: Relative(5) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 48 }, Call { location: 33 }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32835) }, Const { destination: Relative(3), bit_size: Integer(U128), value: 170141183460469231731687303715884105715 }, Const { destination: Relative(4), bit_size: Integer(U128), value: 170141183460469231731687303715884105730 }, Const { destination: Relative(5), bit_size: Integer(U128), value: 1 }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 74 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U128, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(3), location: 79 }, Jump { location: 77 }, Load { destination: Relative(1), source_pointer: Relative(2) }, Return, Load { destination: Relative(3), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(7), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 84 }, Call { location: 88 }, Store { destination_pointer: Relative(2), source: Relative(6) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U128, lhs: Relative(1), rhs: Relative(5) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 74 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14990209321349310352 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
