---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "randomness",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "context_input",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _5",
    "private parameters indices : [_0, _1, _2, _3, _4, _5]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 16 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 21 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "fZBBCoQwDEXvknUXRkcdvIqIVI1SKFVqKwzi3act6ujC2TRNfv4L/BU6auxQC9WPMxTlCo0WUoqhlmPLjRiVm64bg6OtjSZyI7jozjVxTcpAoayUDBYubViaJ65CNVw7NWJAqnPVAXshyf829nNHz9YYo2x3x4j5CUjvBPxDeJ2A9NEfP/sxSd87AJM8uREq1/FW6FtqgFD4tYVrwRtJe5K9Ve0lWPOZDuWIftJjS53V5HGBFAWce0vMWIzV5k9+AQ==",
  "file_map": {
    "50": {
      "source": "struct ExampleEvent0 {\n    value0: Field,\n    value1: Field,\n}\n\ntrait EventInterface {\n    fn emit<Env>(self, _emit: fn[Env](Self));\n}\n\nimpl EventInterface for ExampleEvent0 {\n    fn emit<Env>(self: ExampleEvent0, _emit: fn[Env](Self)) {\n        _emit(self);\n    }\n}\n\nstruct Context {\n    a: u32,\n    b: [u32; 3],\n    log_hashes: BoundedVec<LogHash, 4>,\n}\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Context {\n    fn emit_raw_log<let M: u32>(&mut self, randomness: Field, _log: [u8; M], log_hash: Field) {\n        let log_hash = LogHash { value: log_hash, counter: 0, length: 0, randomness };\n        self.log_hashes.push(log_hash);\n    }\n}\n\nfn compute<Event>(_event: Event) -> ([u8; 5], Field)\nwhere\n    Event: EventInterface,\n{\n    ([0 as u8; 5], 0)\n}\n\nfn emit_with_keys<Event, let OB: u32>(\n    context: &mut Context,\n    randomness: Field,\n    event: Event,\n    inner_compute: fn(Event) -> ([u8; OB], Field),\n)\nwhere\n    Event: EventInterface,\n{\n    let (log, log_hash) = inner_compute(event);\n    context.emit_raw_log(randomness, log, log_hash);\n}\n\nfn encode_event_with_randomness<Event>(\n    context: &mut Context,\n    randomness: Field,\n) -> fn[(&mut Context, Field)](Event)\nwhere\n    Event: EventInterface,\n{\n    |e: Event| {\n        // Safety: testing context\n        unsafe {\n            func(context.a);\n        }\n        emit_with_keys(context, randomness, e, compute);\n    }\n}\n\nunconstrained fn func(input: u32) {\n    let mut var = input;\n    let ref = &mut &mut var;\n\n    for _ in 0..1 {\n        **ref = 2;\n    }\n\n    assert(var == 2);\n    assert(**ref == 2);\n}\n\n// This test aims to allocate a reference which is aliased and only accessed through its alias\n// across multiple blocks. We want to guarantee that this allocation is not removed.\nfn main(input: [Field; 4], randomness: Field, context_input: u32) {\n    let b = [context_input, context_input, context_input];\n    let mut context = Context { a: context_input, b, log_hashes: BoundedVec::new() };\n\n    let event0 = ExampleEvent0 { value0: input[0], value1: input[1] };\n    event0.emit(encode_event_with_randomness(&mut context, randomness));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "func"
  ]
}
