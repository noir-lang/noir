---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
struct ExampleEvent0 {
    value0: Field,
    value1: Field,
}

impl EventInterface for ExampleEvent0 {
    fn emit<Env>(self, _emit: fn[Env](Self)) {
        _emit(self);
    }
}

trait EventInterface {
    fn emit<Env>(self, _emit: fn[Env](Self));
}

struct Context {
    a: u32,
    b: [u32; 3],
    log_hashes: BoundedVec<LogHash, 4>,
}

impl Context {
    fn emit_raw_log<let M: u32>(&mut self, randomness: Field, _log: [u8; M], log_hash: Field) {
        let log_hash: LogHash =
            LogHash { value: log_hash, counter: 0_u32, length: 0_Field, randomness: randomness };
        self.log_hashes.push(log_hash);
    }
}

struct LogHash {
    value: Field,
    counter: u32,
    length: Field,
    randomness: Field,
}

fn compute<Event>(_event: Event) -> ([u8; 5], Field)
where
    Event: EventInterface,
{
    ([0_u8; 5], 0_Field)
}

fn emit_with_keys<Event, let OB: u32>(
    context: &mut Context,
    randomness: Field,
    event: Event,
    inner_compute: fn(Event) -> ([u8; OB], Field),
)
where
    Event: EventInterface,
{
    let (log, log_hash): ([u8; OB], Field) = inner_compute(event);
    context.emit_raw_log(randomness, log, log_hash);
}

fn encode_event_with_randomness<Event>(
    context: &mut Context,
    randomness: Field,
) -> fn[(&mut Context, Field)](Event)
where
    Event: EventInterface,
{
    |e: Event| {
        // Safety: comment added by `nargo expand`
        unsafe { func(context.a); };
        emit_with_keys(context, randomness, e, compute);
    }
}

unconstrained fn func(input: u32) {
    let mut var: u32 = input;
    let ref: &mut &mut u32 = &mut &mut var;
    for _ in 0_u32..1_u32 {
        *(*(ref)) = 2_u32;
    }
    assert(var == 2_u32);
    assert(**ref == 2_u32);
}

fn main(input: [Field; 4], randomness: Field, context_input: u32) {
    let b: [u32; 3] = [context_input, context_input, context_input];
    let mut context: Context =
        Context { a: context_input, b: b, log_hashes: BoundedVec::<LogHash, 4>::new() };
    let event0: ExampleEvent0 = ExampleEvent0 { value0: input[0_u32], value1: input[1_u32] };
    event0.emit(encode_event_with_randomness(&mut context, randomness));
}
