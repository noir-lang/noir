---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "c",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "boolean"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(2))]",
    "EXPR [ (1, _0, _2) (1, _3) -1 ]",
    "EXPR [ (1, _0, _3) 0 ]",
    "EXPR [ (-1, _0, _3) (1, _0) (1, _3) -1 ]",
    "EXPR [ (1, _1) (1, _3) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "dZDBCoMwDIbfJecerJvb8FXGkFqjFEpbYjsY4rsvFt304CVp8udryD9Bh20aGuN6P0L9nKAlY60ZGuu1isY77k6zgK1sIiFyC3Y6U0ERugi1S9YKeCub8tAYlMs5KmK1EICu48wf9sbi8prFny7OUVnJFZa36w+vjrw858visfKlvB/4F1dKGzpcDJIHBZQ5XnK8cpyXBWRUa3H1pU9O72yKn7Apm5GBvMYuES4LssYrvw==",
  "file_map": {
    "50": {
      "source": "struct Context {\n    f: fn() -> bool,\n}\nfn main(c: bool) -> pub bool {\n    let mut ctx = Context { f: bar };\n    if c {\n        ctx.f = qux;\n    }\n    foo(&mut ctx)\n}\n\nfn foo(ctx: &mut Context) -> bool {\n    (ctx.f)()\n}\n\nfn bar() -> bool {\n    false\n}\n\nfn qux() -> bool {\n    true\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
