---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "c",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "boolean"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _13",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (2, _0) 0 ]], outputs: [_2]",
    "EXPR [ (2, _0, _2) (1, _3) -1 ]",
    "EXPR [ (2, _0, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (2, _0) -1 ]], outputs: [_4]",
    "EXPR [ (2, _0, _4) (-1, _4) (1, _5) -1 ]",
    "EXPR [ (2, _0, _5) (-1, _5) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (2, _0) -2 ]], outputs: [_6]",
    "EXPR [ (2, _0, _6) (-2, _6) (1, _7) -1 ]",
    "EXPR [ (2, _0, _7) (-2, _7) 0 ]",
    "EXPR [ (1, _3, _5) (-1, _3) (-1, _5) (-1, _8) 1 ]",
    "EXPR [ (2, _0) (-1, _9) 1 ]",
    "EXPR [ (-1, _7, _8) (1, _8) (-1, _10) 0 ]",
    "EXPR [ (1, _9, _10) (-4, _10) 0 ]",
    "EXPR [ (1, _7, _8) (1, _10) (-1, _11) 0 ]",
    "EXPR [ (-1, _3) (-1, _12) 1 ]",
    "EXPR [ (1, _8, _11) (-1, _13) 0 ]",
    "EXPR [ (-1, _12, _13) (1, _1) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "dZHbCoMwDIbfJde9MG7u9CpjSNU4CqVK1w6G+O6LqW564c2f5vCFJB2goSo+S+Pa7gW3+wCVN9aaZ2m7WgfTOY4Oo4LFLYMn4hCs8kz12pMLcHPRWgVvbaMUvXrtxAbtOZspINew5YatsTS9RvWns30UC5xhPB1/eLHlcZ/Ps8vM53je8A/2dG38ZmNALlSQix5Ej6KF6En0LHoRvYpilkyiMeGYeEwNMHXAqcU4zeuNrizNZ26jq1dXD59+ySz/0vuupiZ6muaVHG/wBQ==",
  "file_map": {
    "50": {
      "source": "struct Context {\n    f: fn() -> bool,\n}\nfn main(c: bool) -> pub bool {\n    let mut ctx = Context { f: bar };\n    if c {\n        ctx.f = qux;\n    }\n    foo(&mut ctx)\n}\n\nfn foo(ctx: &mut Context) -> bool {\n    (ctx.f)()\n}\n\nfn bar() -> bool {\n    false\n}\n\nfn qux() -> bool {\n    true\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
