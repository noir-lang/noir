---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "c",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "boolean"
      },
      "visibility": "public"
    },
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: [_1]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 56 }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(3), bit_size: Field, value: 2 }, Store { destination_pointer: Relative(2), source: Relative(3) }, Const { destination: Relative(4), bit_size: Field, value: 4 }, JumpIf { condition: Relative(1), location: 23 }, Jump { location: 25 }, Store { destination_pointer: Relative(2), source: Relative(4) }, Jump { location: 25 }, Load { destination: Relative(5), source_pointer: Relative(2) }, Const { destination: Relative(2), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U1), value: 0 }, JumpIf { condition: Relative(6), location: 53 }, Jump { location: 31 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(7), location: 49 }, Jump { location: 34 }, Const { destination: Relative(3), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(5), rhs: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(7), location: 45 }, Jump { location: 39 }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 43 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Mov { destination: Relative(2), source: Relative(3) }, Jump { location: 47 }, Mov { destination: Relative(2), source: Relative(3) }, Jump { location: 47 }, Mov { destination: Relative(6), source: Relative(2) }, Jump { location: 51 }, Mov { destination: Relative(6), source: Relative(2) }, Jump { location: 51 }, Mov { destination: Relative(1), source: Relative(6) }, Jump { location: 55 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 55 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 61 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "tZFBjsMgDEXv4jULoCGdyVWqKiKJUyEhElEYaRRx95qQtM2iy278MPb/RniBAbt4a40bpzs0lwU6b6w1t9ZOvQ5mcnS7AM9BKmgkA1lDcyKcV5xEQVWgCn5XVLygtFSSkBKD3bkNHjEbv42iB8zaowvQuGgtgz9t49p0n7VbGbSnKmeAbiCS4Wgs5lNiLzX/LBVKbGJRV0+5OurF9/SS/2x6Kc4H/ZUy3Rt/+PyUnbzRncUtHaPr36rhf94r+/JmP/U4RI/Z6bVBQfGialaLa8rTHg==",
  "file_map": {
    "50": {
      "source": "struct Context {\n    f: fn() -> bool,\n}\nfn main(c: bool) -> pub bool {\n    let mut ctx = Context { f: bar };\n    if c {\n        ctx.f = qux;\n    }\n    foo(&mut ctx)\n}\n\nfn foo(ctx: &mut Context) -> bool {\n    (ctx.f)()\n}\n\nfn bar() -> bool {\n    false\n}\n\nfn qux() -> bool {\n    true\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
