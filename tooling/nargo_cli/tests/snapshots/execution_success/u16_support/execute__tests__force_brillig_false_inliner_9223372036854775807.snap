---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _25",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) 65520 ], EXPR [ 65536 ]], outputs: [_1, _2]",
    "BLACKBOX::RANGE [(_2, 16)] []",
    "EXPR [ (1, _0) (-65536, _1) (-1, _2) 65520 ]",
    "EXPR [ (-1, _1) 0 ]",
    "EXPR [ (-1, _3) 1 ]",
    "EXPR [ (-1, _4) 2 ]",
    "EXPR [ (-1, _5) 4 ]",
    "EXPR [ (-1, _6) 8 ]",
    "EXPR [ (-1, _7) 16 ]",
    "EXPR [ (-1, _8) 32 ]",
    "EXPR [ (-1, _9) 64 ]",
    "EXPR [ (-1, _10) 128 ]",
    "EXPR [ (-1, _11) 256 ]",
    "EXPR [ (-1, _12) 512 ]",
    "EXPR [ (-1, _13) 1024 ]",
    "EXPR [ (-1, _14) 2048 ]",
    "EXPR [ (-1, _15) 4096 ]",
    "EXPR [ (-1, _16) 8192 ]",
    "EXPR [ (-1, _17) 16384 ]",
    "EXPR [ (-1, _18) 32768 ]",
    "INIT (id: 0, len: 16, witnesses: [_3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18])",
    "MEM (id: 0, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _19) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0, _19) 0 ], EXPR [ 65536 ]], outputs: [_20, _21]",
    "BLACKBOX::RANGE [(_20, 16)] []",
    "EXPR [ (1, _0, _19) (-65536, _20) (-1, _21) 0 ]",
    "EXPR [ (1, _21) -8 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _19) 0 ]], outputs: [_22]",
    "EXPR [ (1, _19, _22) -1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ 8 ], EXPR [ (1, _19) 0 ]], outputs: [_23, _24]",
    "BLACKBOX::RANGE [(_23, 16)] []",
    "BLACKBOX::RANGE [(_24, 16)] []",
    "EXPR [ (1, _19) (-1, _24) (-1, _25) -1 ]",
    "BLACKBOX::RANGE [(_25, 16)] []",
    "EXPR [ (-1, _19, _23) (-1, _24) 8 ]",
    "EXPR [ (-1, _0) (1, _23) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U16) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 34 }, BinaryIntOp { destination: Relative(2), op: Shl, bit_size: U16, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 8 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 21 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 26 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Integer(U16), value: 15 }, BinaryIntOp { destination: Relative(2), op: Shl, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Const { destination: Relative(1), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 33 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 39 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "tZTBjoIwEIbfpWcOTEtty6sYYypWQ9IAqWCyMbz7TjvFdXfDHiR7mU/E77fO4DzY2Z2m67HtLv2N1fsHO4XW+/Z69H1jx7bv8N0HK2MByWpeMNixWiAUQRNMAi8JwOoKwVktEYJQESQBU3YIRcAUhTAJoiQAAVPUPBdsOdFxDM7FA70cEQ8+2OC6kdXd5H3B7tZP6UO3wXaJow14tyyY685IDLy03sVXc/Fll+sqKJVl0Pqpy+8+rPtC6ewLw9/wq1JmvwL5js/N4guzzZdvnd/ssi9Ltc2H1e//Y36cL+0Xa7beOD29cXp64/T0xunpjdPT/zc9/fzz/dAPeGWbNvzaWPh7IVWeqki1SlWmuktVpapTNWRlmWwgHcgHCgBKAIoAygAKAUrhlMLzGSiFUwqnlLgLoaRlCEDbMFFnGmJciImQyTNFJsYBPt0i5sWH625Da0/exVbEZk1ds3QGL8ePYbmzbPsh9I07T8HFLr6sfKx7URXCHObY6U8=",
  "file_map": {
    "50": {
      "source": "fn main(x: u16) {\n    test_u16(x);\n    // Safety: testing context\n    unsafe {\n        test_u16_unconstrained(x);\n    }\n}\n\nunconstrained fn test_u16_unconstrained(x: u16) {\n    test_u16(x)\n}\n\nfn test_u16(x: u16) {\n    let t1: u16 = 1234;\n    let t2: u16 = 4321;\n    let t = t1 + t2;\n\n    let t4 = t - t2;\n    assert(t4 == t1);\n\n    let mut small_int = x as u16;\n    let shift = small_int << x;\n    assert(shift == 8);\n    assert(shift >> x == small_int);\n    assert(shift >> 15 == 0);\n    assert(shift << 15 == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "test_u16_unconstrained",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
