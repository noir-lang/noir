---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "16061458491050355795": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 5 limbs"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _23",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 16)] []",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 5 ], EXPR [ 2 ]], outputs: [[_1, _2, _3, _4, _5]]",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "BLACKBOX::RANGE [(_2, 1)] []",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 1)] []",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "EXPR [ (1, _0) (-1, _1) (-2, _2) (-4, _3) (-8, _4) (-16, _5) 0 ]",
    "EXPR [ (1, _5, _5) (2, _5) (-1, _6) 1 ]",
    "EXPR [ (-1, _4) (-1, _7) 1 ]",
    "EXPR [ (2, _4, _6) (1, _6, _7) (-1, _8) 0 ]",
    "EXPR [ (1, _8, _8) (-1, _9) 0 ]",
    "EXPR [ (-1, _3) (-1, _10) 1 ]",
    "EXPR [ (2, _3, _9) (1, _9, _10) (-1, _11) 0 ]",
    "EXPR [ (1, _11, _11) (-1, _12) 0 ]",
    "EXPR [ (-1, _2) (-1, _13) 1 ]",
    "EXPR [ (2, _2, _12) (1, _12, _13) (-1, _14) 0 ]",
    "EXPR [ (1, _14, _14) (-1, _15) 0 ]",
    "EXPR [ (-1, _1) (-1, _16) 1 ]",
    "EXPR [ (2, _1, _15) (1, _15, _16) (-1, _17) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _0, _17) 0 ], EXPR [ 65536 ]], outputs: [_18, _19]",
    "BLACKBOX::RANGE [(_18, 16)] []",
    "EXPR [ (1, _0, _17) (-65536, _18) (-1, _19) 0 ]",
    "EXPR [ (1, _19) -8 ]",
    "BRILLIG CALL func 3: inputs: [EXPR [ (1, _17) 0 ]], outputs: [_20]",
    "EXPR [ (1, _17, _20) -1 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ 8 ], EXPR [ (1, _17) 0 ]], outputs: [_21, _22]",
    "BLACKBOX::RANGE [(_21, 16)] []",
    "BLACKBOX::RANGE [(_22, 16)] []",
    "EXPR [ (1, _17) (-1, _22) (-1, _23) -1 ]",
    "BLACKBOX::RANGE [(_23, 16)] []",
    "EXPR [ (-1, _17, _21) (-1, _22) 8 ]",
    "EXPR [ (-1, _0) (1, _21) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U16) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 22 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(3), source: Direct(0) }, Mov { destination: Relative(4), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 28 }, Mov { destination: Direct(0), source: Relative(0) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 27 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 22 }, BinaryIntOp { destination: Relative(2), op: Shl, bit_size: U16, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 8 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 35 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 40 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Integer(U16), value: 15 }, BinaryIntOp { destination: Relative(2), op: Shl, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Const { destination: Relative(1), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 47 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 3",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "tZXdisIwEIXfJde96OSnSXyVRSRqlEJoS2yFRfruO8mkrrsgLC17cz5jPcfMTJs+2Nkfp+uh7S79je0+HuwY2xDa6yH0Jze2fYffPlidBBTbQcWgIWiCIdgMXhNwxSsmcCUQQOAEQZAEzJQIzFQITTAEmyExpUEAAVM0QhAkQREwRc9zxZa9H8bofdr6SzFY4uCi70a266YQKnZ3Yco/ug2uyxxdxKt1xXx3RmLgpQ0+fZqrb3f93gpaFzMY87SrP/uFNsUvLF/hl7UqfglqjZ/bxS/sNr9atX/bFL+q9TY/rPl/zpf2i3dus3F6ZuP0zMbpmY3TMxunZ/5veub58P2y73HlTm38ebbhuYL18qwiq8yqsjZZdVaT1WaFmkBuIDuQHygAKAEoAigDKAQohVMKL3ugFI4pgPVxmUpAqsKmUBeaQktMx20mFGIccDpx8410d7F1x+BT2akxU3dauoDL8XNYrizvgCH2J3+eok8de3kRoH7gM8L1fk5d/QI=",
  "file_map": {
    "50": {
      "source": "fn main(x: u16) {\n    test_u16(x);\n    // Safety: testing context\n    unsafe {\n        test_u16_unconstrained(x);\n    }\n}\n\nunconstrained fn test_u16_unconstrained(x: u16) {\n    test_u16(x)\n}\n\nfn test_u16(x: u16) {\n    let t1: u16 = 1234;\n    let t2: u16 = 4321;\n    let t = t1 + t2;\n\n    let t4 = t - t2;\n    assert(t4 == t1);\n\n    let mut small_int = x as u16;\n    let shift = small_int << x;\n    assert(shift == 8);\n    assert(shift >> x == small_int);\n    assert(shift >> 15 == 0);\n    assert(shift << 15 == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "test_u16_unconstrained",
    "directive_to_radix",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
