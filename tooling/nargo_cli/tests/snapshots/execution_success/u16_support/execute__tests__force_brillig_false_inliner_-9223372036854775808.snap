---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9Vb21ITQRDtbO4XJZhwUVBQUOSa7d0NbIoXnvwPkOTVj/HZD/JTfPEbzOC2DpOB0trT1KSrhl1mlpM+PWfOborZCv2ObN4+FeeVeasWRxP9easV5xEthlx3VRzjcsFArNiTLgab4zjy1CByC2hay+mLij47qopFTOPzLJteJFNO+TpOJjf5OM7GN+c55zzOx7dJnqbTPMsvJjeTi3jCWTrl2XiSTmcmYq4AsGZFYhGOY/yUosTlPXsyUYqmalKQKi2KU87NRdqijAgnyirhRFkDTm7Nqqsb4YpS0SnjOFfETipWbUW/9XlrzFuz6GvPW2feuvPWI7ov/DotLoaGp6/p6Wt5+tqevo6nr+vp69FfkUi0sQWDLEJZOHVCLejZrIHDum3isCYtHBa3YVhT7sCwPnMXhpVzj7CmBDbNpFesswiLm/WA6+oZkK9CDVmphgmyhs+BfMkKl3PZPLtArBUwZ/D83vkMUNts5njFo++ydexT2B5m8usr8F4Nmzdr8X4B5i2B9ooOEGtAYXuF4QrUI5s5HihoZ0hhe4XJb6jAey1s3qzFe52WwyvaQKwNCtsrDFegHtnM8YaCdjYpbK8w+W0q8H4ZNm/W4v2KlsMrWkCsLQrbKwxXoB7ZzPGWgna2KWyvMPltK/B+HTZv1uL9hpbDK5pArB0K2ysMV6Ae2czxjoJ2dilsrzD57Srwfhs2b9bi/Y6WwysaQKw9CtsrDFegHtnM8Z6CdvYpbK8w+e0r8H4fNm/W4v2BlsMr6kCsA8J6hRZn5CaWjxS2P5r5Ba5BNro+UFgvhxS2T5h5PlTgfQTk7duZp7FN9MjCR+VOngBgs/lh1+O4OJ5IcWQTkBn4qVw0lJGZTR8G95hwQjyh5bhhITmfOpzL4NlaOi20VCv4u5vLfBpD1gXBReJMM+Ez8t/xymCfEW7hjoB8tWo4Ir9hlcEeke7dGGFWIwXcGMjbNgSDu0r3Q+MJBalVrTxPCHMDNLtE/8dg43LByCdUO1/WTNj+HlW26Pa+fSL/CyCE5ZAvy4TatUikzpK0uIAZ6Dt9adFnB/oFkEPg5KdArAyIZdc0s2qq8T01UcBNSWfRoB+/kbpMCOuoNWfOfWGPXRbH9R/fBpdfv3yXfll/8mKLvAvSsTCquNwTwe/q4N/979CNjnXedcZEMzV6vH7275FzfOzax+7Wzzxjgjkojna+wkOerqSWdQsXWUvBb+jgs+A3dfBTnxbsPqlb1fp8cs4lp7ZTc3Cu1xVPflXnM90c7Wt8+nUfWtyHmeo/XOvTr4z1Pfm5f9f25Gr3ibZ8a8GdF/vlOx9W0xq3r28612rN4cCTU+WBz17TyeHPmhrq4Hv9dc06Hzo8bV1dgXIQPNFAnRYjcsYeus9V8Pmxm4vPXyREM0OrT+r5C7IXeEM7QQAA",
  "debug_symbols": "pdTLjoIwGAXgd+maBf0vXOZVJhODWA1JU0iFSSbGd5/aI44u3DCb/wj1fBJpejEHt19OuyEcx7P5+LyYfRy8H047P/bdPIwh3b1cC7Ne7uboXLplntZTa+qiC7P5CIv3hfnu/JK/dJ66kHPuYlotC+PCIWUCj4N3t0/X4q9dvq8S3bvMj7K+tu37NrePettu6dfNvS9luaEvltc+bXl+4Xrtq/6vXzUb+mrX/083Pf9z//X3v9JV1w/xZb8Zm154YShPzlPy1PQqClPlWefZ5NnmaUuERRCCEYKAYEFYGBaIhUJQCApBISgEhaAQFIJCUAgKQ2EoDIWhMBSGwlAYCkNhKAJFoAgUgSJQBIpAESgCRaAoFIWiUBSKQlEoCkWhKBSFUiVFUiRFUxCCEYJQRIWoEQ0iKdX1tkXi0O29u58rxyX0T8fM/DOtK+tBNMWxd4clutsWyWtp0/wC",
  "file_map": {
    "50": {
      "source": "fn main(x: u16) {\n    test_u16(x);\n    // Safety: testing context\n    unsafe {\n        test_u16_unconstrained(x);\n    }\n}\n\nunconstrained fn test_u16_unconstrained(x: u16) {\n    test_u16(x)\n}\n\nfn test_u16(x: u16) {\n    let t1: u16 = 1234;\n    let t2: u16 = 4321;\n    let t = t1 + t2;\n\n    let t4 = t - t2;\n    assert(t4 == t1);\n\n    let mut small_int = x as u16;\n    let shift = small_int << (x as u8);\n    assert(shift == 8);\n    assert(shift >> (x as u8) == small_int);\n    assert(shift >> 15 == 0);\n    assert(shift << 15 == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_to_radix",
    "directive_invert"
  ]
}
