---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _74",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 16)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(1)), Simple(Witness(2))]",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "EXPR [ (1, _0) (-256, _1) (-1, _2) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 240 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "EXPR [ (1, _2) (-256, _3) (-1, _4) 240 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(5), Witness(6), Witness(7), Witness(8), Witness(9), Witness(10), Witness(11), Witness(12)])]",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 1)] []",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 1)] []",
    "BLACKBOX::RANGE [(_11, 1)] []",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "EXPR [ (1, _2) (-1, _5) (-2, _6) (-4, _7) (-8, _8) (-16, _9) (-32, _10) (-64, _11) (-128, _12) 0 ]",
    "EXPR [ (1, _12, _12) (2, _12) (-1, _13) 1 ]",
    "EXPR [ (-1, _11) (-1, _14) 1 ]",
    "EXPR [ (2, _11, _13) (1, _13, _14) (-1, _15) 0 ]",
    "EXPR [ (1, _15, _15) (-1, _16) 0 ]",
    "EXPR [ (-1, _10) (-1, _17) 1 ]",
    "EXPR [ (2, _10, _16) (1, _16, _17) (-1, _18) 0 ]",
    "EXPR [ (1, _18, _18) (-1, _19) 0 ]",
    "EXPR [ (-1, _9) (-1, _20) 1 ]",
    "EXPR [ (2, _9, _19) (1, _19, _20) (-1, _21) 0 ]",
    "EXPR [ (1, _21, _21) (-1, _22) 0 ]",
    "EXPR [ (-1, _8) (-1, _23) 1 ]",
    "EXPR [ (2, _8, _22) (1, _22, _23) (-1, _24) 0 ]",
    "EXPR [ (1, _24, _24) (-1, _25) 0 ]",
    "EXPR [ (-1, _7) (-1, _26) 1 ]",
    "EXPR [ (2, _7, _25) (1, _25, _26) (-1, _27) 0 ]",
    "EXPR [ (1, _27, _27) (-1, _28) 0 ]",
    "EXPR [ (-1, _6) (-1, _29) 1 ]",
    "EXPR [ (2, _6, _28) (1, _28, _29) (-1, _30) 0 ]",
    "EXPR [ (1, _30, _30) (-1, _31) 0 ]",
    "EXPR [ (-1, _5) (-1, _32) 1 ]",
    "EXPR [ (-1, _3) (-1, _33) 1 ]",
    "EXPR [ (2, _5, _31) (1, _31, _32) (-1, _34) 0 ]",
    "EXPR [ (1, _33, _34) (-1, _35) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(1, Witness(0), Witness(35))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 65536 })], outputs: [Simple(Witness(36)), Simple(Witness(37))]",
    "BLACKBOX::RANGE [(_36, 238)] []",
    "EXPR [ (1, _0, _35) (-65536, _36) (-1, _37) 0 ]",
    "EXPR [ (-1, _36) (-1, _38) 333988080930164722019140712665668870369695501715332555293246523843014656 ]",
    "BLACKBOX::RANGE [(_38, 238)] []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(36))], q_c: 333988080930164722019140712665668870369695501715332555293246523843014656 })], outputs: [Simple(Witness(39))]",
    "EXPR [ (-1, _36, _39) (333988080930164722019140712665668870369695501715332555293246523843014656, _39) (1, _40) -1 ]",
    "EXPR [ (-1, _36, _40) (333988080930164722019140712665668870369695501715332555293246523843014656, _40) 0 ]",
    "EXPR [ (1, _37, _40) (1, _40, _40) (-1, _41) 0 ]",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "EXPR [ (1, _33) -1 ]",
    "EXPR [ (1, _37) -8 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(42), Witness(43), Witness(44), Witness(45), Witness(46), Witness(47), Witness(48), Witness(49)])]",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "BLACKBOX::RANGE [(_43, 1)] []",
    "BLACKBOX::RANGE [(_44, 1)] []",
    "BLACKBOX::RANGE [(_45, 1)] []",
    "BLACKBOX::RANGE [(_46, 1)] []",
    "BLACKBOX::RANGE [(_47, 1)] []",
    "BLACKBOX::RANGE [(_48, 1)] []",
    "BLACKBOX::RANGE [(_49, 1)] []",
    "EXPR [ (1, _2) (-1, _42) (-2, _43) (-4, _44) (-8, _45) (-16, _46) (-32, _47) (-64, _48) (-128, _49) 0 ]",
    "EXPR [ (1, _49, _49) (2, _49) (-1, _50) 1 ]",
    "EXPR [ (-1, _48) (-1, _51) 1 ]",
    "EXPR [ (2, _48, _50) (1, _50, _51) (-1, _52) 0 ]",
    "EXPR [ (1, _52, _52) (-1, _53) 0 ]",
    "EXPR [ (-1, _47) (-1, _54) 1 ]",
    "EXPR [ (2, _47, _53) (1, _53, _54) (-1, _55) 0 ]",
    "EXPR [ (1, _55, _55) (-1, _56) 0 ]",
    "EXPR [ (-1, _46) (-1, _57) 1 ]",
    "EXPR [ (2, _46, _56) (1, _56, _57) (-1, _58) 0 ]",
    "EXPR [ (1, _58, _58) (-1, _59) 0 ]",
    "EXPR [ (-1, _45) (-1, _60) 1 ]",
    "EXPR [ (2, _45, _59) (1, _59, _60) (-1, _61) 0 ]",
    "EXPR [ (1, _61, _61) (-1, _62) 0 ]",
    "EXPR [ (-1, _44) (-1, _63) 1 ]",
    "EXPR [ (2, _44, _62) (1, _62, _63) (-1, _64) 0 ]",
    "EXPR [ (1, _64, _64) (-1, _65) 0 ]",
    "EXPR [ (-1, _43) (-1, _66) 1 ]",
    "EXPR [ (2, _43, _65) (1, _65, _66) (-1, _67) 0 ]",
    "EXPR [ (1, _67, _67) (-1, _68) 0 ]",
    "EXPR [ (-1, _42) (-1, _69) 1 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [(2, Witness(68), Witness(42)), (1, Witness(68), Witness(69))], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(70))]",
    "EXPR [ (2, _42, _68) (1, _68, _69) (-1, _71) 0 ]",
    "EXPR [ (1, _70, _71) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 8 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(71))], q_c: 0 })], outputs: [Simple(Witness(72)), Simple(Witness(73))]",
    "BLACKBOX::RANGE [(_72, 16)] []",
    "BLACKBOX::RANGE [(_73, 16)] []",
    "EXPR [ (1, _71) (-1, _73) (-1, _74) -1 ]",
    "BLACKBOX::RANGE [(_74, 16)] []",
    "EXPR [ (-1, _71, _72) (-1, _73) 8 ]",
    "EXPR [ (-1, _0) (1, _72) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U16) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 22 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(3), source: Direct(0) }, Mov { destination: Relative(4), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 28 }, Mov { destination: Direct(0), source: Relative(0) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 27 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 22 }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U16) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(2), op: Shl, bit_size: U16, lhs: Relative(1), rhs: Relative(3) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U8, lhs: Relative(3), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(5), location: 38 }, Call { location: 56 }, Const { destination: Relative(4), bit_size: Integer(U16), value: 8 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 43 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 48 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Integer(U8), value: 15 }, BinaryIntOp { destination: Relative(2), op: Shl, bit_size: U16, lhs: Relative(4), rhs: Relative(1) }, Const { destination: Relative(1), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 55 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 3",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "tdbdjqJAEIbhe+ljDuiq/vVWjDGozISEoGF0k43h3rea+nCdg0k2kD3xHcepx5Gmwae5tKfH57EbPq5fZrd/mtPY9X33eeyv5+beXQf57dPU5cF6s7OVsUETNUmT51CtkWdUGa41VkNmxxLWOI3XBE3UiOkkeY6rNVZDGlG8RJQg8ZqgiRpRoiTP8aIkidWQhjWipGmqzPKZj/exbctHfjsIcmhuzdgOd7MbHn1fmV9N/5j/6OvWDHPvzSiv1pVph4tUwI+ub8tPU/V3uv551MaIYZvSa9z/8zxnwjznvGY+Jsy7ul4x7ywv88Rr5nn5/M77bfNhzfHzdjl+ftX//z6/5v3ptXw/vnveuPp54+rnjaufN65+3rj6eePq5/+3+um1+S19Gz/Is+bcjd+vyXIls6KRhjVOU67Uch0OmqhJmqyxNWpRQhl1KCwLzEKz4Cw8gkfwCB7BI3gEj+ARPIJH8Bgew2N4DI/hMTyGx/AYHsNz8Bw8B8/Bc/AcPAfPwXPwHDwPz8Pz8Mo9pZwI5aZSNoT3aEAjmtCsDTVqUUIZhRfgBXgBXoAX4EV4EV6EF+FFeBFehBfhRXgRXoKX4CV4CV6Cl+AleAlegpfgZXgZXoaXiyd3+Fy8OJXtMnbNqW/LSV+2xWM4L3tAnt5/35ZXlm8ut/F6bi+PsS375e3rizzu5QpL8aBn/d6HyqfDVDbYHw==",
  "file_map": {
    "50": {
      "source": "fn main(x: u16) {\n    test_u16(x);\n    // Safety: testing context\n    unsafe {\n        test_u16_unconstrained(x);\n    }\n}\n\nunconstrained fn test_u16_unconstrained(x: u16) {\n    test_u16(x)\n}\n\nfn test_u16(x: u16) {\n    let t1: u16 = 1234;\n    let t2: u16 = 4321;\n    let t = t1 + t2;\n\n    let t4 = t - t2;\n    assert(t4 == t1);\n\n    let mut small_int = x as u16;\n    let shift = small_int << (x as u8);\n    assert(shift == 8);\n    assert(shift >> (x as u8) == small_int);\n    assert(shift >> 15 == 0);\n    assert(shift << 15 == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "test_u16_unconstrained",
    "directive_integer_quotient",
    "directive_to_radix",
    "directive_invert"
  ]
}
