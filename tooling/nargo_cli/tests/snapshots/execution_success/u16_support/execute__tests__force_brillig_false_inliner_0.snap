---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "7151707756932127359": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 16 limbs"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _75",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 16)] []",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) 65520 ], EXPR [ 65536 ]], outputs: [_1, _2]",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "BLACKBOX::RANGE [(_2, 16)] []",
    "EXPR [ (1, _0) (-65536, _1) (-1, _2) 65520 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 16 ], EXPR [ 2 ]], outputs: [[_3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18]]",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 1)] []",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 1)] []",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 1)] []",
    "BLACKBOX::RANGE [(_11, 1)] []",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "BLACKBOX::RANGE [(_13, 1)] []",
    "BLACKBOX::RANGE [(_14, 1)] []",
    "BLACKBOX::RANGE [(_15, 1)] []",
    "BLACKBOX::RANGE [(_16, 1)] []",
    "BLACKBOX::RANGE [(_17, 1)] []",
    "BLACKBOX::RANGE [(_18, 1)] []",
    "EXPR [ (1, _0) (-1, _3) (-2, _4) (-4, _5) (-8, _6) (-16, _7) (-32, _8) (-64, _9) (-128, _10) (-256, _11) (-512, _12) (-1024, _13) (-2048, _14) (-4096, _15) (-8192, _16) (-16384, _17) (-32768, _18) 0 ]",
    "EXPR [ (1, _18, _18) (2, _18) (-1, _19) 1 ]",
    "EXPR [ (-1, _17) (-1, _20) 1 ]",
    "EXPR [ (2, _17, _19) (1, _19, _20) (-1, _21) 0 ]",
    "EXPR [ (1, _21, _21) (-1, _22) 0 ]",
    "EXPR [ (-1, _16) (-1, _23) 1 ]",
    "EXPR [ (2, _16, _22) (1, _22, _23) (-1, _24) 0 ]",
    "EXPR [ (1, _24, _24) (-1, _25) 0 ]",
    "EXPR [ (-1, _15) (-1, _26) 1 ]",
    "EXPR [ (2, _15, _25) (1, _25, _26) (-1, _27) 0 ]",
    "EXPR [ (1, _27, _27) (-1, _28) 0 ]",
    "EXPR [ (-1, _14) (-1, _29) 1 ]",
    "EXPR [ (2, _14, _28) (1, _28, _29) (-1, _30) 0 ]",
    "EXPR [ (1, _30, _30) (-1, _31) 0 ]",
    "EXPR [ (-1, _13) (-1, _32) 1 ]",
    "EXPR [ (2, _13, _31) (1, _31, _32) (-1, _33) 0 ]",
    "EXPR [ (1, _33, _33) (-1, _34) 0 ]",
    "EXPR [ (-1, _12) (-1, _35) 1 ]",
    "EXPR [ (2, _12, _34) (1, _34, _35) (-1, _36) 0 ]",
    "EXPR [ (1, _36, _36) (-1, _37) 0 ]",
    "EXPR [ (-1, _11) (-1, _38) 1 ]",
    "EXPR [ (2, _11, _37) (1, _37, _38) (-1, _39) 0 ]",
    "EXPR [ (1, _39, _39) (-1, _40) 0 ]",
    "EXPR [ (-1, _10) (-1, _41) 1 ]",
    "EXPR [ (2, _10, _40) (1, _40, _41) (-1, _42) 0 ]",
    "EXPR [ (1, _42, _42) (-1, _43) 0 ]",
    "EXPR [ (-1, _9) (-1, _44) 1 ]",
    "EXPR [ (2, _9, _43) (1, _43, _44) (-1, _45) 0 ]",
    "EXPR [ (1, _45, _45) (-1, _46) 0 ]",
    "EXPR [ (-1, _8) (-1, _47) 1 ]",
    "EXPR [ (2, _8, _46) (1, _46, _47) (-1, _48) 0 ]",
    "EXPR [ (1, _48, _48) (-1, _49) 0 ]",
    "EXPR [ (-1, _7) (-1, _50) 1 ]",
    "EXPR [ (2, _7, _49) (1, _49, _50) (-1, _51) 0 ]",
    "EXPR [ (1, _51, _51) (-1, _52) 0 ]",
    "EXPR [ (-1, _6) (-1, _53) 1 ]",
    "EXPR [ (2, _6, _52) (1, _52, _53) (-1, _54) 0 ]",
    "EXPR [ (1, _54, _54) (-1, _55) 0 ]",
    "EXPR [ (-1, _5) (-1, _56) 1 ]",
    "EXPR [ (2, _5, _55) (1, _55, _56) (-1, _57) 0 ]",
    "EXPR [ (1, _57, _57) (-1, _58) 0 ]",
    "EXPR [ (-1, _4) (-1, _59) 1 ]",
    "EXPR [ (2, _4, _58) (1, _58, _59) (-1, _60) 0 ]",
    "EXPR [ (1, _60, _60) (-1, _61) 0 ]",
    "EXPR [ (-1, _3) (-1, _62) 1 ]",
    "EXPR [ (-1, _1) (-1, _63) 1 ]",
    "EXPR [ (2, _3, _61) (1, _61, _62) (-1, _64) 0 ]",
    "EXPR [ (1, _63, _64) (-1, _65) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0, _65) 0 ], EXPR [ 65536 ]], outputs: [_66, _67]",
    "BLACKBOX::RANGE [(_66, 238)] []",
    "EXPR [ (1, _0, _65) (-65536, _66) (-1, _67) 0 ]",
    "EXPR [ (-1, _66) (-1, _68) 333988080930164722019140712665668870369695501715332555293246523843014656 ]",
    "BLACKBOX::RANGE [(_68, 238)] []",
    "BRILLIG CALL func 3: inputs: [EXPR [ (-1, _66) 333988080930164722019140712665668870369695501715332555293246523843014656 ]], outputs: [_69]",
    "EXPR [ (-1, _66, _69) (333988080930164722019140712665668870369695501715332555293246523843014656, _69) (1, _70) -1 ]",
    "EXPR [ (-1, _66, _70) (333988080930164722019140712665668870369695501715332555293246523843014656, _70) 0 ]",
    "EXPR [ (1, _67, _70) (-1, _71) 0 ]",
    "BLACKBOX::RANGE [(_71, 0)] []",
    "EXPR [ (1, _63) -1 ]",
    "EXPR [ (1, _67) -8 ]",
    "BRILLIG CALL func 3: inputs: [EXPR [ (1, _64) 0 ]], outputs: [_72]",
    "EXPR [ (1, _64, _72) -1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ 8 ], EXPR [ (1, _64) 0 ]], outputs: [_73, _74]",
    "BLACKBOX::RANGE [(_73, 16)] []",
    "BLACKBOX::RANGE [(_74, 16)] []",
    "EXPR [ (1, _64) (-1, _74) (-1, _75) -1 ]",
    "BLACKBOX::RANGE [(_75, 16)] []",
    "EXPR [ (-1, _64, _73) (-1, _74) 8 ]",
    "EXPR [ (-1, _0) (1, _73) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U16) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 39 }, BinaryIntOp { destination: Relative(2), op: Shl, bit_size: U16, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(4), location: 21 }, Call { location: 45 }, Const { destination: Relative(3), bit_size: Integer(U16), value: 8 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 26 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 31 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Integer(U16), value: 15 }, BinaryIntOp { destination: Relative(2), op: Shl, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Const { destination: Relative(1), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 38 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 44 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 3",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "tdXLjuIwEAXQf/E6i9iu8oNfQQgFcLciRQGlk5ZGiH+fsq/T0z0SsyCaTV1e95DEJtzVJZ2W92M/vl0/1G5/V6epH4b+/Thcz93cX0d59a7aPDSrnWmUdgiPCIhYwrQIrXZWwiAsghCMEIUkRGGJgIglbIsQxUkYhCheghCMcAhR/OPRqPWgj/OUUj7mb2ch53brpjTOajcuw9Coz25Yyoc+bt1Ycu4mebdtVBovkgK+9UPKjx7Nn3b7vKq9r2Udwledf/b18771ofZtNC/0qeXaJ82v9E1c+zZu6/NLxx9d7XPrt/X10+//x/oZs15++6wdNq5e2Lh6YePqhY2rFzauXvh/qxe+fnx/1Q/yrDv308+bmtxe5HxNmbZMKpPLdGX6MkOZsUzdItDWqGv0NQANQYPQMDQQDcVAMfUYoBgoBoqBYqAYKAaKgWKhWCi2ngoUC8VCsVAsFAvFQiEoBIWgUL0iUAgKQSEoBIWgMBSGwlAYCtcLC4WhMBSGwlAcFAfFQXFQHBRX1weKg+KgOCgeiofioXgoHoqH4usyQ/FQPJQAJYiiZdcFkzeWpK1JNbmmq+lrhpoRGYXTcn+J2cs/789u6rvTkPJmzNt1Gc/r3pSn86/b+s76l3ybrud0WaaU9/G3/2WZexsbogP25Z64IX945I3/Gw==",
  "file_map": {
    "50": {
      "source": "fn main(x: u16) {\n    test_u16(x);\n    // Safety: testing context\n    unsafe {\n        test_u16_unconstrained(x);\n    }\n}\n\nunconstrained fn test_u16_unconstrained(x: u16) {\n    test_u16(x)\n}\n\nfn test_u16(x: u16) {\n    let t1: u16 = 1234;\n    let t2: u16 = 4321;\n    let t = t1 + t2;\n\n    let t4 = t - t2;\n    assert(t4 == t1);\n\n    let mut small_int = x as u16;\n    let shift = small_int << x;\n    assert(shift == 8);\n    assert(shift >> x == small_int);\n    assert(shift >> 15 == 0);\n    assert(shift << 15 == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "test_u16_unconstrained",
    "directive_integer_quotient",
    "directive_to_radix",
    "directive_invert"
  ]
}
