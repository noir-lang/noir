---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "zero",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "one",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "two",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "three",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "minus_one",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "minus_two",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "minus_three",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _20",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 2 ]], outputs: [_7, _8]",
    "BLACKBOX::RANGE [(_7, 31)] []",
    "EXPR [ (1, _0) (-2, _7) (-1, _8) 0 ]",
    "EXPR [ (1, _8) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ], EXPR [ 2 ]], outputs: [_9, _10]",
    "BLACKBOX::RANGE [(_9, 31)] []",
    "EXPR [ (1, _1) (-2, _9) (-1, _10) 0 ]",
    "EXPR [ (1, _10) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _2) 0 ], EXPR [ 2 ]], outputs: [_11, _12]",
    "BLACKBOX::RANGE [(_11, 31)] []",
    "EXPR [ (1, _2) (-2, _11) (-1, _12) 0 ]",
    "EXPR [ (1, _12) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _3) 0 ], EXPR [ 2 ]], outputs: [_13, _14]",
    "BLACKBOX::RANGE [(_13, 31)] []",
    "EXPR [ (1, _3) (-2, _13) (-1, _14) 0 ]",
    "EXPR [ (1, _14) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _4) 0 ], EXPR [ 2 ]], outputs: [_15, _16]",
    "BLACKBOX::RANGE [(_15, 31)] []",
    "EXPR [ (1, _4) (-2, _15) (-1, _16) 0 ]",
    "EXPR [ (1, _16) -1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _5) 0 ], EXPR [ 2 ]], outputs: [_17, _18]",
    "BLACKBOX::RANGE [(_17, 31)] []",
    "EXPR [ (1, _5) (-2, _17) (-1, _18) 0 ]",
    "EXPR [ (1, _18) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _6) 0 ], EXPR [ 2 ]], outputs: [_19, _20]",
    "BLACKBOX::RANGE [(_19, 31)] []",
    "EXPR [ (1, _6) (-2, _19) (-1, _20) 0 ]",
    "EXPR [ (1, _20) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pZTNjoMgGEXfhbULfkX7KpNJQy1tSAgaqpNMGt99roJOu+gGNx4Bz/UDhSe52st0P7tw6x/k9PUkl+i8d/ez7zszuj6g9zlXZGuex2gtusjLOKzBRBtGcgqT9xX5MX5aH3oMJqwcTcQorYgNVxCBN+ftcjdX/zb9rDLZZJmpZtdViV+zEl/vfqOP+S0t8DnV2eesPui3Jb6oN1/qY74qmn+919/wg74q8AXl2RdMH/N5yfyF2OoXSh703+v/Rst0Lr7teKLxo1akWa/temUUawcwRAA8QSRIcpKAQiRQJ+gEhODbM6SgBE4TWAJSsC84UlpAJqgEpDDMiC+l4P28yWwTBZIYChKIYqhB8EyRKZddPy9LEp25eJtPstsUupeDbfwdtpHt6Bti39nrFO2yJOsYFukP",
  "file_map": {
    "50": {
      "source": "fn main(\n    zero: i32,\n    one: i32,\n    two: i32,\n    three: i32,\n    minus_one: i32,\n    minus_two: i32,\n    minus_three: i32,\n) {\n    assert_eq(zero as u1, 0);\n    assert_eq(one as u1, 1);\n    assert_eq(two as u1, 0);\n    assert_eq(three as u1, 1);\n    assert_eq(minus_one as u1, 1);\n    assert_eq(minus_two as u1, 0);\n    assert_eq(minus_three as u1, 1);\n\n    let zero: i32 = 0;\n    let one: i32 = 1;\n    let two: i32 = 2;\n    let three: i32 = 3;\n    let minus_one: i32 = -1;\n    let minus_two: i32 = -2;\n    let minus_three: i32 = -3;\n    assert_eq(zero as u1, 0);\n    assert_eq(one as u1, 1);\n    assert_eq(two as u1, 0);\n    assert_eq(three as u1, 1);\n    assert_eq(minus_one as u1, 1);\n    assert_eq(minus_two as u1, 0);\n    assert_eq(minus_three as u1, 1);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
