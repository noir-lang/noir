---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "zero",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "one",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "two",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "three",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "minus_one",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "minus_two",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "minus_three",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _6",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32843 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 7 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(8), offset_address: Relative(9) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U32) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U32) }, Cast { destination: Direct(32840), source: Direct(32840), bit_size: Integer(U32) }, Cast { destination: Direct(32841), source: Direct(32841), bit_size: Integer(U32) }, Cast { destination: Direct(32842), source: Direct(32842), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Mov { destination: Relative(5), source: Direct(32840) }, Mov { destination: Relative(6), source: Direct(32841) }, Mov { destination: Relative(7), source: Direct(32842) }, Call { location: 25 }, Call { location: 26 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32843 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 75 }, Cast { destination: Relative(9), source: Relative(1), bit_size: Integer(U1) }, Cast { destination: Relative(8), source: Relative(9), bit_size: Integer(U32) }, Cast { destination: Relative(1), source: Relative(8), bit_size: Integer(U1) }, Const { destination: Relative(8), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(1), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 35 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Cast { destination: Relative(9), source: Relative(2), bit_size: Integer(U1) }, Cast { destination: Relative(1), source: Relative(9), bit_size: Integer(U32) }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U1) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(2), location: 42 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Cast { destination: Relative(9), source: Relative(3), bit_size: Integer(U1) }, Cast { destination: Relative(2), source: Relative(9), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U1) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(2), location: 49 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Cast { destination: Relative(3), source: Relative(4), bit_size: Integer(U1) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U1) }, JumpIf { condition: Relative(3), location: 55 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Cast { destination: Relative(3), source: Relative(5), bit_size: Integer(U1) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U1) }, JumpIf { condition: Relative(3), location: 61 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Cast { destination: Relative(3), source: Relative(6), bit_size: Integer(U1) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U1) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(2), location: 68 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Cast { destination: Relative(3), source: Relative(7), bit_size: Integer(U1) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(2), bit_size: Integer(U1) }, JumpIf { condition: Relative(3), location: 74 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 80 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pdTNjoIwFAXgd+maRf9beBVjDGI1JE0hFSaZGN59brkFdTGbsuET6zn2QtIXubnr/Lj04T48SXN6kWvsve8fFz907dQPAb59EZou3JCGVYRbpF4RsMQBhnBEIBJRpBGARgwCLRKoVyRFGAItChCIRKBFAxoxiEWgxVREUYQh0GIBgUgEWmpAIwZJE1GwRjXNQhGDGTXPiix0MRhMq6zOmmzqgxl1jRqaTX0wn+HZ1CeXpSLbw75M0bn0rD+ePryTsY0uTKQJs/cV+Wn9vP7oObZhdWojrMKOXbiBUHjvvUufluqdpv9HmbQ5zJTd46okr1lJ3ux5a47la1qQ59TkPGf6YL4uyQu95aU5lldF8+t9/5YfzKuCvKA85wUzx/K8ZH4htv0LJQ/mv/d/hru26+PXebqkpti3V+/y7X0O3cfq9DtuK9t5PMahc7c5utT0PpQZXE9GVZael/Rvfw==",
  "file_map": {
    "50": {
      "source": "fn main(\n    zero: i32,\n    one: i32,\n    two: i32,\n    three: i32,\n    minus_one: i32,\n    minus_two: i32,\n    minus_three: i32,\n) {\n    assert_eq(zero as u1, 0);\n    assert_eq(one as u1, 1);\n    assert_eq(two as u1, 0);\n    assert_eq(three as u1, 1);\n    assert_eq(minus_one as u1, 1);\n    assert_eq(minus_two as u1, 0);\n    assert_eq(minus_three as u1, 1);\n\n    let zero: i32 = 0;\n    let one: i32 = 1;\n    let two: i32 = 2;\n    let three: i32 = 3;\n    let minus_one: i32 = -1;\n    let minus_two: i32 = -2;\n    let minus_three: i32 = -3;\n    assert_eq(zero as u1, 0);\n    assert_eq(one as u1, 1);\n    assert_eq(two as u1, 0);\n    assert_eq(three as u1, 1);\n    assert_eq(minus_one as u1, 1);\n    assert_eq(minus_two as u1, 0);\n    assert_eq(minus_three as u1, 1);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
