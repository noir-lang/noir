---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _31",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15]",
    "public parameters indices : [_16]",
    "return value indices : []",
    "INIT (id: 0, len: 16, witnesses: [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15])",
    "BLACKBOX::RANGE [(_16, 32)] []",
    "EXPR [ (1, _16) (-1, _17) -3 ]",
    "BLACKBOX::RANGE [(_17, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 4294967292 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(18)), Simple(Witness(19))]",
    "BLACKBOX::RANGE [(_19, 32)] []",
    "EXPR [ (1, _17) (-4294967296, _18) (-1, _19) 4294967292 ]",
    "EXPR [ (-1, _18) 0 ]",
    "EXPR [ (-1, _20) 0 ]",
    "EXPR [ (-1, _21) 1 ]",
    "EXPR [ (-1, _22) 4 ]",
    "EXPR [ (-1, _23) 5 ]",
    "EXPR [ (-1, _24) 8 ]",
    "EXPR [ (-1, _25) 9 ]",
    "EXPR [ (-1, _26) 12 ]",
    "EXPR [ (-1, _27) 13 ]",
    "EXPR [ (-1, _28) 16 ]",
    "INIT (id: 1, len: 9, witnesses: [_20, _21, _22, _23, _24, _25, _26, _27, _28])",
    "EXPR [ (2, _17) (-1, _29) 0 ]",
    "MEM (id: 1, read at: EXPR [ (1, _29) 0 ], value: EXPR [ (1, _30) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _30) 0 ], value: EXPR [ (1, _31) 0 ]) ",
    "EXPR [ (1, _31) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pZHBboMwDIbfxeccIJDS8SrThAKYKlIUUJpMmhDvPmOXrj3sUPXyf4md/5ccrzBiny+dC9N8hfZzhT46792l8/Ngk5sDVddNwXHtUkSkEjz0ybXYiCFBG7L3Cr6tz/zoutjATDZSt1CAYSRS4OQ87qdN/bmL/6261jezrpu73bzgL+7+83t+Y578X3Szg4tPPwYa2lJBxVqzGtYTa8N6pjAFH6xlISgFWlAJaoERnASNQEJKSdGSoiml2vZhorO9x9sOpxyGh5Wmn+XoHEtf4jzgmCPuw3CPxvsF",
  "file_map": {
    "50": {
      "source": "// struct Bar {\n//     inner: [Field; 3],\n// }\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n  //  bar: Bar,\n}\n\n// struct FooParent {\n//     array: [Field; 3],\n//     foos: [Foo; 4],\n// }\n\nfn main(mut x: [Foo; 4], y: pub u32) {\n    assert(x[y - 3].a == 1);\n    // assert(x[y - 3].b == [2, 3, 20]);\n    // assert(x[y - 2].a == 4);\n    // assert(x[y - 2].b == [5, 6, 21]);\n    // assert(x[y - 1].a == 7);\n    // assert(x[y - 1].b == [8, 9, 22]);\n    // assert(x[y].a == 10);\n    // assert(x[y].b == [11, 12, 23]);\n    // assert(x[y].bar.inner == [109, 110, 111]);\n    // // Check dynamic array set\n    // if y != 2 {\n    //     x[y].a = 50;\n    // } else {\n    //     x[y].a = 100;\n    // }\n    // assert(x[3].a == 50);\n\n    // if y == 2 {\n    //     x[y - 1].b = [50, 51, 52];\n    // } else {\n    //     x[y - 1].b = [100, 101, 102];\n    // }\n    // assert(x[2].b == [100, 101, 102]);\n\n    // assert(x[y - 3].bar.inner == [100, 101, 102]);\n    // assert(x[y - 2].bar.inner == [103, 104, 105]);\n    // assert(x[y - 1].bar.inner == [106, 107, 108]);\n    // assert(x[y].bar.inner == [109, 110, 111]);\n\n    // let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    // let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    // let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    // assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    // assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    // assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    // assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    // assert(foo_parents[y - 3].foos[y].a == 50);\n\n    // assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    // if y == 2 {\n    //     foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    // } else {\n    //     foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    // }\n    // assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    // assert(foo_parents[1].foos[1].b[2] == 18);\n    // if y == 3 {\n    //     foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    // } else {\n    //     foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    // }\n    // assert(foo_parents[1].foos[1].b[2] == 5000);\n    // // Set a dynamic array value\n    // foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    // assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
