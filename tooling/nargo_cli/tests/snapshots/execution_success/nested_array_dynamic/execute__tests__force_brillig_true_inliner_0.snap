---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _28",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27]",
    "public parameters indices : [_28]",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 0 }]), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32867 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 29 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32838), size_address: Relative(3), offset_address: Relative(4) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 7 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 11 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 14 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 15 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 18 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 21 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 22 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 25 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 164 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Relative(1), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(32866) }, Call { location: 175 }, Call { location: 179 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32867 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 174 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 167 }, Return, Const { destination: Direct(32835), bit_size: Integer(U1), value: 1 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(32837), bit_size: Integer(U32), value: 3 }, Return, Call { location: 1762 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(1) }, Const { destination: Relative(4), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(5), op: Sub, lhs: Relative(2), rhs: Relative(4) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U32) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 190 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U32, lhs: Relative(6), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(7) }, Load { destination: Relative(8), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, Load { destination: Relative(10), source_pointer: Relative(12) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(11) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Load { destination: Relative(7), source_pointer: Relative(14) }, Load { destination: Relative(13), source_pointer: Relative(10) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 209 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(7) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 217 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(13) }, Const { destination: Relative(13), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(16), op: Equals, lhs: Relative(8), rhs: Relative(13) }, JumpIf { condition: Relative(16), location: 224 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Load { destination: Relative(8), source_pointer: Relative(10) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(8) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 230 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(7) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(8) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 238 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(8) }, Const { destination: Relative(7), bit_size: Field, value: 2 }, Const { destination: Relative(8), bit_size: Field, value: 20 }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Mov { destination: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(4) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(8) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 21 }, Mov { destination: Relative(21), source: Direct(0) }, Mov { destination: Relative(22), source: Relative(10) }, Mov { destination: Relative(23), source: Relative(18) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(20) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(19), source: Relative(22) }, JumpIf { condition: Relative(19), location: 264 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryFieldOp { destination: Relative(10), op: Sub, lhs: Relative(2), rhs: Relative(7) }, Cast { destination: Relative(19), source: Relative(10), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(5) }, JumpIf { condition: Relative(10), location: 269 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(10) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(21) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(11) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Load { destination: Relative(10), source_pointer: Relative(25) }, Load { destination: Relative(24), source_pointer: Relative(22) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 287 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(24) }, Load { destination: Relative(24), source_pointer: Relative(10) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 295 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(24) }, Const { destination: Relative(24), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(27), op: Equals, lhs: Relative(20), rhs: Relative(24) }, JumpIf { condition: Relative(27), location: 302 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, Load { destination: Relative(20), source_pointer: Relative(22) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(20) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 308 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(20) }, Load { destination: Relative(20), source_pointer: Relative(10) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(20) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 316 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(20) }, Const { destination: Relative(10), bit_size: Field, value: 5 }, Const { destination: Relative(20), bit_size: Field, value: 6 }, Const { destination: Relative(29), bit_size: Field, value: 21 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(10) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(20) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 31 }, Mov { destination: Relative(31), source: Direct(0) }, Mov { destination: Relative(32), source: Relative(22) }, Mov { destination: Relative(33), source: Relative(30) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(29) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(20), source: Relative(32) }, JumpIf { condition: Relative(20), location: 343 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(22) } }, BinaryFieldOp { destination: Relative(20), op: Sub, lhs: Relative(2), rhs: Relative(13) }, Cast { destination: Relative(22), source: Relative(20), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(5) }, JumpIf { condition: Relative(20), location: 348 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(22), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(20) }, Load { destination: Relative(29), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(31) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(11) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(33) }, Load { destination: Relative(20), source_pointer: Relative(35) }, Load { destination: Relative(34), source_pointer: Relative(32) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 366 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(34) }, Load { destination: Relative(34), source_pointer: Relative(20) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(34) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 374 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(34) }, Const { destination: Relative(34), bit_size: Field, value: 7 }, BinaryFieldOp { destination: Relative(37), op: Equals, lhs: Relative(29), rhs: Relative(34) }, JumpIf { condition: Relative(37), location: 381 }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(38) } }, Load { destination: Relative(29), source_pointer: Relative(32) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(29) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 387 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Load { destination: Relative(29), source_pointer: Relative(20) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(29) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 395 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(29) }, Const { destination: Relative(20), bit_size: Field, value: 8 }, Const { destination: Relative(29), bit_size: Field, value: 9 }, Const { destination: Relative(38), bit_size: Field, value: 22 }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(40) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(41), source: Relative(40) }, Store { destination_pointer: Relative(41), source: Relative(20) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(29) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(38) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 41 }, Mov { destination: Relative(41), source: Direct(0) }, Mov { destination: Relative(42), source: Relative(32) }, Mov { destination: Relative(43), source: Relative(39) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(40) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(38), source: Relative(42) }, JumpIf { condition: Relative(38), location: 422 }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(32) } }, Cast { destination: Relative(32), source: Relative(2), bit_size: Integer(U32) }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(32), rhs: Relative(5) }, JumpIf { condition: Relative(38), location: 426 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U32, lhs: Relative(32), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(38) }, Load { destination: Relative(32), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(39) }, Load { destination: Relative(40), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(11) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(41) }, Load { destination: Relative(42), source_pointer: Relative(44) }, Load { destination: Relative(43), source_pointer: Relative(40) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 444 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(43) }, Load { destination: Relative(43), source_pointer: Relative(42) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Not { destination: Relative(46), source: Relative(46), bit_size: U1 }, JumpIf { condition: Relative(46), location: 452 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(43) }, Const { destination: Relative(43), bit_size: Field, value: 10 }, BinaryFieldOp { destination: Relative(46), op: Equals, lhs: Relative(32), rhs: Relative(43) }, JumpIf { condition: Relative(46), location: 459 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(47) } }, Load { destination: Relative(32), source_pointer: Relative(40) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(32) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 465 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(32) }, Load { destination: Relative(32), source_pointer: Relative(42) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(32) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 473 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(32) }, Const { destination: Relative(32), bit_size: Field, value: 11 }, Const { destination: Relative(48), bit_size: Field, value: 12 }, Const { destination: Relative(49), bit_size: Field, value: 23 }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(32) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(48) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(49) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 51 }, Mov { destination: Relative(51), source: Direct(0) }, Mov { destination: Relative(52), source: Relative(40) }, Mov { destination: Relative(53), source: Relative(50) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(48) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(32), source: Relative(52) }, JumpIf { condition: Relative(32), location: 500 }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(48) } }, Load { destination: Relative(32), source_pointer: Relative(40) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(32) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 506 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(32) }, Load { destination: Relative(32), source_pointer: Relative(42) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(32) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 514 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(32) }, Const { destination: Relative(32), bit_size: Field, value: 109 }, Const { destination: Relative(51), bit_size: Field, value: 110 }, Const { destination: Relative(52), bit_size: Field, value: 111 }, Mov { destination: Relative(53), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Mov { destination: Relative(55), source: Relative(54) }, Store { destination_pointer: Relative(55), source: Relative(32) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(51) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(52) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 54 }, Mov { destination: Relative(54), source: Direct(0) }, Mov { destination: Relative(55), source: Relative(42) }, Mov { destination: Relative(56), source: Relative(53) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(51) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(32), source: Relative(55) }, JumpIf { condition: Relative(32), location: 541 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(51) } }, BinaryFieldOp { destination: Relative(32), op: Equals, lhs: Relative(2), rhs: Relative(7) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, Const { destination: Relative(52), bit_size: Field, value: 100 }, Const { destination: Relative(54), bit_size: Field, value: 50 }, JumpIf { condition: Relative(32), location: 570 }, Jump { location: 547 }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(38) }, Store { destination_pointer: Relative(16), source: Relative(54) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(1), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(39) }, Store { destination_pointer: Relative(16), source: Relative(40) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(51) }, Store { destination_pointer: Relative(16), source: Relative(42) }, Store { destination_pointer: Relative(3), source: Relative(14) }, Jump { location: 593 }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(38) }, Store { destination_pointer: Relative(16), source: Relative(52) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(1), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(39) }, Store { destination_pointer: Relative(16), source: Relative(40) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(51) }, Store { destination_pointer: Relative(16), source: Relative(42) }, Store { destination_pointer: Relative(3), source: Relative(14) }, Jump { location: 593 }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(16) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, Load { destination: Relative(16), source_pointer: Relative(17) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, Load { destination: Relative(17), source_pointer: Relative(25) }, Load { destination: Relative(1), source_pointer: Relative(16) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 609 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(17) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 617 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(15), rhs: Relative(54) }, JumpIf { condition: Relative(1), location: 623 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, Const { destination: Relative(15), bit_size: Field, value: 101 }, Const { destination: Relative(17), bit_size: Field, value: 102 }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(27), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(52) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(15) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(17) }, Load { destination: Relative(15), source_pointer: Relative(25) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 643 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(15) }, JumpIf { condition: Relative(32), location: 675 }, Jump { location: 647 }, Load { destination: Relative(14), source_pointer: Relative(25) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 653 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(33) }, Load { destination: Relative(16), source_pointer: Relative(26) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(31) }, Store { destination_pointer: Relative(27), source: Relative(25) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, Store { destination_pointer: Relative(27), source: Relative(16) }, Store { destination_pointer: Relative(3), source: Relative(14) }, Jump { location: 708 }, Const { destination: Relative(14), bit_size: Field, value: 51 }, Const { destination: Relative(15), bit_size: Field, value: 52 }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(17) }, Store { destination_pointer: Relative(26), source: Relative(54) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(14) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(33) }, Load { destination: Relative(15), source_pointer: Relative(26) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(31) }, Store { destination_pointer: Relative(27), source: Relative(16) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, Store { destination_pointer: Relative(26), source: Relative(15) }, Store { destination_pointer: Relative(3), source: Relative(14) }, Jump { location: 708 }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(14), source_pointer: Relative(15) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(3), source_pointer: Relative(14) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 721 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(15) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(3) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 729 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(3) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(14) }, Mov { destination: Relative(57), source: Relative(25) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(15) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 742 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, Load { destination: Relative(3), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Load { destination: Relative(14), source_pointer: Relative(26) }, Load { destination: Relative(15), source_pointer: Relative(3) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(15) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 754 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(15) }, Load { destination: Relative(3), source_pointer: Relative(14) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(3) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 762 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(3) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(14) }, Mov { destination: Relative(57), source: Relative(25) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(27) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 775 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(21) }, Load { destination: Relative(3), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(23) }, Load { destination: Relative(14), source_pointer: Relative(28) }, Load { destination: Relative(27), source_pointer: Relative(3) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 787 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(27) }, Load { destination: Relative(3), source_pointer: Relative(14) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(3) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 795 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(3) }, Const { destination: Relative(3), bit_size: Field, value: 103 }, Const { destination: Relative(34), bit_size: Field, value: 104 }, Const { destination: Relative(35), bit_size: Field, value: 105 }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(37) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(37) }, Store { destination_pointer: Relative(40), source: Relative(3) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(34) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(35) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(14) }, Mov { destination: Relative(57), source: Relative(36) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(34) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 822 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(31) }, Load { destination: Relative(3), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(33) }, Load { destination: Relative(14), source_pointer: Relative(35) }, Load { destination: Relative(34), source_pointer: Relative(3) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 834 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(34) }, Load { destination: Relative(3), source_pointer: Relative(14) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(3) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 842 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(3) }, Const { destination: Relative(3), bit_size: Field, value: 106 }, Const { destination: Relative(36), bit_size: Field, value: 107 }, Const { destination: Relative(37), bit_size: Field, value: 108 }, Mov { destination: Relative(40), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(40), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(42) }, Store { destination_pointer: Relative(44), source: Relative(3) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(36) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(14) }, Mov { destination: Relative(57), source: Relative(40) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(36) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 869 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(39) }, Load { destination: Relative(3), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(41) }, Load { destination: Relative(14), source_pointer: Relative(37) }, Load { destination: Relative(36), source_pointer: Relative(3) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(36) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 881 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(36) }, Load { destination: Relative(3), source_pointer: Relative(14) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 889 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(53) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(3) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 897 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(3) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(14) }, Mov { destination: Relative(57), source: Relative(53) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(42) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 910 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Const { destination: Relative(3), bit_size: Field, value: 0 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(42) }, Store { destination_pointer: Relative(44), source: Relative(3) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(13) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 928 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(13) }, Store { destination_pointer: Relative(42), source: Relative(4) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(13) }, Store { destination_pointer: Relative(24), source: Relative(14) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(1) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(3) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(1) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(10) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(11) }, JumpIf { condition: Relative(14), location: 960 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U32, lhs: Relative(6), rhs: Relative(11) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(14) }, Load { destination: Relative(6), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(24) }, Load { destination: Relative(14), source_pointer: Relative(44) }, Load { destination: Relative(24), source_pointer: Relative(6) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(24) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 974 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(24) }, Load { destination: Relative(24), source_pointer: Relative(14) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(24) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 982 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(24) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(9) }, Load { destination: Relative(24), source_pointer: Relative(46) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(12) }, Load { destination: Relative(45), source_pointer: Relative(47) }, Load { destination: Relative(46), source_pointer: Relative(24) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 996 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(46) }, Load { destination: Relative(46), source_pointer: Relative(45) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(46) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 1004 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(46) }, Load { destination: Relative(45), source_pointer: Relative(18) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 1012 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(45) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(24) }, Mov { destination: Relative(57), source: Relative(18) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(49) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(45), source: Relative(56) }, JumpIf { condition: Relative(45), location: 1025 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Load { destination: Relative(18), source_pointer: Relative(6) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(18) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 1031 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(14) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(18) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 1039 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(18) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(21) }, Load { destination: Relative(18), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(23) }, Load { destination: Relative(49), source_pointer: Relative(52) }, Load { destination: Relative(51), source_pointer: Relative(18) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 1053 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(51) }, Load { destination: Relative(51), source_pointer: Relative(49) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 1061 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(51) }, Load { destination: Relative(49), source_pointer: Relative(30) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 1069 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(49) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 56 }, Mov { destination: Relative(56), source: Direct(0) }, Mov { destination: Relative(57), source: Relative(18) }, Mov { destination: Relative(58), source: Relative(30) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(55) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(49), source: Relative(57) }, JumpIf { condition: Relative(49), location: 1082 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Load { destination: Relative(18), source_pointer: Relative(6) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(18) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 1088 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(14) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(18) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 1096 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(18) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(31) }, Load { destination: Relative(18), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(33) }, Load { destination: Relative(31), source_pointer: Relative(57) }, Load { destination: Relative(33), source_pointer: Relative(18) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(33) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 1110 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(31) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(33) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 1118 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(33) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 58 }, Mov { destination: Relative(58), source: Direct(0) }, Mov { destination: Relative(59), source: Relative(18) }, Mov { destination: Relative(60), source: Relative(25) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(33) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(31), source: Relative(59) }, JumpIf { condition: Relative(31), location: 1131 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Load { destination: Relative(18), source_pointer: Relative(6) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(18) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1137 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(14) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(18) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1145 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(18) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(39) }, Load { destination: Relative(18), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(41) }, Load { destination: Relative(33), source_pointer: Relative(58) }, Load { destination: Relative(39), source_pointer: Relative(18) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(39) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 1159 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(39) }, Load { destination: Relative(39), source_pointer: Relative(33) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(39) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 1167 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(39) }, Load { destination: Relative(39), source_pointer: Relative(50) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(39) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 1175 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(39) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 61 }, Mov { destination: Relative(61), source: Direct(0) }, Mov { destination: Relative(62), source: Relative(18) }, Mov { destination: Relative(63), source: Relative(50) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(60) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(39), source: Relative(62) }, JumpIf { condition: Relative(39), location: 1188 }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(50) } }, Load { destination: Relative(39), source_pointer: Relative(6) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(39) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 1194 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(39) }, Load { destination: Relative(6), source_pointer: Relative(14) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(6) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 1202 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(6) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(38) }, Load { destination: Relative(6), source_pointer: Relative(61) }, Load { destination: Relative(14), source_pointer: Relative(18) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(14) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 1213 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(33) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(14) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 1221 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(14) }, BinaryFieldOp { destination: Relative(14), op: Equals, lhs: Relative(6), rhs: Relative(54) }, JumpIf { condition: Relative(14), location: 1227 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(6), source_pointer: Relative(3) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(6) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1233 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(6) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(3) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1241 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(54) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, Load { destination: Relative(60), source_pointer: Relative(61) }, Load { destination: Relative(1), source_pointer: Relative(33) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(1) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 1255 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(60) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(63), op: Equals, bit_size: U32, lhs: Relative(62), rhs: Relative(1) }, Not { destination: Relative(63), source: Relative(63), bit_size: U1 }, JumpIf { condition: Relative(63), location: 1263 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(60), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(30) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(63), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(1) }, Not { destination: Relative(63), source: Relative(63), bit_size: U1 }, JumpIf { condition: Relative(63), location: 1271 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(1) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 64 }, Mov { destination: Relative(64), source: Direct(0) }, Mov { destination: Relative(65), source: Relative(33) }, Mov { destination: Relative(66), source: Relative(30) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(63) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(65) }, JumpIf { condition: Relative(1), location: 1284 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(30) } }, BinaryIntOp { destination: Relative(1), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(11) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Relative(11) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, Const { destination: Relative(33), bit_size: Field, value: 19 }, Const { destination: Relative(63), bit_size: Field, value: 18 }, Mov { destination: Relative(64), source: Direct(1) }, Const { destination: Relative(65), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(65) }, IndirectConst { destination_pointer: Relative(64), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Mov { destination: Relative(66), source: Relative(65) }, Store { destination_pointer: Relative(66), source: Relative(8) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(66), rhs: Direct(2) }, Store { destination_pointer: Relative(66), source: Relative(33) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(66), rhs: Direct(2) }, Store { destination_pointer: Relative(66), source: Relative(63) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(66), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(68), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(69), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(70), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(71), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(72), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(73), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, JumpIf { condition: Relative(32), location: 1350 }, Jump { location: 1311 }, Load { destination: Relative(6), source_pointer: Relative(64) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 1317 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(64), source: Relative(6) }, JumpIf { condition: Relative(1), location: 1321 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(65) }, Load { destination: Relative(6), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(23) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(21) }, Store { destination_pointer: Relative(17), source: Relative(64) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(19) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1807 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(66) }, Store { destination_pointer: Relative(16), source: Relative(6) }, Store { destination_pointer: Relative(13), source: Relative(14) }, Jump { location: 1393 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(7) }, Store { destination_pointer: Relative(14), source: Relative(43) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(29) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(20) }, JumpIf { condition: Relative(1), location: 1363 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(7) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(23) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(21) }, Store { destination_pointer: Relative(18), source: Relative(6) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(19) }, Store { destination_pointer: Relative(17), source: Relative(15) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1807 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(7) }, Store { destination_pointer: Relative(16), source: Relative(6) }, Store { destination_pointer: Relative(13), source: Relative(14) }, Jump { location: 1393 }, Load { destination: Relative(6), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32837) }, Load { destination: Relative(7), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(6) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 1404 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(10) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(6) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1412 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(6) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(54) }, Load { destination: Relative(16), source_pointer: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1424 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(16) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 1432 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(17) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 74 }, Mov { destination: Relative(74), source: Direct(0) }, Mov { destination: Relative(75), source: Relative(6) }, Mov { destination: Relative(76), source: Relative(64) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(24) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(17), source: Relative(75) }, JumpIf { condition: Relative(17), location: 1445 }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(24) } }, Load { destination: Relative(17), source_pointer: Relative(7) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(17) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 1451 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(17) }, Load { destination: Relative(7), source_pointer: Relative(10) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(7) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 1459 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(7) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 1467 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(16) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(7) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 1475 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32837) }, Load { destination: Relative(7), source_pointer: Relative(16) }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(7), rhs: Relative(63) }, JumpIf { condition: Relative(6), location: 1483 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Direct(32837) }, Const { destination: Relative(4), bit_size: Field, value: 5000 }, JumpIf { condition: Relative(6), location: 1533 }, Jump { location: 1488 }, Load { destination: Relative(6), source_pointer: Relative(13) }, JumpIf { condition: Relative(1), location: 1491 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(69) }, Load { destination: Relative(7), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(21) }, Load { destination: Relative(10), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(23) }, Load { destination: Relative(14), source_pointer: Relative(16) }, JumpIf { condition: Relative(2), location: 1502 }, Call { location: 1768 }, Const { destination: Relative(2), bit_size: Field, value: 1000 }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 1807 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(22) }, Store { destination_pointer: Relative(17), source: Relative(2) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(21) }, Store { destination_pointer: Relative(16), source: Relative(15) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(19) }, Store { destination_pointer: Relative(15), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1807 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(70) }, Store { destination_pointer: Relative(14), source: Relative(7) }, Store { destination_pointer: Relative(13), source: Relative(2) }, Jump { location: 1577 }, Load { destination: Relative(6), source_pointer: Relative(13) }, JumpIf { condition: Relative(1), location: 1536 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(67) }, Load { destination: Relative(7), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(21) }, Load { destination: Relative(10), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(23) }, Load { destination: Relative(14), source_pointer: Relative(16) }, JumpIf { condition: Relative(2), location: 1547 }, Call { location: 1768 }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 1807 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(22) }, Store { destination_pointer: Relative(16), source: Relative(4) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(10), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(21) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(19) }, Store { destination_pointer: Relative(15), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1807 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(68) }, Store { destination_pointer: Relative(14), source: Relative(2) }, Store { destination_pointer: Relative(13), source: Relative(7) }, Jump { location: 1577 }, Load { destination: Relative(2), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, Load { destination: Relative(6), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, Load { destination: Relative(7), source_pointer: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(6) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 1588 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(10) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(6) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 1596 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(54) }, Load { destination: Relative(3), source_pointer: Relative(15) }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(7) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1608 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(3) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(7) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 1616 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32837) }, Load { destination: Relative(3), source_pointer: Relative(7) }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(3), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 1624 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, JumpIf { condition: Relative(1), location: 1626 }, Call { location: 1768 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(30) }, Load { destination: Relative(1), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(71) }, Load { destination: Relative(3), source_pointer: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 1638 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(6) }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(1) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 1646 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(21) }, Load { destination: Relative(1), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(23) }, Load { destination: Relative(17), source_pointer: Relative(19) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(3) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 1660 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(17) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(3) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1668 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(3) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(72) }, Load { destination: Relative(3), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(12) }, Load { destination: Relative(17), source_pointer: Relative(21) }, Mov { destination: Direct(32771), source: Relative(3) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(9) }, Store { destination_pointer: Relative(21), source: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32836) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1807 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(1) }, Store { destination_pointer: Relative(20), source: Relative(17) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1807 }, Mov { destination: Relative(1), source: Direct(32773) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(73) }, Store { destination_pointer: Relative(12), source: Relative(3) }, Store { destination_pointer: Relative(13), source: Relative(1) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, Load { destination: Relative(2), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(5) }, Load { destination: Relative(3), source_pointer: Relative(9) }, Load { destination: Relative(1), source_pointer: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(1) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 1709 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 1717 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(1) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(11) }, Load { destination: Relative(1), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, Load { destination: Relative(9), source_pointer: Relative(11) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 1729 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(9) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(3) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 1737 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(13), source: Relative(9) }, Store { destination_pointer: Relative(13), source: Relative(8) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(33) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(4) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 20 }, Mov { destination: Relative(20), source: Direct(0) }, Mov { destination: Relative(21), source: Relative(1) }, Mov { destination: Relative(22), source: Relative(3) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(8) }, Call { location: 1774 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(4), source: Relative(21) }, JumpIf { condition: Relative(4), location: 1761 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(1) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 1767 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 1762 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Direct(32835) }, Load { destination: Relative(5), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 1784 }, Call { location: 1771 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 1789 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, JumpIf { condition: Relative(5), location: 1794 }, Jump { location: 1792 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Return, Load { destination: Relative(5), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 1789 }, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 1811 }, Jump { location: 1813 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 1828 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 1825 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 1818 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 1828 }, Return]"
  ],
  "debug_symbols": "pdzfrhzFzgXwd8l1LsblssvmVRBCAcJRpCigHPikT4h3P+Nqr1XZF0io54b6JZtea/65p6end/5698vHn/78z4+fvvz623/ffff9X+9++vrp8+dP//nx828/f/jj029fnn/717tH/UdC330n75/r7NV69V5Xr9FrXms+Nx+1Sq+jV+119mq9eq+r1+g19zoej16l19Gr9jp7tV6919Vr9Np50nnSedJ50nnSedJ50nnSedJ58szT5zoevUqvo1ft9Zk3a7VevdfVa/Sa16qPXqXX0av22nnaedp52nnaedp585lntUqvo1ftdfZqvXqvq9foNa/VOs86zzrPnnle6+zVevVeV6/Ra16rP3qVXkevnefPvFWr9eq9rl6j12dePNf16FV6Hb1qr7NX69V7Xb1Gr50XnRedF50XnRedF50XnRedF50XnZedl52XnZedl52XnZedV/ORtUavuVet+dir9PrMk0dBgQkY4MACAshGzckFAZAsSBYkC5IFyYLkmheRQjZqYi4IMAAFJmCAAwtA8kCyIlmRXNMjo6DABAxwYAEBZKOm6IIASK5BEi1MwAAHFlDJs5CNmqcLAgxAgQkY4MACkGxIdiQ7kh3JjmRHsiPZkexIdiQ7kheSF5IXkheSF5IXkmvSxAoLCCAbNW0XKtkLA1BgAgY4sIAAslFzdwHJieREciI5kZxIrvGTVQggL8yawAsCDECBCRjgwAICQLIgec9gFAagwAQMcGABAWRjz+AGkgeSB5IHkgeS9wxmYQEBZGPP4IYAA1BgAgYgWZGsSFYkTyRPJE8kTyRPJE8kTyRPJE8kTyQbkg3JhmRDcs3geBQMcGABAdTBxnP/M2sGLwgwAAUmYIADCwgAyQvJC8kLyQvJC8k1g2MUHFhAANmoGbwgwAAUmACSA8mB5EByzeB47v3mPjbcEGAACkzAAAcWEEAn2z5KnAUBBqDABAxwYAEBZEOQLEgWJAuSBcmC5H3UaIUFBJCNmsELAgxAgQkYgOSB5IHkgeSaweEFAQagwAQMcGABAWRjIrlmcKxCJUdhAQFko+brggDYqubrwgQMcADJhmRDsiPZkexIdiQ7kh3JjmRHsiN5j1UWBBiAAhMwwIEFBJCNQHIgOZAcSA4kB5IDyYHkQHIgOZGcSE4E1jTpo2CAAwsIIC94TdMFAQagwAQMcGABASBZkCxIFiQLkgXJgmRBsiBZkLw/hj13cb4/h20IMIBKHoVK1oIBDiwggGzUNF0QYAAKIFmRrEiuadJZCCAbNU0XBBiAAhOoHCsEkI2arwsCDECBCRjg/bDUfF0IIBs1XxcEGAAe1ZqvCwYg2ZHsSHYkLyQvJC8kLyTXfKkXHFhAANmo+bogwAAUmACSA8mB5EByzZc+d3Fe83VBgAEoMAEDHFhAAJ28Hg9AgAEoMAEDHOhHde35eu6+1p6vDQEGoMAEDHBgAQEgeSB5IHkgeSB5IHkgeSB5IHkgeSBZkbznKwsDUGACBjiwgACysedrA8k1X/NRUGACBjiwgACyURN3QQAkG5INyYZkQ7Ih2ZBsSHYkO5IdyY7kmrgpBQMcWEAA2aiJuyDAABRAco3erJdWjd6FBQSQjRq9CwIMQIEJIDmQHEgOJAeSE8mJ5ERyIjmRnEhOJNfoTS0EkBeiRu+CAANQYAIGOLCAAJAsSK4ZnLMwAAUmYIADCwggGzWDF5BcMzitoMAEDHBgAQFkY5913BAAyYpkRbIiWZGsSFYkK5InkieSJ5InkvcMesEABxYQQDb2DG4IMAAFkGxINiQbkvcMrkI29gxuCDAABSZggAMLQPKewecuLvYMbggwAAUmYIADCwgAyYHkQHIgOZAcSA4kB5IDyYHkQHIiec9gFgagwAQMcGABAdSp5Od+LGsGLwgwAAUmYIADCwgAyTWDJgUBBqDABAxwYAEBZGMgeSB5IHkgeSB5IHkgeSB5IHkguWbQRkGAASgwAQMcWEAA2ZhInkieSJ5InkieSJ5InkieSJ5INiQbkg3JhmRDsiHZkFwzaFoIIBs1gzYLAgxAgQkY4MACAsjGQvJC8kLyQvJC8kLyQvJC8kLyQnIgOZAcSA4k1wyaFQxwYAEBZKNm8IIAA1AAyYnkRHIiOZGcnSyPx4MSalBKTcqoKvCtRQWV0B7HS0INSqnqWFtGObWooBLag3lJqEEpxY49nbHl1KKCSmiP6CWhBqXUpNih7FB2KDuUHZMde1pza1BKTcoopxYVVEJ7bC+xw9hh7DB2GDuMHcYOY4exw9nh7HB27K/3HluTMsqpRQWVUI1yq74+lK1BKTUpo5xaVFAJ1VC32FFj7WNLqUkZ5dSigkqoxrslFDuSHcmOZEeyI9lRY+66lS2pOW8JNSilJmWUU4sKih3CDmGHsEPYIewQdgg7hB3CDmFHzbnPLaEGpdSkjHJqUUElpOyoOXfbGpRSkzLKqUUFlVDNeYsdkx2THZMdkx2THTXn7ltBJVRz3hJqUEpNyiin2GHsMHY4O5wdzg5nh7PD2eHscHY4O/ac155a9pxfEmpQSk3KKKeqI7aCSmjP+SWhBqXUpIxyih17znMroT3nl4QalFKTMsqpRbEj0bEvmGkJNSil6sKKx5ZRTi0qqIRqzltCDUopdgg7hB3CDmGHsGOwY7BjsKPmfMnWpIxyqjrGVlAJ1Zy3hBqUUpMyyil2KDuUHZMdkx2THTXnS7cmZZRTiwoqoZrzllCDYoexw9hh7DB2GDuMHc4OZ4ezw9nh7NiX7MwtpxYVVEI15y2hBlUdtjUpo5xaVFAJ1Zy3hBoUO2rOl29Vx9qqjtiqjj1HNeethGrOW0INSqlJGeUUO5IdiY594c++VfvSn1ZdTPTYUqouKJIto+qiorFVlynpVkB7pn1rUEpNyiinFhVUQnumL/E275m+pNTsx3lf/9NyalFBJbRn+pJQg1KKHcoOZYeyQ9mh7JjsmLwfk/dj8n7smb5klFOLCqgmOeaWUINSalJGObWooBJydjg7nB01yWFbkzLKqerYz2VNciuhfRneJaEGpdSkjHKKHYsdix3BjmBHsCPYEbwfwfsRvB/7Qr1LQSW0L9e7JBSf332x3iWjnFpUUNnalw21hBqUUpMyyqlFBcUOYYewQ9gh7KiZjtgyyqlFBZVQzXRLqEEpxY7BjsGOwY7BjsEOZYeyQ9mh7KiZjtwyyqlFBZVQzXRLqEEpxY6a6XxsObWooBKq6W4JNSilJsUOY4exw9hh7HB21HSnbA1KqUkZ5dSigkqoprvFjsWOxY7FjsWOxY6a7hxbQVVHvQvty5BaQg2qOuZWddhWpfhWQjW/Lel3v33RUUspptQkt5xaVFDZ2hcftYSqW7q2lJqUUU4tKqiEhB3CjprkllKTMsqpRQXF+zHYMdgx2DHYMXBEsa9Kajm1qKAS2pN8SahKjq1JGeV9JLOvS2oFVbe+pnFfmtQSalBKTcoop/Z1yzt6XyfYTHJfK9iUw3Goh6wyVhmr9hhfCop3x3l3nHfHeXecd8fZ4exwdjg7nA/ZfpPe2m/Sl4QalFKTMopP876K93ExyX0lb1MOx6EezkM79MN1eNritOVpy9OWpy1PW562PG152vK07at9H2MzwX19FCiH41AP56Ed+uE6jMPTJqdNTpucNjltctrktMlpk9O2rwp+6GaS+8rgx9yUw3Goh7vNNu0QHy72RVWtoBLau4JLQg1KqUkZxQ5lh7JD2THZMdkx2THZMdkx2THZMdlx7RN8M8lrn3BRDsehHs5DO/TDdXja7LT5afPT5qfNT5ufNj9tftr8tPlp89O29xH7lbH3EZcGtavW5jy0Qz9ch3GY5LXLuCiH4/C0xWmL0xanLU5bnLY4bXnakvcsec/2ocGlSRnl1KKC2i317rWuXcVFORyHejgP7dAP12EcnjY5bXLa5LTJaZPTJqdNTpucNjlt166i3lLWtau4KIfjUA/noR364TqMw9Omp01Pm542PW162vS06WnT06anbf+qQf3WkuxLx0A5HId6OA/t0A/XYRyetr0DqV9Ykn1BGTgO9XAe2qEfrsM4TNJP2zoJ6ySsk7AntX7PSfblXs09qU05HId6OA/t8ITtd+n67SjZl3Lhb/f/Ozf9cB3uW2abCe7LusB9y9YmK/bFXeBu07//fv8OvwD74x9fP36s33/95jdiv//r3e8fvn788se77778+fnz+3f/9+Hzn/t/+u/vH77s9Y8PX58/fT6VH7/88lyfgb9++vyx9Pf7s/Xjnzcd9Wsae+PnuWtubv9++/odld5+vba9zjvb1wVC1/Z26/Y7+5e81r/Gne2D26fe2t65/Xxp++fZ3Bvba73kr+3Hnduvyn6N1/o172xv3N4ft7ZXbi8vbn/r/tfh4bV93rn984H+51m+l/qf5wbv9A/svJ7n6V7bXu/M35x4/T3Pkd3Z3vH6eZ65eq3/1vM/z+Mfdx5/E+z/n2dwXup/nve502+4/8+TDHe2X3j9Pk8M3Nje60B8b//8jHtne8X++/nx7rXtb73+1sDjt269f646l3ltn3cev/oipQPqW5M7t8Awwc+DzTvbP7j949YzsPgM3JqgxVfgunf/z/Z5Zw8Qgu1jyGvb33oFhuMFELeOgCIxgfl4rT9vHcEkjyDy1hFM8ggw7cV+u/P4pWMPkOvO45fJ/luvv2/6884RWF3siT3Iw+68h9SleUiQWzMg52NIXddzK4FvJHU90KsJemtfPLgrratwXr0Nt/bGdaENE8JeTbj5niR8HFTGi7dB5dbjoOMkTHs1wdarCStuJSQO7+o7/ZcTbt2GqcoEtVdvg/qt22DCBM9XE24dJ7xJuDdZxkMluXe0/yZh3JosU2PCvb3ct7fh1jmD+kYACc+vAW4lnNek33rXf5Pgt/Ywi6dO6lzynYQQvvPGrU/PEsF7ce/oazyMJ8Ae69YZvMdQJsx7z8Uj+Fw8br0ezM+rOvTVhLw13Z48hln33rO+Tbh3HPVtwq3zcfU1AxNunRF5k3DrFfUmIeTlhFt7ucWPRfXVwauzee/1kIOvyRz56m24934RPEEkcesM7Zu93JyvJtw7Kj4fEiVvned6k3Drc97bBHs14dZe7rmLf5y9vb36fhHx6vvFrWdzCE+aj+f3fK8m3Pq0OGTykZRbr+o3t+HeJ5QMzkV+++3Tv38qHvz27fHt28W/DzhfHz6+/f7y3wfoeUF+exB17xb8012Q+qcc//EEIL+CW/km4IfnHz78/Onrm38l+e8K+vrpw0+fP/Yff/3zy8/f/PSP//8dP8G/svz7199+/vjLn18/VlL97Pqnlp//+f755rLeS4z44f07rT8/z6bJms8/yf7x8vH8s6/6C9l/seT5F0t/+Ltu4P8A",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub Field) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
