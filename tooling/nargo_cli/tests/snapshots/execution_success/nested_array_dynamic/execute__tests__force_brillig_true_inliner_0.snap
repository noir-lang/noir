---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub Field) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
