---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub Field) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
