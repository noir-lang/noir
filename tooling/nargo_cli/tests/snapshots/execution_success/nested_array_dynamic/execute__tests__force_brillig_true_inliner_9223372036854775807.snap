---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub Field) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
