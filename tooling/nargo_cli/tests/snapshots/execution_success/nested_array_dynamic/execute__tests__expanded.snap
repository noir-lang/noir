---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
struct Bar {
    inner: [Field; 3],
}

struct Foo {
    a: Field,
    b: [Field; 3],
    bar: Bar,
}

struct FooParent {
    array: [Field; 3],
    foos: [Foo; 4],
}

fn main(mut x: [Foo; 4], y: pub u32) {
    assert(x[y - 3_u32].a == 1_Field);
    assert(x[y - 3_u32].b == [2_Field, 3_Field, 20_Field]);
    assert(x[y - 2_u32].a == 4_Field);
    assert(x[y - 2_u32].b == [5_Field, 6_Field, 21_Field]);
    assert(x[y - 1_u32].a == 7_Field);
    assert(x[y - 1_u32].b == [8_Field, 9_Field, 22_Field]);
    assert(x[y].a == 10_Field);
    assert(x[y].b == [11_Field, 12_Field, 23_Field]);
    assert(x[y].bar.inner == [109_Field, 110_Field, 111_Field]);
    if y != 2_u32 {
        x[y].a = 50_Field;
    } else {
        x[y].a = 100_Field;
    };
    assert(x[3_u32].a == 50_Field);
    if y == 2_u32 {
        {
            let i_4234: u32 = y - 1_u32;
            x[i_4234].b = [50_Field, 51_Field, 52_Field];
        }
    } else {
        {
            let i_4235: u32 = y - 1_u32;
            x[i_4235].b = [100_Field, 101_Field, 102_Field];
        }
    };
    assert(x[2_u32].b == [100_Field, 101_Field, 102_Field]);
    assert(x[y - 3_u32].bar.inner == [100_Field, 101_Field, 102_Field]);
    assert(x[y - 2_u32].bar.inner == [103_Field, 104_Field, 105_Field]);
    assert(x[y - 1_u32].bar.inner == [106_Field, 107_Field, 108_Field]);
    assert(x[y].bar.inner == [109_Field, 110_Field, 111_Field]);
    let foo_parent_one: FooParent = FooParent { array: [0_Field, 1_Field, 2_Field], foos: x };
    let foo_parent_two: FooParent = FooParent { array: [3_Field, 4_Field, 5_Field], foos: x };
    let mut foo_parents: [FooParent; 2] = [foo_parent_one, foo_parent_two];
    assert(foo_parents[y - 3_u32].foos[y - 3_u32].b == [2_Field, 3_Field, 20_Field]);
    assert(foo_parents[y - 3_u32].foos[y - 2_u32].b == [5_Field, 6_Field, 21_Field]);
    assert(foo_parents[y - 3_u32].foos[y - 1_u32].b == [100_Field, 101_Field, 102_Field]);
    assert(foo_parents[y - 3_u32].foos[y].b == [11_Field, 12_Field, 23_Field]);
    assert(foo_parents[y - 3_u32].foos[y].a == 50_Field);
    assert(foo_parents[1_u32].foos[1_u32].b == [5_Field, 6_Field, 21_Field]);
    if y == 2_u32 {
        {
            let i_4239: u32 = y - 2_u32;
            let i_4240: u32 = y - 2_u32;
            foo_parents[i_4239].foos[i_4240].b = [10_Field, 9_Field, 8_Field];
        }
    } else {
        {
            let i_4241: u32 = y - 2_u32;
            let i_4242: u32 = y - 2_u32;
            foo_parents[i_4241].foos[i_4242].b = [20_Field, 19_Field, 18_Field];
        }
    };
    assert(foo_parents[1_u32].foos[1_u32].b == [20_Field, 19_Field, 18_Field]);
    assert(foo_parents[1_u32].foos[1_u32].b[2_u32] == 18_Field);
    if y == 3_u32 {
        {
            let i_4243: u32 = y - 2_u32;
            let i_4244: u32 = y - 2_u32;
            let i_4245: u32 = y - 1_u32;
            foo_parents[i_4243].foos[i_4244].b[i_4245] = 5000_Field;
        }
    } else {
        {
            let i_4246: u32 = y - 2_u32;
            let i_4247: u32 = y - 2_u32;
            let i_4248: u32 = y - 1_u32;
            foo_parents[i_4246].foos[i_4247].b[i_4248] = 1000_Field;
        }
    };
    assert(foo_parents[1_u32].foos[1_u32].b[2_u32] == 5000_Field);
    {
        let i_4249: u32 = y - 2_u32;
        let i_4250: u32 = y - 3_u32;
        foo_parents[i_4249].foos[i_4250].b = foo_parents[y - 2_u32].foos[y - 2_u32].b;
    };
    assert(foo_parents[1_u32].foos[0_u32].b == [20_Field, 19_Field, 5000_Field]);
}
