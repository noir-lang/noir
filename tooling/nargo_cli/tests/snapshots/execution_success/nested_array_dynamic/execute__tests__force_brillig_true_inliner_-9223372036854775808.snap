---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "nd3bjlxVsoXhd/E1F2tGzIiYwau0thCnRpYsQBy2tIV4952mXWnEXCtXj/+mZQ5f23j8lZUVla76491333/z+w9fvf/x3z/9+u7Lf/3x7sNP33792/uffnz81R9/fvHum1/ef/jw/oev/v633x0f/2f0+Av8+vPXP378619/+/qX3959aTa+ePf9j999/FE+/g/+/f7D9+++jOPP//niQUwnrpOpk9BJ6qR0sk7J6CepjbRK7Dh0MnRiOnGdTJ2ETlInpZOlE339oa8/9PWHvv7Q1x/6+kNff+jrD339oa8/9PVNX9/09U1f3/T1TV/f9PVNX9/u1ve5kaWTlokfOhk6OV9/rjcSuRHXydRJ6CR1UjpZOmmZzEMnQyf6+lNff+rrT339qa8/9fXn+fr5fBOrsZGWSRw6GToxnbhOpk5CJ6mT0om+fujrp75+3r3tl23EdOI6mToJnaROSidLJy2TOnSir1/n668nad+I62TqJHSSOjlff+WTbM+UaumkZbIOnQydmE5cJ1MnoZPUib7+0tdf+vqtr9/6+q2v3/r6ra/f+vqtr9/6+q2v3/L6fhw6GToxnbhOpk5u1n/8x24kdVI6WTppmZzf+nzEGzHfyNCJ6cR1MnUSOkmdlE6WTlompq9v+vqmr2/6+qavb/r657c+9+ebmK+NlE6WTlom57e+12ToxHTiOpk6CZ3o67u+vuvru77+vHvb997I0InpxHUydRI6SZ2UTpZOWiahr39+6/N4kjw2YjpxnUydhE7O1w9/ku3J1fmt7zVZOmmZnN/6XpOhE9OJ62TqJHSir5/6+qmvn/r6pa9f+vqlr1/6+qWvX/r6pa9f+vqlr1/6+ktff+nrL339pa+/btffnvas0EnqpHSydHK+/rI30tt7sfNb32sydGI6cZ1MnYROUielk6UTef15HDoZOjGduE6mTk7Xf/zkn8jjX9hI6qR0snTSMjm/9b0mQyemE9fJ1Im+/tDXH/r6Q19/3LztP7r9J7FDJ0MnphPXydRJ6CR1UjpZOtHXd31919d3fX3X1z+/9T0CfyM2NxI6SZ2UTpZOWibnt77XZOjEdOI60def+vpTX3/q6099/amvH/r6oa8f+vqhrx/6+qGvH/r6oa8f+vqhr5/6+qmvn3fru23EdTJ1EjpJnZyvP98+//J4G9zI0knL5PzW95oMnZhOXCdTJ6GT1Im+funrl77+0tdf+vpLX//81vd4Y30jWRuZOgmdpE5KJ0snLZPzW99rMnRiOtHXb3391tdvff2+e9vfzrazl05aJXEcOhk6MZ24TqZOQiepk9LJ+fqfP+BduZGWycWt7yUZOjGduE6mTkInqZPSib7+0Nc3fX3T1zd9fdPXP7/1PWr9RB55bCR0kjopnSydtEzOb32vydCJ6cR1oq/v+vqur+/6+n7ztv941NpIy2QeOhk6MZ24TqZOQiepk9KJvv75rS/i7dlF5D8PEXF+64t6+1xSVG0kdJI6KZ0snbRMUv8dO7+PvSamE9fJ1Im+furrp75+6uunvn7p65e+funrl75+6euXvn7p658fu/KoTyTH2EjL5PzY9ZoMnZhOXCdTJ6GT1EnpRF9/6eu3vn7r67e+fuvrt75+6+u3vn7r67e+fsvr5zF0cj6lv/35/Zy2EdfJ1EnoJHVSOlk6aZmcX65ek6ETff2hrz/09Ye+/tDXH/r6Q19/6Oubvr7p65u+vunrm76+6eubvr7drR/HRpZOWiZ+6OR0/bK3j5Fr++pzeX65qp5vpGsjrpOpk9BJ6qR0snTSMjm/XL0mQyf6+lNff+rrn1+uhtebefxwR0lQEbQIaoDOb1h3aBBkBJ0/RtfzQWr7HEae38tePkid38tek6WT87fSeHupU8U/vwJCnt/LXpOhE9OJ62TqJHSSOtHXT33983vZS3J+L3tN9PfQ5/ey18R1MnUSOtHf9ktfv/T1S19/6esvff2Le1m+fWott1fh5MW97NVj8tIfxi/uZS/J+ZTH823/2J6dn9/LXpOWyfm97DUZOjGduE6mTkInqRN9/dbXb3n9On9x2KuS6+LE9pKYTlwnUyehk9RJ6WTppGUy9PWHvv7Q1x/6+kNff8jvkev8XlbPT3rV9mFCnd/LXpOWyfm97DUZOjGduE6mTkInqRN9fdPXN31919d3fX3X13d9fdfXd31919d3fX3X1/e79fufrySueehk6MR04jqZOgmdpE5KJ0sn+vrnV7I13siysZGhE9OJ62TqJHSSOimdLJ20TFJfP/X1U18/9fVTXz/19VNfP/X1U18/9fVLX7/09etu/Tg24jqZOgmdpE5KJ0snLZN16GToRF///HC38u2zKWv7jiB1frh7TUInqZPSydJJy+T8cPeaDJ2YTvT1W1+/9fVbX7/19Vtfv+X113HoZOjEdOI6mTo5X7/fXufXx7GR1EnpZOmkZXJ+uHtNhk5MJ66TqRN9/aGvP/T1h77+uHnb7+17dSw7dDJ0YjpxnUydhE5SJ6WTpRN9/fNbXz+/Yntv36xind/6XhPTietk6iR0kjopnSydtEymvv7U15/6+lNff+rrT339qa8/9fWnvv7U1w99/dDXP7/19fMbOnZsD0rnt77XZOokdJI6KZ0snbRMzm99r8nQib5+6uunvn7q6+fd235sH1lk6WTppGVSh06GTkwnrpOpk9CJvv75ra/z7SUBXdsT+PNb32vSMjm/9b0mQyemE9fJ1EnoJHWir7/09Ze+fuvrt75+6+u3vn7r67e+fuvrt75+6+uf3/q6nw9K22d4+/zW95oMnZhOXCdTJ6GT1Mnd+t0bWTppmYxDJ0MnphPXydRJ6CR1oq9/fusbRzz/zNARsaEG6Pzed4cGQUaQEzQJCoKSoCKIFGGkCCdFOCnCSRFOinBShJMinBThpAgnRTgpYpIiJilikiImKWKSIiYpYpIiJilikiImKSJIEUGKCFJEkCLOb4ZjPL8k/+OHY0NBUBJUBC2CGqDz++EdGgQZQU4QKSJJEUmKSFJEkiKSFFGkiCJFFCmiSBFFiihSRJEiihRRpIgiRSxSxCJFLFLEIkUsUsQiRSxSxCJFLFLEIkU0KaJJEU2KaFJEkyKaFNGkiCZFNCmiQRHjOA6kBlKGlCM1kQqkEqlCaiGF2hiojYHaGKiNgdoYqI2B2hiojYHaGKiNgdow1IahNgy1YagNQ20YasNQG4baMNSGoTYcteGoDUdtOGrDURuO2nDUxsVl00a/Kdu+z+NDLaSaqIvjpj2/rO9Dxa4GUoaUIzWRCqQSqUJqIdVEBWojUBuB2gjURqA2ArURqI1AbQRqI1AbidpI1EaiNhK1kfdteO0qkEqkCqmFVBNVB1IDKUPKkUJtFGqjUBuF2ijURqE2FmpjoTYWamOhNhZqY6E2Lk6h9vxqp48f2q4KqYVUE3VxDr1TAylDypG6b2P78rQPFUglUoXUQqqBGseB1EDKkHKkJlIXbeRntWJXiVQhtZBqoi7uondqIGVIOVITKdTGQG0M1MZAbQzUhqE27L6N7ZsLPJQh5UhNpAKpRKqQWkg1UX4ghdpw1IajNhy14agNR204asNRG47amKiNidqYqI2Lu6iP53NRH7ariVQglUgVUgupJurqm6fcqNs2fOzP9MKQcqQmUoFUIlVILaSaqDyQQm1c3EXdPqu5P7e5uIveqYlUIJVIFVILqSbq4i56pwZSqI1CbRRqo1Abhdoo1EbdtxH7++VqotaB1EDKkHKkJlKBVCJVSKE2FmqjURuN2mjURqM2GrXRqI1GbTRqo1EbTdqw476NWrsaSBlSjtREKpBKpAqphVQTNVAbF3dRb3tTcxy7MqQcqYlUIJVIFVILqSbq4i56p1Abhtow1IahNgy1YagN+y/a2N8qbSHVRPmB1EDKkHKkJlKBVCKF2nDUhqM2JmpjojYmamOiNiZqY6I2JmpjojYmamOiNgK1EaiNi7vodH8qj105UhOpQCqRKqQWUk1U3rfhuauBlCHlSE2kAqlEqpBaSDVRhdq4uIvOGE+VvStDypGaSAVSiVQhtZBqoi7uoncKtbFQGwu1sVAbC7WxUBvrvo3a71FrIdVE9YHUQMqQcqQmUoFUIoXaaNRGkzb8OJAaSBlS923sr0zzYyIVSCVS523E83uljxhzVwupJuriLnqnBlKGlCM1kQqkEinUxkBtDNSGoTYMtWGoDbtvw2xXE6lAKpEqpBZSTZQfSA2kDCnUhqM2HLXhqA1HbThqw1EbE7UxURsTtTFRGxO1cXEXDY+n2v9cm1/cRe9UIbWQaqIu7qJ3aiBlSN234WtXE6lAKpEqpBZSTVQeSA2kDCnUxsVdNOezw4xjV+dt5Ofbcm7fieih8lal7+q8jfK3L0z/+OHJf9dCqom6uIveqYGUIeVITaQCqUQKtVGojUJtXNxFb95SLu6id+q8jTWeX096+f4c4OIueqfO21jr+Svcv2/nQwVSp23YYW/Kjnmi6lzFeqrKXS3yc13cKm8eRS9ulXfKSRsXt8o7hR7nGz3OX9wq79RC6vxtOev5irus7dI+L26Vd2ogZUg5UhOpQCqRIm3MYyHVRI0DqYGUIeVITaQCqUQKtTFQGwO1YagNI88BphlSjtREKpBKpAqpRdTV1fHzI1ss29VA6uIjxPx8PVh7UVdXxxs1kQqk8lZ17KqQWkhdPAIc69nGsb//urg63qmBlCHlSE2kAqlEqpBaSKE2rq6Orzu8ujreKEPKkZpIBVLocSPQ40agx42rq+NrlaiNRG0kaiNRG4nepyR6n5KJVCG1kGqi6kBqIIWeH17cD7OfX+m6xsnPFUglUoXUQqqJurof3qiBlCHlSKE2FmpjoTYWamOhNhZqo1Ebjdpo1EajNvq+jf1r+M8OpBKpQmoh1UDFcSA1kDKkHKmJVCCVSBVSCynUxkBtDNTGQG0M1Ma4b8N7V4FUIlVILaSaKDuQGkgZUo4UauPiVlmfv0Nv5dpVIlVILaSaqIsL550aSBlSjtRECrXhqA1HbThqw1EbE7Ux79vYP0cf05BypCZSgVQiVUgtpJqoOJBCbQRqI1AbgdoI1EagNuK+jbU/j4qF1H0ba3tFa+SB1EDKkLpoo5+foVuH7+q8jbbnna1tf75xcT98/VqsuLgfrv78cx3b64ji4n54p85/51+/gisuXrV4pxypeav2m0NUIJVIFVILqSbq4up4U+/F1fFO3bex/8mFWI7URCqQSqQKqYVUE3VxdbwpqgdShpQjhR43Gj1uNHrcaPS40ehxo8njRh4HUgMpQ8qRmuA9UR6BVCJVSC2kmqhxIDWQIs/Z8uJ+uCw/P/s6+bkCqQTP9PLifninFlJ9q+b2p57z4n54pwZShpQjNZG6aCM+t5HHrhKp+zb271CWtpBqovxAaiBlSDlSqI2L++GdSqQKqYUUetyY6HFjoseNiR43JnrcmKiNidqYqI2J2pjofcpsouJAaiBlSDlSE6lACj0/vLgE9ny+orXz5Odqoi4ugXdqIGVIOVITqUAqkSqkUBuJ2ijURqE2CrVRqI1CbRRqo1Abhdqo+zZqfwZbTdQ6kBpIGVKO1EQqkEqkCinUxkJtNGqjURuN2mjURqM2GrXRqI1GbfR/0UbsqoGq476N/ZXwdQykDClH6rQNO55fWciOeewqkCJfmaGOQmoh1USd3ypv1UDKbtV+c6jzC+etmkhdtPHyK2nUSKQKqYVUE2UHUgMpQ8qRmkihNgy1YagNQ20YasNRG47acNSGozb8vo21dhVIJVKF1EKqiZoHUgMpQ8qRQm1M1MZEbUzUxkRtTNRGoDYCtRGojUBtBGojUBuB2gjURqA2ArWRqI1EbSRqI1EbiZ6LZiCVSBVSC6kmqg6kBlLo45RCH6cUaqNQG4XaKNRGoTYKfQy70MewC30MuwwpR2oiFUih+8bFV54cx1ONUbtaSDVR53fRWzWQMqQcqYlUIJVIoTYatdGkjXUcSA2kDClHaiIVSCVS921Y7Goh1USNA6mBlCHlSE2kAqlECrUxUBsDtWGoDUNtGGrDUBuG2jDUhqE2Lu6iYx5Ptb+Ca13cRe9UE3VxF71TAylDypGaSAVSiRRqw+8fN+beoTdR80BqIGVIOVITqUAqkSqkUBsTtRGojUBtBGojUBuB2gjURqA2Cv0eFvo9LPR7ePXKtHp+18v++59S/w+6erFY5/MDessNGfmZLo4bx+ef6e9/0OwTmgQFQReXjVGffyNiQ0XQIqjv/5v+vtMX27/7uDx++lcfV5x//t83yeDqZWGvkYnoz8df/O/Xv7z/+psP3//6IB//2e8/fvvb+59+/PSXv/3fz2//5Jtf3n/48P6Hr37+5advv//u91++/+rDT99+/Gfvjk//86+//kD/6JGPX87HJEfOLx6fpvr4i/vPP35c6cdK//g3xl9/4+O/sDIfv5LHr+b/AQ==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub Field) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
