---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub Field) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
