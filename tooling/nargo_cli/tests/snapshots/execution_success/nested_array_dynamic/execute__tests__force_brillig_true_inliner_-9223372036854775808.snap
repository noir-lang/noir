---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _28",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27]",
    "public parameters indices : [_28]",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [[EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], EXPR [ (1, _7) 0 ], EXPR [ (1, _8) 0 ], EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ], EXPR [ (1, _12) 0 ], EXPR [ (1, _13) 0 ], EXPR [ (1, _14) 0 ], EXPR [ (1, _15) 0 ], EXPR [ (1, _16) 0 ], EXPR [ (1, _17) 0 ], EXPR [ (1, _18) 0 ], EXPR [ (1, _19) 0 ], EXPR [ (1, _20) 0 ], EXPR [ (1, _21) 0 ], EXPR [ (1, _22) 0 ], EXPR [ (1, _23) 0 ], EXPR [ (1, _24) 0 ], EXPR [ (1, _25) 0 ], EXPR [ (1, _26) 0 ], EXPR [ (1, _27) 0 ]], EXPR [ (1, _28) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32867 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 29 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32838), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32866), source: Direct(32866), bit_size: Integer(U32) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 7 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 11 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 14 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 15 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 18 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 21 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 22 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 25 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Relative(1), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(32866) }, Call { location: 176 }, Call { location: 180 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32867 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 175 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 168 }, Return, Const { destination: Direct(32835), bit_size: Integer(U1), value: 1 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(32837), bit_size: Integer(U32), value: 3 }, Return, Call { location: 1909 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(1) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Direct(32837), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 188 }, Call { location: 1915 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 192 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(6) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(11) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(10) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Load { destination: Relative(6), source_pointer: Relative(13) }, Load { destination: Relative(12), source_pointer: Relative(9) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 211 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(12) }, Load { destination: Relative(12), source_pointer: Relative(6) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 219 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(12) }, Const { destination: Relative(12), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(7), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 226 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Load { destination: Relative(7), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(7) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 232 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(7) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 240 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, Const { destination: Relative(6), bit_size: Field, value: 2 }, Const { destination: Relative(7), bit_size: Field, value: 3 }, Const { destination: Relative(17), bit_size: Field, value: 20 }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Mov { destination: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(20), source: Relative(6) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(7) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(17) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 21 }, Mov { destination: Relative(21), source: Direct(0) }, Mov { destination: Relative(22), source: Relative(9) }, Mov { destination: Relative(23), source: Relative(18) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(20) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(19), source: Relative(22) }, JumpIf { condition: Relative(19), location: 267 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, BinaryIntOp { destination: Relative(19), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(2) }, JumpIf { condition: Relative(19), location: 271 }, Call { location: 1915 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, JumpIf { condition: Relative(19), location: 274 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(19) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(21) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(10) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Load { destination: Relative(19), source_pointer: Relative(25) }, Load { destination: Relative(24), source_pointer: Relative(22) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 292 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(24) }, Load { destination: Relative(24), source_pointer: Relative(19) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 300 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(24) }, Const { destination: Relative(24), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(27), op: Equals, lhs: Relative(20), rhs: Relative(24) }, JumpIf { condition: Relative(27), location: 307 }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(28) } }, Load { destination: Relative(20), source_pointer: Relative(22) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(20) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 313 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(20) }, Load { destination: Relative(20), source_pointer: Relative(19) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(20) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 321 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(20) }, Const { destination: Relative(19), bit_size: Field, value: 5 }, Const { destination: Relative(20), bit_size: Field, value: 6 }, Const { destination: Relative(29), bit_size: Field, value: 21 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(19) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(20) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 31 }, Mov { destination: Relative(31), source: Direct(0) }, Mov { destination: Relative(32), source: Relative(22) }, Mov { destination: Relative(33), source: Relative(30) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(29) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(20), source: Relative(32) }, JumpIf { condition: Relative(20), location: 348 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(22) } }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Direct(32836), rhs: Relative(2) }, JumpIf { condition: Relative(22), location: 352 }, Call { location: 1915 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(5) }, JumpIf { condition: Relative(22), location: 355 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(20), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(31), rhs: Relative(22) }, Load { destination: Relative(29), source_pointer: Relative(32) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(31) }, Load { destination: Relative(32), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(10) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(33) }, Load { destination: Relative(22), source_pointer: Relative(35) }, Load { destination: Relative(34), source_pointer: Relative(32) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 373 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(34) }, Load { destination: Relative(34), source_pointer: Relative(22) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(34) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 381 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(34) }, Const { destination: Relative(34), bit_size: Field, value: 7 }, BinaryFieldOp { destination: Relative(37), op: Equals, lhs: Relative(29), rhs: Relative(34) }, JumpIf { condition: Relative(37), location: 388 }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(38) } }, Load { destination: Relative(29), source_pointer: Relative(32) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(29) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 394 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, Load { destination: Relative(29), source_pointer: Relative(22) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(29) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 402 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(29) }, Const { destination: Relative(22), bit_size: Field, value: 8 }, Const { destination: Relative(29), bit_size: Field, value: 9 }, Const { destination: Relative(38), bit_size: Field, value: 22 }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(40) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(41), source: Relative(40) }, Store { destination_pointer: Relative(41), source: Relative(22) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(29) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(38) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 41 }, Mov { destination: Relative(41), source: Direct(0) }, Mov { destination: Relative(42), source: Relative(32) }, Mov { destination: Relative(43), source: Relative(39) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(40) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(38), source: Relative(42) }, JumpIf { condition: Relative(38), location: 429 }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(32) } }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(32), location: 432 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(32), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(32) }, Load { destination: Relative(38), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(39) }, Load { destination: Relative(40), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(10) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(41) }, Load { destination: Relative(42), source_pointer: Relative(44) }, Load { destination: Relative(43), source_pointer: Relative(40) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 450 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(43) }, Load { destination: Relative(43), source_pointer: Relative(42) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Not { destination: Relative(46), source: Relative(46), bit_size: U1 }, JumpIf { condition: Relative(46), location: 458 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(43) }, Const { destination: Relative(43), bit_size: Field, value: 10 }, BinaryFieldOp { destination: Relative(46), op: Equals, lhs: Relative(38), rhs: Relative(43) }, JumpIf { condition: Relative(46), location: 465 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(47) } }, Load { destination: Relative(38), source_pointer: Relative(40) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(38) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 471 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(38) }, Load { destination: Relative(38), source_pointer: Relative(42) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(38) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 479 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(38) }, Const { destination: Relative(38), bit_size: Field, value: 11 }, Const { destination: Relative(48), bit_size: Field, value: 12 }, Const { destination: Relative(49), bit_size: Field, value: 23 }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(38) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(48) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(49) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 51 }, Mov { destination: Relative(51), source: Direct(0) }, Mov { destination: Relative(52), source: Relative(40) }, Mov { destination: Relative(53), source: Relative(50) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(48) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(38), source: Relative(52) }, JumpIf { condition: Relative(38), location: 506 }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(48) } }, Load { destination: Relative(38), source_pointer: Relative(40) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(38) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 512 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(38) }, Load { destination: Relative(38), source_pointer: Relative(42) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(38) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 520 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(38) }, Const { destination: Relative(38), bit_size: Field, value: 109 }, Const { destination: Relative(51), bit_size: Field, value: 110 }, Const { destination: Relative(52), bit_size: Field, value: 111 }, Mov { destination: Relative(53), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Mov { destination: Relative(55), source: Relative(54) }, Store { destination_pointer: Relative(55), source: Relative(38) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(51) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(52) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 54 }, Mov { destination: Relative(54), source: Direct(0) }, Mov { destination: Relative(55), source: Relative(42) }, Mov { destination: Relative(56), source: Relative(53) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(51) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(38), source: Relative(55) }, JumpIf { condition: Relative(38), location: 547 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(51) } }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, Const { destination: Relative(52), bit_size: Field, value: 100 }, Const { destination: Relative(54), bit_size: Field, value: 50 }, JumpIf { condition: Relative(38), location: 584 }, Jump { location: 553 }, Load { destination: Relative(13), source_pointer: Relative(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 559 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(13) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(32) }, Store { destination_pointer: Relative(16), source: Relative(54) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(1), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(39) }, Store { destination_pointer: Relative(16), source: Relative(40) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(51) }, Store { destination_pointer: Relative(16), source: Relative(42) }, Store { destination_pointer: Relative(3), source: Relative(13) }, Jump { location: 615 }, Load { destination: Relative(13), source_pointer: Relative(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 590 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(13) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(32) }, Store { destination_pointer: Relative(16), source: Relative(52) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(1), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(39) }, Store { destination_pointer: Relative(16), source: Relative(40) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(51) }, Store { destination_pointer: Relative(16), source: Relative(42) }, Store { destination_pointer: Relative(3), source: Relative(13) }, Jump { location: 615 }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(13) }, Load { destination: Relative(14), source_pointer: Relative(15) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(13) }, Load { destination: Relative(15), source_pointer: Relative(16) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(13) }, Load { destination: Relative(16), source_pointer: Relative(25) }, Load { destination: Relative(1), source_pointer: Relative(15) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(1) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 631 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(16) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 639 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(14), rhs: Relative(54) }, JumpIf { condition: Relative(1), location: 645 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Const { destination: Relative(1), bit_size: Field, value: 101 }, Const { destination: Relative(14), bit_size: Field, value: 102 }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(25) }, Store { destination_pointer: Relative(26), source: Relative(52) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(1) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(14) }, Load { destination: Relative(1), source_pointer: Relative(16) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 664 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, JumpIf { condition: Relative(38), location: 705 }, Jump { location: 669 }, Load { destination: Relative(13), source_pointer: Relative(16) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 675 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(3) }, Load { destination: Relative(15), source_pointer: Relative(13) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(15) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 684 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(15) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(33) }, Load { destination: Relative(15), source_pointer: Relative(27) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(31) }, Store { destination_pointer: Relative(28), source: Relative(16) }, Mov { destination: Direct(32771), source: Relative(26) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(1) }, Store { destination_pointer: Relative(28), source: Relative(15) }, Store { destination_pointer: Relative(3), source: Relative(13) }, Jump { location: 747 }, Const { destination: Relative(1), bit_size: Field, value: 51 }, Const { destination: Relative(13), bit_size: Field, value: 52 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(15) }, Store { destination_pointer: Relative(25), source: Relative(54) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(1) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(13) }, Load { destination: Relative(1), source_pointer: Relative(3) }, Load { destination: Relative(13), source_pointer: Relative(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 725 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(13) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(33) }, Load { destination: Relative(13), source_pointer: Relative(26) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(31) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(32836) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(1) }, Store { destination_pointer: Relative(27), source: Relative(13) }, Store { destination_pointer: Relative(3), source: Relative(14) }, Jump { location: 747 }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(13), source_pointer: Relative(14) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(14), source_pointer: Relative(15) }, Load { destination: Relative(3), source_pointer: Relative(13) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(3) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 760 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(14) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(3) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 768 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(3) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(13) }, Mov { destination: Relative(57), source: Relative(16) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(14) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 781 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(8) }, Load { destination: Relative(3), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(11) }, Load { destination: Relative(13), source_pointer: Relative(26) }, Load { destination: Relative(14), source_pointer: Relative(3) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(14) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 793 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(14) }, Load { destination: Relative(3), source_pointer: Relative(13) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(3) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 801 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(3) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(13) }, Mov { destination: Relative(57), source: Relative(16) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(27) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 814 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(21) }, Load { destination: Relative(3), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(23) }, Load { destination: Relative(13), source_pointer: Relative(28) }, Load { destination: Relative(27), source_pointer: Relative(3) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 826 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(27) }, Load { destination: Relative(3), source_pointer: Relative(13) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(3) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 834 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(3) }, Const { destination: Relative(3), bit_size: Field, value: 103 }, Const { destination: Relative(34), bit_size: Field, value: 104 }, Const { destination: Relative(35), bit_size: Field, value: 105 }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(37) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(37) }, Store { destination_pointer: Relative(40), source: Relative(3) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(34) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(35) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(13) }, Mov { destination: Relative(57), source: Relative(36) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(34) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 861 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(31) }, Load { destination: Relative(3), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(33) }, Load { destination: Relative(13), source_pointer: Relative(35) }, Load { destination: Relative(34), source_pointer: Relative(3) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 873 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(34) }, Load { destination: Relative(3), source_pointer: Relative(13) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(3) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 881 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(3) }, Const { destination: Relative(3), bit_size: Field, value: 106 }, Const { destination: Relative(36), bit_size: Field, value: 107 }, Const { destination: Relative(37), bit_size: Field, value: 108 }, Mov { destination: Relative(40), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(40), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(42) }, Store { destination_pointer: Relative(44), source: Relative(3) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(36) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(37) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(13) }, Mov { destination: Relative(57), source: Relative(40) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(36) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 908 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(39) }, Load { destination: Relative(3), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(41) }, Load { destination: Relative(13), source_pointer: Relative(37) }, Load { destination: Relative(36), source_pointer: Relative(3) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(36) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 920 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(36) }, Load { destination: Relative(3), source_pointer: Relative(13) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 928 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(53) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(3) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 936 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(3) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(13) }, Mov { destination: Relative(57), source: Relative(53) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(42) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(56) }, JumpIf { condition: Relative(3), location: 949 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Const { destination: Relative(3), bit_size: Field, value: 0 }, Mov { destination: Relative(13), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(13), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(42) }, Store { destination_pointer: Relative(44), source: Relative(3) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(12) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(6) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(3) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 967 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(12) }, Store { destination_pointer: Relative(42), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(24) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(19) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(12) }, Store { destination_pointer: Relative(19), source: Relative(13) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(1) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(3) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(1) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(7) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 999 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Relative(10) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(13) }, Load { destination: Relative(4), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, Load { destination: Relative(13), source_pointer: Relative(42) }, Load { destination: Relative(19), source_pointer: Relative(4) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(19) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 1013 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(13) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(19) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 1021 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(19) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(8) }, Load { destination: Relative(19), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(11) }, Load { destination: Relative(44), source_pointer: Relative(46) }, Load { destination: Relative(45), source_pointer: Relative(19) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 1035 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(45) }, Load { destination: Relative(45), source_pointer: Relative(44) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 1043 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(45) }, Load { destination: Relative(44), source_pointer: Relative(18) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 1051 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(44) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(19) }, Mov { destination: Relative(57), source: Relative(18) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(48) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(44), source: Relative(56) }, JumpIf { condition: Relative(44), location: 1064 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Load { destination: Relative(18), source_pointer: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 1070 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(13) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(18) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 1078 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(18) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(21) }, Load { destination: Relative(18), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(23) }, Load { destination: Relative(48), source_pointer: Relative(51) }, Load { destination: Relative(49), source_pointer: Relative(18) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 1092 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(49) }, Load { destination: Relative(49), source_pointer: Relative(48) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(49) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 1100 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(49) }, Load { destination: Relative(48), source_pointer: Relative(30) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 1108 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(48) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 55 }, Mov { destination: Relative(55), source: Direct(0) }, Mov { destination: Relative(56), source: Relative(18) }, Mov { destination: Relative(57), source: Relative(30) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(53) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(48), source: Relative(56) }, JumpIf { condition: Relative(48), location: 1121 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Load { destination: Relative(18), source_pointer: Relative(4) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(18) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 1127 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(13) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(18) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 1135 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(18) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(31) }, Load { destination: Relative(18), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(33) }, Load { destination: Relative(31), source_pointer: Relative(56) }, Load { destination: Relative(33), source_pointer: Relative(18) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(33) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 1149 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(33) }, Load { destination: Relative(33), source_pointer: Relative(31) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(33) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 1157 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(33) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 57 }, Mov { destination: Relative(57), source: Direct(0) }, Mov { destination: Relative(58), source: Relative(18) }, Mov { destination: Relative(59), source: Relative(16) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(33) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(31), source: Relative(58) }, JumpIf { condition: Relative(31), location: 1170 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1176 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(13) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(16) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1184 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(16) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(39) }, Load { destination: Relative(16), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(41) }, Load { destination: Relative(33), source_pointer: Relative(57) }, Load { destination: Relative(39), source_pointer: Relative(16) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(39) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 1198 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(39) }, Load { destination: Relative(39), source_pointer: Relative(33) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(39) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 1206 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(39) }, Load { destination: Relative(39), source_pointer: Relative(50) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(39) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 1214 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(39) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 60 }, Mov { destination: Relative(60), source: Direct(0) }, Mov { destination: Relative(61), source: Relative(16) }, Mov { destination: Relative(62), source: Relative(50) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(59) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(39), source: Relative(61) }, JumpIf { condition: Relative(39), location: 1227 }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(50) } }, Load { destination: Relative(39), source_pointer: Relative(4) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(39) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 1233 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(39) }, Load { destination: Relative(4), source_pointer: Relative(13) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(4) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 1241 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(4) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(32) }, Load { destination: Relative(4), source_pointer: Relative(60) }, Load { destination: Relative(13), source_pointer: Relative(16) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(13) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 1252 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(33) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(13) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 1260 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(13) }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(4), rhs: Relative(54) }, JumpIf { condition: Relative(13), location: 1266 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(33) } }, Load { destination: Relative(4), source_pointer: Relative(3) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1272 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 1280 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(54) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(54) }, Load { destination: Relative(59), source_pointer: Relative(60) }, Load { destination: Relative(1), source_pointer: Relative(33) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(1) }, Not { destination: Relative(61), source: Relative(61), bit_size: U1 }, JumpIf { condition: Relative(61), location: 1294 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(59) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(1) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 1302 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(30) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(1) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 1310 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(1) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 63 }, Mov { destination: Relative(63), source: Direct(0) }, Mov { destination: Relative(64), source: Relative(33) }, Mov { destination: Relative(65), source: Relative(30) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(62) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(64) }, JumpIf { condition: Relative(1), location: 1323 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(30) } }, Const { destination: Relative(1), bit_size: Field, value: 19 }, Const { destination: Relative(30), bit_size: Field, value: 18 }, Mov { destination: Relative(33), source: Direct(1) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(62) }, IndirectConst { destination_pointer: Relative(33), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(62), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Mov { destination: Relative(63), source: Relative(62) }, Store { destination_pointer: Relative(63), source: Relative(17) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(1) }, BinaryIntOp { destination: Relative(63), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(2) }, Store { destination_pointer: Relative(63), source: Relative(30) }, BinaryIntOp { destination: Relative(62), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(63), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(65), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(66), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(68), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(69), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(70), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(71), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(72), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(73), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(74), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, JumpIf { condition: Relative(38), location: 1407 }, Jump { location: 1351 }, Load { destination: Relative(4), source_pointer: Relative(33) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(4) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 1357 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(4) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 1365 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(4) }, JumpIf { condition: Relative(62), location: 1369 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(63), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(4) }, Load { destination: Relative(13), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(13) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1379 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(23) }, Load { destination: Relative(14), source_pointer: Relative(18) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(21) }, Store { destination_pointer: Relative(19), source: Relative(33) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(64) }, Store { destination_pointer: Relative(19), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1957 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Store { destination_pointer: Relative(18), source: Relative(13) }, Store { destination_pointer: Relative(12), source: Relative(14) }, Jump { location: 1469 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(13), source: Relative(6) }, Store { destination_pointer: Relative(13), source: Relative(43) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(29) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(22) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(6) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 1424 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, JumpIf { condition: Relative(6), location: 1429 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, Load { destination: Relative(6), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(6) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1440 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(23) }, Load { destination: Relative(14), source_pointer: Relative(18) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(21) }, Store { destination_pointer: Relative(19), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(4) }, Store { destination_pointer: Relative(19), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1957 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(9) }, Store { destination_pointer: Relative(16), source: Relative(6) }, Store { destination_pointer: Relative(12), source: Relative(4) }, Jump { location: 1469 }, Load { destination: Relative(4), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, Load { destination: Relative(6), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, Load { destination: Relative(7), source_pointer: Relative(9) }, Load { destination: Relative(4), source_pointer: Relative(6) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(4) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 1480 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 1488 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(4) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(54) }, Load { destination: Relative(14), source_pointer: Relative(15) }, Load { destination: Relative(15), source_pointer: Relative(4) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 1500 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(15) }, Load { destination: Relative(15), source_pointer: Relative(14) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 1508 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(15) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 75 }, Mov { destination: Relative(75), source: Direct(0) }, Mov { destination: Relative(76), source: Relative(4) }, Mov { destination: Relative(77), source: Relative(33) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(19) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(15), source: Relative(76) }, JumpIf { condition: Relative(15), location: 1521 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, Load { destination: Relative(15), source_pointer: Relative(6) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(15) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1527 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(15) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(6) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1535 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(4) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1543 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(14) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(6) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 1551 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(6) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, Load { destination: Relative(6), source_pointer: Relative(14) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(6), rhs: Relative(30) }, JumpIf { condition: Relative(4), location: 1559 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Direct(32837) }, Const { destination: Relative(6), bit_size: Field, value: 5000 }, JumpIf { condition: Relative(4), location: 1634 }, Jump { location: 1564 }, Load { destination: Relative(4), source_pointer: Relative(12) }, Load { destination: Relative(7), source_pointer: Relative(4) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(7) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 1571 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, JumpIf { condition: Relative(68), location: 1575 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(69), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(7) }, Load { destination: Relative(13), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(13) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1585 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(21) }, Load { destination: Relative(14), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(23) }, Load { destination: Relative(16), source_pointer: Relative(19) }, Load { destination: Relative(18), source_pointer: Relative(14) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 1599 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(18) }, JumpIf { condition: Relative(2), location: 1603 }, Call { location: 1918 }, Const { destination: Relative(2), bit_size: Field, value: 1000 }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 1957 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(20) }, Store { destination_pointer: Relative(24), source: Relative(2) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(21) }, Store { destination_pointer: Relative(20), source: Relative(18) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(70) }, Store { destination_pointer: Relative(18), source: Relative(16) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1957 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(7) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Store { destination_pointer: Relative(12), source: Relative(2) }, Jump { location: 1704 }, Load { destination: Relative(2), source_pointer: Relative(12) }, Load { destination: Relative(4), source_pointer: Relative(2) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(4) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 1641 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(4) }, JumpIf { condition: Relative(65), location: 1645 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(66), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Load { destination: Relative(9), source_pointer: Relative(14) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 1655 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(13) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(21) }, Load { destination: Relative(13), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(23) }, Load { destination: Relative(15), source_pointer: Relative(18) }, Load { destination: Relative(16), source_pointer: Relative(13) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 1669 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Direct(32837) }, JumpIf { condition: Relative(16), location: 1674 }, Call { location: 1918 }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 1957 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(20) }, Store { destination_pointer: Relative(22), source: Relative(6) }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(21) }, Store { destination_pointer: Relative(20), source: Relative(16) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(9), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(67) }, Store { destination_pointer: Relative(19), source: Relative(15) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1957 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(4) }, Store { destination_pointer: Relative(16), source: Relative(9) }, Store { destination_pointer: Relative(12), source: Relative(13) }, Jump { location: 1704 }, Load { destination: Relative(2), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, Load { destination: Relative(4), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, Load { destination: Relative(7), source_pointer: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(4) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 1715 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(4) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 1723 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(4) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(54) }, Load { destination: Relative(3), source_pointer: Relative(14) }, Load { destination: Relative(7), source_pointer: Relative(4) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(7) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 1735 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(3) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(7) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1743 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, Load { destination: Relative(3), source_pointer: Relative(7) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(3), rhs: Relative(6) }, JumpIf { condition: Relative(4), location: 1751 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, JumpIf { condition: Relative(71), location: 1753 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(72) }, Load { destination: Relative(3), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(72), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Load { destination: Relative(7), source_pointer: Relative(18) }, Load { destination: Relative(4), source_pointer: Relative(3) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 1766 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Load { destination: Relative(3), source_pointer: Relative(7) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 1774 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(3) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(21) }, Load { destination: Relative(3), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(23) }, Load { destination: Relative(18), source_pointer: Relative(20) }, Load { destination: Relative(7), source_pointer: Relative(3) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(7) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1788 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(18) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(7) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 1796 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(7) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 1804 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(7) }, JumpIf { condition: Relative(73), location: 1808 }, Call { location: 1918 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(74), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(7) }, Load { destination: Relative(21), source_pointer: Relative(23) }, Load { destination: Relative(22), source_pointer: Relative(21) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 1818 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(22) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(11) }, Load { destination: Relative(22), source_pointer: Relative(25) }, Mov { destination: Direct(32771), source: Relative(21) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(8) }, Store { destination_pointer: Relative(25), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32836) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 1957 }, Mov { destination: Relative(8), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, Store { destination_pointer: Relative(24), source: Relative(22) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 1957 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(7) }, Store { destination_pointer: Relative(21), source: Relative(8) }, Store { destination_pointer: Relative(12), source: Relative(3) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, Load { destination: Relative(2), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Load { destination: Relative(3), source_pointer: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 1856 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(7) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 1864 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(10) }, Load { destination: Relative(2), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32837) }, Load { destination: Relative(8), source_pointer: Relative(10) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(7) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 1876 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(7) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 1884 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(8) }, Store { destination_pointer: Relative(12), source: Relative(17) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(1) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 24 }, Mov { destination: Relative(24), source: Direct(0) }, Mov { destination: Relative(25), source: Relative(2) }, Mov { destination: Relative(26), source: Relative(7) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(6) }, Call { location: 1924 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(25) }, JumpIf { condition: Relative(1), location: 1908 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 1914 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 1909 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Direct(32835) }, Load { destination: Relative(5), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 1934 }, Call { location: 1921 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 1939 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, JumpIf { condition: Relative(5), location: 1944 }, Jump { location: 1942 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Return, Load { destination: Relative(5), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 1939 }, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 1961 }, Jump { location: 1963 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 1978 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 1975 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 1968 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 1978 }, Return]"
  ],
  "debug_symbols": "pd3d7hvXrQXwd/F1LkRyf5B5laIo0tQtDBhO4CYHOAjy7mfI4VrbvijQM7rJ/vlj1pJG4mgkzd/548M/Pv7993/97dOXf/7y7w8//uWPD3//+unz50//+tvnX37+6bdPv3y5fvePD6/8j/j48KP8cK2z19Xr7tV7jXuNV6/Sq374UXO1Xkevs9fV6+7Ve41a9fXqVXrVXq3X0evsdfW6e/VeO086TzpPOk86TzpPOk86TzpPOk86TztPrzzLVXu1Xkevs9crb+S6e/Ve417t1av0qr1ar6PX2WvnWedZ51nnjc4bnTeuvJmr9Tp6nb2uXnev3mvc63z1Kr123uy82Xmz8+aVt3LdvXqvca/r1av0qr1ar6PX2WvnrStv5+q9xr3uV6/Sq/ZqvV55nuvsdfW6e/Ve41791av0qr1ar53nneed553nneedF50XnRedF50XnRedF50XnRedF3eevV69Sq9XXuRqvY5eZ6+r15zfV8KBaOSI3BBAAQMGMIEFIFmQLEhWJCuSFck5LyKJAUxgARtwIBo5NjcEUADJhmRDsiE5p0c04UA0coBuCKCAAQOYwAKQnIMklohGjtINARQwYACZPBIL2IAD0cihuiGAAgYMAMkLyQvJC8kLyRvJG8kbyRvJG8kbyRvJG8kbyRvJjmRHsiM5Z01mYgATWMAGMnklolEvSQUBFDBgABNYwAaQHJ08Xi9AAAUMyOSdmMACNuBANGoGCwIoYACSBcmCZEFyzaAnolEzWBBAAQMGMIEFbADJimRDsiG5ZjASBgxgAgvYgAPRqBksCIDkgeSB5IHkgeSB5IHkgeSJ5InkieSJ5InkieSJ5InkieSJ5JxBfSUEUMCAAeTZhiQWsAEHopEzeEMABQwYAJI3kjeSN5I3kh3JOYOqCQUMGMAEFrABB6KRM3gDyYHkQHIguc4NLbGADTgQN2adIBYEUMCAAUwgk0diAw5Eo04VCwIoYMAAJoBkQbIgWZCsSFYk5wzqTBgwgAksYAMORCNn8IYASDYkG5INyTmDuhIbcCAaOYM3BFDAgAFMAMk5g7oTmXwdHGbOl0ZiABNYwAYciEbNV0E6sOarYMAAJrCADeD21Hwlar4KSN5I3kjeSN5I3kjeSN5I3kh2JDuSHck5VvZKTGABG3AgGjlWNwTI9x+SMGAAE1jABhyIGyvH6oYAChgwgAksYAMOIFmQLEgWJAuSc5pMExloiQ04EI2cphsCKGDAACaAZEWyIlmRbEg2JBuSDcmGZEOyIdmQbEg2JA8k5zTZSChgwAAyeSYWsAEHopGvaDcEUMCAASB5InkiOSfOViIaOXE3BFDAgAFMIJN3InOup/rK+bohgAIGDGACC9iAA0h2JDuSHcmOZEeyI9lxC2vQCg5EowatIIACBgxgAkgOJAeSo5P36wUIoIABGRiJBWzAgWjUfBUEUMCAASBZkCxIFiQLkhXJimRFsiJZkaxIViTXRx6vhAPRqE89CgIoYMAAJrAAJBuSDckDyQPJA8kDyQPJA8k5X0MSGaiJaOR83RBAAQMGMIEFbADJE8kLyQvJC8kLyQvJC8kLyQvJC8kLyTlxwxICKGDAACawgA04EA1Hck7cGAkFDBjABBawAQeikRN3A8mB5EByIDmQHEgOJAeSo5P99QIEUCCTZ2IAE1jABhyIRo7eDQEUQHKO3liJCSxgAw5EI0fvhgAKGIBkRbIiWZGsSFYkG5INyYZkQ7Ih2ZBco7cTG3AgGjV6BQEUMGAAE0DyQPJA8kByzaAnBFDAgAFMYAEbcCAaC8k1g5FQwIABTGABG3AgGjWDBSRvJG8kbyRvJG8kbyRvJG8kO5IdyY7knMH5SgxgAgvYgAPRyBm8IYACSA4kB5IDyTmDUxIOxI3IGbwhgAIGDGACC9hAJmsiGjmDNwRQwIABTGABG0CyIFmRrEhWJCuSFcmKZEWyIlmRrEjOGZyWEEABAwYwgQVsIJNHIho5gzcEUMCAAUxgARtAcn0PcB3Hor4IKAiggAEDmMACNuAAkheSF5IXkheSF5IXkheSF5IXknMG53XUipzBGwIoYMAAJrCADTiAZEeyI9mR7Eh2JDuSHcmOZEeyIzmQHEgOJAeSA8mB5JrBndiAA5l8HeLkVUN4SyiljBrUpBa1KafYIewQdgg7hB3CDmGHsEPYIewQdig7lB3KjprNKA1qUovalFMB1YjeEkopdhg7jB3GDmOHscPYMdgx2DHYMdgx2JETu16lRW3KqYBybFtCKZXfuklpUJNa1KacCqi+07sllFLsqO/2tDSpRW3KqYBylFtCKWUUOzY7Njs2OzY7NjtyqJeVhFLKqEFNalGbciqgYEewI9gR7Ah2BDuCHcGOYEegQ14vSqjsGCWjBjWpRW3KqYByztcsCaWUUYOa1KI25VRAyo6c87VKShk1qEktalNOBZRz3mKHscPYYewwdhg7cs7XLjkVUM55SyiljBrUpBbFjsGOwY7JjsmOyY7JjsmOyY7JjsmOyY6a8zyySs35LaGUMmpQk1rUppxiR815lIRSyqhBTWpRm3IqIGeHs8PZ4exwdjg7cs73q7QppwLKOW8JpZRRg5oUO4IdwY5AR10r0xJKKaMGNalFbSo7pBRQznlLKKWMGtSkskNLm3IqoJzzllBKGTWoSbEj53xbyamAcs5bQill1KAmtSh2GDuMHYMdgx2DHTnne5QGNalFbcqpgHLOW0IpxY7JjsmOyY7JjsmOyY7FjsWOnPM9S0YNalLZsUqbciqgum7nllBKGTWoSbFjs2OzY7PD2eHsyDnfu2TUoCa1qE05FVDN+S2h2BHsCHYEO4IdwY5gR6CjrvlpCaWUUdnhpUktalNOBVRzfkuo7IiSUYOa1KI25VRANee3hGJHzrm/SoOa1KI25VRAOectoZRih7HD2JFz7lLKDi1lh5WyI2ehLhHyWcqOVcqOehRyzr32X865133LOY/qyDmP6sg5j+rIOY/qyJm+b0HOdMuoQU2KtzlnuuVUQDnTLXYsdix2LHYsdix2LHYsduRM3/sqZ7ollFJGDWpSi+K+r2vzbrHD2VFX6NVeq2v0bhk1qEktalN8fOuKvVJds3eLHcGOYEewI9gR7Ah2BO9H4H7UpUQtoZQyalCTymfOKDkVUE5ySyiljBrUpBbFDmGHsEPZoexQdig7lB3KDmWHskPZkZMcOVt1eVFLKKWMGtSkFrUpp9gx2DHYkZMcq2TUoCa1qE05FVC+YreEYsdkx2THZMdkx2THZMdkx+L9WLwfi/tqcV8t7qvFfbW4rxb3Vc505NGsLj4KLwmllFGDmtSiNuVUQM4OZ4ezw9nh7HB2ODucHc4OZ0fOdERJKKWMGtSkFrUpp6JVlya1hFLKqEFNalGbcood98W6r6Ic6qEdjsN5uA73oR8GqaftvoRXinpoh+NwHq7DfeiHQdYFhc3TZqfNTpudNjttdtrq8sKXFv0wyLrIsCmHemiH43AersPTNk7bOG3ztM3TNk9bXX74suI4rLZRXIf70A+rLee3LpaqM4+6JKrOS+qaqNaiNuVUQPV6fksopYxiR72ee2lRm3IqoHo9vyWUUkYNih3Ojno9r/tbr+e3AgrujXo9v6WUUYOa1KLYEewIdNT1Uy2hlKoHdxXH4Txch/vQD4O8DwE32SXsEqMGNalFbcop3h/l/VF2KDuUHcoOxeNSl1q1NuUUHvu63KollFKjz7frSqvWojblFM7Q63KrllBKGcWOHOs6p6+Lrlqbciqg+aKEUsqoQbFjsqPO2uuxrLP2WwHVHN8SSimjBjWpRbFjsWOxY7Njs2OzY7OjLvN/7eI8XIf70A+DrEv+m6xyVjmrnHfHeXecd8d5d5x3x3l3gncn2BHsCHYEO4IPS/BhCT70wYc+8NDXNVwtoZSqHeXF2lFRXIf70A+DvCf8phzqoR2Ow9Mmp01Om5w2OW162vS06WnT06an7f55nVdxHe5DPwzy/smdm3Koh3Y4Dk+bnTY7bXba7LSN0zZO2zht47SN01Yv8vmTQhfXYbVp0Q+DrBf5pvQ7/rpcrGX93r8uGGtNalGbciqgOte/JZRS7FjsWOxY7FjsWOxY7Njs2OzY7Njs2OzY7Kiz/toHe1NOBVRn/beEUsqoQU2KHc4OZ4ezI9gR7Ah2BDuCHcGOYEewI9gR6KjLy1pCKWXUoCa1qE3h06C6zuxWvae/JZRSRg1qUovaFDuEHXUYkJtyqId2OA7n4Trch34YpJ02O2122uy02Wmz02anzU6b8Z4Z79ng3hvce4N7b3DvDe69wb13j/8o7kM/DPIe/5tyqId2OA7n4Wmbp22etnna1mlbp22dtnXa1mlbp61+ADB/iE7qQjbQD4OsHwRsyqEe2uE4nIenbZ+2fdr2afPT5qfNT5ufNj9tftrqBwXzB/KkLngD/TDI+oHBphzqoR2Ow3l42urHB/Nn8aQugwMDrEvhQDnUQzsch/NwHbIt9PwFPX9Bv/kLdXO8GOQ9iDflUA/tcBzOwxN2v7BG8fzd+6dkX8V1uA/zluUPokldb9ascWrmLcsf5JKYp+Iep5vVFn/++cMH/KMGf/vt68eP+W8afPOvHPzljw+//vT145ffPvz45ffPn3/48D8/ff69/tK/f/3pS62//fT1+tPrZn388o9rvQL/+enzx9SfP5ytX/95U81bVBtfX1hy8/n/2H5z+/ne9qZPts8Lfu/t56Pbv9i/4r3+/XqyvXP7kEfbD26vb27/5P5bvpDV9tfXZE+2N/RfX2i912/7yfaT209/tL1w+3hv+/Xo/juG//py6MH244X+62uct/qvL3+e9OdB995e9b3t7cn8jYHn3/V1yJPtF54/15cU7/U/evzH2f/+ZP/PF47/18fyb/Vfn+U/6Z+4/9fHwE+233j+Xh/nPtn+3H5/cv+X4PZfH1E+2T4/Ar+3fz05fizD8//6QPHR9nj9uT6GfHP7J/Oz821kbX+9mX2wfX5n3wH5Bf2TW6B4BPejM5A98AhcH6M82YPB7V+PHoHNR+DREWBvHMGuD0gebS/cfr63fTw5Arpg++vjgfe2f/QM9oUnoD86A/TAEeB6C/Ze/6MzuOAZVDw6gwueAV9vh97rn0/2XyzMb6wn+y+C/Y+ef9/0x5NXgPwJBxzBXvPJa6gIT4LygvQnCedtWF7M+iiBL2R5Eey7CfbotUB5KM5LT9+9DY+O5nl1KRPc3k14+Jr44n4web15G0we7QfTkzDs3YQ5303Y61FC4PQwL197N0Ee3YZhwgSzd2+DjUe3YQQT1n434dF5wncJzyZr8FRLnr3b+S5BH03WNGPCs6Pct7fh0Wcm+VUlEvazhLU5Wdc36Y8SzrN6PTpv+C5hPTpGOd985tcWjxKEr93+6POH7xLGo+dkKJ9R1wfoj26Dc08+O4f8NiEevV7oa+FZra9tjxLmOgnj3QRfjxJUmGDPntWvxWf169GjOdc5wri8mxCPjrSbHyvl9SGP9kPskyBvJ8S7CY8+Xc7rKZiw1rsJj57V3yfEuwn+6DVr801uXnjw7hFG3z7SPju3j8lX3nj0ab+cN8sSjz7v/D7B3014dKT9LsHl3ePko8dChV9c6PUl+rsJj96xqvDDV5VHr93f3YZn75KCX+BJxDfHh//+oeCh+vuXrP8+4HyF/NL1JMBe5xb4u7fgP90FyX+99T9+CMmvYXd8F/DX6xc//fzp63f/94E/M+jrp5/+/vlj//Kfv3/5+Zs//e1/f8Wf4P9e8OvXX37++I/fv37MpPyz+39hcP3nL9fBZP9wzaL/9YcPlr++3nxfx9zrV3L/8fUIXadVI39D6jdk5m/sv/6ZN/D/AA==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub u32) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
