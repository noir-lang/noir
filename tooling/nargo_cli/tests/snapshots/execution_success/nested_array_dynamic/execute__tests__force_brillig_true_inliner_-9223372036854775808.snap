---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _28",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27]",
    "public parameters indices : [_28]",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [[EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ], EXPR [ (1, _4) 0 ], EXPR [ (1, _5) 0 ], EXPR [ (1, _6) 0 ], EXPR [ (1, _7) 0 ], EXPR [ (1, _8) 0 ], EXPR [ (1, _9) 0 ], EXPR [ (1, _10) 0 ], EXPR [ (1, _11) 0 ], EXPR [ (1, _12) 0 ], EXPR [ (1, _13) 0 ], EXPR [ (1, _14) 0 ], EXPR [ (1, _15) 0 ], EXPR [ (1, _16) 0 ], EXPR [ (1, _17) 0 ], EXPR [ (1, _18) 0 ], EXPR [ (1, _19) 0 ], EXPR [ (1, _20) 0 ], EXPR [ (1, _21) 0 ], EXPR [ (1, _22) 0 ], EXPR [ (1, _23) 0 ], EXPR [ (1, _24) 0 ], EXPR [ (1, _25) 0 ], EXPR [ (1, _26) 0 ], EXPR [ (1, _27) 0 ]], EXPR [ (1, _28) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32867 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 29 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32838), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32866), source: Direct(32866), bit_size: Integer(U32) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 7 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 11 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 14 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 15 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 18 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 21 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Load { destination: Relative(6), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(6) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 22 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 25 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Mov { destination: Direct(32772), source: Relative(12) }, Mov { destination: Direct(32773), source: Relative(11) }, Call { location: 165 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Relative(1), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(32866) }, Call { location: 176 }, Call { location: 180 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32867 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 175 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 168 }, Return, Const { destination: Direct(32835), bit_size: Integer(U1), value: 1 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(32837), bit_size: Integer(U32), value: 3 }, Return, Call { location: 2627 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(1) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Direct(32837), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 188 }, Call { location: 2633 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 192 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(6) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(11) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 206 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(10) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(10) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Load { destination: Relative(6), source_pointer: Relative(14) }, Load { destination: Relative(13), source_pointer: Relative(6) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 219 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 227 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(6) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(13) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 235 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(13) }, Const { destination: Relative(13), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Relative(17), op: Equals, lhs: Relative(7), rhs: Relative(13) }, JumpIf { condition: Relative(17), location: 242 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Load { destination: Relative(7), source_pointer: Relative(9) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(7) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 248 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(7) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 256 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(9) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(7) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 264 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(7) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 272 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, Const { destination: Relative(6), bit_size: Field, value: 2 }, Const { destination: Relative(7), bit_size: Field, value: 3 }, Const { destination: Relative(21), bit_size: Field, value: 20 }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(23) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Mov { destination: Relative(24), source: Relative(23) }, Store { destination_pointer: Relative(24), source: Relative(6) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(7) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(21) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 25 }, Mov { destination: Relative(25), source: Direct(0) }, Mov { destination: Relative(26), source: Relative(9) }, Mov { destination: Relative(27), source: Relative(22) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(24) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(23), source: Relative(26) }, JumpIf { condition: Relative(23), location: 299 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(2) }, JumpIf { condition: Relative(23), location: 303 }, Call { location: 2633 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(5) }, JumpIf { condition: Relative(23), location: 306 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(23) }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(25) }, Load { destination: Relative(26), source_pointer: Relative(28) }, Load { destination: Relative(27), source_pointer: Relative(26) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(27) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 320 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(10) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(27) }, Load { destination: Relative(23), source_pointer: Relative(30) }, Load { destination: Relative(29), source_pointer: Relative(23) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(29) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 332 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(29) }, Load { destination: Relative(29), source_pointer: Relative(26) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 340 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(29) }, Load { destination: Relative(29), source_pointer: Relative(23) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(29) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 348 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(29) }, Const { destination: Relative(29), bit_size: Field, value: 4 }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(24), rhs: Relative(29) }, JumpIf { condition: Relative(33), location: 355 }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(34) } }, Load { destination: Relative(24), source_pointer: Relative(26) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(24) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 361 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(24) }, Load { destination: Relative(24), source_pointer: Relative(23) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(24) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 369 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(24) }, Load { destination: Relative(24), source_pointer: Relative(26) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(24) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 377 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(24) }, Load { destination: Relative(24), source_pointer: Relative(23) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(24) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 385 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(24) }, Const { destination: Relative(23), bit_size: Field, value: 5 }, Const { destination: Relative(24), bit_size: Field, value: 6 }, Const { destination: Relative(37), bit_size: Field, value: 21 }, Mov { destination: Relative(38), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(38), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(39) }, Store { destination_pointer: Relative(40), source: Relative(23) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(24) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(37) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 39 }, Mov { destination: Relative(39), source: Direct(0) }, Mov { destination: Relative(40), source: Relative(26) }, Mov { destination: Relative(41), source: Relative(38) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(37) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(24), source: Relative(40) }, JumpIf { condition: Relative(24), location: 412 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(26) } }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(26), op: LessThanEquals, bit_size: U32, lhs: Direct(32836), rhs: Relative(2) }, JumpIf { condition: Relative(26), location: 416 }, Call { location: 2633 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(5) }, JumpIf { condition: Relative(26), location: 419 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(26) }, Load { destination: Relative(37), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(39) }, Load { destination: Relative(40), source_pointer: Relative(42) }, Load { destination: Relative(41), source_pointer: Relative(40) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(41) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 433 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(41) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(10) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(41) }, Load { destination: Relative(26), source_pointer: Relative(44) }, Load { destination: Relative(43), source_pointer: Relative(26) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 445 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(43) }, Load { destination: Relative(43), source_pointer: Relative(40) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Not { destination: Relative(46), source: Relative(46), bit_size: U1 }, JumpIf { condition: Relative(46), location: 453 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(43) }, Load { destination: Relative(43), source_pointer: Relative(26) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(43) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 461 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(43) }, Const { destination: Relative(43), bit_size: Field, value: 7 }, BinaryFieldOp { destination: Relative(47), op: Equals, lhs: Relative(37), rhs: Relative(43) }, JumpIf { condition: Relative(47), location: 468 }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(48) } }, Load { destination: Relative(37), source_pointer: Relative(40) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(37) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 474 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(37) }, Load { destination: Relative(37), source_pointer: Relative(26) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(37) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 482 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(37) }, Load { destination: Relative(37), source_pointer: Relative(40) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(37) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 490 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Relative(37) }, Load { destination: Relative(37), source_pointer: Relative(26) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(37) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 498 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(37) }, Const { destination: Relative(26), bit_size: Field, value: 8 }, Const { destination: Relative(37), bit_size: Field, value: 9 }, Const { destination: Relative(50), bit_size: Field, value: 22 }, Mov { destination: Relative(51), source: Direct(1) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(52) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Mov { destination: Relative(53), source: Relative(52) }, Store { destination_pointer: Relative(53), source: Relative(26) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(37) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(50) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 53 }, Mov { destination: Relative(53), source: Direct(0) }, Mov { destination: Relative(54), source: Relative(40) }, Mov { destination: Relative(55), source: Relative(51) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(52) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(50), source: Relative(54) }, JumpIf { condition: Relative(50), location: 525 }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(40) } }, BinaryIntOp { destination: Relative(40), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(40), location: 528 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(40), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(40) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(54) }, Load { destination: Relative(53), source_pointer: Relative(52) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 542 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(53) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(10) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(53) }, Load { destination: Relative(55), source_pointer: Relative(57) }, Load { destination: Relative(56), source_pointer: Relative(55) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(56) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 554 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(56) }, Load { destination: Relative(56), source_pointer: Relative(52) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 562 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(56) }, Load { destination: Relative(56), source_pointer: Relative(55) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(56) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 570 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(56) }, Const { destination: Relative(56), bit_size: Field, value: 10 }, BinaryFieldOp { destination: Relative(60), op: Equals, lhs: Relative(50), rhs: Relative(56) }, JumpIf { condition: Relative(60), location: 577 }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(61) } }, Load { destination: Relative(50), source_pointer: Relative(52) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(50) }, Not { destination: Relative(61), source: Relative(61), bit_size: U1 }, JumpIf { condition: Relative(61), location: 583 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(50) }, Load { destination: Relative(50), source_pointer: Relative(55) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(50) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 591 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(50) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(63), op: Equals, bit_size: U32, lhs: Relative(62), rhs: Relative(50) }, Not { destination: Relative(63), source: Relative(63), bit_size: U1 }, JumpIf { condition: Relative(63), location: 599 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(50) }, Load { destination: Relative(50), source_pointer: Relative(55) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(64), op: Equals, bit_size: U32, lhs: Relative(63), rhs: Relative(50) }, Not { destination: Relative(64), source: Relative(64), bit_size: U1 }, JumpIf { condition: Relative(64), location: 607 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(50) }, Const { destination: Relative(50), bit_size: Field, value: 11 }, Const { destination: Relative(64), bit_size: Field, value: 12 }, Const { destination: Relative(65), bit_size: Field, value: 23 }, Mov { destination: Relative(66), source: Direct(1) }, Const { destination: Relative(67), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(67) }, IndirectConst { destination_pointer: Relative(66), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(66), rhs: Direct(2) }, Mov { destination: Relative(68), source: Relative(67) }, Store { destination_pointer: Relative(68), source: Relative(50) }, BinaryIntOp { destination: Relative(68), op: Add, bit_size: U32, lhs: Relative(68), rhs: Direct(2) }, Store { destination_pointer: Relative(68), source: Relative(64) }, BinaryIntOp { destination: Relative(68), op: Add, bit_size: U32, lhs: Relative(68), rhs: Direct(2) }, Store { destination_pointer: Relative(68), source: Relative(65) }, Const { destination: Relative(64), bit_size: Integer(U32), value: 67 }, Mov { destination: Relative(67), source: Direct(0) }, Mov { destination: Relative(68), source: Relative(52) }, Mov { destination: Relative(69), source: Relative(66) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(64) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(50), source: Relative(68) }, JumpIf { condition: Relative(50), location: 634 }, Const { destination: Relative(64), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(64) } }, Load { destination: Relative(50), source_pointer: Relative(52) }, Const { destination: Relative(64), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(65), op: Equals, bit_size: U32, lhs: Relative(64), rhs: Relative(50) }, Not { destination: Relative(65), source: Relative(65), bit_size: U1 }, JumpIf { condition: Relative(65), location: 640 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(50) }, Load { destination: Relative(50), source_pointer: Relative(55) }, Const { destination: Relative(65), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(67), op: Equals, bit_size: U32, lhs: Relative(65), rhs: Relative(50) }, Not { destination: Relative(67), source: Relative(67), bit_size: U1 }, JumpIf { condition: Relative(67), location: 648 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(50) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Const { destination: Relative(67), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(68), op: Equals, bit_size: U32, lhs: Relative(67), rhs: Relative(50) }, Not { destination: Relative(68), source: Relative(68), bit_size: U1 }, JumpIf { condition: Relative(68), location: 656 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(50) }, Load { destination: Relative(50), source_pointer: Relative(55) }, Const { destination: Relative(68), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(69), op: Equals, bit_size: U32, lhs: Relative(68), rhs: Relative(50) }, Not { destination: Relative(69), source: Relative(69), bit_size: U1 }, JumpIf { condition: Relative(69), location: 664 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(50) }, Const { destination: Relative(50), bit_size: Field, value: 109 }, Const { destination: Relative(69), bit_size: Field, value: 110 }, Const { destination: Relative(70), bit_size: Field, value: 111 }, Mov { destination: Relative(71), source: Direct(1) }, Const { destination: Relative(72), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(72) }, IndirectConst { destination_pointer: Relative(71), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(72), op: Add, bit_size: U32, lhs: Relative(71), rhs: Direct(2) }, Mov { destination: Relative(73), source: Relative(72) }, Store { destination_pointer: Relative(73), source: Relative(50) }, BinaryIntOp { destination: Relative(73), op: Add, bit_size: U32, lhs: Relative(73), rhs: Direct(2) }, Store { destination_pointer: Relative(73), source: Relative(69) }, BinaryIntOp { destination: Relative(73), op: Add, bit_size: U32, lhs: Relative(73), rhs: Direct(2) }, Store { destination_pointer: Relative(73), source: Relative(70) }, Const { destination: Relative(69), bit_size: Integer(U32), value: 72 }, Mov { destination: Relative(72), source: Direct(0) }, Mov { destination: Relative(73), source: Relative(55) }, Mov { destination: Relative(74), source: Relative(71) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(69) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(50), source: Relative(73) }, JumpIf { condition: Relative(50), location: 691 }, Const { destination: Relative(69), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(69) } }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, BinaryIntOp { destination: Relative(69), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32836) }, Const { destination: Relative(70), bit_size: Field, value: 100 }, Const { destination: Relative(72), bit_size: Field, value: 50 }, JumpIf { condition: Relative(50), location: 736 }, Jump { location: 697 }, Load { destination: Relative(11), source_pointer: Relative(52) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(11) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 703 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(55) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 711 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(11) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(40) }, Store { destination_pointer: Relative(17), source: Relative(72) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(1), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(51) }, Store { destination_pointer: Relative(17), source: Relative(52) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(69) }, Store { destination_pointer: Relative(17), source: Relative(55) }, Store { destination_pointer: Relative(3), source: Relative(11) }, Jump { location: 775 }, Load { destination: Relative(11), source_pointer: Relative(52) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(11) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 742 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(55) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 750 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(11) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(40) }, Store { destination_pointer: Relative(17), source: Relative(70) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(1), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(51) }, Store { destination_pointer: Relative(17), source: Relative(52) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(69) }, Store { destination_pointer: Relative(17), source: Relative(55) }, Store { destination_pointer: Relative(3), source: Relative(11) }, Jump { location: 775 }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(14), source_pointer: Relative(15) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(11), source_pointer: Relative(15) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(11) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 788 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(11) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(17), source_pointer: Relative(18) }, Load { destination: Relative(1), source_pointer: Relative(17) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(1) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 799 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(15) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 807 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(17) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 815 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(14), rhs: Relative(72) }, JumpIf { condition: Relative(1), location: 821 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Const { destination: Relative(1), bit_size: Field, value: 101 }, Const { destination: Relative(14), bit_size: Field, value: 102 }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Mov { destination: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(20), source: Relative(70) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(1) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(14) }, Load { destination: Relative(1), source_pointer: Relative(17) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(1) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 840 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, JumpIf { condition: Relative(50), location: 892 }, Jump { location: 845 }, Load { destination: Relative(11), source_pointer: Relative(17) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(11) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 851 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(39) }, Load { destination: Relative(15), source_pointer: Relative(18) }, Load { destination: Relative(16), source_pointer: Relative(15) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 863 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(41) }, Load { destination: Relative(15), source_pointer: Relative(19) }, Load { destination: Relative(16), source_pointer: Relative(15) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 874 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(16) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(39) }, Store { destination_pointer: Relative(28), source: Relative(17) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(1) }, Store { destination_pointer: Relative(28), source: Relative(15) }, Store { destination_pointer: Relative(3), source: Relative(11) }, Jump { location: 945 }, Const { destination: Relative(1), bit_size: Field, value: 51 }, Const { destination: Relative(11), bit_size: Field, value: 52 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Relative(72) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(1) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(11) }, Load { destination: Relative(1), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(39) }, Load { destination: Relative(11), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(11) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 915 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(41) }, Load { destination: Relative(11), source_pointer: Relative(18) }, Load { destination: Relative(15), source_pointer: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 926 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(15) }, Mov { destination: Direct(32771), source: Relative(1) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(39) }, Store { destination_pointer: Relative(20), source: Relative(14) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(1) }, Store { destination_pointer: Relative(20), source: Relative(11) }, Store { destination_pointer: Relative(3), source: Relative(14) }, Jump { location: 945 }, Load { destination: Relative(1), source_pointer: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(14) }, Load { destination: Relative(3), source_pointer: Relative(11) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(3) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 955 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(3), source_pointer: Relative(15) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 966 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(3) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 974 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(15) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(3) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 982 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(3) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 73 }, Mov { destination: Relative(73), source: Direct(0) }, Mov { destination: Relative(74), source: Relative(11) }, Mov { destination: Relative(75), source: Relative(17) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(15) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(74) }, JumpIf { condition: Relative(3), location: 995 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(8) }, Load { destination: Relative(3), source_pointer: Relative(15) }, Load { destination: Relative(11), source_pointer: Relative(3) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 1004 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(11) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(12) }, Load { destination: Relative(11), source_pointer: Relative(28) }, Load { destination: Relative(20), source_pointer: Relative(11) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(20) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 1015 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(20) }, Load { destination: Relative(20), source_pointer: Relative(3) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(20) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1023 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(20) }, Load { destination: Relative(3), source_pointer: Relative(11) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(3) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 1031 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(3) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 73 }, Mov { destination: Relative(73), source: Direct(0) }, Mov { destination: Relative(74), source: Relative(11) }, Mov { destination: Relative(75), source: Relative(17) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(31) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(74) }, JumpIf { condition: Relative(3), location: 1044 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(25) }, Load { destination: Relative(3), source_pointer: Relative(31) }, Load { destination: Relative(11), source_pointer: Relative(3) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 1053 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(11) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(27) }, Load { destination: Relative(11), source_pointer: Relative(33) }, Load { destination: Relative(32), source_pointer: Relative(11) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(32) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 1064 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(32) }, Load { destination: Relative(32), source_pointer: Relative(3) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(32) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 1072 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(32) }, Load { destination: Relative(3), source_pointer: Relative(11) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(3) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 1080 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(3) }, Const { destination: Relative(3), bit_size: Field, value: 103 }, Const { destination: Relative(35), bit_size: Field, value: 104 }, Const { destination: Relative(36), bit_size: Field, value: 105 }, Mov { destination: Relative(42), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(42), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(43) }, Store { destination_pointer: Relative(44), source: Relative(3) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(35) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(36) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 73 }, Mov { destination: Relative(73), source: Direct(0) }, Mov { destination: Relative(74), source: Relative(11) }, Mov { destination: Relative(75), source: Relative(42) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(35) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(74) }, JumpIf { condition: Relative(3), location: 1107 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(39) }, Load { destination: Relative(3), source_pointer: Relative(35) }, Load { destination: Relative(11), source_pointer: Relative(3) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1116 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(11) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(41) }, Load { destination: Relative(11), source_pointer: Relative(42) }, Load { destination: Relative(36), source_pointer: Relative(11) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(36) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 1127 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(36) }, Load { destination: Relative(36), source_pointer: Relative(3) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(36) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 1135 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(36) }, Load { destination: Relative(3), source_pointer: Relative(11) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(3) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 1143 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(3) }, Const { destination: Relative(3), bit_size: Field, value: 106 }, Const { destination: Relative(44), bit_size: Field, value: 107 }, Const { destination: Relative(45), bit_size: Field, value: 108 }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(47) }, Store { destination_pointer: Relative(48), source: Relative(3) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(44) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Relative(45) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 73 }, Mov { destination: Relative(73), source: Direct(0) }, Mov { destination: Relative(74), source: Relative(11) }, Mov { destination: Relative(75), source: Relative(46) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(44) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(74) }, JumpIf { condition: Relative(3), location: 1170 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(51) }, Load { destination: Relative(3), source_pointer: Relative(44) }, Load { destination: Relative(11), source_pointer: Relative(3) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(11) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 1179 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(11) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(53) }, Load { destination: Relative(11), source_pointer: Relative(46) }, Load { destination: Relative(45), source_pointer: Relative(11) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 1190 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(45) }, Load { destination: Relative(45), source_pointer: Relative(3) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 1198 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(45) }, Load { destination: Relative(3), source_pointer: Relative(11) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(3) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 1206 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(71) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(3) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 1214 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(71), source: Relative(3) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 73 }, Mov { destination: Relative(73), source: Direct(0) }, Mov { destination: Relative(74), source: Relative(11) }, Mov { destination: Relative(75), source: Relative(71) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(49) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(3), source: Relative(74) }, JumpIf { condition: Relative(3), location: 1227 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(3), bit_size: Field, value: 0 }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(49) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(49) }, Store { destination_pointer: Relative(52), source: Relative(3) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(6) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(3) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 1245 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(49), source: Relative(13) }, Store { destination_pointer: Relative(49), source: Relative(7) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(29) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(23) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(13) }, Store { destination_pointer: Relative(23), source: Relative(11) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(1) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(3) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(1) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(7) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 1277 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U32, lhs: Relative(4), rhs: Relative(10) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(13) }, Load { destination: Relative(4), source_pointer: Relative(29) }, Load { destination: Relative(23), source_pointer: Relative(4) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(23) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 1287 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(23) }, Load { destination: Relative(13), source_pointer: Relative(52) }, Load { destination: Relative(23), source_pointer: Relative(13) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(23) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 1299 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(23) }, Load { destination: Relative(23), source_pointer: Relative(4) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(23) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 1307 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(23) }, Load { destination: Relative(23), source_pointer: Relative(13) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(23) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 1315 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(23) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(8) }, Load { destination: Relative(23), source_pointer: Relative(57) }, Load { destination: Relative(55), source_pointer: Relative(23) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(58), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(55) }, Not { destination: Relative(58), source: Relative(58), bit_size: U1 }, JumpIf { condition: Relative(58), location: 1326 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(55) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(12) }, Load { destination: Relative(55), source_pointer: Relative(59) }, Load { destination: Relative(58), source_pointer: Relative(55) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(60), op: Equals, bit_size: U32, lhs: Relative(59), rhs: Relative(58) }, Not { destination: Relative(60), source: Relative(60), bit_size: U1 }, JumpIf { condition: Relative(60), location: 1337 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(58) }, Load { destination: Relative(58), source_pointer: Relative(23) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(61), op: Equals, bit_size: U32, lhs: Relative(60), rhs: Relative(58) }, Not { destination: Relative(61), source: Relative(61), bit_size: U1 }, JumpIf { condition: Relative(61), location: 1345 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(58) }, Load { destination: Relative(58), source_pointer: Relative(55) }, Const { destination: Relative(61), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(61), rhs: Relative(58) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 1353 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(58) }, Load { destination: Relative(55), source_pointer: Relative(22) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(55) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 1361 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(55) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 73 }, Mov { destination: Relative(73), source: Direct(0) }, Mov { destination: Relative(74), source: Relative(23) }, Mov { destination: Relative(75), source: Relative(22) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(62) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(55), source: Relative(74) }, JumpIf { condition: Relative(55), location: 1374 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(22) } }, Load { destination: Relative(22), source_pointer: Relative(4) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 1380 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(13) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(62), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(22) }, Not { destination: Relative(62), source: Relative(62), bit_size: U1 }, JumpIf { condition: Relative(62), location: 1388 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(4) }, Const { destination: Relative(62), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(63), op: Equals, bit_size: U32, lhs: Relative(62), rhs: Relative(22) }, Not { destination: Relative(63), source: Relative(63), bit_size: U1 }, JumpIf { condition: Relative(63), location: 1396 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(13) }, Const { destination: Relative(63), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(64), op: Equals, bit_size: U32, lhs: Relative(63), rhs: Relative(22) }, Not { destination: Relative(64), source: Relative(64), bit_size: U1 }, JumpIf { condition: Relative(64), location: 1404 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(22) }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(65), op: Add, bit_size: U32, lhs: Relative(64), rhs: Relative(25) }, Load { destination: Relative(22), source_pointer: Relative(65) }, Load { destination: Relative(64), source_pointer: Relative(22) }, Const { destination: Relative(65), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(67), op: Equals, bit_size: U32, lhs: Relative(65), rhs: Relative(64) }, Not { destination: Relative(67), source: Relative(67), bit_size: U1 }, JumpIf { condition: Relative(67), location: 1415 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(64) }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(68), op: Add, bit_size: U32, lhs: Relative(67), rhs: Relative(27) }, Load { destination: Relative(64), source_pointer: Relative(68) }, Load { destination: Relative(67), source_pointer: Relative(64) }, Const { destination: Relative(68), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(69), op: Equals, bit_size: U32, lhs: Relative(68), rhs: Relative(67) }, Not { destination: Relative(69), source: Relative(69), bit_size: U1 }, JumpIf { condition: Relative(69), location: 1426 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(67), rhs: Direct(2) }, Store { destination_pointer: Relative(64), source: Relative(67) }, Load { destination: Relative(67), source_pointer: Relative(22) }, Const { destination: Relative(69), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(70), op: Equals, bit_size: U32, lhs: Relative(69), rhs: Relative(67) }, Not { destination: Relative(70), source: Relative(70), bit_size: U1 }, JumpIf { condition: Relative(70), location: 1434 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(67), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(67) }, Load { destination: Relative(67), source_pointer: Relative(64) }, Const { destination: Relative(70), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(71), op: Equals, bit_size: U32, lhs: Relative(70), rhs: Relative(67) }, Not { destination: Relative(71), source: Relative(71), bit_size: U1 }, JumpIf { condition: Relative(71), location: 1442 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(67), op: Add, bit_size: U32, lhs: Relative(67), rhs: Direct(2) }, Store { destination_pointer: Relative(64), source: Relative(67) }, Load { destination: Relative(64), source_pointer: Relative(38) }, Const { destination: Relative(67), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(71), op: Equals, bit_size: U32, lhs: Relative(67), rhs: Relative(64) }, Not { destination: Relative(71), source: Relative(71), bit_size: U1 }, JumpIf { condition: Relative(71), location: 1450 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(64), op: Add, bit_size: U32, lhs: Relative(64), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(64) }, Const { destination: Relative(71), bit_size: Integer(U32), value: 73 }, Mov { destination: Relative(73), source: Direct(0) }, Mov { destination: Relative(74), source: Relative(22) }, Mov { destination: Relative(75), source: Relative(38) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(71) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(64), source: Relative(74) }, JumpIf { condition: Relative(64), location: 1463 }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(22) } }, Load { destination: Relative(22), source_pointer: Relative(4) }, Const { destination: Relative(64), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(71), op: Equals, bit_size: U32, lhs: Relative(64), rhs: Relative(22) }, Not { destination: Relative(71), source: Relative(71), bit_size: U1 }, JumpIf { condition: Relative(71), location: 1469 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(13) }, Const { destination: Relative(71), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(73), op: Equals, bit_size: U32, lhs: Relative(71), rhs: Relative(22) }, Not { destination: Relative(73), source: Relative(73), bit_size: U1 }, JumpIf { condition: Relative(73), location: 1477 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(4) }, Const { destination: Relative(73), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(74), op: Equals, bit_size: U32, lhs: Relative(73), rhs: Relative(22) }, Not { destination: Relative(74), source: Relative(74), bit_size: U1 }, JumpIf { condition: Relative(74), location: 1485 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(22) }, Load { destination: Relative(22), source_pointer: Relative(13) }, Const { destination: Relative(74), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(75), op: Equals, bit_size: U32, lhs: Relative(74), rhs: Relative(22) }, Not { destination: Relative(75), source: Relative(75), bit_size: U1 }, JumpIf { condition: Relative(75), location: 1493 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(22) }, BinaryIntOp { destination: Relative(75), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(76), op: Add, bit_size: U32, lhs: Relative(75), rhs: Relative(39) }, Load { destination: Relative(22), source_pointer: Relative(76) }, Load { destination: Relative(39), source_pointer: Relative(22) }, Const { destination: Relative(75), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(76), op: Equals, bit_size: U32, lhs: Relative(75), rhs: Relative(39) }, Not { destination: Relative(76), source: Relative(76), bit_size: U1 }, JumpIf { condition: Relative(76), location: 1504 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(39) }, BinaryIntOp { destination: Relative(76), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(77), op: Add, bit_size: U32, lhs: Relative(76), rhs: Relative(41) }, Load { destination: Relative(39), source_pointer: Relative(77) }, Load { destination: Relative(41), source_pointer: Relative(39) }, Const { destination: Relative(76), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(77), op: Equals, bit_size: U32, lhs: Relative(76), rhs: Relative(41) }, Not { destination: Relative(77), source: Relative(77), bit_size: U1 }, JumpIf { condition: Relative(77), location: 1515 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(41) }, Load { destination: Relative(41), source_pointer: Relative(22) }, Const { destination: Relative(77), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(78), op: Equals, bit_size: U32, lhs: Relative(77), rhs: Relative(41) }, Not { destination: Relative(78), source: Relative(78), bit_size: U1 }, JumpIf { condition: Relative(78), location: 1523 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(41) }, Load { destination: Relative(41), source_pointer: Relative(39) }, Const { destination: Relative(78), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(79), op: Equals, bit_size: U32, lhs: Relative(78), rhs: Relative(41) }, Not { destination: Relative(79), source: Relative(79), bit_size: U1 }, JumpIf { condition: Relative(79), location: 1531 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(41) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 79 }, Mov { destination: Relative(79), source: Direct(0) }, Mov { destination: Relative(80), source: Relative(22) }, Mov { destination: Relative(81), source: Relative(17) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(41) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(39), source: Relative(80) }, JumpIf { condition: Relative(39), location: 1544 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Load { destination: Relative(17), source_pointer: Relative(4) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(17) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 1550 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(13) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(17) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 1558 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(4) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(79), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(17) }, Not { destination: Relative(79), source: Relative(79), bit_size: U1 }, JumpIf { condition: Relative(79), location: 1566 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(17) }, Load { destination: Relative(17), source_pointer: Relative(13) }, Const { destination: Relative(79), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(80), op: Equals, bit_size: U32, lhs: Relative(79), rhs: Relative(17) }, Not { destination: Relative(80), source: Relative(80), bit_size: U1 }, JumpIf { condition: Relative(80), location: 1574 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(17) }, BinaryIntOp { destination: Relative(80), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(81), op: Add, bit_size: U32, lhs: Relative(80), rhs: Relative(51) }, Load { destination: Relative(17), source_pointer: Relative(81) }, Load { destination: Relative(51), source_pointer: Relative(17) }, Const { destination: Relative(80), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(81), op: Equals, bit_size: U32, lhs: Relative(80), rhs: Relative(51) }, Not { destination: Relative(81), source: Relative(81), bit_size: U1 }, JumpIf { condition: Relative(81), location: 1585 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(51) }, BinaryIntOp { destination: Relative(81), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(82), op: Add, bit_size: U32, lhs: Relative(81), rhs: Relative(53) }, Load { destination: Relative(51), source_pointer: Relative(82) }, Load { destination: Relative(53), source_pointer: Relative(51) }, Const { destination: Relative(81), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(82), op: Equals, bit_size: U32, lhs: Relative(81), rhs: Relative(53) }, Not { destination: Relative(82), source: Relative(82), bit_size: U1 }, JumpIf { condition: Relative(82), location: 1596 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(17) }, Const { destination: Relative(82), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(83), op: Equals, bit_size: U32, lhs: Relative(82), rhs: Relative(53) }, Not { destination: Relative(83), source: Relative(83), bit_size: U1 }, JumpIf { condition: Relative(83), location: 1604 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(51) }, Const { destination: Relative(83), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(84), op: Equals, bit_size: U32, lhs: Relative(83), rhs: Relative(53) }, Not { destination: Relative(84), source: Relative(84), bit_size: U1 }, JumpIf { condition: Relative(84), location: 1612 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(66) }, Const { destination: Relative(84), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(85), op: Equals, bit_size: U32, lhs: Relative(84), rhs: Relative(53) }, Not { destination: Relative(85), source: Relative(85), bit_size: U1 }, JumpIf { condition: Relative(85), location: 1620 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(66), source: Relative(53) }, Const { destination: Relative(85), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(86), source: Direct(0) }, Mov { destination: Relative(87), source: Relative(17) }, Mov { destination: Relative(88), source: Relative(66) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(85) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(53), source: Relative(87) }, JumpIf { condition: Relative(53), location: 1633 }, Const { destination: Relative(66), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(66) } }, Load { destination: Relative(53), source_pointer: Relative(4) }, Const { destination: Relative(66), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(85), op: Equals, bit_size: U32, lhs: Relative(66), rhs: Relative(53) }, Not { destination: Relative(85), source: Relative(85), bit_size: U1 }, JumpIf { condition: Relative(85), location: 1639 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(13) }, Const { destination: Relative(85), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(86), op: Equals, bit_size: U32, lhs: Relative(85), rhs: Relative(53) }, Not { destination: Relative(86), source: Relative(86), bit_size: U1 }, JumpIf { condition: Relative(86), location: 1647 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(53) }, Load { destination: Relative(53), source_pointer: Relative(4) }, Const { destination: Relative(86), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(87), op: Equals, bit_size: U32, lhs: Relative(86), rhs: Relative(53) }, Not { destination: Relative(87), source: Relative(87), bit_size: U1 }, JumpIf { condition: Relative(87), location: 1655 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(53) }, Load { destination: Relative(4), source_pointer: Relative(13) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(87), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(4) }, Not { destination: Relative(87), source: Relative(87), bit_size: U1 }, JumpIf { condition: Relative(87), location: 1663 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(4) }, BinaryIntOp { destination: Relative(87), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(88), op: Add, bit_size: U32, lhs: Relative(87), rhs: Relative(40) }, Load { destination: Relative(4), source_pointer: Relative(88) }, Load { destination: Relative(13), source_pointer: Relative(17) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(87), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(13) }, Not { destination: Relative(87), source: Relative(87), bit_size: U1 }, JumpIf { condition: Relative(87), location: 1674 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(51) }, Const { destination: Relative(87), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(88), op: Equals, bit_size: U32, lhs: Relative(87), rhs: Relative(13) }, Not { destination: Relative(88), source: Relative(88), bit_size: U1 }, JumpIf { condition: Relative(88), location: 1682 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(17) }, Const { destination: Relative(88), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(89), op: Equals, bit_size: U32, lhs: Relative(88), rhs: Relative(13) }, Not { destination: Relative(89), source: Relative(89), bit_size: U1 }, JumpIf { condition: Relative(89), location: 1690 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(51) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(89), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(13) }, Not { destination: Relative(89), source: Relative(89), bit_size: U1 }, JumpIf { condition: Relative(89), location: 1698 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(13) }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(4), rhs: Relative(72) }, JumpIf { condition: Relative(13), location: 1704 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(51) } }, Load { destination: Relative(4), source_pointer: Relative(3) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 1710 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(72), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(4) }, Not { destination: Relative(72), source: Relative(72), bit_size: U1 }, JumpIf { condition: Relative(72), location: 1718 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(3) }, Const { destination: Relative(72), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(89), op: Equals, bit_size: U32, lhs: Relative(72), rhs: Relative(4) }, Not { destination: Relative(89), source: Relative(89), bit_size: U1 }, JumpIf { condition: Relative(89), location: 1726 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Load { destination: Relative(3), source_pointer: Relative(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(89), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, Not { destination: Relative(89), source: Relative(89), bit_size: U1 }, JumpIf { condition: Relative(89), location: 1734 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(90), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Load { destination: Relative(89), source_pointer: Relative(90) }, Load { destination: Relative(90), source_pointer: Relative(89) }, Const { destination: Relative(91), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(92), op: Equals, bit_size: U32, lhs: Relative(91), rhs: Relative(90) }, Not { destination: Relative(92), source: Relative(92), bit_size: U1 }, JumpIf { condition: Relative(92), location: 1745 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(90), op: Add, bit_size: U32, lhs: Relative(90), rhs: Direct(2) }, Store { destination_pointer: Relative(89), source: Relative(90) }, Const { destination: Relative(90), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(93), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(90) }, Load { destination: Relative(92), source_pointer: Relative(93) }, Load { destination: Relative(1), source_pointer: Relative(92) }, Const { destination: Relative(93), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(94), op: Equals, bit_size: U32, lhs: Relative(93), rhs: Relative(1) }, Not { destination: Relative(94), source: Relative(94), bit_size: U1 }, JumpIf { condition: Relative(94), location: 1756 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(92), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(89) }, Const { destination: Relative(94), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(95), op: Equals, bit_size: U32, lhs: Relative(94), rhs: Relative(1) }, Not { destination: Relative(95), source: Relative(95), bit_size: U1 }, JumpIf { condition: Relative(95), location: 1764 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(89), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(92) }, Const { destination: Relative(95), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(96), op: Equals, bit_size: U32, lhs: Relative(95), rhs: Relative(1) }, Not { destination: Relative(96), source: Relative(96), bit_size: U1 }, JumpIf { condition: Relative(96), location: 1772 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(92), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(38) }, Const { destination: Relative(92), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(96), op: Equals, bit_size: U32, lhs: Relative(92), rhs: Relative(1) }, Not { destination: Relative(96), source: Relative(96), bit_size: U1 }, JumpIf { condition: Relative(96), location: 1780 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(1) }, Const { destination: Relative(96), bit_size: Integer(U32), value: 97 }, Mov { destination: Relative(97), source: Direct(0) }, Mov { destination: Relative(98), source: Relative(89) }, Mov { destination: Relative(99), source: Relative(38) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(96) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(98) }, JumpIf { condition: Relative(1), location: 1793 }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(38) } }, Const { destination: Relative(1), bit_size: Field, value: 19 }, Const { destination: Relative(38), bit_size: Field, value: 18 }, Mov { destination: Relative(89), source: Direct(1) }, Const { destination: Relative(96), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(96) }, IndirectConst { destination_pointer: Relative(89), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(96), op: Add, bit_size: U32, lhs: Relative(89), rhs: Direct(2) }, Mov { destination: Relative(97), source: Relative(96) }, Store { destination_pointer: Relative(97), source: Relative(21) }, BinaryIntOp { destination: Relative(97), op: Add, bit_size: U32, lhs: Relative(97), rhs: Direct(2) }, Store { destination_pointer: Relative(97), source: Relative(1) }, BinaryIntOp { destination: Relative(97), op: Add, bit_size: U32, lhs: Relative(97), rhs: Direct(2) }, Store { destination_pointer: Relative(97), source: Relative(38) }, BinaryIntOp { destination: Relative(96), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(97), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(98), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(99), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(100), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(101), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(102), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(103), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(104), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(105), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(106), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(107), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(108), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, JumpIf { condition: Relative(50), location: 1899 }, Jump { location: 1821 }, Load { destination: Relative(4), source_pointer: Relative(89) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(4) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 1827 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(89), source: Relative(4) }, JumpIf { condition: Relative(96), location: 1831 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(97) }, Load { destination: Relative(4), source_pointer: Relative(13) }, Load { destination: Relative(9), source_pointer: Relative(4) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 1840 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(97), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(4) }, Load { destination: Relative(9), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1852 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(25) }, Load { destination: Relative(14), source_pointer: Relative(17) }, Load { destination: Relative(16), source_pointer: Relative(14) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 1863 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(27) }, Load { destination: Relative(14), source_pointer: Relative(18) }, Load { destination: Relative(16), source_pointer: Relative(14) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 1874 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(16) }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(25) }, Store { destination_pointer: Relative(20), source: Relative(89) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(9), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(98) }, Store { destination_pointer: Relative(20), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2675 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, Store { destination_pointer: Relative(19), source: Relative(9) }, Store { destination_pointer: Relative(11), source: Relative(14) }, Jump { location: 1983 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(6) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(13), source: Relative(6) }, Store { destination_pointer: Relative(13), source: Relative(56) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(37) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(26) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, JumpIf { condition: Relative(6), location: 1913 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(10) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(6) }, Load { destination: Relative(9), source_pointer: Relative(14) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 1923 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(13) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, Load { destination: Relative(6), source_pointer: Relative(15) }, Load { destination: Relative(13), source_pointer: Relative(6) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 1935 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(13) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(25) }, Load { destination: Relative(13), source_pointer: Relative(17) }, Load { destination: Relative(16), source_pointer: Relative(13) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 1946 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(27) }, Load { destination: Relative(13), source_pointer: Relative(18) }, Load { destination: Relative(16), source_pointer: Relative(13) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 1957 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(16) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(25) }, Store { destination_pointer: Relative(20), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(4) }, Store { destination_pointer: Relative(20), source: Relative(13) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2675 }, Mov { destination: Relative(4), source: Direct(32773) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, Store { destination_pointer: Relative(16), source: Relative(6) }, Store { destination_pointer: Relative(11), source: Relative(4) }, Jump { location: 1983 }, Load { destination: Relative(4), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(7) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 1992 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(5) }, Load { destination: Relative(7), source_pointer: Relative(13) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 2002 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(6) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(4) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 2010 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(4) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 2018 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 2028 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(16) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(90) }, Load { destination: Relative(16), source_pointer: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(16) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 2038 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(4) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 2046 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(16) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(18) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 2054 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(18) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 109 }, Mov { destination: Relative(109), source: Direct(0) }, Mov { destination: Relative(110), source: Relative(4) }, Mov { destination: Relative(111), source: Relative(89) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(23) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(18), source: Relative(110) }, JumpIf { condition: Relative(18), location: 2067 }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(23) } }, Load { destination: Relative(18), source_pointer: Relative(6) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(18) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 2073 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(7) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(18) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 2081 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(6) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(18) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 2089 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(18) }, Load { destination: Relative(6), source_pointer: Relative(7) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(6) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 2097 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(4) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 2105 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(16) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(6) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 2113 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(4) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(6) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 2121 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(16) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(6) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 2129 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(6) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, Load { destination: Relative(6), source_pointer: Relative(16) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(6), rhs: Relative(38) }, JumpIf { condition: Relative(4), location: 2137 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Direct(32837) }, Const { destination: Relative(6), bit_size: Field, value: 5000 }, JumpIf { condition: Relative(4), location: 2223 }, Jump { location: 2142 }, Load { destination: Relative(4), source_pointer: Relative(11) }, JumpIf { condition: Relative(102), location: 2145 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(103) }, Load { destination: Relative(7), source_pointer: Relative(13) }, Load { destination: Relative(9), source_pointer: Relative(7) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(9) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 2154 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(9) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(103), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(7) }, Load { destination: Relative(9), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 2166 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(14) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(25) }, Load { destination: Relative(14), source_pointer: Relative(17) }, Load { destination: Relative(16), source_pointer: Relative(14) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 2177 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(16) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(27) }, Load { destination: Relative(16), source_pointer: Relative(19) }, Load { destination: Relative(18), source_pointer: Relative(16) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 2188 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(18) }, JumpIf { condition: Relative(2), location: 2192 }, Call { location: 2636 }, Const { destination: Relative(2), bit_size: Field, value: 1000 }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 2675 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(24) }, Store { destination_pointer: Relative(22), source: Relative(2) }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(25) }, Store { destination_pointer: Relative(20), source: Relative(18) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(9), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(104) }, Store { destination_pointer: Relative(18), source: Relative(16) }, Mov { destination: Direct(32771), source: Relative(4) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2675 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(7) }, Store { destination_pointer: Relative(16), source: Relative(9) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Jump { location: 2304 }, Load { destination: Relative(2), source_pointer: Relative(11) }, JumpIf { condition: Relative(99), location: 2226 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(100) }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(7), source_pointer: Relative(4) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(7) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 2235 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(100), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Load { destination: Relative(7), source_pointer: Relative(14) }, Load { destination: Relative(13), source_pointer: Relative(7) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 2247 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(13) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(25) }, Load { destination: Relative(13), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(13) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 2258 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(15) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(27) }, Load { destination: Relative(15), source_pointer: Relative(18) }, Load { destination: Relative(17), source_pointer: Relative(15) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 2269 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Direct(32837) }, JumpIf { condition: Relative(17), location: 2274 }, Call { location: 2636 }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 2675 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(24) }, Store { destination_pointer: Relative(20), source: Relative(6) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(25) }, Store { destination_pointer: Relative(20), source: Relative(17) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(101) }, Store { destination_pointer: Relative(19), source: Relative(15) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2675 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(4) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Store { destination_pointer: Relative(11), source: Relative(13) }, Jump { location: 2304 }, Load { destination: Relative(2), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(4) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(7) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 2313 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(5) }, Load { destination: Relative(7), source_pointer: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(7) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 2323 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(4) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 2331 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(13) }, Load { destination: Relative(4), source_pointer: Relative(7) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 2339 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(4), source_pointer: Relative(16) }, Load { destination: Relative(3), source_pointer: Relative(4) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(3) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 2349 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(3) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(90) }, Load { destination: Relative(3), source_pointer: Relative(17) }, Load { destination: Relative(7), source_pointer: Relative(3) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(7) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 2359 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(7) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 2367 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(3) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(7) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 2375 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(32837) }, Load { destination: Relative(3), source_pointer: Relative(7) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(3), rhs: Relative(6) }, JumpIf { condition: Relative(4), location: 2383 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, JumpIf { condition: Relative(105), location: 2385 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(106) }, Load { destination: Relative(3), source_pointer: Relative(7) }, Load { destination: Relative(4), source_pointer: Relative(3) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(4) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 2394 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(106), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(4) }, Load { destination: Relative(20), source_pointer: Relative(23) }, Load { destination: Relative(4), source_pointer: Relative(20) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(4) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 2406 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(3) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(4) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 2414 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Load { destination: Relative(3), source_pointer: Relative(20) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(3) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 2422 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(3) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(25) }, Load { destination: Relative(3), source_pointer: Relative(26) }, Load { destination: Relative(24), source_pointer: Relative(3) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 2433 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(24) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(27) }, Load { destination: Relative(24), source_pointer: Relative(28) }, Load { destination: Relative(20), source_pointer: Relative(24) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(20) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 2444 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(20) }, Load { destination: Relative(20), source_pointer: Relative(3) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(20) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 2452 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(20) }, Load { destination: Relative(20), source_pointer: Relative(24) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(20) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 2460 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(20) }, JumpIf { condition: Relative(107), location: 2464 }, Call { location: 2636 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(108) }, Load { destination: Relative(20), source_pointer: Relative(29) }, Load { destination: Relative(24), source_pointer: Relative(20) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(24) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 2473 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(24) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(108), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(20) }, Load { destination: Relative(24), source_pointer: Relative(31) }, Load { destination: Relative(30), source_pointer: Relative(24) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(30) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 2485 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(24), source: Relative(30) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(33) }, Load { destination: Relative(32), source_pointer: Relative(30) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(32) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 2496 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(32), rhs: Relative(12) }, Load { destination: Relative(30), source_pointer: Relative(34) }, Load { destination: Relative(12), source_pointer: Relative(30) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(12) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 2507 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(12) }, Mov { destination: Direct(32771), source: Relative(24) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(8) }, Store { destination_pointer: Relative(35), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32836) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 13 }, Call { location: 2675 }, Mov { destination: Relative(8), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(3) }, Store { destination_pointer: Relative(34), source: Relative(30) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 2675 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(20) }, Store { destination_pointer: Relative(24), source: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(3) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(8) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 2540 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(8) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(5) }, Load { destination: Relative(8), source_pointer: Relative(12) }, Load { destination: Relative(3), source_pointer: Relative(8) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 2550 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(2) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(3) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 2558 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(8) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 2566 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(10) }, Load { destination: Relative(2), source_pointer: Relative(20) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(10) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 2576 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32837) }, Load { destination: Relative(10), source_pointer: Relative(24) }, Load { destination: Relative(8), source_pointer: Relative(10) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(8) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 2586 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(8) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 2594 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(10) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(8) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 2602 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(35), source: Relative(10) }, Store { destination_pointer: Relative(35), source: Relative(21) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(1) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 35 }, Mov { destination: Relative(35), source: Direct(0) }, Mov { destination: Relative(36), source: Relative(2) }, Mov { destination: Relative(37), source: Relative(8) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(6) }, Call { location: 2642 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(1), source: Relative(36) }, JumpIf { condition: Relative(1), location: 2626 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 2632 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 2627 }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Direct(32835) }, Load { destination: Relative(5), source_pointer: Relative(1) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 2652 }, Call { location: 2639 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 2657 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, JumpIf { condition: Relative(5), location: 2662 }, Jump { location: 2660 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Return, Load { destination: Relative(5), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Load { destination: Relative(6), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(9) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(5), rhs: Relative(8) }, Store { destination_pointer: Relative(4), source: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, Mov { destination: Relative(3), source: Relative(5) }, Jump { location: 2657 }, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 2679 }, Jump { location: 2681 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 2696 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 2693 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 2686 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 2696 }, Return]"
  ],
  "debug_symbols": "pZ3BjivHkXbf5a61YEZmREb4VQzDkG15IECQDY39Az8Mv/sws/I7KS0MzLA3yqPbt84huxhksbtY91/f/vLDn/75X3/88ee//u2/v/3u9//69qdffvzppx//648//e3P3//jx7/9/P7Tf317rf+0HN9+1757r37WOOs8a561nrVeZ21ntW+/s7X2s46z+lnjrPOsedbaq71eZ21ntbP2s46z+lnjrPOsedbja8fXjq8dXzu+dnzt+NrxteNrx9eOz47Pjs+Oz47Pjs+Oz47Pjs+Oz46vH18/vn58/fj68fXj68fX376+1jxrPet4nbWd9e0ba+1nHWf1s8ZZ51nzrPWs/jprO+vx+fH58fnx+fH58fnx+fHF8cXxxfHF8cXxxfHF8cXxxfHF8c3jm8c3j28e33z7fK1+1jjrPGuetZ41X2dtZ7Wz9rMeXx5fHl8e35qPWGs965qPvbaz2ln7WcdZ/axx1nnW41vzMb/71td87LWd1c7azzrO6md9+3Kt86x51nrWNR97bWe1s/azjrP6WY+vHV87vnZ8dnx2fHZ8dnx2fHZ8dnx2fHZ8dnz9+Prx9ePrx9ePrx9fP75+fP34+vGN4xvHN45vHN84vnF84/jG8Y3jG8e35qPW2s5qZ+1nHWddz6evBSGYghTUgTUkDzSBCbpgCGQOmUPmkDlknjJPmafMU+Yp85R5yjxlnjJPmVPmlDllTplT5pQ5Zd6vL21BCurAfonZ0AQm6IIhcEEIZC6Z65jH6yVYZltggi4YAheEYApSUAfWWD0g8xqs1hd0wRC4IARTkIJlfj+hjTVgDzSBCbpgCFwQgilIgcxd5i5zl7nL3GXuMneZu8xd5i7zkHnIPGQeMg+Zh8xD5iHzkHnI7DK7zC6zy+wyu8wus8vsMrvMIXPIHDLvGfQFQ+CCEEzBMseCOrBncEMTmKALhsAFIZgCmafMKXPKnDKnzClzypwyp8wpc8pcMpfMJXPJXDKXzCVzyVwy1zH7nsG5oAlM0AVD4IIQTEEK6kCTucncZG4y7xnMBS4IwRSkoA7sGdzQBCboAplNZpPZZN4zWAvqwJ7BDU1ggi4YAheEYApk7jIPmYfMQ+Yh85B5yDxkHjIPmYfMLrPL7DK7zC6zy+wyu8wus8scMofMIXPIHDKHzCFzyBwyh8xT5inzmkF7LeiCIXBBCNbRfFuQgjqwZvCBJjBBFwyBC0Igc8qcMpfMJXPJXDKXzCVzyVwyl8x1zPF6CZrABF0wBC4IwRSkYJnfr3qx335taAITdMEQuCAEU5ACmU1mk9lk3u/F+oIhcEEIpiAFdWC/JdvQBCaQeb8tGwtcEIIpSEEdWDP4QBOYoAtkHjIPmYfMQ+Yhs8vsMrvMLrPL7DK7zC6zy+wyh8whc8gcMofMIfOaQfMFU5CCOrBm8IEmMEEXDIELZJ4yT5mnzHsGY0ETmKALhsAFIZiCFNSBknnP4FywzLlgClJQD8w9XxuawARdMAQuCMEUpEDmJnOTucncZG4yN5mbzE3mJnOT2WQ2mU1mk9lkNplNZpPZZDaZu8xd5i5zl7nLvMeqFkxBCurAHqsNTWCCLhgCF8g8ZB4yD5ldZpfZZXaZXWaX2WV2mV1mlzlkDplD5pA5ZA6ZQ+aQOWQOmafMU+Yp85R5Srimqb8WTEEK6sCapgeawARdMAQukDllTplT5pK5ZC6ZS+aSuWQumUvmkrmOOV8vQROYoAuGwAUhmIIUyNxkbjI3mZvMTeYmc5N5TVxvC1JQB9bEPbDMtsAEXTAELgjBFKSgDqyJe0DmLnOXeU1c7wtcEIIpSEEd2D9u3NAEyzwWLI8vCMEUpKAOrEF7oAlM0AXjmNegPRCCKUhBHViD9kAT6BauQXtA5pA5ZA6ZQ+aQeco8ZZ4yT5mnzFPmKfOUeco8ZU6ZU+aUOWVOmVPmlDllTplT5pJ5D1os6IIhcEEIpiAF9UDtQdvQBCbogiFwwTLPBVOQgjqwB21DE5igC4bABTI3mZvMTWaT2WQ2mU1mk9lkNplNZpPZZO4yd5m7zF3mLnOXucvcZe4yd5mHzEPmIfOQeZxHQu2JywVTkII6sCduQxOYoAuGwAUyu8wus8scMofMIXPIHDKHzCFzyBwyh8xT5inzlHnKPGWeMk+Zp8xT5ilzypwyp8wp8564WuCCEExBCurAnrgNTWCCLpB5jd54LQjBFKSgHmivNXuHGmRQhwbkUEATSohGo9FoNBqNRqPRaDQajUaj0WgYDaNhNIyG0TAaRsNoGA2j0Wl0Gp3GGs7RNg3IoYAmlFCJ1oweapBBNPbv4GyTQwFNKKES7d/HPdQggzpEw2k4DafhNJxG0AgaQSNoBI2gETSCRtAIGpPGpDFpTBqTxqQxaUwak8akkTSSxhrr0Td1aEAOBTShhEq0xvtQg2gUjaJRNPaQj00TSqgOtT3nDzXIoA4NyKGAVsM3JVSiPecPNcigDg3IoYBoNBqNhtEwGkbDaBgNo2E0jIbRMBqdRqfRaXQanUan0Wl0Gp1GpzFoDBqDxqAxaOw5j00BTSihEu05f6hBBnVoQDSchtNwGnvO56I95w81yKAODcihgCaUEI0957mpQQZ1aEAOBTShhEqUNJJG0kgaSSNpJI2kkTSSRtEoGkWjaBSNolE0ikbRKDX2uS+HGmRQhwbkUEATWo3aVKI95w81yKAODcihda7Da9OEEirRmvNDDTKoQwNyiMaac2+bEirRmvNDDTKoQwNyKCAanUanMWgMGoPGoDFoDBqDxppzt00JlWjN+aEGGdShATkUEA2n4TSCRtAIGkEjaASNoBE0gkbQmDQmjUlj0tjn4/RNDgW0GmNTQiXa5+Y81CCDOjQghwKikTSSRtEoGkWjaBSNolE0ikbRKDX2OTyHGmRQhwbkUEATSohGo9FoNBqNRqPRaDQae859U0Il2nP+UIMM6tCAHAqIhtEwGp1Gp9FpdBqdRqfRaXQanUanMWgMGoPGoDFoDBqDxqAxaAwaTsNpOA2n4TT2nMemgCaUUIn2nD/UIINWY24akEMBTSihEu05f6hBBtHYc56bHApoQgmVaM/5Qw0yqEM0kkbSSBpJI2kUjaJRNIpG0SgaRaNoFI1SY59edKhBBnVoQA6tRm2aUEIl2nP+UIMM6tCAHKLRaDQajYbRMBpGw2gYDaNhNIyG0TAanUan0Wl0Gp1Gp9FpdBqdRqcxaAwag8agseY8XpscCmhCCZVozfmhBq1zPtumDg3IoYAmlFCJ1pwfahCNNedhmwbkUEATSqhEa84PNcggGpPGpDFpTBqTxqSRNJJG0kgaSSNpJI2kkTSSRtEoGkWjaBSNfSZu3xTQhBKqQ/sUpkMNMqhDA3IooAklRKPRaDQajUaj0Wg0Go1Go9FoNIyG0TAaRsNoGA2jYTSMhtHoNDqNTmPNeYxNA3IooAklVKI154caZBCNPee+yaGAJpRQifacP9QggzpEw2k4DafhNJxG0AgaQSNoBI2gETSCRtAIGpPGpDFpTBqTxqSx5zw2TSihEu05f6hBBnVoQA7RSBpJI2kUjaJRNIpG0SgaRaNoFI1SY58mdahBBnVoQA4FNKGEaDQajUaj0WjsOZ+bHApoQgmVaM/5Qw1ajdzUoQE5FNCEEirRnvOHGkRjz3ltGpBDAU0ooRLtOX+oQQbRGDQGjUFj0Bg0Bg2n4TSchtNwGk7DaTgNp+E0gkbQCBpBI2isOZ+vTQFNKKESrTk/1CCDOjQgGpPGpDFpTBpJI2kkjaSRNJJG0kgaSSNpFI2iUTSKRtEoGkWjaBSNUmOfrjXbpgYZ1KHVsE0OBTShhEq05vxQgwzqEI1Go9FoNBqNRsNoGA2jYTSMhtEwGkbDaBiNTqPT6DQ6jU6j01hzPvumCSVUojXnhxpkUIcG5BCNQWPQGDSchtNwGk7DaTgNp+E0nIbTCBpBI2gEjaARNIJG0AgaQWPSmDQmjUljz/nY5FBAE0qoRHvOH2rQavimDg3IoYAmlFCJ9pw/1CAae85j04AcCmhCCdWhfZLYoQYZ1KEBObQac9Nq5KbVqE3vRq7nkn26WO4PzO5P2NmmdyP7pncjx6Z3I33Tu5G7sT9rtxv703a7sT9vtxt7pvdX90w/1KEBOcRt3jP9UEIl2jP9UNN92zP9UIcG5FBAfF/2TD9Uoj3TD9EYNAaNQWPQGDQGjUFj0HAaTsNpOI090/t7umf6oYAmxP7dM71pz/RDDTKoQzSCRtAIGkEjaEwak8akMWlMGpPGpDFpTBqTRtJIGkkjaSSNpJE0kkbSSBrF/ij2R7E/iv1R7PNinxf7vNjna5JrTdk+C+1Qgwzq0IAcCmhCCdFoNBqNRmNNcj0fhB+QQwFNKKESrVfsQw0yiIbRMBpGw2gYDaPRaXQanUan0Wl0Gp3Gmu6yTQmVaE33oQYZ1KEBORQQjUFj0HAaTsNpOA2n4TSchtNwGk4jaASNoBE0gkbQCBpBI2gEjUlj0pg0Jo3J/pjsj8n+mOzzyT6f7PNknyf7PDVv+8S26pscCmhCCZVozfShBhnUIRpFo2gUjaJRp2H7PLdDDTKoQwNyKKAJJUSj0Wg0Go1Go9FoNBqNRqPRaDT2dI9NDTKoQwNyKKAJJVSiTqPT6DQ6jU6j0+g0Oo1Oo9MYNAaNQWPQGDQGjUFj0Bg0Bg2n4TSchtNwGk5jT7dvmlBCJdrT/VCDDOrQgByisac7NiVUoj3dDzXIoA4NyKGAaEwak0bSSBpJI2kkjaSRNJJG0kgaRaNoFI2iUTSKRtEoGkVjz/n7aNP2eW6HGmRQhwbkUEATSohGo9FoNBqNRqPRaDQajUaj0WgYDaNhNIyG0TAaRsNoGA2j0WnsOc9NBq1GbRqQQwG9G+9v+8Z83oDYPpVtvT2xfSrboQH585bF9qlshyaUUInWKB9qkEEdGhANp+E0nIbTCBpBI2gEjaARNIJG0Ai+G2uUH1qjfKhBBnVoQA4FNCEak0bSSBpJI2kkjaSRNJJG0kgaRaNo7E/zv9rGfnFc9ItxcV7MiyXcp7Ttwj6l7ZBBHRqQQwFNKCHdn31K2yEajUaj0bTv9ylthwKaUEJ6fO1T2g41qD9v8m2fyHbIoXje+Ns+ke1QQiXqL6hBBnVoQA7R6DQ6jU5j0Bg0Bo1BY9AYNAaNQWPQ2FNui/aUP9Qggzo0IIcCmlBCNIJG0AgaQSNoBI2gETSCRtCYNCaNSWPSeK6S86BfjIvzYl4s8LlizoOkklSSSu5OcneSu5PcneTuJHenuDtFo2gUjaJR7Ppi1xe7vtj1pYfXPp/tUIMM0tjts9jeL+Mb4+K8mBcL3NfxONgu2sV+cVy8tXZr7dbarbVbs1uzW7Nbs1uzW7Nbs1uzW7Nbs1vrt9Zvrd9av7V+a/3W+q31W+u31m9t3Nq+Cshr75Z9HZCD/eK46Bfj4ryYFwvc1wU5eGt+a35rfmt+a35rfmt+a35rcWtxa3FrcWtxa3FrcWtxa3FrcWvz1uatzVubtzZvbd7avLXnmcI35sVdW4fI59paD7aLdnHN8UMDWnM8NwU0oYRKtJ8rHmqQQR0aEI2iUTSKRqmxz4k71CCDOjQghwKaUEI0Go1Go9FoNBqNRqPRaDQajUbDaBgNo2E09qFBbnIooAklVKJ9aPBQgwzqEI1Oo9PoNDqNTmPQGDQGjUFj0Bg0Bo1BY9AYNJyG03AaTsNpOA2n4TSchtMIGkEjaASNfWhQmxwKaEIJlWgfGjzUIIM6RGPSmDQmjUlj0kgaSSNpJI2kkTSSxr6S12s/APe1vA4WuK/ndbBdtIv94rjoF+PirdWtFbXnGl8H20W72C+Oi34xLs6LefHW2q21W2u31m6t3Vq7tXZr7dbarbVbs1uzW7Nbs1sz7bR94tyhgCaUkB4Y+8S5Qw3aldzYL46LfjEuzot5scDnOOHBdvHWxq2NWxu3Nm5t3Nq4tXFrfmt+a35rfmt+a35rfmt+a35rfmtxa3FrcWtxa3FrcWtxa3Frz3HC3i3PccLG5zjhwXbRLvaL46JfjIvz4q3NW8tby1vLW8tby1vLW8tby1vLW8tbq1urW6tbq1urW6tbq1urW6tbK2rxel1sF+1iv7hq67Kits/AE8bFeTEvFrifQw62i3axX7y1/Ryyrihq+2Q84byYFwvczyEH20W72C+Oi7c27l8Y9y+MX/2FfXNs47yYFwvcA3mwXbSL/eKV7claFyu1ffaa/nT/3bFxXPSL+5b5xnkxL+5btp5A91lsJ7HH6eCu9X//+7tvuqL5H//xyw8/rAua/+oS57//17e/f//LDz//49vvfv7nTz999+3/ff/TP/df+u+/f//zXv/x/S/vr7535Q8//+W9voV//fGnHxb9+7u79es/b2rrWoJ74/fPRtjc/w/bT7b3r23f7ZPt12eEn+39o9sf9KO+1p+vT7ZPtq/20faD7e2L239y//t6RO/t3z99+GT7rv77BwNf6/f5yfbO9p4fbd/Yvr62fXx0/1PD/36H/MH246X++73sl/rvd8Cf9Nd1ZZ/tzb62ff9k/sbQ4+/9TvCT7UOPn/f7s6/1P9r/437/85Pvv7/0/P9+w/Gl/vtdyid91/1/H+h+sv3U4/d9DPrB9rF+drW3fx9NfbJ91/N3jNcXt//k8TfXuTZ7+1mf3P/1YdgjWJ98/eQWmPbg/OgVfA5N8PRPXkGi2P710R6Y7IGPJmjyCJyfff/u9vXJM0A2bZ+tvrb9R4/ADD2A8qMjoCxNYNYX+x8dwRRHEPXREUxxBFjji33/5PtXofmr+OT7V0X/o8ffr/r1yRHYuhyYnoFe/slryLp4kwztoxlo923IuvLLRwZeSNYVY75q6B89lxtPpes6LV+9DR89G69LsWDI/lXDh69pL74P71/GfvE2vH+H+9FtsGsY/asG968aZnxkKB3eras5fNXQProNozcMvX/1NvTx0W0YhSHmVw0fHSf8xvDZZA0OldpnR/u/MdhHk+W9Y/jsWe7Xt+GjnxmsD/fJMD8zxGSyYn70eIj7qI6Pjht+Y4iPnqOSN1/rs0IfGRqv3fnR++/fGMZHj8kyHlFlH+2LTL6Tnx1D/tpQH71erJOx9YO41+wfGTyuYXzVkPGRwRqG/tmj+hU8ql8f7U2P+wyT7auG+uiZNorjyfnZ8cNvDPVVw0c/G10fKMYQ8VXDR4/J3xrqq4b86BVn8hZ1ffL2q88P9uXnyc+OzO8b1fU5sS8b8quGj57lfmPI9tXnqI++k9b4ofn6tMVXDR+9W1yff8Dw0evmb27DZ+9Qil8erc/LXcP/flfw0+ffvlz87wX315cvi08E/XVvQX71Fvynu9DWvxz4H38AyK8AZ/1G8If3/3z/5x9/+c0/e/3vJfrlx+//9NMP53//+s+f//yrr/7j//9dX9E/m/33X/725x/+8s9fflim9bXn385+/+f3to5k37/6jD989+39i+/ft/cb3/cz5vv/2vNlm+8vd1t/0PYfvI/f3//xP/x73cD/AQ==",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { $crate::cmp::Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::cmp::Ord };\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> $crate::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == $crate::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = $crate::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0_u64, 1), 0);\n        assert_eq(min(0_u64, 0), 0);\n        assert_eq(min(1_u64, 1), 1);\n        assert_eq(min(255_u8, 0), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0_u64, 1), 1);\n        assert_eq(max(0_u64, 0), 0);\n        assert_eq(max(1_u64, 1), 1);\n        assert_eq(max(255_u8, 0), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub u32) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
