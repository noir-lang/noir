---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "struct",
            "path": "Foo",
            "fields": [
              {
                "name": "a",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "b",
                "type": {
                  "kind": "array",
                  "length": 3,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "bar",
                "type": {
                  "kind": "struct",
                  "path": "Bar",
                  "fields": [
                    {
                      "name": "inner",
                      "type": {
                        "kind": "array",
                        "length": 3,
                        "type": {
                          "kind": "field"
                        }
                      }
                    }
                  ]
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar {\n    inner: [Field; 3],\n}\n\nstruct Foo {\n    a: Field,\n    b: [Field; 3],\n    bar: Bar,\n}\n\nstruct FooParent {\n    array: [Field; 3],\n    foos: [Foo; 4],\n}\n\nfn main(mut x: [Foo; 4], y: pub Field) {\n    assert(x[y - 3].a == 1);\n    assert(x[y - 3].b == [2, 3, 20]);\n    assert(x[y - 2].a == 4);\n    assert(x[y - 2].b == [5, 6, 21]);\n    assert(x[y - 1].a == 7);\n    assert(x[y - 1].b == [8, 9, 22]);\n    assert(x[y].a == 10);\n    assert(x[y].b == [11, 12, 23]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n    // Check dynamic array set\n    if y != 2 {\n        x[y].a = 50;\n    } else {\n        x[y].a = 100;\n    }\n    assert(x[3].a == 50);\n\n    if y == 2 {\n        x[y - 1].b = [50, 51, 52];\n    } else {\n        x[y - 1].b = [100, 101, 102];\n    }\n    assert(x[2].b == [100, 101, 102]);\n\n    assert(x[y - 3].bar.inner == [100, 101, 102]);\n    assert(x[y - 2].bar.inner == [103, 104, 105]);\n    assert(x[y - 1].bar.inner == [106, 107, 108]);\n    assert(x[y].bar.inner == [109, 110, 111]);\n\n    let foo_parent_one = FooParent { array: [0, 1, 2], foos: x };\n    let foo_parent_two = FooParent { array: [3, 4, 5], foos: x };\n    let mut foo_parents = [foo_parent_one, foo_parent_two];\n\n    assert(foo_parents[y - 3].foos[y - 3].b == [2, 3, 20]);\n    assert(foo_parents[y - 3].foos[y - 2].b == [5, 6, 21]);\n    assert(foo_parents[y - 3].foos[y - 1].b == [100, 101, 102]);\n    assert(foo_parents[y - 3].foos[y].b == [11, 12, 23]);\n\n    assert(foo_parents[y - 3].foos[y].a == 50);\n\n    assert(foo_parents[1].foos[1].b == [5, 6, 21]);\n    if y == 2 {\n        foo_parents[y - 2].foos[y - 2].b = [10, 9, 8];\n    } else {\n        foo_parents[y - 2].foos[y - 2].b = [20, 19, 18];\n    }\n    assert(foo_parents[1].foos[1].b == [20, 19, 18]);\n\n    assert(foo_parents[1].foos[1].b[2] == 18);\n    if y == 3 {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 5000;\n    } else {\n        foo_parents[y - 2].foos[y - 2].b[y - 1] = 1000;\n    }\n    assert(foo_parents[1].foos[1].b[2] == 5000);\n    // Set a dynamic array value\n    foo_parents[y - 2].foos[y - 3].b = foo_parents[y - 2].foos[y - 2].b;\n    assert(foo_parents[1].foos[0].b == [20, 19, 5000]);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
