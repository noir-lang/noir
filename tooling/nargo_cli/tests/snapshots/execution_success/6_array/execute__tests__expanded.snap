---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::ops::{WrappingAdd, WrappingMul, WrappingSub};

fn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {
    let mut c: u32 = 2301;
    z = y[4];
    for i in 0..5 {
        c = (z * z) * y[i];
        z = z - c;
    }
    assert(z == 0);
    c = 2301 as u32;
    for i in 0..5 {
        c = t + (2 as u32);
        c = z.wrapping_mul(z).wrapping_mul(x[i]);
        z = z.wrapping_add((x[i] * y[i]).wrapping_sub(c));
    }
    assert(z == 3814912846);
    c = 2300001 as u32;
    z = y[4];
    for i in 0..5 {
        z = z + (x[i] * y[i]);
        for _i in 0..3 {
            c = (i as u32).wrapping_sub(2 as u32);
            z = z.wrapping_mul(c);
        }
    }
    assert(z == 41472);
    z = y[4];
    for i in 0..3 {
        z = z + (x[i] * y[i]);
        for j in 0..2 {
            z = z + (x[i + j] - y[i + j]);
        }
    }
    assert(z == 11539);
    let cc: [u32; 5] = if z < 1 { x } else { y };
    assert(cc[0] == y[0]);
    {
        let ___i0: [u32; 5] = y;
        for ___i1 in 0..___i0.len() {
            let y_elem: u32 = ___i0[___i1];
            {
                {
                    let ___i0: [u32; 5] = x;
                    for ___i1 in 0..___i0.len() {
                        let x_elem: u32 = ___i0[___i1];
                        {
                            assert(x_elem != y_elem);
                        }
                    }
                }
            }
        }
    };
    let mut tuple_array: [(Field, Field); 3] = [(1, 2), (3, 4), (5, 6)];
    tuple_array[1] = (7, 8);
    assert(tuple_array[1].1 == 8);
}
