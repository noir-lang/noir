---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 196",
    "private parameters indices : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "BLACKBOX::RANGE [(_11, 32)] []",
    "EXPR [ (1, _9, _9) (-1, _12) 0 ]",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "EXPR [ (1, _5, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "EXPR [ (1, _9) (-1, _13) (-1, _14) 0 ]",
    "BLACKBOX::RANGE [(_14, 32)] []",
    "EXPR [ (1, _14, _14) (-1, _15) 0 ]",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "EXPR [ (1, _6, _15) (-1, _16) 0 ]",
    "BLACKBOX::RANGE [(_16, 32)] []",
    "EXPR [ (1, _14) (-1, _16) (-1, _17) 0 ]",
    "BLACKBOX::RANGE [(_17, 32)] []",
    "EXPR [ (1, _17, _17) (-1, _18) 0 ]",
    "BLACKBOX::RANGE [(_18, 32)] []",
    "EXPR [ (1, _7, _18) (-1, _19) 0 ]",
    "BLACKBOX::RANGE [(_19, 32)] []",
    "EXPR [ (1, _17) (-1, _19) (-1, _20) 0 ]",
    "BLACKBOX::RANGE [(_20, 32)] []",
    "EXPR [ (1, _20, _20) (-1, _21) 0 ]",
    "BLACKBOX::RANGE [(_21, 32)] []",
    "EXPR [ (1, _8, _21) (-1, _22) 0 ]",
    "BLACKBOX::RANGE [(_22, 32)] []",
    "EXPR [ (1, _20) (-1, _22) (-1, _23) 0 ]",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (1, _23, _23) (-1, _24) 0 ]",
    "BLACKBOX::RANGE [(_24, 32)] []",
    "EXPR [ (1, _9, _24) (-1, _25) 0 ]",
    "BLACKBOX::RANGE [(_25, 32)] []",
    "EXPR [ (1, _23) (-1, _25) 0 ]",
    "EXPR [ (1, _0, _5) (-1, _27) 0 ]",
    "BLACKBOX::RANGE [(_27, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(28)), Simple(Witness(29))]",
    "BLACKBOX::RANGE [(_28, 222)] []",
    "BLACKBOX::RANGE [(_29, 32)] []",
    "EXPR [ (1, _27) (-4294967296, _28) (-1, _29) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _28) (-1, _30) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_30, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(28))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(31))]",
    "EXPR [ (-1, _28, _31) (5096253676302562286669017222071363378443840053029366383258766538131, _31) (1, _32) -1 ]",
    "EXPR [ (-1, _28, _32) (5096253676302562286669017222071363378443840053029366383258766538131, _32) 0 ]",
    "EXPR [ (-1, _29, _32) (4026531840, _32) (-1, _33) 0 ]",
    "BLACKBOX::RANGE [(_33, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(29), Witness(29))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(34)), Simple(Witness(35))]",
    "BLACKBOX::RANGE [(_34, 222)] []",
    "BLACKBOX::RANGE [(_35, 32)] []",
    "EXPR [ (1, _29, _29) (-4294967296, _34) (-1, _35) 0 ]",
    "EXPR [ (-1, _34) (-1, _36) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_36, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(34))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(37))]",
    "EXPR [ (-1, _34, _37) (5096253676302562286669017222071363378443840053029366383258766538131, _37) (1, _38) -1 ]",
    "EXPR [ (-1, _34, _38) (5096253676302562286669017222071363378443840053029366383258766538131, _38) 0 ]",
    "EXPR [ (-1, _35, _38) (4026531840, _38) (-1, _39) 0 ]",
    "BLACKBOX::RANGE [(_39, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(35), Witness(1))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(40)), Simple(Witness(41))]",
    "BLACKBOX::RANGE [(_40, 222)] []",
    "BLACKBOX::RANGE [(_41, 32)] []",
    "EXPR [ (1, _1, _35) (-4294967296, _40) (-1, _41) 0 ]",
    "EXPR [ (-1, _40) (-1, _42) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_42, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(40))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(43))]",
    "EXPR [ (-1, _40, _43) (5096253676302562286669017222071363378443840053029366383258766538131, _43) (1, _44) -1 ]",
    "EXPR [ (-1, _40, _44) (5096253676302562286669017222071363378443840053029366383258766538131, _44) 0 ]",
    "EXPR [ (-1, _41, _44) (4026531840, _44) (-1, _45) 0 ]",
    "BLACKBOX::RANGE [(_45, 33)] []",
    "EXPR [ (1, _1, _6) (-1, _46) 0 ]",
    "BLACKBOX::RANGE [(_46, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(41)), (1, Witness(46))], q_c: 340282366920938463463374607436063178752 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(47)), Simple(Witness(48))]",
    "BLACKBOX::RANGE [(_47, 223)] []",
    "BLACKBOX::RANGE [(_48, 32)] []",
    "EXPR [ (-1, _41) (1, _46) (-4294967296, _47) (-1, _48) 340282366920938463463374607436063178752 ]",
    "EXPR [ (-1, _47) (-1, _49) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_49, 223)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(47))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(50))]",
    "EXPR [ (-1, _47, _50) (5096253676302562286669017222071363378443840053029366383258766538131, _50) (1, _51) -1 ]",
    "EXPR [ (-1, _47, _51) (5096253676302562286669017222071363378443840053029366383258766538131, _51) 0 ]",
    "EXPR [ (-1, _48, _51) (4026531840, _51) (-1, _52) 0 ]",
    "BLACKBOX::RANGE [(_52, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29)), (1, Witness(48))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(53)), Simple(Witness(54))]",
    "BLACKBOX::RANGE [(_53, 222)] []",
    "BLACKBOX::RANGE [(_54, 32)] []",
    "EXPR [ (1, _29) (1, _48) (-4294967296, _53) (-1, _54) 0 ]",
    "EXPR [ (-1, _53) (-1, _55) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_55, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(53))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(56))]",
    "EXPR [ (-1, _53, _56) (5096253676302562286669017222071363378443840053029366383258766538131, _56) (1, _57) -1 ]",
    "EXPR [ (-1, _53, _57) (5096253676302562286669017222071363378443840053029366383258766538131, _57) 0 ]",
    "EXPR [ (-1, _54, _57) (4026531840, _57) (-1, _58) 0 ]",
    "BLACKBOX::RANGE [(_58, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(54), Witness(54))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(59)), Simple(Witness(60))]",
    "BLACKBOX::RANGE [(_59, 222)] []",
    "BLACKBOX::RANGE [(_60, 32)] []",
    "EXPR [ (1, _54, _54) (-4294967296, _59) (-1, _60) 0 ]",
    "EXPR [ (-1, _59) (-1, _61) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_61, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(59))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(62))]",
    "EXPR [ (-1, _59, _62) (5096253676302562286669017222071363378443840053029366383258766538131, _62) (1, _63) -1 ]",
    "EXPR [ (-1, _59, _63) (5096253676302562286669017222071363378443840053029366383258766538131, _63) 0 ]",
    "EXPR [ (-1, _60, _63) (4026531840, _63) (-1, _64) 0 ]",
    "BLACKBOX::RANGE [(_64, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(60), Witness(2))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(65)), Simple(Witness(66))]",
    "BLACKBOX::RANGE [(_65, 222)] []",
    "BLACKBOX::RANGE [(_66, 32)] []",
    "EXPR [ (1, _2, _60) (-4294967296, _65) (-1, _66) 0 ]",
    "EXPR [ (-1, _65) (-1, _67) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_67, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(65))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(68))]",
    "EXPR [ (-1, _65, _68) (5096253676302562286669017222071363378443840053029366383258766538131, _68) (1, _69) -1 ]",
    "EXPR [ (-1, _65, _69) (5096253676302562286669017222071363378443840053029366383258766538131, _69) 0 ]",
    "EXPR [ (-1, _66, _69) (4026531840, _69) (-1, _70) 0 ]",
    "BLACKBOX::RANGE [(_70, 33)] []",
    "EXPR [ (1, _2, _7) (-1, _71) 0 ]",
    "BLACKBOX::RANGE [(_71, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(66)), (1, Witness(71))], q_c: 340282366920938463463374607436063178752 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(72)), Simple(Witness(73))]",
    "BLACKBOX::RANGE [(_72, 223)] []",
    "BLACKBOX::RANGE [(_73, 32)] []",
    "EXPR [ (-1, _66) (1, _71) (-4294967296, _72) (-1, _73) 340282366920938463463374607436063178752 ]",
    "EXPR [ (-1, _72) (-1, _74) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_74, 223)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(72))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(75))]",
    "EXPR [ (-1, _72, _75) (5096253676302562286669017222071363378443840053029366383258766538131, _75) (1, _76) -1 ]",
    "EXPR [ (-1, _72, _76) (5096253676302562286669017222071363378443840053029366383258766538131, _76) 0 ]",
    "EXPR [ (-1, _73, _76) (4026531840, _76) (-1, _77) 0 ]",
    "BLACKBOX::RANGE [(_77, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(54)), (1, Witness(73))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(78)), Simple(Witness(79))]",
    "BLACKBOX::RANGE [(_78, 222)] []",
    "BLACKBOX::RANGE [(_79, 32)] []",
    "EXPR [ (1, _54) (1, _73) (-4294967296, _78) (-1, _79) 0 ]",
    "EXPR [ (-1, _78) (-1, _80) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_80, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(78))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(81))]",
    "EXPR [ (-1, _78, _81) (5096253676302562286669017222071363378443840053029366383258766538131, _81) (1, _82) -1 ]",
    "EXPR [ (-1, _78, _82) (5096253676302562286669017222071363378443840053029366383258766538131, _82) 0 ]",
    "EXPR [ (-1, _79, _82) (4026531840, _82) (-1, _83) 0 ]",
    "BLACKBOX::RANGE [(_83, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(79), Witness(79))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(84)), Simple(Witness(85))]",
    "BLACKBOX::RANGE [(_84, 222)] []",
    "BLACKBOX::RANGE [(_85, 32)] []",
    "EXPR [ (1, _79, _79) (-4294967296, _84) (-1, _85) 0 ]",
    "EXPR [ (-1, _84) (-1, _86) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_86, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(84))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(87))]",
    "EXPR [ (-1, _84, _87) (5096253676302562286669017222071363378443840053029366383258766538131, _87) (1, _88) -1 ]",
    "EXPR [ (-1, _84, _88) (5096253676302562286669017222071363378443840053029366383258766538131, _88) 0 ]",
    "EXPR [ (-1, _85, _88) (4026531840, _88) (-1, _89) 0 ]",
    "BLACKBOX::RANGE [(_89, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(85), Witness(3))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(90)), Simple(Witness(91))]",
    "BLACKBOX::RANGE [(_90, 222)] []",
    "BLACKBOX::RANGE [(_91, 32)] []",
    "EXPR [ (1, _3, _85) (-4294967296, _90) (-1, _91) 0 ]",
    "EXPR [ (-1, _90) (-1, _92) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_92, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(90))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(93))]",
    "EXPR [ (-1, _90, _93) (5096253676302562286669017222071363378443840053029366383258766538131, _93) (1, _94) -1 ]",
    "EXPR [ (-1, _90, _94) (5096253676302562286669017222071363378443840053029366383258766538131, _94) 0 ]",
    "EXPR [ (-1, _91, _94) (4026531840, _94) (-1, _95) 0 ]",
    "BLACKBOX::RANGE [(_95, 33)] []",
    "EXPR [ (1, _3, _8) (-1, _96) 0 ]",
    "BLACKBOX::RANGE [(_96, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(91)), (1, Witness(96))], q_c: 340282366920938463463374607436063178752 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(97)), Simple(Witness(98))]",
    "BLACKBOX::RANGE [(_97, 223)] []",
    "BLACKBOX::RANGE [(_98, 32)] []",
    "EXPR [ (-1, _91) (1, _96) (-4294967296, _97) (-1, _98) 340282366920938463463374607436063178752 ]",
    "EXPR [ (-1, _97) (-1, _99) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_99, 223)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(97))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(100))]",
    "EXPR [ (-1, _97, _100) (5096253676302562286669017222071363378443840053029366383258766538131, _100) (1, _101) -1 ]",
    "EXPR [ (-1, _97, _101) (5096253676302562286669017222071363378443840053029366383258766538131, _101) 0 ]",
    "EXPR [ (-1, _98, _101) (4026531840, _101) (-1, _102) 0 ]",
    "BLACKBOX::RANGE [(_102, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(79)), (1, Witness(98))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(103)), Simple(Witness(104))]",
    "BLACKBOX::RANGE [(_103, 222)] []",
    "BLACKBOX::RANGE [(_104, 32)] []",
    "EXPR [ (1, _79) (1, _98) (-4294967296, _103) (-1, _104) 0 ]",
    "EXPR [ (-1, _103) (-1, _105) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_105, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(103))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(106))]",
    "EXPR [ (-1, _103, _106) (5096253676302562286669017222071363378443840053029366383258766538131, _106) (1, _107) -1 ]",
    "EXPR [ (-1, _103, _107) (5096253676302562286669017222071363378443840053029366383258766538131, _107) 0 ]",
    "EXPR [ (-1, _104, _107) (4026531840, _107) (-1, _108) 0 ]",
    "BLACKBOX::RANGE [(_108, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(104), Witness(104))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(109)), Simple(Witness(110))]",
    "BLACKBOX::RANGE [(_109, 222)] []",
    "BLACKBOX::RANGE [(_110, 32)] []",
    "EXPR [ (1, _104, _104) (-4294967296, _109) (-1, _110) 0 ]",
    "EXPR [ (-1, _109) (-1, _111) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_111, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(109))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(112))]",
    "EXPR [ (-1, _109, _112) (5096253676302562286669017222071363378443840053029366383258766538131, _112) (1, _113) -1 ]",
    "EXPR [ (-1, _109, _113) (5096253676302562286669017222071363378443840053029366383258766538131, _113) 0 ]",
    "EXPR [ (-1, _110, _113) (4026531840, _113) (-1, _114) 0 ]",
    "BLACKBOX::RANGE [(_114, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(110), Witness(4))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(115)), Simple(Witness(116))]",
    "BLACKBOX::RANGE [(_115, 222)] []",
    "BLACKBOX::RANGE [(_116, 32)] []",
    "EXPR [ (1, _4, _110) (-4294967296, _115) (-1, _116) 0 ]",
    "EXPR [ (-1, _115) (-1, _117) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_117, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(115))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(118))]",
    "EXPR [ (-1, _115, _118) (5096253676302562286669017222071363378443840053029366383258766538131, _118) (1, _119) -1 ]",
    "EXPR [ (-1, _115, _119) (5096253676302562286669017222071363378443840053029366383258766538131, _119) 0 ]",
    "EXPR [ (-1, _116, _119) (4026531840, _119) (-1, _120) 0 ]",
    "BLACKBOX::RANGE [(_120, 33)] []",
    "EXPR [ (1, _4, _9) (-1, _121) 0 ]",
    "BLACKBOX::RANGE [(_121, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(116)), (1, Witness(121))], q_c: 340282366920938463463374607436063178752 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(122)), Simple(Witness(123))]",
    "BLACKBOX::RANGE [(_122, 223)] []",
    "BLACKBOX::RANGE [(_123, 32)] []",
    "EXPR [ (-1, _116) (1, _121) (-4294967296, _122) (-1, _123) 340282366920938463463374607436063178752 ]",
    "EXPR [ (-1, _122) (-1, _124) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_124, 223)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(122))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(125))]",
    "EXPR [ (-1, _122, _125) (5096253676302562286669017222071363378443840053029366383258766538131, _125) (1, _126) -1 ]",
    "EXPR [ (-1, _122, _126) (5096253676302562286669017222071363378443840053029366383258766538131, _126) 0 ]",
    "EXPR [ (-1, _123, _126) (4026531840, _126) (-1, _127) 0 ]",
    "BLACKBOX::RANGE [(_127, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(104)), (1, Witness(123))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(128)), Simple(Witness(129))]",
    "BLACKBOX::RANGE [(_128, 222)] []",
    "EXPR [ (1, _104) (1, _123) (-4294967296, _128) (-1, _129) 0 ]",
    "EXPR [ (-1, _128) (-1, _130) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_130, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(128))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(131))]",
    "EXPR [ (-1, _128, _131) (5096253676302562286669017222071363378443840053029366383258766538131, _131) (1, _132) -1 ]",
    "EXPR [ (-1, _128, _132) (5096253676302562286669017222071363378443840053029366383258766538131, _132) 0 ]",
    "EXPR [ (-1, _129, _132) (4026531840, _132) (-1, _133) 0 ]",
    "BLACKBOX::RANGE [(_133, 33)] []",
    "EXPR [ (1, _129) -3814912846 ]",
    "EXPR [ (1, _9) (1, _27) (-1, _134) 0 ]",
    "BLACKBOX::RANGE [(_134, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(96))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(135)), Simple(Witness(136))]",
    "BLACKBOX::RANGE [(_135, 222)] []",
    "BLACKBOX::RANGE [(_136, 32)] []",
    "EXPR [ (1, _96) (-4294967296, _135) (-1, _136) 0 ]",
    "EXPR [ (-1, _135) (-1, _137) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_137, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(135))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(138))]",
    "EXPR [ (-1, _135, _138) (5096253676302562286669017222071363378443840053029366383258766538131, _138) (1, _139) -1 ]",
    "EXPR [ (-1, _135, _139) (5096253676302562286669017222071363378443840053029366383258766538131, _139) 0 ]",
    "EXPR [ (-1, _136, _139) (4026531840, _139) (-1, _140) 0 ]",
    "BLACKBOX::RANGE [(_140, 33)] []",
    "EXPR [ (1, _121) (1, _136) (-1, _141) 0 ]",
    "BLACKBOX::RANGE [(_141, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(141))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(142)), Simple(Witness(143))]",
    "BLACKBOX::RANGE [(_142, 222)] []",
    "BLACKBOX::RANGE [(_143, 32)] []",
    "EXPR [ (2, _141) (-4294967296, _142) (-1, _143) 0 ]",
    "EXPR [ (-1, _142) (-1, _144) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_144, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(142))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(145))]",
    "EXPR [ (-1, _142, _145) (5096253676302562286669017222071363378443840053029366383258766538131, _145) (1, _146) -1 ]",
    "EXPR [ (-1, _142, _146) (5096253676302562286669017222071363378443840053029366383258766538131, _146) 0 ]",
    "EXPR [ (-1, _143, _146) (4026531840, _146) (-1, _147) 0 ]",
    "BLACKBOX::RANGE [(_147, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(143))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(148)), Simple(Witness(149))]",
    "BLACKBOX::RANGE [(_148, 222)] []",
    "BLACKBOX::RANGE [(_149, 32)] []",
    "EXPR [ (2, _143) (-4294967296, _148) (-1, _149) 0 ]",
    "EXPR [ (-1, _148) (-1, _150) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_150, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(148))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(151))]",
    "EXPR [ (-1, _148, _151) (5096253676302562286669017222071363378443840053029366383258766538131, _151) (1, _152) -1 ]",
    "EXPR [ (-1, _148, _152) (5096253676302562286669017222071363378443840053029366383258766538131, _152) 0 ]",
    "EXPR [ (-1, _149, _152) (4026531840, _152) (-1, _153) 0 ]",
    "BLACKBOX::RANGE [(_153, 33)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(149))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(154)), Simple(Witness(155))]",
    "BLACKBOX::RANGE [(_154, 222)] []",
    "EXPR [ (2, _149) (-4294967296, _154) (-1, _155) 0 ]",
    "EXPR [ (-1, _154) (-1, _156) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_156, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(154))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(157))]",
    "EXPR [ (-1, _154, _157) (5096253676302562286669017222071363378443840053029366383258766538131, _157) (1, _158) -1 ]",
    "EXPR [ (-1, _154, _158) (5096253676302562286669017222071363378443840053029366383258766538131, _158) 0 ]",
    "EXPR [ (-1, _155, _158) (4026531840, _158) (-1, _159) 0 ]",
    "BLACKBOX::RANGE [(_159, 33)] []",
    "EXPR [ (1, _155) -41472 ]",
    "EXPR [ (1, _0) (-1, _5) (-1, _160) 0 ]",
    "BLACKBOX::RANGE [(_160, 32)] []",
    "EXPR [ (1, _134) (1, _160) (-1, _161) 0 ]",
    "BLACKBOX::RANGE [(_161, 32)] []",
    "EXPR [ (1, _1) (-1, _6) (-1, _162) 0 ]",
    "BLACKBOX::RANGE [(_162, 32)] []",
    "EXPR [ (1, _161) (1, _162) (-1, _163) 0 ]",
    "BLACKBOX::RANGE [(_163, 32)] []",
    "EXPR [ (1, _46) (1, _163) (-1, _164) 0 ]",
    "BLACKBOX::RANGE [(_164, 32)] []",
    "EXPR [ (1, _162) (1, _164) (-1, _165) 0 ]",
    "BLACKBOX::RANGE [(_165, 32)] []",
    "EXPR [ (1, _2) (-1, _7) (-1, _166) 0 ]",
    "BLACKBOX::RANGE [(_166, 32)] []",
    "EXPR [ (1, _165) (1, _166) (-1, _167) 0 ]",
    "BLACKBOX::RANGE [(_167, 32)] []",
    "EXPR [ (1, _71) (1, _167) (-1, _168) 0 ]",
    "BLACKBOX::RANGE [(_168, 32)] []",
    "EXPR [ (1, _166) (1, _168) (-1, _169) 0 ]",
    "BLACKBOX::RANGE [(_169, 32)] []",
    "EXPR [ (1, _3) (-1, _8) (-1, _170) 0 ]",
    "BLACKBOX::RANGE [(_170, 32)] []",
    "EXPR [ (1, _169) (1, _170) -11539 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(172))]",
    "EXPR [ (1, _0, _172) (-1, _5, _172) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(173))]",
    "EXPR [ (1, _1, _173) (-1, _5, _173) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(174))]",
    "EXPR [ (1, _2, _174) (-1, _5, _174) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(175))]",
    "EXPR [ (1, _3, _175) (-1, _5, _175) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(176))]",
    "EXPR [ (1, _4, _176) (-1, _5, _176) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(177))]",
    "EXPR [ (1, _0, _177) (-1, _6, _177) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(178))]",
    "EXPR [ (1, _1, _178) (-1, _6, _178) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(179))]",
    "EXPR [ (1, _2, _179) (-1, _6, _179) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(180))]",
    "EXPR [ (1, _3, _180) (-1, _6, _180) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(181))]",
    "EXPR [ (1, _4, _181) (-1, _6, _181) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(182))]",
    "EXPR [ (1, _0, _182) (-1, _7, _182) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(183))]",
    "EXPR [ (1, _1, _183) (-1, _7, _183) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(184))]",
    "EXPR [ (1, _2, _184) (-1, _7, _184) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(185))]",
    "EXPR [ (1, _3, _185) (-1, _7, _185) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(186))]",
    "EXPR [ (1, _4, _186) (-1, _7, _186) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(187))]",
    "EXPR [ (1, _0, _187) (-1, _8, _187) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(188))]",
    "EXPR [ (1, _1, _188) (-1, _8, _188) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(189))]",
    "EXPR [ (1, _2, _189) (-1, _8, _189) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(190))]",
    "EXPR [ (1, _3, _190) (-1, _8, _190) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(191))]",
    "EXPR [ (1, _4, _191) (-1, _8, _191) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(192))]",
    "EXPR [ (1, _0, _192) (-1, _9, _192) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(193))]",
    "EXPR [ (1, _1, _193) (-1, _9, _193) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(194))]",
    "EXPR [ (1, _2, _194) (-1, _9, _194) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(195))]",
    "EXPR [ (1, _3, _195) (-1, _9, _195) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(196))]",
    "EXPR [ (1, _4, _196) (-1, _9, _196) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "1Z3dTiNJDIXfJddclO1yuWpeZbUaBQijSFGC+FlphebdN4NoBpFOR/aOJc5dQvp4TiWn2+n6MPOyut1cP//4vt3fHR5X3/56We0ON+un7WF/fPayIn792eP9ev/r6ePT+uFp9Y1pXK02+9vjI64/r1Z3291m9U3Lz7+vViRuRb2gEPqsULeizSoqTYpqnxXmVnT3yodXwcW7cia3gr0rZ3Erqnvl6lY098rNrejulQ+vQop35UJuBXtXLuJWVPfK1a1o7pWbW9HdKx9eRZ3/zFubFMafFbOfeW39TVFtfFawWyHzCpsUQz4qrk4Otab17Vhrvb0fLOO1fM0tr7nlW255yy3fc8uP1PJacstTbnnOLZ971ur8WVt4Kk9tufygUt6OHcT6sfzpwVSqTBfB42Oj5cOFbWoWx4e/axO/Wldc6w3XuuFa77jWB6z1VnCtE651xrUuuNZxu2m71E2Fv6z1hmvdcK13XOsD1roVXOuEa51xrQuu9YprHbebWvNuLJq5Fbn7VZa7X9Vz96t67n5Vz92v6rn7Vb3mls/dZe65u8w9d5e55561ff6s1fdrZrtw89R+s6XGrV26ZhYd79fMMur/uWaOgmudcK0zrnXBtV5xrSuu9YZr3XCtd1zruN30WAB2G5UKLjOgggsNqOBSg2MBYO+4FJ4KLoangsvhqeCCeCq4JJ4IuK8SLj0gwsUHRLj8gKgCe8clCES4QJ4Il8gT4SJ5IlwmT4wL5YmB+yq7ZyCIxS+pqdiDWJPrt+T6lly/J9fPpcUkJbk+Jdfn5PqSXD/5/BVcqkCCixVIcLkCCS5YIAEmCxUX1FPFJfVUcVE9VVxWT2eGcjG8A/fVCkwWKjBZqMBkoQKTBQUmCwpM7BWY2CswsQcemyfguXkCHpwnBSYLCkwWFJgsNGCy0IDJQgMm9g2Y2F8coP/K3oGJPfAIPQHP0NOZIfolHHlmeH1JYskEypIJlCUTKEsmUGcGmf9c/WSCbMkE2ZIJcvK4MSXPG1PywDF1YLLQgclCByYLZwaxMbwDk4UOTOw7MLHvwMQeeLKegEfrCXi2ngYwWRjAZGFUYO/AZGEAk4UBTOwHMLEfuMSegWfsGXjGnoFn7LngkgUuFdg7LlnggksWuOCSBS64xJ4LLrFnwiX2DDxjz8Az9gw8Y89nZuwXcCSfGW1flOQSKCZLrt+T6+cSKOaSXJ+S63NyfUmuX5Pra3L95POXcckCMy5ZYMYlCyy4ZIEFlyyw4BJ7Flxiz2fm4DG84xJ7Bp6x5/kZe6Xp/kFP/0/l+dH2RtO3+yZyIhluyfwgt/H0hcIqfdlbpvlBbhDvDOxdgL1XYO8K7L0Bezdg7x3Y+8D1rsB9dX6Qe/FrxPz89LIEuIsocBdR4C6iwF1EgbuIAncRBe4iDbiLNOC7swZ8d9aA+2oD7qsNuK824L7agPtqA+6rDbivGnBfNeC+asB91YD7qgH3VQPuqwbcVw24rxpwXzXgvtqB+2oH7qsduK924L7agfvq/B9vMJPJez/Zsp//mwmjTP/M4HIiMb9k9uLdR1uQDLdkfh5+0dj8GPqyhP3GxC+ZjWGv02/GdO0nEvVLmt+Y+SXd/yYPr0TmpzaXjMn8sOSyhL1vssyPBi5Lqt+Y+iXN/yabXzL/6dfpN7GGjhPJ7KdPVKcLK5G2z6L56aJLIoqIOCKSiKhGRBoRtYjIIqIeEUUSwZFEcCQRHEkERxLBkURwJBEcSQRHEsGRRHAkERJJhEQSIZFESCQREkmERBIhkURIJBESSYREElEjiaiRRNRIImokETWSiBpJRI0kokYSUSOJqJFEaCQRGkmERhKhkURoJBEaSYRGEqGRRKg7Eccn1w/b3W774/vucLN+2h72j0fp8cf/rB+26+vd5u3p3fP+5sOrT//eT69M+vuHw83m9vlh86vS62vH8v8B",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "use std::ops::{WrappingAdd, WrappingMul, WrappingSub};\n\n//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = z.wrapping_mul(z).wrapping_mul(x[i]);\n        z = z.wrapping_add((x[i] * y[i]).wrapping_sub(c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = (i as u32).wrapping_sub(2 as u32);\n            z = z.wrapping_mul(c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
