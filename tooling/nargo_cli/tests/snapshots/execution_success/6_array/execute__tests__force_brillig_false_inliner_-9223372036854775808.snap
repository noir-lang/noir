---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9Wd/bdXUx7H37fnW4q4SYvyTRGp8T333rr3NiJSiKZoRCOaHu4lRYoURSOiaERTNEQjmqIhGqIRjchDIZbHSHnIYz/NHzBrsbM3555Op1Xn/d7rnL1Wa9/O7vu5+/3e733Oq3NOtxL80nb9/GtVyS9fm66h7U0rRI6VxBxrEHOsYcyxRjHHGsccaxJzrGnMsWYxx0pjjjWPOdbCHkNIax/bF9O1oNTOI1q3otizsrK2qrw2qAhGFstrRlX3KFb2GNWzOqgOelT3GFNeXVFRW11ZXVUzqqaqWBNUVtQGdT1qKups4YN4cyyGvThI6EVjW5/tRUuRFy1DXrjWUJAPhQ9pa7USedpKmK9Wtj47XweLvDhY6EUTW5/txSEiLw6Bfq+1EvmQtlZrkaethflqbeuz83WoyItDhV40tfXZXhwm8uIw6Pdaa5EPaWuViTwtE+arzNZn56uNyIs2Qi+a2fpsLw4XeXE49HutTORD2lptRZ62Fearra3PztcRIi+OEHpRauuzvWgn8qId9txrDQT5yKIPSs0tiJqP5M2rPLz2Rwr3ganRWLAPjoJmHxxlvWgUyUO4sT3aDy3BPsaLMdNNO89fv2fYi/a27+AMcQaage2RYx2gv5CHTTzAcJXbcAXtwQtqB9HiRk9UaefJ1Hx0jOYDrRnO0dE2W43w2030aGOfaNqTtbhWUE64gL1fyQ60fgG8zdqRqFflYUfs/Ux/oPU7gkstbFrpYHUz17kjc551u1stMz/HQEMSx2DvJMEmCLNuHUL1WXoQ01LWjqWJTrbv7MxxJpqBKE10hg5XnZGkq+uvRNEJvMB2hmaB2UTB1HwsNERxLPwTRSdoiOI45YSPA58ojgNv43ZBtonCeNgFfKLogmwTRWerm7nOXcAnCmZ+joeGKEzdAvwQRWfUPxmy9CCmpawdSxQn2L6rM8eZaAaiRNEVOqJwxMImihPAC2xX5IMomJpPhIYoToR/ojgBGqLoppxwN/CJoht4G7c7sk0UxsPu4BNFd2SbKLpa3cx17g4+UTDz8ztoiMLULSB+jxfTtd0XviaC3J8k8uIk7PvJD/uCRrzwBvvhS7Cv4zHSJZTmvlHgAugWwwzsiBwLsOdTpEY5WZC0tFckagxEQWFvDqbmcmhor9zm1CftFclaXKtQTrgCfNqrAG+zVhL1qjysBJ/2KnkeSmgvsLqZ61wJPu0x89MDGsIxdQvYP8IppmtBB3CzQKrljXB62r4KqE8zZiB6H6oK+yacYromW5C0hNMTvA1UBU1Q2ITD1FwNDeFUw//9rJ5kLa7VKCdcAz7h1IC3WXsh24RjPOwFPuH0QrYJp8rqZq5zL/AJh5mf30NDOKZuAX6ekJl1qwrVZ+lBTEtZO5ZMTrZ9b2eOM9EMRMmkN3Q3Cp2R7CdkJ4MX2N7IB1EwNZ8CDVGcAv9EcTI0RHGqcsKngk8Up4K3cfsg20ThFp1NFH2ATBOFO1mx15lNFMz8nEZck/DJytQtwA9R9I7UZ+lBTEtZO5YoTrd9X2eOM9EMRImiL3REYSYVNtPVTUsUp4MX2L7QLDCbKJiaz4CGKM6Af6I4nazFtX7KCfcDnyj6gbdx+xP1qjzsDz5R9Af3ZMAmir5WN3Od+4NPFMz8nAkNUZi6BcTv8WK6tvvC11SQ+7NEXpwF/+/cEC+8wX74kpl3bs62/QAXQLcYZiD6zs0A6N+5US1IWto7m6hxgCgo7M3B1HwONLR3Dvy/c3M2WYtr5yonfC74tHcueJt1IFGvysOB4NPeQJ6HEtobYHUz13kg+LTHzM8foCEcU7cAv+/cEF9/CAaAm9VoS1k7lnAG2X4wUJ9mzED0PtRg6N+5US1IWsIZBN4GGgxNUNiEw9R8HjSEcx78388aRNbi2vnKCZ8PPuGcD95mHYJsE47xcAj4hDME2SacwVY3c52HgE84zPz8ERrCMXUL8POEzKzb4FB9lh7EtJS1Y8nkAtsPdeY4E81AlEyGQnej0BnJfkJ2AXiBHYp8EAVT84XQEMWF8E8UF0BDFBcpJ3wR+ERxEXgbdxiyTRTGw2HgE8UwZJsohlrdzHUeBj5RMPPzJ2iIwtQtwA9RDMVvP4qWWNcbUVxs++HOHGeiGYgSxXDoiMJ8j6HgE8XF4AV2OPJBFEzNl0BDFJfAP1FcDA1RXKqc8KXgE8Wl4G3cEcg2URgPR4BPFCOQbaIYbnUz13kE+ETBzM+foSEKU7dg6youfM0EuR8p8mIk/L9zQ7zwBvvhS2beuRll+9EugG4xzED0nZvR0L9zo1qQtLQ3iqhxtCgo7M3B1DwGGtobA//v3Iwia3GtVjnhWvBprxa8zVpH1KvysA582qvjeSihvdFWN3Od68CnPWZ+LoOGcEzdAvy+c0N8/SEYDW5Woy1l7VjCudz2Y4H6NGMGovehxkL/zo1qQdISzuXgbaCx0ASFTThMzVdAQzhXwP/9rMvJWlwbp5zwOPAJZxx4m3U8sk04xsPx4BPOeGSbcMZa3cx1Hg8+4TDzcyU0hGPqFuDnCZlZt7Gh+iw9iGkpa8eSyVW2n+DMcSaagSiZTIDuRqEzkv2E7CrwAjsB+SAKpuaroSGKq+GfKK6ChigmKic8EXyimAjexp2EbBOF8XAS+EQxCdkmiglWN3OdJ4FPFMz8XAMNUZi6Bfghigmh70Os640orrX9ZGeOM9EMRIliMnREYUycAD5RXAteYCcjH0TB1HwdNERxHfwTxbXQEMUU5YSngE8UU8DbuFORbaIwHk4FnyimIttEMdnqZq7zVPCJgpmf66EhClO3gPg9XkzXdl/4SgW5v0HkxQ3w/84N8cIb7IcvmXnnZprtp7sAusUwA9F3bqZD/86NakHS0t40osbpoqCwNwdT843Q0N6N8P/OzTSyFtduUk74JvBp7ybwNusMol6VhzPAp70ZPA8ltDfd6mau8wzwaY+Zn79AQzimbgF+37khvv4QTAc3q9GWsnYs4dxs+5lAfZoxA9sjE2C/X6MyPy3N3AzeZpkJTSjYNMPUfAs0NHML/N+7upmsxbVblRO+FXyauRW8zToL2aYZ4+Es8GlmFrJNMzOtbuY6zwKfZpj5uQ0amjF1C6jf2PewZhJ8KI6uGVMcPaoiPM+G5HmWEmsdRVz726FZ+9uxb5JlZaHO7gmmlpjpSuhztu3nOEOcgWYg+hR0DvbcUKygxpmYliJngxfUOdAsLpsimZrvgIYi74B/ipxN1uLancoJ3wk+Rd4J3pVgLlGvysO54FPkXHBPBmyKnGN1M9d5LvgUyczPX6EhCVO3AL8kobrYgDPPWJK4y/bznCHOQDMQJYl50JNE2MS0JHEXeEGdh3yQBFPz3dCQxN3wTxJ3QUMS9ygnfA/4JHEPeFeY+cg2SRgP54NPEvORbZKYZ3Uz13k++CTBzM/foCEJU7cAvyShutiAM89Yklhg+4XOEGegGYiSxELoSSJsYlqSWABeUBciHyTB1HwvNCRxL/yTxAJoSOI+5YTvA58k7gPvCrMI2SYJ4+Ei8EliEbJNEgutbuY6LwKfJJj5+Ts0JGHqFlC/sZ8YnURee5an94s8vR/e6ayOqSVmuhI6e8D2i50hzkAzEKWzxZDTWT0T09LZA+AFdTE0i8umM6bmB6Ghswfhn84eIGtx7SHlhB8Cn84eAu9KsISoV+XhEvDpbAm4JwM2nS22upnrvAR8OmPm5x/QkISpW4BfklBdbMCZZyxJPGz7pc4QZ6AZiJLEUuhJImxiWpJ4GLygLkU+SIKp+RFoSOIR+CeJh6EhiUeVE34UfJJ4FLwrzDJkmySMh8vAJ4llyDZJLLW6meu8DHySYObnn9CQhKlbgF+SUF1swJlnLEkst/0KZ4gz0AxESWIF9CQRNjEtSSwHL6grkA+SYGp+DBqSeAz+SWI5NCTxuHLCj4NPEo+Dd4VZiWyThPFwJfgksRLZJokVVjdznVeCTxLM/PwLGpIwdQuo39hPjM4irz3L0ydEnj4Bf3Rm2/78v1n7bDHTldDZk7Zf5QxxBpqBKJ2tgj6oYRPT0tmT4AV1FTSLy6YzpuanoKGzp+Cfzp4ka3HtaeWEnwafzp4Gb7OuJupVebgafDpbDe7JgE1nq6xu5jqvBp/OmPn5NzQkYeoWUL+xL3rEn4oYrCJ6+ozI02fgnc7KmVpipiuhs2dtv8YZ4gw0A1E6WwN5UOuZmJbOngUvqGugWVw2nTE1PwcNnT0H/3T2LFmLa88rJ/w8+HT2PHhXgrVEvSoP14JPZ2vBPRmw6WyN1c1c57Xg0xkzP/+BhiRM3QL8koTqYgPOPGNJ4gXbr3OGOAPNQJQk1kFPEmET05LEC+AFdR3yQRJMzS9CQxIvwj9JvAANSbyknPBL4JPES+BdYdYj2yRhPFwPPkmsR7ZJYp3VzVzn9eCTBDM//4WGJEzdAvyShOpiA848Y0niZdtvcIY4A81A9Gcis6khbFhaangZvFBuQD6ogan5FWio4RX4p4aXoaGGV5UTfhV8angVvKvJRmSbGoyHG8Gnho3INjVssLqZ67wRfGpg5uc1aKjB1C2gfmO/V7KB4EPtz4b2qC0G4Xmyn2KBuF6NibVeh2btX4f+ySDx5xYHrxM9fUPk6RsePC0h+tCEWOtNkadvevCUmIfgTaKnm0SebvLgKfOnfGwierpZ5OlmD54S91iwmejpWyJP3/LgaQOiD02Jtd4Wefq2B0+JeQjeJnr6jsjTdzx4ynwH/h2ip1tEnm7x4ClxjwVbiJ6+K/L0XQ+eNiT60IxY6z2Rp+/FeMq+50HMQ/AewVPz9/Ex5bW1STc52R6AmIXG4GbBtfeV4t8nG/B+aOKsuj4DwfyLsCoQHyjFf0A24APkOxBMklcF4kOl+A/JBnyIfAeCiSKqQHykFP8R2YCPkO9ANMpBID5Wiv+YbMDHyHcgmPNuAk0gPlGK/4RswCfIdyBUT1eKKVtY+1al+K1kA7Yi34FgQqUqEJ8qxX9KNuBT5DsQTKhUBeIzpfjPyAZ8hnwHggmVqkBsU4rfRjZgG/IdCOa8m0ITiM+V4j8nG/A58h0IJlSqArFdKX472YDtOQ+E6p2DYsoW1r5DKX4H2YAdyHcgmFCpCsQXSvFfkA34AvkOBBMqVYH4Uin+S7IBXyLfgWDOuxk0gfhKKf4rsgFfId+BYEKlKhBfK8V/TTbga+Q7EEyoVAVip1L8TrIBO5HvQKjexCumbGHt3yjFf0M24BvkOxBMqFQF4lul+G/JBnyLfAeCOe9SaALxnVL8d2QDvkO+A8GESlUgvleK/55swPfIdyCYUKkKxA9K8T+QDfgB+Q4EEypVgfhRKf5HsgE/It+BYEKlKhC7lOJ3kQ3YBX4gjBnuR4MdFKpfYj1paMfNO53mEby5Y2oA18yn+c+/WmDP1in0dUvbb16w5bUVs0eOCf+5gxPGWtu+7/+3nfnU/NuOD48dlvC5NgljbRNqtkv43JEJY+0Tah6d8LmOCWOdEmoem/C5LgljXW3fZudp7SZuWt4vPNYt4XODEsZuTBhbmTC2NWHsfwnzLCvZ+1hVwtgZCWOX2bE4r8cmfG5cwueuTPjchISxiQlj1yR8v8kJn5uSMHZ9wti0vXw/d55sZvtS2ze3vfsHkH3s74vpWrmr30JTf/cToGhrHvo6en5z+hvFfK5kL79vEOmT/mxJQt2WMWOupjsnhufrdJRG+jahukQvA1e/TFM/dq3ahL4ui+gM+92HNAdXz/3j6MbYszWIjLk/G90zJfz5BdG5NIz5Xq65zJSFjjk/fwKK0gOwm04BAA==",
  "debug_symbols": "vZndbts4EEbfxde54Mzwb/oqi0WRpm4RwEgCN1lgUfTdVxTnJG4Bu1ml7dV3EonH1JAjyfDX3cf9h6fP72/vPt1/2b376+vuw/H2cLj9/P5wf3P9eHt/t/z367erHX++fzzu98u/difHl1EP18f93ePu3d3T4XC1++f68LSe9OXh+m7Nx+vjcjRd7fZ3H5dchJ9uD/tB365eRqfzQ6W2GCxNnoeXV49X8RivmreMVz5f7Y2fv218FsbntmV8rYxvumG8NcZb7xvGZ7MYn23L/HPtjG++aTzrl93OjZcLglZLDkOrJ1Mw/14hF/Zw0pddnE7X4UeJXlgIbeyEBcuzQnTjPEzq2Xm8th79rOLSkiRlSU6m8OOS1PMCl8QdxUXL2atol0qRiz2XIre0UWL1RCJnJf7mdX1dPe1si6u8uZ6qF0tRT+pZ+1mJvbkUP5nH69b1J5LXravWP9mvuqnZyvPmqGebTS/sz/ryBKpaz07BLj3DU2ov9Uwn9+H/Jyl+IslnJfo7m60IV1I2Pc+r8DyrZhvGt+f3kZbPfr69/eZpr795lrPNbv3NS2G/4iZuv+ImnuV37qvWuJLWt+wLT0zANW0Y372+bXzmPtPLlvdEzzS3ly3vee58vvuW98zxXvayC7ZUQCTTWCLl+3vt38tf1ze3x+++Xe1El1vv1U5sRl722BJlRl1GLtFm9HmKr6FpPUVlhq6nqM3I85Qyo85T2ow+T/E1LK2nmMzQ9RSzGXmeUmbUeUqb0ecpvkZeLMvOyYtlqV/WGYtlWc6cZywWWTS5RrbIHukzS4qUSI20yBwZvjKmtZS8tMge6TNripRIjbTIHFkiw1eHb7mK2iN9ZkuREqmRFpkjS2SNDF/razmar9HjantcbY+r7XG1Pa62x9X2qF6P6vWoXo/qefh88Y3vXK6RFpkjS2SNbJE90mcujwlAgCjg8i4CZKAAFWhAB2JdRBIgAGaJWopkoAAVaEAHYoVEEyCAAph17koZLbJmFFa0AR2I2oolQAAFDMhAATBb1FisA1Q5U+VMlbMCBmSgABXAnKlypsqFKheqXKhyYf0K61dYP5pK6CqhraRQ5UqVK1WuVLlS5cr6Vdavsn70l9BgQofJaLGxJqPF1qTKjSo3qtyocqPKjfVrrF9j/Wg2oduEdpNOlTtV7lS5U+VOlTvr11k/Z/3oO6HxhM4Tp8pOlZ0qO1V2quyxfpoSIIACBmQgqqypAg3oQFRZJQECKGBABjCP/vORLTKqrBJVVk2AAAoYkIECVKABmDWqrJYAARQwIAMFqEADOjDM45G49t/63BRgPAnHs3P034QMFKACDeiAB4z+myAA5oK5YC6YC+aCuWAumCvmirlirpgr5oq5Yq6YK+aKuWFumBvmhrlhHh24Vmx04ATMDXPD3DF3zB1zx9wxd+bcmXPH3DF3zI7ZMTtmx+yYHbNjdsyO2cNsKQECKGBABgpQgQZ0ALPErjMRALNgFsyCWTALZsEsmJU5K3NWzKMH188aPTgBs2JWzIpZMRtmw2yYjTkbczbMhtkwG2bDnDFnzPSg0YNGDxo9aPSg0YNGDxo9aPSg0YNGDxo9aPSg0YNGD9ragzZgmMdL79qDA9YeXN+NBVAOGZA5VIBhrgMa0DnkAWsPjuFrD66gHDIgx/DRgxMqhxrAnBtzXnuwDZDxtWSAAgZkoAAVaEAHPGD04ATMjtkxO2bH7Jgds2P2MOeUAAEUMCADBahAAzqAWTALZsEsmAWzYBbMglkwC2bFrJgVs2JWzIpZMStmxayYbTV/G19Cj7fXHw77L/NXuk9PdzcnP9o9/vvAEX7Wezje3+w/Ph334yvoemz5Uvof",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "use std::ops::{WrappingAdd, WrappingMul, WrappingSub};\n\n//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = z.wrapping_mul(z).wrapping_mul(x[i]);\n        z = z.wrapping_add((x[i] * y[i]).wrapping_sub(c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = (i as u32).wrapping_sub(2 as u32);\n            z = z.wrapping_mul(c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
