---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _235",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "BLACKBOX::RANGE [(_11, 32)] []",
    "EXPR [ (1, _9, _9) (-1, _12) 0 ]",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "EXPR [ (1, _5, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "EXPR [ (1, _9) (-1, _13) (-1, _14) 0 ]",
    "BLACKBOX::RANGE [(_14, 32)] []",
    "EXPR [ (1, _14, _14) (-1, _15) 0 ]",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "EXPR [ (1, _6, _15) (-1, _16) 0 ]",
    "BLACKBOX::RANGE [(_16, 32)] []",
    "EXPR [ (1, _14) (-1, _16) (-1, _17) 0 ]",
    "BLACKBOX::RANGE [(_17, 32)] []",
    "EXPR [ (1, _17, _17) (-1, _18) 0 ]",
    "BLACKBOX::RANGE [(_18, 32)] []",
    "EXPR [ (1, _7, _18) (-1, _19) 0 ]",
    "BLACKBOX::RANGE [(_19, 32)] []",
    "EXPR [ (1, _17) (-1, _19) (-1, _20) 0 ]",
    "BLACKBOX::RANGE [(_20, 32)] []",
    "EXPR [ (1, _20, _20) (-1, _21) 0 ]",
    "BLACKBOX::RANGE [(_21, 32)] []",
    "EXPR [ (1, _8, _21) (-1, _22) 0 ]",
    "BLACKBOX::RANGE [(_22, 32)] []",
    "EXPR [ (1, _20) (-1, _22) (-1, _23) 0 ]",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (1, _23, _23) (-1, _24) 0 ]",
    "BLACKBOX::RANGE [(_24, 32)] []",
    "EXPR [ (1, _9, _24) (-1, _25) 0 ]",
    "BLACKBOX::RANGE [(_25, 32)] []",
    "EXPR [ (1, _23) (-1, _25) 0 ]",
    "EXPR [ (1, _11) (-1, _27) 2 ]",
    "BLACKBOX::RANGE [(_27, 32)] []",
    "EXPR [ (1, _0, _5) (-1, _28) 0 ]",
    "BLACKBOX::RANGE [(_28, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(29)), Simple(Witness(30))]",
    "BLACKBOX::RANGE [(_29, 222)] []",
    "BLACKBOX::RANGE [(_30, 32)] []",
    "EXPR [ (1, _28) (-4294967296, _29) (-1, _30) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _29) (-1, _31) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_31, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(29))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(32))]",
    "EXPR [ (-1, _29, _32) (5096253676302562286669017222071363378443840053029366383258766538131, _32) (1, _33) -1 ]",
    "EXPR [ (-1, _29, _33) (5096253676302562286669017222071363378443840053029366383258766538131, _33) 0 ]",
    "EXPR [ (1, _30, _33) (1, _33, _33) (268435454, _33) (-1, _34) 0 ]",
    "BLACKBOX::RANGE [(_34, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(30), Witness(30))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(35)), Simple(Witness(36))]",
    "BLACKBOX::RANGE [(_35, 222)] []",
    "BLACKBOX::RANGE [(_36, 32)] []",
    "EXPR [ (1, _30, _30) (-4294967296, _35) (-1, _36) 0 ]",
    "EXPR [ (-1, _35) (-1, _37) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_37, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(35))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(38))]",
    "EXPR [ (-1, _35, _38) (5096253676302562286669017222071363378443840053029366383258766538131, _38) (1, _39) -1 ]",
    "EXPR [ (-1, _35, _39) (5096253676302562286669017222071363378443840053029366383258766538131, _39) 0 ]",
    "EXPR [ (1, _36, _39) (1, _39, _39) (268435454, _39) (-1, _40) 0 ]",
    "BLACKBOX::RANGE [(_40, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(36), Witness(1))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(41)), Simple(Witness(42))]",
    "BLACKBOX::RANGE [(_41, 222)] []",
    "BLACKBOX::RANGE [(_42, 32)] []",
    "EXPR [ (1, _1, _36) (-4294967296, _41) (-1, _42) 0 ]",
    "EXPR [ (-1, _41) (-1, _43) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_43, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(41))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(44))]",
    "EXPR [ (-1, _41, _44) (5096253676302562286669017222071363378443840053029366383258766538131, _44) (1, _45) -1 ]",
    "EXPR [ (-1, _41, _45) (5096253676302562286669017222071363378443840053029366383258766538131, _45) 0 ]",
    "EXPR [ (1, _42, _45) (1, _45, _45) (268435454, _45) (-1, _46) 0 ]",
    "BLACKBOX::RANGE [(_46, 32)] []",
    "EXPR [ (1, _1, _6) (-1, _47) 0 ]",
    "BLACKBOX::RANGE [(_47, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(42)), (1, Witness(47))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(48)), Simple(Witness(49))]",
    "BLACKBOX::RANGE [(_48, 222)] []",
    "BLACKBOX::RANGE [(_49, 32)] []",
    "EXPR [ (-1, _42) (1, _47) (-4294967296, _48) (-1, _49) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _48) (-1, _50) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_50, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(48))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(51))]",
    "EXPR [ (-1, _48, _51) (5096253676302562286669017222071363378443840053029366383258766538131, _51) (1, _52) -1 ]",
    "EXPR [ (-1, _48, _52) (5096253676302562286669017222071363378443840053029366383258766538131, _52) 0 ]",
    "EXPR [ (1, _49, _52) (1, _52, _52) (268435454, _52) (-1, _53) 0 ]",
    "BLACKBOX::RANGE [(_53, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(30)), (1, Witness(49))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(54)), Simple(Witness(55))]",
    "BLACKBOX::RANGE [(_54, 222)] []",
    "BLACKBOX::RANGE [(_55, 32)] []",
    "EXPR [ (1, _30) (1, _49) (-4294967296, _54) (-1, _55) 0 ]",
    "EXPR [ (-1, _54) (-1, _56) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_56, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(54))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(57))]",
    "EXPR [ (-1, _54, _57) (5096253676302562286669017222071363378443840053029366383258766538131, _57) (1, _58) -1 ]",
    "EXPR [ (-1, _54, _58) (5096253676302562286669017222071363378443840053029366383258766538131, _58) 0 ]",
    "EXPR [ (1, _55, _58) (1, _58, _58) (268435454, _58) (-1, _59) 0 ]",
    "BLACKBOX::RANGE [(_59, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(55), Witness(55))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(60)), Simple(Witness(61))]",
    "BLACKBOX::RANGE [(_60, 222)] []",
    "BLACKBOX::RANGE [(_61, 32)] []",
    "EXPR [ (1, _55, _55) (-4294967296, _60) (-1, _61) 0 ]",
    "EXPR [ (-1, _60) (-1, _62) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_62, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(60))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(63))]",
    "EXPR [ (-1, _60, _63) (5096253676302562286669017222071363378443840053029366383258766538131, _63) (1, _64) -1 ]",
    "EXPR [ (-1, _60, _64) (5096253676302562286669017222071363378443840053029366383258766538131, _64) 0 ]",
    "EXPR [ (1, _61, _64) (1, _64, _64) (268435454, _64) (-1, _65) 0 ]",
    "BLACKBOX::RANGE [(_65, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(61), Witness(2))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(66)), Simple(Witness(67))]",
    "BLACKBOX::RANGE [(_66, 222)] []",
    "BLACKBOX::RANGE [(_67, 32)] []",
    "EXPR [ (1, _2, _61) (-4294967296, _66) (-1, _67) 0 ]",
    "EXPR [ (-1, _66) (-1, _68) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_68, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(66))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(69))]",
    "EXPR [ (-1, _66, _69) (5096253676302562286669017222071363378443840053029366383258766538131, _69) (1, _70) -1 ]",
    "EXPR [ (-1, _66, _70) (5096253676302562286669017222071363378443840053029366383258766538131, _70) 0 ]",
    "EXPR [ (1, _67, _70) (1, _70, _70) (268435454, _70) (-1, _71) 0 ]",
    "BLACKBOX::RANGE [(_71, 32)] []",
    "EXPR [ (1, _2, _7) (-1, _72) 0 ]",
    "BLACKBOX::RANGE [(_72, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(67)), (1, Witness(72))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(73)), Simple(Witness(74))]",
    "BLACKBOX::RANGE [(_73, 222)] []",
    "BLACKBOX::RANGE [(_74, 32)] []",
    "EXPR [ (-1, _67) (1, _72) (-4294967296, _73) (-1, _74) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _73) (-1, _75) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_75, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(73))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(76))]",
    "EXPR [ (-1, _73, _76) (5096253676302562286669017222071363378443840053029366383258766538131, _76) (1, _77) -1 ]",
    "EXPR [ (-1, _73, _77) (5096253676302562286669017222071363378443840053029366383258766538131, _77) 0 ]",
    "EXPR [ (1, _74, _77) (1, _77, _77) (268435454, _77) (-1, _78) 0 ]",
    "BLACKBOX::RANGE [(_78, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(55)), (1, Witness(74))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(79)), Simple(Witness(80))]",
    "BLACKBOX::RANGE [(_79, 222)] []",
    "BLACKBOX::RANGE [(_80, 32)] []",
    "EXPR [ (1, _55) (1, _74) (-4294967296, _79) (-1, _80) 0 ]",
    "EXPR [ (-1, _79) (-1, _81) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_81, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(79))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(82))]",
    "EXPR [ (-1, _79, _82) (5096253676302562286669017222071363378443840053029366383258766538131, _82) (1, _83) -1 ]",
    "EXPR [ (-1, _79, _83) (5096253676302562286669017222071363378443840053029366383258766538131, _83) 0 ]",
    "EXPR [ (1, _80, _83) (1, _83, _83) (268435454, _83) (-1, _84) 0 ]",
    "BLACKBOX::RANGE [(_84, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(80), Witness(80))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(85)), Simple(Witness(86))]",
    "BLACKBOX::RANGE [(_85, 222)] []",
    "BLACKBOX::RANGE [(_86, 32)] []",
    "EXPR [ (1, _80, _80) (-4294967296, _85) (-1, _86) 0 ]",
    "EXPR [ (-1, _85) (-1, _87) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_87, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(85))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(88))]",
    "EXPR [ (-1, _85, _88) (5096253676302562286669017222071363378443840053029366383258766538131, _88) (1, _89) -1 ]",
    "EXPR [ (-1, _85, _89) (5096253676302562286669017222071363378443840053029366383258766538131, _89) 0 ]",
    "EXPR [ (1, _86, _89) (1, _89, _89) (268435454, _89) (-1, _90) 0 ]",
    "BLACKBOX::RANGE [(_90, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(86), Witness(3))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(91)), Simple(Witness(92))]",
    "BLACKBOX::RANGE [(_91, 222)] []",
    "BLACKBOX::RANGE [(_92, 32)] []",
    "EXPR [ (1, _3, _86) (-4294967296, _91) (-1, _92) 0 ]",
    "EXPR [ (-1, _91) (-1, _93) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_93, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(91))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(94))]",
    "EXPR [ (-1, _91, _94) (5096253676302562286669017222071363378443840053029366383258766538131, _94) (1, _95) -1 ]",
    "EXPR [ (-1, _91, _95) (5096253676302562286669017222071363378443840053029366383258766538131, _95) 0 ]",
    "EXPR [ (1, _92, _95) (1, _95, _95) (268435454, _95) (-1, _96) 0 ]",
    "BLACKBOX::RANGE [(_96, 32)] []",
    "EXPR [ (1, _3, _8) (-1, _97) 0 ]",
    "BLACKBOX::RANGE [(_97, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(92)), (1, Witness(97))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(98)), Simple(Witness(99))]",
    "BLACKBOX::RANGE [(_98, 222)] []",
    "BLACKBOX::RANGE [(_99, 32)] []",
    "EXPR [ (-1, _92) (1, _97) (-4294967296, _98) (-1, _99) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _98) (-1, _100) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_100, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(98))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(101))]",
    "EXPR [ (-1, _98, _101) (5096253676302562286669017222071363378443840053029366383258766538131, _101) (1, _102) -1 ]",
    "EXPR [ (-1, _98, _102) (5096253676302562286669017222071363378443840053029366383258766538131, _102) 0 ]",
    "EXPR [ (1, _99, _102) (1, _102, _102) (268435454, _102) (-1, _103) 0 ]",
    "BLACKBOX::RANGE [(_103, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(80)), (1, Witness(99))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(104)), Simple(Witness(105))]",
    "BLACKBOX::RANGE [(_104, 222)] []",
    "BLACKBOX::RANGE [(_105, 32)] []",
    "EXPR [ (1, _80) (1, _99) (-4294967296, _104) (-1, _105) 0 ]",
    "EXPR [ (-1, _104) (-1, _106) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_106, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(104))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(107))]",
    "EXPR [ (-1, _104, _107) (5096253676302562286669017222071363378443840053029366383258766538131, _107) (1, _108) -1 ]",
    "EXPR [ (-1, _104, _108) (5096253676302562286669017222071363378443840053029366383258766538131, _108) 0 ]",
    "EXPR [ (1, _105, _108) (1, _108, _108) (268435454, _108) (-1, _109) 0 ]",
    "BLACKBOX::RANGE [(_109, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(105), Witness(105))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(110)), Simple(Witness(111))]",
    "BLACKBOX::RANGE [(_110, 222)] []",
    "BLACKBOX::RANGE [(_111, 32)] []",
    "EXPR [ (1, _105, _105) (-4294967296, _110) (-1, _111) 0 ]",
    "EXPR [ (-1, _110) (-1, _112) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_112, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(110))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(113))]",
    "EXPR [ (-1, _110, _113) (5096253676302562286669017222071363378443840053029366383258766538131, _113) (1, _114) -1 ]",
    "EXPR [ (-1, _110, _114) (5096253676302562286669017222071363378443840053029366383258766538131, _114) 0 ]",
    "EXPR [ (1, _111, _114) (1, _114, _114) (268435454, _114) (-1, _115) 0 ]",
    "BLACKBOX::RANGE [(_115, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(1, Witness(111), Witness(4))], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(116)), Simple(Witness(117))]",
    "BLACKBOX::RANGE [(_116, 222)] []",
    "BLACKBOX::RANGE [(_117, 32)] []",
    "EXPR [ (1, _4, _111) (-4294967296, _116) (-1, _117) 0 ]",
    "EXPR [ (-1, _116) (-1, _118) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_118, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(116))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(119))]",
    "EXPR [ (-1, _116, _119) (5096253676302562286669017222071363378443840053029366383258766538131, _119) (1, _120) -1 ]",
    "EXPR [ (-1, _116, _120) (5096253676302562286669017222071363378443840053029366383258766538131, _120) 0 ]",
    "EXPR [ (1, _117, _120) (1, _120, _120) (268435454, _120) (-1, _121) 0 ]",
    "BLACKBOX::RANGE [(_121, 32)] []",
    "EXPR [ (1, _4, _9) (-1, _122) 0 ]",
    "BLACKBOX::RANGE [(_122, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(117)), (1, Witness(122))], q_c: 340282366920938463463374607431768211456 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(123)), Simple(Witness(124))]",
    "BLACKBOX::RANGE [(_123, 222)] []",
    "BLACKBOX::RANGE [(_124, 32)] []",
    "EXPR [ (-1, _117) (1, _122) (-4294967296, _123) (-1, _124) 340282366920938463463374607431768211456 ]",
    "EXPR [ (-1, _123) (-1, _125) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_125, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(123))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(126))]",
    "EXPR [ (-1, _123, _126) (5096253676302562286669017222071363378443840053029366383258766538131, _126) (1, _127) -1 ]",
    "EXPR [ (-1, _123, _127) (5096253676302562286669017222071363378443840053029366383258766538131, _127) 0 ]",
    "EXPR [ (1, _124, _127) (1, _127, _127) (268435454, _127) (-1, _128) 0 ]",
    "BLACKBOX::RANGE [(_128, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(105)), (1, Witness(124))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(129)), Simple(Witness(130))]",
    "BLACKBOX::RANGE [(_129, 222)] []",
    "EXPR [ (1, _105) (1, _124) (-4294967296, _129) (-1, _130) 0 ]",
    "EXPR [ (-1, _129) (-1, _131) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_131, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(129))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(132))]",
    "EXPR [ (-1, _129, _132) (5096253676302562286669017222071363378443840053029366383258766538131, _132) (1, _133) -1 ]",
    "EXPR [ (-1, _129, _133) (5096253676302562286669017222071363378443840053029366383258766538131, _133) 0 ]",
    "EXPR [ (1, _130, _133) (1, _133, _133) (268435454, _133) (-1, _134) 0 ]",
    "BLACKBOX::RANGE [(_134, 32)] []",
    "EXPR [ (1, _130) -3814912846 ]",
    "EXPR [ (1, _9) (1, _28) (-1, _135) 0 ]",
    "BLACKBOX::RANGE [(_135, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(4294967294, Witness(135))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(136)), Simple(Witness(137))]",
    "BLACKBOX::RANGE [(_136, 222)] []",
    "BLACKBOX::RANGE [(_137, 32)] []",
    "EXPR [ (4294967294, _135) (-4294967296, _136) (-1, _137) 0 ]",
    "EXPR [ (-1, _136) (-1, _138) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_138, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(136))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(139))]",
    "EXPR [ (-1, _136, _139) (5096253676302562286669017222071363378443840053029366383258766538131, _139) (1, _140) -1 ]",
    "EXPR [ (-1, _136, _140) (5096253676302562286669017222071363378443840053029366383258766538131, _140) 0 ]",
    "EXPR [ (1, _137, _140) (1, _140, _140) (268435454, _140) (-1, _141) 0 ]",
    "BLACKBOX::RANGE [(_141, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(4294967294, Witness(137))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(142)), Simple(Witness(143))]",
    "BLACKBOX::RANGE [(_142, 222)] []",
    "BLACKBOX::RANGE [(_143, 32)] []",
    "EXPR [ (4294967294, _137) (-4294967296, _142) (-1, _143) 0 ]",
    "EXPR [ (-1, _142) (-1, _144) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_144, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(142))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(145))]",
    "EXPR [ (-1, _142, _145) (5096253676302562286669017222071363378443840053029366383258766538131, _145) (1, _146) -1 ]",
    "EXPR [ (-1, _142, _146) (5096253676302562286669017222071363378443840053029366383258766538131, _146) 0 ]",
    "EXPR [ (1, _143, _146) (1, _146, _146) (268435454, _146) (-1, _147) 0 ]",
    "BLACKBOX::RANGE [(_147, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(4294967294, Witness(143))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(148)), Simple(Witness(149))]",
    "BLACKBOX::RANGE [(_148, 222)] []",
    "BLACKBOX::RANGE [(_149, 32)] []",
    "EXPR [ (4294967294, _143) (-4294967296, _148) (-1, _149) 0 ]",
    "EXPR [ (-1, _148) (-1, _150) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_150, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(148))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(151))]",
    "EXPR [ (-1, _148, _151) (5096253676302562286669017222071363378443840053029366383258766538131, _151) (1, _152) -1 ]",
    "EXPR [ (-1, _148, _152) (5096253676302562286669017222071363378443840053029366383258766538131, _152) 0 ]",
    "EXPR [ (1, _149, _152) (1, _152, _152) (268435454, _152) (-1, _153) 0 ]",
    "BLACKBOX::RANGE [(_153, 32)] []",
    "EXPR [ (1, _47) (1, _149) (-1, _154) 0 ]",
    "BLACKBOX::RANGE [(_154, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(4294967295, Witness(154))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(155)), Simple(Witness(156))]",
    "BLACKBOX::RANGE [(_155, 222)] []",
    "BLACKBOX::RANGE [(_156, 32)] []",
    "EXPR [ (4294967295, _154) (-4294967296, _155) (-1, _156) 0 ]",
    "EXPR [ (-1, _155) (-1, _157) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_157, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(155))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(158))]",
    "EXPR [ (-1, _155, _158) (5096253676302562286669017222071363378443840053029366383258766538131, _158) (1, _159) -1 ]",
    "EXPR [ (-1, _155, _159) (5096253676302562286669017222071363378443840053029366383258766538131, _159) 0 ]",
    "EXPR [ (1, _156, _159) (1, _159, _159) (268435454, _159) (-1, _160) 0 ]",
    "BLACKBOX::RANGE [(_160, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(4294967295, Witness(156))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(161)), Simple(Witness(162))]",
    "BLACKBOX::RANGE [(_161, 222)] []",
    "BLACKBOX::RANGE [(_162, 32)] []",
    "EXPR [ (4294967295, _156) (-4294967296, _161) (-1, _162) 0 ]",
    "EXPR [ (-1, _161) (-1, _163) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_163, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(161))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(164))]",
    "EXPR [ (-1, _161, _164) (5096253676302562286669017222071363378443840053029366383258766538131, _164) (1, _165) -1 ]",
    "EXPR [ (-1, _161, _165) (5096253676302562286669017222071363378443840053029366383258766538131, _165) 0 ]",
    "EXPR [ (1, _162, _165) (1, _165, _165) (268435454, _165) (-1, _166) 0 ]",
    "BLACKBOX::RANGE [(_166, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(4294967295, Witness(162))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(167)), Simple(Witness(168))]",
    "BLACKBOX::RANGE [(_167, 222)] []",
    "BLACKBOX::RANGE [(_168, 32)] []",
    "EXPR [ (4294967295, _162) (-4294967296, _167) (-1, _168) 0 ]",
    "EXPR [ (-1, _167) (-1, _169) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_169, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(167))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(170))]",
    "EXPR [ (-1, _167, _170) (5096253676302562286669017222071363378443840053029366383258766538131, _170) (1, _171) -1 ]",
    "EXPR [ (-1, _167, _171) (5096253676302562286669017222071363378443840053029366383258766538131, _171) 0 ]",
    "EXPR [ (1, _168, _171) (1, _171, _171) (268435454, _171) (-1, _172) 0 ]",
    "BLACKBOX::RANGE [(_172, 32)] []",
    "EXPR [ (1, _72) (1, _168) (-1, _173) 0 ]",
    "BLACKBOX::RANGE [(_173, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(97))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(174)), Simple(Witness(175))]",
    "BLACKBOX::RANGE [(_174, 222)] []",
    "BLACKBOX::RANGE [(_175, 32)] []",
    "EXPR [ (1, _97) (-4294967296, _174) (-1, _175) 0 ]",
    "EXPR [ (-1, _174) (-1, _176) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_176, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(174))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(177))]",
    "EXPR [ (-1, _174, _177) (5096253676302562286669017222071363378443840053029366383258766538131, _177) (1, _178) -1 ]",
    "EXPR [ (-1, _174, _178) (5096253676302562286669017222071363378443840053029366383258766538131, _178) 0 ]",
    "EXPR [ (1, _175, _178) (1, _178, _178) (268435454, _178) (-1, _179) 0 ]",
    "BLACKBOX::RANGE [(_179, 32)] []",
    "EXPR [ (1, _122) (1, _175) (-1, _180) 0 ]",
    "BLACKBOX::RANGE [(_180, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(180))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(181)), Simple(Witness(182))]",
    "BLACKBOX::RANGE [(_181, 222)] []",
    "BLACKBOX::RANGE [(_182, 32)] []",
    "EXPR [ (2, _180) (-4294967296, _181) (-1, _182) 0 ]",
    "EXPR [ (-1, _181) (-1, _183) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_183, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(181))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(184))]",
    "EXPR [ (-1, _181, _184) (5096253676302562286669017222071363378443840053029366383258766538131, _184) (1, _185) -1 ]",
    "EXPR [ (-1, _181, _185) (5096253676302562286669017222071363378443840053029366383258766538131, _185) 0 ]",
    "EXPR [ (1, _182, _185) (1, _185, _185) (268435454, _185) (-1, _186) 0 ]",
    "BLACKBOX::RANGE [(_186, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(182))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(187)), Simple(Witness(188))]",
    "BLACKBOX::RANGE [(_187, 222)] []",
    "BLACKBOX::RANGE [(_188, 32)] []",
    "EXPR [ (2, _182) (-4294967296, _187) (-1, _188) 0 ]",
    "EXPR [ (-1, _187) (-1, _189) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_189, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(187))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(190))]",
    "EXPR [ (-1, _187, _190) (5096253676302562286669017222071363378443840053029366383258766538131, _190) (1, _191) -1 ]",
    "EXPR [ (-1, _187, _191) (5096253676302562286669017222071363378443840053029366383258766538131, _191) 0 ]",
    "EXPR [ (1, _188, _191) (1, _191, _191) (268435454, _191) (-1, _192) 0 ]",
    "BLACKBOX::RANGE [(_192, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(188))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(193)), Simple(Witness(194))]",
    "BLACKBOX::RANGE [(_193, 222)] []",
    "EXPR [ (2, _188) (-4294967296, _193) (-1, _194) 0 ]",
    "EXPR [ (-1, _193) (-1, _195) 5096253676302562286669017222071363378443840053029366383258766538131 ]",
    "BLACKBOX::RANGE [(_195, 222)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(193))], q_c: 5096253676302562286669017222071363378443840053029366383258766538131 })], outputs: [Simple(Witness(196))]",
    "EXPR [ (-1, _193, _196) (5096253676302562286669017222071363378443840053029366383258766538131, _196) (1, _197) -1 ]",
    "EXPR [ (-1, _193, _197) (5096253676302562286669017222071363378443840053029366383258766538131, _197) 0 ]",
    "EXPR [ (1, _194, _197) (1, _197, _197) (268435454, _197) (-1, _198) 0 ]",
    "BLACKBOX::RANGE [(_198, 32)] []",
    "EXPR [ (1, _194) -41472 ]",
    "EXPR [ (1, _0) (-1, _5) (-1, _199) 0 ]",
    "BLACKBOX::RANGE [(_199, 32)] []",
    "EXPR [ (1, _135) (1, _199) (-1, _200) 0 ]",
    "BLACKBOX::RANGE [(_200, 32)] []",
    "EXPR [ (1, _1) (-1, _6) (-1, _201) 0 ]",
    "BLACKBOX::RANGE [(_201, 32)] []",
    "EXPR [ (1, _200) (1, _201) (-1, _202) 0 ]",
    "BLACKBOX::RANGE [(_202, 32)] []",
    "EXPR [ (1, _47) (1, _202) (-1, _203) 0 ]",
    "BLACKBOX::RANGE [(_203, 32)] []",
    "EXPR [ (1, _201) (1, _203) (-1, _204) 0 ]",
    "BLACKBOX::RANGE [(_204, 32)] []",
    "EXPR [ (1, _2) (-1, _7) (-1, _205) 0 ]",
    "BLACKBOX::RANGE [(_205, 32)] []",
    "EXPR [ (1, _204) (1, _205) (-1, _206) 0 ]",
    "BLACKBOX::RANGE [(_206, 32)] []",
    "EXPR [ (1, _72) (1, _206) (-1, _207) 0 ]",
    "BLACKBOX::RANGE [(_207, 32)] []",
    "EXPR [ (1, _205) (1, _207) (-1, _208) 0 ]",
    "BLACKBOX::RANGE [(_208, 32)] []",
    "EXPR [ (1, _3) (-1, _8) (-1, _209) 0 ]",
    "BLACKBOX::RANGE [(_209, 32)] []",
    "EXPR [ (1, _208) (1, _209) -11539 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(211))]",
    "EXPR [ (1, _0, _211) (-1, _5, _211) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(212))]",
    "EXPR [ (1, _1, _212) (-1, _5, _212) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(213))]",
    "EXPR [ (1, _2, _213) (-1, _5, _213) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(214))]",
    "EXPR [ (1, _3, _214) (-1, _5, _214) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(5))], q_c: 0 })], outputs: [Simple(Witness(215))]",
    "EXPR [ (1, _4, _215) (-1, _5, _215) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(216))]",
    "EXPR [ (1, _0, _216) (-1, _6, _216) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(217))]",
    "EXPR [ (1, _1, _217) (-1, _6, _217) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(218))]",
    "EXPR [ (1, _2, _218) (-1, _6, _218) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(219))]",
    "EXPR [ (1, _3, _219) (-1, _6, _219) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(6))], q_c: 0 })], outputs: [Simple(Witness(220))]",
    "EXPR [ (1, _4, _220) (-1, _6, _220) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(221))]",
    "EXPR [ (1, _0, _221) (-1, _7, _221) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(222))]",
    "EXPR [ (1, _1, _222) (-1, _7, _222) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(223))]",
    "EXPR [ (1, _2, _223) (-1, _7, _223) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(224))]",
    "EXPR [ (1, _3, _224) (-1, _7, _224) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(225))]",
    "EXPR [ (1, _4, _225) (-1, _7, _225) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(226))]",
    "EXPR [ (1, _0, _226) (-1, _8, _226) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(227))]",
    "EXPR [ (1, _1, _227) (-1, _8, _227) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(228))]",
    "EXPR [ (1, _2, _228) (-1, _8, _228) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(229))]",
    "EXPR [ (1, _3, _229) (-1, _8, _229) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(230))]",
    "EXPR [ (1, _4, _230) (-1, _8, _230) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(231))]",
    "EXPR [ (1, _0, _231) (-1, _9, _231) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(232))]",
    "EXPR [ (1, _1, _232) (-1, _9, _232) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(233))]",
    "EXPR [ (1, _2, _233) (-1, _9, _233) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(234))]",
    "EXPR [ (1, _3, _234) (-1, _9, _234) -1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4)), (-1, Witness(9))], q_c: 0 })], outputs: [Simple(Witness(235))]",
    "EXPR [ (1, _4, _235) (-1, _9, _235) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "vZndbhNJEEbfxde56KrqX15ltUImGGTJciKTIK0Q777T3XUSg2STHcNefQdm+rinamrGVr5tPu4+PH9+vz9+eviyeffXt82H0/5w2H9+f3i43z7tH47L/377frfhn++fTrvd8l+bs+PLqsftaXd82rw7Ph8Od5uv28PzOOnL4/Y48ml7Wo6Gu83u+HHJRfhpf9h1+n73ujpcXiq5+GIp8rI8vXm9SvP1qnHNeuXz1W78/HXro7A+ljXrc2Z90RXrrbDeal2xPpr5+mhr9h9zZX1pq9bTv9js0nq5Iig5RTeUfLYFaz8q5Mo9HPT1Lg7nffhZolcaoYU7YcH0ohBduQ+TfHEfb61Hvai41pKgtORsCz+3JF8WNAk8UZpoungV5VopYrKXUsQSVkosn0nkoqTd3Ne31dMujrjKzfVUvVqKfFbPXC9K7OZS/GIfb+vrLyRv66vm/3NeddWwpZebI18cNr1yf+bXN1DWfHELdu0dHkJ5rWc4ew7/N0lqZ5J4UaJ/ctiScCVp1fs8C++zbLZifXn5PlLixc+32x+e9vaHZ7o47FZvboX9joe4/Y6HeJQ/eV+VwpWUuua+aIENNA0r1teWb1sfec7UtOZ7YosMd0trvue1xue3tuZ7pkhkLETSj0/Kv5d/be/3px9+G21Elwfn3UZsRlzukCXSjLysXKLMqPOUNkLDOEVlho5T1GbEeUqakecpZUadp7QRFsYpJjN0nGI2I85T0ow8Tykz6jyljYiLZel7XCzLiESdsViWZsQ4Y7HIoonZs3hWzzYzBU/xVE/zjJ7uS31bS8lT8ayebWYOnuKpnuYZPZOn+3L3LVeRq2ebWYKneKqneUbP5Jk93VfqKEdpI6pfbfWrrX611a+2+tVWv9rq1ateverVq1695r62+Povpqae5hk9k2f2LJ7Vs81cHvKAAF7A5ZsEEIEEZKAAFfC+iARAAMzitRSJQAIyUIAKeIdEAyCAAph13pXSR2SkF1a0ABXw2ooFQAAFDIhAAjCb11isAlQ5UuVIlaMCBkQgARnAHKlypMqJKieqnKhyon+J/iX6x1AJUyWMlSSqnKlypsqZKmeqnOlfpn+Z/jFfwoAJEyZ9xHpP+oiNpMqFKheqXKhyocqF/hX6V+gfwyZMmzBuUqlypcqVKleqXKlypX+V/jX6x9wJgydMnjSq3Khyo8qNKjeq3Lx/GgIggAIGRMCrrCEDBaiAV1klAAIoYEAEMPf5az2Lp1dZxausGgABFDAgAgnIQAEwq1dZLQACKGBABBKQgQJUoJv7K3HM33hvCtDfhP3d2edvQgQSkIECVKA59PmbIADmhDlhTpgT5oQ5YU6YM+aMOWPOmDPmjDljzpgz5oy5YC6YC+aCuWDuEzgq1idwAuaCuWCumCvmirlirpgre67suWKumCvmhrlhbpgb5oa5YW6YG+aGubnZQgAEUMCACCQgAwWoAGbxu85EAMyCWTALZsEsmAWzYFb2rOxZMfcZHJ/VZ3ACZsWsmBWzYjbMhtkwG3s29myYDbNhNsyGOWKOmJlBYwaNGTRm0JhBYwaNGTRm0JhBYwaNGTRm0JhBYwaNGbQxg9ahm/uX3jGDHcYMju/GAiiHDIgcSkA35w4FqBxqDmMG+/IxgwOUQwZEX95ncELmUAHYc2HPYwZLh25uHRQwIAIJyEABKtAcxgwOwNwwN8wNc8PcMDfMDXNzcwwBEEABAyKQgAwUoAKYBbNgFsyCWTALZsEsmAWzYFbMilkxK2bFrJgVs2JWzIp5zGD/cft1e9pvPxx2X+bf2D49H+/P/uT29M8jR/ij3OPp4X738fm06z9Bx7HlR+m/",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "use std::ops::{WrappingAdd, WrappingMul, WrappingSub};\n\n//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = z.wrapping_mul(z).wrapping_mul(x[i]);\n        z = z.wrapping_add((x[i] * y[i]).wrapping_sub(c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = (i as u32).wrapping_sub(2 as u32);\n            z = z.wrapping_mul(c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
