---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zdvbbts8DAfwd8l1LiSSksi+yodh6CEdAhRt0cMHDEXffU4XOZnFOPgrwbKboi78k3WgXIuWPxZ3q5v3H9/Xj/dPr4ur/z4WD0+312/rp8fh6ONzubh5WT88rH983//zImx+ZPk6//X5+nFz+Pp2/fK2uIoxLherx7vNb2nw9+uH1eIqhc9vy0VOsMiwKKgo5AopVYhOhd8OTVVYnAq3HRTDVlDMU1FgobAwVCh7goNsBYdp76rbcgm6FZJ5KtyWi1IVVqZCYWGosACLCAs3EpPkrUjDaRPh9lXKtXdTtomIwW1IthruhUJD3JYUsUpSexXCCeNEcJJw4oZw0Rr0Rac3iOF24xENdSQ1lIa4bdFSw0UtN8Rti1G9DxmnhmScFJwoTgwm5EayjcFvhRsScUI4YZwIThJOMk4KTtzRH6bR+B815GbGkHUgDj0o9iDqQdyDpAelHtTT5dLTJulpk/S0SfwHxmA8IpMGlR6kPcg6UAo9KPYg6kHcg3rGKdmBZ/s8PtwzTVHuaVPuadOBBdERlHralHtQ6UHag3rGqYQexPBzVvGfs6gOklJLEk4yTtzxUa6rMeUmePwl3zwxmGg40haHRJwQThgngpOEk4yTghN/9KPOEIOJv/CdJxEnhBN/XNI491MzxUzRNRb5a9+5q5C/9tVSl5iq0hDGieAk4STjpOBEceJHcikjma4Xh7wWTiJO/NFXPRxjkXEiOElH2uKQjJOCE8WJwROZAk4iTggnjBPBCZwpJH8dn8YYS0YNMZj4a/h54o5LsjSSpi3++n2eME7kWFtaknCScVJwojgxmEjAScSJP/pjBtcjjBPBScJJxok7+lnq7SKXP8iyOZWyjO+Esuz+5RE5JzOV+rJt+HV3cqTfldFzVkZtvzJf5ds5y7emfD8bA5U/PtRTCeGkzvSzPJeqjBv/mcbK0DRVTKmgL6MoY/3/RSJ0FaeXhuV67SXdy0L09JKfj+qtjMg0Pv3UFVT+7gWwnjjZ/ZTYpSqT/qXKZDzy8cniJ9WYajO4SakNtXZJHl/xa/l7k8Xfm9FbmXay+PlDqPzzhYSfmbxUZdzJwlqX5GzNzdzPec6TghP3+YHHTRL8Z47d6yXeC4kT49NOrsxsfPqpV6j884WEn9S9VGXcO4OkOlkkTd8Nkp8unieCE3fiyLidzCMZJwUnihODyYF9UrMk4oRw4o8+1VuNZPp7iyCTc1amXQT5ufHe8ttFkOWTyz/fusPfBHepyviz7NB+R6cyEmrFh7xFbnreTi2fjXbll1May/5ewktVJv5LlSGoMl+EceLvA5jZusz+25mYxz0KuSWKE4OJ/3ZmnkScEE4YJ4ITfx/IGGSxpIZknBScHBt9hxhMKOAk4oRwwjgRnCSc+KM/8xEC+++A5onixGByYB/nLIkY+RyO/r9+WV/fPKy2n7bcvz/e7n3p8vbzeTX56OX55el2dff+stp8/rL78mUTEmLLZN82u8OHA2ZZMn8dbqrFiZacZLjmcN1f",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = std::wrapping_mul(std::wrapping_mul(z, z), x[i]);\n        z = std::wrapping_add(z, std::wrapping_sub(x[i] * y[i], c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = std::wrapping_sub(i as u32, 2 as u32);\n            z = std::wrapping_mul(z, c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
