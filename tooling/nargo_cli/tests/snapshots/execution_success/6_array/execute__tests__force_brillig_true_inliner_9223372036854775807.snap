---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zdvZbts6EAbgd/G1L8iZ4XCYVzkoiixOYSBIgiwHKIK8e2XDlF1xpOCngyY3RVToo7gMaXHR2+pmc/X66+f2/vbheXXx39vq7uH68mX7cD9cvb2vV1dP27u77a+fp/+9Crt/VPb3Pz9e3u8un18un15WFzHG9Wpzf7P7Kw3+dnu3WV2k8P5jvdIEC4VFRkUmV0iuQmwq/HJYqqLEqXDLQTEcBEWdigwLg0VBhbEnOMhBcJjWrrkll2AHIcpT4ZZcjKooeSoMFgUVJcAiwsKNxCR6EGm4bSLcukpaazdpmYgY3IJoqeGeKTTELUmWUklqn0I4YZwIThJO3BDOVoM+23SAGIYbj1ioLWkhN8Qti+UaLla0IW5ZCtVxqHBqiOIk48RwUmBCbiQPAc51HA7NABYp9iDqQdyDpAelHqQ9KHcgnqlyHX9hgzY9iFMP0h6Ue5D1oNKBJPSgnioX6kHcg6QH9USEzLRTOQZskSlKceYdUseXSKYGSc+TUg/SHpR7ymQ9qHQgDT2op52UelCCf8/9qYtRbSSjlmScGE7c9jGub/3GTfDkgJOIE/qgLA5hnAhOEk4UJxknhpMCE/NbP9oCiTghnDBOBCd+u6Sx76emi/mTxcV3+cL4U2ZmDHUqY9aUpSScKE4yTgwnBSUUAk78SM55JKkhhBPGid/6ZrMxRv7cd5koTvIHZXGI4aTAJAacRLQjUyScME4EJwknipOCrkiRP49PY4ylQg2JOCGcuO2SShpJWxbBScKJflSWlmScGE4KTDjgJOKEcMI48Vt/XCn0SMKJ4iTjxHDitr5KHS40/0XWza2kMu49qBx/8oicm5ly3dQZ/jzeHGmfGX/dpDczVk4zs08/fmb6pU2fzk5/fKmnHMJ5lcnfKTNu/CuNmaHplhJJQTc9KGH1vycMPcWppWG6XmvJTlYhemrJX4/qzYzIND79pSso/eNGo53Z2f0lsa/KTP5OmTE88vHO4i+qMdVicLOkRupvJeu4lWz533UW/yxDb2bazuKvH0Lpf15I+CuTX5UZt7Ow1Sk5l2Yw99c8l0mBib/myeNmPP+9xu7VEp+ExHnx6a+mQplZjE9/6RVK//NCwl/U/arMuCODpNpZJFkTOQknihP/mMx4bMkjhpMCE3+5eJlEnBBOGCeCE7/1qQ41ovTvJkEzp686M9NOgmbOanWm306CZk52Iel/3rxj5tDY12Rm5jza3Lk6JzMSasaHuaZOa37m9BqQPhc6pp/PKyx9p8zwd8qMQJnZk4QT/xzAwhFZ8ndnoo5nFJqzGuzvziyTiBPCCeNEcJJwojjxz4GMQRZzaojhpMAkftT6Dok4IZwwTgQnCSeKk4wTv/UXDruzvwe0SGbOci6SiBPCCWPkfbj6//Jpe3l1tzl8QnH7en998kXFy+/HzeTjisenh+vNzevTZveZxfELi92jpaxT+bE7hTxcMOmaOe4ud4VnkfUwLRqeOTz3Dw==",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = std::wrapping_mul(std::wrapping_mul(z, z), x[i]);\n        z = std::wrapping_add(z, std::wrapping_sub(x[i] * y[i], c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = std::wrapping_sub(i as u32, 2 as u32);\n            z = std::wrapping_mul(z, c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
