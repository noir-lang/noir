---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1bPY9bRRSdZz977bW99iYNP8PP3xEguSDJJpsPhKCiiLzeXSiIFAkpElIKFzQgaFMgISEqBAU9BVIkJBokagoK/gEFP4Cd7Nz4+PjOe8+7nt21lJFW72Puu+fMmTt35s3zRua01E7+Ince09HeL5nFIrZjd2yfryRr9NUOxTHaAI6FDeBY3ACO8Ro5XsT4KW2ApuUN4Li1ARwrG8CxGoBjCJ7bG8KzFoinqRNpO4HYBG0ToE0qdtDaQWGDznaqFaxm/EUa/rM7qbrrAtSvcQJIqoS7Tv+jdr9dVdq3Rv7dqllcYK3Z/1T8l8P4b285P+/M5v6xLYJbJDt+pgg2N8HmpsfmFtjc8tjcBpvbHps9sNnz2NwBmzsem7tgc9djsw82+x6be2Bzz2NzH2zue2wegM0Dj81DsHlINhI3YcZVrxc4LvsNs/ziIm0R7K0w2IOI8IyZa451gr9tguaAJCI84cP6SI5uiM1szieiuni23A6pK0Gd9K+dPxKw49gSHtI3IeaLk7i78TruNivuuC6eLbdj1bjD2CpRnehli+RNqYuhTvKl9f8WYL3tzsPmz9N1SahxYst1hT9i2bI1m+shuhXhXgn0e6kP2lNdFeri2SLOtruOAQd9CY8S2b/prpvuWIZn5PmWgl8m/AXeyj3WparYVxV7G6M9d15zfzaGPnKOJO7K80dN5DkiFt4TrMC5py+xUiU+HDeC33TXFaiTZ1tmOUdXqB3VMO14Na62w/hPeH7Attj27sF9zEcls5w7Uc8S2e9Hc5/7pDlu7JYJT3zHgBcrXEtk/647in61MPq1r4FfQ1icw1nb96itMbSlqDzL2or9G6DtB+5emrah3vGOuoPOcbd3FJEOvr4rUXvE/kPiWV8zz7S+E6w8Yz4Ow6uTFTeP4D7rmCduxP4f8HngzptmOTY4bkKMpUnndGMa+wDjBvnUqD1i/zHxbATgaYsWN4KVJ24CrW9f7d1UiN+a/CdZcfkY7nM/aXHpG/8/gc8n7vwy8pktncOkGxFe3nwm9k+JZyUAT1u0uKyk6BeZ8PrZkqYfYgq3glkeQ7jmZH2fuaNt6+NosX34jlRU7slasGUWNUE7TTtex4bazxROFUW7cop2GGNyjtrJvc/N+rQrKHy0udKsUZ+snPSFWWzTWefKr8HnV+68Bn4rilYFRSvOjWjPecEWiT3s6xrVVci3MeHXvWlzNWJWoP1oj+e28Fz+3B21uKykaCdYtmhjWuyy3nu+MTpm3vcesf8OfH5LPktKOzAWt4mrNndqMa7FVgT3OBbrin1NwdLire7BxnhAe36/w7xmFGx8J0L7H9zxMt8R0uIRY4P7EevkWYy5poLDuu0omGl93FTsd8yiZoiNa+dmDl9pua6l2DdTsJFXy4NdAF/IVZ6VuNglnLG7bp+zcNsw3ncVPiWy/4XadR300TTaIftrCu51sGkQ7jXCtXH3hPKqPGPAJ8Ygx4FwKnvsmYPY/wocPnUctPcmeV7GDeYFzNUviFcdcLV8xjlF7H8Hn7+RTy2n5s3VNfAr70h5xngjA7NG9lp/oL2vP/5wR+wP9ola4njb8vj8E3w+JZ9a/ojg3qr5Q/jkyR+ar7TctavYt1Kwkdcu+eL9COba9HAtm/ScwLnlL3e02n/m6U9sjzZmua98Y5w5iP3fwCFtjHNey1qL8DjDujpwfeHO0/az0jDT4jErT/J8hhwbOXylxaPWf40UbK2vGBvnUk1PmUt5zh676/Y5C7cN57Smwodzzb/Url3QR9OI129ZczjvN7YIV5tLtfkCY5DjAGN3lT3P/4CDjLPAa+LDhlmOXSlSp60tpQ77lPcFsBTpGttk2/ssmvtlO+aDWvIaMdA+8RFrYRReqAV/N8J5Bvlz0XR69Y375O/LFXTS1ntXTac61V2GTpgnr6pOVzWetHUA5+R17Y3It7I83w8C7ZVNWQuj6IQxE1PdjlKXt9+kTav2W565SjAjE369dNXGFv9OC8cW8ucSemylab7OdaU2nzK2b13Jv6287HUlf7cT+2G02K6sdWWJdDjrulJwcV0ZOEetHP+8N4Pxj3HJJStHnXVNx3PwVVn7ci7X4i6vTrj2fX7GtYpw0+Zg3k/Svv/lnYPlWfydU1OxK3swCx5MOQ+97x+RJjiGtbmLf8PwPuUO0R1zR6z44RyKuDspuA3C1d5JtXk7bU7Imrf5u1DaPkcdMLT2y7NVT1vH7rp9zpJXX87NYv+ING2BPppGPKaaCi7mTt6bbhKu1q8cRxxPvm90vj09X0xPgYPsK2p5hH9jgrls1e9jReC6585l7z+eLdqN3f32OcpwdBojL7nO5jpwPkb8Etl/4hzgb3YNaDM+I8/j4SQ57k6OJ/3J4WFvOuFvk7bIGK4FwJ8Mu6NppzcdHvS7k+7gwvEHvUEyGk1G08H0+EZvenDR+L3+ZDidDJPkRi856iX9i8af9gcH0xMS7aPEXnYuGr8zGg1udA7aveHh9Piw183Cx/8dCPybWfX/nKTw/y1EwFnq8P8Q+P8nsGjrMmmTbe/3K6zLtHVQUeHA6x9+5+Z5XPMRkY9Gig/uO21OiRQ8Hx++V0jxV/W0eeyu2+crPe1/p6Ro88+qsSD3rH4/rhALqJ3gh+4HY173A2Ouox+qyr2xO2bokmQJJ3ixp72Iu2o8RGY5R3OePG++4Bym5bks7mJrcf8Hi+I4HTFKAAA=",
  "debug_symbols": "tdzbbuM4DAbgd8l1LiSRIqW+ymIw6CEdBCjaoocFFkXffZ1O7AQW4/RnqptBMuhHRQfalmT7Y3W3uXn/83v7eP/0urr652P18HR7/bZ9ehy+fXyuVzcv24eH7Z/fx/+9Crt/hL/+/vX5+nH39fXt+uVtdRVF16vN493wSePg77cPm9VVDp+/1ivJsBBYKCo0WSIF2osUeC7MeiSOo2CdC7MeSWQUmuZCYVFgUVFRzLYiCXtBMm/dYrYV57QXLDIXZlvlOP6qTE0ZCosCi4qKGmARTVHG1s1lPhKr2boSxtaVQHNh1lzTmB/Kza8ya6465oeWeRkxBJxEnCScEE7Mw1wJZU9KTA0xW6zQ2I+l6fkYzbqUOg6WmkJDzLpUriPJtSGMk4wTwYnixBzItY5Dv1ZtSIVJCjiJOEk4IZwwTjJO7FN2qOPZcfjYZExSDyoeVB2IggdFD0oeRB7kaXL21Ik9dWJPndi+JB0OLyMaDhsNyh4kHqQeVDyoOlAOHhQ9yNNP+UTrcZhQnl9LRvHUSTx1kuRB5KkTe1D2IPEgVz8VB9IIX2fZk73CYyeV3BLCCePE7J+SeSLN4LEnlctEcVLO1aUlFSYl4CTiJOGEcMI4yTixe5/TAlGcFJxUmNSAE7tfprlyKU2KVYHnWPbcd6mUZM9967ScVENpSMRJwgnhhHGScSI4seeLIU6kNqTgpMIk2r0f08kxlmLEScIJnamLQRgnGSeCE0UTOdmrBcukwsReLVgmEScJJ/A6YbLn8ZImkqQhipOCk2qTca1IqKmLPX9fJhEn6UxdDEI4YZxknAhOFCcFJxUmbPd+LAsk4iThhHBi976OuS+1OSXZ6xvLRHCiOCk4qTCxVzWWScRJgrZV1sbJO4wXlcN5PE9/TPVvfOocnzvHz53jS+f42jl+6Ry/9o1vr7P9YPzYOX7n/JXO+Sud81c65690zl/pnL/SOX+lc/5q5/zVzvmrnfNXO+evds5f7Zy/iuXvF1GY2KvENF2YUWlWiuxVYp5mvhzloorbS8o/GJ86x+fO8XPn+NI5vnaOXzrHN08cTOPiKtP8Do5kr8Yvk4iTc4lD6aKKV+ocnzvHz53jS+f42jl+6Ry/do1P9j4Rax7j63yRgex9omWScGInjpQFwjjJOBGcKE4KTipM7H2iZWL3/nRnO1dqSMIJ4YRxknEiOFGcFJzYvX/qDvf2QCGHJweG7Q6ZHyjsTaUfjB87x0+d41Pn+Nw5fu4cXzrHVyj+Fykwsffjlp7SIXs/btjXHUlqCeGEcZJxIjhRnBScVJjY+3Fpmvin5rY9svfjlknCybneNwjjJONEcKI4KTipMLH345aJ3fsLz9uRvR+3TAgnjJOME4GJveqlMt3oqXJ0gbk/kNtLWecQeRB7UPYg8SD1oOJB9SwqzQnXXp85h6IH2TeNB87jaXf3uRyz9vJhuEAYR+rw8TAPjulvGSeeF2I5KkMuLEO/UQ8NTfVPPGDEJEcsNqx6GIfgY9HHko+Rj7GPnei3oAcWSrxkbHA40cmhHJVRLyyjfqMeRzPLffXjiRERcj1i3LDoY8nHyMfYx7KPiY+d6Ld0eJ1AOH5I3jM2UjhfBsX5oZlT9LETnUzx0BCU+LIa0Td+Wmp/mpns58oqHlRR9Dl8+/f6ZXt987DZvxjj/v3x9ug9GW//PW9mr8x4fnm63dy9v2x2L884vDdj1zpc17n+2j0qPnyhYRCS8O7rrlNJdU1ahzKHcv8H",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "use std::ops::{WrappingAdd, WrappingMul, WrappingSub};\n\n//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = z.wrapping_mul(z).wrapping_mul(x[i]);\n        z = z.wrapping_add((x[i] * y[i]).wrapping_sub(c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = (i as u32).wrapping_sub(2 as u32);\n            z = z.wrapping_mul(c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
