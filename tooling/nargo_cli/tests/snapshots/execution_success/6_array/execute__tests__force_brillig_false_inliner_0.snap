---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "vZnRbts4EEX/xc950Aw5HLK/slgUaeoWAQwncJMFFkX/fUVxTuIWkJvK2z7dm0hzJN3R0DT8dfdx/+H58/v746eHL7t3f33dfTjdHw73n98fHu5un+4fjvN/v3672fHn+6fTfj//a3d2fK56vD3tj0+7d8fnw+Fm98/t4Xk56cvj7XHRp9vTfHS62e2PH2edgZ/uD/vuvt28Vk/rpVI8isXlpdzeXK/Sol41b6lXrq/pyutvq89CffYt9aVQ77qhPqcU9TltuX4ulXpvm+rJP7e0Vt/W671YDoCXsztI7TuCXHoFJ319CafzGH+EyDokqdPI2doLQnTjfSQpa/fx1jjqKuFSQyalIWd38ENDxNYBTSbWgyZqq2GWS0lkSy9JZJ82QlI5g8gqpF7d1rflmVYHVKer81S5GEU5y7PUVYheHcVP7uNtff0J5G19VfuT46qbhs1eXo6yOmx64f0sr58fRcvqLWi79ByTv+Y5na3CvwaxdgbJa5Akv3PYTHgS2/RpXIRPs5LShnp/2U14Xr1+un7xTP/Hupf86lakty/itrropPYn72N90bnUV4fgdct70Saeoum0ob62cl19Zp2pZ334hfvPDHezLbu81rh+a1t2mX1b9trCLQmIZAZLxL5fa/+e/7q9uz99991oJzoveTc7SUPyvEbPYkPKXDmLD6njlLaITsspKkN0OUXTkDxOsSFlnOJD6jilLZKm5ZQkQ3Q5JaUheZxiQ8o4xYfUcUpbJM+U+c3JM2Ve2LIOmSnSD+ZQCy2hHlpD21CbQiVUQ4NnnTe/J2ahJdRDa2gbWqZQCdXQFBq80tOan6KUUA+toW2oT6ESqqEpNIcGz8sSh/uQeFqPp63xtDWetsbT1njaGunVSK9GejXSq8GrrS9dN7s2hUqohqbQHGqhJdRDa2jw5g+KEY9MglFMwmSMYQrGMRUTfRGBLJGkiGISJmMMUzCOqZjokOiEgazjnZQ+IItGrKKGKRjHVEz0StKEEYxiEgZyioQlFYxjKoaU84QRjGISJmMgZ1LOpJxJOZOykbLRP6N/Rv8YKWGmhKESI2UjZSPlQsqFlAv9K/Sv0D+mSxgvYb6kD1jvSR+wrk7KTspOyk7KTspO/5z+Of1j1IRZE4ZNKilXUq6kXEm5knKlf5X+VfrH1AljJ8ydNFJupNxIuZFyI+VG/xr9a9E/Zf6U+VPmT6dIWaeMMUzBOKZion8qE0YwioHc5692tdBIWcUxFRMpq04YwSgmYTLGMJA1UlatmEhZ04QRjGISJmMMUzCdnLrp5H6tZf66WeavP+Ayf4tRTMJkjGEKxjEV08IY5D5/y7X6/A0D2SAbZINskA2yQS6QC/dcuOcCuUAukAvkArlALpAdskN2yA7ZITtkh+yQHbJDrpAr5Aq5Qq6Q+wT2HaX2Ccy9cX0Ch+n7j2U308L0CVwO9QkcRjmUMH13tWx+DFM45JhKeRsm9Qnsh1KfwGF0lKc+gcNkDhmmUO6YTi7ddHLru64JIxjFJEzGGKZgHFMxkBWyQlbIClkhK2SFrJAVskJOkBPkBDlBTpAT5AQ5QU6QE+QMOUPOkDPkDDlDzpAz5Aw5QzbIBtkgG2SDbJANskG2hfytb/9P97cfDvv4dePT8/Hu7MeOp38fOcLPIY+nh7v9x+fTvm/+l2Pz14H/AA==",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "use std::ops::{WrappingAdd, WrappingMul, WrappingSub};\n\n//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = z.wrapping_mul(z).wrapping_mul(x[i]);\n        z = z.wrapping_add((x[i] * y[i]).wrapping_sub(c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = (i as u32).wrapping_sub(2 as u32);\n            z = z.wrapping_mul(c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
