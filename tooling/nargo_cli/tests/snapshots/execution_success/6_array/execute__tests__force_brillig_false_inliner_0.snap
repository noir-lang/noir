---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9Wc23cV1R3HvyHhEhQUDSILkRMjCqJyJiGQVFRQqeINtaJWhEJIAKEgFIQWhIJQQWhBKAgFoQrIbXG/3++rD+1DH/vS5VPf+w+0a9WNe+NkM2cozPc7a2avlbWT2XN+Z3+/+7fP75OZScrwQ7v6/dfEsh++N1257U0reMfKIo61iThWHnGsIuJY24hj7SKOtY841iHiWGXEsY4Rx+6wxxDSOsT2xWQtqLTz8OPWFQcOGNAyqLYlqAvGFWsbmxrqiwPqmwY2BA1BfUN9c21DXV1Lw4CGQY1NjYOKjcGAupZgQn1j3QQb+E7eHIthL+4UetHWxmd70UnkRaeQF66VC/JD4UPSWJ1FnnYW5ldnG5+dX3eJvLhL6EU7G5/txd0iL+6Gfq91FvmQNFYXkaddhPnVxcZn59c9Ii/uEXrR3sZne3GvyIt7od9rXUQ+JI1VJfK0SphfVTY+O7+6irzoKvSig43P9uI+kRf3Qb/XqkQ+JI3VTeRpN2F+dbPx2fl1v8iL+4VeVNr4bC+6i7zojhv3WhtBfmTRB8X6mxhtBevfQ7T+Pez6V3hrH25sj25BS3CT8WLEdJPO8/p7hr14wPY9nSHOQDPwnXesJ/QFLGzibSZXrU2u4AHwErWnaHH9D6Wk82RqfjBC8+3GDOfRgza3KvDjxWO/sT9oHiBrca2XcsK9ULpq3W78XuBt1gJRr8rDAkp/0t9u/AK01ZrxYVUAj3hcXOZ6V0NT+avtV1TlZ1d843PPUHyWHkS0hLEjq/9Dtq9x5jgTzYBf/Wug+/XCGUmqhtcJ4CHwErYGmgVmEwBT88PQEMDDSJ8AHoKGAHorJ9wbfALoDd7GfQTZJgDj4SPgE8AjyDYB1FjdbAJgrvej0BCAiZsWAdSg9YcXSw8iWsLYkQTQx/Z9nTnORDPgE4A5qSAy0hEGmwD6gJewfZEPAmBqfgwaAngM6RNAH2gIoJ9ywv3AJ4B+4G3cx5FtAjAePg4+ATyObBNAX6ubTQDM9X4CGgIwcatL7MlisnatULUTrNeTIi9M3ALi74SwCxCxUAa34Etws+MR0iVU1d/FdAnoFsMM+FRVxI13VSpysiBJ6aw/UWNRlCjszcHUHEBDZwHSp7P+ZC2u1SonXAs+ndWCt1nriHpVHtaBT2d1PA8luotWN5vOmOs9ABoiMXFLXZ+Bd4z0/kFPYqwiuLnlt4SxI4mk3vYDgdb0YQZ8IjEnFbxJVXAmd32SqgVJSiT14G2ggdAkCptImJoHQUMkg5A+kdRDQyQNygk3gE8kDeBt1kZkm0iMh43gE0kjsk0kA61uNpEw1/sn0BCJiZvWHSPj88BQfJYeRLSEsSNJ4inbD3bmOBPNgE8S5qSC2Ej2HaOnwEvYwcgHATA1Pw0NATyN9AngKWgI4BnlhJ8BnwCeAW/jPotsE4Dx8FnwCeBZZJsABlvdbAJgrvcQaAjAxEyLAAZ78Vl6ENESxo4kgKG2f86Z40w0Az4BmJMKIiPNpMJmurhJCWAoeAn7HPJBAEzNz0NDAM8jfQIYCg0BvKCc8AvgE8AL4G3cYcg2ARgPh4FPAMOQbQJ4zupmEwBzvX8KDQGYuNUl9mQxWbtWqNoL1utFkRcmbgHpPjNCLJTBLfiSmWdGXrL9cJeAbjHMgE9Vw6F/ZkS1IEnp7CWixuGiRGFvDqbml6Ghs5eRPp29RNbi2ivKCb8CPp29At5mfZWoV+Xhq+DT2as8DyW6h1vdbDpjrvdr0BCJiVvq+gy8Y6T3D4i374Ph4OaW3xLGjiSS120/AmhNH2bAJxJzUsGbFPuZEdWCJCWS18HbQCOgSRQ2kTA1vwENkbyB9InkdWiI5E3lhN8En0jeBG+zvoVsE4nx8C3wieQtZJtIRljdbCJhrvfPoCESEzetO0bG5xGh+Cw9iGgJY0eSxNu2H+nMcSaaAZ8kzEkFsZHsO0Zvg5ewI5EPAmBqfgcaAngH6RPA29AQwLvKCb8LPgG8C97GfQ/ZJgDj4XvgE8B7yDYBjLS62QTAXO+fQ0MAJm5aBDASP/6rTWLc1AjgfduPcuY4E82ATwDmpILISPMeI8EngPfBS9hRyAcBMDV/AA0BfID0CeB9aAhgtHLCo8EngNHgbdwxyDYBGA/HgE8AY5BtAhhldbMJgLnev4CGAEzc6hJ7spisXStUHQTrNVbkhYlbQLrPjBALZTD2/4+VmWdGxtm+CWhNUGbAp6om6J8ZUS1IUjobR9TYJEoU9uZgah4PDZ2NR/p0No6sxbVm5YSbwaezZvA2awtRr8rDFvDprIXnoUR3k9XNpjPmek+AhkhM3FLXZ+AdI71/QLx9HzSBm1t+Sxg7kkgm2n4S0Jo+zIBPJOakgjcp9jMjqgVJSiQTwdtAk6BJFDaRMDV/CA2RfIj0iWQiNEQyWTnhyeATyWTwNusUZJtIjIdTwCeSKcg2kUyyutlEwlzvX0JDJCZuWneMjM+TQvFZehDREsaOJImptp/mzHEmmgGfJMxJBbGR7DtGU8FL2GnIBwEwNX8EDQF8hPQJYCo0BDBdOeHp4BPAdPA27gxkmwCMhzPAJ4AZyDYBTLO62QTAXO9fQUMAJm5aBDAt9D7EuKkRwEzbz3LmOBPNgE8A5qSCyEhj4jTwCWAmeAk7C/kgAKbmj6EhgI+RPgHMhIYAZisnPBt8ApgN3sadg2wTgPFwDvgEMAfZJoBZVjebAJjr/WtoCMDErS6xJ4vJ2rVCVSlYr9+IvDBxC0j3mRFioQxuwZfMPDMy1/bzXAK6xTADPlXNg/6ZEdWCJKWzuUSN80SJwt4cTM2fQENnnyB9OptL1uLafOWE54NPZ/PB26wLiHpVHi4An84W8DyU6J5ndbPpjLnev4WGSEzcUtdn4B0jvX9AvH0fzAM3t/yWMHYkkSy0/SKgNX2Yge+8CbCfD1GZn5Q+FoK3WRZBkxRs+mBq/hQa+vgU6dPHQmjoY7FywovBp4/F4G3WJcg2fRgPl4BPH0uQbfpYZHWz6YO53r+Dhj5MXHdtyDX2NaJFBB+K4xubi+Ob6sLzLCfPs5IYqwdx7T+DZu1N3ALiyZOdC2OhAQNw5hlJi0ttv8wZ4gw0A/71q2W48foVO1HHgkd9S8FL1GXQLC6b+piaP4eG+j5H+tS3lKzFteXKCS8Hn/qWg7dZVxD1qjxcAT71rQD3w4Cte5nVzaY+5nr/HprKb+L61McuUsQ7eMEyoqd/EHlq4haQKk3VMrVETFdCUyttv8oZ4gw0Az5NrYKcplqZmJSmVoKXqKuQD5piav4CGpr6AunT1EqyFtdWKye8GnyaWg1eJViDbNOU8XAN+DS1BtmmqVVWN5ummOv9R2gqv4l7szt47MqvKg7gzDOy8q+1/TpniDPQDPiV35xU8CbFrvxhE5NW/rXgJeo65KPyMzV/CU3l/xLpV/610FT+9coJrwe/8q8Hr/JvQLYrv/FwA/iVfwOyXfnXWd3sys9c7z9BU/lN3LQrv6o4gDPPyMq/0fabnCHOQDPgP2/DrvLrwKvyG8FLyk3IR5Vnav4Kmir/FdKv8huhqfKblRPeDH6V3wxeld+CbFd54+EW8Kv8FmS7ym+yutlVnrnef4amypu4/t0S9nMRmwg+tEyYMKG+pRiE58m+q8PMqbbEWF9Ds/YmbgGtG9tT4vM9wddET78RefpNCp6WEX1oR4y1VeTp1hQ8JeZDsJXo6TaRp9tS8PRJYqxtRE+3izzdnoKnxD0WbCd6+q3I029T8LQN0Yf2xFg7RJ7uSMFTYj4EO4ie7hR5ujMFT18kxtpJ9HSXyNNdKXhK3GPBLqKnu0We7k7B03KiDx2IsfaIPN0T4SnrWoJtATEfgj0ET83v4821LS1xFyXZHoCYC23BzQXX9irF7yUbsDc0cVbcNBOC+YuwKiH2KcXvIxuwD/lOCCbJqxJiv1L8frIB+5HvhGCiiCohDijFHyAbcAD5ToiKHCTEQaX4g2QDDiLfCcGcdztoEuKQUvwhsgGHkO+EUN1dKSZsYe2HleIPkw04jHwnBBMqVQlxRCn+CNmAI8h3QjChUpUQR5Xij5INOIp8JwQTKlUJcUwp/hjZgGPId0Iw590emoQ4rhR/nGzAceQ7IZhQqUqIE0rxJ8gGnEC+E0L1zEExYQtrP6kUf5JswEnkOyGYUKlKiFNK8afIBpxCvhOCCZWqhDitFH+abMBp5DshmPPuAE1CnFGKP0M24AzynRBMqFQlxFml+LNkA84i3wnBhEpVQpxTij9HNuAc8p0QqifxiglbWPt5pfjzZAPOI98JwYRKVUJcUIq/QDbgAvKdEMx5E//HeKuEuKgUf5FswEXkOyGYUKlKiEtK8ZfIBlxCvhOCCZWqhLisFH+ZbMBl5DshmFCpSogrSvFXyAZcQb4TggmVqoS4qhR/lWzAVfATwpjh/pXXnaH4ZdaTcjtunuk0t+DNFVMDuGY+Hb//ugM3tkLo+062/9vav/9l17JxzeHz7ooZ62L75//7zxcPrvmsT3js3pjXdY0Z6xYTs3vM63rEjPWMidkr5nXVMWM1MTF7x7zu0Zixx2LGXosZmxcztjtm7B8xY/+2fdd/De0+4687h4XH/hMz1svu3ChfqstKv64m5nW9Y173aMxY35ixfjHv90TM6/rHjAUxY3Ul3s99pnWwfaXtO9re/bHiEPtzMVmrdfHv0MS/drfGbx1D3/ufRU5/RcTrykr83Mbr484ti4nbKWLMxXSfX+H5Oh2VXt81FJfoZeDiV2niR65V19D3VZ7OsN9DSHNw8dwfMrfFja2NN+bO9fdMGX9+gT+X8oj3cs3lTFXomPPzfw+v+ORLEgEA",
  "debug_symbols": "zZvbbppJEITfhWtfTHfPMa+yWkU+4AgJgeXDSisr7x5s+U8iGGN1R4q/O2MouwZKBX8V9by6WV89ffu62d3uH1Zf/nlebffXl4+b/e5w63kl+vq7h7vL3cvNh8fL+8fVF6l2sVrvbl5+6t8vVreb7Xr1paTv/16sxNyI/AGilWNEcSPqFNHLghhyjGhuRHeffHgRmrwnV3Ej1HtyNTciu09e3IjqPnlzI7r75MOLsOQ9uYkbod6Tm7kR2X3y4kZU98mbG9HdJx9eRJ6+5irpDaFSjxHT1zzn9obI5fgcWd2I6WuedSyIqr8jLk4PUHU5s7aUfj5YdfJg0yZvDz78+OsZEn3lkkFcCohLBXFpIC4dxGVwuJQE4iIgLgriAvLdMvVdq3mB9PYBl/7rXazn8kdcCohLBXFpIC4dxGVwuNQE4iIgLgriYiAuIN+tc9/NdYGM/Pe4VBCXBuLSQVwGh0tLIC4C4qIgLgbikkFcQL7bqjc9as2NAF2zN9A1ewdds3fQNXsHXbN30DV7zyAuoKy0g7LSDspKO8h3+9x3U//JxT7gYkMXLlnbn3AZCcRFQFwUxMVAXDKISwFxqSAuDcSlg7iAfFcSKCyVBEpLJYHiUkmgvFRSJpEBNVWSQFWVJFBXJQlUVkkCtVUiJAcWUG4qAgpORUDJqQgoOhUBZacioNJKBNRaiYBqKxFQbyUKKq5ESQ6s7i+yyvwb6+chmROKiYJSVFFQjCoKylFFQUGqKKjBEgNVWGKgDksMVGKJgVosMZIDGyhPFQMFqmKgRFUMFKmKkTLVDCqzJIPaLMmgOksyqM+Sd0ZXn0SG5MCZlKlmUqaaSZlqJmWqhZSpFlKrVUitViG1WqT5lZD2V0IaYEkhZaqFlKkWUqZaSZlqJWWqldRqVVKr9c4Q65PIkFot0hRLSFssmY+xztYN883UWUgjZaqNlKk2UqbaSJlqI2WqjdRqNVKr1UitFmmWJaRdlpCGWdJJmWonZaqdlKl2UqbaSZlqJ7VandRqdVKrRVpoCWmiJaSNlgxSpjpImeogZaqDlKkOUqY6SK3WILVaA9RqKWmrpaStlpK2WppAmaqmTCIDylQ1gTJVTaBMVROo1dIEarVUQK2WkrZaStpqKWmrpfOt1rm6QeeLqvMQUKaqAspUVUCZqgooU1UFZaqqoFZLFdRqqYJaLSVttZS01VLSVksVlKmqgjJVVVCmqgbKVNVAmaoaqNVSA7Va+s5W65PIgFotJW219J2tVl/+QR7t+DP8fFFV+pJilTFOIMMNma+T6lguLpqmv3dxNF8nfRYZJZExEplMIlNIZCqJTCOR6SQyA0SmkBx4vk46+w4y3xCdh5DcrJDcrJDcrJDcrJDcrJDcrJDcrJLcrJI+T1bS58lKcuBKcuBKcuBKcuBKcuBKcuBKcuBGcuBGcuBGcuBGcuBGcuBGcuBGcuBGcuBGcuBGcuBOcuBOcuBOcuBOcuBOcuD5Oqnlpbxu5STSmW+Ielv491FPIM0P6XOInoEMN2S+bTlLbL5AOQ9RPzHzQ6a66rK0YN3yCaT4IdVPrPkh3f8kDy/EUvISsyR+iHqfZJt/k/w8JPuJFT+k+p/k5odMX/2h5Q0yrJxApq++iCxf/RQxPQbNv9X7EUgiII2ALALKEVCJgGoE1CKgHgFFFKERRWhEERpRhEYUoRFFaEQRGlGERhShEUVoRBEWUYRFFGERRVhEERZRhEUUYRFFWEQRFlGERRSRI4rIEUXkiCJyRBE5oogcUUSOKCJHFJEjisgRRZSIIkpEESWiiBJRRIkookQUUSKKKBFFFLciDjeu7jfb7ebb1+3++vJxs989HKCHX/93eb+5vNqu327ePu2uf7v38f+75Z4Ff3e/v17fPN2vX/7S632HP/8D",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = std::wrapping_mul(std::wrapping_mul(z, z), x[i]);\n        z = std::wrapping_add(z, std::wrapping_sub(x[i] * y[i], c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = std::wrapping_sub(i as u32, 2 as u32);\n            z = std::wrapping_mul(z, c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
