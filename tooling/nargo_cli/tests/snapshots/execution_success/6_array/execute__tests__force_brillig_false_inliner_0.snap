---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "vZndbts4EEbfxde54Mzwb/oqi0WRpm4RwEgCN1lgUfTdVxTnJG4Bu1ml7dV3EonH1JAjyfDX3cf9h6fP72/vPt1/2b376+vuw/H2cLj9/P5wf3P9eHt/t/z367erHX++fzzu98u/difHl1EP18f93ePu3d3T4XC1++f68LSe9OXh+m7Nx+vjcjRd7fZ3H5dchJ9uD/tB365eRqfzQ6W2GCxNnoeXV49X8RivmreMVz5f7Y2fv218FsbntmV8rYxvumG8NcZb7xvGZ7MYn23L/HPtjG++aTzrl93OjZcLglZLDkOrJ1Mw/14hF/Zw0pddnE7X4UeJXlgIbeyEBcuzQnTjPEzq2Xm8th79rOLSkiRlSU6m8OOS1PMCl8QdxUXL2atol0qRiz2XIre0UWL1RCJnJf7mdX1dPe1si6u8uZ6qF0tRT+pZ+1mJvbkUP5nH69b1J5LXravWP9mvuqnZyvPmqGebTS/sz/ryBKpaz07BLj3DU2ov9Uwn9+H/Jyl+IslnJfo7m60IV1I2Pc+r8DyrZhvGt+f3kZbPfr69/eZpr795lrPNbv3NS2G/4iZuv+ImnuV37qvWuJLWt+wLT0zANW0Y372+bXzmPtPLlvdEzzS3ly3vee58vvuW98zxXvayC7ZUQCTTWCLl+3vt38tf1ze3x+++Xe1El1vv1U5sRl722BJlRl1GLtFm9HmKr6FpPUVlhq6nqM3I85Qyo85T2ow+T/E1LK2nmMzQ9RSzGXmeUmbUeUqb0ecpvkZeLMvOyYtlqV/WGYtlWc6cZywWWTS5RrbIHukzS4qUSI20yBwZvjKmtZS8tMge6TNripRIjbTIHFkiw1eHb7mK2iN9ZkuREqmRFpkjS2SNDF/razmar9HjantcbY+r7XG1Pa62x9X2qF6P6vWoXo/qefh88Y3vXK6RFpkjS2SNbJE90mcujwlAgCjg8i4CZKAAFWhAB2JdRBIgAGaJWopkoAAVaEAHYoVEEyCAAph17koZLbJmFFa0AR2I2oolQAAFDMhAATBb1FisA1Q5U+VMlbMCBmSgABXAnKlypsqFKheqXKhyYf0K61dYP5pK6CqhraRQ5UqVK1WuVLlS5cr6Vdavsn70l9BgQofJaLGxJqPF1qTKjSo3qtyocqPKjfVrrF9j/Wg2oduEdpNOlTtV7lS5U+VOlTvr11k/Z/3oO6HxhM4Tp8pOlZ0qO1V2quyxfpoSIIACBmQgqqypAg3oQFRZJQECKGBABjCP/vORLTKqrBJVVk2AAAoYkIECVKABmDWqrJYAARQwIAMFqEADOjDM45G49t/63BRgPAnHs3P034QMFKACDeiAB4z+myAA5oK5YC6YC+aCuWAumCvmirlirpgr5oq5Yq6YK+aKuWFumBvmhrlhHh24Vmx04ATMDXPD3DF3zB1zx9wxd+bcmXPH3DF3zI7ZMTtmx+yYHbNjdsyO2cNsKQECKGBABgpQgQZ0ALPErjMRALNgFsyCWTALZsEsmJU5K3NWzKMH188aPTgBs2JWzIpZMRtmw2yYjTkbczbMhtkwG2bDnDFnzPSg0YNGDxo9aPSg0YNGDxo9aPSg0YNGDxo9aPSg0YNGD9ragzZgmMdL79qDA9YeXN+NBVAOGZA5VIBhrgMa0DnkAWsPjuFrD66gHDIgx/DRgxMqhxrAnBtzXnuwDZDxtWSAAgZkoAAVaEAHPGD04ATMjtkxO2bH7Jgds2P2MOeUAAEUMCADBahAAzqAWTALZsEsmAWzYBbMglkwC2bFrJgVs2JWzIpZMStmxayYbTV/G19Cj7fXHw77L/NXuk9PdzcnP9o9/vvAEX7Wezje3+w/Ph334yvoemz5Uvof",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "use std::ops::{WrappingAdd, WrappingMul, WrappingSub};\n\n//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = z.wrapping_mul(z).wrapping_mul(x[i]);\n        z = z.wrapping_add((x[i] * y[i]).wrapping_sub(c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = (i as u32).wrapping_sub(2 as u32);\n            z = z.wrapping_mul(c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
