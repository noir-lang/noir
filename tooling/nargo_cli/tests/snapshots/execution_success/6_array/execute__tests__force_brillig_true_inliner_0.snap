---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdvbTvM4EAfwd+l1L+zxnMyrrD594lA+VUKACqy0Qrz7pqhJ2Xia6u9ubxBB+TmZjHPwYH+uHjZ3H39+b58fX95WN399rp5e7m/fty/Pw9bn13p1t9s+PW3//P7551Xa/1D+3v/t9fZ5v/n2frt7X93knNerzfPD/jcZ/OP2abO6kfT1a71SgYXCwlBhFAq2UbDPRRyHyyhqnoswDsrpICjrXBgsHBYVFR5eq5L4IEqaX10PrxUnPwjWMhfhtWKnUVSbC4OFw6KioiZY5EgI60HIsNtMhFdXdLy6onUuwsi1jr3dqDlGGLlxHYXMj5FTwknGCeGk4CR8zJmPXd7cGxJeMU9jHj3NM59zGIvb2Fm8akPCWCqNT6FapCGME8GJ4sRwEnbkOnX9aqUhFSaUcJJxQjgpOGGcCE7iV3bS6X2atLljyHqQ96DagUrqQbkHUQ8qPajnknNPTNwTE/fExPEnaaplQpUbJD1Ie5D1IO9BtQNJ6kG5B/XkSU592ev0aV9ojrQnJu2JSakHlZ6YuAdJD9Ie1JUn70CW4e+seLDnNCbJqSUFJ4yTMD9exrGYl6bzxIPKZWI48TOxBKTCxBNOMk4IJwUnjBPBSZz97AvEcOI4qTCJh8rLJM6LTPe+NLdYVXiMFY99l45C8djXbRxiunNDMk4IJwUnjBPBieIk7slmE5GGOE4qTHKcffeTfYxyxgnhpJyJJSCME8GJ4sTQG5my46TChBJOMk4IJ3CdkOJxvEx9TCo1xHDiOAnzIlUm0sQSj9+XScYJnYulJQUnjBPBieLEcOI4qTDhOPtTBTciGSeEk4KTMPvK472v1hLBieLEcOI4qTCJqxrLJOOE0H+rkBScME4EJ4oTw4njpMIkrv8sk4wTPPuKZ1/x7CuefcWzr3j2Fc++4tk3PPuGZ9/w7BuefcOzb3j2Dc++4dmPqz2FxjJUaWp9FFd7ik4zD7wZiZ+YrLBICk4YJ4ITxYnhxHES3pXFx8F7qfP/EFJc7VkmGSdx9qfJFKWpxlNcU1omjBPBieLEcOI4qSgpcX2MZexjLN6QjBPCSZh9nuaBRYRxIjhRnBhOHCcVJnF9bJnE2afx3melhhBOCk4YJ4ITxYnhxHESZ//UzL51s+swMB+bHwbcxwcFUbBzGb7MxofK8GEz7Zzp+2Tiyht0Mvl4MnThyeT/88qQ/jyZ7/bp0vZLpWP71rRfrtw+X7l9uXL7euX27crt+5Xbx54Me1ISTuK5EwvztktcO806TdHQlghOFCeGE8dJhUlcO10mGSfx3JnpIZtNGlJwwjg5l/2AKE4MJ46TChNJOMk4IZzE2V9YgVFOzDlbJIITxYnhxGESVzaGmuK02ENZLvrqiQsh/zmC1/mrIi6FnEPxaho9vpS02mWx2NnTqu1pxQtwdJrFM9QjU4NqB4orKOdQ7kHUg0oP4h4U58lp/AgYKnp0UU+IiyJDs8cj8IVHqGdjYJ4FznEVZaiSpiOSBuUeRD2o9CDuQdKDtAfFta7F5HJOPSij6GvY+vt2t729e9ocFm4+fjzf/1jH+f7P62a2pPN193K/efjYbfaLO4/rOvep47qW+mu/lGnYKJrXRXW/uT+xYnVdPA/HHI77Lw==",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = std::wrapping_mul(std::wrapping_mul(z, z), x[i]);\n        z = std::wrapping_add(z, std::wrapping_sub(x[i] * y[i], c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = std::wrapping_sub(i as u32, 2 as u32);\n            z = std::wrapping_mul(z, c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
