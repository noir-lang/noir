---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tdvZTiM7EAbgd8k1F3ZtLs+rHI1GLGEUCQFiOdIR4t1Ph8Ed1K509DvDDUqjfHbb5V5csd82N9ur19+/dve3D8+bH/+8be4eri9fdg/309Hb+8Xm6ml3d7f7/evrvzdp/8fk4/vPj5f3+8Pnl8unl82PnPPFZnt/s/+kk7/d3W03PzS9/7zYmMLCYFFQUSgUUpoQX4q4Ha5N1LwUYTsop09B2ZaiwMJhUVHhYV9xkk/Badm7HvaVJP8UYrwUYV+JUxO1LEWBhcOioqImWORIqNin0OlrCxH2rlrrXbW6FGHLrbbRXqirI2x5kdqELuvIKeEk44RwwjgJb3PF25Av7h0Je8xTi6OnZeRzDtvipQ0Wr9aRsC2V2l2osnZEcKI4MZwUnIQDeRp63O7CKfd9VgcQpRGURxCNIB5BMoJ0BB3pcpufr8m6K4h5BMkI0hFkI6iMIB9BI10uaQTlEUQjaGREyJE41cOArdKheuQN0uZXSKYlUhqoSXkEyQjSkTbZCCojyEfQSJwsjSCGn+fx5MipBcmpJ4oTw0kYH+f2zu/cDR5znFSYlHSiLQHJOCGcME4EJ4oTw0nBSRz97CukwsQTTjJOCCdxXHS+9rW7xOLJ5eq7fDzzW62lHpkxtKmMe9eWyjgRnChODCcFJ46TeCSXMpPlvITiue86yTiJo+9+dIxRPPddJ4ITPdGWgBhOCk4cJxW9kKfcGU4yTggnjBPBSUHzURTP43UeY1qpIxUm8Rx+ncTZuKoz6doSz9/XCeNETrWlJ4oTw0nBieOkwoQTTjJO4ujPmcKIME4EJ4qTMPom7dq30pOCE8dJhUmc2VgnGSeEE8aJoOl7EsWJ4aTgxHFSYaIJJxknhBPGCR59xaOvePQVj77i0Vc8+oZH3/DoGx59w6NvePQNj77h0Tc8+oZH3/Dox9keppaG4i7XR3G2h23+hdtLRwQnihPDScGJ46TCJM72rJPwqmRvk3eu3BHCCeMkjv78oz132XiKc0rrxHBScOI4qTCJF0ask4yTMPqibYyJekcYJ4KTeEXMvN4oIoaTghPHSUUJx/mxdZJxQjiJo0/t2hejjghOFCeGk4ITx0mFSZwfWydx9I+tILvovjpNAFvx08TucKMgCr7MVNpSwenjIe+a6c/J0Nknkw8nQ2eeDP/NniH7ejIf5cu55XOlQ/mlK1+/uXz75vLLN5fv31x+/d7y46TrXywfuzN8EMJJvHZiZX0wx7nTbPMSDetJwYnjpMIkzp2uk4wTwgnjJLyh5fkmm4t2RHFiODkV/YA4TipMJOEk44RwwjgRnMAr/fnImrNVUnDiOKkwiXOnqyTObEy5q3lTgYme9dZzZC/F1xq8Lh8VR7ZTnEDxjgo7PJSslvPaUk+eVu1OK86eTEnINpCppNShPIJoBPEIkhGkI8hGUBwnp/YSMGWO6KyRECdFpmIPNciZNeSTbRBZNjzOokzZuHRA2iEeQTKCdATZCCojyHEkcbZjPbiSaAQxit6no38vn3aXV3fbzw2Ct6/311/2C77897hdbB18fHq43t68Pm33mwgP+wf3lUu90Ppzv2VmOmDlC1bfH+67gKfT4MJTnVO9/wM=",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = std::wrapping_mul(std::wrapping_mul(z, z), x[i]);\n        z = std::wrapping_add(z, std::wrapping_sub(x[i] * y[i], c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = std::wrapping_sub(i as u32, 2 as u32);\n            z = std::wrapping_mul(z, c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
