---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "t",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "vZnRTiM7DIbfpddcTOLETniV1QoVKKtKVUFdONIR4t2P/2T+YRapiE3FucFfafzHSewk03nd3O9uX37d7I8Pj7831z9eN7en/eGw/3VzeLzbPu8fj/7f182EP5o21+Fqo7kb7caasbi5jm78O3Hj3yU31k3ppjZTvGV24y3Vjbc0N9ZN6aY2U6duwua6uHGH6sabhMmttwnecZgmQiBEghAQeQTAywMMAW0SAG0yIBEyQQlGQOcKqDPEiRAIkSCERMgEKBvACIVQZ5CJEAiRIAS6J7ZJbJPYJqH3AsgEJRihEOoMeSIEAnUyvHwlgrKNso1GgrBNImSCEhadMoOFeXVaNk0AISSC60SsKXKsgxFcJ2KVkWkNykQIhEgQQiJkApQRBrKyQyHUGZCbHaCDRKo6ZxQyE/+JyMyYAYEQCUJIhExQAnpXQCHUGQKUDRAIkQDlAkiETFCC9VBjy+cGdYaWzw0CIRJ6AUYkb2xghEJwGfFVikjeDoHgMhIAQkiETFCCEQqhzpCgHAGBEAlCgLIAMkEJRiiEOgNSvkMgQBlDz0JIhExQghEKoc6AQukQCFRWKiuVlcpKZaWyUlmpbFQ2KhuVjcpGZaMySgd7aETpNEChCJIOhSLIIxRKByEkQiYowQiFgAiRayiUDoHgygmdonQ6JEImKMEIhVA7CMorBUAgRAKUIyARMkEJRiiEOgPKqwOUBRAJQkiETFCCEQoByl64gvJKBQDlCsBxiJhxXHRIhH5ECgqu2drOWEFx5QaBEAlCSIRMUIIRPLyM8FBcDVBcHaCcAJEghETIBCUYoRBquw9Iqy3YMNs4W5lt6hY7d/b8ESRkxkQhITu4i2LdkZCK+UFCKgbS7hINdAZknSIAZJ1i8pB1CmVknWLmkXUd4F7f3q42vPPcPJ92O1x5Vpcgvxo9bU+74/Pm+vhyOFxt/tkeXlqj30/bY7PP25N/6zHujvduXfBhf9iB3q7evafzrgERNmc/Cxf3/GV/P1dmfz9YRvxRPd0/2Yg/prr7WxzwF+XkiY6MPyGvm39SHfDPgfFnGek/F8afy8j868T4dZIBf4vMH0sj8Zsxf6yM9F+mMvuXMLL+RTh/ZWj+S+X61TgN+Fdsyd0/1xH/yvWrdaR+/PmEBeg4MoMhhGUL8ceVIYU0LQp5pIpKYgglD60ijo7Zv1zY/5h/vMx/2QVKGRl/XXbxOpUh/7D4D2VxiJdV0Xv/Q/4al10w6pA/q1hFLut/zD+Uy/yNu5jWs+sXPl3AiRnoa5kXCalfPoiXEKSMpGBaDrIUzi6h6HcOIQmrKIldNgQ5uxNL/dYhWGYINlLIScuF/txIUz2byPpZIS33Sa9kPTcDKX12Ik5LKjqv9tOPIvmTbPbHY6azPwUvEn5H+Ys4yiqOej4O++441vOxWpa/m9RcVyLpnEieLh7MZ08LgUHEOPS0stx249BtcdX/kL/pclExXRXYx0nMn61EfH/km9YPTR9F9OKV+HocEnRsMBLe00ri+bSq/+dgog5svX+sbRlR8JcOWZYo0uom+UFD5TuLzLvWVRh6Poz8zWGsZ8OmsRkVXWmc3YNx7I0M5ad/2t7tT3+8+3qD1mm/vT3s5o8PL8e71bfP/z7xG747ezo93u3uX047KL2/QPNfnn74E2auP/Eqyj+I/9YlGvEx4KOf92L28w2h/Ac=",
  "file_map": {
    "12": {
      "source": "// docs:start:from-trait\npub trait From<T> {\n    fn from(input: T) -> Self;\n}\n// docs:end:from-trait\n\nimpl<T> From<T> for T {\n    fn from(input: T) -> T {\n        input\n    }\n}\n\n// docs:start:into-trait\npub trait Into<T> {\n    fn into(self) -> T;\n}\n\nimpl<T, U> Into<T> for U\nwhere\n    T: From<U>,\n{\n    fn into(self) -> T {\n        T::from(self)\n    }\n}\n// docs:end:into-trait\n\n// docs:start:from-impls\n// Unsigned integers\n\nimpl From<u8> for u32 {\n    fn from(value: u8) -> u32 {\n        value as u32\n    }\n}\n\nimpl From<u8> for u64 {\n    fn from(value: u8) -> u64 {\n        value as u64\n    }\n}\nimpl From<u32> for u64 {\n    fn from(value: u32) -> u64 {\n        value as u64\n    }\n}\n\nimpl From<u8> for u128 {\n    fn from(value: u8) -> u128 {\n        value as u128\n    }\n}\nimpl From<u32> for u128 {\n    fn from(value: u32) -> u128 {\n        value as u128\n    }\n}\nimpl From<u64> for u128 {\n    fn from(value: u64) -> u128 {\n        value as u128\n    }\n}\n\nimpl From<u8> for Field {\n    fn from(value: u8) -> Field {\n        value as Field\n    }\n}\nimpl From<u32> for Field {\n    fn from(value: u32) -> Field {\n        value as Field\n    }\n}\nimpl From<u64> for Field {\n    fn from(value: u64) -> Field {\n        value as Field\n    }\n}\n\nimpl From<u128> for Field {\n    fn from(value: u128) -> Field {\n        value as Field\n    }\n}\n\n// Signed integers\n\nimpl From<i8> for i32 {\n    fn from(value: i8) -> i32 {\n        value as i32\n    }\n}\n\nimpl From<i8> for i64 {\n    fn from(value: i8) -> i64 {\n        value as i64\n    }\n}\nimpl From<i32> for i64 {\n    fn from(value: i32) -> i64 {\n        value as i64\n    }\n}\n\n// Booleans\nimpl From<bool> for u8 {\n    fn from(value: bool) -> u8 {\n        value as u8\n    }\n}\nimpl From<bool> for u32 {\n    fn from(value: bool) -> u32 {\n        value as u32\n    }\n}\nimpl From<bool> for u64 {\n    fn from(value: bool) -> u64 {\n        value as u64\n    }\n}\nimpl From<bool> for i8 {\n    fn from(value: bool) -> i8 {\n        value as i8\n    }\n}\nimpl From<bool> for i32 {\n    fn from(value: bool) -> i32 {\n        value as i32\n    }\n}\nimpl From<bool> for i64 {\n    fn from(value: bool) -> i64 {\n        value as i64\n    }\n}\nimpl From<bool> for Field {\n    fn from(value: bool) -> Field {\n        value as Field\n    }\n}\n// docs:end:from-impls\n\n/// A generic interface for casting between primitive types,\n/// equivalent of using the `as` keyword between values.\n///\n/// # Example\n///\n/// ```\n/// let x: Field = 1234567890;\n/// let y: u8 = x as u8;\n/// let z: u8 = x.as_();\n/// assert_eq(y, z);\n/// ```\npub trait AsPrimitive<T> {\n    /// The equivalent of doing `self as T`.\n    fn as_(self) -> T;\n}\n\n#[generate_as_primitive_impls]\ncomptime fn generate_as_primitive_impls(_: FunctionDefinition) -> Quoted {\n    let types = [\n        quote { bool },\n        quote { u8 },\n        quote { u16 },\n        quote { u32 },\n        quote { u64 },\n        quote { u128 },\n        quote { i8 },\n        quote { i16 },\n        quote { i32 },\n        quote { i64 },\n        quote { Field },\n    ];\n\n    let mut impls = &[];\n    for type1 in types {\n        for type2 in types {\n            impls = impls.push_back(\n                quote {\n                impl AsPrimitive<$type1> for $type2 {\n                    fn as_(self) -> $type1 {\n                        self as $type1\n                    }\n                }\n            },\n            );\n        }\n    }\n    impls.join(quote {})\n}\n",
      "path": "std/convert.nr"
    },
    "39": {
      "source": "use crate::convert::AsPrimitive;\n\n// docs:start:add-trait\npub trait Add {\n    fn add(self, other: Self) -> Self;\n}\n// docs:end:add-trait\n\nimpl Add for Field {\n    fn add(self, other: Field) -> Field {\n        self + other\n    }\n}\n\nimpl Add for u128 {\n    fn add(self, other: u128) -> u128 {\n        self + other\n    }\n}\nimpl Add for u64 {\n    fn add(self, other: u64) -> u64 {\n        self + other\n    }\n}\nimpl Add for u32 {\n    fn add(self, other: u32) -> u32 {\n        self + other\n    }\n}\nimpl Add for u16 {\n    fn add(self, other: u16) -> u16 {\n        self + other\n    }\n}\nimpl Add for u8 {\n    fn add(self, other: u8) -> u8 {\n        self + other\n    }\n}\nimpl Add for u1 {\n    fn add(self, other: u1) -> u1 {\n        self + other\n    }\n}\n\nimpl Add for i8 {\n    fn add(self, other: i8) -> i8 {\n        self + other\n    }\n}\nimpl Add for i16 {\n    fn add(self, other: i16) -> i16 {\n        self + other\n    }\n}\nimpl Add for i32 {\n    fn add(self, other: i32) -> i32 {\n        self + other\n    }\n}\nimpl Add for i64 {\n    fn add(self, other: i64) -> i64 {\n        self + other\n    }\n}\n\n// docs:start:sub-trait\npub trait Sub {\n    fn sub(self, other: Self) -> Self;\n}\n// docs:end:sub-trait\n\nimpl Sub for Field {\n    fn sub(self, other: Field) -> Field {\n        self - other\n    }\n}\n\nimpl Sub for u128 {\n    fn sub(self, other: u128) -> u128 {\n        self - other\n    }\n}\nimpl Sub for u64 {\n    fn sub(self, other: u64) -> u64 {\n        self - other\n    }\n}\nimpl Sub for u32 {\n    fn sub(self, other: u32) -> u32 {\n        self - other\n    }\n}\nimpl Sub for u16 {\n    fn sub(self, other: u16) -> u16 {\n        self - other\n    }\n}\nimpl Sub for u8 {\n    fn sub(self, other: u8) -> u8 {\n        self - other\n    }\n}\nimpl Sub for u1 {\n    fn sub(self, other: u1) -> u1 {\n        self - other\n    }\n}\n\nimpl Sub for i8 {\n    fn sub(self, other: i8) -> i8 {\n        self - other\n    }\n}\nimpl Sub for i16 {\n    fn sub(self, other: i16) -> i16 {\n        self - other\n    }\n}\nimpl Sub for i32 {\n    fn sub(self, other: i32) -> i32 {\n        self - other\n    }\n}\nimpl Sub for i64 {\n    fn sub(self, other: i64) -> i64 {\n        self - other\n    }\n}\n\n// docs:start:mul-trait\npub trait Mul {\n    fn mul(self, other: Self) -> Self;\n}\n// docs:end:mul-trait\n\nimpl Mul for Field {\n    fn mul(self, other: Field) -> Field {\n        self * other\n    }\n}\n\nimpl Mul for u128 {\n    fn mul(self, other: u128) -> u128 {\n        self * other\n    }\n}\nimpl Mul for u64 {\n    fn mul(self, other: u64) -> u64 {\n        self * other\n    }\n}\nimpl Mul for u32 {\n    fn mul(self, other: u32) -> u32 {\n        self * other\n    }\n}\nimpl Mul for u16 {\n    fn mul(self, other: u16) -> u16 {\n        self * other\n    }\n}\nimpl Mul for u8 {\n    fn mul(self, other: u8) -> u8 {\n        self * other\n    }\n}\nimpl Mul for u1 {\n    fn mul(self, other: u1) -> u1 {\n        self * other\n    }\n}\n\nimpl Mul for i8 {\n    fn mul(self, other: i8) -> i8 {\n        self * other\n    }\n}\nimpl Mul for i16 {\n    fn mul(self, other: i16) -> i16 {\n        self * other\n    }\n}\nimpl Mul for i32 {\n    fn mul(self, other: i32) -> i32 {\n        self * other\n    }\n}\nimpl Mul for i64 {\n    fn mul(self, other: i64) -> i64 {\n        self * other\n    }\n}\n\n// docs:start:div-trait\npub trait Div {\n    fn div(self, other: Self) -> Self;\n}\n// docs:end:div-trait\n\nimpl Div for Field {\n    fn div(self, other: Field) -> Field {\n        self / other\n    }\n}\n\nimpl Div for u128 {\n    fn div(self, other: u128) -> u128 {\n        self / other\n    }\n}\nimpl Div for u64 {\n    fn div(self, other: u64) -> u64 {\n        self / other\n    }\n}\nimpl Div for u32 {\n    fn div(self, other: u32) -> u32 {\n        self / other\n    }\n}\nimpl Div for u16 {\n    fn div(self, other: u16) -> u16 {\n        self / other\n    }\n}\nimpl Div for u8 {\n    fn div(self, other: u8) -> u8 {\n        self / other\n    }\n}\nimpl Div for u1 {\n    fn div(self, other: u1) -> u1 {\n        self / other\n    }\n}\n\nimpl Div for i8 {\n    fn div(self, other: i8) -> i8 {\n        self / other\n    }\n}\nimpl Div for i16 {\n    fn div(self, other: i16) -> i16 {\n        self / other\n    }\n}\nimpl Div for i32 {\n    fn div(self, other: i32) -> i32 {\n        self / other\n    }\n}\nimpl Div for i64 {\n    fn div(self, other: i64) -> i64 {\n        self / other\n    }\n}\n\n// docs:start:rem-trait\npub trait Rem {\n    fn rem(self, other: Self) -> Self;\n}\n// docs:end:rem-trait\n\nimpl Rem for u128 {\n    fn rem(self, other: u128) -> u128 {\n        self % other\n    }\n}\nimpl Rem for u64 {\n    fn rem(self, other: u64) -> u64 {\n        self % other\n    }\n}\nimpl Rem for u32 {\n    fn rem(self, other: u32) -> u32 {\n        self % other\n    }\n}\nimpl Rem for u16 {\n    fn rem(self, other: u16) -> u16 {\n        self % other\n    }\n}\nimpl Rem for u8 {\n    fn rem(self, other: u8) -> u8 {\n        self % other\n    }\n}\nimpl Rem for u1 {\n    fn rem(self, other: u1) -> u1 {\n        self % other\n    }\n}\n\nimpl Rem for i8 {\n    fn rem(self, other: i8) -> i8 {\n        self % other\n    }\n}\nimpl Rem for i16 {\n    fn rem(self, other: i16) -> i16 {\n        self % other\n    }\n}\nimpl Rem for i32 {\n    fn rem(self, other: i32) -> i32 {\n        self % other\n    }\n}\nimpl Rem for i64 {\n    fn rem(self, other: i64) -> i64 {\n        self % other\n    }\n}\n\n// docs:start:neg-trait\npub trait Neg {\n    fn neg(self) -> Self;\n}\n// docs:end:neg-trait\n\n// docs:start:neg-trait-impls\nimpl Neg for Field {\n    fn neg(self) -> Field {\n        -self\n    }\n}\n\nimpl Neg for i8 {\n    fn neg(self) -> i8 {\n        -self\n    }\n}\nimpl Neg for i16 {\n    fn neg(self) -> i16 {\n        -self\n    }\n}\nimpl Neg for i32 {\n    fn neg(self) -> i32 {\n        -self\n    }\n}\nimpl Neg for i64 {\n    fn neg(self) -> i64 {\n        -self\n    }\n}\n// docs:end:neg-trait-impls\n\n// docs:start:wrapping-add-trait\npub trait WrappingAdd {\n    fn wrapping_add(self, y: Self) -> Self;\n}\n// docs:end:wrapping-add-trait\n\nimpl WrappingAdd for u1 {\n    fn wrapping_add(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingAdd for u8 {\n    fn wrapping_add(self: u8, y: u8) -> u8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u16 {\n    fn wrapping_add(self: u16, y: u16) -> u16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u32 {\n    fn wrapping_add(self: u32, y: u32) -> u32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u64 {\n    fn wrapping_add(self: u64, y: u64) -> u64 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for u128 {\n    fn wrapping_add(self: u128, y: u128) -> u128 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i8 {\n    fn wrapping_add(self: i8, y: i8) -> i8 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i16 {\n    fn wrapping_add(self: i16, y: i16) -> i16 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i32 {\n    fn wrapping_add(self: i32, y: i32) -> i32 {\n        wrapping_add_hlp(self, y)\n    }\n}\n\nimpl WrappingAdd for i64 {\n    fn wrapping_add(self: i64, y: i64) -> i64 {\n        wrapping_add_hlp(self, y)\n    }\n}\nimpl WrappingAdd for Field {\n    fn wrapping_add(self: Field, y: Field) -> Field {\n        self + y\n    }\n}\n\n// docs:start:wrapping-sub-trait\npub trait WrappingSub {\n    fn wrapping_sub(self, y: Self) -> Self;\n}\n// docs:start:wrapping-sub-trait\n\nimpl WrappingSub for u1 {\n    fn wrapping_sub(self: u1, y: u1) -> u1 {\n        self ^ y\n    }\n}\n\nimpl WrappingSub for u8 {\n    fn wrapping_sub(self: u8, y: u8) -> u8 {\n        wrapping_sub_hlp(self, y) as u8\n    }\n}\n\nimpl WrappingSub for u16 {\n    fn wrapping_sub(self: u16, y: u16) -> u16 {\n        wrapping_sub_hlp(self, y) as u16\n    }\n}\n\nimpl WrappingSub for u32 {\n    fn wrapping_sub(self: u32, y: u32) -> u32 {\n        wrapping_sub_hlp(self, y) as u32\n    }\n}\nimpl WrappingSub for u64 {\n    fn wrapping_sub(self: u64, y: u64) -> u64 {\n        wrapping_sub_hlp(self, y) as u64\n    }\n}\nimpl WrappingSub for u128 {\n    fn wrapping_sub(self: u128, y: u128) -> u128 {\n        wrapping_sub_hlp(self, y) as u128\n    }\n}\n\nimpl WrappingSub for i8 {\n    fn wrapping_sub(self: i8, y: i8) -> i8 {\n        wrapping_sub_hlp(self, y) as i8\n    }\n}\n\nimpl WrappingSub for i16 {\n    fn wrapping_sub(self: i16, y: i16) -> i16 {\n        wrapping_sub_hlp(self, y) as i16\n    }\n}\n\nimpl WrappingSub for i32 {\n    fn wrapping_sub(self: i32, y: i32) -> i32 {\n        wrapping_sub_hlp(self, y) as i32\n    }\n}\nimpl WrappingSub for i64 {\n    fn wrapping_sub(self: i64, y: i64) -> i64 {\n        wrapping_sub_hlp(self, y) as i64\n    }\n}\nimpl WrappingSub for Field {\n    fn wrapping_sub(self: Field, y: Field) -> Field {\n        self - y\n    }\n}\n\n// docs:start:wrapping-mul-trait\npub trait WrappingMul {\n    fn wrapping_mul(self, y: Self) -> Self;\n}\n// docs:start:wrapping-mul-trait\n\nimpl WrappingMul for u1 {\n    fn wrapping_mul(self: u1, y: u1) -> u1 {\n        self & y\n    }\n}\n\nimpl WrappingMul for u8 {\n    fn wrapping_mul(self: u8, y: u8) -> u8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u16 {\n    fn wrapping_mul(self: u16, y: u16) -> u16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u32 {\n    fn wrapping_mul(self: u32, y: u32) -> u32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\nimpl WrappingMul for u64 {\n    fn wrapping_mul(self: u64, y: u64) -> u64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i8 {\n    fn wrapping_mul(self: i8, y: i8) -> i8 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i16 {\n    fn wrapping_mul(self: i16, y: i16) -> i16 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i32 {\n    fn wrapping_mul(self: i32, y: i32) -> i32 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for i64 {\n    fn wrapping_mul(self: i64, y: i64) -> i64 {\n        wrapping_mul_hlp(self, y)\n    }\n}\n\nimpl WrappingMul for u128 {\n    fn wrapping_mul(self: u128, y: u128) -> u128 {\n        wrapping_mul128_hlp(self, y)\n    }\n}\nimpl WrappingMul for Field {\n    fn wrapping_mul(self: Field, y: Field) -> Field {\n        self * y\n    }\n}\n\nfn wrapping_add_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\nfn wrapping_sub_hlp<T>(x: T, y: T) -> Field\nwhere\n    T: AsPrimitive<Field>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    x.as_() + 340282366920938463463374607431768211456 - y.as_()\n}\n\nfn wrapping_mul_hlp<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\nglobal two_pow_64: u128 = 0x10000000000000000;\n/// Splits a 128 bits number into two 64 bits limbs\nunconstrained fn split64(x: u128) -> (u64, u64) {\n    let lo = x as u64;\n    let hi = (x / two_pow_64) as u64;\n    (lo, hi)\n}\n\n/// Split a 128 bits number into two 64 bits limbs\n/// It will fail if the number is more than 128 bits\nfn split_into_64_bit_limbs(x: u128) -> (u64, u64) {\n    // Safety: the limbs are constrained below\n    let (x_lo, x_hi) = unsafe { split64(x) };\n    assert(x as Field == x_lo as Field + x_hi as Field * two_pow_64 as Field);\n    (x_lo, x_hi)\n}\n\n#[field(bn254)]\nfn wrapping_mul128_hlp(x: u128, y: u128) -> u128 {\n    let (x_lo, x_hi) = split_into_64_bit_limbs(x);\n    let (y_lo, y_hi) = split_into_64_bit_limbs(y);\n    // Multiplication using the limbs:(x_lo + 2**64*x_hi)*(y_lo + 2**64*y_hi)=x_lo*y_lo+...\n    // and skipping the terms over 2**128\n    // Working with u64 limbs ensures that we cannot overflow the field modulus.\n    let low = x_lo as Field * y_lo as Field;\n    let lo = low as u64 as Field;\n    let carry = (low - lo) / two_pow_64 as Field;\n    let high = x_lo as Field * y_hi as Field + x_hi as Field * y_lo as Field + carry;\n    let hi = high as u64 as Field;\n    (lo + two_pow_64 as Field * hi) as u128\n}\n",
      "path": "std/ops/arith.nr"
    },
    "50": {
      "source": "use std::ops::{WrappingAdd, WrappingMul, WrappingSub};\n\n//Basic tests for arrays\nfn main(x: [u32; 5], y: [u32; 5], mut z: u32, t: u32) {\n    let mut c = 2301;\n    z = y[4];\n    //Test 1:\n    for i in 0..5 {\n        c = z * z * y[i];\n        z -= c;\n    }\n    assert(z == 0); //y[4]=0, so c and z are always 0\n    //Test 2:\n    c = 2301 as u32;\n    for i in 0..5 {\n        c = t + 2 as u32;\n        c = z.wrapping_mul(z).wrapping_mul(x[i]);\n        z = z.wrapping_add((x[i] * y[i]).wrapping_sub(c));\n    }\n    assert(z == 3814912846);\n    //Test 3:\n    c = 2300001 as u32;\n    z = y[4];\n    for i in 0..5 {\n        z = z + x[i] * y[i];\n        for _i in 0..3 {\n            c = (i as u32).wrapping_sub(2 as u32);\n            z = z.wrapping_mul(c);\n        }\n    }\n    assert(z == 41472);\n    //Test 4:\n    z = y[4];\n    for i in 0..3 {\n        z += x[i] * y[i];\n        for j in 0..2 {\n            z += x[i + j] - y[i + j];\n        }\n    }\n    assert(z == 11539);\n    //Test 5:\n    let cc = if z < 1 { x } else { y };\n    assert(cc[0] == y[0]);\n    // Test 6: for-each loops\n    for y_elem in y {\n        for x_elem in x {\n            assert(x_elem != y_elem);\n        }\n    }\n    // Test 7: Arrays of tuples/structs\n    let mut tuple_array = [(1, 2), (3, 4), (5, 6)];\n    tuple_array[1] = (7, 8);\n    assert(tuple_array[1].1 == 8);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
