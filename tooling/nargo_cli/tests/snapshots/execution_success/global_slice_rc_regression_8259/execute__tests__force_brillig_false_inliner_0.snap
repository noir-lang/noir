---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2Z227TQBCG7fgUp0mTJm1p7pGQuADn0KbcRYIeXsNpiMQNQogH8MtwAy9Jg3ac35MJFHkGgpSVol17x9/8Ozve3SS+tymBq33X9uE6ZDZSmbs6q1dGhuwJje1v6PcNuEqszHrsh4SpoV+Jaz/JuDL43u8L2Xx3derqBvQHikJT5leTf51N36TC+BT1T1Ihxor8S+JHNvwscZx3xYaPYyG/AbPjz6DNDdjcFFXdZHMLNrc7OHdgc7fD5h5s7plNx7Ux70kz9TW8ba0p6EXtc3ed1SiPOXllPKdlTiZGfIppDLELhDElbB5CsPd31MTifeSr5Zm+b6NfjQ31U970mD2PwS5W/IesfzmnGGuc0582RVUP9oXQF7O+qNgeY/Px8xzs+DsYgt1raI9YjCz3ElwztNfigaAffa1LUnhlodgEcI/iSnFuoj3rS6EvLKp+Wu46BD/IIh0Rs3/lrruujuEZer4n+I+Z/4pu4R6PSyrYp4L9Og9fuPaRtznfvC2qvLmrs5pl7WOdo19Jk7f9Tvlq/mYLaW/R44/HxI9N+FcLaZ1T5JfvcNOG/574qQ1/SvyWCX+SE//IJj/Ls0nbJj4PxO/Y8Ev9xzb88rzfNeGPy/j0bOa3zM8TG375/vZt+BnxBzbzW66fpzb8FfHPbPgj4p/bxH9J575n3qaUe7xrX8B9vfPXePHU7yLkv8W0Wn0XuWB6eHzobEOxGwpae0IfP4MMBT9DwY/EihRZsSIrUWQ1FVmpIksz9q091XWkyGorsjTzq6PIOlZkac5jd0919RRZJ4qsviJrX3NCc8057GmHPe1/2dMGiqzTPWVp7rWa69eZIkvzHdLMr3NDlvQ/QSCwusK46Fnj/zTGpDUUtOJ6nDxhbNL3rTaM69PnDx+/eKxE0CY4XjcAiEKlRCBRL5kP+uGa+8J2AD64jaTLZ36oH38wD4sqf+7uZzXK7DrLyFcA48LE8pj/iNl/c9e46FMd1tC5muWj1SRf5Zf5cjl9yPuMvy4NiNMPeIRvXLclAAA=",
  "debug_symbols": "tdVNboMwEAXgu7BmwdjGY/cqVRSRxK2QEIkoVKqi3L123qM/C6qqUje8EJjPjjOGa3VKh+V5349P55fq4fFaHaZ+GPrn/XA+dnN/HvO316ophzYfpa5aQRiERThEi/AIRQREvIeH4qF4KB6Kh+KheCgeiofioSgUhaJQFIpCUSgKRaEoFIUSoAQoAUqAEqAEKAFKgBKgBCgRSoQSoUQoEUqEEqFEKBFKhCJNwxSmYVqmY7ZMz1RmYNITekJP6Ak9oSf0hJ7QE3pCz9Az9Aw9Q8/QM/QMPUPP0DP0LD1Lz9Kz9Cw9S8/Ss/QsPUvP0XP0HD1Hz9Fz9Bw9R8/Rc/TY7sJ+Fza8sOOFLS/seWHTC7teStubkhFZGv+ewjTM7Jnbra7WHbefp5TKhvuyBfPGvHRTGufqYVyGoa5eu2G53/Ry6cZ7zt2UrzZ1lcZTzgw+9UMqn271Z3WzXRqisDga+1FuzG/r1SnrNTR/qmd5CB/V7ffZ2+3qvK4sF99u1f8wuvfr6HGruv2/tYvtOvlGt4bXvwy/y2fdsZ++P89zC+afmxuwrPRrN/XdYUjlSqldxuN6Yz6d3y7rlfXVcJnOx3RaplTQz/dD7uNH62vnd+UplE/yH1GLNrtbmcY7",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32, T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "global G_C: [bool] = &[true, false, true];\nfn main(a: bool) {\n    println(func_1(a, G_C));\n    println(G_C);\n}\nfn func_1(a: bool, mut b: [bool]) -> [bool] {\n    b[1] = a;\n    b\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "print_unconstrained"
  ]
}
