---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2ZzW7aQBCA12AHlp9AIAkP0FtPjg2B3pBKStq3MFCkXqqq6gP4iXrtpZX6aJWVHXuYjJ0gz0hUYi5r766/+dnZH9ueKcRzpU/uDdNn6cqwntwJskLW0CqBPn9daV3ZQO1NQWct0SvJX4TTjWX8E7Q/to6pGR9gKvDDluN8Sgs+9cWgEvrRZzLpu2ucZ9Cn7drh+o27tuQZjfFXHJ9wzNjfQL5l8j4t2oyRnzsrHX4I/IdUJXYx8NfK/I9KfIj3o+MbU8yTNaoD/ZD/H1CbV1JiFq4DXR3CEvYtqvIN2w+5PmT643EtYz0eybKkTWtM1y/4Dfr75B4/y/lB14I6MVkJssCurnlan3+5euX9J98/AyU+rM2+OYwN9Qn0wx7WQP2PmaNYV8fong2qfMP243HH/WkMylj+kSxb0raU8Tsf02aF31h/v8JW6kcmeI7WjYlnZFjYLlvCXrr7sJbMN9ycl+NHkS2Jkwz/fsOtKYL8d8C/0OF/Bn5Lhz8FfluFHyfAtzr5me8ZHZ34bIHf1eHn9vd0+DPg91X4UR6fS53xzfNzoMPP5+9Qhx8C/0pnfPP1c6TD3wN/rMPPv2lc68R/B/v9jSkE9krQfYvq5c4m0cYj+ozhz4igv0Ns1Toj3hJ7aHzg3AGxmzC2Dpk2egaZMHomjB6O1RRk+YKsQJB1IchqCbIkY98+UbusIKsjyJLMr64gqyfIkhzH/onadSnIGgiyhoKsU80JyTXnvKed9zTN/JK060qQNTpRluReK7l+jQVZknNIMr+uFVmv/W49YPyCZ5X/H0Qespfaitfj4BW+ce9bPfTst+9fvv4wRAJyDx+BQR7SAogN5RIBjHpLmKv0uS6PXDeRDtrHY+o9ogfaB4ydEBjtn/WeOYyLb/gfB2BbwzyPI/7pEJC6n67MNos/hMclEK6jE+eGsacsuTLhfsqeJw6S/33iZG928Abrp4f8pasPa8h88TRBMmkiv3DCG6I/IP1/u3u8Y0Pp17BzP0/u9nGyT2bJbjfdJiPCz6SB4iStP5nHi2003c43sziJ71/U/w+rRC0nQygAAA==",
  "debug_symbols": "tdVLbqNAFIXhvTBmwK3nLW8lsixs4wgJYYvYLbUs9t5VnEMSD8iklUn+csj9CKgMz+rcHR/vh368XD+q3duzOk79MPTvh+F6au/9dcy/fVZN+WFDtTN1ZSOiSFriGkQQg1jEIR6B4qA4KA6Kh+KheCgeis+Kz/FIQCKiSFoSGkQQg1gESoASoAQoAUqAEqFEKBFKhBKhRCgRSoQSoUQoCkWhKBSFolAUikJRKApFoSQoCUqCkqAkKAlKgpKgJCgJijQNK6xhLetYzwY2ssrSE3pCT+gJPaEn9ISe0BN6Qs/QM/QMPUPP0DP0DD1Dz9Az9Cw9S8/Ss/QsPUvP0rP0LD1Lz9Fz9Bw9R8/Rc/QcPUfP0XP0PD1Pz9Pz9LjlhXteuOmFu1647YX7XrjxhTtfytYPpZZ1rGcDG9nspdKElq/AUmENa1nHejZ70pRFXBe6LhIX5QuBhZTFPNfV+qQ53KeuKw+ab4+e/EC6tVM33qvd+BiGuvrTDo/ljz5u7bj03k75aCa78ZybwUs/dGU111/TzfZodJxV/Rz2r9OyPZ3vNsfzfd2a/+HsIaxnT1vTdnta03r2ZOznvDEv8+735qOLnI/abM3/cPXJrzeviVuXH//z39ffm9++/H3+1J766eU9Ohdp6tvj0PHj5TGevh29/72tR9b38G26nrrzY+qK9PUyLs/eN1Fbi+q+PEOXj6mWJPu5nP4f",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "global G_C: [bool] = &[true, false, true];\nfn main(a: bool) {\n    println(func_1(a, G_C));\n    println(G_C);\n}\nfn func_1(a: bool, mut b: [bool]) -> [bool] {\n    b[1] = a;\n    b\n}",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
