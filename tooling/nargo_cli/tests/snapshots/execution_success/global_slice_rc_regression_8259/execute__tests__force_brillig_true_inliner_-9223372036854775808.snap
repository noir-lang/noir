---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZO28TQRBev3I+P2LnSVLTpXJ8foQuEoYEGhqQaCjOToxoEEL8gPufSBSImg5BSS7Z8X2ZG9sxmZGMlJGsvd2Z/eaxM7vru4LLqODbMus7QebUt5370bEiVkc0dBGRzB/fhr4tAr+k6GzI9Grin3R641DwT9H+KPSYlvEhTAP8TuBxXiYZPvfFQUtyfE5KTf+MeUYyVc+n58f+OWRzLNbfcH06O4L9RfAtpadJxnNOv3ZGNvgdwn+WmMQuIvwzY/wXRvgU73OP71xWJ2cwRvop/58DrzCnRSwcI101hqW97yzyDe2nXG8L8riu87DOV8QKGc9qTc+W+E36m6yPcyU/+F5wn5iMFLHIrrq72Z9f+fGWu72npURxsD6baF+ly1fZ43OdRfAP5fE5pQobO/Jt6u8bmMP9LQljPJZYh7j/F7xeg/gM6LzdcHkiXsD8Ql4V5GmPJx7em9A3TiXWR39T/Legk8txW/GMDhgP15Tstrw7XFG/yfxxgs0Ye6ohKfZFNq8KvEV/LqT4klyK8R5wuRxRy+XvZbyGre5Hi2q4KPi0ag2PIBa8hvlZyscW1TDJGedYj+c3kpR/PMcw/3gNB8BbtYZXzbH03KA9o5xkfK1YDU9ucunaXo9fcXnbUX+Fyb/2/Rqzn+J/+o92Tofx8TSKp3E/vrjoTeJthp9SEeKkrT8eRieTbm8yHPejOBos1Y/ne+jy9aZ9j8QcpjXjOovAR/l3vk1t/uqfKQ9pXclmkvsGcrx+ysltvwMbvyPyG+uz5PL3AX4+B4L8BshQzNpu+fmO+cXPH9x7yZ675EZBLUbDsXQ/0sPvdkMhfnr4g3E4Zw2U8J8QftUG/5LwQxv8HuHXTPCjmPDrNvk5e7fXsInPhPCbNvgz+zdt8PuE3zLB787i07ZZ31l+btngz+p32wa/Q/g7Nus72z93bfCnhL9ngz97d75vE/8LOksfuYz4/4YDGNe7X3THBabPufz7QtRfY7Za3fMOmD08PvwecijY2hZ4/A5yKOg5FPRIWBVFrA1FrEARq6qIFSpiaca+tqZ21RWxGopYmvnVVMTaVMTSXMfWmtrVVsTaUsTaVsRa15zQ3HMezrSHM+1/OdN2FLF21xRL86zV3L/2FLE0a0gzv/YNsaR3sCUBqyX4RXON3xd3ydayYCvux8EdfJP+bzXAr0+fP3z84hjhS3ICx/6ij+yVOUYdMR2jRNaFzyXQwWUkuwpMD/EtPrRM+oPxpNePO5fH14u27EMLXSArScbHjxYpbfg+fRjl8vhhBOW/U//q98M/06W8nOT1pXK//RgdflWwRTuZUwrQDmYP6m8J8vRsbGu0yNZAsFWKcWFOi1g4FiS3x8IkL49xCpjuGsozXh14Zaan4fuYa4hFdlSY/C/fp3Wqwhya3xb045pxXZJ+/CjFsUrCGMmnuf2T8HxbTjIszRddWEdpjf8FF6zd0y4uAAA=",
  "debug_symbols": "tdXdaqtAFEDhd/HaC2fPz57pq5RSbGqLICbY5MCh5N3P6F5J24tA6aE3WTG6PyUw43vzPDydXh/H+WX/1tzdvzdPyzhN4+vjtN/1x3E/11/fm279CKG5c20ToiVZ1JItZUvsLM4iFm+piq+JlmRRS7aULamzOEtVpMZbgiVakkUt2VK2aFVijbOIxVuCJVqSRbfkOp7apnQWZxFLHdeaYImWZFFLtpQtrquX5rWRJqo002J1HXVUqKd4Ds/hOTyH5/AET/AET/AET/AET/AET/A8nsfzeB7P43k8j+fxPJ7HC3gBL+AFvIAX8AJewAt4AS/iRbyIF/EiXsSLeBEv4kW8hJfwEl7CS3gJL+ElvISX8BRP8RRP8RRP8RRP8RRP8TJexst4GS/jZbyMl/EyXsYreAWv4BW8glfwCl7BK3jFPOk66qhQTwONNFGlmeKxPoT1Iev6KGs9DTTSRKtXzue2uWxvj8dlGNbd7dN+V3fBQ78M87G5m0/T1DZ/+um0XfR26Oetx36pZ7u2Gebn2gq+jNOwfju3H9Pd7VENzOZ8HY7fnk7pMl1uTcvt6Vwc40X8dV7ku3cvkfG6fd26ffi929dFd7l/Cj/48+oivs7HH8z/7/NrUOY1d1/mH+pRvxuXLy/f8yotY/80DRy+nObdp7PHv4fLmcvL+7Dsd8PzaRlW6eMNXhfJvYi0EvRhfdnUQy1tDutBXUj3ObZZH87rg/wD",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "global G_C: [bool] = &[true, false, true];\nfn main(a: bool) {\n    println(func_1(a, G_C));\n    println(G_C);\n}\nfn func_1(a: bool, mut b: [bool]) -> [bool] {\n    b[1] = a;\n    b\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
