---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "priv_key",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "pub_x",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "pub_y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "rZjRbhs5DEX/xc95GImUSPVXiqJIU7cwYDiBmyywKPLvK4k6bvqQRTG7L7kncXiGo+GMZf88fD1+efn++XT59vjj8OHjz8OX6+l8Pn3/fH58uH8+PV76X38etvEjtcOHdHfIW0SKyBESoRElokZYhEeERcIiYZGwSFgkLBIWCYuERcIiYdGwaFg0LNotuYdGlIgaYREe0WaULSJF5IhukR4aUSJqRLdoD49oM+oW0S21R46QCI0oETXCIjyizbAtIiwWFguLhcW6xXvUCIvwiDbDt4gUkSMkQiPC4mHxsHhYvFva3aFtESkiR0iERpSIGmERHhGWtG0r08q8UlbqyrKyrrSVvnL50vKl5UvLl5YvLV9avrR8afnS8qXly8uXly8v35zpbYACBaiAAQ60BXPCJyQgA8OcBihQgAoMcx7gQFswp35CAjIggAIFqABmxayYC+aCuWAumAvmgrlgLpgL5oK5Yq6YK+aKuWKumCvmirlirpgNs2E2zIbZMBtmw2yYDbNhdsyO2TE7ZsfsmB2zY3bMjrlhbpgb5oa5YW6YG+aGuWFuy5zHzZZkQAIyIIACBaiAAQ60BeO2SzogARkQQIFhLgMqYIADbcF8R5mQgAwIoADmjDljzpgzZsEsmAWzYBbMglkwC2bBLJgVs2JWzIpZMStmxayYFbNiLpgL5oK5YC6YC+Z5D9YBBjjQFsx7cEICMiCAAgUYZhtggANtwbwHJyQgAwIoUADMhtkwG2bHPO8dH/uHDUhABgRQoAAVMMCBYW5jS7IBCciAALpgDH+2AQIoUIAKGOBAWzCGPyABmDPmjDlj1nUWog6s9ZGyAQnIgAAKFKACtk5wzs8E1qeyPpX1qaxPpbzSWKWxSmNGY0ZjRmNGY0ZjRmNzSMYhjMaMxozGnMacxpxypzGnMacxJkqYKGGihIkSJkqYKJkTNQ7RaKzRWKMxJkqZKB1jk7cB4wrOneuYjbEHHY/cLAPGbOiAMRtlbGvHbNQBYxJ8gAIFqIABDgzPOPqcsQkJyIAAw9xeX+8O7Pw/P1+Px7Hxf/NRoH9AeLq/Hi/Phw+Xl/P57vDX/fll/tOPp/vLzOf7a3+1n+vx8rVnF347nY+DXu9+VW/vl/bn7yruD+BbefnjehnLOuv7hOypb9T3i7SjXjMnr6I76qty/rXm9+rLv9SP+Yr6km71qf7x8V2o93fXz96v7/tTW4K+H/UdHdhNYHnPCnriCrqnHfWtKSewpT2C/ingtgT9jWaPQfKtB/U9i9B39bceim97DNYcg7U9t1LfMBcMTcseQyu3HprtMWi5XU2tuu0Yx98NssPQN8+cRd8jb7sM5ZehpV2Gdnuu9l39vh7sZki7ziInvRmy/dcesu+7Fm8Me9ahbtp4Qm5tzzr07zK2dnvEtFL/B8fvZ/Kp/3b/cLr+9j3e67BdT/dfzsf167eXy8ObV5//fuIVvgd8uj4+HL++XI/D9ObLwP7zY/Z8l90+vY7j/QM=",
  "file_map": {
    "16": {
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: x_coordinates_match,\n        };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    embedded_curve_add_unsafe(point1, point2)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n",
      "path": "std/embedded_curve_ops.nr"
    },
    "50": {
      "source": "use std::ops::Add;\n\nfn main(priv_key: Field, pub_x: pub Field, pub_y: pub Field) {\n    let g1 = std::embedded_curve_ops::EmbeddedCurvePoint::generator();\n    let scalar = std::embedded_curve_ops::EmbeddedCurveScalar { lo: priv_key, hi: 0 };\n    // Test that multi_scalar_mul correctly derives the public key\n    let res = std::embedded_curve_ops::multi_scalar_mul([g1], [scalar]);\n    assert(res.x == pub_x);\n    assert(res.y == pub_y);\n\n    // Test that double function calling embedded_curve_add works as expected\n    let pub_point =\n        std::embedded_curve_ops::EmbeddedCurvePoint { x: pub_x, y: pub_y, is_infinite: false };\n    let res = pub_point.double();\n    let double = g1.add(g1);\n\n    assert(double.x == res.x);\n\n    // Test calling multi_scalar_mul with multiple points and scalars\n    let res = std::embedded_curve_ops::multi_scalar_mul([g1, g1], [scalar, scalar]);\n\n    // The results should be double the g1 point because the scalars are 1 and we pass in g1 twice\n    assert(double.x == res.x);\n\n    // Tests for #6549\n    let const_scalar1 = std::embedded_curve_ops::EmbeddedCurveScalar { lo: 23, hi: 0 };\n    let const_scalar2 = std::embedded_curve_ops::EmbeddedCurveScalar { lo: 0, hi: 23 };\n    let const_scalar3 = std::embedded_curve_ops::EmbeddedCurveScalar { lo: 13, hi: 4 };\n    let partial_mul = std::embedded_curve_ops::multi_scalar_mul(\n        [g1, double, pub_point, g1, g1],\n        [scalar, const_scalar1, scalar, const_scalar2, const_scalar3],\n    );\n    assert(partial_mul.x == 0x2024c4eebfbc8a20018f8c95c7aab77c6f34f10cf785a6f04e97452d8708fda7);\n    // Check simplification by zero\n    let zero_point = std::embedded_curve_ops::EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true };\n    let const_zero = std::embedded_curve_ops::EmbeddedCurveScalar { lo: 0, hi: 0 };\n    let partial_mul = std::embedded_curve_ops::multi_scalar_mul(\n        [zero_point, double, g1],\n        [scalar, const_zero, scalar],\n    );\n    assert(partial_mul == g1);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
