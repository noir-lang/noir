---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "priv_key",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "pub_x",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "pub_y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _63",
    "private parameters indices : [_0]",
    "public parameters indices : [_1, _2]",
    "return value indices : []",
    "BLACKBOX::MULTI_SCALAR_MUL [(1, 254), (17631683881184975370165255887551781615748388533673675138860, 254), (0, 1), (_0, 254), (0, 254)] [_3, _4, _5]",
    "EXPR [ (-1, _1) (1, _3) 0 ]",
    "EXPR [ (-1, _2) (1, _4) 0 ]",
    "EXPR [ (-1, _6) 0 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_1, 254), (_2, 254), (_6, 1), (_1, 254), (_2, 254), (_6, 1)] [_7, _8, _9]",
    "EXPR [ (-1, _7) 3078034153852398078128400807926804309327113743808504829582559963737223069694 ]",
    "BLACKBOX::MULTI_SCALAR_MUL [(1, 254), (17631683881184975370165255887551781615748388533673675138860, 254), (0, 1), (1, 254), (17631683881184975370165255887551781615748388533673675138860, 254), (0, 1), (_0, 254), (0, 254), (_0, 254), (0, 254)] [_10, _11, _12]",
    "EXPR [ (-1, _10) 3078034153852398078128400807926804309327113743808504829582559963737223069694 ]",
    "BLACKBOX::MULTI_SCALAR_MUL [(1, 254), (17631683881184975370165255887551781615748388533673675138860, 254), (0, 1), (_1, 254), (_2, 254), (0, 1), (11179562631109628533987091031692370366552561688588090155835439555627259799605, 254), (3443719903172018228650470536370404288991794296383447657609081676265727805364, 254), (0, 1), (_0, 254), (0, 254), (_0, 254), (0, 254), (1, 254), (0, 254)] [_13, _14, _15]",
    "EXPR [ (1, _13) 7349266043899242844836273743257843180744506495159104166319746739537754653274 ]",
    "BLACKBOX::MULTI_SCALAR_MUL [(1, 254), (17631683881184975370165255887551781615748388533673675138860, 254), (0, 1), (_0, 254), (0, 254)] [_16, _17, _18]",
    "EXPR [ (1, _18) 0 ]",
    "EXPR [ (1, _16) -1 ]",
    "EXPR [ (1, _17) -17631683881184975370165255887551781615748388533673675138860 ]",
    "EXPR [ (1, _1) (-1, _2) (-1, _19) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 0 })], outputs: [Simple(Witness(20))]",
    "EXPR [ (1, _19, _20) (1, _21) -1 ]",
    "EXPR [ (1, _19, _21) 0 ]",
    "EXPR [ (-17631683881184975370165255887551781615748388533673675138858, _21) (-1, _22) 17631683881184975370165255887551781615748388533673675138860 ]",
    "EXPR [ (-1, _23) 1 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_23, 254), (_22, 254), (_6, 1), (_23, 254), (_22, 254), (_6, 1)] [_24, _25, _26]",
    "EXPR [ (1, _21, _24) (-1, _21) 0 ]",
    "EXPR [ (-3078034153852398078128400807926804309327113743808504829582559963737223069693, _21) (-1, _27) 3078034153852398078128400807926804309327113743808504829582559963737223069694 ]",
    "EXPR [ (9191351987198133172789796342745422989482268917117950487758512501574271532888, _21) (-1, _28) -9191351987198133172789796342745422989482268917117950487758512501574271532885 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_23, 254), (_22, 254), (_6, 1), (_27, 254), (_28, 254), (_6, 1)] [_29, _30, _31]",
    "EXPR [ (1, _21, _29) (-1, _21) 0 ]",
    "EXPR [ (1, _1, _21) (-1, _32) 1 ]",
    "EXPR [ (1, _2, _21) (-17631683881184975370165255887551781615748388533673675138860, _21) (-1, _33) 17631683881184975370165255887551781615748388533673675138860 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_32, 254), (_33, 254), (_6, 1), (_32, 254), (_33, 254), (_6, 1)] [_34, _35, _36]",
    "EXPR [ (1, _21, _34) (-1, _21) 0 ]",
    "EXPR [ (1, _1, _21) (-3078034153852398078128400807926804309327113743808504829582559963737223069693, _21) (-1, _37) 3078034153852398078128400807926804309327113743808504829582559963737223069694 ]",
    "EXPR [ (1, _2, _21) (9191351987198133172789796342745422989482268917117950487758512501574271532886, _21) (-1, _38) -9191351987198133172789796342745422989482268917117950487758512501574271532885 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_32, 254), (_33, 254), (_6, 1), (_37, 254), (_38, 254), (_6, 1)] [_39, _40, _41]",
    "EXPR [ (1, _21, _39) (-1, _21) 0 ]",
    "EXPR [ (1, _21) (-1, _42) 1 ]",
    "EXPR [ (-17631683881184975370165255887551781615748388533673675138857, _21) (-1, _43) 17631683881184975370165255887551781615748388533673675138860 ]",
    "EXPR [ (1, _1, _21) (-3078034153852398078128400807926804309327113743808504829582559963737223069694, _21) (-1, _44) 3078034153852398078128400807926804309327113743808504829582559963737223069694 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_42, 254), (_43, 254), (_6, 1), (_44, 254), (_38, 254), (_6, 1)] [_45, _46, _47]",
    "EXPR [ (1, _21, _45) (-1, _21) 0 ]",
    "EXPR [ (-3078034153852398078128400807926804309327113743808504829582559963737223069692, _21) (-1, _48) 3078034153852398078128400807926804309327113743808504829582559963737223069694 ]",
    "EXPR [ (9191351987198133172789796342745422989482268917117950487758512501574271532889, _21) (-1, _49) -9191351987198133172789796342745422989482268917117950487758512501574271532885 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_42, 254), (_43, 254), (_6, 1), (_48, 254), (_49, 254), (_6, 1)] [_50, _51, _52]",
    "EXPR [ (1, _21, _50) (-1, _21) 0 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_42, 254), (_43, 254), (_6, 1), (_42, 254), (_43, 254), (_6, 1)] [_53, _54, _55]",
    "EXPR [ (1, _21, _53) (-1, _21) 0 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_23, 254), (_43, 254), (_6, 1), (_23, 254), (_43, 254), (_6, 1)] [_56, _57, _58]",
    "EXPR [ (1, _21, _56) (-1, _21) 0 ]",
    "EXPR [ (1, _1, _21) (-1, _21) (-1, _59) 1 ]",
    "EXPR [ (9191351987198133172789796342745422989482268917117950487758512501574271532887, _21) (-1, _60) -9191351987198133172789796342745422989482268917117950487758512501574271532885 ]",
    "BLACKBOX::EMBEDDED_CURVE_ADD [(_59, 254), (_43, 254), (_6, 1), (_44, 254), (_60, 254), (_6, 1)] [_61, _62, _63]",
    "EXPR [ (1, _21, _61) (-1, _21) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "tVjLbuowEP0Xr7PwvPzor1xdVZSmFVIEKIUrXVX9946LndCFUWuS1QGSOcwce04yfjfP/dP59XG3fzm8mYc/7+Zp3A3D7vVxOGw3p91hr7++f3SmfH08jX2vP5mr6xp13Iz9/mQe9udh6My/zXD+uuntuNl/4Wkz6lXbmX7/rKiEL7uhT58+ujna1kMxSA7G4KZw+XE8ecjxjKEWj/V4lsiFwPFcALg2Bqox3KiBeapBpEEDdrHEB2qId7GsgQeoxfsb8VjydwK1+kM93qNgSQAjNTAEsiWFQIw1BrghAgBanzn0s/ASJL5hN3hxRQzfsprBFSki2Vo88N0t8XOKlp4Ay1SEtM426ADkJwahqpIQ7lcirKqEcNkQ4DC2KBF8yQFi5KpLLmCTq/ok2qm50CI3KIHan4UBqImBpFSB5Kq7Cu+1S7zldnbyy2Bj1WMwLuB2eL/rEiyQx29IWlwXKeC0rlea/mJncPKBCwNL9TlKsoQasrIa7OZafGhRw/PUaZ5bXAsDTN0esPpuyPbOTmO4u9MYF1jTm3n8rNOYl8iDV95bga9e+W3TzghFDYxQdXEOS6gRVlYj0lwLQ8sEhFjecwil2ieyxB79DUmLGoR+rqVpliGOZRgiIayq4ZZQw62shvBci7R4KHlfeo2Crfq4W2IucivPRfqAnmuhpjnZSnkmsa3vLreEi7qVXZTBTrUAtLgoE5VeY3JV33BLuKhb2UVZd8RUS/y+sn/122a7G7+dfBmru6gzoLd0BjXBzlD6+87wBSQNkJ1xaf7qjFfQHEMaoDoT0/SgwTa9KyoqS9qagBkpo1KhEoNkdBl9xpBcTjFeEG1GSDamqHyk9yFl5IySOkDRpaFK0WcMGZWPNVtSvmQgBBkxo/KJ5k/KJ5o/SUaX0WdUPlE+Uj5RPrYZIaPyifKx8qUzB1Y+p3Es6X1LUflcus+nIybFkDFeUGw6cPpIqzruNk9Dn48kX8777dUJ5en/sVwpZ5jH8bDtn89jn9b065qu8ic=",
  "file_map": {
    "16": {
      "source": "use crate::cmp::Eq;\nuse crate::hash::Hash;\nuse crate::ops::arith::{Add, Neg, Sub};\n\n/// A point on the embedded elliptic curve\n/// By definition, the base field of the embedded curve is the scalar field of the proof system curve, i.e the Noir Field.\n/// x and y denotes the Weierstrass coordinates of the point, if is_infinite is false.\npub struct EmbeddedCurvePoint {\n    pub x: Field,\n    pub y: Field,\n    pub is_infinite: bool,\n}\n\nimpl EmbeddedCurvePoint {\n    /// Elliptic curve point doubling operation\n    /// returns the doubled point of a point P, i.e P+P\n    pub fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    /// Returns the null element of the curve; 'the point at infinity'\n    pub fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n\n    /// Returns the curve's generator point.\n    pub fn generator() -> EmbeddedCurvePoint {\n        // Generator point for the grumpkin curve (y^2 = x^3 - 17)\n        EmbeddedCurvePoint {\n            x: 1,\n            y: 17631683881184975370165255887551781615748388533673675138860, // sqrt(-16)\n            is_infinite: false,\n        }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    /// Adds two points P+Q, using the curve addition formula, and also handles point at infinity\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    /// Points subtraction operation, using addition and negation\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint {\n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    /// Negates a point P, i.e returns -P, by negating the y coordinate.\n    /// If the point is at infinity, then the result is also at infinity.\n    fn neg(self) -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: self.x, y: -self.y, is_infinite: self.is_infinite }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    /// Checks whether two points are equal\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite)\n            | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\nimpl Hash for EmbeddedCurvePoint {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        if self.is_infinite {\n            self.is_infinite.hash(state);\n        } else {\n            self.x.hash(state);\n            self.y.hash(state);\n        }\n    }\n}\n\n/// Scalar for the embedded curve represented as low and high limbs\n/// By definition, the scalar field of the embedded curve is base field of the proving system curve.\n/// It may not fit into a Field element, so it is represented with two Field elements; its low and high limbs.\npub struct EmbeddedCurveScalar {\n    pub lo: Field,\n    pub hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    #[field(bn254)]\n    pub fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a, b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n\n    //Bytes to scalar: take the first (after the specified offset) 16 bytes of the input as the lo value, and the next 16 bytes as the hi value\n    #[field(bn254)]\n    pub(crate) fn from_bytes(bytes: [u8; 64], offset: u32) -> EmbeddedCurveScalar {\n        let mut v = 1;\n        let mut lo = 0 as Field;\n        let mut hi = 0 as Field;\n        for i in 0..16 {\n            lo = lo + (bytes[offset + 31 - i] as Field) * v;\n            hi = hi + (bytes[offset + 15 - i] as Field) * v;\n            v = v * 256;\n        }\n        let sig_s = crate::embedded_curve_ops::EmbeddedCurveScalar { lo, hi };\n        sig_s\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, other: Self) -> bool {\n        (other.hi == self.hi) & (other.lo == self.lo)\n    }\n}\n\nimpl Hash for EmbeddedCurveScalar {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: crate::hash::Hasher,\n    {\n        self.hi.hash(state);\n        self.lo.hash(state);\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the\n// underlying proof system.\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> EmbeddedCurvePoint\n// docs:end:multi_scalar_mul\n{\n    multi_scalar_mul_array_return(points, scalars)[0]\n}\n\n#[foreign(multi_scalar_mul)]\npub(crate) fn multi_scalar_mul_array_return<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N],\n) -> [EmbeddedCurvePoint; 1] {}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(scalar: EmbeddedCurveScalar) -> EmbeddedCurvePoint\n// docs:end:fixed_base_scalar_mul\n{\n    multi_scalar_mul([EmbeddedCurvePoint::generator()], [scalar])\n}\n\n/// This function only assumes that the points are on the curve\n/// It handles corner cases around the infinity point causing some overhead compared to embedded_curve_add_not_nul and embedded_curve_add_unsafe\n// docs:start:embedded_curve_add\npub fn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    // docs:end:embedded_curve_add\n    if crate::runtime::is_unconstrained() {\n        // `embedded_curve_add_unsafe` requires the inputs not to be the infinity point, so we check it here.\n        // This is because `embedded_curve_add_unsafe` uses the `embedded_curve_add` opcode.\n        // For efficiency, the backend does not check the inputs for the infinity point, but it assumes that they are not the infinity point\n        // so that it can apply the ec addition formula directly.\n        if point1.is_infinite {\n            point2\n        } else if point2.is_infinite {\n            point1\n        } else {\n            embedded_curve_add_unsafe(point1, point2)\n        }\n    } else {\n        // In a constrained context, we also need to check the inputs are not the infinity point because we also use `embedded_curve_add_unsafe`\n        // However we also need to identify the case where the two inputs are the same, because then\n        // the addition formula does not work and we need to use the doubling formula instead.\n        // In unconstrained context, we can check directly if the input values are the same when solving the opcode, so it is not an issue.\n\n        // x_coordinates_match is true if both abscissae are the same\n        let x_coordinates_match = point1.x == point2.x;\n        // y_coordinates_match is true if both ordinates are the same\n        let y_coordinates_match = point1.y == point2.y;\n        // double_predicate is true if both abscissae and ordinates are the same\n        let double_predicate = (x_coordinates_match & y_coordinates_match);\n        // If the abscissae are the same, but not the ordinates, then one point is the opposite of the other\n        let infinity_predicate = (x_coordinates_match & !y_coordinates_match);\n        let point1_1 = EmbeddedCurvePoint {\n            x: point1.x + (x_coordinates_match as Field),\n            y: point1.y,\n            is_infinite: false,\n        };\n        let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n        // point1_1 is guaranteed to have a different abscissa than point2:\n        // - if x_coordinates_match is 0, that means point1.x != point2.x, and point1_1.x = point1.x + 0\n        // - if x_coordinates_match is 1, that means point1.x = point2.x, but point1_1.x = point1.x + 1 in this case\n        // Because the abscissa is different, the addition formula is guaranteed to succeed, so we can safely use `embedded_curve_add_unsafe`\n        // Note that this computation may be garbage: if x_coordinates_match is 1, or if one of the input is the point at infinity.\n        let mut result = embedded_curve_add_unsafe(point1_1, point2_1);\n\n        // `embedded_curve_add_unsafe` is doing a doubling if the input is the same variable, because in this case it is guaranteed (at 'compile time') that the input is the same.\n        let double = embedded_curve_add_unsafe(point1, point1);\n        // `embedded_curve_add_unsafe` would not perform doubling, even if the inputs point1 and point2 are the same, because it cannot know this without adding some logic (and some constraints)\n        // However we did this logic when we computed `double_predicate`, so we set the result to 2*point1 if point1 and point2 are the same\n        result = if double_predicate { double } else { result };\n\n        // Same logic as above for unconstrained context, we set the proper result when one of the inputs is the infinity point\n        if point1.is_infinite {\n            result = point2;\n        }\n        if point2.is_infinite {\n            result = point1;\n        }\n\n        // Finally, we set the is_infinity flag of the result:\n        // Opposite points should sum into the infinity point, however, if one of them is point at infinity, their coordinates are not meaningful\n        // so we should not use the fact that the inputs are opposite in this case:\n        let mut result_is_infinity =\n            infinity_predicate & (!point1.is_infinite & !point2.is_infinite);\n        // However, if both of them are at infinity, then the result is also at infinity\n        result.is_infinite = result_is_infinity | (point1.is_infinite & point2.is_infinite);\n        result\n    }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(\n    _point1: EmbeddedCurvePoint,\n    _point2: EmbeddedCurvePoint,\n) -> [EmbeddedCurvePoint; 1] {}\n\n/// This function assumes that:\n/// The points are on the curve, and\n/// The points don't share an x-coordinate, and\n/// Neither point is the infinity point.\n/// If it is used with correct input, the function ensures the correct non-zero result is returned.\n/// Except for points on the curve, the other assumptions are checked by the function. It will cause assertion failure if they are not respected.\npub fn embedded_curve_add_not_nul(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    assert(point1.x != point2.x);\n    assert(!point1.is_infinite);\n    assert(!point2.is_infinite);\n    // Ensure is_infinite is comptime\n    let point1_1 = EmbeddedCurvePoint { x: point1.x, y: point1.y, is_infinite: false };\n    let point2_1 = EmbeddedCurvePoint { x: point2.x, y: point2.y, is_infinite: false };\n    embedded_curve_add_unsafe(point1_1, point2_1)\n}\n\n/// Unsafe ec addition\n/// If the inputs are the same, it will perform a doubling, but only if point1 and point2 are the same variable.\n/// If they have the same value but are different variables, the result will be incorrect because in this case\n/// it assumes (but does not check) that the points' x-coordinates are not equal.\n/// It also assumes neither point is the infinity point.\npub fn embedded_curve_add_unsafe(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint,\n) -> EmbeddedCurvePoint {\n    embedded_curve_add_array_return(point1, point2)[0]\n}\n",
      "path": "std/embedded_curve_ops.nr"
    },
    "50": {
      "source": "use std::{embedded_curve_ops::embedded_curve_add_unsafe, ops::Add};\n\nfn main(priv_key: Field, pub_x: pub Field, pub_y: pub Field) {\n    let g1 = std::embedded_curve_ops::EmbeddedCurvePoint::generator();\n    let scalar = std::embedded_curve_ops::EmbeddedCurveScalar { lo: priv_key, hi: 0 };\n    // Test that multi_scalar_mul correctly derives the public key\n    let res = std::embedded_curve_ops::multi_scalar_mul([g1], [scalar]);\n    assert(res.x == pub_x);\n    assert(res.y == pub_y);\n\n    // Test that double function calling embedded_curve_add works as expected\n    let pub_point =\n        std::embedded_curve_ops::EmbeddedCurvePoint { x: pub_x, y: pub_y, is_infinite: false };\n    let res = pub_point.double();\n    let double = g1.add(g1);\n\n    assert(double.x == res.x);\n\n    // Test calling multi_scalar_mul with multiple points and scalars\n    let res = std::embedded_curve_ops::multi_scalar_mul([g1, g1], [scalar, scalar]);\n\n    // The results should be double the g1 point because the scalars are 1 and we pass in g1 twice\n    assert(double.x == res.x);\n\n    // Tests for #6549\n    let const_scalar1 = std::embedded_curve_ops::EmbeddedCurveScalar { lo: 23, hi: 0 };\n    let const_scalar2 = std::embedded_curve_ops::EmbeddedCurveScalar { lo: 0, hi: 23 };\n    let const_scalar3 = std::embedded_curve_ops::EmbeddedCurveScalar { lo: 13, hi: 4 };\n    let partial_mul = std::embedded_curve_ops::multi_scalar_mul(\n        [g1, double, pub_point, g1, g1],\n        [scalar, const_scalar1, scalar, const_scalar2, const_scalar3],\n    );\n    assert(partial_mul.x == 0x2024c4eebfbc8a20018f8c95c7aab77c6f34f10cf785a6f04e97452d8708fda7);\n    // Check simplification by zero\n    let zero_point = std::embedded_curve_ops::EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true };\n    let const_zero = std::embedded_curve_ops::EmbeddedCurveScalar { lo: 0, hi: 0 };\n    let partial_mul = std::embedded_curve_ops::multi_scalar_mul(\n        [zero_point, double, g1],\n        [scalar, const_zero, scalar],\n    );\n    assert(partial_mul == g1);\n\n    // Additional tests for validating embedded_curve_add_unsafe under a conditional\n    if pub_x == pub_y {\n        let a1 = std::embedded_curve_ops::EmbeddedCurvePoint { x: 1, y: 2, is_infinite: false };\n        let a2 = std::embedded_curve_ops::EmbeddedCurvePoint { x: 1, y: 3, is_infinite: false };\n        let doubling = a1.double();\n        assert(doubling.x == 1);\n        let res = embedded_curve_add_unsafe(a1, a2);\n        assert(res.x == 1);\n\n        let a1 = std::embedded_curve_ops::EmbeddedCurvePoint {\n            x: pub_x + 1,\n            y: pub_y,\n            is_infinite: false,\n        };\n        let a2 = std::embedded_curve_ops::EmbeddedCurvePoint {\n            x: pub_x + 1,\n            y: pub_y + 1,\n            is_infinite: false,\n        };\n        let doubling = a1.double();\n        assert(doubling.x == 1);\n        let res = embedded_curve_add_unsafe(a1, a2);\n        assert(res.x == 1);\n\n        let a1 = std::embedded_curve_ops::EmbeddedCurvePoint { x: 2, y: 3, is_infinite: false };\n        let a2 = std::embedded_curve_ops::EmbeddedCurvePoint {\n            x: pub_x,\n            y: pub_y + 1 as Field,\n            is_infinite: false,\n        };\n        let res = embedded_curve_add_unsafe(a1, a2);\n        assert(res.x == 1);\n\n        let a1 = std::embedded_curve_ops::EmbeddedCurvePoint { x: 2, y: 3, is_infinite: false };\n        let a2 = std::embedded_curve_ops::EmbeddedCurvePoint { x: 2, y: 4, is_infinite: false };\n        let res = embedded_curve_add_unsafe(a1, a2);\n        assert(res.x == 1);\n\n        let a1 = std::embedded_curve_ops::EmbeddedCurvePoint { x: 2, y: 3, is_infinite: false };\n        let a2 = std::embedded_curve_ops::EmbeddedCurvePoint { x: 2, y: 3, is_infinite: false };\n        let res = embedded_curve_add_unsafe(a1, a2);\n        assert(res.x == 1);\n        let a1 = std::embedded_curve_ops::EmbeddedCurvePoint { x: 1, y: 3, is_infinite: false };\n        let a2 = std::embedded_curve_ops::EmbeddedCurvePoint { x: 1, y: 3, is_infinite: false };\n        let res = embedded_curve_add_unsafe(a1, a2);\n        assert(res.x == 1);\n        let a1 = std::embedded_curve_ops::EmbeddedCurvePoint { x: pub_x, y: 3, is_infinite: false };\n        let a2 = std::embedded_curve_ops::EmbeddedCurvePoint { x: pub_x, y: 2, is_infinite: false };\n        let res = embedded_curve_add_unsafe(a1, a2);\n        assert(res.x == 1);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
