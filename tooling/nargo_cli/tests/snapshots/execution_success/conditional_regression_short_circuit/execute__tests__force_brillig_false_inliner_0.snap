---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : 81",
    "private parameters indices : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
    "public parameters indices : [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41]",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "BLACKBOX::RANGE [(_9, 8)] []",
    "BLACKBOX::RANGE [(_10, 8)] []",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "BLACKBOX::RANGE [(_16, 8)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "BLACKBOX::RANGE [(_18, 8)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "BLACKBOX::RANGE [(_20, 8)] []",
    "BLACKBOX::RANGE [(_21, 8)] []",
    "BLACKBOX::RANGE [(_22, 8)] []",
    "BLACKBOX::RANGE [(_23, 8)] []",
    "BLACKBOX::RANGE [(_24, 8)] []",
    "BLACKBOX::RANGE [(_25, 8)] []",
    "BLACKBOX::RANGE [(_26, 8)] []",
    "BLACKBOX::RANGE [(_27, 8)] []",
    "BLACKBOX::RANGE [(_28, 8)] []",
    "BLACKBOX::RANGE [(_29, 8)] []",
    "BLACKBOX::RANGE [(_30, 8)] []",
    "BLACKBOX::RANGE [(_31, 8)] []",
    "BLACKBOX::RANGE [(_32, 8)] []",
    "BLACKBOX::RANGE [(_33, 8)] []",
    "BLACKBOX::RANGE [(_34, 8)] []",
    "BLACKBOX::RANGE [(_35, 8)] []",
    "BLACKBOX::RANGE [(_36, 8)] []",
    "BLACKBOX::RANGE [(_37, 8)] []",
    "BLACKBOX::RANGE [(_38, 8)] []",
    "BLACKBOX::RANGE [(_39, 8)] []",
    "BLACKBOX::RANGE [(_40, 8)] []",
    "BLACKBOX::RANGE [(_41, 8)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 35 })], outputs: [Simple(Witness(42))]",
    "EXPR [ (-1, _0, _42) (35, _42) (1, _43) -1 ]",
    "EXPR [ (-1, _0, _43) (35, _43) 0 ]",
    "EXPR [ (-1, _43) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -15 })], outputs: [Simple(Witness(44))]",
    "EXPR [ (1, _0, _44) (-15, _44) (1, _45) -1 ]",
    "EXPR [ (1, _0, _45) (-15, _45) 0 ]",
    "EXPR [ (-1, _45) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -3 })], outputs: [Simple(Witness(46))]",
    "EXPR [ (1, _0, _46) (-3, _46) (1, _47) -1 ]",
    "EXPR [ (1, _0, _47) (-3, _47) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-1, Witness(47), Witness(2))], linear_combinations: [(1, Witness(2)), (2, Witness(47))], q_c: -2 })], outputs: [Simple(Witness(48))]",
    "EXPR [ (-1, _2, _47) (1, _2) (2, _47) (-1, _49) -2 ]",
    "EXPR [ (1, _48, _49) -1 ]",
    "BLACKBOX::BLAKE3 [(_5, 8), (_6, 8), (_7, 8), (_8, 8), (_9, 8)] [_50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81]",
    "EXPR [ (-1, _10) (1, _50) 0 ]",
    "EXPR [ (-1, _11) (1, _51) 0 ]",
    "EXPR [ (-1, _12) (1, _52) 0 ]",
    "EXPR [ (-1, _13) (1, _53) 0 ]",
    "EXPR [ (-1, _14) (1, _54) 0 ]",
    "EXPR [ (-1, _15) (1, _55) 0 ]",
    "EXPR [ (-1, _16) (1, _56) 0 ]",
    "EXPR [ (-1, _17) (1, _57) 0 ]",
    "EXPR [ (-1, _18) (1, _58) 0 ]",
    "EXPR [ (-1, _19) (1, _59) 0 ]",
    "EXPR [ (-1, _20) (1, _60) 0 ]",
    "EXPR [ (-1, _21) (1, _61) 0 ]",
    "EXPR [ (-1, _22) (1, _62) 0 ]",
    "EXPR [ (-1, _23) (1, _63) 0 ]",
    "EXPR [ (-1, _24) (1, _64) 0 ]",
    "EXPR [ (-1, _25) (1, _65) 0 ]",
    "EXPR [ (-1, _26) (1, _66) 0 ]",
    "EXPR [ (-1, _27) (1, _67) 0 ]",
    "EXPR [ (-1, _28) (1, _68) 0 ]",
    "EXPR [ (-1, _29) (1, _69) 0 ]",
    "EXPR [ (-1, _30) (1, _70) 0 ]",
    "EXPR [ (-1, _31) (1, _71) 0 ]",
    "EXPR [ (-1, _32) (1, _72) 0 ]",
    "EXPR [ (-1, _33) (1, _73) 0 ]",
    "EXPR [ (-1, _34) (1, _74) 0 ]",
    "EXPR [ (-1, _35) (1, _75) 0 ]",
    "EXPR [ (-1, _36) (1, _76) 0 ]",
    "EXPR [ (-1, _37) (1, _77) 0 ]",
    "EXPR [ (-1, _38) (1, _78) 0 ]",
    "EXPR [ (-1, _39) (1, _79) 0 ]",
    "EXPR [ (-1, _40) (1, _80) 0 ]",
    "EXPR [ (-1, _41) (1, _81) 0 ]",
    "",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    ""
  ],
  "debug_symbols": "tZfNioMwFEbfJWsXMcnNvfZVhqHYVosgKv4MDNJ3Hy0GxMoUKd/OmJxDJDkLR3XLLsP9XFR53anT16jK+pr2RV1No1E583zXNWk1D7s+bXt1imMTqay6zU/JI1J5UWbqRPrxHSlnDxPuMEG7hOVAOLMl/C5BFAjWayJ6WWqdW5ZairdyRsoFKU8+lftwStbzm6U6HI+N7WYfpHf3ITrsQ/yWiA8T5jCxe5WNCd9h7AvhDhN0mNi9ysbZQHj5/yBIJ8tSMtuyiD+Vu3AhiGQrF6Q8Acq9RspjpNwg5RYpd0g5IeUeKUcW6pGFemShjCyUkYUyslBGFsrIQhlZKCMLZWShjCyUkYUKslBBFirIQgVZqCALFWShgixUkIUKrtBpcGmLsizu5/Vf+vT6J22L9FJmyzAfqutqtv9twkzgm7a+ZrehzWbTc27S/wE=",
  "file_map": {
    "50": {
      "source": "fn main(a: u32, mut c: [u32; 4], x: [u8; 5], result: pub [u8; 32]) {\n    //regression for short-circuit2\n    if 35 == a {\n        assert(false);\n    }\n    bar(a as Field);\n\n    if a == 3 {\n        c = test4();\n    }\n    assert(c[1] != 2);\n    call_intrinsic(x, result);\n}\n\nfn foo() {\n    let mut x = 1;\n    x /= 0;\n}\n\nfn bar(x: Field) {\n    if x == 15 {\n        foo();\n    }\n}\n\nfn call_intrinsic(x: [u8; 5], result: [u8; 32]) {\n    let mut digest = std::hash::blake3(x);\n    digest[0] = 5 as u8;\n    digest = std::hash::blake3(x);\n    assert(digest == result);\n}\n\nfn test4() -> [u32; 4] {\n    let b: [u32; 4] = [1, 2, 3, 4];\n    b\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
