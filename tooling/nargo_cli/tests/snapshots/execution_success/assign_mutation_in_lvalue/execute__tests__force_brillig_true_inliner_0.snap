---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 19 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(2), source: Direct(0) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(1) }, Call { location: 25 }, Mov { destination: Direct(0), source: Relative(0) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 24 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 19 }, Return]"
  ],
  "debug_symbols": "dZBNDoMgEIXvMmsWYtWmXsUYgzoaEgIEoUljuHsHf1q76GYew+N7ZGaFEfswd1JPZoG6WaF3Uik5d8oMwkuj6XaFLBV+g5oz4MUu5S7VLneSGBmcWOcdYqIuOZRuhUPtodZBKQZPocL2aLFCb+qFIzdjgHokpcBJKkynyL509h/l1cHm/AOXRLfUiUG6n7liynFS9AqPdgp6uLj+ZU/n3It1ZsAxOExJl+VQbfiD5UUb029v",
  "file_map": {
    "50": {
      "source": "fn main() {\n    bug();\n    comptime { bug() };\n}\n\nfn bug() {\n    let mut a = ([1, 2], 3);\n    a.0[{\n    a = ([4, 5], 6);\n    1\n    }] = 7;\n\n    assert_eq(a, ([4, 7], 6));\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
