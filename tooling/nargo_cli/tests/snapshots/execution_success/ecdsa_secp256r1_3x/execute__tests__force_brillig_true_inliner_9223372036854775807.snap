---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "hashed_message",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "pub_key_x",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "pub_key_y",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "signature",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "hashed_message_2",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "pub_key_x_2",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "pub_key_y_2",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "signature_2",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "hashed_message_3",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "pub_key_x_3",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "pub_key_y_3",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "signature_3",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "ldTLioMwGAXgd8nahdHkT/RVhqF4iSUgKlEHBvHdmxRLS5PN2Qi/5MuFA+dgvWn3+81Ow7yy+udg49w1m50nPx1nxlpnx9Heb5+/WR4+JPQTrEszhXndGrexulQ6Y2bqWS1I+g0GOxpWy/z8zTypYCJznHCcFDgpcSJSRLxJVUZE4oRwonCSTF8W4iJ+QUQqmFCOE46TAiclTpLpk+IvomMicUI4SaaveHURLaP0SeOkgonKccJxUuAkmb4mehEdE4ETiZHTT3+Ns007mqu+h33qPtp8+1/MV7Evbu5MvzsTKv7d7uGBVMqMhPRX4SEIUiojXfhj/FEP",
  "file_map": {
    "50": {
      "source": "fn main(\n    hashed_message: [u8; 32],\n    pub_key_x: [u8; 32],\n    pub_key_y: [u8; 32],\n    signature: [u8; 64],\n    hashed_message_2: [u8; 32],\n    pub_key_x_2: [u8; 32],\n    pub_key_y_2: [u8; 32],\n    signature_2: [u8; 64],\n    hashed_message_3: [u8; 32],\n    pub_key_x_3: [u8; 32],\n    pub_key_y_3: [u8; 32],\n    signature_3: [u8; 64],\n) {\n    let valid_signature =\n        std::ecdsa_secp256r1::verify_signature(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(valid_signature);\n    let valid_signature_2 = std::ecdsa_secp256r1::verify_signature(\n        pub_key_x_2,\n        pub_key_y_2,\n        signature_2,\n        hashed_message_2,\n    );\n    assert(valid_signature_2);\n    let valid_signature_3 = std::ecdsa_secp256r1::verify_signature(\n        pub_key_x_3,\n        pub_key_y_3,\n        signature_3,\n        hashed_message_3,\n    );\n    assert(valid_signature_3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
