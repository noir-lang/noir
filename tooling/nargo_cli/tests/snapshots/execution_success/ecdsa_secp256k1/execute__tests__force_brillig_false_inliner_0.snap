---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "hashed_message",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "pub_key_x",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "pub_key_y",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "signature",
        "type": {
          "kind": "array",
          "length": 64,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _161",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127, _128, _129, _130, _131, _132, _133, _134, _135, _136, _137, _138, _139, _140, _141, _142, _143, _144, _145, _146, _147, _148, _149, _150, _151, _152, _153, _154, _155, _156, _157, _158, _159]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:8 bits []",
    "BLACKBOX::RANGE [_1]:8 bits []",
    "BLACKBOX::RANGE [_2]:8 bits []",
    "BLACKBOX::RANGE [_3]:8 bits []",
    "BLACKBOX::RANGE [_4]:8 bits []",
    "BLACKBOX::RANGE [_5]:8 bits []",
    "BLACKBOX::RANGE [_6]:8 bits []",
    "BLACKBOX::RANGE [_7]:8 bits []",
    "BLACKBOX::RANGE [_8]:8 bits []",
    "BLACKBOX::RANGE [_9]:8 bits []",
    "BLACKBOX::RANGE [_10]:8 bits []",
    "BLACKBOX::RANGE [_11]:8 bits []",
    "BLACKBOX::RANGE [_12]:8 bits []",
    "BLACKBOX::RANGE [_13]:8 bits []",
    "BLACKBOX::RANGE [_14]:8 bits []",
    "BLACKBOX::RANGE [_15]:8 bits []",
    "BLACKBOX::RANGE [_16]:8 bits []",
    "BLACKBOX::RANGE [_17]:8 bits []",
    "BLACKBOX::RANGE [_18]:8 bits []",
    "BLACKBOX::RANGE [_19]:8 bits []",
    "BLACKBOX::RANGE [_20]:8 bits []",
    "BLACKBOX::RANGE [_21]:8 bits []",
    "BLACKBOX::RANGE [_22]:8 bits []",
    "BLACKBOX::RANGE [_23]:8 bits []",
    "BLACKBOX::RANGE [_24]:8 bits []",
    "BLACKBOX::RANGE [_25]:8 bits []",
    "BLACKBOX::RANGE [_26]:8 bits []",
    "BLACKBOX::RANGE [_27]:8 bits []",
    "BLACKBOX::RANGE [_28]:8 bits []",
    "BLACKBOX::RANGE [_29]:8 bits []",
    "BLACKBOX::RANGE [_30]:8 bits []",
    "BLACKBOX::RANGE [_31]:8 bits []",
    "BLACKBOX::RANGE [_32]:8 bits []",
    "BLACKBOX::RANGE [_33]:8 bits []",
    "BLACKBOX::RANGE [_34]:8 bits []",
    "BLACKBOX::RANGE [_35]:8 bits []",
    "BLACKBOX::RANGE [_36]:8 bits []",
    "BLACKBOX::RANGE [_37]:8 bits []",
    "BLACKBOX::RANGE [_38]:8 bits []",
    "BLACKBOX::RANGE [_39]:8 bits []",
    "BLACKBOX::RANGE [_40]:8 bits []",
    "BLACKBOX::RANGE [_41]:8 bits []",
    "BLACKBOX::RANGE [_42]:8 bits []",
    "BLACKBOX::RANGE [_43]:8 bits []",
    "BLACKBOX::RANGE [_44]:8 bits []",
    "BLACKBOX::RANGE [_45]:8 bits []",
    "BLACKBOX::RANGE [_46]:8 bits []",
    "BLACKBOX::RANGE [_47]:8 bits []",
    "BLACKBOX::RANGE [_48]:8 bits []",
    "BLACKBOX::RANGE [_49]:8 bits []",
    "BLACKBOX::RANGE [_50]:8 bits []",
    "BLACKBOX::RANGE [_51]:8 bits []",
    "BLACKBOX::RANGE [_52]:8 bits []",
    "BLACKBOX::RANGE [_53]:8 bits []",
    "BLACKBOX::RANGE [_54]:8 bits []",
    "BLACKBOX::RANGE [_55]:8 bits []",
    "BLACKBOX::RANGE [_56]:8 bits []",
    "BLACKBOX::RANGE [_57]:8 bits []",
    "BLACKBOX::RANGE [_58]:8 bits []",
    "BLACKBOX::RANGE [_59]:8 bits []",
    "BLACKBOX::RANGE [_60]:8 bits []",
    "BLACKBOX::RANGE [_61]:8 bits []",
    "BLACKBOX::RANGE [_62]:8 bits []",
    "BLACKBOX::RANGE [_63]:8 bits []",
    "BLACKBOX::RANGE [_64]:8 bits []",
    "BLACKBOX::RANGE [_65]:8 bits []",
    "BLACKBOX::RANGE [_66]:8 bits []",
    "BLACKBOX::RANGE [_67]:8 bits []",
    "BLACKBOX::RANGE [_68]:8 bits []",
    "BLACKBOX::RANGE [_69]:8 bits []",
    "BLACKBOX::RANGE [_70]:8 bits []",
    "BLACKBOX::RANGE [_71]:8 bits []",
    "BLACKBOX::RANGE [_72]:8 bits []",
    "BLACKBOX::RANGE [_73]:8 bits []",
    "BLACKBOX::RANGE [_74]:8 bits []",
    "BLACKBOX::RANGE [_75]:8 bits []",
    "BLACKBOX::RANGE [_76]:8 bits []",
    "BLACKBOX::RANGE [_77]:8 bits []",
    "BLACKBOX::RANGE [_78]:8 bits []",
    "BLACKBOX::RANGE [_79]:8 bits []",
    "BLACKBOX::RANGE [_80]:8 bits []",
    "BLACKBOX::RANGE [_81]:8 bits []",
    "BLACKBOX::RANGE [_82]:8 bits []",
    "BLACKBOX::RANGE [_83]:8 bits []",
    "BLACKBOX::RANGE [_84]:8 bits []",
    "BLACKBOX::RANGE [_85]:8 bits []",
    "BLACKBOX::RANGE [_86]:8 bits []",
    "BLACKBOX::RANGE [_87]:8 bits []",
    "BLACKBOX::RANGE [_88]:8 bits []",
    "BLACKBOX::RANGE [_89]:8 bits []",
    "BLACKBOX::RANGE [_90]:8 bits []",
    "BLACKBOX::RANGE [_91]:8 bits []",
    "BLACKBOX::RANGE [_92]:8 bits []",
    "BLACKBOX::RANGE [_93]:8 bits []",
    "BLACKBOX::RANGE [_94]:8 bits []",
    "BLACKBOX::RANGE [_95]:8 bits []",
    "BLACKBOX::RANGE [_96]:8 bits []",
    "BLACKBOX::RANGE [_97]:8 bits []",
    "BLACKBOX::RANGE [_98]:8 bits []",
    "BLACKBOX::RANGE [_99]:8 bits []",
    "BLACKBOX::RANGE [_100]:8 bits []",
    "BLACKBOX::RANGE [_101]:8 bits []",
    "BLACKBOX::RANGE [_102]:8 bits []",
    "BLACKBOX::RANGE [_103]:8 bits []",
    "BLACKBOX::RANGE [_104]:8 bits []",
    "BLACKBOX::RANGE [_105]:8 bits []",
    "BLACKBOX::RANGE [_106]:8 bits []",
    "BLACKBOX::RANGE [_107]:8 bits []",
    "BLACKBOX::RANGE [_108]:8 bits []",
    "BLACKBOX::RANGE [_109]:8 bits []",
    "BLACKBOX::RANGE [_110]:8 bits []",
    "BLACKBOX::RANGE [_111]:8 bits []",
    "BLACKBOX::RANGE [_112]:8 bits []",
    "BLACKBOX::RANGE [_113]:8 bits []",
    "BLACKBOX::RANGE [_114]:8 bits []",
    "BLACKBOX::RANGE [_115]:8 bits []",
    "BLACKBOX::RANGE [_116]:8 bits []",
    "BLACKBOX::RANGE [_117]:8 bits []",
    "BLACKBOX::RANGE [_118]:8 bits []",
    "BLACKBOX::RANGE [_119]:8 bits []",
    "BLACKBOX::RANGE [_120]:8 bits []",
    "BLACKBOX::RANGE [_121]:8 bits []",
    "BLACKBOX::RANGE [_122]:8 bits []",
    "BLACKBOX::RANGE [_123]:8 bits []",
    "BLACKBOX::RANGE [_124]:8 bits []",
    "BLACKBOX::RANGE [_125]:8 bits []",
    "BLACKBOX::RANGE [_126]:8 bits []",
    "BLACKBOX::RANGE [_127]:8 bits []",
    "BLACKBOX::RANGE [_128]:8 bits []",
    "BLACKBOX::RANGE [_129]:8 bits []",
    "BLACKBOX::RANGE [_130]:8 bits []",
    "BLACKBOX::RANGE [_131]:8 bits []",
    "BLACKBOX::RANGE [_132]:8 bits []",
    "BLACKBOX::RANGE [_133]:8 bits []",
    "BLACKBOX::RANGE [_134]:8 bits []",
    "BLACKBOX::RANGE [_135]:8 bits []",
    "BLACKBOX::RANGE [_136]:8 bits []",
    "BLACKBOX::RANGE [_137]:8 bits []",
    "BLACKBOX::RANGE [_138]:8 bits []",
    "BLACKBOX::RANGE [_139]:8 bits []",
    "BLACKBOX::RANGE [_140]:8 bits []",
    "BLACKBOX::RANGE [_141]:8 bits []",
    "BLACKBOX::RANGE [_142]:8 bits []",
    "BLACKBOX::RANGE [_143]:8 bits []",
    "BLACKBOX::RANGE [_144]:8 bits []",
    "BLACKBOX::RANGE [_145]:8 bits []",
    "BLACKBOX::RANGE [_146]:8 bits []",
    "BLACKBOX::RANGE [_147]:8 bits []",
    "BLACKBOX::RANGE [_148]:8 bits []",
    "BLACKBOX::RANGE [_149]:8 bits []",
    "BLACKBOX::RANGE [_150]:8 bits []",
    "BLACKBOX::RANGE [_151]:8 bits []",
    "BLACKBOX::RANGE [_152]:8 bits []",
    "BLACKBOX::RANGE [_153]:8 bits []",
    "BLACKBOX::RANGE [_154]:8 bits []",
    "BLACKBOX::RANGE [_155]:8 bits []",
    "BLACKBOX::RANGE [_156]:8 bits []",
    "BLACKBOX::RANGE [_157]:8 bits []",
    "BLACKBOX::RANGE [_158]:8 bits []",
    "BLACKBOX::RANGE [_159]:8 bits []",
    "EXPR [ (-1, _160) 1 ]",
    "BLACKBOX::ECDSA_SECP256K1 [_32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127, _128, _129, _130, _131, _132, _133, _134, _135, _136, _137, _138, _139, _140, _141, _142, _143, _144, _145, _146, _147, _148, _149, _150, _151, _152, _153, _154, _155, _156, _157, _158, _159, _0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _160] [_161]",
    "EXPR [ (1, _161) -1 ]"
  ],
  "debug_symbols": "jZHdCoMwDIXfJde9sOp+8FXGkFqjFEpbajsY4rsvSqV6sbGr0+TkS0I6Q49dHFtlBjtB85ih80prNbbaShGUNZSdFwZ72AaPSCk4+EQ54dEEaEzUmsFL6LgVTU6YTYPw5BYM0PSk1HBQGtfXwjJdfEd5VSW4LDN+OfP8B1/c6tSA80vuwOt/NyjzBvX9tMGTIiGVP90M+LWgUkbKk5bQVMs6wCvRaUyXHaKRh0OHt9ud/SuctxL76HEdsHk08gM=",
  "file_map": {
    "14": {
      "source": "// docs:start:ecdsa_secp256k1\n/// Verifies a ECDSA signature over the secp256k1 curve.\n/// - inputs:\n///     - x coordinate of public key as 32 bytes\n///     - y coordinate of public key as 32 bytes\n///     - the signature, as a 64 bytes array\n///       The signature internally will be represented as `(r, s)`,\n///       where `r` and `s` are fixed-sized big endian scalar values.\n///       As the `secp256k1` has a 256-bit modulus, we have a 64 byte signature\n///       while `r` and `s` will both be 32 bytes.\n///       We expect `s` to be normalized. This means given the curve's order,\n///       `s` should be less than or equal to `order / 2`.\n///       This is done to prevent malleability.\n///       For more context regarding malleability you can reference BIP 0062.\n///     - the hash of the message, as a vector of bytes\n/// - output: false for failure and true for success\npub fn verify_signature<let N: u32>(\n    public_key_x: [u8; 32],\n    public_key_y: [u8; 32],\n    signature: [u8; 64],\n    message_hash: [u8; N],\n) -> bool\n// docs:end:ecdsa_secp256k1\n{\n    _verify_signature(public_key_x, public_key_y, signature, message_hash, true)\n}\n\n#[foreign(ecdsa_secp256k1)]\nfn _verify_signature<let N: u32>(\n    public_key_x: [u8; 32],\n    public_key_y: [u8; 32],\n    signature: [u8; 64],\n    message_hash: [u8; N],\n    predicate: bool,\n) -> bool {}\n\n// docs:start:ecdsa_secp256k1_slice\npub fn verify_signature_slice(\n    public_key_x: [u8; 32],\n    public_key_y: [u8; 32],\n    signature: [u8; 64],\n    message_hash: [u8],\n) -> bool\n// docs:end:ecdsa_secp256k1_slice\n{\n    _verify_signature_slice(public_key_x, public_key_y, signature, message_hash, true)\n}\n\n#[foreign(ecdsa_secp256k1)]\nfn _verify_signature_slice(\n    public_key_x: [u8; 32],\n    public_key_y: [u8; 32],\n    signature: [u8; 64],\n    message_hash: [u8],\n    predicate: bool,\n) -> bool {}\n",
      "path": "std/ecdsa_secp256k1.nr"
    },
    "50": {
      "source": "fn main(hashed_message: [u8; 32], pub_key_x: [u8; 32], pub_key_y: [u8; 32], signature: [u8; 64]) {\n    let valid_signature =\n        std::ecdsa_secp256k1::verify_signature(pub_key_x, pub_key_y, signature, hashed_message);\n    assert(valid_signature);\n}\n",
      "path": ""
    }
  },
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
