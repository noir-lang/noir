---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/7VVzW7CMAx2SrMtQ5Om7bTTdtnOKXSUIxI/7xGB+hx9dBRhU8ek4oBjqUoqJ58/f7ZbAxcz+ESrca3g1ujMBlf/mDWKWL4kT1OI55Uo3xuYFv4PVwdpkaJ/ppiwy3DSwl/7tnOZ/BT5Lx3DLIC/IPy6DL5/Rpz9kOKDiPsG6fDyO+Tjg3xA3wv6af+OeyfwStSdc9LW7TPDv2K5RdsOox5KcReEvdPHbuZYo58ROukHuJMz7xc9XquWYlnEszDdp7l51OPivRHx+FzajGZWnP8SPJ/EnY0Szw+RP48lOZLthtEn/xdm4q6ce/5uM3dpJqw4+w2pLoW+p1ldKNYcxtmtB/343frSP9FmTAdZBx7fivO/+P6ayaN+gGffhaZfhj78h9OpPQapU7SK6XQGS7UWLdEJAAA=",
  "debug_symbols": "pZNNjoQgEEbvUmsX/DSCXqXTMajYISFoaJ1kYrz7lIo9umAW0xueWLyvagEztKaenpX1Xf+C8j5DHaxz9lm5vtGj7T3+nYGsC5VQsgyogpIjig2M7KA72A6+47ZDQJkjciglAlMUQu0oNnBMUcuSwdG1GoMxa9PTGDjcoIPxI5R+ci6DL+2m7dBr0H7jqANWSQbGt0gM7Kwz69eS/dokrVKhokyVeOvi6tO0zwsR/RshH/oy5f81/9tnnKb8W9oXhYx+TpPzi7QvJYu+lMVnvuL/8Ys8+oqwi//AnW5suFzsZU0KVtfOxG03+eZUHb+Ho3I8jCH0jWmnYNak0+vA9c5ZxuVjWbv9AA==",
  "file_map": {
    "50": {
      "source": "global ONE: Field = 1;\nglobal TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_no_global(x, y);\n        entry_point_inner_func_globals(x, y);\n        entry_point_one_global(x, y);\n        entry_point_one_diff_global(x, y);\n    }\n}\n\nunconstrained fn entry_point_no_global(x: Field, y: Field) {\n    assert(x + y != 100);\n}\n\nunconstrained fn entry_point_one_global(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n}\n\nunconstrained fn entry_point_inner_func_globals(x: Field, y: Field) {\n    wrapper(x, y);\n}\n\n// Test that we duplicate Brillig entry points called within\n// another entry point's inner calls\nunconstrained fn wrapper(x: Field, y: Field) {\n    let z = ONE + x + y;\n    assert(z == 2);\n    entry_point_one_global(x, y);\n    // Test that we handle repeated entry point calls\n    // `entry_point_one_diff_global` should be duplicated and the duplicated function\n    // should use the globals from `entry_point_inner_func_globals`\n    entry_point_one_diff_global(y, x);\n}\n\nunconstrained fn entry_point_one_diff_global(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
