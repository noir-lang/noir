---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/81XwU7DMAx1ygKUaQfgxolPyLayVYJDpRW4wEdUTP2OfjoKs6njuWxaEzRLU9oleX5+jp3NwM4MfrxNcMxg32hNhaMbZ/OIWC4lT5OI5y9R/mxgWPhPHHMIk+TnLyIGnCucYuGXrihzJb6I/Jc5w0yAvyD8SRp8d4U4b12ID8LvDMLi5XtojhfyO85d4zw93+JzLvBS5J1ziq3bvcI/Y7F523S9HpH8Lgi7jo+9JOzX+NjzKeZ/1UMHZw0O6MnPYjxeq4J8WcSzMFwDWq3H4+KcEf54zVtFMyvWPwiel2JPFYnnnYif+5IcyehMyR4i8yr1zQbmrLKX6k3m8BFCXew/6mKF70T3RDFT9CCbKXEbMcfPSibi4CbzymPy9f3CcOU6OFMtsj+0MCO0qBmuXHeuWqQ6F8doMYX+7px0IU6F37sRti53PfaHL+Jb2OfO/Vux/hnfbwR/0rg6kWe7bubtsmmbp2a7Lb4a2Uu8ZUynQ3epN+qHWs81A3u1nkvvVtlbd+Ecrd3gmPh8qz2XfB2rE8Vwqk7ytybEi6+QfmUOtPzQ2g/BL9V/CC0H5Mvn4BtiqVfX/Q8AAA==",
  "debug_symbols": "pZXRrqMgEIbfhWsvGGAY8FVOThrb0hMTYxuPbrJpfPcdytDt2cS9sDd+In6/OEC4q3M6Ll+Hfrxcv1X7cVfHqR+G/uswXE/d3F9HfnpXOl8gqNY0CqJqbaOMLoACU2ALXAEWeNV6BqmWGJwSGPEBqwuggFMiwxa4AizwBVQQCjgFdKOcFoLQCK3QCVHIYQBMEgZhLEQtBKEp9LnNNfC5zb/mc75jOiEKvTDnYaMo53ENKPtcBDJCK3TC7NO6NqqW/zBPKeXqv8wHz9Ktm9I4q3ZchqFRv7phebz0fevGB+du4l7+0zSemRx46YeU79bmr623VcAgMgR86vjTh23fRhTfaf2mT1v+/8b/9I2FLd9t+xhJfA+b48dtn8iITxTf84Pd40cvftBmhx90rL6lHT5ohLqAdHA7ZtBQHYEFs8N3oc6gi+5NP+zwEWoBEHatYPDPLQj0dkKAXQnR1QTzzz7+5FZ36qcfJ8Was6a+Ow5JmpdlPL30zr9vtaeeNLfpekrnZUo56eW44esHugbj55q/9gc=",
  "file_map": {
    "50": {
      "source": "global ONE: Field = 1;\nglobal TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_no_global(x, y);\n        entry_point_inner_func_globals(x, y);\n        entry_point_one_global(x, y);\n        entry_point_one_diff_global(x, y);\n    }\n}\n\nunconstrained fn entry_point_no_global(x: Field, y: Field) {\n    assert(x + y != 100);\n}\n\nunconstrained fn entry_point_one_global(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n}\n\nunconstrained fn entry_point_inner_func_globals(x: Field, y: Field) {\n    wrapper(x, y);\n}\n\n// Test that we duplicate Brillig entry points called within\n// another entry point's inner calls\nunconstrained fn wrapper(x: Field, y: Field) {\n    let z = ONE + x + y;\n    assert(z == 2);\n    entry_point_one_global(x, y);\n    // Test that we handle repeated entry point calls\n    // `entry_point_one_diff_global` should be duplicated and the duplicated function\n    // should use the globals from `entry_point_inner_func_globals`\n    entry_point_one_diff_global(y, x);\n}\n\nunconstrained fn entry_point_one_diff_global(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
