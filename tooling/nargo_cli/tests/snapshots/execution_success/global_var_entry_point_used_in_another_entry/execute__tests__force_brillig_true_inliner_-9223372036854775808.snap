---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1XUU7DMAx1ugYoEx/AQci2ju0LKjHGCfiDj4rRc/ToqMJm7ms6VVsikIollAYnz8/PddIZ+jbDf42lPCbUNVlT8OhOs1lALBeTp4nE84eofjbUL3zFY0btIjX+ScCEMw+nUPhrl68zT34B+S8yhRkBfy74aRx8d84427qNTxD3itrNq/eITzfyC/su2C/P1/ycAV6MumtOoXW79fBPVG6NPdV7PQLFnQv2Jjz2QrCfw2PPplz/O6h/pL7J5Z1MqWvisyq2Ad8ZdevqOy8nMNc5NfkuFS6uo5Fp8ahwcd3YtHhVuLhubFq8K1xcJzal/bma1m2cgv/vTrDV2jmJN2F8S13uOr6F9TnPL4G/aFwcybNalbNqUVblstzt8o/yBvAbS5RO+pzVOul5372Fd3xxJOe23ecYy1L33TY9PAJ/ZDsDsVOPFjo+cn0AnrG+zbDOOtaQOjcmdznWFfsea5H0+Kxnr3znoE5bHkUnC3gFz92J5tPJQuz/++TvaZEc0MJ4+A/VYuh9MqR/5N329Y/p2evrHzz39N5N3fbJ2jceI9fN2z8Sa6hOksOxOuHvNQqXX45xsQaH7qVP4PdbZ/0X7GBLOEETAAA=",
  "debug_symbols": "tdfRiuowEAbgd8l1LzJJJjPxVQ6HpWpdCqVK1YVFfPetS7tIDMhf6I0YyfdXnInt3My+2V4/P9r+cDybzb+b6Y67+tIe+3F1u1dmO7Rd135+PH9s7OOF9Hf/+VT3j+X5Ug8XsyHWyjT9fnynPPpD2zVmw/b+vzKUUOEsLAgWDhYeFgEWXBSJJ+E8PYvqZSsnmbZGsnl4XDNc1gzXNcPTiuHerhlOa4YXD4gLNIfHlAsPiwALhkWEhcBCYVFsOidpEp5cJoKFBcHCwcLDIsCCUcHFa/i/gxFs3u3M74TkIsJCYKGwSKiIFhYEi2I9RNwkRPLzEfmNUJ+LYj0kxUmozbskCiwUFgkVUqyH2rnb1ee/rhAsHCw8LAIsGBYRFuXHFMvzXzVZDbnRBSbhRu0CQwuMW2D8AlOsTtD5mSOkFyHvhOaiWBum+Wsx5R2gCRXJwoJgUR4VKP7NCiQvht8apdyUZwBKYTbu5d6YZIHRBSbhhqxF0X1cfdVDW2+7Zhp3D9d+9zT9Xr5PTTYIn4bjrtlfh+YxEj9Nw4+rB6nYjbFj9A8=",
  "file_map": {
    "50": {
      "source": "global ONE: Field = 1;\nglobal TWO: Field = 2;\nglobal THREE: Field = 3;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        entry_point_no_global(x, y);\n        entry_point_inner_func_globals(x, y);\n        entry_point_one_global(x, y);\n        entry_point_one_diff_global(x, y);\n    }\n}\n\nunconstrained fn entry_point_no_global(x: Field, y: Field) {\n    assert(x + y != 100);\n}\n\nunconstrained fn entry_point_one_global(x: Field, y: Field) {\n    let z = TWO + x + y;\n    assert(z == 3);\n}\n\nunconstrained fn entry_point_inner_func_globals(x: Field, y: Field) {\n    wrapper(x, y);\n}\n\n// Test that we duplicate Brillig entry points called within\n// another entry point's inner calls\nunconstrained fn wrapper(x: Field, y: Field) {\n    let z = ONE + x + y;\n    assert(z == 2);\n    entry_point_one_global(x, y);\n    // Test that we handle repeated entry point calls\n    // `entry_point_one_diff_global` should be duplicated and the duplicated function\n    // should use the globals from `entry_point_inner_func_globals`\n    entry_point_one_diff_global(y, x);\n}\n\nunconstrained fn entry_point_one_diff_global(x: Field, y: Field) {\n    let z = THREE + x + y;\n    assert(z == 4);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
