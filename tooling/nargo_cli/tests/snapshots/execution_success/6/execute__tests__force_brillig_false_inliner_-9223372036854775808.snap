---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "result",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _68",
    "private parameters indices : [_0, _1, _2, _3, _4]",
    "public parameters indices : [_5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36]",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_3, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "BLACKBOX::RANGE [(_9, 8)] []",
    "BLACKBOX::RANGE [(_10, 8)] []",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "BLACKBOX::RANGE [(_16, 8)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "BLACKBOX::RANGE [(_18, 8)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "BLACKBOX::RANGE [(_20, 8)] []",
    "BLACKBOX::RANGE [(_21, 8)] []",
    "BLACKBOX::RANGE [(_22, 8)] []",
    "BLACKBOX::RANGE [(_23, 8)] []",
    "BLACKBOX::RANGE [(_24, 8)] []",
    "BLACKBOX::RANGE [(_25, 8)] []",
    "BLACKBOX::RANGE [(_26, 8)] []",
    "BLACKBOX::RANGE [(_27, 8)] []",
    "BLACKBOX::RANGE [(_28, 8)] []",
    "BLACKBOX::RANGE [(_29, 8)] []",
    "BLACKBOX::RANGE [(_30, 8)] []",
    "BLACKBOX::RANGE [(_31, 8)] []",
    "BLACKBOX::RANGE [(_32, 8)] []",
    "BLACKBOX::RANGE [(_33, 8)] []",
    "BLACKBOX::RANGE [(_34, 8)] []",
    "BLACKBOX::RANGE [(_35, 8)] []",
    "BLACKBOX::RANGE [(_36, 8)] []",
    "BLACKBOX::BLAKE3 [(_0, 8), (_1, 8), (_2, 8), (_3, 8), (_4, 8)] [_37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68]",
    "EXPR [ (-1, _5) (1, _37) 0 ]",
    "EXPR [ (-1, _6) (1, _38) 0 ]",
    "EXPR [ (-1, _7) (1, _39) 0 ]",
    "EXPR [ (-1, _8) (1, _40) 0 ]",
    "EXPR [ (-1, _9) (1, _41) 0 ]",
    "EXPR [ (-1, _10) (1, _42) 0 ]",
    "EXPR [ (-1, _11) (1, _43) 0 ]",
    "EXPR [ (-1, _12) (1, _44) 0 ]",
    "EXPR [ (-1, _13) (1, _45) 0 ]",
    "EXPR [ (-1, _14) (1, _46) 0 ]",
    "EXPR [ (-1, _15) (1, _47) 0 ]",
    "EXPR [ (-1, _16) (1, _48) 0 ]",
    "EXPR [ (-1, _17) (1, _49) 0 ]",
    "EXPR [ (-1, _18) (1, _50) 0 ]",
    "EXPR [ (-1, _19) (1, _51) 0 ]",
    "EXPR [ (-1, _20) (1, _52) 0 ]",
    "EXPR [ (-1, _21) (1, _53) 0 ]",
    "EXPR [ (-1, _22) (1, _54) 0 ]",
    "EXPR [ (-1, _23) (1, _55) 0 ]",
    "EXPR [ (-1, _24) (1, _56) 0 ]",
    "EXPR [ (-1, _25) (1, _57) 0 ]",
    "EXPR [ (-1, _26) (1, _58) 0 ]",
    "EXPR [ (-1, _27) (1, _59) 0 ]",
    "EXPR [ (-1, _28) (1, _60) 0 ]",
    "EXPR [ (-1, _29) (1, _61) 0 ]",
    "EXPR [ (-1, _30) (1, _62) 0 ]",
    "EXPR [ (-1, _31) (1, _63) 0 ]",
    "EXPR [ (-1, _32) (1, _64) 0 ]",
    "EXPR [ (-1, _33) (1, _65) 0 ]",
    "EXPR [ (-1, _34) (1, _66) 0 ]",
    "EXPR [ (-1, _35) (1, _67) 0 ]",
    "EXPR [ (-1, _36) (1, _68) 0 ]"
  ],
  "debug_symbols": "jdLBioMwFAXQf8naRTS+54y/MgwSNZZAiJLqwCD+e6NXW7to6epq4j3qI7NoTT1dKuu7/irKn1nUwTpnL5XrGz3a3sfVeUnEcVuNwZi4JE77sTXoYPwoSj85l4g/7abtoeug/ZajDnFXJsL4NmYEO+vMerUkj7Z8Xc0o3ctZkd7r9HFf5fneVyxf9bM375eSjw+QqXoInwNpcQcyOgO/8UY3NjzNXKhClPGf1dfGqu8tcolIERlCIXIEIRhRIKDkUAgKQSEoBIWgEBSCQlAICkFhKAyFoTAUhsJQGApDYSi8Kss6sGB17cx+0LrJN6dzN/4Px85xMofQN6adglnnte3FCd4A",
  "file_map": {
    "50": {
      "source": "// blake3 circuit where the input is 5 bytes\n// not five field elements since blake3 operates over\n// bytes.\n//\n// If you do not cast, it will take all the bytes from the field element!\nfn main(x: [u8; 5], result: pub [u8; 32]) {\n    let mut digest = std::hash::blake3(x);\n    digest[0] = 5 as u8;\n    digest = std::hash::blake3(x);\n    assert(digest == result);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
