---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0]",
    "public parameters indices : [_1]",
    "return value indices : [_2]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0)), (-1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "EXPR [ (1, _0, _3) (-1, _1, _3) -1 ]",
    "EXPR [ (-1, _0) (1, _2) -2 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "jZBBDoMgEEXvMmsWiqVNvUrTGMTRkBAgCE0a4907Gml1YdINw8znfSZ/gg7bNDTa9m6E+jFBG7QxemiMUzJqZ2k6zQxy28SASCPY6UR5GdBGqG0yhsFLmrQ+Gr20a40ykFowQNtRJcNeG1xuM/vRxTla3sUG86L84uJvnotL5q/VGc/P+epy2/hK8AP/pE4qHQ6JQUErMyjpnBfToGVrcMuyT1btoo1vn5Ucvg9OYZcCLqarRt98AA==",
  "file_map": {
    "50": {
      "source": "// Regression test for issue \"V-NSCA-VUL-003: Missing ArraySet case in Removing Unreachable Functions pass\"\n// found in Veridise Audit.\n\nfn main(x: Field, y: pub Field) -> pub Field {\n    assert(x != y);\n    let mut f = [my_fun];\n    f[0] = my_fun2;\n    (f[0])(x)\n}\n\nfn my_fun(x: Field) -> Field {\n    x + 1\n}\n\nfn my_fun2(x: Field) -> Field {\n    x + 2\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
