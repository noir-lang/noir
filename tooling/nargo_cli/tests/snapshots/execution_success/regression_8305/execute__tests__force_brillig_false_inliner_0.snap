---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _7",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BLACKBOX::RANGE [_0]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(2)), Simple(Witness(3))]",
    "BLACKBOX::RANGE [_2]:1 bits []",
    "BLACKBOX::RANGE [_3]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _2) (-1, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(4)), Simple(Witness(5))]",
    "BLACKBOX::RANGE [_4]:1 bits []",
    "BLACKBOX::RANGE [_5]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _4) (-1, _5) 2147483648 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [_6]:1 bits []",
    "BLACKBOX::RANGE [_7]:32 bits []",
    "EXPR [ (1, _3) (-4294967296, _6) (-1, _7) 2147483648 ]",
    "EXPR [ (1, _4, _6) (-1, _6) 0 ]",
    "EXPR [ (1, _1) (-1, _3) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "dZDRDoIwDEX/pc97YAoq/IoxZEAhS5axjM3EEP7droDigy+3a2/PctMZOmziUGvbjxNU9xkar43RQ23GVgU9WprOi4C9rYNHpBEcfKKc8mgDVDYaI+CpTOSlySnLNShPbiYAbUeVPuy1wfRaxJfO/qPyXG6wzPMPXhD/oE612v8kBkmLAk6sZ9actWC9sF5Zb6wlq8zWstJyxWXilxTNa9UY3C7SR9seDhRebnf2Ezo/tthFjykaexT2DQ==",
  "file_map": {
    "50": {
      "source": "fn main(a: i32) -> pub i32 {\n    let mut r: i32 = 0;\n    let s: i32 = -2;\n    let e: i32 = -1;\n    for _ in (s - 0)..(e + 0) {\n        r = r + a;\n    }\n    r\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
