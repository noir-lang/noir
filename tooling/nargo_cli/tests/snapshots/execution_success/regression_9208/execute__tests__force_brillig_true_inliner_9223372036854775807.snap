---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "15839565830707987292": {
        "error_kind": "string",
        "string": "attempt to calculate the remainder with a divisor of zero"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: [_1]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 16 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Const { destination: Direct(32835), bit_size: Integer(U32), value: 0 }, Return, Call { location: 44 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 35 }, Jump { location: 21 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 20 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, Cast { destination: Relative(3), source: Relative(1), bit_size: Field }, Not { destination: Relative(1), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(5), source: Relative(4), bit_size: Field }, Cast { destination: Relative(4), source: Relative(1), bit_size: Field }, BinaryFieldOp { destination: Relative(1), op: Mul, lhs: Relative(5), rhs: Relative(3) }, Const { destination: Relative(3), bit_size: Field, value: -1 }, BinaryFieldOp { destination: Relative(5), op: Mul, lhs: Relative(4), rhs: Relative(3) }, BinaryFieldOp { destination: Relative(3), op: Add, lhs: Relative(1), rhs: Relative(5) }, Mov { destination: Relative(2), source: Relative(3) }, Jump { location: 33 }, Mov { destination: Relative(1), source: Relative(2) }, Return, Const { destination: Relative(1), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Direct(32835) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 0 }, Const { destination: Relative(3), bit_size: Integer(U1), value: 1 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 44 }, Call { location: 50 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 49 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15839565830707987292 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZLNioQwDIDfJece2lrHn1cRkap1KJQqHV1YxHff1Ex3ncPCMJd+xvRLImaH0fTbvbN+mh9QNzv0wTpn752bB73a2ePbHXg8RAG1YCDKE1JALRGSkEGdIRRFOUU3QkEoCdWJjBPwpkLcCAWhJFQnFCcIgiRgP3UcDNKY3RqMiVNe5savWXQwfoXab84x+NJuOy89Fu1PrjpgljMwfkRiwck6E58O9mfz/9Vb/nQL+Svnb9tCptZCFp/4WZV8VX3gl0XSuXrRW4z0YMPLGhyxULC6d+YZTpsfLtn1e0mZtEZLmAczbsHESpddwrNRiqmqxY3CX9vknOWyPWLrHw==",
  "file_map": {
    "50": {
      "source": "global G_A: [Field] = &[];\nfn main(a: u32) -> pub Field {\n    if a == 10 {\n        G_A[1_u32 % G_A.len()]\n    } else if a == 20 {\n        (a as Field)\n    } else {\n        -1\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
