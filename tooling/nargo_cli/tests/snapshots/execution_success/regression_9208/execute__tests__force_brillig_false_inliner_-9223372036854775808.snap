---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "15839565830707987292": {
        "error_kind": "string",
        "string": "attempt to calculate the remainder with a divisor of zero"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _5",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -10 })], outputs: [Simple(Witness(2))]",
    "EXPR [ (1, _0, _2) (-10, _2) (1, _3) -1 ]",
    "EXPR [ (1, _0, _3) (-10, _3) 0 ]",
    "EXPR [ (1, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -20 })], outputs: [Simple(Witness(4))]",
    "EXPR [ (1, _0, _4) (-20, _4) (1, _5) -1 ]",
    "EXPR [ (1, _0, _5) (-20, _5) 0 ]",
    "EXPR [ (-1, _0, _5) (1, _1) (-1, _5) 1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "nZHdCoMwDIXfJde90Po3fZUxpGqUQqlS28EQ332x2E0vBsOb0yYnXxOaBTps3FBL3Y8zVPcFGiOVkkOtxlZYOWrKLiuDENbWIFIKDj5RkzCoLVTaKcXgKZTzRfMktD+tMORGDFB3dNKDvVS43Vb2paPfaJ7tbME/cPY3fSt2Oo7SC3jMw+QxL67wSRn4tDzxD4pEK83puyGmQgbca+I1hYozyKBKGOReC9J1a2mkaBTua+qdbg9bs68pOGGvkxlb7JzBraX3aIg3",
  "file_map": {
    "50": {
      "source": "global G_A: [Field] = &[];\nfn main(a: u32) -> pub Field {\n    if a == 10 {\n        G_A[1_u32 % G_A.len()]\n    } else if a == 20 {\n        (a as Field)\n    } else {\n        -1\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
