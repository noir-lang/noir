---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 64
      },
      "visibility": "public"
    },
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(1))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 70 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(1) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(10), op: Sub, bit_size: U64, lhs: Relative(9), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 22 }, Jump { location: 24 }, Mov { destination: Relative(4), source: Relative(10) }, Jump { location: 26 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 26 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(1) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(10), op: Sub, bit_size: U64, lhs: Relative(9), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 32 }, Jump { location: 34 }, Mov { destination: Relative(6), source: Relative(10) }, Jump { location: 36 }, Mov { destination: Relative(6), source: Relative(1) }, Jump { location: 36 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, BinaryIntOp { destination: Relative(7), op: Xor, bit_size: U1, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 40 }, Jump { location: 42 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U64, lhs: Relative(8), rhs: Relative(2) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U64, lhs: Relative(9), rhs: Relative(1) }, Const { destination: Relative(10), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U64, lhs: Relative(10), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 48 }, Jump { location: 50 }, Mov { destination: Relative(5), source: Relative(11) }, Jump { location: 52 }, Mov { destination: Relative(5), source: Relative(1) }, Jump { location: 52 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U64, lhs: Relative(9), rhs: Relative(2) }, Const { destination: Relative(10), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U64, lhs: Relative(10), rhs: Relative(2) }, JumpIf { condition: Relative(6), location: 58 }, Jump { location: 60 }, Mov { destination: Relative(7), source: Relative(11) }, Jump { location: 62 }, Mov { destination: Relative(7), source: Relative(2) }, Jump { location: 62 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U64, lhs: Relative(5), rhs: Relative(7) }, BinaryIntOp { destination: Relative(8), op: Xor, bit_size: U1, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 66 }, Jump { location: 68 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U64, lhs: Relative(9), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 75 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "jdLNioMwFIbhe8nahfk5se2tlCJRYwmEKKkODOK9T+KnM3Yx0I2vGs8jaBbW2WZ+1i70w4vd7gtrovPePWs/tGZyQ0h3F1bmA9fsxgvGK+SCXLeIEuGIQCSiEEKgCCgCioAioUgoEoqEIqFIKBKKhCKhSCgKioKikiJSJKIQQjRSIRfkuoVKhCNQCApBISgEhaAQFIKioWgoGoqGoqFoKBqKzsq6Fuz4/vUUrc2f//RD0m8aTbRhYrcwe1+wL+Pn7aHXaMLWycS0WhbMhi41gb3zNp+txd90+f+o4vus0r/D9PE0iX2aqrfpR7oyrYtv22vNTnSm8Xa/7OfQnlan7/FYObbnGIfWdnO0WTrt0XS8V2VR0WPNb/sB",
  "file_map": {
    "50": {
      "source": "fn main(x: i64) -> pub i64 {\n    let y = x / x;\n    x / y\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
