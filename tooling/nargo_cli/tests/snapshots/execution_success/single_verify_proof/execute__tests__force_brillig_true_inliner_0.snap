---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "verification_key",
        "type": {
          "kind": "array",
          "length": 114,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "proof",
        "type": {
          "kind": "array",
          "length": 93,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "public_inputs",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "public"
      },
      {
        "name": "key_hash",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "dZDRCoUgDIbfZddeZGVErxIRVisEsTA9cAjf/cyoU11049z+fb9uGwzY+alVZpxXqOoNOqu0VlOr5146NRuqbpDEo+BQpSEwOKXWWcSo3HrJYZEWjYPKeK0ZfKT2e9O6SLNHJy2pCQM0A0UyHJXGeAvsopN3VPD8gEXJ/7h48vyd56koDgOeZdcHUpquoUz2yj7mD9HLKtlpPNLRm/6muu9yKuf+Fjv3OHiL0elaYkYryksmyoYBp0pdZKwomxBf/gE=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// This circuit aggregates one proof from `assert_statement`.\nfn main(\n    verification_key: [Field; 114],\n    // This is the proof without public inputs attached.\n    //\n    // This means: the size of this does not change with the number of public inputs.\n    proof: [Field; 93],\n    public_inputs: pub [Field; 1],\n    // This is currently not public. It is fine given that the vk is a part of the circuit definition.\n    // I believe we want to eventually make it public too though.\n    key_hash: Field,\n) {\n    std::verify_proof(verification_key, proof, public_inputs, key_hash);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
