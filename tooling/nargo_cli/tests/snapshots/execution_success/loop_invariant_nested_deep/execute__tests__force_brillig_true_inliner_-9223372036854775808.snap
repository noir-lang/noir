---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "boolean"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : [_0]",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 32 }, Cast { destination: Relative(2), source: Relative(1), bit_size: Field }, Const { destination: Relative(3), bit_size: Field, value: 1 }, JumpIf { condition: Relative(1), location: 19 }, Jump { location: 21 }, BinaryFieldOp { destination: Relative(4), op: Div, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 21 }, JumpIf { condition: Relative(1), location: 23 }, Jump { location: 26 }, BinaryFieldOp { destination: Relative(4), op: Div, lhs: Relative(3), rhs: Relative(2) }, BinaryFieldOp { destination: Relative(5), op: Div, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 26 }, JumpIf { condition: Relative(1), location: 28 }, Jump { location: 31 }, BinaryFieldOp { destination: Relative(1), op: Div, lhs: Relative(3), rhs: Relative(2) }, BinaryFieldOp { destination: Relative(4), op: Div, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 31 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 37 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZLBjoMgFEX/5a1ZgIhWfqVpDCo2JAQNhUkmhn+fR1Mcu2jSuOHyuJx7N2+DSQ/x3hs3Lw+Q1w0Gb6w1994uowpmcfi6Ac0HEyAZAdaBrAhUHCRHqUHWKBeQAgW9JiUChe6D1zrDhzgsWZXXLoB00VoCP8rG56fHqtxTg/LoUgLaTagYOBur8y2Rf5p+RnnHXnBN2Y6L7/lLs/PVCV7s/Q1tT/CtKP1te6afUV4CGBWnEhjnJYHV3VvCDSc1Gv+2JClneaMGq1/jHN14cMPvWpyyZKtfRj1Fr3PSYdPwvPKK8PaWctsf",
  "file_map": {
    "50": {
      "source": "// We expect this program to fail if we incorrectly hoist the division.\n// This is an expansion of the `loop_invariant_regression_8586` test.\n// a = false\nfn main(a: pub bool) {\n    for _ in 0..1 {\n        for _ in 0..1 {\n            for _ in 0..1 {\n                for _ in 0..1 {\n                    if a {\n                        for _ in 0..1 {\n                            let _ = (1 / (a as Field));\n                        }\n                    };\n                }\n            }\n        }\n    }\n\n    for _ in 0..1 {\n        if a {\n            for _ in 0..1 {\n                let _ = (1 / (a as Field));\n\n                for _ in 0..1 {\n                    for _ in 0..1 {\n                        for _ in 0..1 {\n                            let _ = (1 / (a as Field));\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    for _ in 0..1 {\n        for _ in 0..1 {\n            for _ in 0..1 {\n                if a {\n                    for _ in 0..1 {\n                        let _ = (1 / (a as Field));\n\n                        for _ in 0..1 {\n                            let _ = (1 / (a as Field));\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
