---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "2364549065372372629": {
        "error_kind": "string",
        "string": "after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8222435832483736686": {
        "error_kind": "string",
        "string": "There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12435520423058260345": {
        "error_kind": "string",
        "string": "borrow_mut_two should create a fresh array and not decrease its RC"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 933 }, Const { destination: Relative(1), bit_size: Field, value: 0 }, Const { destination: Relative(2), bit_size: Field, value: 1 }, Const { destination: Relative(3), bit_size: Field, value: 2 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(6), source: Relative(5) }, Store { destination_pointer: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(3) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 33 }, Call { location: 939 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 97 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 99 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 117 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 32 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 61 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 111 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 125 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 120 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 112 }, Const { destination: Relative(24), bit_size: Integer(U8), value: 100 }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(27), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(9) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(11) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(12) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(9) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(13) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(15) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(16) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(17) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(12) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(18) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(11) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(19) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(20) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(22) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(23) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(11) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(24) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(15) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(16) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(22) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(23) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(11) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(24) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(19) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(26), bit_size: Integer(U8), value: 119 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(28), bit_size: Integer(U8), value: 51 }, Const { destination: Relative(29), bit_size: Integer(U8), value: 50 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 38 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(16) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(10) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(18) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(24) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(15) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(12) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(18) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(17) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(22) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(18) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(21) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(24) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(18) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(11) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(21) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(22) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(21) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(23) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(20) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(26) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(24) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(11) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(27) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(15) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(28) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(19) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 233 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(11) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 241 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(11) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 249 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(11) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 257 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(11) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 265 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(11) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 273 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(11) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 281 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(11) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 289 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(11) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 297 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 305 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(11) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 313 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(11) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 321 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(11) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 329 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 337 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(11) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 345 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(11) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 353 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(11) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 361 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(11) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 369 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(11) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 377 }, Call { location: 939 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Const { destination: Relative(11), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(8), location: 403 }, Jump { location: 382 }, Load { destination: Relative(6), source_pointer: Relative(25) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(6) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 388 }, Call { location: 939 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(30) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(6) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 396 }, Call { location: 939 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(6), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(5)), MemoryAddress(Relative(7)), HeapArray(HeapArray { pointer: Relative(17), size: 37 }), HeapArray(HeapArray { pointer: Relative(20), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 403 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(6), location: 407 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 413 }, Call { location: 939 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(8) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 422 }, Call { location: 939 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(17) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(20) }, JumpIf { condition: Relative(22), location: 430 }, Call { location: 942 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(20) }, JumpIf { condition: Relative(5), location: 438 }, Jump { location: 433 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(5), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(8)), MemoryAddress(Relative(20)), HeapArray(HeapArray { pointer: Relative(6), size: 37 }), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 438 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(20) }, JumpIf { condition: Relative(5), location: 442 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 102 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(8) }, Store { destination_pointer: Relative(12), source: Relative(16) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(10) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(14) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(18) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(24) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(15) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(14) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(21) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(24) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(19) }, Const { destination: Relative(5), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(8), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(1), source_pointer: Relative(4) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(1) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 489 }, Call { location: 939 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(4) }, Load { destination: Relative(9), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 498 }, Call { location: 939 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 505 }, Call { location: 942 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(12) }, JumpIf { condition: Relative(1), location: 513 }, Jump { location: 508 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(1), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(9)), MemoryAddress(Relative(12)), HeapArray(HeapArray { pointer: Relative(8), size: 37 }), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 513 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(12) }, JumpIf { condition: Relative(1), location: 517 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(1), bit_size: Field, value: 3 }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(9) }, Store { destination_pointer: Relative(10), source: Relative(1) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(3) }, Load { destination: Relative(9), source_pointer: Relative(6) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 535 }, Call { location: 939 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(9), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(1), source_pointer: Relative(8) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(1) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 545 }, Call { location: 939 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(8) }, Load { destination: Relative(12), source_pointer: Relative(8) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 554 }, Call { location: 939 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(12) }, Load { destination: Relative(12), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, BinaryIntOp { destination: Relative(15), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, JumpIf { condition: Relative(15), location: 561 }, Call { location: 942 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(14) }, JumpIf { condition: Relative(1), location: 569 }, Jump { location: 564 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(1), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(12)), MemoryAddress(Relative(14)), HeapArray(HeapArray { pointer: Relative(9), size: 37 }), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 569 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(14) }, JumpIf { condition: Relative(1), location: 573 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Load { destination: Relative(1), source_pointer: Relative(6) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(1) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 579 }, Call { location: 939 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(1) }, Const { destination: Relative(1), bit_size: Field, value: 4 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(10), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(10), source_pointer: Relative(8) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 590 }, Call { location: 939 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(8) }, Load { destination: Relative(13), source_pointer: Relative(8) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 599 }, Call { location: 939 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(17) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 606 }, Call { location: 942 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(10), location: 614 }, Jump { location: 609 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(9), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(13)), MemoryAddress(Relative(15)), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 614 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(9), location: 618 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(9), source_pointer: Relative(8) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 624 }, Call { location: 939 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(17) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(8) }, JumpIf { condition: Relative(12), location: 631 }, Call { location: 942 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, JumpIf { condition: Relative(12), location: 639 }, Jump { location: 634 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(10), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(9)), MemoryAddress(Relative(8)), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), HeapArray(HeapArray { pointer: Relative(13), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 639 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 643 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(8), bit_size: Field, value: 6 }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(10) }, Store { destination_pointer: Relative(12), source: Relative(8) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(6) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(2) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 661 }, Call { location: 939 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(8)), HeapArray(HeapArray { pointer: Relative(2), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(2), source_pointer: Relative(6) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(2) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 671 }, Call { location: 939 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(8)), HeapArray(HeapArray { pointer: Relative(2), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(13) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(13) }, Store { destination_pointer: Relative(14), source: Relative(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(17) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(7) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 693 }, Call { location: 939 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Load { destination: Relative(15), source_pointer: Relative(12) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 702 }, Call { location: 939 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(15) }, Load { destination: Relative(15), source_pointer: Relative(12) }, Load { destination: Relative(18), source_pointer: Relative(9) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 711 }, Call { location: 939 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(18) }, Load { destination: Relative(18), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(17) }, BinaryIntOp { destination: Relative(21), op: LessThanEquals, bit_size: U32, lhs: Relative(13), rhs: Relative(20) }, JumpIf { condition: Relative(21), location: 718 }, Call { location: 942 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(20) }, JumpIf { condition: Relative(13), location: 726 }, Jump { location: 721 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(3), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(18)), MemoryAddress(Relative(20)), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), HeapArray(HeapArray { pointer: Relative(13), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 726 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(20) }, JumpIf { condition: Relative(3), location: 730 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(3), source_pointer: Relative(12) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 736 }, Call { location: 939 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(17) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 743 }, Call { location: 942 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 751 }, Jump { location: 746 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(10), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(3)), MemoryAddress(Relative(12)), HeapArray(HeapArray { pointer: Relative(13), size: 37 }), HeapArray(HeapArray { pointer: Relative(14), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 751 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(12) }, JumpIf { condition: Relative(10), location: 755 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Load { destination: Relative(3), source_pointer: Relative(6) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 761 }, Call { location: 939 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(3) }, Const { destination: Relative(3), bit_size: Field, value: 7 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(3)), HeapArray(HeapArray { pointer: Relative(12), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Const { destination: Relative(3), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(3)), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Load { destination: Relative(12), source_pointer: Relative(4) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 775 }, Call { location: 939 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(12) }, Load { destination: Relative(12), source_pointer: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(4) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 784 }, Call { location: 939 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(17) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(12), rhs: Relative(16) }, JumpIf { condition: Relative(18), location: 791 }, Call { location: 942 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(12), location: 799 }, Jump { location: 794 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(10), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(14)), MemoryAddress(Relative(16)), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), HeapArray(HeapArray { pointer: Relative(13), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 799 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(10), location: 803 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Load { destination: Relative(10), source_pointer: Relative(4) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 809 }, Call { location: 939 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(17) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, JumpIf { condition: Relative(13), location: 816 }, Call { location: 942 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, JumpIf { condition: Relative(13), location: 824 }, Jump { location: 819 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(12), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(10)), MemoryAddress(Relative(4)), HeapArray(HeapArray { pointer: Relative(13), size: 37 }), HeapArray(HeapArray { pointer: Relative(14), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 824 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, JumpIf { condition: Relative(12), location: 828 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Load { destination: Relative(4), source_pointer: Relative(9) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(4) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 834 }, Call { location: 939 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(6) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(4) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 842 }, Call { location: 939 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(8)), HeapArray(HeapArray { pointer: Relative(4), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(4), source_pointer: Relative(6) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 852 }, Call { location: 939 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(8)), HeapArray(HeapArray { pointer: Relative(4), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(4), source_pointer: Relative(9) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(4) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 862 }, Call { location: 939 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(14), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 871 }, Call { location: 939 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(17) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(14) }, JumpIf { condition: Relative(16), location: 877 }, Call { location: 942 }, Load { destination: Relative(16), source_pointer: Relative(9) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 883 }, Call { location: 939 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(17) }, BinaryIntOp { destination: Relative(20), op: LessThanEquals, bit_size: U32, lhs: Relative(14), rhs: Relative(19) }, JumpIf { condition: Relative(20), location: 890 }, Call { location: 942 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(19) }, JumpIf { condition: Relative(14), location: 898 }, Jump { location: 893 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(8), size: 39 }), MemoryAddress(Relative(7)), MemoryAddress(Relative(16)), MemoryAddress(Relative(19)), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Integer(U32)), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 898 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(19) }, JumpIf { condition: Relative(7), location: 902 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 908 }, Call { location: 939 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(7), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(1), source_pointer: Relative(9) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(1) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 918 }, Call { location: 939 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(7), rhs: Relative(5) }, JumpIf { condition: Relative(2), location: 925 }, Call { location: 945 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 929 }, Call { location: 948 }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(2), location: 932 }, Call { location: 951 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 938 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12435520423058260345 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 8222435832483736686 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2364549065372372629 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "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",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "use std::mem::array_refcount;\n\nfn main() {\n    let mut array = [0, 1, 2];\n    assert_refcount(array, 1, true);\n\n    borrow(array, array_refcount(array));\n    borrow_mut(&mut array, array_refcount(array));\n    let _ = copy_mut(array, array_refcount(array));\n\n    borrow_mut_two(&mut array, &mut array, array_refcount(array));\n\n    let mut u32_array = [0, 1, 2];\n    let rc1 = array_refcount(array);\n    let rc2 = array_refcount(u32_array);\n    borrow_mut_two_separate(&mut array, &mut u32_array, rc1, rc2);\n\n    // Safety: test\n    regression_7297();\n}\n\nfn borrow(array: [Field; 3], rc_before_call: u32) {\n    assert_refcount(array, rc_before_call, true);\n    println(array[0]);\n}\n\nfn borrow_mut(array: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array, rc_before_call, true);\n    array[0] = 3;\n    println(array[0]);\n}\n\n// Returning a copy of the array, otherwise the SSA can end up optimizing away\n// the `array_set`, with the whole body just becoming basically `println(4);`.\nfn copy_mut(mut array: [Field; 3], rc_before_call: u32) -> [Field; 3] {\n    assert_refcount(array, rc_before_call, true);\n    array[0] = 4;\n    println(array[0]);\n    array\n}\n\nfn borrow_mut_two(array1: &mut [Field; 3], array2: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array1, rc_before_call, true);\n    assert_refcount(*array2, rc_before_call + 1, true); // array should be copied from previous dereference\n    array1[0] = 5;\n    array2[0] = 6;\n    println(array1[0]); // array1 & 2 alias, so this should also print 6\n    println(array2[0]);\n}\n\n/// Borrow a different array: we should be able to reason that these types cannot be mutably\n/// aliased since they're different types so we don't need any inc_rc instructions.\nfn borrow_mut_two_separate(\n    array1: &mut [Field; 3],\n    array2: &mut [u32; 3],\n    rc_before_call1: u32,\n    rc_before_call2: u32,\n) {\n    assert_refcount(*array1, rc_before_call1, true);\n    assert_refcount(*array2, rc_before_call2, true);\n    array1[0] = 7;\n    array2[0] = 8;\n    println(array1[0]);\n    println(array2[0]);\n}\n\nfn assert_refcount<T>(array: [T; 3], mut expected: u32, expect_copy: bool) {\n    let count = array_refcount(array);\n\n    if expect_copy {\n        expected += 1;\n    }\n\n    // All ref counts are zero when running this as a constrained program\n    if std::runtime::is_unconstrained() {\n        if count != expected {\n            // Brillig doesn't print the actual & expected arguments on assertion failure\n            println(f\"actual = {count}, expected = {expected}\");\n        }\n        assert_eq(count, expected);\n    } else {\n        assert_eq(count, 0);\n    }\n}\n\nfn regression_7297() {\n    let mut array = [0, 1, 2];\n\n    let refcount_0 = array_refcount(array);\n\n    // This is currently copying the array due to the inc_rc in the array_refcount call above\n    borrow_mut_two(&mut array, &mut array, refcount_0);\n\n    let refcount_1 = array_refcount(array);\n    let array_2 = copy_mut(array, refcount_1 + 1); // array was just copied on the previous line\n    let refcount_2 = array_refcount(array);\n\n    // Mutation of the original could occur if we double decremented the RC and then went back to 1 by accident.\n    // For this to come out we have to run the test with `--inliner-aggressiveness -9223372036854775808`\n    assert_eq(array[0], 6, \"the original should not be mutated by copy_mut, only borrow_mut_two\");\n    assert_eq(array_2[0], 4, \"the copy should have the expected content\");\n\n    if std::runtime::is_unconstrained() {\n        // Double decrementing the RC could occur if we don't realize that array mutation made a copy,\n        // which decreases the RC of the original and sets the new one to 1.\n        // This assertion is redundant with the one following it, but it's here because `assert_eq` doesn't print\n        // what actual values that cause it to fail, so this is a way to highlight the bug about the refcount of\n        // still live arrays going to zero, without any doubt that it's just not 1, as it should be.\n        assert(\n            refcount_1 != 0,\n            \"borrow_mut_two should create a fresh array and not decrease its RC\",\n        );\n\n        // `5` here is higher than in other inliner settings. This is likely due to references getting optimized out,\n        // and mutations being optimized and removed so the original array ends up being aliased more.\n        assert_eq(\n            refcount_1,\n            5,\n            \"There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)\",\n        );\n        assert_eq(\n            refcount_2,\n            refcount_1 + 3,\n            \"after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and once within copy_mut\",\n        );\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
