---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8222435832483736686": {
        "error_kind": "string",
        "string": "There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)"
      },
      "9482509618778316729": {
        "error_kind": "string",
        "string": "after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and twice within copy_mut"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12435520423058260345": {
        "error_kind": "string",
        "string": "borrow_mut_two should create a fresh array and not decrease its RC"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 982 }, Const { destination: Relative(1), bit_size: Field, value: 0 }, Const { destination: Relative(2), bit_size: Field, value: 1 }, Const { destination: Relative(3), bit_size: Field, value: 2 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(6), source: Relative(5) }, Store { destination_pointer: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(3) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 33 }, Call { location: 988 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 97 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 99 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 117 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 32 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 61 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 111 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 125 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 120 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 112 }, Const { destination: Relative(24), bit_size: Integer(U8), value: 100 }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(27), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(9) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(11) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(12) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(9) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(13) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(15) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(16) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(17) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(12) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(18) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(11) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(19) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(20) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(22) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(23) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(11) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(24) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(15) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(14) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(16) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(22) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(23) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(10) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(11) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(21) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(24) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Relative(19) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(26), bit_size: Integer(U8), value: 119 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(28), bit_size: Integer(U8), value: 51 }, Const { destination: Relative(29), bit_size: Integer(U8), value: 50 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 38 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(31) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(31) }, Store { destination_pointer: Relative(32), source: Relative(16) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(10) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(18) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(24) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(15) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(12) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(18) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(17) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(22) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(18) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(21) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(24) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(18) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(11) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(21) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(22) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(21) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(23) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(20) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(26) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(24) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(11) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(27) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(9) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(15) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(28) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(29) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(19) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 233 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(11) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 241 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(11) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 249 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(11) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 257 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(11) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 265 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(11) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 273 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(27), rhs: Relative(11) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 281 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(11) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 289 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(11) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 297 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(11) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 305 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(32), rhs: Relative(11) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 313 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(11) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 321 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(11) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 329 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 337 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(11) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 345 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(11) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 353 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(11) }, Not { destination: Relative(39), source: Relative(39), bit_size: U1 }, JumpIf { condition: Relative(39), location: 361 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(40), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(11) }, Not { destination: Relative(40), source: Relative(40), bit_size: U1 }, JumpIf { condition: Relative(40), location: 369 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(11) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(11) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 377 }, Call { location: 988 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, Const { destination: Relative(11), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(8), location: 403 }, Jump { location: 382 }, Load { destination: Relative(6), source_pointer: Relative(25) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(6) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 388 }, Call { location: 988 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(6) }, Load { destination: Relative(6), source_pointer: Relative(30) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(6) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 396 }, Call { location: 988 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(6), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(5)), MemoryAddress(Relative(7)), HeapArray(HeapArray { pointer: Relative(17), size: 37 }), HeapArray(HeapArray { pointer: Relative(20), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 403 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(6), location: 407 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Load { destination: Relative(5), source_pointer: Relative(4) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 413 }, Call { location: 988 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(5) }, Load { destination: Relative(5), source_pointer: Relative(4) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(8) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 422 }, Call { location: 988 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(17) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(5), rhs: Relative(20) }, JumpIf { condition: Relative(22), location: 430 }, Call { location: 991 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(20) }, JumpIf { condition: Relative(5), location: 438 }, Jump { location: 433 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(5), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(8)), MemoryAddress(Relative(20)), HeapArray(HeapArray { pointer: Relative(6), size: 37 }), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 438 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(20) }, JumpIf { condition: Relative(5), location: 442 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 102 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(8) }, Store { destination_pointer: Relative(12), source: Relative(16) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(10) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(14) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(18) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(24) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(15) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(14) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(21) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(24) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(19) }, Const { destination: Relative(5), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(8), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(1), source_pointer: Relative(4) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(1) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 489 }, Call { location: 988 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(4) }, Load { destination: Relative(9), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 498 }, Call { location: 988 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 505 }, Call { location: 991 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(12) }, JumpIf { condition: Relative(1), location: 513 }, Jump { location: 508 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(1), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(9)), MemoryAddress(Relative(12)), HeapArray(HeapArray { pointer: Relative(8), size: 37 }), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 513 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(12) }, JumpIf { condition: Relative(1), location: 517 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Load { destination: Relative(1), source_pointer: Relative(4) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(1) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 523 }, Call { location: 988 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(1) }, Const { destination: Relative(1), bit_size: Field, value: 3 }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(10) }, Store { destination_pointer: Relative(12), source: Relative(1) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(3) }, Load { destination: Relative(10), source_pointer: Relative(6) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 543 }, Call { location: 988 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(10), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(1), source_pointer: Relative(9) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(1) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 553 }, Call { location: 988 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(9) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 562 }, Call { location: 988 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 569 }, Call { location: 991 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(1), location: 577 }, Jump { location: 572 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(1), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(13)), MemoryAddress(Relative(15)), HeapArray(HeapArray { pointer: Relative(8), size: 37 }), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 577 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(1), location: 581 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Load { destination: Relative(1), source_pointer: Relative(9) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(1) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 587 }, Call { location: 988 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(6) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(1) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 595 }, Call { location: 988 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(1) }, Const { destination: Relative(1), bit_size: Field, value: 4 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(12), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(12), source_pointer: Relative(9) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 606 }, Call { location: 988 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(12) }, Load { destination: Relative(12), source_pointer: Relative(9) }, Load { destination: Relative(14), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 615 }, Call { location: 988 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(17) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(12), rhs: Relative(16) }, JumpIf { condition: Relative(18), location: 622 }, Call { location: 991 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(12), location: 630 }, Jump { location: 625 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(8), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(14)), MemoryAddress(Relative(16)), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 630 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(8), location: 634 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(8), source_pointer: Relative(9) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 640 }, Call { location: 988 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(17) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 647 }, Call { location: 991 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 655 }, Jump { location: 650 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(10), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(8)), MemoryAddress(Relative(12)), HeapArray(HeapArray { pointer: Relative(13), size: 37 }), HeapArray(HeapArray { pointer: Relative(14), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 655 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(12) }, JumpIf { condition: Relative(10), location: 659 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Load { destination: Relative(8), source_pointer: Relative(9) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 665 }, Call { location: 988 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, Const { destination: Relative(8), bit_size: Field, value: 6 }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(13), source: Relative(12) }, Store { destination_pointer: Relative(13), source: Relative(8) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(3) }, Load { destination: Relative(2), source_pointer: Relative(6) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 685 }, Call { location: 988 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(8)), HeapArray(HeapArray { pointer: Relative(2), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(2), source_pointer: Relative(6) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(2) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 695 }, Call { location: 988 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(8)), HeapArray(HeapArray { pointer: Relative(2), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Relative(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(7) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 717 }, Call { location: 988 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(9) }, Load { destination: Relative(16), source_pointer: Relative(14) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 726 }, Call { location: 988 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(14) }, Load { destination: Relative(19), source_pointer: Relative(9) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 735 }, Call { location: 988 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(19) }, Load { destination: Relative(19), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(17) }, BinaryIntOp { destination: Relative(22), op: LessThanEquals, bit_size: U32, lhs: Relative(7), rhs: Relative(21) }, JumpIf { condition: Relative(22), location: 742 }, Call { location: 991 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(21) }, JumpIf { condition: Relative(7), location: 750 }, Jump { location: 745 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(7), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(19)), MemoryAddress(Relative(21)), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 750 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(21) }, JumpIf { condition: Relative(7), location: 754 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(7), source_pointer: Relative(14) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(7) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 760 }, Call { location: 988 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(17) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 767 }, Call { location: 991 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 775 }, Jump { location: 770 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(10), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(7)), MemoryAddress(Relative(12)), HeapArray(HeapArray { pointer: Relative(13), size: 37 }), HeapArray(HeapArray { pointer: Relative(14), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 775 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, JumpIf { condition: Relative(10), location: 779 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Load { destination: Relative(7), source_pointer: Relative(9) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(7) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 785 }, Call { location: 988 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(6) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(7) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 793 }, Call { location: 988 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(7) }, Const { destination: Relative(7), bit_size: Field, value: 7 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(7)), HeapArray(HeapArray { pointer: Relative(13), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Const { destination: Relative(7), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(7)), HeapArray(HeapArray { pointer: Relative(13), size: 37 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Load { destination: Relative(7), source_pointer: Relative(4) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(7) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 807 }, Call { location: 988 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(4) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 816 }, Call { location: 988 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(17) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(7), rhs: Relative(16) }, JumpIf { condition: Relative(18), location: 823 }, Call { location: 991 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(7), location: 831 }, Jump { location: 826 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(7), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(14)), MemoryAddress(Relative(16)), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), HeapArray(HeapArray { pointer: Relative(12), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 831 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(7), location: 835 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Load { destination: Relative(7), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(7) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 841 }, Call { location: 988 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(17) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 848 }, Call { location: 991 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 856 }, Jump { location: 851 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(10), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(7)), MemoryAddress(Relative(12)), HeapArray(HeapArray { pointer: Relative(13), size: 37 }), HeapArray(HeapArray { pointer: Relative(14), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 856 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(12) }, JumpIf { condition: Relative(10), location: 860 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Load { destination: Relative(7), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(7) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 866 }, Call { location: 988 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Load { destination: Relative(4), source_pointer: Relative(9) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(4) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 874 }, Call { location: 988 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(6) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(4) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 882 }, Call { location: 988 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(8)), HeapArray(HeapArray { pointer: Relative(4), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(4), source_pointer: Relative(6) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(4) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 892 }, Call { location: 988 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(8)), HeapArray(HeapArray { pointer: Relative(4), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(4), source_pointer: Relative(9) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(4) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 902 }, Call { location: 988 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(4) }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(14), source_pointer: Relative(9) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 911 }, Call { location: 988 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(17) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(14) }, JumpIf { condition: Relative(16), location: 917 }, Call { location: 991 }, Load { destination: Relative(16), source_pointer: Relative(9) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 923 }, Call { location: 988 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(17) }, BinaryIntOp { destination: Relative(20), op: LessThanEquals, bit_size: U32, lhs: Relative(14), rhs: Relative(19) }, JumpIf { condition: Relative(20), location: 930 }, Call { location: 991 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(19) }, JumpIf { condition: Relative(14), location: 938 }, Jump { location: 933 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), HeapArray(HeapArray { pointer: Relative(7), size: 39 }), MemoryAddress(Relative(3)), MemoryAddress(Relative(16)), MemoryAddress(Relative(19)), HeapArray(HeapArray { pointer: Relative(8), size: 37 }), HeapArray(HeapArray { pointer: Relative(10), size: 37 }), MemoryAddress(Relative(11))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 39 }, Simple(Field), Simple(Integer(U32)), Simple(Integer(U32)), Array { value_types: [Simple(Integer(U8))], size: 37 }, Array { value_types: [Simple(Integer(U8))], size: 37 }, Simple(Integer(U1))] }, Jump { location: 938 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(19) }, JumpIf { condition: Relative(3), location: 942 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Load { destination: Relative(3), source_pointer: Relative(9) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Not { destination: Relative(8), source: Relative(8), bit_size: U1 }, JumpIf { condition: Relative(8), location: 948 }, Call { location: 988 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(6) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 956 }, Call { location: 988 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(11)), MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(3), size: 16 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Load { destination: Relative(1), source_pointer: Relative(9) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(1) }, Not { destination: Relative(6), source: Relative(6), bit_size: U1 }, JumpIf { condition: Relative(6), location: 966 }, Call { location: 988 }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(1) }, Load { destination: Relative(1), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(2), location: 973 }, Call { location: 994 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 977 }, Call { location: 997 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 981 }, Call { location: 1000 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 987 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12435520423058260345 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 8222435832483736686 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 9482509618778316729 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "tdzfjty2Dgbwd9nrXJiUSEp9laIo0nR7EGCRBNvkAAdB3v2YpD6mvRhjMMLeRL/88SePZXokOdjvT38+//HtP79//PTX57+ffvn1+9Mfrx9fXj7+5/eXzx/ef/34+dP5p9+fDv+F2tMv9O6JejaSjWZj2YxsZjR8ZEPZcDaZwpnCmcKZwpnCmcKZ0jKlZUrLlJYpLVPamdLO5kzpZ2PZnCl2NjOafmRD2XA2LZuejWSj2Vg2mdIzRTJFMkUyRTJFMkUyRTJFMkUyRTJFM0UzRTNFM0UzRTNFM0UzRTNFM8UyxTLFMsUyxTLFMsUyxTLFMsUyZWTKyJSRKSNTRqaMTBmZMjJlZMrIlJkpM1NmpsxMmZkyM2VmysyUmSkzU+g4Vkur5dW21fbVymp1tbbasdqVRyuPVh6tPFp5tPJo5dHKo5VHK49WHq88Xnm88njl8crjlccrj1cerzxeeW3ltZXXVl5beW3ltZXXVp7f4XQ4BjAX/D5PEMBAAzoggAJI7kjuSBYkC5IFyYJkQbIgWZAsSBYkC5IVyYpkRbIiWZGsSFYkK5IVyYpkQ7Ih2ZBsSDYkG5INyYZkQ7IheSB5IHkgeSB5IHkgeSB5IHkgeSB5InkieSJ5InkieSJ5InkieSJ5rmQ+DoAABhrQAQEUMGAASCYkE5IJyYRkQjIhmZBMSCYkE5IZyYxkRjIjmZHMSGYkM5IZyYzkhuSG5IbkhuSGZK9Aag4FDBjAXIgaDBDAgCerowMCKGDAAOZC1GDAk6eDgQZ0QAAFDBjAmczsX8AHQAADDeiAAAqcySyOAcwFr8EEAQw0oAOePBwKGDCAueA1mCCAgTO5+cB5DSYEUMCAAcwFr8HEmdx84LwGEw3ogAAKGDAAT1afzBwAAQw0oAMCKODJ0zGAueA1mCCAgQZ04EzuMatSwIABzAWvwQQBDJzJ3SdbXoMJARQwYABzwWsw4cnDwUADOiCAAgYM4EyWmBgeAAEMNKADAihwJotPKb0GE3PBazBBAAMN6IAn+8B5DSYMGMBc8BpMEMCAJ/vAeQ0mBFDAgAHMBa/BxJms7GCgAR0QQAEDxoIXWsyx22r7amW1ayo+MBcfq53ZeoGpOAhgoAEdEEABA/yE/AJ5gTm6F1iCAA+MJUAHBFDAnzLejtXObL2ooqXV8mrbavtqPXE4PHE6DBjAXPB6ShDAQAN86nc4fO5HDgUMGMBcWBPKHhNIP6+YQQYEUMCPbo65EGukAAE+IfVrGCulQAcEUMCAAcyFWDcFCECyIFmQLEgWJAuSBcmCZEWyIlmRrEhWJCuSFcmKZEWyItmQbEg2JBuSDcmGZEOyIdmQbEiONVesLQlgwOvc275aWa2u1lY7Vjuz9XqK1hP9Pow1mN9IsQoLdEAABQwYwEyIl9M4HGfyIAcDDejAmiWJl9Fgx1zwQkoQ4If7P/YaSgigwHliozsGMBe8iBIEMNCADniyOBQwYABzwYsoQQADDegAkhuS/UtpDMcA5oIXWIIABhrQAU/2IfACS/j0za9zTAwDcyEmhgECGGhAB87k6WPqBTbjTwwYwFzwAksQwEADzuTpY+oFNn3gvMASBgxg5txTvJymj46XU6IDAvjhflW9ihJzwaso4SemDgYa0AEBFDBgAJ7sJ+bFlCCAgQZ0QAAFYs3h1zeXYKG5pLEIi00gAhhoQAcEUMCAyCZXZLNvKB0lKnGplXpJSlqK82+u6KO7JpQLshCV1oRecwEW0pKVBpRrL3VRiUut5F+v3oOXWUIBAwYwF7zMEgREdmyvRfZw9ZKUtLQWB5rbHtNFJS61kodQHKElK41SlKyPW2x7pKjEpVbqJSlpKfrwcYvtj9SEYgMkRSUutVIvSUlL1YdVH7ETQj6YsRWSohKXWqmXpKSl6MMHPbZEUtGHX93YFElRiUut1EtS0pL3wT4KUZkp74PJ91OPEpW41Eq9JCUtWWmUqg+qPqj6oOqDqg+qPqj6oOqDqg+qPqJCfS1uUaEpKnGplXpJSlqyUvTRXNFH923mo0QlLrVSL0lJS9GHuKIPdU0otlFSVFqLZYua5enSkpUGFOXrhWxRvikutZKvjP1MvI4TChgwgLngJZwgILJ9QKKAm1/AKOCUlLS0Ft4Wteq7BRa1muJSK0WIX7+o0JSVRin2o/ykokJTVOJSK/WSlLQUfQzXKE0oKjRFJS61Ui9FHz5IUaEpK3kf3YcmKtQ1okJT3odftREVmmqlXpKSlqw0StEH+4uQ6KO5qMSlVuolKWnJStFHd0Uf4m9ZjhKVuLR2PkYUY1eXlUZpQlGCPd7bcKmVeskX5wEFDBjAXPDqSxDAQGT7GcZ3aJ8uKWnJSmsXZUQRio9gFGGqlXrJQ3wnZsR3aGqUJhTfoeLjFt+hKS61Ui9JSUtWij78TOM7NBR1maISl1qpl6QUffggRYWmRmlCUaEpKnGplaKPeP8mpdg49qsWFZoapQlFhaaoxKVWiq1pv7pRoSm/Y/wEvEATA5iJ6dWZIICBBkQ2u6SkJSuN0oSiMlNU4lKcf3P1kpS0FH101yhNKCozRSUutVIvRR/iij78U0a5pkZpQm1txs2oUY03pb0kJS1FyHBNKL4cU1SKE/XkfM0Q6iUpaclKozSh+O70vaIZZZviUiv1kpS0ZCXvw/eVZhRwKPY8470wAQw0oAMCKGBAZPuAROGaD0gUbopKXIrz9wGJwk1JSUtx/vHOepQmFIVr9uPHuyf8j4nfv74+P/t/mPjHf6H49fvTl/evz5++Pv3y6dvLy7un/75/+Rb/6O8v7z9F+/X96/m3ZwE+f/rzbM/Avz6+PLt+vPt59HH7UMOxRnWw3H/0WEefy5lbh/PtwzlqIALOt3j6SELzmz0Tzv3kBz5CLBryMwjfOl5uH6++kIvjz3XdreN1+xNcJfSBUzjf4x23EsbthOEbMhFwPq3qeOZ/HT83j78aA8F9dL5TvnX+vnC9eR92DOI5kbwZsH8fXUbcNwzUN68jydsNBFNdBZGbn8AuRvIwnMG503A7YuwPxdgeCj42ryTTGw6FT1Di+MY3a8IX2DeHgrWebOdb3ZsRfXsoLiPuHArdHQrbDbi6lI3qi+58UXrzQ8z9Szm3L2XbvSkbv91d3X15G8efL4BufoKL+4nGqAfMOVG+GSHbQ3F1Fnz0GopD7WbE7k3Zdr+0Ly/l9L9dl3Lc/Nrsx/alvIy4767uuzdlb293V0vD8edbtpuf4OqWHK2u47kgvxmh24/7bvujafujuTuZlN2v7stLed/jXvbnk7I/n5Td+aTszicvb+wpmMbwHDfnMbI/pZT9KaXsTyl1977U3W/v/TtKd5+U2t8wwDqG8nxD8chFkNry4PMN/yM7Bu2oHQN6YMdgEDY9zq33R9b79+2aXCVwPeCY283PMDdHQbdH4WrfRWrfxW5eA9u9E03eMOCui3h1I9ZUmA9+ZNuE4q3ZerSKPrTrcd/NeBlx391Iu1eS9p8KVxdzHPgU4/Zm6OUm1rQKeOwM7nmwjN2V9rA3DNgtCW7t5zfcQxtYUjNxEnlsA+vOkhjbJcG0WxJjvyTs8vnC9Xxp7cGIex5Rc/emnOMNA3bv6nZQ7QXyI3uB902a+v6bmr5/T9tbfoz77unLXbg7r8TcvhJX+3D3XYm5fyWudkV7q2Vyb/OxiC4VcfuBfR2htYvVx8U0aHdVQ/tvbmh7XdP2v7nItj/GeMuE7Yel4Pgm44HlXTPckm3qA8d3wndeb/bI5nLXA2dw3tvtoS3u+x5SlxF3PqRk/43o9rsb4t376fJj3PeovNzkvm88LiPuG4++Owu4PIf7rsT1S4f5883JcTwScS5262Iet+uD2u5Kh7bf31wm3Hdj7t7Zl7uz+rNAdR4PvbmwWnSyNX3kzcV9H8P2q8u2q+vqtcP+x7hzT2x/N0b2d2NkdzdG9ndjLt/h3Dc5vY64a3J6HXHf5FT2/1OQvGXCffe27k9OZXtqKfMtE/YfuZNq03be3qW7jtDx850aP/RO7b7hkP1dLtnf5dLdXS7Z3+WS/V0u2d/lItt9vUhGb5mwXR7tqPfF7bD2SHn0o06iH/pQhfVOuCl6b/JQxMUi7rfzd+8/fHz914/L++FZrx/f//HyvH7717dPH/7xt1//9wV/gx+39+X184fnP7+9PnvSP37m3vnrr+eT4d0c9pv/JDL/7ezv5tTffnj3/wc=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n#[deprecated(\"This functions is deprecated in favour of external verification libraries. To verify Barretenberg proofs, it's recommended to use the library https://github.com/AztecProtocol/aztec-packages/tree/next/barretenberg/noir/bb_proof_verification\")]\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "use std::mem::array_refcount;\n\nfn main() {\n    let mut array = [0, 1, 2];\n    assert_refcount(array, 1, true);\n\n    borrow(array, array_refcount(array));\n    borrow_mut(&mut array, array_refcount(array));\n    let _ = copy_mut(array, array_refcount(array));\n\n    borrow_mut_two(&mut array, &mut array, array_refcount(array));\n\n    let mut u32_array = [0, 1, 2];\n    let rc1 = array_refcount(array);\n    let rc2 = array_refcount(u32_array);\n    borrow_mut_two_separate(&mut array, &mut u32_array, rc1, rc2);\n\n    // Safety: test\n    regression_7297();\n}\n\nfn borrow(array: [Field; 3], rc_before_call: u32) {\n    assert_refcount(array, rc_before_call, true);\n    println(array[0]);\n}\n\nfn borrow_mut(array: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array, rc_before_call, true);\n    array[0] = 3;\n    println(array[0]);\n}\n\n// Returning a copy of the array, otherwise the SSA can end up optimizing away\n// the `array_set`, with the whole body just becoming basically `println(4);`.\nfn copy_mut(mut array: [Field; 3], rc_before_call: u32) -> [Field; 3] {\n    assert_refcount(array, rc_before_call, true);\n    array[0] = 4;\n    println(array[0]);\n    array\n}\n\nfn borrow_mut_two(array1: &mut [Field; 3], array2: &mut [Field; 3], rc_before_call: u32) {\n    assert_refcount(*array1, rc_before_call, true);\n    assert_refcount(*array2, rc_before_call + 1, true); // array should be copied from previous dereference\n    array1[0] = 5;\n    array2[0] = 6;\n    println(array1[0]); // array1 & 2 alias, so this should also print 6\n    println(array2[0]);\n}\n\n/// Borrow a different array: we should be able to reason that these types cannot be mutably\n/// aliased since they're different types so we don't need any inc_rc instructions.\nfn borrow_mut_two_separate(\n    array1: &mut [Field; 3],\n    array2: &mut [u32; 3],\n    rc_before_call1: u32,\n    rc_before_call2: u32,\n) {\n    assert_refcount(*array1, rc_before_call1, true);\n    assert_refcount(*array2, rc_before_call2, true);\n    array1[0] = 7;\n    array2[0] = 8;\n    println(array1[0]);\n    println(array2[0]);\n}\n\nfn assert_refcount<T>(array: [T; 3], mut expected: u32, expect_copy: bool) {\n    let count = array_refcount(array);\n\n    if expect_copy {\n        expected += 1;\n    }\n\n    // All ref counts are zero when running this as a constrained program\n    if std::runtime::is_unconstrained() {\n        if count != expected {\n            // Brillig doesn't print the actual & expected arguments on assertion failure\n            println(f\"actual = {count}, expected = {expected}\");\n        }\n        assert_eq(count, expected);\n    } else {\n        assert_eq(count, 0);\n    }\n}\n\nfn regression_7297() {\n    let mut array = [0, 1, 2];\n\n    let refcount_0 = array_refcount(array);\n\n    // This is currently copying the array due to the inc_rc in the array_refcount call above\n    borrow_mut_two(&mut array, &mut array, refcount_0);\n\n    let refcount_1 = array_refcount(array);\n    let array_2 = copy_mut(array, refcount_1 + 1); // array was just copied on the previous line\n    let refcount_2 = array_refcount(array);\n\n    // Mutation of the original could occur if we double decremented the RC and then went back to 1 by accident.\n    // For this to come out we have to run the test with `--inliner-aggressiveness -9223372036854775808`\n    assert_eq(array[0], 6, \"the original should not be mutated by copy_mut, only borrow_mut_two\");\n    assert_eq(array_2[0], 4, \"the copy should have the expected content\");\n\n    if std::runtime::is_unconstrained() {\n        // Double decrementing the RC could occur if we don't realize that array mutation made a copy,\n        // which decreases the RC of the original and sets the new one to 1.\n        // This assertion is redundant with the one following it, but it's here because `assert_eq` doesn't print\n        // what actual values that cause it to fail, so this is a way to highlight the bug about the refcount of\n        // still live arrays going to zero, without any doubt that it's just not 1, as it should be.\n        assert(\n            refcount_1 != 0,\n            \"borrow_mut_two should create a fresh array and not decrease its RC\",\n        );\n\n        // `5` here is higher than in other inliner settings. This is likely due to references getting optimized out,\n        // and mutations being optimized and removed so the original array ends up being aliased more.\n        assert_eq(\n            refcount_1,\n            6,\n            \"There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before array_refcount call)\",\n        );\n        assert_eq(\n            refcount_2,\n            refcount_1 + 4,\n            \"after refcount_1 we clone once in passing array to copy_mut, once to array_refcount after, and twice within copy_mut\",\n        );\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
