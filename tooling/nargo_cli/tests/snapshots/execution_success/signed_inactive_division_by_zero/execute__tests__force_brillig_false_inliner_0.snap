---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "condition",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _27",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : [_3]",
    "BLACKBOX::RANGE [_0]:32 bits []",
    "BLACKBOX::RANGE [_1]:32 bits []",
    "BLACKBOX::RANGE [_2]:1 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(4)), Simple(Witness(5))]",
    "BLACKBOX::RANGE [_4]:1 bits []",
    "BLACKBOX::RANGE [_5]:31 bits []",
    "EXPR [ (1, _1) (-2147483648, _4) (-1, _5) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2147483648 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [_6]:1 bits []",
    "BLACKBOX::RANGE [_7]:31 bits []",
    "EXPR [ (1, _0) (-2147483648, _6) (-1, _7) 0 ]",
    "EXPR [ (-2, _1, _4) (1, _1) (4294967296, _4) (-1, _8) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 })], outputs: [Simple(Witness(9))]",
    "EXPR [ (1, _8, _9) (1, _10) -1 ]",
    "EXPR [ (1, _8, _10) 0 ]",
    "EXPR [ (1, _2, _10) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _2) 0 ]",
    "inputs: [Single(Expression { mul_terms: [(-2, Witness(0), Witness(6))], linear_combinations: [(1, Witness(0)), (4294967296, Witness(6))], q_c: 0 }), Single(Expression { mul_terms: [(-2, Witness(1), Witness(4))], linear_combinations: [(1, Witness(1)), (4294967296, Witness(4))], q_c: 0 })], outputs: [Simple(Witness(11)), Simple(Witness(12))]",
    "BLACKBOX::RANGE [_11]:32 bits []",
    "BLACKBOX::RANGE [_12]:32 bits []",
    "EXPR [ (-2, _1, _4) (1, _1) (-1, _2) (4294967296, _4) (-1, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [_13]:32 bits []",
    "EXPR [ (-2, _1, _4) (1, _1) (4294967296, _4) (-1, _14) 0 ]",
    "EXPR [ (1, _11, _14) (1, _12) (-1, _15) 0 ]",
    "EXPR [ (-2, _0, _6) (1, _0) (4294967296, _6) (-1, _16) 0 ]",
    "EXPR [ (-1, _2, _15) (1, _2, _16) 0 ]",
    "EXPR [ (-1, _11) (-1, _17) 2147483648 ]",
    "EXPR [ (-2, _4, _6) (1, _4) (1, _6) (-1, _18) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 })], outputs: [Simple(Witness(19))]",
    "EXPR [ (1, _11, _19) (1, _20) -1 ]",
    "EXPR [ (1, _11, _20) 0 ]",
    "EXPR [ (2, _17, _18) (1, _11) (-1, _21) 0 ]",
    "EXPR [ (-1, _20) (-1, _22) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 0 })], outputs: [Simple(Witness(23))]",
    "EXPR [ (1, _12, _23) (1, _24) -1 ]",
    "EXPR [ (1, _12, _24) 0 ]",
    "EXPR [ (-2, _6, _12) (4294967296, _6) (1, _12) (-1, _25) 0 ]",
    "EXPR [ (-1, _24) (-1, _26) 1 ]",
    "EXPR [ (1, _21, _22) (-1, _27) 0 ]",
    "EXPR [ (-1, _2, _27) (1, _3) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "ddFBbsMgEAXQu7Bm4Rmaus1VqsrCNo6QELYIVKos371jftwki2xmDMN/smBVo+vLpfNxmq/q/LWqPvkQ/KUL82Czn6PsrptWx7LLyTnZUg9zSS02uZjVOZYQtPqxodRD18XG2rNNMm20cnGULuDkg9u/Nn1PN6+j1PItTG37Hz9J/ltWdvDp6Y+VkYNavdV6qvW91rbWj1o/a6UGjdAYDXkCQBAIBMEgIASFoTAUhsJQGApDYSgMhaEwFAPFQDFQDBQDxUAxUMyubPu1JW/74G6vNZU4PDxe/l2OyfG8S5oHN5bk9murM7nIPw==",
  "file_map": {
    "50": {
      "source": "fn main(a: i32, b: i32, condition: bool) -> pub i32 {\n    if condition {\n        // If `condition` is not set then we should not trigger an assertion failure here.\n        a / b\n    } else {\n        0\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
