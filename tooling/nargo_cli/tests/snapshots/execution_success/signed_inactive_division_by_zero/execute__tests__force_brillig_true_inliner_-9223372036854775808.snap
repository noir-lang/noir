---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "condition",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : [_3]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U32) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U1) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 18 }, Call { location: 19 }, Mov { destination: Direct(32839), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 55 }, JumpIf { condition: Relative(3), location: 25 }, Jump { location: 22 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Mov { destination: Relative(4), source: Relative(1) }, Jump { location: 53 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 2147483647 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Sub, bit_size: U32, lhs: Relative(11), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 31 }, Jump { location: 33 }, Mov { destination: Relative(6), source: Relative(12) }, Jump { location: 35 }, Mov { destination: Relative(6), source: Relative(1) }, Jump { location: 35 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 2147483647 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Sub, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, JumpIf { condition: Relative(7), location: 41 }, Jump { location: 43 }, Mov { destination: Relative(8), source: Relative(12) }, Jump { location: 45 }, Mov { destination: Relative(8), source: Relative(2) }, Jump { location: 45 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U32, lhs: Relative(6), rhs: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Xor, bit_size: U1, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 49 }, Jump { location: 51 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Mov { destination: Relative(4), source: Relative(3) }, Jump { location: 53 }, Mov { destination: Relative(1), source: Relative(4) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 60 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "dZFBbsMgEEXvwpqFMUPc+ipRZGEbR0gIWwQqVRZ3L/jHTbrohgcM/6GBnc1mTPfB+mV9sP66szFY5+x9cOuko1192d1ZU4dWsV5w1l6ADvgAPg/IBhBAC0iAAFgkLBIWCYuEhWAhWAgWgoVgIVgIFoKFYCFYVLXkzNnZyRCDMbWRt9ZKw5sOxkfW++QcZ1/apePQY9P+YNShVBvOjJ8Li3CxztRZ5q90839UdO0zLLruN65K/lZWerLhz2PnagpWj848l0vy01s1fm9n5fysLayTmVMw1fT6MVHGq1L80txyve0H",
  "file_map": {
    "50": {
      "source": "fn main(a: i32, b: i32, condition: bool) -> pub i32 {\n    if condition {\n        // If `condition` is not set then we should not trigger an assertion failure here.\n        a / b\n    } else {\n        0\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
