---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "5421095327929394772": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "5476849662351484621": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 5 limbs"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _23",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 4294967264 ], EXPR [ 4294967296 ]], outputs: [_3, _4]",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "EXPR [ (1, _1) (-4294967296, _3) (-1, _4) 4294967264 ]",
    "EXPR [ (-1, _3) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _1) 0 ], EXPR [ 5 ], EXPR [ 2 ]], outputs: [[_5, _6, _7, _8, _9]]",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 1)] []",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "EXPR [ (1, _1) (-1, _5) (-2, _6) (-4, _7) (-8, _8) (-16, _9) 0 ]",
    "EXPR [ (1, _9, _9) (2, _9) (-1, _10) 1 ]",
    "EXPR [ (-1, _8) (-1, _11) 1 ]",
    "EXPR [ (2, _8, _10) (1, _10, _11) (-1, _12) 0 ]",
    "EXPR [ (1, _12, _12) (-1, _13) 0 ]",
    "EXPR [ (-1, _7) (-1, _14) 1 ]",
    "EXPR [ (2, _7, _13) (1, _13, _14) (-1, _15) 0 ]",
    "EXPR [ (1, _15, _15) (-1, _16) 0 ]",
    "EXPR [ (-1, _6) (-1, _17) 1 ]",
    "EXPR [ (2, _6, _16) (1, _16, _17) (-1, _18) 0 ]",
    "EXPR [ (1, _18, _18) (-1, _19) 0 ]",
    "EXPR [ (-1, _5) (-1, _20) 1 ]",
    "EXPR [ (2, _5, _19) (1, _19, _20) (-1, _21) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0, _21) 0 ], EXPR [ 4294967296 ]], outputs: [_22, _23]",
    "BLACKBOX::RANGE [(_22, 32)] []",
    "BLACKBOX::RANGE [(_23, 32)] []",
    "EXPR [ (1, _0, _21) (-4294967296, _22) (-1, _23) 0 ]",
    "EXPR [ (1, _2) (-1, _23) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
