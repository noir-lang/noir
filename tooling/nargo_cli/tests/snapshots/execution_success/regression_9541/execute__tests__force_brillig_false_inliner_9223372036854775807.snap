---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "285656119219400463": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 32 limbs"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _131",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 4294967264 ], EXPR [ 4294967296 ]], outputs: [_3, _4]",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "EXPR [ (1, _1) (-4294967296, _3) (-1, _4) 4294967264 ]",
    "EXPR [ (-1, _3) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _1) 0 ], EXPR [ 32 ], EXPR [ 2 ]], outputs: [[_5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36]]",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 1)] []",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 1)] []",
    "BLACKBOX::RANGE [(_11, 1)] []",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "BLACKBOX::RANGE [(_13, 1)] []",
    "BLACKBOX::RANGE [(_14, 1)] []",
    "BLACKBOX::RANGE [(_15, 1)] []",
    "BLACKBOX::RANGE [(_16, 1)] []",
    "BLACKBOX::RANGE [(_17, 1)] []",
    "BLACKBOX::RANGE [(_18, 1)] []",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "BLACKBOX::RANGE [(_20, 1)] []",
    "BLACKBOX::RANGE [(_21, 1)] []",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 1)] []",
    "BLACKBOX::RANGE [(_24, 1)] []",
    "BLACKBOX::RANGE [(_25, 1)] []",
    "BLACKBOX::RANGE [(_26, 1)] []",
    "BLACKBOX::RANGE [(_27, 1)] []",
    "BLACKBOX::RANGE [(_28, 1)] []",
    "BLACKBOX::RANGE [(_29, 1)] []",
    "BLACKBOX::RANGE [(_30, 1)] []",
    "BLACKBOX::RANGE [(_31, 1)] []",
    "BLACKBOX::RANGE [(_32, 1)] []",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 1)] []",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "EXPR [ (1, _1) (-1, _5) (-2, _6) (-4, _7) (-8, _8) (-16, _9) (-32, _10) (-64, _11) (-128, _12) (-256, _13) (-512, _14) (-1024, _15) (-2048, _16) (-4096, _17) (-8192, _18) (-16384, _19) (-32768, _20) (-65536, _21) (-131072, _22) (-262144, _23) (-524288, _24) (-1048576, _25) (-2097152, _26) (-4194304, _27) (-8388608, _28) (-16777216, _29) (-33554432, _30) (-67108864, _31) (-134217728, _32) (-268435456, _33) (-536870912, _34) (-1073741824, _35) (-2147483648, _36) 0 ]",
    "EXPR [ (1, _36, _36) (2, _36) (-1, _37) 1 ]",
    "EXPR [ (-1, _35) (-1, _38) 1 ]",
    "EXPR [ (2, _35, _37) (1, _37, _38) (-1, _39) 0 ]",
    "EXPR [ (1, _39, _39) (-1, _40) 0 ]",
    "EXPR [ (-1, _34) (-1, _41) 1 ]",
    "EXPR [ (2, _34, _40) (1, _40, _41) (-1, _42) 0 ]",
    "EXPR [ (1, _42, _42) (-1, _43) 0 ]",
    "EXPR [ (-1, _33) (-1, _44) 1 ]",
    "EXPR [ (2, _33, _43) (1, _43, _44) (-1, _45) 0 ]",
    "EXPR [ (1, _45, _45) (-1, _46) 0 ]",
    "EXPR [ (-1, _32) (-1, _47) 1 ]",
    "EXPR [ (2, _32, _46) (1, _46, _47) (-1, _48) 0 ]",
    "EXPR [ (1, _48, _48) (-1, _49) 0 ]",
    "EXPR [ (-1, _31) (-1, _50) 1 ]",
    "EXPR [ (2, _31, _49) (1, _49, _50) (-1, _51) 0 ]",
    "EXPR [ (1, _51, _51) (-1, _52) 0 ]",
    "EXPR [ (-1, _30) (-1, _53) 1 ]",
    "EXPR [ (2, _30, _52) (1, _52, _53) (-1, _54) 0 ]",
    "EXPR [ (1, _54, _54) (-1, _55) 0 ]",
    "EXPR [ (-1, _29) (-1, _56) 1 ]",
    "EXPR [ (2, _29, _55) (1, _55, _56) (-1, _57) 0 ]",
    "EXPR [ (1, _57, _57) (-1, _58) 0 ]",
    "EXPR [ (-1, _28) (-1, _59) 1 ]",
    "EXPR [ (2, _28, _58) (1, _58, _59) (-1, _60) 0 ]",
    "EXPR [ (1, _60, _60) (-1, _61) 0 ]",
    "EXPR [ (-1, _27) (-1, _62) 1 ]",
    "EXPR [ (2, _27, _61) (1, _61, _62) (-1, _63) 0 ]",
    "EXPR [ (1, _63, _63) (-1, _64) 0 ]",
    "EXPR [ (-1, _26) (-1, _65) 1 ]",
    "EXPR [ (2, _26, _64) (1, _64, _65) (-1, _66) 0 ]",
    "EXPR [ (1, _66, _66) (-1, _67) 0 ]",
    "EXPR [ (-1, _25) (-1, _68) 1 ]",
    "EXPR [ (2, _25, _67) (1, _67, _68) (-1, _69) 0 ]",
    "EXPR [ (1, _69, _69) (-1, _70) 0 ]",
    "EXPR [ (-1, _24) (-1, _71) 1 ]",
    "EXPR [ (2, _24, _70) (1, _70, _71) (-1, _72) 0 ]",
    "EXPR [ (1, _72, _72) (-1, _73) 0 ]",
    "EXPR [ (-1, _23) (-1, _74) 1 ]",
    "EXPR [ (2, _23, _73) (1, _73, _74) (-1, _75) 0 ]",
    "EXPR [ (1, _75, _75) (-1, _76) 0 ]",
    "EXPR [ (-1, _22) (-1, _77) 1 ]",
    "EXPR [ (2, _22, _76) (1, _76, _77) (-1, _78) 0 ]",
    "EXPR [ (1, _78, _78) (-1, _79) 0 ]",
    "EXPR [ (-1, _21) (-1, _80) 1 ]",
    "EXPR [ (2, _21, _79) (1, _79, _80) (-1, _81) 0 ]",
    "EXPR [ (1, _81, _81) (-1, _82) 0 ]",
    "EXPR [ (-1, _20) (-1, _83) 1 ]",
    "EXPR [ (2, _20, _82) (1, _82, _83) (-1, _84) 0 ]",
    "EXPR [ (1, _84, _84) (-1, _85) 0 ]",
    "EXPR [ (-1, _19) (-1, _86) 1 ]",
    "EXPR [ (2, _19, _85) (1, _85, _86) (-1, _87) 0 ]",
    "EXPR [ (1, _87, _87) (-1, _88) 0 ]",
    "EXPR [ (-1, _18) (-1, _89) 1 ]",
    "EXPR [ (2, _18, _88) (1, _88, _89) (-1, _90) 0 ]",
    "EXPR [ (1, _90, _90) (-1, _91) 0 ]",
    "EXPR [ (-1, _17) (-1, _92) 1 ]",
    "EXPR [ (2, _17, _91) (1, _91, _92) (-1, _93) 0 ]",
    "EXPR [ (1, _93, _93) (-1, _94) 0 ]",
    "EXPR [ (-1, _16) (-1, _95) 1 ]",
    "EXPR [ (2, _16, _94) (1, _94, _95) (-1, _96) 0 ]",
    "EXPR [ (1, _96, _96) (-1, _97) 0 ]",
    "EXPR [ (-1, _15) (-1, _98) 1 ]",
    "EXPR [ (2, _15, _97) (1, _97, _98) (-1, _99) 0 ]",
    "EXPR [ (1, _99, _99) (-1, _100) 0 ]",
    "EXPR [ (-1, _14) (-1, _101) 1 ]",
    "EXPR [ (2, _14, _100) (1, _100, _101) (-1, _102) 0 ]",
    "EXPR [ (1, _102, _102) (-1, _103) 0 ]",
    "EXPR [ (-1, _13) (-1, _104) 1 ]",
    "EXPR [ (2, _13, _103) (1, _103, _104) (-1, _105) 0 ]",
    "EXPR [ (1, _105, _105) (-1, _106) 0 ]",
    "EXPR [ (-1, _12) (-1, _107) 1 ]",
    "EXPR [ (2, _12, _106) (1, _106, _107) (-1, _108) 0 ]",
    "EXPR [ (1, _108, _108) (-1, _109) 0 ]",
    "EXPR [ (-1, _11) (-1, _110) 1 ]",
    "EXPR [ (2, _11, _109) (1, _109, _110) (-1, _111) 0 ]",
    "EXPR [ (1, _111, _111) (-1, _112) 0 ]",
    "EXPR [ (-1, _10) (-1, _113) 1 ]",
    "EXPR [ (2, _10, _112) (1, _112, _113) (-1, _114) 0 ]",
    "EXPR [ (1, _114, _114) (-1, _115) 0 ]",
    "EXPR [ (-1, _9) (-1, _116) 1 ]",
    "EXPR [ (2, _9, _115) (1, _115, _116) (-1, _117) 0 ]",
    "EXPR [ (1, _117, _117) (-1, _118) 0 ]",
    "EXPR [ (-1, _8) (-1, _119) 1 ]",
    "EXPR [ (2, _8, _118) (1, _118, _119) (-1, _120) 0 ]",
    "EXPR [ (1, _120, _120) (-1, _121) 0 ]",
    "EXPR [ (-1, _7) (-1, _122) 1 ]",
    "EXPR [ (2, _7, _121) (1, _121, _122) (-1, _123) 0 ]",
    "EXPR [ (1, _123, _123) (-1, _124) 0 ]",
    "EXPR [ (-1, _6) (-1, _125) 1 ]",
    "EXPR [ (2, _6, _124) (1, _124, _125) (-1, _126) 0 ]",
    "EXPR [ (1, _126, _126) (-1, _127) 0 ]",
    "EXPR [ (-1, _5) (-1, _128) 1 ]",
    "EXPR [ (2, _5, _127) (1, _127, _128) (-1, _129) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0, _129) 0 ], EXPR [ 4294967296 ]], outputs: [_130, _131]",
    "BLACKBOX::RANGE [(_130, 8)] []",
    "BLACKBOX::RANGE [(_131, 32)] []",
    "EXPR [ (1, _0, _129) (-4294967296, _130) (-1, _131) 0 ]",
    "EXPR [ (1, _2) (-1, _131) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "jdTNjqJAFEDhd6k1i7r1B+WrTCYGFTskBA0Nk0yM7z5Y51ZP96KT3hQq3s8Ih3qYy3Da3o7jfL29m8Ovhzkt4zSNb8fpdu7X8Tbvnz6ejalvj+syDPtH5tP5fereL8O8msO8TVNj/vTTVr70fu/nclz7ZT9rGzPMl/24g9dxGl6vns3/afv9aEg6G8PHcPz5dP3lGL9M/97f9edx+fJvjTMH1xhf1lDWWNZU1rasXVlzWcVyEA6MC/MCIAgCIRgCIigOxaE4FIfiUByKQ3EoDsWheBSP4vWvoHgUj+JRPIpH8SgBJaAElKBXBCWgBJSAElACSkSJKBElokS9sCgRJaJElIiSUBJKQkkoCSXp/UFJKAklobQoLUqL0qK0KC1Kq7cZpUVpUTqUDqVD6VA6lA6lQ+m0FpQOJaNklIySUTJKRskoGSVrdLU6zc5qd1bDs1qe1fSstmc1Pqv1Wc3PqveRsXo15FpyTbm2XGOuNdectWfRoMXV50I9bVo0atGqRbMW7Vo0bNGyRdMWbVt8fdDU07xF+5YS+PO1KSxjf5oG3cmu23z+tLGtf+/1TN367svtPFy2ZXhtC+XcvlH8Aw==",
  "file_map": {
    "50": {
      "source": "fn main(a: u32, b: u8) -> pub u32 {\n    a << (b as u32)\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
