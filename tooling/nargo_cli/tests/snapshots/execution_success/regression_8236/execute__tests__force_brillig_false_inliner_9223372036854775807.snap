---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 16
          }
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "boolean"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _10",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : [_4]",
    "BLACKBOX::RANGE [_0]:16 bits []",
    "BLACKBOX::RANGE [_1]:16 bits []",
    "BLACKBOX::RANGE [_2]:16 bits []",
    "INIT (id: 0, len: 3, witnesses: [_0, _1, _2])",
    "BLACKBOX::RANGE [_3]:1 bits []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 3 ]], outputs: [_5, _6]",
    "BLACKBOX::RANGE [_5]:31 bits []",
    "EXPR [ (1, _6) (-1, _7) 1 ]",
    "BLACKBOX::RANGE [_7]:2 bits []",
    "EXPR [ (1, _0) (-3, _5) (-1, _6) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _6) 0 ], value: EXPR [ (1, _8) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _8) 4294992289 ], EXPR [ 4294967296 ]], outputs: [_9, _10]",
    "BLACKBOX::RANGE [_9]:1 bits []",
    "BLACKBOX::RANGE [_10]:32 bits []",
    "EXPR [ (-1, _8) (-4294967296, _9) (-1, _10) 4294992289 ]",
    "EXPR [ (1, _4) (1, _9) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
