---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 16
          }
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "boolean"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "boolean"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _10",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : [_4]",
    "BLACKBOX::RANGE [(_0, 16)] []",
    "BLACKBOX::RANGE [(_1, 16)] []",
    "BLACKBOX::RANGE [(_2, 16)] []",
    "INIT (id: 0, len: 3, witnesses: [_0, _1, _2])",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 3 ]], outputs: [_5, _6]",
    "BLACKBOX::RANGE [(_5, 31)] []",
    "BLACKBOX::RANGE [(_6, 2)] []",
    "EXPR [ (1, _6) (-1, _7) 1 ]",
    "BLACKBOX::RANGE [(_7, 2)] []",
    "EXPR [ (1, _0) (-3, _5) (-1, _6) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _6) 0 ], value: EXPR [ (1, _8) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-1, _8) 4294992289 ], EXPR [ 4294967296 ]], outputs: [_9, _10]",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "EXPR [ (-1, _8) (-4294967296, _9) (-1, _10) 4294992289 ]",
    "EXPR [ (1, _4) (1, _9) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pZLfqsMgDMbfJdde6NTN9lUOh2JbOwSxxemBQ+m7L7V/tl0MRneTz+TzFwLJCK2p07WyvutvUP6MUAfrnL1Wrm90tL3H6jgR2NIqBmOwBE8+UoMOxkcofXKOwJ92KX+6DdpnjTqgSwkY36Jiw846M78m8qDpe5QrscJC8B2XH/NMnVf+JOUBnqti5XnBv+IFpYd4tfPH5pc7f/mOZ+KF/8VMNza8XAxINAmcc7zkqHIscmR0EQYlroWdcD8ofBGxCHZg0zxQsLp2Zr3DLvnm6Szj/7A52+EOoW9Mm4KZB8oejngH",
  "file_map": {
    "50": {
      "source": "global G_A: [u16; 3] = [33700, 47314, 35095];\nglobal G_B: [u16; 3] = [59890, 17417, 14409];\nfn main(a: [u16; 3], b: [bool; 1]) -> pub bool {\n    // Safety: testing context\n    let res = unsafe { func_1(G_B, true) }[(((a[0] as u32) % (G_B[2] as u32)) % 1)];\n    if res {\n        // Safety: testing context\n        let c = unsafe { func_1(a, b[0]) };\n        b[0]\n    } else {\n        ((a[((a[0] as u32) % 3)] as u32) > ((24993 % G_A[1]) as u32))\n    }\n}\nunconstrained fn func_1(a: [u16; 3], b: bool) -> [bool; 1] {\n    [false]\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
