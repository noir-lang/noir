---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/81ZS47TQBAtO3Zix4kSARfgBnbsfGYXCdix4gR4EnIMNLBhwQXYgMQSCYkros50JZXnSk9QuocpKWrbVV3/qv4konuI7M9AYseYusA0azuW10HlkVcZUs8okJ4nTo7oPDDujx1zmG/wPY8G5yDXJ/9V2SxyxT6P+te54BmA/4z5J2H4lwPL5/XdKX8CuWM6LV45h3Eyx95YXGbx/DyxzznwCxF3qZNvvz1X9I+FbQZe3QWRXRXWl9/oCDJWqUO3FGhfQDzSQP56JvgSyNJyKwK9AsVxFoE8otP8R/8NKVzelnYBwFrqUdc/MfguUXSdAs4A5+RE8Sv6PFTPYVkc/0TYqNkRUzc3U2FTCt9e2tHUyA+wT/Or/Ia+O1ffIXNyrNiIsekHkn1pPbD8IQXtG4d66IM+6B+sh4Gi61TB8byJ4tcUfD4IY+OhHjLLT9aDZkcM9PKZ6FgP/K2yo1YPml/lN6yHVNEnV/Tx6J8bjinu5Qwwbgh2SVwhcFJ/hB68S5vM+FPwRTrUR+YR66b5ycDajuWVwLazn2Qv7Ss2pUC/Bj2lT0PvBdBHeRjZLeaLBFe+MG4kcFqvZNByiW26JpcKkM/0l8aa6d/aMbC/1VizrAl1/Yg9N9A65+y5ffCxgX/tue/sqPVcXFvxm6vn4j7gqfRcrJP/0XNd/QR1WNuxvA4qrKv3IDdQfNS6ykC2xEUebdZs88h/pvUkj/xrbQ3AuirCxK3R1gxtf83yhxR0LT7srwvQB/2D++uRouuU3GukxEk5I0WOxivzyCsHe2Q8ojMjy8FveC6U68LajuWVoJ1HM7Ah82hD7t+GakrdOGIccg82TKnbPx7p7F4G7h+H++aR7/hUZTkW+qLfzJ7oo/gucSkd60/OLQRe0n8WPD/ZZ0Or3UnhGoB3UlosJX1fyOo57EuB/osdTa7+ss+uOzOUJ32SOHzC9F+FvN/Ak+8AiNy9menHCr28R0jAHrnfHcM87Vxxbi72n4HQz8VL4vg9VvhoPfDcvFjRbwR8sjPy5LsBzBsDfI96ac0czuR3RzpffWG5uj/P7HW1/FPq7q2l/BTov9t3uc/gMblCz92yrXZ1u2vn7XbbbFrct5LwVxFAfrusV5tZs1nezuu2XjwoX/6vgj1n7y86zUEDeKeu/X/m4hU7eEUOXjxPnl2x/xnQzkchfT5brRY3s9uyWW43u21TP3bMN/PF7aaZt+WHaq/OQ/L/AmwWHBWdIAAA",
  "debug_symbols": "tZrbbuJADIbfJddcjMczY5tXWa0qDqGKhABxWGmFePdNuhDSJKUaN76pmmq+/0O1PUTJXIt1uby8v1W7zf5UzH9di+1+tThX+119db3NiuWx2m6r97funwvX/ID0sf50WOyay9N5cTwXcxY/K8rdupiLg5rfVNuymEd3mw2WgoP7UgDpLv09K4Asw9kyXAzDvRsLF0qPcKI+AdmEzyYwmwjZRMwmUjZB2QRnE5JLYHbNMbvmmF1zzK45ZtccR2tez0d4DIiD2GeSgiEFwwpG8pngFAwoGK9gUMEEBaPog6Dog6Dog6Dog6Dog6jog/hFHwRqmcivv4xCxPvawK4f723j0TY+2MZH2/hkG0+28WwbL6bxydnG205tsp3aZDu16fupJfc6HvFxf42fP0kTH23jk2082cazbbyYxpOzjQfbeG8bj7bxtlNLtlNLuVPbMKRgWMFIPsNOwYCC8QoGFcwX3cXSPkdx/ZpyVDBJwZCCYQUj+Yw4BQMKxisYVDCKPhBFH8h4H/DzuR0732dIwbCCkXwGnNNAoIG8BkINFDRQ1EBJA5EGYg2k6QgY7wgifkLh9TcqMLd7NjMPDGBu8OYGNDeEnxvEPZ6w1r/SwBDNDcncQOYGnsDg20oLhoFBrA3emRumqHRq9yVJAwM6c8ME+5IwtgZxA4M3N6C5IZgborkhmRvI3MDmhp/vS961e6uv31f0DcGZG8Dc4Kc1eBwY0NwQpjDEp2FwNxPiFAb3ypDMDTSBAbk1hDQwsLlBrA3jLxk+D1GnAf8zqGDCOAP0LGHsM1HBpO8/W+efMHqqB59vagN182/1xZ/FsVost+X91NXmslt1DmGd/x7K3nmsw3G/KteXY9mczOocymo2U4h+BpE+biubyyQzIKg9tesf",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "struct Bar<T> {\n    one: Field,\n    two: Field,\n    other: T,\n}\n\nfn foo<T>(bar: Bar<T>) {\n    assert(bar.one == bar.two);\n}\n\nstruct BigInt<let N: u32> {\n    limbs: [u32; N],\n}\n\nimpl<let N: u32> BigInt<N> {\n    // `N` is in scope of all methods in the impl\n    fn first(first: BigInt<N>, second: BigInt<N>) -> Self {\n        assert(first.limbs != second.limbs);\n        first\n    }\n\n    fn second(first: BigInt<N>, second: Self) -> Self {\n        assert(first.limbs != second.limbs);\n        second\n    }\n}\n\nimpl Bar<Field> {\n    fn get_other(self) -> Field {\n        self.other\n    }\n}\n\nimpl<T> Bar<T> {\n    // This is to test that we can use turbofish on methods as well\n    fn zeroed<A>(_self: Self) -> A {\n        std::mem::zeroed()\n    }\n}\n\nfn main(x: Field, y: Field) {\n    let bar1: Bar<Field> = Bar { one: x, two: y, other: 0 };\n    let bar2 = Bar { one: x, two: y, other: [0] };\n\n    foo(bar1);\n    foo(bar2);\n    // Test generic impls\n    let int1 = BigInt { limbs: [1] };\n    let int2 = BigInt { limbs: [2] };\n    let BigInt { limbs } = int1.second(int2).first(int1);\n    assert(limbs == int2.limbs);\n    // Test impl exclusively for Bar<Field>\n    assert(bar1.get_other() == bar1.other);\n    // Expected type error\n    // assert(bar2.get_other() == bar2.other);\n    let one = x;\n    let two = y;\n    let nested_generics: Bar<Bar<Field>> = Bar { one, two, other: Bar { one, two, other: 0 } };\n    assert(nested_generics.other.other == bar1.get_other());\n\n    // Test turbofish operator\n    foo::<Field>(bar1);\n\n    // Test that turbofish works on methods and that it uses the generics on the methods\n    // While still handling the generic on the impl (T in this case) that is implicitly added\n    // to the method.\n    assert(bar1.zeroed::<u32>() == 0);\n\n    let _ = regression_2055([1, 2, 3]);\n}\n\nfn regression_2055<let LEN: u32>(bytes: [u8; LEN]) -> Field {\n    let mut f = 0;\n    let mut b = 1;\n    let mut len = LEN - 1; // FAILS\n    for i in 0..LEN {\n        let j = len - i;\n        f += (bytes[j] as Field) * b;\n        b *= 256;\n    }\n    f\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
