---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 6",
    "private parameters indices : [0, 1, 2]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "EXPR [ (1, _0, _1) (-1, _3) 0 ]",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "EXPR [ (1, _3, _3) (-1, _4) 0 ]",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "EXPR [ (1, _4, _4) (-1, _5) 0 ]",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "EXPR [ (1, _5, _5) (-1, _6) 0 ]",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "EXPR [ (-1, _2) (1, _6) 0 ]",
    "",
    ""
  ],
  "debug_symbols": "ldHNCoQgFAXgd7nrFmnTj73KMISVhSAaZgOD9O5jMQ4lbtx57uG7XNDCyPpt7ric1Art04JQAzVcSZcsFOdoXag80mqoNtCimmTA5OheTblnMHHBoC3z/ZXBIxWUUUCQB6QOQJUK6hjAuT8Jo/CkJhWQKMB/UIQA5ckCRUWFvaiam3Ch11wIPnfXD3XjN9Wc9oL94rTJ4dKaz+Ib7xetBjZumh2bzs6t/wI=",
  "file_map": {
    "50": {
      "source": "// Test unsafe integer multiplication with overflow: 12^8 = 429 981 696\n// The circuit should handle properly the growth of the bit size\nfn main(mut x: u32, y: u32, z: u32) {\n    x *= y;\n    x *= x; //144\n    x *= x; //20736\n    x *= x; //429 981 696\n    assert(x == z);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
