---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _483",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "EXPR [ (1, _0) (-1, _1) -1 ]",
    "EXPR [ (-1, _2) 22 ]",
    "EXPR [ (-1, _3) 23 ]",
    "EXPR [ (-1, _4) 24 ]",
    "EXPR [ (-1, _5) 25 ]",
    "INIT (id: 0, len: 4, witnesses: [_2, _3, _4, _5])",
    "MEM (id: 0, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _6) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -7 })], outputs: [Simple(Witness(7))]",
    "EXPR [ (1, _6, _7) (-7, _7) (1, _8) -1 ]",
    "EXPR [ (1, _6, _8) (-7, _8) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -8 })], outputs: [Simple(Witness(9))]",
    "EXPR [ (1, _6, _9) (-8, _9) (1, _10) -1 ]",
    "EXPR [ (1, _6, _10) (-8, _10) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -10 })], outputs: [Simple(Witness(11))]",
    "EXPR [ (1, _6, _11) (-10, _11) (1, _12) -1 ]",
    "EXPR [ (1, _6, _12) (-10, _12) 0 ]",
    "EXPR [ (1, _8, _10) (-1, _8) (-1, _10) (-1, _13) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _13, _12) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -11 })], outputs: [Simple(Witness(14))]",
    "EXPR [ (1, _6, _14) (-11, _14) (1, _15) -1 ]",
    "EXPR [ (1, _6, _15) (-11, _15) 0 ]",
    "EXPR [ (-1, _12, _13) (1, _13) (-1, _16) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _16, _15) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -16 })], outputs: [Simple(Witness(17))]",
    "EXPR [ (1, _6, _17) (-16, _17) (1, _18) -1 ]",
    "EXPR [ (1, _6, _18) (-16, _18) 0 ]",
    "EXPR [ (-1, _15, _16) (1, _16) (-1, _19) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _19, _18) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -17 })], outputs: [Simple(Witness(20))]",
    "EXPR [ (1, _6, _20) (-17, _20) (1, _21) -1 ]",
    "EXPR [ (1, _6, _21) (-17, _21) 0 ]",
    "EXPR [ (-1, _18, _19) (1, _19) (-1, _22) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _22, _21) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -18 })], outputs: [Simple(Witness(23))]",
    "EXPR [ (1, _6, _23) (-18, _23) (1, _24) -1 ]",
    "EXPR [ (1, _6, _24) (-18, _24) 0 ]",
    "EXPR [ (-1, _21, _22) (1, _22) (-1, _25) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _25, _24) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -19 })], outputs: [Simple(Witness(26))]",
    "EXPR [ (1, _6, _26) (-19, _26) (1, _27) -1 ]",
    "EXPR [ (1, _6, _27) (-19, _27) 0 ]",
    "EXPR [ (-1, _24, _25) (1, _25) (-1, _28) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _28, _27) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -20 })], outputs: [Simple(Witness(29))]",
    "EXPR [ (1, _6, _29) (-20, _29) (1, _30) -1 ]",
    "EXPR [ (1, _6, _30) (-20, _30) 0 ]",
    "EXPR [ (-1, _27, _28) (1, _28) (-1, _31) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _31, _30) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -21 })], outputs: [Simple(Witness(32))]",
    "EXPR [ (1, _6, _32) (-21, _32) (1, _33) -1 ]",
    "EXPR [ (1, _6, _33) (-21, _33) 0 ]",
    "EXPR [ (-1, _30, _31) (1, _31) (-1, _34) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _34, _33) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -22 })], outputs: [Simple(Witness(35))]",
    "EXPR [ (1, _6, _35) (-22, _35) (1, _36) -1 ]",
    "EXPR [ (1, _6, _36) (-22, _36) 0 ]",
    "EXPR [ (-1, _33, _34) (1, _34) (-1, _37) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _37, _36) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -23 })], outputs: [Simple(Witness(38))]",
    "EXPR [ (1, _6, _38) (-23, _38) (1, _39) -1 ]",
    "EXPR [ (1, _6, _39) (-23, _39) 0 ]",
    "EXPR [ (-1, _36, _37) (1, _37) (-1, _40) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _40, _39) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -24 })], outputs: [Simple(Witness(41))]",
    "EXPR [ (1, _6, _41) (-24, _41) (1, _42) -1 ]",
    "EXPR [ (1, _6, _42) (-24, _42) 0 ]",
    "EXPR [ (-1, _39, _40) (1, _40) (-1, _43) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _43, _42) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _42, _43) (1, _43) (-1, _44) 0 ]",
    "EXPR [ (1, _6, _44) (-25, _44) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _44) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "MEM (id: 0, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _45) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -7 })], outputs: [Simple(Witness(46))]",
    "EXPR [ (1, _45, _46) (-7, _46) (1, _47) -1 ]",
    "EXPR [ (1, _45, _47) (-7, _47) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -8 })], outputs: [Simple(Witness(48))]",
    "EXPR [ (1, _45, _48) (-8, _48) (1, _49) -1 ]",
    "EXPR [ (1, _45, _49) (-8, _49) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -10 })], outputs: [Simple(Witness(50))]",
    "EXPR [ (1, _45, _50) (-10, _50) (1, _51) -1 ]",
    "EXPR [ (1, _45, _51) (-10, _51) 0 ]",
    "EXPR [ (1, _47, _49) (-1, _47) (-1, _49) (-1, _52) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _52, _51) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -11 })], outputs: [Simple(Witness(53))]",
    "EXPR [ (1, _45, _53) (-11, _53) (1, _54) -1 ]",
    "EXPR [ (1, _45, _54) (-11, _54) 0 ]",
    "EXPR [ (-1, _51, _52) (1, _52) (-1, _55) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _55, _54) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -16 })], outputs: [Simple(Witness(56))]",
    "EXPR [ (1, _45, _56) (-16, _56) (1, _57) -1 ]",
    "EXPR [ (1, _45, _57) (-16, _57) 0 ]",
    "EXPR [ (-1, _54, _55) (1, _55) (-1, _58) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _58, _57) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -17 })], outputs: [Simple(Witness(59))]",
    "EXPR [ (1, _45, _59) (-17, _59) (1, _60) -1 ]",
    "EXPR [ (1, _45, _60) (-17, _60) 0 ]",
    "EXPR [ (-1, _57, _58) (1, _58) (-1, _61) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _61, _60) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -18 })], outputs: [Simple(Witness(62))]",
    "EXPR [ (1, _45, _62) (-18, _62) (1, _63) -1 ]",
    "EXPR [ (1, _45, _63) (-18, _63) 0 ]",
    "EXPR [ (-1, _60, _61) (1, _61) (-1, _64) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _64, _63) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -19 })], outputs: [Simple(Witness(65))]",
    "EXPR [ (1, _45, _65) (-19, _65) (1, _66) -1 ]",
    "EXPR [ (1, _45, _66) (-19, _66) 0 ]",
    "EXPR [ (-1, _63, _64) (1, _64) (-1, _67) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _67, _66) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -20 })], outputs: [Simple(Witness(68))]",
    "EXPR [ (1, _45, _68) (-20, _68) (1, _69) -1 ]",
    "EXPR [ (1, _45, _69) (-20, _69) 0 ]",
    "EXPR [ (-1, _66, _67) (1, _67) (-1, _70) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _70, _69) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -21 })], outputs: [Simple(Witness(71))]",
    "EXPR [ (1, _45, _71) (-21, _71) (1, _72) -1 ]",
    "EXPR [ (1, _45, _72) (-21, _72) 0 ]",
    "EXPR [ (-1, _69, _70) (1, _70) (-1, _73) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _73, _72) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -22 })], outputs: [Simple(Witness(74))]",
    "EXPR [ (1, _45, _74) (-22, _74) (1, _75) -1 ]",
    "EXPR [ (1, _45, _75) (-22, _75) 0 ]",
    "EXPR [ (-1, _72, _73) (1, _73) (-1, _76) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _76, _75) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -23 })], outputs: [Simple(Witness(77))]",
    "EXPR [ (1, _45, _77) (-23, _77) (1, _78) -1 ]",
    "EXPR [ (1, _45, _78) (-23, _78) 0 ]",
    "EXPR [ (-1, _75, _76) (1, _76) (-1, _79) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _79, _78) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(45))], q_c: -24 })], outputs: [Simple(Witness(80))]",
    "EXPR [ (1, _45, _80) (-24, _80) (1, _81) -1 ]",
    "EXPR [ (1, _45, _81) (-24, _81) 0 ]",
    "EXPR [ (-1, _78, _79) (1, _79) (-1, _82) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _82, _81) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _81, _82) (1, _82) (-1, _83) 0 ]",
    "EXPR [ (1, _45, _83) (-25, _83) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _83) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "EXPR [ (1, _0) (-1, _84) 2 ]",
    "BLACKBOX::RANGE [(_84, 2)] []",
    "MEM (id: 0, read at: EXPR [ (1, _84) 0 ], value: EXPR [ (1, _85) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -7 })], outputs: [Simple(Witness(86))]",
    "EXPR [ (1, _85, _86) (-7, _86) (1, _87) -1 ]",
    "EXPR [ (1, _85, _87) (-7, _87) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -8 })], outputs: [Simple(Witness(88))]",
    "EXPR [ (1, _85, _88) (-8, _88) (1, _89) -1 ]",
    "EXPR [ (1, _85, _89) (-8, _89) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -10 })], outputs: [Simple(Witness(90))]",
    "EXPR [ (1, _85, _90) (-10, _90) (1, _91) -1 ]",
    "EXPR [ (1, _85, _91) (-10, _91) 0 ]",
    "EXPR [ (1, _87, _89) (-1, _87) (-1, _89) (-1, _92) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _92, _91) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -11 })], outputs: [Simple(Witness(93))]",
    "EXPR [ (1, _85, _93) (-11, _93) (1, _94) -1 ]",
    "EXPR [ (1, _85, _94) (-11, _94) 0 ]",
    "EXPR [ (-1, _91, _92) (1, _92) (-1, _95) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _95, _94) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -16 })], outputs: [Simple(Witness(96))]",
    "EXPR [ (1, _85, _96) (-16, _96) (1, _97) -1 ]",
    "EXPR [ (1, _85, _97) (-16, _97) 0 ]",
    "EXPR [ (-1, _94, _95) (1, _95) (-1, _98) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _98, _97) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -17 })], outputs: [Simple(Witness(99))]",
    "EXPR [ (1, _85, _99) (-17, _99) (1, _100) -1 ]",
    "EXPR [ (1, _85, _100) (-17, _100) 0 ]",
    "EXPR [ (-1, _97, _98) (1, _98) (-1, _101) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _101, _100) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -18 })], outputs: [Simple(Witness(102))]",
    "EXPR [ (1, _85, _102) (-18, _102) (1, _103) -1 ]",
    "EXPR [ (1, _85, _103) (-18, _103) 0 ]",
    "EXPR [ (-1, _100, _101) (1, _101) (-1, _104) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _104, _103) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -19 })], outputs: [Simple(Witness(105))]",
    "EXPR [ (1, _85, _105) (-19, _105) (1, _106) -1 ]",
    "EXPR [ (1, _85, _106) (-19, _106) 0 ]",
    "EXPR [ (-1, _103, _104) (1, _104) (-1, _107) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _107, _106) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -20 })], outputs: [Simple(Witness(108))]",
    "EXPR [ (1, _85, _108) (-20, _108) (1, _109) -1 ]",
    "EXPR [ (1, _85, _109) (-20, _109) 0 ]",
    "EXPR [ (-1, _106, _107) (1, _107) (-1, _110) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _110, _109) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -21 })], outputs: [Simple(Witness(111))]",
    "EXPR [ (1, _85, _111) (-21, _111) (1, _112) -1 ]",
    "EXPR [ (1, _85, _112) (-21, _112) 0 ]",
    "EXPR [ (-1, _109, _110) (1, _110) (-1, _113) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _113, _112) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -22 })], outputs: [Simple(Witness(114))]",
    "EXPR [ (1, _85, _114) (-22, _114) (1, _115) -1 ]",
    "EXPR [ (1, _85, _115) (-22, _115) 0 ]",
    "EXPR [ (-1, _112, _113) (1, _113) (-1, _116) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _116, _115) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -23 })], outputs: [Simple(Witness(117))]",
    "EXPR [ (1, _85, _117) (-23, _117) (1, _118) -1 ]",
    "EXPR [ (1, _85, _118) (-23, _118) 0 ]",
    "EXPR [ (-1, _115, _116) (1, _116) (-1, _119) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _119, _118) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(85))], q_c: -24 })], outputs: [Simple(Witness(120))]",
    "EXPR [ (1, _85, _120) (-24, _120) (1, _121) -1 ]",
    "EXPR [ (1, _85, _121) (-24, _121) 0 ]",
    "EXPR [ (-1, _118, _119) (1, _119) (-1, _122) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _122, _121) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _121, _122) (1, _122) (-1, _123) 0 ]",
    "EXPR [ (1, _85, _123) (-25, _123) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _123) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "EXPR [ (1, _0) (-1, _124) 1 ]",
    "BLACKBOX::RANGE [(_124, 2)] []",
    "MEM (id: 0, read at: EXPR [ (1, _124) 0 ], value: EXPR [ (1, _125) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -7 })], outputs: [Simple(Witness(126))]",
    "EXPR [ (1, _125, _126) (-7, _126) (1, _127) -1 ]",
    "EXPR [ (1, _125, _127) (-7, _127) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -8 })], outputs: [Simple(Witness(128))]",
    "EXPR [ (1, _125, _128) (-8, _128) (1, _129) -1 ]",
    "EXPR [ (1, _125, _129) (-8, _129) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -10 })], outputs: [Simple(Witness(130))]",
    "EXPR [ (1, _125, _130) (-10, _130) (1, _131) -1 ]",
    "EXPR [ (1, _125, _131) (-10, _131) 0 ]",
    "EXPR [ (1, _127, _129) (-1, _127) (-1, _129) (-1, _132) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _132, _131) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -11 })], outputs: [Simple(Witness(133))]",
    "EXPR [ (1, _125, _133) (-11, _133) (1, _134) -1 ]",
    "EXPR [ (1, _125, _134) (-11, _134) 0 ]",
    "EXPR [ (-1, _131, _132) (1, _132) (-1, _135) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _135, _134) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -16 })], outputs: [Simple(Witness(136))]",
    "EXPR [ (1, _125, _136) (-16, _136) (1, _137) -1 ]",
    "EXPR [ (1, _125, _137) (-16, _137) 0 ]",
    "EXPR [ (-1, _134, _135) (1, _135) (-1, _138) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _138, _137) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -17 })], outputs: [Simple(Witness(139))]",
    "EXPR [ (1, _125, _139) (-17, _139) (1, _140) -1 ]",
    "EXPR [ (1, _125, _140) (-17, _140) 0 ]",
    "EXPR [ (-1, _137, _138) (1, _138) (-1, _141) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _141, _140) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -18 })], outputs: [Simple(Witness(142))]",
    "EXPR [ (1, _125, _142) (-18, _142) (1, _143) -1 ]",
    "EXPR [ (1, _125, _143) (-18, _143) 0 ]",
    "EXPR [ (-1, _140, _141) (1, _141) (-1, _144) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _144, _143) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -19 })], outputs: [Simple(Witness(145))]",
    "EXPR [ (1, _125, _145) (-19, _145) (1, _146) -1 ]",
    "EXPR [ (1, _125, _146) (-19, _146) 0 ]",
    "EXPR [ (-1, _143, _144) (1, _144) (-1, _147) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _147, _146) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -20 })], outputs: [Simple(Witness(148))]",
    "EXPR [ (1, _125, _148) (-20, _148) (1, _149) -1 ]",
    "EXPR [ (1, _125, _149) (-20, _149) 0 ]",
    "EXPR [ (-1, _146, _147) (1, _147) (-1, _150) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _150, _149) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -21 })], outputs: [Simple(Witness(151))]",
    "EXPR [ (1, _125, _151) (-21, _151) (1, _152) -1 ]",
    "EXPR [ (1, _125, _152) (-21, _152) 0 ]",
    "EXPR [ (-1, _149, _150) (1, _150) (-1, _153) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _153, _152) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -22 })], outputs: [Simple(Witness(154))]",
    "EXPR [ (1, _125, _154) (-22, _154) (1, _155) -1 ]",
    "EXPR [ (1, _125, _155) (-22, _155) 0 ]",
    "EXPR [ (-1, _152, _153) (1, _153) (-1, _156) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _156, _155) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -23 })], outputs: [Simple(Witness(157))]",
    "EXPR [ (1, _125, _157) (-23, _157) (1, _158) -1 ]",
    "EXPR [ (1, _125, _158) (-23, _158) 0 ]",
    "EXPR [ (-1, _155, _156) (1, _156) (-1, _159) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _159, _158) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(125))], q_c: -24 })], outputs: [Simple(Witness(160))]",
    "EXPR [ (1, _125, _160) (-24, _160) (1, _161) -1 ]",
    "EXPR [ (1, _125, _161) (-24, _161) 0 ]",
    "EXPR [ (-1, _158, _159) (1, _159) (-1, _162) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _162, _161) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _161, _162) (1, _162) (-1, _163) 0 ]",
    "EXPR [ (1, _125, _163) (-25, _163) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _163) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "EXPR [ (-1, _164) 18 ]",
    "EXPR [ (-1, _165) 19 ]",
    "EXPR [ (-1, _166) 20 ]",
    "EXPR [ (-1, _167) 21 ]",
    "INIT (id: 1, len: 4, witnesses: [_164, _165, _166, _167])",
    "MEM (id: 1, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _168) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -7 })], outputs: [Simple(Witness(169))]",
    "EXPR [ (1, _168, _169) (-7, _169) (1, _170) -1 ]",
    "EXPR [ (1, _168, _170) (-7, _170) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -8 })], outputs: [Simple(Witness(171))]",
    "EXPR [ (1, _168, _171) (-8, _171) (1, _172) -1 ]",
    "EXPR [ (1, _168, _172) (-8, _172) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -10 })], outputs: [Simple(Witness(173))]",
    "EXPR [ (1, _168, _173) (-10, _173) (1, _174) -1 ]",
    "EXPR [ (1, _168, _174) (-10, _174) 0 ]",
    "EXPR [ (1, _170, _172) (-1, _170) (-1, _172) (-1, _175) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _175, _174) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -11 })], outputs: [Simple(Witness(176))]",
    "EXPR [ (1, _168, _176) (-11, _176) (1, _177) -1 ]",
    "EXPR [ (1, _168, _177) (-11, _177) 0 ]",
    "EXPR [ (-1, _174, _175) (1, _175) (-1, _178) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _178, _177) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -16 })], outputs: [Simple(Witness(179))]",
    "EXPR [ (1, _168, _179) (-16, _179) (1, _180) -1 ]",
    "EXPR [ (1, _168, _180) (-16, _180) 0 ]",
    "EXPR [ (-1, _177, _178) (1, _178) (-1, _181) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _181, _180) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -17 })], outputs: [Simple(Witness(182))]",
    "EXPR [ (1, _168, _182) (-17, _182) (1, _183) -1 ]",
    "EXPR [ (1, _168, _183) (-17, _183) 0 ]",
    "EXPR [ (-1, _180, _181) (1, _181) (-1, _184) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _184, _183) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -18 })], outputs: [Simple(Witness(185))]",
    "EXPR [ (1, _168, _185) (-18, _185) (1, _186) -1 ]",
    "EXPR [ (1, _168, _186) (-18, _186) 0 ]",
    "EXPR [ (-1, _183, _184) (1, _184) (-1, _187) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _187, _186) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -19 })], outputs: [Simple(Witness(188))]",
    "EXPR [ (1, _168, _188) (-19, _188) (1, _189) -1 ]",
    "EXPR [ (1, _168, _189) (-19, _189) 0 ]",
    "EXPR [ (-1, _186, _187) (1, _187) (-1, _190) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _190, _189) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -20 })], outputs: [Simple(Witness(191))]",
    "EXPR [ (1, _168, _191) (-20, _191) (1, _192) -1 ]",
    "EXPR [ (1, _168, _192) (-20, _192) 0 ]",
    "EXPR [ (-1, _189, _190) (1, _190) (-1, _193) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _193, _192) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -21 })], outputs: [Simple(Witness(194))]",
    "EXPR [ (1, _168, _194) (-21, _194) (1, _195) -1 ]",
    "EXPR [ (1, _168, _195) (-21, _195) 0 ]",
    "EXPR [ (-1, _192, _193) (1, _193) (-1, _196) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _196, _195) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -22 })], outputs: [Simple(Witness(197))]",
    "EXPR [ (1, _168, _197) (-22, _197) (1, _198) -1 ]",
    "EXPR [ (1, _168, _198) (-22, _198) 0 ]",
    "EXPR [ (-1, _195, _196) (1, _196) (-1, _199) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _199, _198) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -23 })], outputs: [Simple(Witness(200))]",
    "EXPR [ (1, _168, _200) (-23, _200) (1, _201) -1 ]",
    "EXPR [ (1, _168, _201) (-23, _201) 0 ]",
    "EXPR [ (-1, _198, _199) (1, _199) (-1, _202) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _202, _201) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(168))], q_c: -24 })], outputs: [Simple(Witness(203))]",
    "EXPR [ (1, _168, _203) (-24, _203) (1, _204) -1 ]",
    "EXPR [ (1, _168, _204) (-24, _204) 0 ]",
    "EXPR [ (-1, _201, _202) (1, _202) (-1, _205) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _205, _204) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _204, _205) (1, _205) (-1, _206) 0 ]",
    "EXPR [ (1, _168, _206) (-25, _206) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _206) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "MEM (id: 1, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _207) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -7 })], outputs: [Simple(Witness(208))]",
    "EXPR [ (1, _207, _208) (-7, _208) (1, _209) -1 ]",
    "EXPR [ (1, _207, _209) (-7, _209) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -8 })], outputs: [Simple(Witness(210))]",
    "EXPR [ (1, _207, _210) (-8, _210) (1, _211) -1 ]",
    "EXPR [ (1, _207, _211) (-8, _211) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -10 })], outputs: [Simple(Witness(212))]",
    "EXPR [ (1, _207, _212) (-10, _212) (1, _213) -1 ]",
    "EXPR [ (1, _207, _213) (-10, _213) 0 ]",
    "EXPR [ (1, _209, _211) (-1, _209) (-1, _211) (-1, _214) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _214, _213) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -11 })], outputs: [Simple(Witness(215))]",
    "EXPR [ (1, _207, _215) (-11, _215) (1, _216) -1 ]",
    "EXPR [ (1, _207, _216) (-11, _216) 0 ]",
    "EXPR [ (-1, _213, _214) (1, _214) (-1, _217) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _217, _216) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -16 })], outputs: [Simple(Witness(218))]",
    "EXPR [ (1, _207, _218) (-16, _218) (1, _219) -1 ]",
    "EXPR [ (1, _207, _219) (-16, _219) 0 ]",
    "EXPR [ (-1, _216, _217) (1, _217) (-1, _220) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _220, _219) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -17 })], outputs: [Simple(Witness(221))]",
    "EXPR [ (1, _207, _221) (-17, _221) (1, _222) -1 ]",
    "EXPR [ (1, _207, _222) (-17, _222) 0 ]",
    "EXPR [ (-1, _219, _220) (1, _220) (-1, _223) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _223, _222) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -18 })], outputs: [Simple(Witness(224))]",
    "EXPR [ (1, _207, _224) (-18, _224) (1, _225) -1 ]",
    "EXPR [ (1, _207, _225) (-18, _225) 0 ]",
    "EXPR [ (-1, _222, _223) (1, _223) (-1, _226) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _226, _225) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -19 })], outputs: [Simple(Witness(227))]",
    "EXPR [ (1, _207, _227) (-19, _227) (1, _228) -1 ]",
    "EXPR [ (1, _207, _228) (-19, _228) 0 ]",
    "EXPR [ (-1, _225, _226) (1, _226) (-1, _229) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _229, _228) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -20 })], outputs: [Simple(Witness(230))]",
    "EXPR [ (1, _207, _230) (-20, _230) (1, _231) -1 ]",
    "EXPR [ (1, _207, _231) (-20, _231) 0 ]",
    "EXPR [ (-1, _228, _229) (1, _229) (-1, _232) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _232, _231) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -21 })], outputs: [Simple(Witness(233))]",
    "EXPR [ (1, _207, _233) (-21, _233) (1, _234) -1 ]",
    "EXPR [ (1, _207, _234) (-21, _234) 0 ]",
    "EXPR [ (-1, _231, _232) (1, _232) (-1, _235) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _235, _234) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -22 })], outputs: [Simple(Witness(236))]",
    "EXPR [ (1, _207, _236) (-22, _236) (1, _237) -1 ]",
    "EXPR [ (1, _207, _237) (-22, _237) 0 ]",
    "EXPR [ (-1, _234, _235) (1, _235) (-1, _238) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _238, _237) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -23 })], outputs: [Simple(Witness(239))]",
    "EXPR [ (1, _207, _239) (-23, _239) (1, _240) -1 ]",
    "EXPR [ (1, _207, _240) (-23, _240) 0 ]",
    "EXPR [ (-1, _237, _238) (1, _238) (-1, _241) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _241, _240) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -24 })], outputs: [Simple(Witness(242))]",
    "EXPR [ (1, _207, _242) (-24, _242) (1, _243) -1 ]",
    "EXPR [ (1, _207, _243) (-24, _243) 0 ]",
    "EXPR [ (-1, _240, _241) (1, _241) (-1, _244) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _244, _243) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _243, _244) (1, _244) (-1, _245) 0 ]",
    "EXPR [ (1, _207, _245) (-25, _245) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _245) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "MEM (id: 1, read at: EXPR [ (1, _124) 0 ], value: EXPR [ (1, _246) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -7 })], outputs: [Simple(Witness(247))]",
    "EXPR [ (1, _246, _247) (-7, _247) (1, _248) -1 ]",
    "EXPR [ (1, _246, _248) (-7, _248) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -8 })], outputs: [Simple(Witness(249))]",
    "EXPR [ (1, _246, _249) (-8, _249) (1, _250) -1 ]",
    "EXPR [ (1, _246, _250) (-8, _250) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -10 })], outputs: [Simple(Witness(251))]",
    "EXPR [ (1, _246, _251) (-10, _251) (1, _252) -1 ]",
    "EXPR [ (1, _246, _252) (-10, _252) 0 ]",
    "EXPR [ (1, _248, _250) (-1, _248) (-1, _250) (-1, _253) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _253, _252) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -11 })], outputs: [Simple(Witness(254))]",
    "EXPR [ (1, _246, _254) (-11, _254) (1, _255) -1 ]",
    "EXPR [ (1, _246, _255) (-11, _255) 0 ]",
    "EXPR [ (-1, _252, _253) (1, _253) (-1, _256) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _256, _255) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -16 })], outputs: [Simple(Witness(257))]",
    "EXPR [ (1, _246, _257) (-16, _257) (1, _258) -1 ]",
    "EXPR [ (1, _246, _258) (-16, _258) 0 ]",
    "EXPR [ (-1, _255, _256) (1, _256) (-1, _259) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _259, _258) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -17 })], outputs: [Simple(Witness(260))]",
    "EXPR [ (1, _246, _260) (-17, _260) (1, _261) -1 ]",
    "EXPR [ (1, _246, _261) (-17, _261) 0 ]",
    "EXPR [ (-1, _258, _259) (1, _259) (-1, _262) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _262, _261) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -18 })], outputs: [Simple(Witness(263))]",
    "EXPR [ (1, _246, _263) (-18, _263) (1, _264) -1 ]",
    "EXPR [ (1, _246, _264) (-18, _264) 0 ]",
    "EXPR [ (-1, _261, _262) (1, _262) (-1, _265) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _265, _264) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -19 })], outputs: [Simple(Witness(266))]",
    "EXPR [ (1, _246, _266) (-19, _266) (1, _267) -1 ]",
    "EXPR [ (1, _246, _267) (-19, _267) 0 ]",
    "EXPR [ (-1, _264, _265) (1, _265) (-1, _268) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _268, _267) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -20 })], outputs: [Simple(Witness(269))]",
    "EXPR [ (1, _246, _269) (-20, _269) (1, _270) -1 ]",
    "EXPR [ (1, _246, _270) (-20, _270) 0 ]",
    "EXPR [ (-1, _267, _268) (1, _268) (-1, _271) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _271, _270) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -21 })], outputs: [Simple(Witness(272))]",
    "EXPR [ (1, _246, _272) (-21, _272) (1, _273) -1 ]",
    "EXPR [ (1, _246, _273) (-21, _273) 0 ]",
    "EXPR [ (-1, _270, _271) (1, _271) (-1, _274) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _274, _273) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -22 })], outputs: [Simple(Witness(275))]",
    "EXPR [ (1, _246, _275) (-22, _275) (1, _276) -1 ]",
    "EXPR [ (1, _246, _276) (-22, _276) 0 ]",
    "EXPR [ (-1, _273, _274) (1, _274) (-1, _277) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _277, _276) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -23 })], outputs: [Simple(Witness(278))]",
    "EXPR [ (1, _246, _278) (-23, _278) (1, _279) -1 ]",
    "EXPR [ (1, _246, _279) (-23, _279) 0 ]",
    "EXPR [ (-1, _276, _277) (1, _277) (-1, _280) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _280, _279) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(246))], q_c: -24 })], outputs: [Simple(Witness(281))]",
    "EXPR [ (1, _246, _281) (-24, _281) (1, _282) -1 ]",
    "EXPR [ (1, _246, _282) (-24, _282) 0 ]",
    "EXPR [ (-1, _279, _280) (1, _280) (-1, _283) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _283, _282) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _282, _283) (1, _283) (-1, _284) 0 ]",
    "EXPR [ (1, _246, _284) (-25, _284) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _284) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "MEM (id: 1, read at: EXPR [ (1, _84) 0 ], value: EXPR [ (1, _285) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -7 })], outputs: [Simple(Witness(286))]",
    "EXPR [ (1, _285, _286) (-7, _286) (1, _287) -1 ]",
    "EXPR [ (1, _285, _287) (-7, _287) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -8 })], outputs: [Simple(Witness(288))]",
    "EXPR [ (1, _285, _288) (-8, _288) (1, _289) -1 ]",
    "EXPR [ (1, _285, _289) (-8, _289) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -10 })], outputs: [Simple(Witness(290))]",
    "EXPR [ (1, _285, _290) (-10, _290) (1, _291) -1 ]",
    "EXPR [ (1, _285, _291) (-10, _291) 0 ]",
    "EXPR [ (1, _287, _289) (-1, _287) (-1, _289) (-1, _292) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _292, _291) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -11 })], outputs: [Simple(Witness(293))]",
    "EXPR [ (1, _285, _293) (-11, _293) (1, _294) -1 ]",
    "EXPR [ (1, _285, _294) (-11, _294) 0 ]",
    "EXPR [ (-1, _291, _292) (1, _292) (-1, _295) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _295, _294) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -16 })], outputs: [Simple(Witness(296))]",
    "EXPR [ (1, _285, _296) (-16, _296) (1, _297) -1 ]",
    "EXPR [ (1, _285, _297) (-16, _297) 0 ]",
    "EXPR [ (-1, _294, _295) (1, _295) (-1, _298) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _298, _297) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -17 })], outputs: [Simple(Witness(299))]",
    "EXPR [ (1, _285, _299) (-17, _299) (1, _300) -1 ]",
    "EXPR [ (1, _285, _300) (-17, _300) 0 ]",
    "EXPR [ (-1, _297, _298) (1, _298) (-1, _301) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _301, _300) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -18 })], outputs: [Simple(Witness(302))]",
    "EXPR [ (1, _285, _302) (-18, _302) (1, _303) -1 ]",
    "EXPR [ (1, _285, _303) (-18, _303) 0 ]",
    "EXPR [ (-1, _300, _301) (1, _301) (-1, _304) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _304, _303) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -19 })], outputs: [Simple(Witness(305))]",
    "EXPR [ (1, _285, _305) (-19, _305) (1, _306) -1 ]",
    "EXPR [ (1, _285, _306) (-19, _306) 0 ]",
    "EXPR [ (-1, _303, _304) (1, _304) (-1, _307) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _307, _306) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -20 })], outputs: [Simple(Witness(308))]",
    "EXPR [ (1, _285, _308) (-20, _308) (1, _309) -1 ]",
    "EXPR [ (1, _285, _309) (-20, _309) 0 ]",
    "EXPR [ (-1, _306, _307) (1, _307) (-1, _310) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _310, _309) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -21 })], outputs: [Simple(Witness(311))]",
    "EXPR [ (1, _285, _311) (-21, _311) (1, _312) -1 ]",
    "EXPR [ (1, _285, _312) (-21, _312) 0 ]",
    "EXPR [ (-1, _309, _310) (1, _310) (-1, _313) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _313, _312) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -22 })], outputs: [Simple(Witness(314))]",
    "EXPR [ (1, _285, _314) (-22, _314) (1, _315) -1 ]",
    "EXPR [ (1, _285, _315) (-22, _315) 0 ]",
    "EXPR [ (-1, _312, _313) (1, _313) (-1, _316) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _316, _315) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -23 })], outputs: [Simple(Witness(317))]",
    "EXPR [ (1, _285, _317) (-23, _317) (1, _318) -1 ]",
    "EXPR [ (1, _285, _318) (-23, _318) 0 ]",
    "EXPR [ (-1, _315, _316) (1, _316) (-1, _319) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _319, _318) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(285))], q_c: -24 })], outputs: [Simple(Witness(320))]",
    "EXPR [ (1, _285, _320) (-24, _320) (1, _321) -1 ]",
    "EXPR [ (1, _285, _321) (-24, _321) 0 ]",
    "EXPR [ (-1, _318, _319) (1, _319) (-1, _322) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _322, _321) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _321, _322) (1, _322) (-1, _323) 0 ]",
    "EXPR [ (1, _285, _323) (-25, _323) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _323) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "EXPR [ (-1, _324) 16 ]",
    "EXPR [ (-1, _325) 17 ]",
    "INIT (id: 2, len: 2, witnesses: [_324, _325])",
    "MEM (id: 2, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _326) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -7 })], outputs: [Simple(Witness(327))]",
    "EXPR [ (1, _326, _327) (-7, _327) (1, _328) -1 ]",
    "EXPR [ (1, _326, _328) (-7, _328) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -8 })], outputs: [Simple(Witness(329))]",
    "EXPR [ (1, _326, _329) (-8, _329) (1, _330) -1 ]",
    "EXPR [ (1, _326, _330) (-8, _330) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -10 })], outputs: [Simple(Witness(331))]",
    "EXPR [ (1, _326, _331) (-10, _331) (1, _332) -1 ]",
    "EXPR [ (1, _326, _332) (-10, _332) 0 ]",
    "EXPR [ (1, _328, _330) (-1, _328) (-1, _330) (-1, _333) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _333, _332) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -11 })], outputs: [Simple(Witness(334))]",
    "EXPR [ (1, _326, _334) (-11, _334) (1, _335) -1 ]",
    "EXPR [ (1, _326, _335) (-11, _335) 0 ]",
    "EXPR [ (-1, _332, _333) (1, _333) (-1, _336) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _336, _335) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -16 })], outputs: [Simple(Witness(337))]",
    "EXPR [ (1, _326, _337) (-16, _337) (1, _338) -1 ]",
    "EXPR [ (1, _326, _338) (-16, _338) 0 ]",
    "EXPR [ (-1, _335, _336) (1, _336) (-1, _339) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _339, _338) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -17 })], outputs: [Simple(Witness(340))]",
    "EXPR [ (1, _326, _340) (-17, _340) (1, _341) -1 ]",
    "EXPR [ (1, _326, _341) (-17, _341) 0 ]",
    "EXPR [ (-1, _338, _339) (1, _339) (-1, _342) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _342, _341) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -18 })], outputs: [Simple(Witness(343))]",
    "EXPR [ (1, _326, _343) (-18, _343) (1, _344) -1 ]",
    "EXPR [ (1, _326, _344) (-18, _344) 0 ]",
    "EXPR [ (-1, _341, _342) (1, _342) (-1, _345) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _345, _344) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -19 })], outputs: [Simple(Witness(346))]",
    "EXPR [ (1, _326, _346) (-19, _346) (1, _347) -1 ]",
    "EXPR [ (1, _326, _347) (-19, _347) 0 ]",
    "EXPR [ (-1, _344, _345) (1, _345) (-1, _348) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _348, _347) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -20 })], outputs: [Simple(Witness(349))]",
    "EXPR [ (1, _326, _349) (-20, _349) (1, _350) -1 ]",
    "EXPR [ (1, _326, _350) (-20, _350) 0 ]",
    "EXPR [ (-1, _347, _348) (1, _348) (-1, _351) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _351, _350) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -21 })], outputs: [Simple(Witness(352))]",
    "EXPR [ (1, _326, _352) (-21, _352) (1, _353) -1 ]",
    "EXPR [ (1, _326, _353) (-21, _353) 0 ]",
    "EXPR [ (-1, _350, _351) (1, _351) (-1, _354) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _354, _353) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -22 })], outputs: [Simple(Witness(355))]",
    "EXPR [ (1, _326, _355) (-22, _355) (1, _356) -1 ]",
    "EXPR [ (1, _326, _356) (-22, _356) 0 ]",
    "EXPR [ (-1, _353, _354) (1, _354) (-1, _357) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _357, _356) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -23 })], outputs: [Simple(Witness(358))]",
    "EXPR [ (1, _326, _358) (-23, _358) (1, _359) -1 ]",
    "EXPR [ (1, _326, _359) (-23, _359) 0 ]",
    "EXPR [ (-1, _356, _357) (1, _357) (-1, _360) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _360, _359) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(326))], q_c: -24 })], outputs: [Simple(Witness(361))]",
    "EXPR [ (1, _326, _361) (-24, _361) (1, _362) -1 ]",
    "EXPR [ (1, _326, _362) (-24, _362) 0 ]",
    "EXPR [ (-1, _359, _360) (1, _360) (-1, _363) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _363, _362) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _362, _363) (1, _363) (-1, _364) 0 ]",
    "EXPR [ (1, _326, _364) (-25, _364) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _364) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "MEM (id: 2, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _365) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -7 })], outputs: [Simple(Witness(366))]",
    "EXPR [ (1, _365, _366) (-7, _366) (1, _367) -1 ]",
    "EXPR [ (1, _365, _367) (-7, _367) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -8 })], outputs: [Simple(Witness(368))]",
    "EXPR [ (1, _365, _368) (-8, _368) (1, _369) -1 ]",
    "EXPR [ (1, _365, _369) (-8, _369) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -10 })], outputs: [Simple(Witness(370))]",
    "EXPR [ (1, _365, _370) (-10, _370) (1, _371) -1 ]",
    "EXPR [ (1, _365, _371) (-10, _371) 0 ]",
    "EXPR [ (1, _367, _369) (-1, _367) (-1, _369) (-1, _372) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _372, _371) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -11 })], outputs: [Simple(Witness(373))]",
    "EXPR [ (1, _365, _373) (-11, _373) (1, _374) -1 ]",
    "EXPR [ (1, _365, _374) (-11, _374) 0 ]",
    "EXPR [ (-1, _371, _372) (1, _372) (-1, _375) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _375, _374) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -16 })], outputs: [Simple(Witness(376))]",
    "EXPR [ (1, _365, _376) (-16, _376) (1, _377) -1 ]",
    "EXPR [ (1, _365, _377) (-16, _377) 0 ]",
    "EXPR [ (-1, _374, _375) (1, _375) (-1, _378) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _378, _377) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -17 })], outputs: [Simple(Witness(379))]",
    "EXPR [ (1, _365, _379) (-17, _379) (1, _380) -1 ]",
    "EXPR [ (1, _365, _380) (-17, _380) 0 ]",
    "EXPR [ (-1, _377, _378) (1, _378) (-1, _381) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _381, _380) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -18 })], outputs: [Simple(Witness(382))]",
    "EXPR [ (1, _365, _382) (-18, _382) (1, _383) -1 ]",
    "EXPR [ (1, _365, _383) (-18, _383) 0 ]",
    "EXPR [ (-1, _380, _381) (1, _381) (-1, _384) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _384, _383) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -19 })], outputs: [Simple(Witness(385))]",
    "EXPR [ (1, _365, _385) (-19, _385) (1, _386) -1 ]",
    "EXPR [ (1, _365, _386) (-19, _386) 0 ]",
    "EXPR [ (-1, _383, _384) (1, _384) (-1, _387) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _387, _386) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -20 })], outputs: [Simple(Witness(388))]",
    "EXPR [ (1, _365, _388) (-20, _388) (1, _389) -1 ]",
    "EXPR [ (1, _365, _389) (-20, _389) 0 ]",
    "EXPR [ (-1, _386, _387) (1, _387) (-1, _390) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _390, _389) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -21 })], outputs: [Simple(Witness(391))]",
    "EXPR [ (1, _365, _391) (-21, _391) (1, _392) -1 ]",
    "EXPR [ (1, _365, _392) (-21, _392) 0 ]",
    "EXPR [ (-1, _389, _390) (1, _390) (-1, _393) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _393, _392) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -22 })], outputs: [Simple(Witness(394))]",
    "EXPR [ (1, _365, _394) (-22, _394) (1, _395) -1 ]",
    "EXPR [ (1, _365, _395) (-22, _395) 0 ]",
    "EXPR [ (-1, _392, _393) (1, _393) (-1, _396) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _396, _395) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -23 })], outputs: [Simple(Witness(397))]",
    "EXPR [ (1, _365, _397) (-23, _397) (1, _398) -1 ]",
    "EXPR [ (1, _365, _398) (-23, _398) 0 ]",
    "EXPR [ (-1, _395, _396) (1, _396) (-1, _399) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _399, _398) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(365))], q_c: -24 })], outputs: [Simple(Witness(400))]",
    "EXPR [ (1, _365, _400) (-24, _400) (1, _401) -1 ]",
    "EXPR [ (1, _365, _401) (-24, _401) 0 ]",
    "EXPR [ (-1, _398, _399) (1, _399) (-1, _402) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _402, _401) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _401, _402) (1, _402) (-1, _403) 0 ]",
    "EXPR [ (1, _365, _403) (-25, _403) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _403) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "EXPR [ (-1, _404) 10 ]",
    "EXPR [ (-1, _405) 11 ]",
    "INIT (id: 3, len: 2, witnesses: [_404, _405])",
    "MEM (id: 3, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _406) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -7 })], outputs: [Simple(Witness(407))]",
    "EXPR [ (1, _406, _407) (-7, _407) (1, _408) -1 ]",
    "EXPR [ (1, _406, _408) (-7, _408) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -8 })], outputs: [Simple(Witness(409))]",
    "EXPR [ (1, _406, _409) (-8, _409) (1, _410) -1 ]",
    "EXPR [ (1, _406, _410) (-8, _410) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -10 })], outputs: [Simple(Witness(411))]",
    "EXPR [ (1, _406, _411) (-10, _411) (1, _412) -1 ]",
    "EXPR [ (1, _406, _412) (-10, _412) 0 ]",
    "EXPR [ (1, _408, _410) (-1, _408) (-1, _410) (-1, _413) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _413, _412) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -11 })], outputs: [Simple(Witness(414))]",
    "EXPR [ (1, _406, _414) (-11, _414) (1, _415) -1 ]",
    "EXPR [ (1, _406, _415) (-11, _415) 0 ]",
    "EXPR [ (-1, _412, _413) (1, _413) (-1, _416) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _416, _415) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -16 })], outputs: [Simple(Witness(417))]",
    "EXPR [ (1, _406, _417) (-16, _417) (1, _418) -1 ]",
    "EXPR [ (1, _406, _418) (-16, _418) 0 ]",
    "EXPR [ (-1, _415, _416) (1, _416) (-1, _419) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _419, _418) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -17 })], outputs: [Simple(Witness(420))]",
    "EXPR [ (1, _406, _420) (-17, _420) (1, _421) -1 ]",
    "EXPR [ (1, _406, _421) (-17, _421) 0 ]",
    "EXPR [ (-1, _418, _419) (1, _419) (-1, _422) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _422, _421) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -18 })], outputs: [Simple(Witness(423))]",
    "EXPR [ (1, _406, _423) (-18, _423) (1, _424) -1 ]",
    "EXPR [ (1, _406, _424) (-18, _424) 0 ]",
    "EXPR [ (-1, _421, _422) (1, _422) (-1, _425) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _425, _424) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -19 })], outputs: [Simple(Witness(426))]",
    "EXPR [ (1, _406, _426) (-19, _426) (1, _427) -1 ]",
    "EXPR [ (1, _406, _427) (-19, _427) 0 ]",
    "EXPR [ (-1, _424, _425) (1, _425) (-1, _428) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _428, _427) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -20 })], outputs: [Simple(Witness(429))]",
    "EXPR [ (1, _406, _429) (-20, _429) (1, _430) -1 ]",
    "EXPR [ (1, _406, _430) (-20, _430) 0 ]",
    "EXPR [ (-1, _427, _428) (1, _428) (-1, _431) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _431, _430) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -21 })], outputs: [Simple(Witness(432))]",
    "EXPR [ (1, _406, _432) (-21, _432) (1, _433) -1 ]",
    "EXPR [ (1, _406, _433) (-21, _433) 0 ]",
    "EXPR [ (-1, _430, _431) (1, _431) (-1, _434) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _434, _433) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -22 })], outputs: [Simple(Witness(435))]",
    "EXPR [ (1, _406, _435) (-22, _435) (1, _436) -1 ]",
    "EXPR [ (1, _406, _436) (-22, _436) 0 ]",
    "EXPR [ (-1, _433, _434) (1, _434) (-1, _437) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _437, _436) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -23 })], outputs: [Simple(Witness(438))]",
    "EXPR [ (1, _406, _438) (-23, _438) (1, _439) -1 ]",
    "EXPR [ (1, _406, _439) (-23, _439) 0 ]",
    "EXPR [ (-1, _436, _437) (1, _437) (-1, _440) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _440, _439) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(406))], q_c: -24 })], outputs: [Simple(Witness(441))]",
    "EXPR [ (1, _406, _441) (-24, _441) (1, _442) -1 ]",
    "EXPR [ (1, _406, _442) (-24, _442) 0 ]",
    "EXPR [ (-1, _439, _440) (1, _440) (-1, _443) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _443, _442) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _442, _443) (1, _443) (-1, _444) 0 ]",
    "EXPR [ (1, _406, _444) (-25, _444) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _444) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "MEM (id: 3, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _445) 0 ]) ",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -7 })], outputs: [Simple(Witness(446))]",
    "EXPR [ (1, _445, _446) (-7, _446) (1, _447) -1 ]",
    "EXPR [ (1, _445, _447) (-7, _447) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -8 })], outputs: [Simple(Witness(448))]",
    "EXPR [ (1, _445, _448) (-8, _448) (1, _449) -1 ]",
    "EXPR [ (1, _445, _449) (-8, _449) 0 ]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -10 })], outputs: [Simple(Witness(450))]",
    "EXPR [ (1, _445, _450) (-10, _450) (1, _451) -1 ]",
    "EXPR [ (1, _445, _451) (-10, _451) 0 ]",
    "EXPR [ (1, _447, _449) (-1, _447) (-1, _449) (-1, _452) 1 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _452, _451) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -11 })], outputs: [Simple(Witness(453))]",
    "EXPR [ (1, _445, _453) (-11, _453) (1, _454) -1 ]",
    "EXPR [ (1, _445, _454) (-11, _454) 0 ]",
    "EXPR [ (-1, _451, _452) (1, _452) (-1, _455) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _455, _454) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -16 })], outputs: [Simple(Witness(456))]",
    "EXPR [ (1, _445, _456) (-16, _456) (1, _457) -1 ]",
    "EXPR [ (1, _445, _457) (-16, _457) 0 ]",
    "EXPR [ (-1, _454, _455) (1, _455) (-1, _458) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _458, _457) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -17 })], outputs: [Simple(Witness(459))]",
    "EXPR [ (1, _445, _459) (-17, _459) (1, _460) -1 ]",
    "EXPR [ (1, _445, _460) (-17, _460) 0 ]",
    "EXPR [ (-1, _457, _458) (1, _458) (-1, _461) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _461, _460) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -18 })], outputs: [Simple(Witness(462))]",
    "EXPR [ (1, _445, _462) (-18, _462) (1, _463) -1 ]",
    "EXPR [ (1, _445, _463) (-18, _463) 0 ]",
    "EXPR [ (-1, _460, _461) (1, _461) (-1, _464) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _464, _463) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -19 })], outputs: [Simple(Witness(465))]",
    "EXPR [ (1, _445, _465) (-19, _465) (1, _466) -1 ]",
    "EXPR [ (1, _445, _466) (-19, _466) 0 ]",
    "EXPR [ (-1, _463, _464) (1, _464) (-1, _467) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _467, _466) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -20 })], outputs: [Simple(Witness(468))]",
    "EXPR [ (1, _445, _468) (-20, _468) (1, _469) -1 ]",
    "EXPR [ (1, _445, _469) (-20, _469) 0 ]",
    "EXPR [ (-1, _466, _467) (1, _467) (-1, _470) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _470, _469) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -21 })], outputs: [Simple(Witness(471))]",
    "EXPR [ (1, _445, _471) (-21, _471) (1, _472) -1 ]",
    "EXPR [ (1, _445, _472) (-21, _472) 0 ]",
    "EXPR [ (-1, _469, _470) (1, _470) (-1, _473) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _473, _472) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -22 })], outputs: [Simple(Witness(474))]",
    "EXPR [ (1, _445, _474) (-22, _474) (1, _475) -1 ]",
    "EXPR [ (1, _445, _475) (-22, _475) 0 ]",
    "EXPR [ (-1, _472, _473) (1, _473) (-1, _476) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (1, _476, _475) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 104 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -23 })], outputs: [Simple(Witness(477))]",
    "EXPR [ (1, _445, _477) (-23, _477) (1, _478) -1 ]",
    "EXPR [ (1, _445, _478) (-23, _478) 0 ]",
    "EXPR [ (-1, _475, _476) (1, _476) (-1, _479) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _479, _478) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 121 }, Expression { mul_terms: [], linear_combinations: [], q_c: 101 }])], outputs: []",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(445))], q_c: -24 })], outputs: [Simple(Witness(480))]",
    "EXPR [ (1, _445, _480) (-24, _480) (1, _481) -1 ]",
    "EXPR [ (1, _445, _481) (-24, _481) 0 ]",
    "EXPR [ (-1, _478, _479) (1, _479) (-1, _482) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _482, _481) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 119 }, Expression { mul_terms: [], linear_combinations: [], q_c: 111 }, Expression { mul_terms: [], linear_combinations: [], q_c: 119 }])], outputs: []",
    "EXPR [ (-1, _481, _482) (1, _482) (-1, _483) 0 ]",
    "EXPR [ (1, _445, _483) (-25, _483) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _483) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Array([Expression { mul_terms: [], linear_combinations: [], q_c: 98 }, Expression { mul_terms: [], linear_combinations: [], q_c: 105 }, Expression { mul_terms: [], linear_combinations: [], q_c: 103 }])], outputs: []",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 6 })], outputs: []",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 1 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 6 })], outputs: []",
    "EXPR [ (1, _1) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(5) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 27 }, Mov { destination: Relative(2), source: Relative(3) }, Call { location: 38 }, Call { location: 39 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 37 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 30 }, Return, Return, Call { location: 123 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 50 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(3) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(5) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(10) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(12) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(14) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(15) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(16) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(17) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(18) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(4), size: 2 }), HeapArray(HeapArray { pointer: Relative(5), size: 28 }), MemoryAddress(Relative(3))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 2 }, Array { value_types: [Simple(Integer(U8))], size: 28 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 128 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U8) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(2) }, Mov { destination: Direct(32772), source: Relative(5) }, Mov { destination: Direct(32773), source: Relative(4) }, Call { location: 28 }, Mov { destination: Relative(2), source: Relative(3) }, Call { location: 39 }, Call { location: 40 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 38 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 31 }, Return, Return, Call { location: 124 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 51 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(3) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(5) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(8) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(10) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(12) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(6) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(14) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(15) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(16) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(7) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(13) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(17) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(4) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(9) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(18) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Relative(19) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(4), size: 3 }), HeapArray(HeapArray { pointer: Relative(5), size: 28 }), MemoryAddress(Relative(3))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 3 }, Array { value_types: [Simple(Integer(U8))], size: 28 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 129 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 2",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 15 }, Call { location: 16 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 116 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 117 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 119 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 56 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 37 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(3) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(5) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(6) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(7) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(9) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(10) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(7) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(11) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(6) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(12) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(7) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(13) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(6) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(7) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(14) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(13) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(12) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(13) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(15) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(16) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(17) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(6) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(8) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(14) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(18) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(4) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(9) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(19) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Relative(20) }, Const { destination: Relative(3), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), MemoryAddress(Relative(2)), HeapArray(HeapArray { pointer: Relative(4), size: 36 }), MemoryAddress(Relative(3))], input_value_types: [Simple(Integer(U1)), Simple(Integer(U8)), Array { value_types: [Simple(Integer(U8))], size: 36 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 121 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 3",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "7Z3Rjhy3rkX/xc9+KJEiJZ1fCYLASXwCAwMncOwDXAT599ski9sXuOganinoLS8jpjO9F3tM1laXqkp/vfv148/ffvvp0+d///7nu3/98Ne7n798enn59NtPL7//8uHrp98/P179691hP/rjZ3v/rrcYKAaOoccgMWgMI4YZw/JBQkVCRUJFQkVCRUJFQkVCRUJFQkVDRUNFQ0VDRUNFQ0VDRUNFQ0VDZYTKCJURKiNURqiMUBmhMkJlhMoIlRkqM1RmqMxQmaEyQ2WGygyVGSozVFaorFBZobJCZYXKCpUVKitUVqisUGnHcY7tHOkc+Rz7Oco56jmOc5zneOq1U6+deu3Ua6deO/XaqddOvXbqtYce2bhipOMcH3r09yPwyvqnpP4pqf+qpNqzkrKRorTISivfdL4nUqDIgCIBCj4FnoJOAadgU6hQqFCocKhwqHCocKhwqHCocKhwqHCocKj8c1T9pwW8BehsATpbgP5+1HC68E9fv3z8aPX8f2z5YdZ/fPjy8fPXd//6/O3l5f27/3x4+ea/9OcfHz77+PXDl8f/Pd6/+/j518f4EPz3p5ePFv39/vu7j+dvnaudb17EeDtR9f2jj/P9Yx5veH+Tdb6/acf7pZx/4473y7P394v3t4kE6KA3KVD+/R/h23Jo67vCfKYwbv4rjKt/BUqBJv14lsG6WUdXGXTmzKB3esPfoMn3UpLBzxQa7fwQSvgQ42kptL4zhYWGkONpLTXdmEKtpdrcmAIdqGei9iwFOnam0AUpyHpLQRMpFJ43JfHOD6HfU3he0LSzp46OnjrkeQpjZwqKI/wxnroU7Tw8HgM9daynBzduO1NYEy7VnrY13y3HK7Mf+f62nh7aWG4fmq4lSnZ/LVHye563DZvvluR1DiXD7W1nDjXH7bw1h5LldtmZQ3EaO3bmUDPdvrUma54pW2uy5vyytSZrrilba7Jmm7K1Jmu+KVtrsmac2vYZJ1H+FYjf8i2bjo73Py0mvf81W+9/z9b7X7T1/jdlvfvlRu9/0x3Hzhxqxjtoaw4l4x19Zw61wh66M4ea8Y6tNVkz3rm1JmvGO7fWZM1459aarBnv3FqTNeOdW2uyZrxr4+nx7+dPaLS3GG9veP/zD8C3j0/XEiXjvZYoGe/S+6eo784mr3MoGe9aO3MonmM+2tYkameZD96ZRPE88yE7k6h5bzu21mXNfB/Hw61JlNz3cSjYmUTNfh/rsFuTKPlva1sLs2bArW0tzJoDuztss2D8Hbg9bw1q9w+5lxqk348Tz638NY3KasyjEW/b6KODb/6LvJJFca12bM2i+u+69mZR89LbazvXWRTN9PbyznUWRTflvdVZtFPeW51FP+W91Vk01L63OouO2vdWZ9FS+97qLHrq7bWeC0/llg3C/eLvsO774SsaJT+8Wu2p+qHcPWn0ShY1P5S+NYuiH4ruzaLmhzK3ZlH0Qz22ZlH0Q91bnUU/1L3VWfRD3VudRT/UvdVZ9MOxtzqLfjj2VmfRD28vA135Ycd3zPm8P4be98NXNEp+OO5fWNTG7VnnuH9pUZttaxZFP5y8N4uaH07ZmkX1ot6xNYuiH8691Vn0w7W3Oot+uPZWZ9EP197qLPrh2ludRT9ce6uz5od0e4Hoyg9nNkhv43kGfNsPX9MoXb1+tUBU9EM67s46X8mi5Id0zK1Z1PyQ2rE3i5If0u0bfa6zqPkh3b7X5zqL4n0ubW91Fm9UaXurs+aHRHurs3i7Cu2tzuIdK7S3Omt+6NWzM4uaH9Lc54ed8pDV5bkf8t37bC8VHosmqAm+qMxrDXzRfWg8P/ZerRJVHZVv1+Z1FjVHZd2aRdFRee7Nouao/diaRdFRO23NouiofW91Fh21763OoqP2vdVZdFTZW51FR5W91Vl0VNlbnUVHvb1OdOWomo8L6Osig3nXUa8Uqo56rVFzVL2/hkm3V4leyaLmqLdXia6zKDrq7VWiV7KoOertVaLrLIqOenuV6DqLoqOOvdVZdNSxtzqLjjr2Vmf1kQp7q7PoqHNvdRYdde6tzqKjzo1rmB0pCD/v0qubhrRlWenFWd95eV/B98c5dV5v1ag8SYiu1oiqjnr71qFXsqg56qKtWRQddfW9WdQcdenWLIqOuubWLGqOysfe6qw5Kh97q7PmqHzsrc6ao/KxtzprjsrH3uqsPqpob3UWn1Z0e5Xo4lMIZ5uK6vMM+m0/fE2j4ofc7t98ybdvJnoli5If8u27ia6zqPkhU9ubRckP+fbT4a6zKD5P6/bdRNdZFP2Q9lZn0Q9pb3UW/ZD3VmfRD3lvdRb9kPdWZ9EPeW91Vp/et/FOTJ35/nE8/zvcvpPochU1/ymGvOU5SANWOi56q2/8lj7R3lOON3yCiTnJvOjLfv8JSHx7VeiVLGpzgdurQtdZFOcCt1eFXsmiNhe4vSp0nUX12Zq6NYviXED2VmdxLqB7q7M4F9C91VmcC+je6izOBXRvdRbnArq3OotzgdvrQhfvX5qHrDUvMqD7PjRuzzGvs6j50JCtWRR9aIy9WdR86Pa9Q9dZFH3o9r1D11kUfWjurc6iD8291Vn0obm3Oos+NPdWZ9GH1t7qLPrQ2ludRR96271DPz7+68Mvn778v43u2DclU98/6vGT/Wf3n+I/1X8Ofxr+9J/Lf9qmPja0GCgGjqHHIDFoDLY70BGbU43YnGrE5lQjNqca5+ZUHLtTjdidasTuVCN2pxrn7lQS21ON2J5qxPZUI7anGuf2VCP2pxqxP9WI/alG7E81zv2pVmxQNWKDqhEbVI3YoGrEBlV26rKHTg+dHjo9dGyHKruiuYdODx0JHQkd26LKDj4SOhI6EjoSOrZHlV12LaEjoaOho6Fjm1TZJckaOho6GjoaOrZLFVNsUzVim6oR21TZ6XPbp8q+9dpGVXYhre1U5WM/RzlHPcdxjvMcV4y2YZWP7RwfenZJ7Dz15qk3T7156tm+VXbomafePPXWqbdOPdu8yk4drFNvnXrr1Funnu1gZRd+rlNvnXq+iVUELQOTnOc+VvFKz0Ay0AyGtd65mVW8ksotlVsqW/VL7mgVr6RyS+WWytYH9uXTd3aLV1KZUplS2RrCviM2SmVKZUplSmXrDPEglSmVOZU5la1F7OjbOJU5la1PbArVrFPs0sJmvaJiwUPZvhU0axf1Vj8yaBlQBpxBz0Ay0AxGBjMDU1529EhlSWVJZUll76RmQSpLKksqSyp7S9nH0VTWVNZU1lT23rKPrKmsqayprKnsTebHuFQeqTxSeaSytZo5ThupPFJ5pPJIZes3m5y1mcozlWcqz1S2prM5VJupPFN5pvJMZes8m+q0lcorlVcqr1S29psepPJK5ZXKK5WtB23iQMepTEfL4KFsJkXWg3apBlkP2kyZrAfN3Mh60K5cIOvBCGYG6wysByNoGVAGnEHPQDIw5WlBKrdUbqlMqez7JdpVA0QpTSlNKU0p7Vsn2uo+UWpTalNqc2r7Loq2Ck+c2pzanNqc2r6h4uFRanNqc2r31Pa9FW1Vm3pq99Tuqd1T27dZNFumnto9tXtqS2r7jou2SkyS2pLaktqS2r75oq3GkqS2pLaktqa278PYPEptTW1NbU1t35LR7qEjTW1Nbd+Z0e5sI9+c0Vb9yPdnjIgQMaKOSBDpu3j2FPmOjRFNRCsj37oxooaIEDGijkgQOcNynmBMMCYYCwzf29GmCbTAWGAsMBYYvtWjTRpogbHAWMng40BkDJtC8EF4jRF1RILIGR4NvDYRgdHA8L0g7X4ibmA0MBoYDQzfGNX8iRsYDYwGBoHhHWyTEiYwCAwCg8DwLrbpCRMYBAaBwWB4J3ePwGAwGAwGw7vZpizMYDAYvk+qzVLYt0q1KQh7R9tTX9g3TI2IEXVEgkgRDUQT0crIN1KNyBlsERgChoAhYHh3254pLGAIGAKGguEdLj4DB0PBUDAUDO9yO6fECoaCoWAMMLzP1SMwBhgDjAGG97nNcniAMcAYYEwwvM9tOsQTjAnGBGOC4X1uBsgTjAnGBGOB4X1u0yBeYCwwFhgLDO/z4REYC4yVjH4ciIxhE6J+EF5jRMawGVD3Ph/+5cgZ06KBaCJaGXmfR9QQESJG1BEJImPYdc69gdHAaGAQGN7ndk1yJzAIDAKDwPA+t+uHO4FBYBAYDIb3uV1p2xkMBoPBYDC8z6dHYDAYDEYHw/vcrqLtHYwORgejg+F9btOo3sHoYHQwBAzvc5tvdQFDwBAwBAzvc/PVLmAIGAKGguF9vjwCQ8FQMBQM63OyuVZXMBQM63OyuVW3Pvftd7r1ud/p3K3Pz4gRdUSCSBENRBPRymgeiJxhdT/BmGBMMCYY0xnLIjAmGBOMBYb1OdlTwPsCY4GxwFhgWJ+TnSTpC4wFxkqGHAciZ3hEeI0RdUSCyBl+GmPgtYkIjAZGc8ayCIwGRgOjgWF9TnZyRRoYDYwGBoHhW57b3EwIDAKDwCAwyBkegUFgEBgMBjvDPjmDwWBYn/v2UWJ9TjZHEuvzMxqIJiJj2IUSYn1+Rg0RIWJEHZEgUkQD0UTkDMtPwBAwBAwBQ5zhp6DAEDAEDAFDnGGfXMFQMBQMBcP63HfsEAVDwVAwFAzvc3tqrQwwBhgDjAGG97mdT5cBxgBjgDHA8D639UCZYEwwJhgTDO9zu1RGJhgTjAnGBMP73DxUFhgLjAXGAsP7XDwCY4GxwFhgeJ/b7EuPZOjREBlD/PShMWwGpd7ndsZHvc9tjqTe5xENRBPRysj7PKKGiBAxoo7IGZZLA6OB0cBoYHif26xKCQwCg8AgMLzP1U+LgkFgEBgEhve5zaqUwWAwGAwGw/t8eAQGg8FgMBje5zar0g5GB6OD0cHwPreZlnYwOhgdjA6G9/nwU79gCBgChoDhfW5nnVTAEDAEDAHD+3x6BIaCoWAoGN7ndv5JFQwFw/vcTjip97nNjNT7PKKGiBAZw04kqfd5RIJIEQ1EE9HKyPs8ooaIEBnDzkjpBGOCMcGYYHif21qQTjAWGAuMBYb3uZ3a0gXGAmOBscDwPl9+9j4Z4zgQNUSEyBkedbwmiBTRQGQnie25Z+MAo4HRwGhg+Nlte8bYaGA0MBoYDQw/xW3OORoYBAaBQWD4ee7DFyjAIDAIDALDT3YfHoHBYDAYDIaf8bY512AwGAzrc7b51bA+Z5s3Detzv6J0WJ9HZH1+Rg0RIWJEHZEgUkQDkTN8KQYMAUPAEDCsz9nOcw0BQ8AQMAQM63O2py0NAUPBUDAUDHWGLRwpGAqGgqFgqDM8AmOAMcAYYPgaFPliExgDjAHGAMNXo+yc1hhgTDAmGBMMX5eyGdmYYEwwJhgTDF+h8iWzCcYCY4GxwPC1KvYIjAXGAmOB4atWsayWjHkciIzhi2rW5+zLZr52ZTOe6YtX3W6l+c+HL58+/Pzy8c/Hmq6t+n77/Esu8T7+8+v//JH/5+cvn15ePv320x9ffv/l46/fvny05eBcCf7LFn9/eEx9efwYy7s/2InQx8lGWzxu+IX5nuf3X+iPX1j2C2S/EC8+kn+sYP34ty07/y8=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\n#[deprecated(\"This functions is deprecated in favour of external verification libraries. To verify Barretenberg proofs, it's recommended to use the library https://github.com/AztecProtocol/aztec-packages/tree/next/barretenberg/noir/bb_proof_verification\")]\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\n/// Asserts the validity of the provided proof and public inputs against the provided verification key and hash.\n///\n/// The ACVM cannot determine whether the provided proof is valid during execution as this requires knowledge of\n/// the backend against which the program is being proven. However if an invalid proof if submitted, the program may\n/// fail to prove or the backend may generate a proof which will subsequently fail to verify.\n///\n/// # Important Note\n///\n/// If you are not developing your own backend such as [Barretenberg](https://github.com/AztecProtocol/barretenberg)\n/// you probably shouldn't need to interact with this function directly. It's easier and safer to use a verification\n/// library which is published by the developers of the backend which will document or enforce any safety requirements.\n///\n/// If you use this directly, you're liable to introduce underconstrainedness bugs and *your circuit will be insecure*.\n///\n/// # Arguments\n/// - verification_key: The verification key of the circuit to be verified.\n/// - proof: The proof to be verified.\n/// - public_inputs: The public inputs associated with `proof`\n/// - key_hash: The hash of `verification_key` of the form expected by the backend.\n/// - proof_type: An identifier for the proving scheme used to generate the proof to be verified. This allows\n///               for a single backend to support verifying multiple proving schemes.\n///\n/// # Constraining `key_hash`\n///\n/// The Noir compiler does not by itself constrain that `key_hash` is a valid hash of `verification_key`.\n/// This is because different backends may differ in how they hash their verification keys.\n/// It is then the responsibility of either the noir developer (by explicitly hashing the verification key\n/// in the correct manner) or by the proving system itself internally asserting the correctness of `key_hash`.\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// Many parts of the code here are regressions from issue #5503 (https://github.com/noir-lang/noir/issues/5503)\nfn main(x: u32) {\n    lambdas_in_array_literal(x - 1);\n    lambdas_in_array_literal(x);\n    lambdas_in_array_literal(x + 2);\n    lambdas_in_array_literal(x + 1);\n\n    lambdas_in_slice_literal(x - 1);\n    lambdas_in_slice_literal(x);\n    lambdas_in_slice_literal(x + 1);\n    lambdas_in_slice_literal(x + 2);\n\n    functions_in_array_literal(x - 1);\n    functions_in_array_literal(x);\n    functions_in_slice_literal(x - 1);\n    functions_in_slice_literal(x);\n\n    let example_lambda: fn(u8) -> u8 = |x| x + 1;\n    let lambdas: [fn(u8) -> u8; 8] = [example_lambda; 8];\n    println(lambdas[0](5));\n    // Dynamic dispatch\n    println(lambdas[x - 1](5));\n\n    let lambdas: [fn(()) -> (); 1] = [|_: ()| {}];\n    lambdas[0](());\n    lambdas[x - 1](());\n\n    // Also check against slices\n    let lambdas: [fn(()) -> ()] = &[|_: ()| {}];\n    lambdas[0](());\n    lambdas[x - 1](());\n}\n\nfn lambdas_in_array_literal(x: u32) {\n    let xs = [|| println(\"hi\"), || println(\"bye\"), || println(\"wow\"), || println(\"big\")];\n    (xs[x])();\n}\n\nfn lambdas_in_slice_literal(x: u32) {\n    let xs = &[|| println(\"hi\"), || println(\"bye\"), || println(\"big\"), || println(\"wow\")];\n    (xs[x])();\n}\n\nfn functions_in_array_literal(x: u32) {\n    let xs = [foo, bar];\n    (xs[x])();\n}\n\nfn functions_in_slice_literal(x: u32) {\n    let xs = &[baz, qux];\n    (xs[x])();\n}\n\nfn foo() {\n    println(\"hi\");\n}\nfn bar() {\n    println(\"bye\");\n}\nfn baz() {\n    println(\"hi\");\n}\nfn qux() {\n    println(\"bye\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "print_unconstrained",
    "print_unconstrained",
    "print_unconstrained",
    "directive_invert"
  ]
}
