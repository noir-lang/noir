---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : 4",
    "private parameters indices : [0, 1]",
    "public parameters indices : []",
    "return value indices : []",
    "EXPR [ (1, _0) (-1, _1) (-1, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "EXPR [ (1, _2, _3) (1, _4) -1 ]",
    "EXPR [ (1, _2, _4) 0 ]",
    "EXPR [ (1, _4) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "lZDLCsMgEEX/ZdZZpGkK4q+UEnyGAVHxUSiSf68JFVLIxt2cuWfuYgpIxfO6oNUuAn0WME6whM5WKjAeq+iZ3SkmFhLQeRpAWVkHsg2g0Sigj3F7DXDr06c+/d6nz1c6aTr51yvwgMbgupwfUNdvFpBxo36osxWnNH18S9q9D04omYPam46s1n8B",
  "file_map": {
    "50": {
      "source": "fn main(x: Field, y: Field) {\n    let z = x == y;\n    let t = z as u8;\n    assert(t == 1);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
