---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 28 }, Const { destination: Relative(2), bit_size: Integer(U64), value: 7845584091265575028 }, Const { destination: Relative(3), bit_size: Integer(U64), value: 7845584091265575034 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 1 }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 18 }, Const { destination: Relative(7), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U64, lhs: Relative(1), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U64, lhs: Relative(3), rhs: Relative(7) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U64, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(2), location: 25 }, Jump { location: 24 }, Return, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 18 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 33 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "jZDNCoQgFIXf5a5dqENRvUpEWN1CEBPTgSF899F+ZmoxMJt7vB6/I5wVBuz81Eo9zgtU9QqdlUrJqVVzL5ycdbxdgabBCqgYAVZuwukubJcMKh4CgRNrnUVM1CUnphthUTuotFeKwFMovz1ajNCbOmGjSwmgHqLGwFEqTKdAvjT9jbIyO2DOig+e/c3nND/4nJc3vomb6KW9NRNSkpWiU3iso9f9xXUvczpns8bOPQ7eYkq61BtnzQvyeDQh/fYG",
  "file_map": {
    "50": {
      "source": "global G_A: [[Field; 1]; 2] =\n    [[-244112236639376348452645045105852040922], [-86306352895169753536594521383676370518]];\nfn main() {\n    if true {\n        for idx_a in 7845584091265575028_i64..7845584091265575034_i64 {\n            let mut b: [&mut u32; 1] = [(&mut 81586902_u32)];\n            let g: (i64, (i8, Field, Field, Field), u64) = (\n                idx_a,\n                (\n                    -118_i8, 1,\n                    (155342861061489534793205612322034234097 / G_A[1_u32][((*b[0_u32]) % 1_u32)]),\n                    G_A[((*b[0_u32]) % 2_u32)][((*b[0_u32]) % 1_u32)],\n                ), 1313306195659668909_u64,\n            );\n        }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
