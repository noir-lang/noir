---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "4717959987348973079": {
        "error_kind": "string",
        "string": "the original should not be mutated by copy_mut, only borrow_mut_two"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8262467739384083083": {
        "error_kind": "string",
        "string": "There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before slice_refcount call)"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12390149874551504741": {
        "error_kind": "string",
        "string": "after refcount_1 we clone once in passing slice to copy_mut, once to slice_refcount after, and once within copy_mut"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "15146802936675446448": {
        "error_kind": "string",
        "string": "borrow_mut_two should create a fresh slice and not decrease its RC"
      },
      "15646392865860948187": {
        "error_kind": "string",
        "string": "the copy should have the expected content"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// This test is exactly the same as `reference_counts_inliner_0` which uses\n// arrays rather than slices.\n// This test exists to make sure that our reference counting debug methods match\n// between arrays and slices.\n// We could most likely combine the code for these tests (e.g. using generics),\n// but it is simpler to debug isolated tests.\n// It should only be necessary to have a test at one inliner setting, as we\n// are just checking for discrepancies between the array and slice debugging builtin functions.\n// The actual functionality of reference counting is tested with the `reference_counts_*` tests.\n// We went with testing at an inliner aggressiveness of zero, as this is generally\n// the most useful inliner setting for unconstrained functions.\nuse std::mem::slice_refcount;\n\nfn main() {\n    let mut slice = &[0, 1, 2];\n    assert_refcount(slice, 1, true);\n\n    borrow(slice, slice_refcount(slice));\n    borrow_mut(&mut slice, slice_refcount(slice));\n    let _ = copy_mut(slice, slice_refcount(slice));\n\n    borrow_mut_two(&mut slice, &mut slice, slice_refcount(slice));\n\n    let mut u32_slice = &[0, 1, 2];\n    let rc1 = slice_refcount(slice);\n    let rc2 = slice_refcount(u32_slice);\n    borrow_mut_two_separate(&mut slice, &mut u32_slice, rc1, rc2);\n\n    // Safety: test\n    regression_7297();\n}\n\nfn borrow(slice: [Field], rc_before_call: u32) {\n    assert_refcount(slice, rc_before_call, true);\n    println(slice[0]);\n}\n\nfn borrow_mut(slice: &mut [Field], rc_before_call: u32) {\n    assert_refcount(*slice, rc_before_call, true);\n    slice[0] = 3;\n    println(slice[0]);\n}\n\n// Returns a new slice (a copy) to prevent SSA from optimizing away mutations.\nfn copy_mut(mut slice: [Field], rc_before_call: u32) -> [Field] {\n    assert_refcount(slice, rc_before_call, true);\n    slice = &[4, slice[1], slice[2]];\n    println(slice[0]);\n    slice\n}\n\nfn borrow_mut_two(slice1: &mut [Field], slice2: &mut [Field], rc_before_call: u32) {\n    assert_refcount(*slice1, rc_before_call, true);\n    assert_refcount(*slice2, rc_before_call + 1, true); // should be a copy\n    slice1[0] = 5;\n    slice2[0] = 6;\n    println(slice1[0]); // slice1 & 2 alias, so this should also print 6\n    println(slice2[0]);\n}\n\nfn borrow_mut_two_separate(\n    slice1: &mut [Field],\n    slice2: &mut [u32],\n    rc_before_call1: u32,\n    rc_before_call2: u32,\n) {\n    assert_refcount(*slice1, rc_before_call1, true);\n    assert_refcount(*slice2, rc_before_call2, true);\n    slice1[0] = 7;\n    slice2[0] = 8;\n    println(slice1[0]);\n    println(slice2[0]);\n}\n\nfn assert_refcount<T>(slice: [T], mut expected: u32, expect_copy: bool) {\n    let count = slice_refcount(slice);\n\n    if expect_copy {\n        expected += 1;\n    }\n\n    if std::runtime::is_unconstrained() {\n        if count != expected {\n            println(f\"actual = {count}, expected = {expected}\");\n        }\n        assert_eq(count, expected);\n    } else {\n        assert_eq(count, 0);\n    }\n}\n\nfn regression_7297() {\n    let mut slice: [Field] = &[0, 1, 2];\n\n    let refcount_0 = slice_refcount(slice);\n    borrow_mut_two(&mut slice, &mut slice, refcount_0);\n\n    let refcount_1 = slice_refcount(slice);\n    let slice_2 = copy_mut(slice, refcount_1 + 1);\n    let refcount_2 = slice_refcount(slice);\n\n    assert_eq(slice[0], 6, \"the original should not be mutated by copy_mut, only borrow_mut_two\");\n    assert_eq(slice_2[0], 4, \"the copy should have the expected content\");\n\n    if std::runtime::is_unconstrained() {\n        assert(\n            refcount_1 != 0,\n            \"borrow_mut_two should create a fresh slice and not decrease its RC\",\n        );\n\n        assert_eq(\n            refcount_1,\n            2,\n            \"There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before slice_refcount call)\",\n        );\n        assert_eq(\n            refcount_2,\n            refcount_1 + 3,\n            \"after refcount_1 we clone once in passing slice to copy_mut, once to slice_refcount after, and once within copy_mut\",\n        );\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
