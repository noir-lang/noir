---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::mem::slice_refcount;

fn main() {
    let mut slice: [Field] = &[0, 1, 2];
    assert_refcount(slice, 1, true);
    borrow(slice, slice_refcount(slice));
    borrow_mut(&mut slice, slice_refcount(slice));
    let _: [Field] = copy_mut(slice, slice_refcount(slice));
    borrow_mut_two(&mut slice, &mut slice, slice_refcount(slice));
    let mut u32_slice: [u32] = &[0, 1, 2];
    let rc1: u32 = slice_refcount(slice);
    let rc2: u32 = slice_refcount(u32_slice);
    borrow_mut_two_separate(&mut slice, &mut u32_slice, rc1, rc2);
    regression_7297();
}

fn borrow(slice: [Field], rc_before_call: u32) {
    assert_refcount(slice, rc_before_call, true);
    println(slice[0]);
}

fn borrow_mut(slice: &mut [Field], rc_before_call: u32) {
    assert_refcount(*slice, rc_before_call, true);
    slice[0] = 3;
    println(slice[0]);
}

fn copy_mut(mut slice: [Field], rc_before_call: u32) -> [Field] {
    assert_refcount(slice, rc_before_call, true);
    slice = &[4, slice[1], slice[2]];
    println(slice[0]);
    slice
}

fn borrow_mut_two(slice1: &mut [Field], slice2: &mut [Field], rc_before_call: u32) {
    assert_refcount(*slice1, rc_before_call, true);
    assert_refcount(*slice2, rc_before_call + 1, true);
    slice1[0] = 5;
    slice2[0] = 6;
    println(slice1[0]);
    println(slice2[0]);
}

fn borrow_mut_two_separate(
    slice1: &mut [Field],
    slice2: &mut [u32],
    rc_before_call1: u32,
    rc_before_call2: u32,
) {
    assert_refcount(*slice1, rc_before_call1, true);
    assert_refcount(*slice2, rc_before_call2, true);
    slice1[0] = 7;
    slice2[0] = 8;
    println(slice1[0]);
    println(slice2[0]);
}

fn assert_refcount<T>(slice: [T], mut expected: u32, expect_copy: bool) {
    let count: u32 = slice_refcount(slice);
    if expect_copy { expected = expected + 1; };
    if std::runtime::is_unconstrained() {
        if count != expected {
            println(f"actual = {count}, expected = {expected}");
        };
        assert(count == expected);
    } else {
        assert(count == 0);
    }
}

fn regression_7297() {
    let mut slice: [Field] = &[0, 1, 2];
    let refcount_0: u32 = slice_refcount(slice);
    borrow_mut_two(&mut slice, &mut slice, refcount_0);
    let refcount_1: u32 = slice_refcount(slice);
    let slice_2: [Field] = copy_mut(slice, refcount_1 + 1);
    let refcount_2: u32 = slice_refcount(slice);
    assert(slice[0] == 6, "the original should not be mutated by copy_mut, only borrow_mut_two");
    assert(slice_2[0] == 4, "the copy should have the expected content");
    if std::runtime::is_unconstrained() {
        assert(
            refcount_1 != 0,
            "borrow_mut_two should create a fresh slice and not decrease its RC",
        );
        assert(
            refcount_1 == 2,
            "There is 1 clone after `borrow_mut_two` and before `refcount_1` is defined (cloned before slice_refcount call)",
        );
        assert(
            refcount_2 == (refcount_1 + 3),
            "after refcount_1 we clone once in passing slice to copy_mut, once to slice_refcount after, and once within copy_mut",
        );
    }
}
