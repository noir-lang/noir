---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "EXPR [ (1, _0) -3 ]"
  ],
  "debug_symbols": "dY/BCoMwDIbfJeceFPTiq4whtUYphLTEdjDEd18s6+YOO6XJn+9v/h1mnPI6el7CBsNth0k8kV9HCs4mH1in+2GgtmMSRB3BRVcqWkFOMHAmMvCwlMvSFi2Xmqyo2hhAnrWq4eIJz9dhvnTzH227Crdd/8F75e/aWefl52JodPE47cTbifCdYsnsLqHSM1alxo4SHM5Z8LQrmn7wAg==",
  "file_map": {
    "50": {
      "source": "fn main(x: u32) {\n    // x = 3\n    let array: [[(Field, [Field; 1], [Field; 1]); 1]; 1] = [[(1, [2], [3])]];\n\n    let fetched_value = array[x - 3];\n    assert(fetched_value[0].0 == 1);\n    assert(fetched_value[0].1[0] == 2);\n    assert(fetched_value[0].2[0] == 3);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
