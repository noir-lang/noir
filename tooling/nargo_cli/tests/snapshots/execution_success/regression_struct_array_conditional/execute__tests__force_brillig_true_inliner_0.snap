---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZjBbmJJDEX/hTWLV1W2y86vtKKIJKSFhEhEw0ijiH+f8rNvkl7MptjknhfwKZPY8MTn5nX/fP39dDi9vf/ZPPz63DyfD8fj4ffT8f1ldzm8n8ZvPzeL/+C6eSjbDbcIiuAIiegRunmoI2wNWSJKRI1oERTBERLRI8IiYenD0kaUiBrRIiiCIySiR2iEraFh0bBoWDQsGhYNi4ZFw6Jh0bBYWCwsFhYLi4XFwmJhsbBYWCwsZVkyS2bNbJmUyZmS2TM1M30lfSV9JX0lfSV9JX0lfWX4yFMzLbIumSWzZrZMyuRMyUxfTV9NX0tfS19LX0tfS19LX0tfS19LX0sfpY/SR+mj9FH6KH2UPkofpY/Sx+nj9HH6OH2cPk4fp4/Tx+nj9En6JH0+3uw5HpeRPsTds2VS5vCrp2T2TM0c9TbSh3nNkukLujg0AAEYIIAOGNZSHIa2jE0rPt4BBVABDUAABgigAxSQ5rosgAKogAZwc3NggAA6wM3k4ObxN60++wEFUAENQAAGCKADFABzhbnCXGH2RSjiQAAGCMCF3cESfOy92se+qAMBGCCADnCNOViCT39Ayef4/AfATDATzAQzwexbEGAJvgcBMDPMDDPDzDAzzL4OdXFQgCWsHwXFoQAqoAEIwAABuNlnZP1oWMES/OMhoAAqoAEIwAA3+0D5igUowM0+Yr5lAQVQAQ1AAAZIHqHoWdGzomdDz4aeDT0bejb0bOjZYDaYDWZLc1sWQAFUQAMQgAEC6AAFuHkMbfM9CyiACmgAAjBAAB2gAJgrzBXmCnOFucJcYfY9q+LQAQqwBP/cCSiACnBzdyAAAwTQAQqwBN/BgAJwszq42RwIwAABdIACLIFhZph9BwPQM6NnRs+Mnhk9M3pm9CwwC8wCs8AsMAvMArPALDALzB3mDvO6g/12225wO/l0Oe/3fjf54/5y3HV+7M7702XzcLoej9vNP7vjdX3Sn4/dac3L7jweHW8h+9PryCF8Oxz3Trftd/Xy/6VjabN4rOZXOU/Uj52aqB//EdSzTtSTT8VaT22ZqWdFPdtEvZhkfV/qRH1vOL8T31cvM6+/a0O99pn6rnfVK1HWK8/Mj/J3vd53vszMvy2otzLTv5Xver3v/DrVf8P+GLWZ/el486FOM/Vf80dT88MF88d1Zv94wfm8TJ1PeP1MM6+fGe8fPLW/P87nmf8f96/zdeZ8WTA/UmbOF8L5wlPnCz5/RMud5//9/v84rnYvh/Nf3/jc3HQ+7J6P+7x8u55efjx6+fcDj+Abo4/z+8v+9Xreu+n7a6Px41fTvqVFH8ctgV/RlujRv7jwi87bpotflvWZNC7l8eaN/Qc=",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
