---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1bbVMaMRBeOGwBQUXwpWhb+mKtWGvCgR7f/NQf0W86wpf+zfZ/1a1ZSEOknbln0ZtxZzI5cmHv2ZdkN7lcie7J3pVv7rp0VxJXc6kGbeVIWyXSthZpexlpq7qSuOfXaE7yvMQ9g3m+8PiEePm/vaCt7toqrn+ZFqnk6itXm3xkawBe03u6jcDNy9vKha+LhquboVKbToE+JYoKS83FcDi5HExsaq/NYHyTjcxwdHOR2cyOstHtIEvTSTbMLsc340sztsN0Yqej8WDqeDXy80odL9NUMmTocHlxNnC2MD7OMtbOKcDOM5k3gP4XmxSAcpuH7G7ykd0oAMZNJMYKzSNTSGjgdSBwH++WJuAtBb4two1aLblbnoJBfE3RUgahCFwMb/t3yrDt6rYoRFIGvrEftHGnagDqCaYR6eRPtDZ2m3BO3yascTXCCA+gMNznlRs5cXToOdx3CoBxh8Dhnig+A4NzU9sGOitMCXZ1s/muq/fEK2Tm3qV5ziVt3CmczSsFMUjeyLALxLUHdhT0wrLlOQbQtibx/ImJIzencZveszRSrJaCjvaBeilTfG2D4q+lW6QOtDC+okeKTHkdDLg2QChhtn1IeEeNbk12XX0gXiGzR5cWIxN36gWgKgUxSN6tzy5QxgOwo2hEpi7pbnaYnEQeoeU/JGw05gEn0ZevD10R7Gtem7yPqXpt8l4mJLTcr3Fyp5o43+BwDjVxvsXhHGni7OFwZpo43+FwjjVxvsfhvNbE+QGHU/UV3EcczokmziMczinHAS51x4/jAM/PPPfxvNK7Kzwe2NfYjqyjoyWymXyUygoPvDU0QO5jfsLhMnI2IiQUfyU7WaQOtDAeozFqJKrHhJ8gPoMdVAZjkRwUqQMtjCdIjEXdaIcpYYUb7X1Xn4pXyNZFnxa3M7hTkTbaTwC8ZKO9D8R1CnYUje2MPoEdz9wv7dlfUEv7xPV/Tvn+37ZfCBtR12iRUPyV7GSROtDCeEYFSPnOCD/5fAU7qASoIjkoUgdaGM9JOeVDOxYDbikoAnagaoVpnzzIiqIlxTO0mPZxJ/8LB6RR2CDnhD99h0gjJfUzQHktPf3Uz6Cdzyw/yJ8XcwnoN+tAmeVrJKZ1T/5/fUkk50/8/sLDP4/RmOlza+P7zx+/Qv3KmJWvmOoevwQn56AWyAjmb2Jv8nz9rAf3RP5Y5C898Lsc1Mv6Ljvv34zcE55tV/t4RY5aUO94fIG6tMK/o8M/aqsd77oTyOnr+wqEQfhJTIktUcrBPekbjpkSHp8NsSSRZwmJz3S8NtHnbzOdcP8yOQAA",
  "debug_symbols": "pZXLbsIwEEX/xess/JixHX6lqlAAU0WKAkqTShXqv3dMrlNYdGNWh2Q4d2wxxjd1SoflY9+P58un2r3d1GHqh6H/2A+XYzf3l1He3n4aVR7385SSvFIPdbGu3ZTGWe3GZRga9dUNy/1Ln9duvHPuJqnqRqXxJJTAcz+k/Omn+bP1/6qNFrKNftO5wnfaVPgUHXyKocJnKptndhW+92X9Ptas35MvPrevrZ/oxf66xm+LH7St8IOLxSeu8Wnz+cX+vmb/YZu/UDV/IcSX/MgEP3Ks8Wnzfc35bU3xW1PTv9Wbb5/7v8tTd+ynp388ZZzamUYZWsHiCfyKsCJKTVqadqXVoAGtUGTrwJwlp9gy6MEARjDnya/tNGjAnCe7cA4kkEEP5jwWRrBdSRo0oAUdSCCDHkQeIY+Qx8hj5DHyOOfJaWUCGfRgAHNeELYrvQYNaEEH5jyZYs+gBwOY8/JsfHVT3x2GhKvrvIzHh5ts/r6WSrnrrtPlmE7LlPIM3GsyFb8=",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
