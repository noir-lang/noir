---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _81",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10]",
    "public parameters indices : []",
    "return value indices : [_11]",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "INIT (id: 0, len: 9, witnesses: [_0, _1, _2, _3, _4, _5, _6, _7, _8])",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 4294967293 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(12)), Simple(Witness(13))]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "EXPR [ (1, _9) (-4294967296, _12) (-1, _13) 4294967293 ]",
    "EXPR [ (-1, _12) 0 ]",
    "EXPR [ (3, _9) (-1, _14) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _15) 0 ]) ",
    "EXPR [ (1, _14) (-1, _16) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _16) 0 ], value: EXPR [ (1, _17) 0 ]) ",
    "EXPR [ (1, _14) (-1, _18) 2 ]",
    "MEM (id: 0, read at: EXPR [ (1, _18) 0 ], value: EXPR [ (1, _19) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 })], outputs: [Simple(Witness(20))]",
    "EXPR [ (1, _10, _20) (1, _21) -1 ]",
    "EXPR [ (1, _10, _21) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [(_22, 24)] []",
    "BLACKBOX::RANGE [(_23, 8)] []",
    "EXPR [ (1, _9) (-256, _22) (-1, _23) 0 ]",
    "EXPR [ (1, _14, _21) (-1, _24) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _24) 0 ], value: EXPR [ (1, _25) 0 ]) ",
    "EXPR [ (1, _16, _21) (-1, _21) (-1, _26) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _26) 0 ], value: EXPR [ (1, _27) 0 ]) ",
    "EXPR [ (1, _18, _21) (-1, _21) (-1, _28) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _28) 0 ], value: EXPR [ (1, _29) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23)), (-1, Witness(27))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(30)), Simple(Witness(31))]",
    "BLACKBOX::RANGE [(_30, 1)] []",
    "BLACKBOX::RANGE [(_31, 8)] []",
    "EXPR [ (1, _23) (-1, _27) (-256, _30) (-1, _31) 256 ]",
    "EXPR [ (-1, _21, _30) 0 ]",
    "INIT (id: 1, len: 3, witnesses: [_9, _10, _17])",
    "EXPR [ (1, _9, _21) (-1, _32) 0 ]",
    "MEM (id: 1, read at: EXPR [ (1, _32) 0 ], value: EXPR [ (1, _33) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9)), (1, Witness(33))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(34)), Simple(Witness(35))]",
    "BLACKBOX::RANGE [(_34, 1)] []",
    "BLACKBOX::RANGE [(_35, 32)] []",
    "EXPR [ (-1, _9) (1, _33) (-4294967296, _34) (-1, _35) 4294967296 ]",
    "EXPR [ (-1, _21, _34) (1, _21) 0 ]",
    "EXPR [ (-1, _36) 0 ]",
    "INIT (id: 2, len: 15, witnesses: [_2, _36, _36, _0, _1, _5, _36, _36, _3, _4, _8, _36, _36, _6, _7])",
    "EXPR [ (-1, _37) 3 ]",
    "EXPR [ (-1, _38) 4 ]",
    "EXPR [ (-1, _39) 5 ]",
    "EXPR [ (-1, _40) 8 ]",
    "EXPR [ (-1, _41) 9 ]",
    "EXPR [ (-1, _42) 10 ]",
    "EXPR [ (-1, _43) 13 ]",
    "EXPR [ (-1, _44) 14 ]",
    "EXPR [ (-1, _45) 15 ]",
    "INIT (id: 3, len: 10, witnesses: [_36, _37, _38, _39, _40, _41, _42, _43, _44, _45])",
    "EXPR [ (1, _14, _21) (-1, _46) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _46) 0 ], value: EXPR [ (1, _47) 0 ]) ",
    "EXPR [ (1, _21, _47) (-1, _48) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _48) 0 ], value: EXPR [ (1, _49) 0 ]) ",
    "EXPR [ (1, _48) (-1, _50) 1 ]",
    "MEM (id: 2, read at: EXPR [ (1, _50) 0 ], value: EXPR [ (1, _51) 0 ]) ",
    "EXPR [ (1, _50) (-1, _52) 1 ]",
    "MEM (id: 2, read at: EXPR [ (1, _52) 0 ], value: EXPR [ (1, _53) 0 ]) ",
    "EXPR [ (1, _16, _21) (-1, _54) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _54) 0 ], value: EXPR [ (1, _55) 0 ]) ",
    "EXPR [ (1, _21, _55) (-1, _56) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _56) 0 ], value: EXPR [ (1, _57) 0 ]) ",
    "EXPR [ (1, _18, _21) (-1, _58) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _58) 0 ], value: EXPR [ (1, _59) 0 ]) ",
    "EXPR [ (1, _21, _59) (-1, _60) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _60) 0 ], value: EXPR [ (1, _61) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23)), (-1, Witness(61))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(62)), Simple(Witness(63))]",
    "BLACKBOX::RANGE [(_62, 1)] []",
    "BLACKBOX::RANGE [(_63, 8)] []",
    "EXPR [ (1, _23) (-1, _61) (-256, _62) (-1, _63) 256 ]",
    "EXPR [ (-1, _21, _62) 0 ]",
    "INIT (id: 4, len: 15, witnesses: [_2, _36, _36, _0, _1, _5, _36, _36, _3, _4, _8, _36, _36, _6, _7])",
    "INIT (id: 5, len: 10, witnesses: [_36, _37, _38, _39, _40, _41, _42, _43, _44, _45])",
    "EXPR [ (1, _14, _21) (-1, _64) 0 ]",
    "MEM (id: 5, read at: EXPR [ (1, _64) 0 ], value: EXPR [ (1, _65) 0 ]) ",
    "EXPR [ (1, _21, _65) (-1, _66) 0 ]",
    "MEM (id: 4, read at: EXPR [ (1, _66) 0 ], value: EXPR [ (1, _67) 0 ]) ",
    "EXPR [ (1, _66) (-1, _68) 1 ]",
    "MEM (id: 4, read at: EXPR [ (1, _68) 0 ], value: EXPR [ (1, _69) 0 ]) ",
    "EXPR [ (1, _68) (-1, _70) 1 ]",
    "MEM (id: 4, read at: EXPR [ (1, _70) 0 ], value: EXPR [ (1, _71) 0 ]) ",
    "EXPR [ (1, _16, _21) (-1, _72) 0 ]",
    "MEM (id: 5, read at: EXPR [ (1, _72) 0 ], value: EXPR [ (1, _73) 0 ]) ",
    "EXPR [ (1, _21, _73) (-1, _74) 0 ]",
    "MEM (id: 4, read at: EXPR [ (1, _74) 0 ], value: EXPR [ (1, _75) 0 ]) ",
    "EXPR [ (1, _18, _21) (-1, _76) 0 ]",
    "MEM (id: 5, read at: EXPR [ (1, _76) 0 ], value: EXPR [ (1, _77) 0 ]) ",
    "EXPR [ (1, _21, _77) (-1, _78) 0 ]",
    "MEM (id: 4, read at: EXPR [ (1, _78) 0 ], value: EXPR [ (1, _79) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-1, Witness(79), Witness(21))], linear_combinations: [(1, Witness(23))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(80)), Simple(Witness(81))]",
    "BLACKBOX::RANGE [(_80, 1)] []",
    "BLACKBOX::RANGE [(_81, 8)] []",
    "EXPR [ (-1, _21, _79) (1, _23) (-256, _80) (-1, _81) 256 ]",
    "EXPR [ (-1, _21, _80) 0 ]",
    "EXPR [ (-1, _1) (1, _11) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZXNbqMwFEbfxWsW/rvXdl5lNIpIQiokRCIKlUZR332u48+0XXTjrE7AOccGYXioy3Da3o7jfL29q8Ofhzot4zSNb8fpdu7X8TbL2cdnp+rhcV2GQU6pb+Ni3ftlmFd1mLdp6tRHP23PP73f+/nJtV9kVHdqmC9CCV7Haci/PrsvW/+u2mgh28i7Tg2+06bB99HB9zE0+OTrxRO5Bp+5rp9jy/rZc/UpvbZ+71+cX7f4qfpB2wY/uFh9Ty2+3316cX5uuf6wP3+h6fkLIb7kR/LwI8UW3+8+t+zfZKqfTMv8Se++/Tn/Xznqz+Py442njFMH0ynjC6iAC0JBLEjS7JTVBabAypgsxzrQgwTmksg2gBFMhU6DBsw9eQM4B3qQQAZzT54UF8FU6HNP7oA3oAUd6MHcIyGDAYxgKiQNGtCCDvQgeoQeoUfoEXqMHqPH6DF6jB6jx+gxeoweoxfQC+gF9ELuyZskeJBABgOYe0GYCqMGDWhBB3qQQAYDiF5EL6GX0EvoJfQSegm9lHuyg1MAI5gKjc7BvDE++mXsT9OA7/Z1m8/fPuPrv3sdqR/6+3I7D5dtGfIGeI7JlvgP",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
