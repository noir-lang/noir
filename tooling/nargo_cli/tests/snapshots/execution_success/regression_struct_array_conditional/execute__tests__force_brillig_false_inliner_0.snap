---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _36",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10]",
    "public parameters indices : []",
    "return value indices : [_11]",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BLACKBOX::RANGE [(_2, 8)] []",
    "BLACKBOX::RANGE [(_4, 8)] []",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "INIT (id: 0, len: 9, witnesses: [_0, _1, _2, _3, _4, _5, _6, _7, _8])",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "EXPR [ (3, _9) (-1, _12) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _12) 0 ], value: EXPR [ (1, _13) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _10) 0 ]], outputs: [_14]",
    "EXPR [ (1, _10, _14) (1, _15) -1 ]",
    "EXPR [ (1, _10, _15) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _9) 0 ], EXPR [ 256 ]], outputs: [_16, _17]",
    "BLACKBOX::RANGE [(_16, 24)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "EXPR [ (1, _9) (-256, _16) (-1, _17) 0 ]",
    "EXPR [ (1, _12, _15) (-1, _15) (-1, _18) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _18) 0 ], value: EXPR [ (1, _19) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _17) (-1, _19) 256 ], EXPR [ 256 ]], outputs: [_20, _21]",
    "BLACKBOX::RANGE [(_20, 1)] []",
    "BLACKBOX::RANGE [(_21, 8)] []",
    "EXPR [ (1, _17) (-1, _19) (-256, _20) (-1, _21) 256 ]",
    "EXPR [ (-1, _15, _20) 0 ]",
    "INIT (id: 1, len: 3, witnesses: [_9, _10, _13])",
    "EXPR [ (1, _9, _15) (-1, _22) 0 ]",
    "MEM (id: 1, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _23) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-1, _9) (1, _23) 4294967296 ], EXPR [ 4294967296 ]], outputs: [_24, _25]",
    "BLACKBOX::RANGE [(_24, 1)] []",
    "BLACKBOX::RANGE [(_25, 32)] []",
    "EXPR [ (-1, _9) (1, _23) (-4294967296, _24) (-1, _25) 4294967296 ]",
    "EXPR [ (-1, _15, _24) (1, _15) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (5, _9) 4294967281 ], EXPR [ 4294967296 ]], outputs: [_26, _27]",
    "BLACKBOX::RANGE [(_26, 1)] []",
    "BLACKBOX::RANGE [(_27, 32)] []",
    "EXPR [ (5, _9) (-4294967296, _26) (-1, _27) 4294967281 ]",
    "EXPR [ (-1, _15, _26) 0 ]",
    "EXPR [ (-1, _28) 0 ]",
    "INIT (id: 2, len: 15, witnesses: [_2, _28, _28, _0, _1, _5, _28, _28, _3, _4, _8, _28, _28, _6, _7])",
    "EXPR [ (5, _9, _15) (4, _15) (-1, _29) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _29) 0 ], value: EXPR [ (1, _30) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _17) (-1, _30) 256 ], EXPR [ 256 ]], outputs: [_31, _32]",
    "BLACKBOX::RANGE [(_31, 1)] []",
    "BLACKBOX::RANGE [(_32, 8)] []",
    "EXPR [ (1, _17) (-1, _30) (-256, _31) (-1, _32) 256 ]",
    "EXPR [ (-1, _15, _31) 0 ]",
    "INIT (id: 3, len: 15, witnesses: [_2, _28, _28, _0, _1, _5, _28, _28, _3, _4, _8, _28, _28, _6, _7])",
    "EXPR [ (5, _9, _15) (4, _15) (-1, _33) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _33) 0 ], value: EXPR [ (1, _34) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-1, _34, _15) (1, _17) 256 ], EXPR [ 256 ]], outputs: [_35, _36]",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 8)] []",
    "EXPR [ (-1, _15, _34) (1, _17) (-256, _35) (-1, _36) 256 ]",
    "EXPR [ (-1, _15, _35) 0 ]",
    "EXPR [ (-1, _1) (1, _11) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pdTNjoIwEAfwd+mZQ6d0+uGrbDamYjUkDZAKJhvju+/AFFcPmxg8/YDhP0BLexPHeJjO+7Y79Rex+7qJQ25Tas/71DdhbPuOrt7ulVhP92OOkS6JpzqlhpBjN4pdN6VUiWtI03LTZQjd4hgyVWUlYnckqeGpTXE+uld/afl/VDlVwrWERxzfzmt0Ja/Rb8gjQskjqg15Y9b3N27L+xtvSt7KLc+39fr9VuNneSO35O0j7+yGvNO65B3CZ3ljNuS9XPMe4LO8en3+N52Fps0vK04AULUSoJia0fQjEMgYxjKO8QtK0kATwCimZjSDjGEsQ11oopRfqCUDjGKoiyc0g4xhLOMYv6AlAwx1ARooXRd1EYumSK2A1px2Rc8idQNaSwhFVayLc795hVxDbsMhxbKBnaauedrPxp9hraw73pD7Jh6nHOeZWGo0N78=",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient"
  ]
}
