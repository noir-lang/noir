---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "struct",
            "path": "foo",
            "fields": [
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              },
              {
                "name": "dummy",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 8
                }
              }
            ]
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 8
      },
      "visibility": "public"
    },
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _49",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10]",
    "public parameters indices : []",
    "return value indices : [_11]",
    "BLACKBOX::RANGE [_1]:8 bits []",
    "BLACKBOX::RANGE [_2]:8 bits []",
    "BLACKBOX::RANGE [_4]:8 bits []",
    "BLACKBOX::RANGE [_5]:8 bits []",
    "BLACKBOX::RANGE [_7]:8 bits []",
    "BLACKBOX::RANGE [_8]:8 bits []",
    "INIT (id: 0, len: 9, witnesses: [_0, _1, _2, _3, _4, _5, _6, _7, _8])",
    "BLACKBOX::RANGE [_9]:32 bits []",
    "BLACKBOX::RANGE [_10]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 4294967293 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(12)), Simple(Witness(13))]",
    "BLACKBOX::RANGE [_13]:32 bits []",
    "EXPR [ (1, _9) (-4294967296, _12) (-1, _13) 4294967293 ]",
    "EXPR [ (-1, _12) 0 ]",
    "EXPR [ (3, _9) (-1, _14) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _15) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 })], outputs: [Simple(Witness(16))]",
    "EXPR [ (1, _10, _16) (1, _17) -1 ]",
    "EXPR [ (1, _10, _17) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(18)), Simple(Witness(19))]",
    "BLACKBOX::RANGE [_18]:24 bits []",
    "BLACKBOX::RANGE [_19]:8 bits []",
    "EXPR [ (1, _9) (-256, _18) (-1, _19) 0 ]",
    "EXPR [ (1, _14, _17) (-1, _17) (-1, _20) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _20) 0 ], value: EXPR [ (1, _21) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19)), (-1, Witness(21))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(22)), Simple(Witness(23))]",
    "BLACKBOX::RANGE [_22]:1 bits []",
    "BLACKBOX::RANGE [_23]:8 bits []",
    "EXPR [ (1, _19) (-1, _21) (-256, _22) (-1, _23) 256 ]",
    "EXPR [ (-1, _17, _22) 0 ]",
    "INIT (id: 1, len: 3, witnesses: [_9, _10, _15])",
    "EXPR [ (1, _9, _17) (-1, _24) 0 ]",
    "MEM (id: 1, read at: EXPR [ (1, _24) 0 ], value: EXPR [ (1, _25) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9)), (1, Witness(25))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(26)), Simple(Witness(27))]",
    "BLACKBOX::RANGE [_26]:1 bits []",
    "BLACKBOX::RANGE [_27]:32 bits []",
    "EXPR [ (-1, _9) (1, _25) (-4294967296, _26) (-1, _27) 4294967296 ]",
    "EXPR [ (-1, _17, _26) (1, _17) 0 ]",
    "EXPR [ (-1, _28) 0 ]",
    "INIT (id: 2, len: 15, witnesses: [_2, _28, _28, _0, _1, _5, _28, _28, _3, _4, _8, _28, _28, _6, _7])",
    "EXPR [ (-1, _29) 3 ]",
    "EXPR [ (-1, _30) 4 ]",
    "EXPR [ (-1, _31) 5 ]",
    "EXPR [ (-1, _32) 8 ]",
    "EXPR [ (-1, _33) 9 ]",
    "EXPR [ (-1, _34) 10 ]",
    "EXPR [ (-1, _35) 13 ]",
    "EXPR [ (-1, _36) 14 ]",
    "EXPR [ (-1, _37) 15 ]",
    "INIT (id: 3, len: 10, witnesses: [_28, _29, _30, _31, _32, _33, _34, _35, _36, _37])",
    "EXPR [ (3, _9, _17) (2, _17) (-1, _38) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _38) 0 ], value: EXPR [ (1, _39) 0 ]) ",
    "EXPR [ (1, _17, _39) (-1, _40) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _40) 0 ], value: EXPR [ (1, _41) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19)), (-1, Witness(41))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(42)), Simple(Witness(43))]",
    "BLACKBOX::RANGE [_42]:1 bits []",
    "BLACKBOX::RANGE [_43]:8 bits []",
    "EXPR [ (1, _19) (-1, _41) (-256, _42) (-1, _43) 256 ]",
    "EXPR [ (-1, _17, _42) 0 ]",
    "INIT (id: 4, len: 15, witnesses: [_2, _28, _28, _0, _1, _5, _28, _28, _3, _4, _8, _28, _28, _6, _7])",
    "INIT (id: 5, len: 10, witnesses: [_28, _29, _30, _31, _32, _33, _34, _35, _36, _37])",
    "EXPR [ (3, _9, _17) (2, _17) (-1, _44) 0 ]",
    "MEM (id: 5, read at: EXPR [ (1, _44) 0 ], value: EXPR [ (1, _45) 0 ]) ",
    "EXPR [ (1, _17, _45) (-1, _46) 0 ]",
    "MEM (id: 4, read at: EXPR [ (1, _46) 0 ], value: EXPR [ (1, _47) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [(-1, Witness(47), Witness(17))], linear_combinations: [(1, Witness(19))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(48)), Simple(Witness(49))]",
    "BLACKBOX::RANGE [_48]:1 bits []",
    "BLACKBOX::RANGE [_49]:8 bits []",
    "EXPR [ (-1, _17, _47) (1, _19) (-256, _48) (-1, _49) 256 ]",
    "EXPR [ (-1, _17, _48) 0 ]",
    "EXPR [ (-1, _1) (1, _11) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pdXNbuowEAXgd/E6C//N2OZVrq5QAFNFigJKk0oV4t07huO0XXRjVh+JOePInsQ3dcqH9W0/TOfLu9r9u6nDPIzj8LYfL8d+GS6T3L3dO1Uv98ucs9xSP8Ylde3nPC1qN63j2KmPflwff3q/9tPDpZ9lVHcqTydRCp6HMZdf9+47rf+O2mgRtpG3ODXknTYNeR8d8j6GhjyZiDxZ25InrnnWLXlfF5/INeSZ6/pxbFk/9vX5mdJrz+/9i/O3rB+nmg+6Zf+Cq/sfPLXk/ZanF+dv6p+w9X9o6v8Q4kv5SB75SLEl77c8t3w/kqn5ZFrmT3rL29/z/5er/jjMv764yji1M50y/gkJRYYBRlFeTJOeWg0NtKJsnHWwlJMHsQQZBhhhqUedchoaWOrJi+Ac9JAgw1IviBGmp15DAy100EOCDFHPo55HPUI9Qj1CPSr1pOHIQ4IMAyz1kpiesoYGWuig1LOyy0yQYYCxeC9tMA/9Ycw4Pc/rdPxxmC6f1zpSj9vrfDnm0zrn0gaPMWmMLw==",
  "file_map": {
    "50": {
      "source": "struct foo {\n    value: Field,\n    counter: u8,\n    dummy: u8,\n}\nstruct bar {\n    dummy: [u8; 3],\n    value: Field,\n    counter: u8,\n}\nstruct bar_field {\n    dummy: [Field; 3],\n    value: Field,\n    counter: u8,\n}\nfn main(x: [foo; 3], y: u32, z: u32) -> pub u8 {\n    let a = [y, z, x[y].counter as u32];\n    let mut b = [bar { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    let mut c = [bar_field { value: 0, counter: 0, dummy: [0; 3] }; 3];\n    for i in 0..3 {\n        b[i].value = x[i].value;\n        b[i].counter = x[i].counter;\n        b[i].dummy[0] = x[i].dummy;\n        c[i].value = x[i].value;\n        c[i].counter = x[i].counter;\n        c[i].dummy[0] = x[i].dummy as Field;\n    }\n    if z == 0 {\n        // offset\n        assert(y as u8 < x[y].counter);\n        assert(y <= a[y]);\n        // first element is compatible\n        assert(y as u8 < b[y].counter);\n        // fallback\n        assert(y as u8 < c[y].counter);\n    }\n    x[0].counter\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
