---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": {
      "abi_type": {
        "kind": "tuple",
        "fields": [
          {
            "kind": "field"
          },
          {
            "kind": "boolean"
          }
        ]
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _1",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : [_0, _1]",
    "BRILLIG CALL func 0: inputs: [], outputs: [_0, _1]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32837), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 13 }, Call { location: 16 }, Mov { destination: Direct(32837), source: Relative(1) }, Mov { destination: Direct(32838), source: Relative(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Stop { return_data: HeapVector { pointer: Relative(3), size: Relative(4) } }, Const { destination: Direct(32835), bit_size: Field, value: 1 }, Const { destination: Direct(32836), bit_size: Integer(U1), value: 1 }, Return, Call { location: 52 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 2 }, Store { destination_pointer: Relative(1), source: Relative(2) }, Const { destination: Relative(2), bit_size: Field, value: -1 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(5), source: Relative(4) }, Store { destination_pointer: Relative(5), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(4), bit_size: Integer(U1), value: 0 }, Store { destination_pointer: Relative(3), source: Relative(4) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 7 }, Mov { destination: Relative(7), source: Direct(0) }, Mov { destination: Relative(8), source: Relative(2) }, Mov { destination: Relative(9), source: Relative(3) }, Mov { destination: Relative(10), source: Direct(32835) }, Mov { destination: Relative(11), source: Direct(32836) }, Mov { destination: Relative(12), source: Direct(32836) }, Mov { destination: Relative(13), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(6) }, Call { location: 58 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(4), source: Relative(8) }, Mov { destination: Relative(5), source: Relative(9) }, Mov { destination: Relative(1), source: Relative(4) }, Mov { destination: Relative(2), source: Relative(5) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 57 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 52 }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(4) }, Load { destination: Relative(10), source_pointer: Relative(6) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(11) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 1 }, JumpIf { condition: Relative(12), location: 93 }, Jump { location: 68 }, Load { destination: Relative(11), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(12), op: Sub, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, BinaryIntOp { destination: Relative(13), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(13), location: 73 }, Call { location: 103 }, Store { destination_pointer: Relative(6), source: Relative(12) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Not { destination: Relative(11), source: Relative(10), bit_size: U1 }, ConditionalMov { destination: Relative(12), source_a: Relative(2), source_b: Relative(9), condition: Relative(10) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 13 }, Mov { destination: Relative(13), source: Direct(0) }, Mov { destination: Relative(14), source: Relative(1) }, Mov { destination: Relative(15), source: Relative(12) }, Mov { destination: Relative(16), source: Relative(3) }, Mov { destination: Relative(17), source: Relative(4) }, Mov { destination: Relative(18), source: Relative(5) }, Mov { destination: Relative(19), source: Relative(6) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(10) }, Call { location: 58 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(2), source: Relative(14) }, Mov { destination: Relative(9), source: Relative(15) }, Mov { destination: Relative(7), source: Relative(2) }, Mov { destination: Relative(8), source: Relative(9) }, Jump { location: 100 }, Load { destination: Relative(3), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(10) }, Load { destination: Relative(1), source_pointer: Relative(4) }, Load { destination: Relative(3), source_pointer: Relative(2) }, Mov { destination: Relative(7), source: Relative(1) }, Mov { destination: Relative(8), source: Relative(3) }, Jump { location: 100 }, Mov { destination: Relative(1), source: Relative(7) }, Mov { destination: Relative(2), source: Relative(8) }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "ndTBioMwFAXQf8naRZL3EmN/pZRibVoEUUl1YCj++zy92mkXA4MbT228N2owT3WNl/F+rttb91CH41NdUt009f3cdFU51F0r/z6Vng8mVweTKRNAsWA1MOpgBQsIMHDAgxwEUCyQBmghtBBaCC2EFpIWEnIQQLHAGhhgAQEGDqCF0cJocWjxaPFo8Wjx0sICAwk4QQI+U7kGBlhAgIEDHsi0uRBAsRA0MMACAgwc8AAtAS0BLYUEgsDLDRYOSMBNU6a2NT0PKcZ5Sd8WWZa+L1NsB3Vox6bJ1FfZjMtFj75sF4cyyajOVGyvohTe6ibOv6bsN63/jhqbr2Fjwyvu/p/nYss7sydPvOULuyNPTGuePO/J59vzU6AdebZ+zTP7PXm3ze/snvdHwbzu//P9neSsrOr0sW1Mc1Oqy0sT19Pb2FZvo8N3v41s206fuipexxTnpre9R45HZzOXn2TrkW/kaDRlRrvTNE/+Aw==",
  "file_map": {
    "50": {
      "source": "global G_A: (Field, bool, bool) = (1, true, true);\nunconstrained fn main() -> pub (Field, bool) {\n    let mut ctx_limit: u32 = 2;\n    func_5(((&mut [-1]), (&mut false)), G_A, (&mut ctx_limit))\n}\nunconstrained fn func_5(\n    a: (&mut [Field; 1], &mut bool),\n    mut c: (Field, bool, bool),\n    ctx_limit: &mut u32,\n) -> (Field, bool) {\n    if ((*ctx_limit) == 0_u32) {\n        (a.0[0], *a.1)\n    } else {\n        *ctx_limit = ((*ctx_limit) - 1_u32);\n        func_5(if (*a.1) { a } else { (a.0, (&mut c.1)) }, c, ctx_limit)\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
