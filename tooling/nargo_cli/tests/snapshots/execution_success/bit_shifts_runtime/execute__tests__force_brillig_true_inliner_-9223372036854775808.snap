---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 537 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 28 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(8), location: 34 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 39 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 44 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Cast { destination: Relative(5), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(6), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U64, lhs: Relative(5), rhs: Relative(6) }, Mov { destination: Relative(5), source: Relative(7) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U64) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(7) }, Not { destination: Relative(9), source: Relative(8), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U1, lhs: Relative(6), rhs: Relative(9) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(7), rhs: Relative(9) }, JumpIf { condition: Relative(6), location: 58 }, Call { location: 543 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 62 }, Jump { location: 107 }, Const { destination: Relative(10), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U64, lhs: Relative(5), rhs: Relative(10) }, JumpIf { condition: Relative(9), location: 67 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(11), bit_size: Integer(U64), value: 1 }, Const { destination: Relative(12), bit_size: Integer(U64), value: 2 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 1 }, Cast { destination: Relative(14), source: Relative(5), bit_size: Integer(U32) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 78 }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U64, lhs: Relative(13), rhs: Relative(12) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Jump { location: 72 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(11) }, Const { destination: Relative(20), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U64, lhs: Relative(20), rhs: Relative(6) }, Const { destination: Relative(21), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U64, lhs: Relative(21), rhs: Relative(6) }, JumpIf { condition: Relative(15), location: 85 }, Jump { location: 87 }, Mov { destination: Relative(16), source: Relative(22) }, Jump { location: 89 }, Mov { destination: Relative(16), source: Relative(6) }, Jump { location: 89 }, Const { destination: Relative(20), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U64, lhs: Relative(20), rhs: Relative(13) }, Const { destination: Relative(21), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U64, lhs: Relative(21), rhs: Relative(13) }, JumpIf { condition: Relative(17), location: 95 }, Jump { location: 97 }, Mov { destination: Relative(18), source: Relative(22) }, Jump { location: 99 }, Mov { destination: Relative(18), source: Relative(13) }, Jump { location: 99 }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U64, lhs: Relative(16), rhs: Relative(18) }, BinaryIntOp { destination: Relative(19), op: Xor, bit_size: U1, lhs: Relative(15), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 103 }, Jump { location: 105 }, Const { destination: Relative(20), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(20), rhs: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(6), rhs: Relative(11) }, Jump { location: 109 }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, Jump { location: 109 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 114 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U8, lhs: Relative(6), rhs: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 127 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(11), rhs: Relative(6) }, JumpIf { condition: Relative(9), location: 132 }, Jump { location: 177 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(5), rhs: Relative(13) }, JumpIf { condition: Relative(12), location: 137 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Const { destination: Relative(14), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(17), source: Relative(5), bit_size: Integer(U32) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 148 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U8, lhs: Relative(16), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Jump { location: 142 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U8, lhs: Relative(6), rhs: Relative(14) }, Const { destination: Relative(23), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U8, lhs: Relative(23), rhs: Relative(7) }, Const { destination: Relative(24), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U8, lhs: Relative(24), rhs: Relative(7) }, JumpIf { condition: Relative(18), location: 155 }, Jump { location: 157 }, Mov { destination: Relative(19), source: Relative(25) }, Jump { location: 159 }, Mov { destination: Relative(19), source: Relative(7) }, Jump { location: 159 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U8, lhs: Relative(23), rhs: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U8, lhs: Relative(24), rhs: Relative(16) }, JumpIf { condition: Relative(20), location: 165 }, Jump { location: 167 }, Mov { destination: Relative(21), source: Relative(25) }, Jump { location: 169 }, Mov { destination: Relative(21), source: Relative(16) }, Jump { location: 169 }, BinaryIntOp { destination: Relative(7), op: Div, bit_size: U8, lhs: Relative(19), rhs: Relative(21) }, BinaryIntOp { destination: Relative(22), op: Xor, bit_size: U1, lhs: Relative(18), rhs: Relative(20) }, JumpIf { condition: Relative(22), location: 173 }, Jump { location: 175 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U8, lhs: Relative(23), rhs: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U8, lhs: Relative(7), rhs: Relative(14) }, Jump { location: 179 }, BinaryIntOp { destination: Relative(7), op: Shr, bit_size: U8, lhs: Relative(6), rhs: Relative(5) }, Jump { location: 179 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 184 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(9), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 188 }, Jump { location: 233 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(14) }, JumpIf { condition: Relative(12), location: 193 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(15) } }, Const { destination: Relative(15), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(18), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 204 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U8, lhs: Relative(17), rhs: Relative(16) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Jump { location: 198 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U8, lhs: Relative(6), rhs: Relative(15) }, Const { destination: Relative(24), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U8, lhs: Relative(24), rhs: Relative(5) }, Const { destination: Relative(25), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U8, lhs: Relative(25), rhs: Relative(5) }, JumpIf { condition: Relative(19), location: 211 }, Jump { location: 213 }, Mov { destination: Relative(20), source: Relative(26) }, Jump { location: 215 }, Mov { destination: Relative(20), source: Relative(5) }, Jump { location: 215 }, Const { destination: Relative(24), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U8, lhs: Relative(24), rhs: Relative(17) }, Const { destination: Relative(25), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U8, lhs: Relative(25), rhs: Relative(17) }, JumpIf { condition: Relative(21), location: 221 }, Jump { location: 223 }, Mov { destination: Relative(22), source: Relative(26) }, Jump { location: 225 }, Mov { destination: Relative(22), source: Relative(17) }, Jump { location: 225 }, BinaryIntOp { destination: Relative(5), op: Div, bit_size: U8, lhs: Relative(20), rhs: Relative(22) }, BinaryIntOp { destination: Relative(23), op: Xor, bit_size: U1, lhs: Relative(19), rhs: Relative(21) }, JumpIf { condition: Relative(23), location: 229 }, Jump { location: 231 }, Const { destination: Relative(24), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(24), rhs: Relative(5) }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(15) }, Jump { location: 235 }, BinaryIntOp { destination: Relative(5), op: Shr, bit_size: U8, lhs: Relative(6), rhs: Relative(2) }, Jump { location: 235 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 240 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(7), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(4) }, Not { destination: Relative(7), source: Relative(12), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(12), rhs: Relative(7) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(15), location: 253 }, Call { location: 543 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 6 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 192 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(6) }, JumpIf { condition: Relative(15), location: 260 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(2) }, Mov { destination: Relative(5), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Not { destination: Relative(7), source: Relative(12), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U1, lhs: Relative(12), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(7) }, JumpIf { condition: Relative(6), location: 269 }, Call { location: 543 }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U8, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 275 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 280 }, Call { location: 543 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 286 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 291 }, Jump { location: 336 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(12) }, JumpIf { condition: Relative(7), location: 296 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(15) } }, Const { destination: Relative(15), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(18), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 307 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U16, lhs: Relative(17), rhs: Relative(16) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Jump { location: 301 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(15) }, Const { destination: Relative(24), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(24), rhs: Relative(4) }, Const { destination: Relative(25), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(19), location: 314 }, Jump { location: 316 }, Mov { destination: Relative(20), source: Relative(26) }, Jump { location: 318 }, Mov { destination: Relative(20), source: Relative(4) }, Jump { location: 318 }, Const { destination: Relative(24), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U16, lhs: Relative(24), rhs: Relative(17) }, Const { destination: Relative(25), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U16, lhs: Relative(25), rhs: Relative(17) }, JumpIf { condition: Relative(21), location: 324 }, Jump { location: 326 }, Mov { destination: Relative(22), source: Relative(26) }, Jump { location: 328 }, Mov { destination: Relative(22), source: Relative(17) }, Jump { location: 328 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(20), rhs: Relative(22) }, BinaryIntOp { destination: Relative(23), op: Xor, bit_size: U1, lhs: Relative(19), rhs: Relative(21) }, JumpIf { condition: Relative(23), location: 332 }, Jump { location: 334 }, Const { destination: Relative(24), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(24), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(15) }, Jump { location: 338 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 338 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 343 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 14 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 348 }, Jump { location: 393 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(16) }, JumpIf { condition: Relative(15), location: 353 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Const { destination: Relative(17), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(20), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 364 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U16, lhs: Relative(19), rhs: Relative(18) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Jump { location: 358 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(17) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U16, lhs: Relative(26), rhs: Relative(4) }, Const { destination: Relative(27), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(28), op: Sub, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, JumpIf { condition: Relative(21), location: 371 }, Jump { location: 373 }, Mov { destination: Relative(22), source: Relative(28) }, Jump { location: 375 }, Mov { destination: Relative(22), source: Relative(4) }, Jump { location: 375 }, Const { destination: Relative(26), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U16, lhs: Relative(26), rhs: Relative(19) }, Const { destination: Relative(27), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(28), op: Sub, bit_size: U16, lhs: Relative(27), rhs: Relative(19) }, JumpIf { condition: Relative(23), location: 381 }, Jump { location: 383 }, Mov { destination: Relative(24), source: Relative(28) }, Jump { location: 385 }, Mov { destination: Relative(24), source: Relative(19) }, Jump { location: 385 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(22), rhs: Relative(24) }, BinaryIntOp { destination: Relative(25), op: Xor, bit_size: U1, lhs: Relative(21), rhs: Relative(23) }, JumpIf { condition: Relative(25), location: 389 }, Jump { location: 391 }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(17) }, Jump { location: 395 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 395 }, Const { destination: Relative(5), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U16, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(15), location: 400 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Cast { destination: Relative(15), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(4), source: Relative(15), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(4), bit_size: Integer(U16) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U16, lhs: Relative(2), rhs: Relative(18) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U16, lhs: Relative(1), rhs: Relative(18) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(15), rhs: Relative(17) }, Not { destination: Relative(15), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(17), source: Relative(4), bit_size: Integer(U16) }, Cast { destination: Relative(4), source: Relative(15), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U16, lhs: Relative(17), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U16, lhs: Relative(4), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U16, lhs: Relative(15), rhs: Relative(2) }, Const { destination: Relative(15), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(15), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 417 }, Jump { location: 462 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(18) }, JumpIf { condition: Relative(17), location: 422 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, Const { destination: Relative(19), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(22), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 433 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U16, lhs: Relative(21), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Jump { location: 427 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(19) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(2) }, JumpIf { condition: Relative(23), location: 440 }, Jump { location: 442 }, Mov { destination: Relative(24), source: Relative(30) }, Jump { location: 444 }, Mov { destination: Relative(24), source: Relative(2) }, Jump { location: 444 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(21) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(21) }, JumpIf { condition: Relative(25), location: 450 }, Jump { location: 452 }, Mov { destination: Relative(26), source: Relative(30) }, Jump { location: 454 }, Mov { destination: Relative(26), source: Relative(21) }, Jump { location: 454 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(24), rhs: Relative(26) }, BinaryIntOp { destination: Relative(27), op: Xor, bit_size: U1, lhs: Relative(23), rhs: Relative(25) }, JumpIf { condition: Relative(27), location: 458 }, Jump { location: 460 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(19) }, Jump { location: 464 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 464 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 468 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(17), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(3) }, Not { destination: Relative(17), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(17) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(17) }, JumpIf { condition: Relative(4), location: 481 }, Call { location: 543 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 485 }, Jump { location: 530 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(20) }, JumpIf { condition: Relative(19), location: 490 }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(21) } }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(22), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(23), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(24), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 501 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U16, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Jump { location: 495 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U16, lhs: Relative(5), rhs: Relative(21) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(3) }, JumpIf { condition: Relative(25), location: 508 }, Jump { location: 510 }, Mov { destination: Relative(26), source: Relative(32) }, Jump { location: 512 }, Mov { destination: Relative(26), source: Relative(3) }, Jump { location: 512 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(23) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(23) }, JumpIf { condition: Relative(27), location: 518 }, Jump { location: 520 }, Mov { destination: Relative(28), source: Relative(32) }, Jump { location: 522 }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 522 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U16, lhs: Relative(26), rhs: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Xor, bit_size: U1, lhs: Relative(25), rhs: Relative(27) }, JumpIf { condition: Relative(29), location: 526 }, Jump { location: 528 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(21) }, Jump { location: 532 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, Jump { location: 532 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(1), location: 536 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 542 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "rdlNbhxJDkDhu9RaiyQjSEboKg3DkO1yQ4AgG2ppgIGhu08wk0/tXswmqzfmK8v8LKkq6vfX5dv1y9ufnx+fv//463L/x6/Ll5fHp6fHPz8//fj68Pr443n97a/Lln+oXO7l7qJ6jHa51zX6MewYfow4xrjctzXm5b7fXdp2DDmGHqMdYym2xlJ8DT9GHGMcYylxd+lLGWvIMfQY7RhLmWssRbY1vWbUHDXnMW2rKTW1ZqvZa5Zn5Vl5lt76Tdg8pm81pabWbDV7TavpNaNmeV5elBflRXlRXpQX5UV5UV6UF+WN8kZ5o7xR3ihvlDfKG+WN8kZ5s7xZ3ixvljfLm+XN8mZ5s7xZnmwbIYQSjeiEEU4EMYiU1w1RZCOEUKIRKbcMI5xIuWcMYlZoypYhRMqe0YhOGOFEypExiFmR5+UIIZRoRCeMcAK5ITfkjtyRO3JH7sgduSN35I7ckQ3ZkA3ZkA3ZkA3ZkA3ZkB3ZkR3ZkR3ZkR3ZkR3ZkQM5kAM5kAM5kAM5kAN5P2/r7kj2A7eHEEo0IuWZYYQTQQxiVuxHbw8hlGgE8kSeyBN5Is+SddsIIZRoRCeMcCKIQSALsiALsiALsiALsiALsiArsiIrsiIrsiIrsiIrsiI35IbckBtyQ84zqFuGE0EMYlbkGdR8GM0zeIQSjeiEEU4EMYhZYciGbMh5BnV/tO5EyvkYnWfwiCAGMSvyDGrPEEKJRnTCCCeCGETKls8XUvYMIZRoRCdSjgwnghjErMgzqCMj5bya8gwe0YhOGLHklldTnsEjBjEr8gweIYQSjeiEEcgTeSLPktu2EUIo0YhOGOFEEINAFmRBFmRBFmRBFmRBFmRBVmRFVmRFVmRFVmRFVmRFbsgNuSE35IbckBtyQ84z2CRjVuQZPEIIJVLWjE4Y4UQQg5gVeQaPEEIJZEM2ZEM2ZEM2ZEd2ZEd2ZEd2ZEd2ZEd25EAO5EAO5EAO5EAO5EAO5IE8kAfyQB7IA3kgD+SBPJAn8kSeyBN5Iu9nsGU4EcQg5hF9P4M9QwglUraMThjhRBCDrVkhyIIsyPsZ9IxOGOFEEIOYFfsZ3EMIJZAVWZEVWZEVWZEbckNuyA25ITfkhtyQG3JD7sgduSN35I7ckTtyR+7IHdmQDdmQDdmQDdmQDdmQDdmRHdmRHXk/g/l6dT+DezgRRMr5unU/gxn7GdxDCCUa0QkjnAgCOZAH8n4G81Xyfgb3aEQnjHAiiEHMiv0M7oE8kSfyRJ7IE3kiT+RZsm0bIYQSjeiEEU4EMQhkQRZkQRZkQRZkQRZkQRZkRVZkRVZkRVZkRVZkRVbkhtyQ9/dQ9jcsGtEJy3h/v7vwPs7n15frNd/G+e2NnfV2z8+Hl+vz6+X++e3p6e7yn4ent/0f/fXz4Xmfrw8v66uLvD5/W3OB3x+frlnvd39vb/9/db1ir+X14vtj3U7tjzP7ed9/7Ld52363M/tz1v56uXTbvuiJfc3nzMd+u3X/zO+/5RP8fX89XbtxP87sy/zYH7ft935ifz0nqP318H5mv/Hzr0fGM/v2se9y4/6Z87MeXtgfN+7PM+dn3enX/rojv21fz/z+7OP+Y907n9nvwb612/Z9O7MfHz//OPXzR//X9s+cf99G7fup8+ebfuz3G/fP3P69cf15bzfun7n/c+f8eWw37vuZ/cn3H6ceP3/blzPff3Ru/2Fx276fuf4iPr7/mLftD79tf/7z/H5alx6+Pr7846PC95ReHh++PF3r4ve356+/ffX1vz/5Ch81/nz58fX67e3lmtLfnzfmk/Q/bN18reun/MwlL/a2Ltqn9/zv/wc=",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u64, z: i16, u: i64) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n    // regression tests for issue #8176, superseded by issue #8791\n    assert(u >> (x as i64 - 2) == -1);\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> a == 32);\n    a = -a;\n    assert(a << 6 == -64);\n    assert(a << -a == -2);\n\n    assert(x >> (x - 1) == 0);\n\n    assert_eq(z >> 3, -97);\n\n    assert(z >> 14 == -1);\n    let rhs = (if x as i16 > 14 { 14 } else { x as i16 });\n    assert(z >> rhs == -1);\n    assert(-z >> rhs == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
