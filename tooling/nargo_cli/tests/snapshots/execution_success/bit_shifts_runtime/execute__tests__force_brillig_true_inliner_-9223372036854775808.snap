---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 570 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U64, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(7), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(6), location: 26 }, Call { location: 576 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(8), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 32 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 38 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 43 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 48 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(8), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, Mov { destination: Relative(6), source: Relative(9) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U64) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(12), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(9), location: 62 }, Call { location: 579 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 63 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 66 }, Call { location: 576 }, Const { destination: Relative(10), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U64, lhs: Relative(10), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 70 }, Jump { location: 115 }, Const { destination: Relative(12), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U64, lhs: Relative(6), rhs: Relative(12) }, JumpIf { condition: Relative(11), location: 75 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Const { destination: Relative(13), bit_size: Integer(U64), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U64), value: 2 }, Const { destination: Relative(15), bit_size: Integer(U64), value: 1 }, Cast { destination: Relative(16), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 86 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U64, lhs: Relative(15), rhs: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Jump { location: 80 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(13) }, Const { destination: Relative(22), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U64, lhs: Relative(22), rhs: Relative(8) }, Const { destination: Relative(23), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U64, lhs: Relative(23), rhs: Relative(8) }, JumpIf { condition: Relative(17), location: 93 }, Jump { location: 95 }, Mov { destination: Relative(18), source: Relative(24) }, Jump { location: 97 }, Mov { destination: Relative(18), source: Relative(8) }, Jump { location: 97 }, Const { destination: Relative(22), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U64, lhs: Relative(22), rhs: Relative(15) }, Const { destination: Relative(23), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U64, lhs: Relative(23), rhs: Relative(15) }, JumpIf { condition: Relative(19), location: 103 }, Jump { location: 105 }, Mov { destination: Relative(20), source: Relative(24) }, Jump { location: 107 }, Mov { destination: Relative(20), source: Relative(15) }, Jump { location: 107 }, BinaryIntOp { destination: Relative(8), op: Div, bit_size: U64, lhs: Relative(18), rhs: Relative(20) }, BinaryIntOp { destination: Relative(21), op: Xor, bit_size: U1, lhs: Relative(17), rhs: Relative(19) }, JumpIf { condition: Relative(21), location: 111 }, Jump { location: 113 }, Const { destination: Relative(22), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(22), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(8), rhs: Relative(13) }, Jump { location: 117 }, BinaryIntOp { destination: Relative(8), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, Jump { location: 117 }, Mov { destination: Relative(4), source: Relative(8) }, Const { destination: Relative(6), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 123 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Cast { destination: Relative(6), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(8), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(8), bit_size: Integer(U64) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U8) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(8), rhs: Relative(6) }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 137 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Const { destination: Relative(6), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(13), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 142 }, Jump { location: 187 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(15) }, JumpIf { condition: Relative(14), location: 147 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Const { destination: Relative(16), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(19), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 158 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U8, lhs: Relative(18), rhs: Relative(17) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Jump { location: 152 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(8), rhs: Relative(16) }, Const { destination: Relative(25), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U8, lhs: Relative(25), rhs: Relative(9) }, Const { destination: Relative(26), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U8, lhs: Relative(26), rhs: Relative(9) }, JumpIf { condition: Relative(20), location: 165 }, Jump { location: 167 }, Mov { destination: Relative(21), source: Relative(27) }, Jump { location: 169 }, Mov { destination: Relative(21), source: Relative(9) }, Jump { location: 169 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(25), rhs: Relative(18) }, Const { destination: Relative(26), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U8, lhs: Relative(26), rhs: Relative(18) }, JumpIf { condition: Relative(22), location: 175 }, Jump { location: 177 }, Mov { destination: Relative(23), source: Relative(27) }, Jump { location: 179 }, Mov { destination: Relative(23), source: Relative(18) }, Jump { location: 179 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U8, lhs: Relative(21), rhs: Relative(23) }, BinaryIntOp { destination: Relative(24), op: Xor, bit_size: U1, lhs: Relative(20), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 183 }, Jump { location: 185 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(25), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(9), rhs: Relative(16) }, Jump { location: 189 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U8, lhs: Relative(8), rhs: Relative(6) }, Jump { location: 189 }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 195 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Cast { destination: Relative(6), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 7 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 200 }, Call { location: 576 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(14), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 204 }, Jump { location: 249 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(16), location: 209 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Const { destination: Relative(18), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(21), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 220 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U8, lhs: Relative(20), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Jump { location: 214 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(8), rhs: Relative(18) }, Const { destination: Relative(27), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(27), rhs: Relative(9) }, Const { destination: Relative(28), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U8, lhs: Relative(28), rhs: Relative(9) }, JumpIf { condition: Relative(22), location: 227 }, Jump { location: 229 }, Mov { destination: Relative(23), source: Relative(29) }, Jump { location: 231 }, Mov { destination: Relative(23), source: Relative(9) }, Jump { location: 231 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U8, lhs: Relative(27), rhs: Relative(20) }, Const { destination: Relative(28), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U8, lhs: Relative(28), rhs: Relative(20) }, JumpIf { condition: Relative(24), location: 237 }, Jump { location: 239 }, Mov { destination: Relative(25), source: Relative(29) }, Jump { location: 241 }, Mov { destination: Relative(25), source: Relative(20) }, Jump { location: 241 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U8, lhs: Relative(23), rhs: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Xor, bit_size: U1, lhs: Relative(22), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 245 }, Jump { location: 247 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(27), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(9), rhs: Relative(18) }, Jump { location: 251 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Jump { location: 251 }, Mov { destination: Relative(8), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 257 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Const { destination: Relative(8), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(9) }, Cast { destination: Relative(9), source: Relative(2), bit_size: Integer(U8) }, Const { destination: Relative(11), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, Not { destination: Relative(6), source: Relative(16), bit_size: U1 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(6) }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(18), location: 269 }, Call { location: 579 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 6 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 192 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(18), location: 277 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Mov { destination: Relative(8), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(8), bit_size: Integer(U8) }, Not { destination: Relative(9), source: Relative(16), bit_size: U1 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(9) }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(9) }, JumpIf { condition: Relative(16), location: 286 }, Call { location: 579 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 289 }, Call { location: 576 }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(8) }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 296 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 301 }, Call { location: 579 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(2), location: 304 }, Call { location: 576 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 310 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 315 }, Jump { location: 360 }, Const { destination: Relative(9), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 320 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(11), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(19), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 331 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U16, lhs: Relative(18), rhs: Relative(16) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Jump { location: 325 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(11) }, Const { destination: Relative(25), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(4) }, JumpIf { condition: Relative(20), location: 338 }, Jump { location: 340 }, Mov { destination: Relative(21), source: Relative(27) }, Jump { location: 342 }, Mov { destination: Relative(21), source: Relative(4) }, Jump { location: 342 }, Const { destination: Relative(25), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U16, lhs: Relative(25), rhs: Relative(18) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(18) }, JumpIf { condition: Relative(22), location: 348 }, Jump { location: 350 }, Mov { destination: Relative(23), source: Relative(27) }, Jump { location: 352 }, Mov { destination: Relative(23), source: Relative(18) }, Jump { location: 352 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(21), rhs: Relative(23) }, BinaryIntOp { destination: Relative(24), op: Xor, bit_size: U1, lhs: Relative(20), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 356 }, Jump { location: 358 }, Const { destination: Relative(25), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(11) }, Jump { location: 362 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 362 }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 368 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 14 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(8), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 373 }, Jump { location: 418 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(16) }, JumpIf { condition: Relative(11), location: 378 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(21), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 389 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U16, lhs: Relative(20), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Jump { location: 383 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(18) }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(4) }, JumpIf { condition: Relative(22), location: 396 }, Jump { location: 398 }, Mov { destination: Relative(23), source: Relative(29) }, Jump { location: 400 }, Mov { destination: Relative(23), source: Relative(4) }, Jump { location: 400 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(20) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(20) }, JumpIf { condition: Relative(24), location: 406 }, Jump { location: 408 }, Mov { destination: Relative(25), source: Relative(29) }, Jump { location: 410 }, Mov { destination: Relative(25), source: Relative(20) }, Jump { location: 410 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(23), rhs: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Xor, bit_size: U1, lhs: Relative(22), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 414 }, Jump { location: 416 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(18) }, Jump { location: 420 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 420 }, Mov { destination: Relative(5), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 426 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Cast { destination: Relative(11), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(11), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(5), bit_size: Integer(U16) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U16, lhs: Relative(2), rhs: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U16, lhs: Relative(1), rhs: Relative(19) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(18) }, Not { destination: Relative(11), source: Relative(5), bit_size: U1 }, Cast { destination: Relative(18), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(11), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U16, lhs: Relative(18), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U16, lhs: Relative(11), rhs: Relative(2) }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U16) }, Const { destination: Relative(5), bit_size: Integer(U16), value: 15 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(11), location: 444 }, Call { location: 576 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 448 }, Jump { location: 493 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(18) }, JumpIf { condition: Relative(11), location: 453 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, Const { destination: Relative(19), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(22), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 464 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U16, lhs: Relative(21), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Jump { location: 458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(19) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(2) }, JumpIf { condition: Relative(23), location: 471 }, Jump { location: 473 }, Mov { destination: Relative(24), source: Relative(30) }, Jump { location: 475 }, Mov { destination: Relative(24), source: Relative(2) }, Jump { location: 475 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(21) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(21) }, JumpIf { condition: Relative(25), location: 481 }, Jump { location: 483 }, Mov { destination: Relative(26), source: Relative(30) }, Jump { location: 485 }, Mov { destination: Relative(26), source: Relative(21) }, Jump { location: 485 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(24), rhs: Relative(26) }, BinaryIntOp { destination: Relative(27), op: Xor, bit_size: U1, lhs: Relative(23), rhs: Relative(25) }, JumpIf { condition: Relative(27), location: 489 }, Jump { location: 491 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(19) }, Jump { location: 495 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 495 }, Mov { destination: Relative(5), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 500 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(11), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(3) }, Not { destination: Relative(11), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(11) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(11) }, JumpIf { condition: Relative(4), location: 513 }, Call { location: 579 }, Const { destination: Relative(11), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 517 }, Jump { location: 562 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(20) }, JumpIf { condition: Relative(19), location: 522 }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(21) } }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(22), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(23), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(24), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 533 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U16, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Jump { location: 527 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U16, lhs: Relative(5), rhs: Relative(21) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(3) }, JumpIf { condition: Relative(25), location: 540 }, Jump { location: 542 }, Mov { destination: Relative(26), source: Relative(32) }, Jump { location: 544 }, Mov { destination: Relative(26), source: Relative(3) }, Jump { location: 544 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(23) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(23) }, JumpIf { condition: Relative(27), location: 550 }, Jump { location: 552 }, Mov { destination: Relative(28), source: Relative(32) }, Jump { location: 554 }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 554 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U16, lhs: Relative(26), rhs: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Xor, bit_size: U1, lhs: Relative(25), rhs: Relative(27) }, JumpIf { condition: Relative(29), location: 558 }, Jump { location: 560 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(21) }, Jump { location: 564 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, Jump { location: 564 }, Mov { destination: Relative(1), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 569 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 575 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "rdnLbhRHFIDhd5m1F111rsWrRAgZGCJLlkGOHSlCfvfU6a7fIYtserLh/MacD9/KPdPz8/L1+vn1908PT9++/3H58NvPy+fnh8fHh98/PX7/cv/y8P1p/u3Py1Z/9Hb50O4uvR9DjqHHsGP4MeLyoc+Rxxj7kO0Y7RhTkTmmonPoMewYfow4xlRsjqn43UW3Y7Rj9GNMJeaYSs5hx/BjxDGmMuaYStvuLrat2dbsa8qauqat6WvGmrnm8nx5vjwvb34lXNbUNW1NXzPWzDXHMWNbs625vFheLC+WF8uL5cXyYnm5vFxeLi+Xl8vL5eXycnm5vFzeWN5Y3ljeWN5Y3ljeWN5Y3ljeWF7bNqIRnRBCCSOcCCIJ5IbckBtyQ27IDbkhN+RWcq8YK/pGNKITJUuFEkaUrBVBJFHy/FlvdVaOaETJXiGEEkY4UXJUJDFW1Pk5ohGdEEIJI5xAVmRFNmRDNmRDNmRDNmRDNmRDdmRHdmRHdmRHdmRHdmRHDuRADuRADuRADuRADuRATuRETuRETuRETuRETuRE3o9eVjSiE0IoUfKocCKIJMYRfT+DezSiE0IoYYQTQSSB3JAbckNuyA25ITfkhtyQG3JH7sgduSN35I7ckTtyR+7IgizIgizIgizIgizIgizIiqzIiqzIiqzIiqzIiqzIhmzIdQb7ViGEEkY4Udft/WqexFhRZ/CIRnRCCCWMcALZkesM9np0UGfwiEaULBVCKGGEEyVrRRJjRZ3BIxrRCSGUMKJkqwgiibGizuARJXtFJ4RQwoiSoyKIJMYRUmfwiJKzohNCKFHyqHAiiCTGijqDslU0ohNCKGGEE0EkMVZ05I7ckTtyR+7IHbkjd+SOLMiCLMiCLMiCLMiCLMiCrMiKrMiKrMiKrMiKrMiKbMiGbMiGbMiGbMiGbMiG7MiO7Mh1BqVVKGGEE0GUXI/B6wzuUWfwiEZ0QggljHAiCORATuRETuRETuRETuRETuREHsgDeSAP5IE8kAfyQB7IY8m6bUQjOiGEEkY4EUQSyA25ITfkhtyQG3JDbsgNuSF35P0MSkUnhFDCiJK1IogkSrZ6brURjeiEELq29jO4B7IgC/J+ButZ234G92hEJ4RQwggngkgC2ZAN2ZAN2ZAN2ZAN2ZAN2ZEd2ZEd2ZEd2ZEd2ZEdOZADOZADOZADOZADOZADOZETOZETOZETOZETOZETeSAP5IE8kAfyQN7PYD1f38/gHkmMI2w/g1nRiE4IoYQRTgSRxFjRkBtyQ97P4KhQwggngkhirNjP4B6N6ARyR+7IHbkjd+SOLMiCLMiCLMiCLMiCLMiCrMiKrMiKrMiKrMiKrMiKbMiGbMiGbMiGbMiGbMiG7MiO7MiO7Mh1BnW/g+NEEFnx9nZ34WbXp5fn67Xudf1y92veE/tx/3x9erl8eHp9fLy7/Hn/+Lr/oz9+3D/t8+X+eb53ktenr3NO8NvD47Xq7e6f7e2/V+etjbU871K8r9up/TyzX5eOY1/GbftqZ/bHWPvzeeVt+62f2O/1+PzYl1v3z3z9pZ5M7Pvzce2N+3Fmv433/bxtX/XE/nzwtPbn46Az+8LnPx9CnNm3931vN+6fOT/zOsx+3rg/zpyfeXVc+/OKd9t+P/P1s/ffH/MydmZfg32T2/Z9O7Mf759/nvr8Q/+3/TPn37dc+37q/PnW3/f1xv0zP/8ufP9c5cb9M7//3Dl/HtuN+35mf/Dxx6nr5y/77czHH8rPf1jctu9nvn8R7x9/jNv202/bH/8+vx/nW/dfHp7/9XrqW0nPD/efH6/rzW+vT19+ee/LXz94D6/H/nj+/uX69fX5WtI/L8rWs5nfLLY7C/tYL07tb467+Xvk41v9938D",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u64, z: i16, u: i64) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n    // regression tests for issue #8176, superseded by issue #8791\n    assert(u >> (x as i64 - 2) == -1);\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> a == 32);\n    a = -a;\n    assert(a << 6 == -64);\n    assert(a << -a == -2);\n\n    assert(x >> (x - 1) == 0);\n\n    assert_eq(z >> 3, -97);\n\n    assert(z >> 14 == -1);\n    let rhs = (if x as i16 > 14 { 14 } else { x as i16 });\n    assert(z >> rhs == -1);\n    assert(-z >> rhs == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
