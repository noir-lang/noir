---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 2",
    "private parameters indices : [0, 1, 2]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: []",
    "",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 17 }, Call { location: 18 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 258 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 64 }, BinaryIntOp { destination: Relative(5), op: Shl, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(7), location: 26 }, Call { location: 264 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 128 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 31 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(5), op: Shr, bit_size: U32, lhs: Relative(4), rhs: Relative(2) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 32 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 37 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 64 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 42 }, Call { location: 264 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 47 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 53 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Cast { destination: Relative(4), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(7), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(7), bit_size: Integer(U64) }, Cast { destination: Relative(7), source: Relative(5), bit_size: Integer(U8) }, Const { destination: Relative(8), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(7), rhs: Relative(8) }, Mov { destination: Relative(8), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U8, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 65 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(8), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(12), rhs: Relative(7) }, JumpIf { condition: Relative(11), location: 70 }, Jump { location: 110 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(16), source: Relative(8), bit_size: Integer(U32) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 81 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U8, lhs: Relative(15), rhs: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Jump { location: 75 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U8, lhs: Relative(7), rhs: Relative(13) }, Const { destination: Relative(22), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U8, lhs: Relative(22), rhs: Relative(10) }, Const { destination: Relative(23), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U8, lhs: Relative(23), rhs: Relative(10) }, JumpIf { condition: Relative(17), location: 88 }, Jump { location: 90 }, Mov { destination: Relative(18), source: Relative(24) }, Jump { location: 92 }, Mov { destination: Relative(18), source: Relative(10) }, Jump { location: 92 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U8, lhs: Relative(22), rhs: Relative(15) }, Const { destination: Relative(23), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U8, lhs: Relative(23), rhs: Relative(15) }, JumpIf { condition: Relative(19), location: 98 }, Jump { location: 100 }, Mov { destination: Relative(20), source: Relative(24) }, Jump { location: 102 }, Mov { destination: Relative(20), source: Relative(15) }, Jump { location: 102 }, BinaryIntOp { destination: Relative(10), op: Div, bit_size: U8, lhs: Relative(18), rhs: Relative(20) }, BinaryIntOp { destination: Relative(21), op: Xor, bit_size: U1, lhs: Relative(17), rhs: Relative(19) }, JumpIf { condition: Relative(21), location: 106 }, Jump { location: 108 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(10), op: Sub, bit_size: U8, lhs: Relative(22), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Sub, bit_size: U8, lhs: Relative(10), rhs: Relative(13) }, Jump { location: 112 }, BinaryIntOp { destination: Relative(10), op: Shr, bit_size: U8, lhs: Relative(7), rhs: Relative(8) }, Jump { location: 112 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(10), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 117 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Const { destination: Relative(11), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U8, lhs: Relative(11), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 121 }, Jump { location: 161 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(16), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 132 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U8, lhs: Relative(15), rhs: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Jump { location: 126 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U8, lhs: Relative(7), rhs: Relative(13) }, Const { destination: Relative(22), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U8, lhs: Relative(22), rhs: Relative(8) }, Const { destination: Relative(23), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U8, lhs: Relative(23), rhs: Relative(8) }, JumpIf { condition: Relative(17), location: 139 }, Jump { location: 141 }, Mov { destination: Relative(18), source: Relative(24) }, Jump { location: 143 }, Mov { destination: Relative(18), source: Relative(8) }, Jump { location: 143 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U8, lhs: Relative(22), rhs: Relative(15) }, Const { destination: Relative(23), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U8, lhs: Relative(23), rhs: Relative(15) }, JumpIf { condition: Relative(19), location: 149 }, Jump { location: 151 }, Mov { destination: Relative(20), source: Relative(24) }, Jump { location: 153 }, Mov { destination: Relative(20), source: Relative(15) }, Jump { location: 153 }, BinaryIntOp { destination: Relative(8), op: Div, bit_size: U8, lhs: Relative(18), rhs: Relative(20) }, BinaryIntOp { destination: Relative(21), op: Xor, bit_size: U1, lhs: Relative(17), rhs: Relative(19) }, JumpIf { condition: Relative(21), location: 157 }, Jump { location: 159 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U8, lhs: Relative(22), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(13) }, Jump { location: 163 }, BinaryIntOp { destination: Relative(8), op: Shr, bit_size: U8, lhs: Relative(7), rhs: Relative(2) }, Jump { location: 163 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U8, lhs: Relative(8), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 168 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Const { destination: Relative(7), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U8, lhs: Relative(7), rhs: Relative(4) }, Mov { destination: Relative(4), source: Relative(8) }, Cast { destination: Relative(7), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(8), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(8) }, Not { destination: Relative(13), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(13) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U1, lhs: Relative(7), rhs: Relative(13) }, JumpIf { condition: Relative(8), location: 180 }, Call { location: 267 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 7 }, BinaryIntOp { destination: Relative(8), op: Shl, bit_size: U8, lhs: Relative(4), rhs: Relative(7) }, Mov { destination: Relative(7), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 187 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U8, lhs: Relative(4), rhs: Relative(2) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(8), location: 192 }, Call { location: 264 }, Mov { destination: Relative(2), source: Relative(7) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 198 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Cast { destination: Relative(2), source: Relative(5), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(1), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U64, lhs: Relative(4), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 205 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Integer(U8), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 210 }, Jump { location: 250 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(9), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 221 }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U16, lhs: Relative(8), rhs: Relative(7) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Jump { location: 215 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(6) }, Const { destination: Relative(17), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(2) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U16, lhs: Relative(18), rhs: Relative(2) }, JumpIf { condition: Relative(10), location: 228 }, Jump { location: 230 }, Mov { destination: Relative(13), source: Relative(19) }, Jump { location: 232 }, Mov { destination: Relative(13), source: Relative(2) }, Jump { location: 232 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(8) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U16, lhs: Relative(18), rhs: Relative(8) }, JumpIf { condition: Relative(14), location: 238 }, Jump { location: 240 }, Mov { destination: Relative(15), source: Relative(19) }, Jump { location: 242 }, Mov { destination: Relative(15), source: Relative(8) }, Jump { location: 242 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(13), rhs: Relative(15) }, BinaryIntOp { destination: Relative(16), op: Xor, bit_size: U1, lhs: Relative(10), rhs: Relative(14) }, JumpIf { condition: Relative(16), location: 246 }, Jump { location: 248 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(17), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(6) }, Jump { location: 252 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 252 }, Const { destination: Relative(1), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 257 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 263 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    ""
  ],
  "debug_symbols": "ldrfauJAFIDxd8m1FzPnz8wcX2VZim1tEUSLtQtL6buvLk2RZDB8N8JIfuTiIwROzufwvH38eH3YHV6O78P61+ewPz5tzrvj4XL6/FoNj6fdfr97fbj9e0jXnxz/r39/2xyux/fz5nQe1uGrYXt4HtY5yYW/7PbbYe3p6/dqkERBpkAoUAqMAqegLICYgkpBoyAg0ERBt3QWHYWmqZAlUaZCsTAsHIuCRbd3jjSKmImGRVBhCYuMhdwXknQqFAvDwrEoWHSbS66jkJloS2L6DFpQ4QmLjIVg0W0ukUcRbSq6zVXGHip1KhyLgkW3udqPsOnz4Q2LoKKkBeE2FRkLwUKxMCz6zUsbRZ2JgkXFomERVNSERcZCsFAsDAvcvOLmFTevuHnFzRtu3nDzhps33Lzh5g03b7h5w80bbt5w88DNAzcP3Dxw88DNAzcP3Dxw88DNAzfPKXGSORFOlBPjxDkpnFROGie8fub1M6+fl+q3NCPKiXHinBRO+vXDvomlOWmcBCb9idx9kjkRTpQT48Q5KZzw+sLrC6+vvL7y+srrK6+vvL7y+srrK6+vvL7y+sbrG69vvL7x+sbrG69vvL7x+sbrG6/vvL7z+s7rO6/vvL7z+s7rO6/vvL7z+oXXL7x+4fXLYv0yI8aJc1I4qZx069vPsNtyzEhg0h/n3SeZE+FEOTFOnJPCSeWE16+8fn+wZyoj0TYjmRPhRBfI7FtE7g/37hPnpHDSr1/GrwtW5qRxEpj0R3z3SeZEONEFUmVGjBPnpHBSOenXj3ENwOfvyv6sz1r9IXlCpD/ruyVlRjInwolyYpx067uMb2SfbZlIf9Z3n1ROGieBSX/Wd59kToQT5cQ44fUzr595/czrZ15feH3h9YXXF15feH3h9YXXF15feH3h9ZXXV15feX3l9ZXXV15feX3l9ZXXV17feH3j9Y3XN17feH3j9Y3XN17feH3j9Z3Xd17fF+v7jCgnxolzUhj5upz+bE67zeN++703//JxeLpZoz//fdtONurfTsen7fPHaXvdrb9Zq7/WEm8rKfr7+lnveiz1cozLfS73+gc=",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u8, z: i16) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> y == 32);\n    a = -a;\n    assert(a << 7 == -128);\n    assert(a << y == -2);\n\n    assert(x >> (x as u8) == 0);\n\n    assert_eq(z >> 3, -97);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
