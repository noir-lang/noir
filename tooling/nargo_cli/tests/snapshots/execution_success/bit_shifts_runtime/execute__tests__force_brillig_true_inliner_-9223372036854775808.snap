---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U8) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 525 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 64 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U32, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(7), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(8), location: 28 }, Call { location: 531 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 33 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U32, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 32 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(8), location: 39 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(5), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 64 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 44 }, Call { location: 531 }, Const { destination: Relative(6), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 49 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(5), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(6), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 55 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Const { destination: Relative(10), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U64, lhs: Relative(10), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 62 }, Jump { location: 109 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 64 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(12) }, JumpIf { condition: Relative(11), location: 66 }, Jump { location: 106 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U64), value: 2 }, Const { destination: Relative(15), bit_size: Integer(U64), value: 1 }, Cast { destination: Relative(16), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 77 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U64, lhs: Relative(15), rhs: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Jump { location: 71 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(13) }, Const { destination: Relative(22), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U64, lhs: Relative(22), rhs: Relative(8) }, Const { destination: Relative(23), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U64, lhs: Relative(23), rhs: Relative(8) }, JumpIf { condition: Relative(17), location: 84 }, Jump { location: 86 }, Mov { destination: Relative(18), source: Relative(24) }, Jump { location: 88 }, Mov { destination: Relative(18), source: Relative(8) }, Jump { location: 88 }, Const { destination: Relative(22), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U64, lhs: Relative(22), rhs: Relative(15) }, Const { destination: Relative(23), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U64, lhs: Relative(23), rhs: Relative(15) }, JumpIf { condition: Relative(19), location: 94 }, Jump { location: 96 }, Mov { destination: Relative(20), source: Relative(24) }, Jump { location: 98 }, Mov { destination: Relative(20), source: Relative(15) }, Jump { location: 98 }, BinaryIntOp { destination: Relative(8), op: Div, bit_size: U64, lhs: Relative(18), rhs: Relative(20) }, BinaryIntOp { destination: Relative(21), op: Xor, bit_size: U1, lhs: Relative(17), rhs: Relative(19) }, JumpIf { condition: Relative(21), location: 102 }, Jump { location: 104 }, Const { destination: Relative(22), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(22), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(8), rhs: Relative(13) }, Jump { location: 108 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 18446744073709551615 }, Jump { location: 108 }, Jump { location: 111 }, BinaryIntOp { destination: Relative(8), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, Jump { location: 111 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U64, lhs: Relative(8), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 116 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(9), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U16, lhs: Relative(9), rhs: Relative(3) }, JumpIf { condition: Relative(8), location: 120 }, Jump { location: 167 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(13) }, JumpIf { condition: Relative(11), location: 124 }, Jump { location: 164 }, Const { destination: Relative(14), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(15), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(17), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 135 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U16, lhs: Relative(16), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Jump { location: 129 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(14) }, Const { destination: Relative(23), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U16, lhs: Relative(23), rhs: Relative(4) }, Const { destination: Relative(24), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U16, lhs: Relative(24), rhs: Relative(4) }, JumpIf { condition: Relative(18), location: 142 }, Jump { location: 144 }, Mov { destination: Relative(19), source: Relative(25) }, Jump { location: 146 }, Mov { destination: Relative(19), source: Relative(4) }, Jump { location: 146 }, Const { destination: Relative(23), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U16, lhs: Relative(23), rhs: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U16, lhs: Relative(24), rhs: Relative(16) }, JumpIf { condition: Relative(20), location: 152 }, Jump { location: 154 }, Mov { destination: Relative(21), source: Relative(25) }, Jump { location: 156 }, Mov { destination: Relative(21), source: Relative(16) }, Jump { location: 156 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(19), rhs: Relative(21) }, BinaryIntOp { destination: Relative(22), op: Xor, bit_size: U1, lhs: Relative(18), rhs: Relative(20) }, JumpIf { condition: Relative(22), location: 160 }, Jump { location: 162 }, Const { destination: Relative(23), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(23), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(14) }, Jump { location: 166 }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, Jump { location: 166 }, Jump { location: 169 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(6) }, Jump { location: 169 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U16, lhs: Relative(4), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 174 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Cast { destination: Relative(4), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(11), source: Relative(5), bit_size: Integer(U8) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(14), op: Shl, bit_size: U8, lhs: Relative(11), rhs: Relative(5) }, Mov { destination: Relative(5), source: Relative(14) }, Const { destination: Relative(14), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(14) }, JumpIf { condition: Relative(15), location: 184 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(17), rhs: Relative(11) }, JumpIf { condition: Relative(16), location: 189 }, Jump { location: 236 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U8, lhs: Relative(5), rhs: Relative(19) }, JumpIf { condition: Relative(18), location: 193 }, Jump { location: 233 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(23), source: Relative(5), bit_size: Integer(U32) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 204 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U8, lhs: Relative(22), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Jump { location: 198 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U8, lhs: Relative(11), rhs: Relative(20) }, Const { destination: Relative(29), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U8, lhs: Relative(29), rhs: Relative(15) }, Const { destination: Relative(30), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(31), op: Sub, bit_size: U8, lhs: Relative(30), rhs: Relative(15) }, JumpIf { condition: Relative(24), location: 211 }, Jump { location: 213 }, Mov { destination: Relative(25), source: Relative(31) }, Jump { location: 215 }, Mov { destination: Relative(25), source: Relative(15) }, Jump { location: 215 }, Const { destination: Relative(29), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U8, lhs: Relative(29), rhs: Relative(22) }, Const { destination: Relative(30), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(31), op: Sub, bit_size: U8, lhs: Relative(30), rhs: Relative(22) }, JumpIf { condition: Relative(26), location: 221 }, Jump { location: 223 }, Mov { destination: Relative(27), source: Relative(31) }, Jump { location: 225 }, Mov { destination: Relative(27), source: Relative(22) }, Jump { location: 225 }, BinaryIntOp { destination: Relative(15), op: Div, bit_size: U8, lhs: Relative(25), rhs: Relative(27) }, BinaryIntOp { destination: Relative(28), op: Xor, bit_size: U1, lhs: Relative(24), rhs: Relative(26) }, JumpIf { condition: Relative(28), location: 229 }, Jump { location: 231 }, Const { destination: Relative(29), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U8, lhs: Relative(29), rhs: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U8, lhs: Relative(15), rhs: Relative(20) }, Jump { location: 235 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 255 }, Jump { location: 235 }, Jump { location: 238 }, BinaryIntOp { destination: Relative(15), op: Shr, bit_size: U8, lhs: Relative(11), rhs: Relative(5) }, Jump { location: 238 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U8, lhs: Relative(15), rhs: Relative(5) }, JumpIf { condition: Relative(16), location: 243 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Const { destination: Relative(16), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(16), rhs: Relative(11) }, JumpIf { condition: Relative(15), location: 247 }, Jump { location: 294 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(20) }, JumpIf { condition: Relative(18), location: 251 }, Jump { location: 291 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(24), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 262 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U8, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Jump { location: 256 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U8, lhs: Relative(11), rhs: Relative(21) }, Const { destination: Relative(30), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U8, lhs: Relative(30), rhs: Relative(5) }, Const { destination: Relative(31), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U8, lhs: Relative(31), rhs: Relative(5) }, JumpIf { condition: Relative(25), location: 269 }, Jump { location: 271 }, Mov { destination: Relative(26), source: Relative(32) }, Jump { location: 273 }, Mov { destination: Relative(26), source: Relative(5) }, Jump { location: 273 }, Const { destination: Relative(30), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U8, lhs: Relative(30), rhs: Relative(23) }, Const { destination: Relative(31), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U8, lhs: Relative(31), rhs: Relative(23) }, JumpIf { condition: Relative(27), location: 279 }, Jump { location: 281 }, Mov { destination: Relative(28), source: Relative(32) }, Jump { location: 283 }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 283 }, BinaryIntOp { destination: Relative(5), op: Div, bit_size: U8, lhs: Relative(26), rhs: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Xor, bit_size: U1, lhs: Relative(25), rhs: Relative(27) }, JumpIf { condition: Relative(29), location: 287 }, Jump { location: 289 }, Const { destination: Relative(30), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(30), rhs: Relative(5) }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(21) }, Jump { location: 293 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 255 }, Jump { location: 293 }, Jump { location: 296 }, BinaryIntOp { destination: Relative(5), op: Shr, bit_size: U8, lhs: Relative(11), rhs: Relative(2) }, Jump { location: 296 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(11) }, JumpIf { condition: Relative(15), location: 301 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(4) }, Mov { destination: Relative(4), source: Relative(11) }, Cast { destination: Relative(5), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(11), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(11) }, Not { destination: Relative(18), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(5), rhs: Relative(11) }, BinaryIntOp { destination: Relative(5), op: Mul, bit_size: U1, lhs: Relative(15), rhs: Relative(18) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U1, lhs: Relative(5), rhs: Relative(18) }, JumpIf { condition: Relative(11), location: 313 }, Call { location: 534 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 7 }, BinaryIntOp { destination: Relative(11), op: Shl, bit_size: U8, lhs: Relative(4), rhs: Relative(5) }, Mov { destination: Relative(5), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(14) }, JumpIf { condition: Relative(11), location: 320 }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(15) } }, BinaryIntOp { destination: Relative(5), op: Shl, bit_size: U8, lhs: Relative(4), rhs: Relative(2) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 325 }, Call { location: 531 }, Mov { destination: Relative(2), source: Relative(5) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 331 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(6) }, Const { destination: Relative(1), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 337 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(1), bit_size: Integer(U8), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 342 }, Jump { location: 389 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(7), location: 346 }, Jump { location: 386 }, Const { destination: Relative(14), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(15), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(21), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 357 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U16, lhs: Relative(18), rhs: Relative(15) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Jump { location: 351 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(14) }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(2) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, JumpIf { condition: Relative(22), location: 364 }, Jump { location: 366 }, Mov { destination: Relative(23), source: Relative(29) }, Jump { location: 368 }, Mov { destination: Relative(23), source: Relative(2) }, Jump { location: 368 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(18) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(18) }, JumpIf { condition: Relative(24), location: 374 }, Jump { location: 376 }, Mov { destination: Relative(25), source: Relative(29) }, Jump { location: 378 }, Mov { destination: Relative(25), source: Relative(18) }, Jump { location: 378 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(23), rhs: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Xor, bit_size: U1, lhs: Relative(22), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 382 }, Jump { location: 384 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(27), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(14) }, Jump { location: 388 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65535 }, Jump { location: 388 }, Jump { location: 391 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 391 }, Const { destination: Relative(1), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(4), location: 396 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(1), bit_size: Integer(U8), value: 16 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 401 }, Jump { location: 448 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(1), rhs: Relative(15) }, JumpIf { condition: Relative(14), location: 405 }, Jump { location: 445 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(22), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(23), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 416 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U16, lhs: Relative(22), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Jump { location: 410 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(18) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U16, lhs: Relative(29), rhs: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(31), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(2) }, JumpIf { condition: Relative(24), location: 423 }, Jump { location: 425 }, Mov { destination: Relative(25), source: Relative(31) }, Jump { location: 427 }, Mov { destination: Relative(25), source: Relative(2) }, Jump { location: 427 }, Const { destination: Relative(29), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U16, lhs: Relative(29), rhs: Relative(22) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(31), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(22) }, JumpIf { condition: Relative(26), location: 433 }, Jump { location: 435 }, Mov { destination: Relative(27), source: Relative(31) }, Jump { location: 437 }, Mov { destination: Relative(27), source: Relative(22) }, Jump { location: 437 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(25), rhs: Relative(27) }, BinaryIntOp { destination: Relative(28), op: Xor, bit_size: U1, lhs: Relative(24), rhs: Relative(26) }, JumpIf { condition: Relative(28), location: 441 }, Jump { location: 443 }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(18) }, Jump { location: 447 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65535 }, Jump { location: 447 }, Jump { location: 450 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 450 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(1), location: 454 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Const { destination: Relative(1), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(4), source: Relative(2) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U16) }, Cast { destination: Relative(8), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(8), rhs: Relative(3) }, Not { destination: Relative(8), source: Relative(14), bit_size: U1 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U1, lhs: Relative(14), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(3), location: 467 }, Call { location: 534 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U16, lhs: Relative(8), rhs: Relative(4) }, JumpIf { condition: Relative(3), location: 471 }, Jump { location: 518 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(18) }, JumpIf { condition: Relative(14), location: 475 }, Jump { location: 515 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(22), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(23), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(24), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 486 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U16, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Jump { location: 480 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(4), rhs: Relative(21) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(2) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(2) }, JumpIf { condition: Relative(25), location: 493 }, Jump { location: 495 }, Mov { destination: Relative(26), source: Relative(32) }, Jump { location: 497 }, Mov { destination: Relative(26), source: Relative(2) }, Jump { location: 497 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(23) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(23) }, JumpIf { condition: Relative(27), location: 503 }, Jump { location: 505 }, Mov { destination: Relative(28), source: Relative(32) }, Jump { location: 507 }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 507 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(26), rhs: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Xor, bit_size: U1, lhs: Relative(25), rhs: Relative(27) }, JumpIf { condition: Relative(29), location: 511 }, Jump { location: 513 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(21) }, Jump { location: 517 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65535 }, Jump { location: 517 }, Jump { location: 520 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(4), rhs: Relative(6) }, Jump { location: 520 }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 524 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 530 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pdnBThw5EIDhd5kzhy6Xq1zmVaIoImQSISFAE1hpFfHu62r7J8lhLz2X1E9IfUENbprh1+nb+evbjy8PT9+ff55uP/06fb08PD4+/Pjy+Hx/9/rw/DT+9tdpyz+KnG7l5lTKHDpHncPm8DnaHHG6LWP0feg2h8xR5hiKjjGUOobN4XO0OWKOodjNqW5zyBxlDp1jKD6GzeFztDlijqG0m5MNJcaQOcocOkedYyh9DJ+jzTEU2cbsc/q2pqxZ1tQ165q2pq/Z1lyeL68try2vLa8try2vLa8try2vLa8tL5YXy4vlxfJiebG8WF4sL5YXy+vL68vry+vL68vry+vL68vry+vLk20jhCiEEpUwwolGBIEsyJKyZBRCiUoYkXLJaEQQfUXZCCEKoUQljEAuyAW5ICuyIiuyIiuyIiuyIiuyIlfkilyRK3JFrsgVuSJX5IpsyIZsyIZsyIZsyIZsyIbsyI7syI7syI7syI7syPspG3cb2Y/ZHkIUQomUa0bKlpGyZzQiiJTHfUX2A7eHEIVQIuXIMMKJRgTRV+xHbw8hCqEEckfuyB25I/cll20jhCiEEpUwwolGBIEsyIIsyIIsyIIsyIIsyIJckAtyQS7IBbkgF+SCXJALsiIrsiIrsiIrsiIr8n4Ge0ZfsZ/BPYQoxJDLllEJI5xoRBB9RZ7BGUIUAtmQDdmQDdmQDdmRHdmRHdmRHdmRHdmRHbkhN+SG3JAbckNuyA25ITfkQA7kQA7kQA7kQA7kQA7kjtyRO3JH7sgdOc9gycehPIMzgugzNM/gjJT3p6VCKFEJI5xoRBB9RZ7BGciCnGew5NNXnsEZRqScT115BmcE0VfkGSyWIUQhlKiEESl7RiOC6Cv2R8U9Um4ZKUeGEpUwwomUe0YQfUWewRlCFEKJShjhBHJFrsiGbMiGbMiGbMiGbMiGbMiO7MiO7MiO7MiO7MiO7MgNuSE35IbckBtyQ27IDbkhB3IgB3IgB3IgB3IgB3Igd+Q8g7plFEKJShgxZM3zlWdwRhB9Rs0zOEOIQihRCSOcaEQQyIIsyIIsyIIsyIIsyIIsyAW5IBfkglyQC3JBLsgFuSArsiIrsiIrsiIrsiIrsiJX5IpckStyRa7IFbkiV+SKnGdQS4YQhVAiZc0wwolGBNFX5BmcIUQhlEB2ZEfOM6g1I4i+Is/gDCEKoUQljHACuSE35EAO5EAO5EAO5EAO5EAO5I7ckTtyR+7IHbkjd+SO3Jds20YIUQglKmGEE40IAlmQBVmQBVmQBVmQBVmQBXk/g5YhRCFStvf3mxMvp3x5vZzP+WrKH6+vjFddXu4u56fX0+3T2+Pjzemfu8e3/R/9fLl72ufr3WW8d9zJzk/fxhzg94fHc9b7ze/t7f9Xx4/Ta3n8ZPyxbof225H9PKBzX+O6/VqP7PdY++Nnmev2RQ7sl3z4mft67f6R66/5yLbv66H/XyU+9suV+0c+/+Npin336/bbkY+/KtdvfNs6su+cn3HHP7IfH/vRr9vvR75+TDh/JlfuFz2yr439eu3+ketnzs3X/MjXjzXOr4VcuX/k4/eP+7dvV+6LHdlXrp8fun//uX/o43c+/970yv0j9y/vXL+2bVfuH7n/tcL1a6Vct6965f7f1+/zeOvu/uHy12+c3lO6PNx9fTyvN7+/Pd3/8d7Xf194D7+xerk835+/vV3OKf3+tVU++H2y8e3TdPucr+Pnm+Nubuqf3/O//w8=",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u8, z: i16, u: i64) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n    // regression tests for issue #8176, superseded by issue #8791\n    assert(u >> (x as u8) == -1);\n    assert(z >> (x as u8) == -1);\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> y == 32);\n    a = -a;\n    assert(a << 7 == -128);\n    assert(a << y == -2);\n\n    assert(x >> (x as u8) == 0);\n\n    assert_eq(z >> 3, -97);\n\n    assert(z >> 16 == -1);\n    assert(-z >> x as u8 == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
