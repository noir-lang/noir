---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 565 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U64, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(8), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(7), location: 27 }, Call { location: 571 }, Const { destination: Relative(7), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 32 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 38 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 43 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(7), location: 48 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, Mov { destination: Relative(6), source: Relative(9) }, Cast { destination: Relative(7), source: Relative(6), bit_size: Integer(U64) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U64, lhs: Relative(7), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(12), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(9), location: 62 }, Call { location: 574 }, Const { destination: Relative(11), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(11), rhs: Relative(4) }, JumpIf { condition: Relative(10), location: 66 }, Jump { location: 113 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U64, lhs: Relative(6), rhs: Relative(13) }, JumpIf { condition: Relative(12), location: 70 }, Jump { location: 110 }, Const { destination: Relative(14), bit_size: Integer(U64), value: 1 }, Const { destination: Relative(15), bit_size: Integer(U64), value: 2 }, Const { destination: Relative(16), bit_size: Integer(U64), value: 1 }, Cast { destination: Relative(17), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 81 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U64, lhs: Relative(16), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Jump { location: 75 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(14) }, Const { destination: Relative(23), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U64, lhs: Relative(23), rhs: Relative(9) }, Const { destination: Relative(24), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U64, lhs: Relative(24), rhs: Relative(9) }, JumpIf { condition: Relative(18), location: 88 }, Jump { location: 90 }, Mov { destination: Relative(19), source: Relative(25) }, Jump { location: 92 }, Mov { destination: Relative(19), source: Relative(9) }, Jump { location: 92 }, Const { destination: Relative(23), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U64, lhs: Relative(23), rhs: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U64, lhs: Relative(24), rhs: Relative(16) }, JumpIf { condition: Relative(20), location: 98 }, Jump { location: 100 }, Mov { destination: Relative(21), source: Relative(25) }, Jump { location: 102 }, Mov { destination: Relative(21), source: Relative(16) }, Jump { location: 102 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U64, lhs: Relative(19), rhs: Relative(21) }, BinaryIntOp { destination: Relative(22), op: Xor, bit_size: U1, lhs: Relative(18), rhs: Relative(20) }, JumpIf { condition: Relative(22), location: 106 }, Jump { location: 108 }, Const { destination: Relative(23), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U64, lhs: Relative(23), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U64, lhs: Relative(9), rhs: Relative(14) }, Jump { location: 112 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 18446744073709551615 }, Jump { location: 112 }, Jump { location: 115 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, Jump { location: 115 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 63 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U64, lhs: Relative(7), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 119 }, Call { location: 571 }, Mov { destination: Relative(4), source: Relative(9) }, Const { destination: Relative(6), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 125 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Cast { destination: Relative(6), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(7), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(7), bit_size: Integer(U64) }, Cast { destination: Relative(7), source: Relative(6), bit_size: Integer(U8) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(7), rhs: Relative(6) }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 139 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(6), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U8, lhs: Relative(12), rhs: Relative(7) }, JumpIf { condition: Relative(10), location: 144 }, Jump { location: 191 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(15) }, JumpIf { condition: Relative(14), location: 148 }, Jump { location: 188 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(19), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 159 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U8, lhs: Relative(18), rhs: Relative(17) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Jump { location: 153 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(7), rhs: Relative(16) }, Const { destination: Relative(25), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U8, lhs: Relative(25), rhs: Relative(9) }, Const { destination: Relative(26), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U8, lhs: Relative(26), rhs: Relative(9) }, JumpIf { condition: Relative(20), location: 166 }, Jump { location: 168 }, Mov { destination: Relative(21), source: Relative(27) }, Jump { location: 170 }, Mov { destination: Relative(21), source: Relative(9) }, Jump { location: 170 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(25), rhs: Relative(18) }, Const { destination: Relative(26), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U8, lhs: Relative(26), rhs: Relative(18) }, JumpIf { condition: Relative(22), location: 176 }, Jump { location: 178 }, Mov { destination: Relative(23), source: Relative(27) }, Jump { location: 180 }, Mov { destination: Relative(23), source: Relative(18) }, Jump { location: 180 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U8, lhs: Relative(21), rhs: Relative(23) }, BinaryIntOp { destination: Relative(24), op: Xor, bit_size: U1, lhs: Relative(20), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 184 }, Jump { location: 186 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(25), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(9), rhs: Relative(16) }, Jump { location: 190 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 255 }, Jump { location: 190 }, Jump { location: 193 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U8, lhs: Relative(7), rhs: Relative(6) }, Jump { location: 193 }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 199 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Const { destination: Relative(10), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(10), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 203 }, Jump { location: 250 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(16) }, JumpIf { condition: Relative(14), location: 207 }, Jump { location: 247 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(20), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 218 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U8, lhs: Relative(19), rhs: Relative(18) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Jump { location: 212 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U8, lhs: Relative(7), rhs: Relative(17) }, Const { destination: Relative(26), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U8, lhs: Relative(26), rhs: Relative(6) }, Const { destination: Relative(27), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(28), op: Sub, bit_size: U8, lhs: Relative(27), rhs: Relative(6) }, JumpIf { condition: Relative(21), location: 225 }, Jump { location: 227 }, Mov { destination: Relative(22), source: Relative(28) }, Jump { location: 229 }, Mov { destination: Relative(22), source: Relative(6) }, Jump { location: 229 }, Const { destination: Relative(26), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U8, lhs: Relative(26), rhs: Relative(19) }, Const { destination: Relative(27), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(28), op: Sub, bit_size: U8, lhs: Relative(27), rhs: Relative(19) }, JumpIf { condition: Relative(23), location: 235 }, Jump { location: 237 }, Mov { destination: Relative(24), source: Relative(28) }, Jump { location: 239 }, Mov { destination: Relative(24), source: Relative(19) }, Jump { location: 239 }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U8, lhs: Relative(22), rhs: Relative(24) }, BinaryIntOp { destination: Relative(25), op: Xor, bit_size: U1, lhs: Relative(21), rhs: Relative(23) }, JumpIf { condition: Relative(25), location: 243 }, Jump { location: 245 }, Const { destination: Relative(26), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(26), rhs: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(6), rhs: Relative(17) }, Jump { location: 249 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 255 }, Jump { location: 249 }, Jump { location: 252 }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U8, lhs: Relative(7), rhs: Relative(2) }, Jump { location: 252 }, Cast { destination: Relative(7), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 7 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 257 }, Call { location: 571 }, Mov { destination: Relative(4), source: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(9), location: 263 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Const { destination: Relative(4), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(4), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(6) }, Cast { destination: Relative(4), source: Relative(2), bit_size: Integer(U8) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(6) }, Not { destination: Relative(7), source: Relative(9), bit_size: U1 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(4), rhs: Relative(6) }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U1, lhs: Relative(9), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(7) }, JumpIf { condition: Relative(6), location: 275 }, Call { location: 574 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 6 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, Mov { destination: Relative(2), source: Relative(6) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 192 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 283 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 288 }, Call { location: 574 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 292 }, Call { location: 571 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 297 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 302 }, Jump { location: 349 }, Const { destination: Relative(9), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(7), location: 306 }, Jump { location: 346 }, Const { destination: Relative(14), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(19), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 317 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U16, lhs: Relative(18), rhs: Relative(17) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Jump { location: 311 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(14) }, Const { destination: Relative(25), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(4) }, JumpIf { condition: Relative(20), location: 324 }, Jump { location: 326 }, Mov { destination: Relative(21), source: Relative(27) }, Jump { location: 328 }, Mov { destination: Relative(21), source: Relative(4) }, Jump { location: 328 }, Const { destination: Relative(25), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U16, lhs: Relative(25), rhs: Relative(18) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(18) }, JumpIf { condition: Relative(22), location: 334 }, Jump { location: 336 }, Mov { destination: Relative(23), source: Relative(27) }, Jump { location: 338 }, Mov { destination: Relative(23), source: Relative(18) }, Jump { location: 338 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(21), rhs: Relative(23) }, BinaryIntOp { destination: Relative(24), op: Xor, bit_size: U1, lhs: Relative(20), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 342 }, Jump { location: 344 }, Const { destination: Relative(25), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(14) }, Jump { location: 348 }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, Jump { location: 348 }, Jump { location: 351 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 351 }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 357 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 14 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 362 }, Jump { location: 409 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(14), location: 366 }, Jump { location: 406 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(21), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 377 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U16, lhs: Relative(20), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Jump { location: 371 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(18) }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(4) }, JumpIf { condition: Relative(22), location: 384 }, Jump { location: 386 }, Mov { destination: Relative(23), source: Relative(29) }, Jump { location: 388 }, Mov { destination: Relative(23), source: Relative(4) }, Jump { location: 388 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(20) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(20) }, JumpIf { condition: Relative(24), location: 394 }, Jump { location: 396 }, Mov { destination: Relative(25), source: Relative(29) }, Jump { location: 398 }, Mov { destination: Relative(25), source: Relative(20) }, Jump { location: 398 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(23), rhs: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Xor, bit_size: U1, lhs: Relative(22), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 402 }, Jump { location: 404 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(18) }, Jump { location: 408 }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, Jump { location: 408 }, Jump { location: 411 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 411 }, Mov { destination: Relative(5), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(14), location: 417 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Cast { destination: Relative(14), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(14), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(5), bit_size: Integer(U16) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U16, lhs: Relative(2), rhs: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U16, lhs: Relative(1), rhs: Relative(19) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(14), rhs: Relative(18) }, Not { destination: Relative(14), source: Relative(5), bit_size: U1 }, Cast { destination: Relative(18), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(14), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U16, lhs: Relative(18), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U16, lhs: Relative(14), rhs: Relative(2) }, Const { destination: Relative(14), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(14), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 434 }, Jump { location: 481 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(19) }, JumpIf { condition: Relative(18), location: 438 }, Jump { location: 478 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(22), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(23), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 449 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U16, lhs: Relative(22), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(2) }, Jump { location: 443 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(20) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U16, lhs: Relative(29), rhs: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(31), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(2) }, JumpIf { condition: Relative(24), location: 456 }, Jump { location: 458 }, Mov { destination: Relative(25), source: Relative(31) }, Jump { location: 460 }, Mov { destination: Relative(25), source: Relative(2) }, Jump { location: 460 }, Const { destination: Relative(29), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U16, lhs: Relative(29), rhs: Relative(22) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(31), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(22) }, JumpIf { condition: Relative(26), location: 466 }, Jump { location: 468 }, Mov { destination: Relative(27), source: Relative(31) }, Jump { location: 470 }, Mov { destination: Relative(27), source: Relative(22) }, Jump { location: 470 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(25), rhs: Relative(27) }, BinaryIntOp { destination: Relative(28), op: Xor, bit_size: U1, lhs: Relative(24), rhs: Relative(26) }, JumpIf { condition: Relative(28), location: 474 }, Jump { location: 476 }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(20) }, Jump { location: 480 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65535 }, Jump { location: 480 }, Jump { location: 483 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 483 }, Cast { destination: Relative(5), source: Relative(1), bit_size: Integer(U16) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 15 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U16, lhs: Relative(5), rhs: Relative(18) }, JumpIf { condition: Relative(20), location: 488 }, Call { location: 571 }, Mov { destination: Relative(5), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 493 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(8), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U16, lhs: Relative(8), rhs: Relative(3) }, Not { destination: Relative(8), source: Relative(18), bit_size: U1 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(18), rhs: Relative(8) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(8) }, JumpIf { condition: Relative(4), location: 506 }, Call { location: 574 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(8), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 510 }, Jump { location: 557 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(20) }, JumpIf { condition: Relative(18), location: 514 }, Jump { location: 554 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(22), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(23), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(24), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 525 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U16, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Jump { location: 519 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U16, lhs: Relative(5), rhs: Relative(21) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(3) }, JumpIf { condition: Relative(25), location: 532 }, Jump { location: 534 }, Mov { destination: Relative(26), source: Relative(32) }, Jump { location: 536 }, Mov { destination: Relative(26), source: Relative(3) }, Jump { location: 536 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(23) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(23) }, JumpIf { condition: Relative(27), location: 542 }, Jump { location: 544 }, Mov { destination: Relative(28), source: Relative(32) }, Jump { location: 546 }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 546 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U16, lhs: Relative(26), rhs: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Xor, bit_size: U1, lhs: Relative(25), rhs: Relative(27) }, JumpIf { condition: Relative(29), location: 550 }, Jump { location: 552 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(21) }, Jump { location: 556 }, Const { destination: Relative(3), bit_size: Integer(U16), value: 65535 }, Jump { location: 556 }, Jump { location: 559 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, Jump { location: 559 }, Mov { destination: Relative(1), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 564 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 570 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pdnPbhNJEIDxd/E5h6nq+tPNqyCEAhgUKQpRSFZaobz7dnn6C+Gwl/Fl6/OG+iEcd2Zi/z59O395+fH57uH7z1+nDx9/n7483d3f3/34fP/z6+3z3c+H+X9/n7b6j8rpg9ycVPfR9mH78H3EPvL0Qefo+xiX0bZ9yD6m0uaYis1h+/B9xD5yH1PxOaYSNyfb9iH70H1MJeeYSp/D9xH7yH1MZcwxFdluTr6tKWvqmm1NW9PXjDVzzb7m8mJ5sbwobz4T0da0NX3NWDPX7GuOfea2pqy5vFxeLi+Xl8vL5eXycnl9eX15fXl9eX15fXl9eX15fXl9eWN5Y3ljeWN5Y3ljeWN5Y3ljeWN5sm2EEEo0wggngkiiE8iCLMiCLMiCLMiCLMiCLMhaslYIoUQjjCi5VQSRRMlWMVbUWdmjZK9QohElR4UTQSTRiZLnEZE6P3sIoUQjjHAiiCQ6gezIjuzIjuzIjuzIjuzIjhzIgRzIgRzIgRzIgRzIgZzIiZzIiZzIiZzIiZzIidyRO3JH7sgduSN35I7ckTvyQB7IA3kgX45fr3AiiCQ6UfL82aiXM3gJIZRohBFOBJFEJ5AFWZAFWZAFWZAFWZAFWZAVWZEVWZEVWZEVWZEVWZEbckNuyA25ITfkhtyQG3JDNmRDNmRDNmRDNmRDNmRDdmRHdmRHdmRHdmRHrjOoW8VYUWdwDyGUmLJeLv5GOBFEEp0YK+oM7iGEEsiJXGdQ656izuAeSZTcKsaKOoN7CKFEyVZhhBNBJFGyV4wVdQb3EKLkqGiEEU4EUXJWdGLs0eoM7iGEEo0wwokgkugEsiALsiALsiALsiALsiALsiIrsiIrsiIrsiIrsiIrckNuyA25ITfkhtyQG3JDbsiGbMiGbMiGbMiGbMiGbMiO7Mh1BrVXNMIIJ4IoeVR0Yqy4nMFLCKFEI4xwIgjkQA7kRE7kRE7kRE7kRE7kRE7kjtyRO3JH7sgduSN35I7ckQfyQB7IA3kgD+SBPJAH8liybRshhBKNMMKJIJLoBLIgC3KdwbZVNMIIJ4KYcpOKTowVdQabVgihRCOMcLaCQFZkRa4z2FqFEEo0wggngkiiE2OFIRuyIRuyIRuyIRuyIRuyIzuyIzuyIzuyIzuyIztyIAdyIAdyIAdyIAdyIAdyIidyIidyIidyIidyIidyR+7IHbkjd+SO3JE7ckeuM9isfpveCCGUKNkrjHAiiCQ6MfbwOoN7CKFEI4xwouSoSKITY0WdwT2EUKIRRjiBLMiCLMiKrMiKrMiKrMiKrMiKrMgNuSE35IbckBtyQ27IDbkhG7IhG7IhG7IhG7IhG7IhO7IjO7IjO7IjO7IjO7IjX85gVgihRMn5+npz4v2rz89P53O9ffXuDa35Ntfj7dP54fn04eHl/v7m9M/t/cvlD/16vH24zOfbp/nV+UP3/PBtzgl+v7s/V73e/Nne/n91vluxlucbD2/rfmi/H9mvn/T7fhvX7Zsf2R9j7c9fFa/bFz2wr3Wnve+3a/ePPP+tfi247M9b1Sv388i+jLf9ft2+2YH9edOz9uf9y5H91tk/9Pqb1272w67bzyOvn3n9ZH9cu3/k++fC+XW5cl+PPH/eeP36odfvvH6w73Hdfhw5f/H27w858vqLLd7247p9PXL9iMb5i0Pn592+b0f2g+9/HDo/7/ePvH7j7fqRW163f+j6k5bsu1+3H0e+/5k8f5l53X63K/f/vv/4NB/dfr17+usjxteSnu5uv9yf18PvLw9f3331+d9HvsJHlI9PP7+ev708nUv68zll3eB/9Pny8dw+1ec19TBtPoxPr/XX/wc=",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u64, z: i16, u: i64) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n    // regression tests for issue #8176, superseded by issue #8791\n    assert(u >> (x as i64 - 2) == -1);\n \n\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> a == 32);\n    a = -a;\n    assert(a << 6 == -64);\n    //assert(a << a == -2);\n\n    assert(x >> (x-1) == 0);\n\n    assert_eq(z >> 3, -97);\n\n    assert(z >> 14 == -1);\n    let rhs = (if x as i16 > 14 {14} else {x as i16});\n    assert(z >> rhs == -1);\n    assert(-z >> rhs == 0);\n}\n\n#[test]\nfn toto() -> u32 {\n    8 << 2\n}",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
