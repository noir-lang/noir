---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 574 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U64, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(7), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(6), location: 26 }, Call { location: 580 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(8), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 32 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 38 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 43 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 48 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(8), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, Mov { destination: Relative(6), source: Relative(9) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U64) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(12), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(9), location: 62 }, Call { location: 583 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 63 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 66 }, Call { location: 580 }, Const { destination: Relative(10), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U64, lhs: Relative(10), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 70 }, Jump { location: 117 }, Const { destination: Relative(12), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U64, lhs: Relative(6), rhs: Relative(12) }, JumpIf { condition: Relative(11), location: 74 }, Jump { location: 114 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U64), value: 2 }, Const { destination: Relative(15), bit_size: Integer(U64), value: 1 }, Cast { destination: Relative(16), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 85 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U64, lhs: Relative(15), rhs: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Jump { location: 79 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(13) }, Const { destination: Relative(22), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U64, lhs: Relative(22), rhs: Relative(8) }, Const { destination: Relative(23), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U64, lhs: Relative(23), rhs: Relative(8) }, JumpIf { condition: Relative(17), location: 92 }, Jump { location: 94 }, Mov { destination: Relative(18), source: Relative(24) }, Jump { location: 96 }, Mov { destination: Relative(18), source: Relative(8) }, Jump { location: 96 }, Const { destination: Relative(22), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U64, lhs: Relative(22), rhs: Relative(15) }, Const { destination: Relative(23), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U64, lhs: Relative(23), rhs: Relative(15) }, JumpIf { condition: Relative(19), location: 102 }, Jump { location: 104 }, Mov { destination: Relative(20), source: Relative(24) }, Jump { location: 106 }, Mov { destination: Relative(20), source: Relative(15) }, Jump { location: 106 }, BinaryIntOp { destination: Relative(8), op: Div, bit_size: U64, lhs: Relative(18), rhs: Relative(20) }, BinaryIntOp { destination: Relative(21), op: Xor, bit_size: U1, lhs: Relative(17), rhs: Relative(19) }, JumpIf { condition: Relative(21), location: 110 }, Jump { location: 112 }, Const { destination: Relative(22), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(22), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(8), rhs: Relative(13) }, Jump { location: 116 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 18446744073709551615 }, Jump { location: 116 }, Jump { location: 119 }, BinaryIntOp { destination: Relative(8), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, Jump { location: 119 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U64, lhs: Relative(8), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 124 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Cast { destination: Relative(6), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(8), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(8), bit_size: Integer(U64) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U8) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(8), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(11), location: 137 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Const { destination: Relative(6), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(13), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 142 }, Jump { location: 189 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(15) }, JumpIf { condition: Relative(14), location: 146 }, Jump { location: 186 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(19), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 157 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U8, lhs: Relative(18), rhs: Relative(17) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Jump { location: 151 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(8), rhs: Relative(16) }, Const { destination: Relative(25), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U8, lhs: Relative(25), rhs: Relative(9) }, Const { destination: Relative(26), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U8, lhs: Relative(26), rhs: Relative(9) }, JumpIf { condition: Relative(20), location: 164 }, Jump { location: 166 }, Mov { destination: Relative(21), source: Relative(27) }, Jump { location: 168 }, Mov { destination: Relative(21), source: Relative(9) }, Jump { location: 168 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(25), rhs: Relative(18) }, Const { destination: Relative(26), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U8, lhs: Relative(26), rhs: Relative(18) }, JumpIf { condition: Relative(22), location: 174 }, Jump { location: 176 }, Mov { destination: Relative(23), source: Relative(27) }, Jump { location: 178 }, Mov { destination: Relative(23), source: Relative(18) }, Jump { location: 178 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U8, lhs: Relative(21), rhs: Relative(23) }, BinaryIntOp { destination: Relative(24), op: Xor, bit_size: U1, lhs: Relative(20), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 182 }, Jump { location: 184 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(25), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(9), rhs: Relative(16) }, Jump { location: 188 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 255 }, Jump { location: 188 }, Jump { location: 191 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U8, lhs: Relative(8), rhs: Relative(6) }, Jump { location: 191 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(11), location: 196 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Cast { destination: Relative(6), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 7 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 201 }, Call { location: 580 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(14), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 205 }, Jump { location: 252 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(16), location: 209 }, Jump { location: 249 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(21), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 220 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U8, lhs: Relative(20), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Jump { location: 214 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(8), rhs: Relative(18) }, Const { destination: Relative(27), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(27), rhs: Relative(9) }, Const { destination: Relative(28), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U8, lhs: Relative(28), rhs: Relative(9) }, JumpIf { condition: Relative(22), location: 227 }, Jump { location: 229 }, Mov { destination: Relative(23), source: Relative(29) }, Jump { location: 231 }, Mov { destination: Relative(23), source: Relative(9) }, Jump { location: 231 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U8, lhs: Relative(27), rhs: Relative(20) }, Const { destination: Relative(28), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U8, lhs: Relative(28), rhs: Relative(20) }, JumpIf { condition: Relative(24), location: 237 }, Jump { location: 239 }, Mov { destination: Relative(25), source: Relative(29) }, Jump { location: 241 }, Mov { destination: Relative(25), source: Relative(20) }, Jump { location: 241 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U8, lhs: Relative(23), rhs: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Xor, bit_size: U1, lhs: Relative(22), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 245 }, Jump { location: 247 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(27), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(9), rhs: Relative(18) }, Jump { location: 251 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 255 }, Jump { location: 251 }, Jump { location: 254 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Jump { location: 254 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(9), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 259 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Const { destination: Relative(8), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(9) }, Cast { destination: Relative(9), source: Relative(2), bit_size: Integer(U8) }, Const { destination: Relative(11), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, Not { destination: Relative(6), source: Relative(16), bit_size: U1 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(6) }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(18), location: 271 }, Call { location: 583 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 6 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 192 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U8, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(18), location: 278 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Mov { destination: Relative(8), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(8), bit_size: Integer(U8) }, Not { destination: Relative(9), source: Relative(16), bit_size: U1 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(9) }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(9) }, JumpIf { condition: Relative(16), location: 287 }, Call { location: 583 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 290 }, Call { location: 580 }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(8) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U8, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(6), location: 296 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 301 }, Call { location: 583 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(2), location: 304 }, Call { location: 580 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 310 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 315 }, Jump { location: 362 }, Const { destination: Relative(9), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 319 }, Jump { location: 359 }, Const { destination: Relative(11), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(19), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 330 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U16, lhs: Relative(18), rhs: Relative(16) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Jump { location: 324 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(11) }, Const { destination: Relative(25), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(4) }, JumpIf { condition: Relative(20), location: 337 }, Jump { location: 339 }, Mov { destination: Relative(21), source: Relative(27) }, Jump { location: 341 }, Mov { destination: Relative(21), source: Relative(4) }, Jump { location: 341 }, Const { destination: Relative(25), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U16, lhs: Relative(25), rhs: Relative(18) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(18) }, JumpIf { condition: Relative(22), location: 347 }, Jump { location: 349 }, Mov { destination: Relative(23), source: Relative(27) }, Jump { location: 351 }, Mov { destination: Relative(23), source: Relative(18) }, Jump { location: 351 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(21), rhs: Relative(23) }, BinaryIntOp { destination: Relative(24), op: Xor, bit_size: U1, lhs: Relative(20), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 355 }, Jump { location: 357 }, Const { destination: Relative(25), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(11) }, Jump { location: 361 }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, Jump { location: 361 }, Jump { location: 364 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 364 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 369 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 14 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(8), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 374 }, Jump { location: 421 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(16) }, JumpIf { condition: Relative(11), location: 378 }, Jump { location: 418 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(21), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 389 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U16, lhs: Relative(20), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Jump { location: 383 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(18) }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(4) }, JumpIf { condition: Relative(22), location: 396 }, Jump { location: 398 }, Mov { destination: Relative(23), source: Relative(29) }, Jump { location: 400 }, Mov { destination: Relative(23), source: Relative(4) }, Jump { location: 400 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(20) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(20) }, JumpIf { condition: Relative(24), location: 406 }, Jump { location: 408 }, Mov { destination: Relative(25), source: Relative(29) }, Jump { location: 410 }, Mov { destination: Relative(25), source: Relative(20) }, Jump { location: 410 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(23), rhs: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Xor, bit_size: U1, lhs: Relative(22), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 414 }, Jump { location: 416 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(18) }, Jump { location: 420 }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, Jump { location: 420 }, Jump { location: 423 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 423 }, Const { destination: Relative(5), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U16, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(11), location: 428 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Cast { destination: Relative(11), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(4), source: Relative(11), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(4), bit_size: Integer(U16) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U16, lhs: Relative(2), rhs: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U16, lhs: Relative(1), rhs: Relative(19) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(18) }, Not { destination: Relative(11), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(18), source: Relative(4), bit_size: Integer(U16) }, Cast { destination: Relative(4), source: Relative(11), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U16, lhs: Relative(18), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U16, lhs: Relative(4), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U16, lhs: Relative(11), rhs: Relative(2) }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U16) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 15 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 446 }, Call { location: 580 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 450 }, Jump { location: 497 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(18) }, JumpIf { condition: Relative(11), location: 454 }, Jump { location: 494 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(22), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 465 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U16, lhs: Relative(21), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Jump { location: 459 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(19) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(2) }, JumpIf { condition: Relative(23), location: 472 }, Jump { location: 474 }, Mov { destination: Relative(24), source: Relative(30) }, Jump { location: 476 }, Mov { destination: Relative(24), source: Relative(2) }, Jump { location: 476 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(21) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(21) }, JumpIf { condition: Relative(25), location: 482 }, Jump { location: 484 }, Mov { destination: Relative(26), source: Relative(30) }, Jump { location: 486 }, Mov { destination: Relative(26), source: Relative(21) }, Jump { location: 486 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(24), rhs: Relative(26) }, BinaryIntOp { destination: Relative(27), op: Xor, bit_size: U1, lhs: Relative(23), rhs: Relative(25) }, JumpIf { condition: Relative(27), location: 490 }, Jump { location: 492 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(19) }, Jump { location: 496 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65535 }, Jump { location: 496 }, Jump { location: 499 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 499 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 503 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(11), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(3) }, Not { destination: Relative(11), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(11) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(11) }, JumpIf { condition: Relative(4), location: 516 }, Call { location: 583 }, Const { destination: Relative(11), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 520 }, Jump { location: 567 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(20) }, JumpIf { condition: Relative(19), location: 524 }, Jump { location: 564 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(22), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(23), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(24), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 535 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U16, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Jump { location: 529 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U16, lhs: Relative(5), rhs: Relative(21) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(3) }, JumpIf { condition: Relative(25), location: 542 }, Jump { location: 544 }, Mov { destination: Relative(26), source: Relative(32) }, Jump { location: 546 }, Mov { destination: Relative(26), source: Relative(3) }, Jump { location: 546 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(23) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(23) }, JumpIf { condition: Relative(27), location: 552 }, Jump { location: 554 }, Mov { destination: Relative(28), source: Relative(32) }, Jump { location: 556 }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 556 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U16, lhs: Relative(26), rhs: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Xor, bit_size: U1, lhs: Relative(25), rhs: Relative(27) }, JumpIf { condition: Relative(29), location: 560 }, Jump { location: 562 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(21) }, Jump { location: 566 }, Const { destination: Relative(3), bit_size: Integer(U16), value: 65535 }, Jump { location: 566 }, Jump { location: 569 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, Jump { location: 569 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(1), location: 573 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 579 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "rdnLbhRHFIDhd5m1F11V51a8SoSQgSGyZBnk2JEi5HdPne7zO2SRTU82nN+Y8+FbuWd6fl6+Xj+//v7p4enb9z8uH377efn8/PD4+PD7p8fvX+5fHr4/rb/9ednyj94uH9rdpfdjjGPIMfQYdgy/fOhrxDHmPsZ2jHaMpYw1liJryDH0GHYMP8ZSdI2l2N1FtmO0Y/RjLMXXWEqsocewY/gxljLXWErb7i661Ww1e81RU2pqTavpNaNmeVaelWfpra+EjZpSU2taTa8ZNecxfavZapbn5Xl5Xp6X5+V5eV5elBflRXlRXpQX5UV5UV6UF+XN8mZ5s7xZ3ixvljfLm+XN8mZ5bduIRnRiEEIoYYQTQSA35IbckBtyQ27IDbkhN+SW8voRbn0jGtGJQaQ8MpQwImXJCGJW5FlpmtGIlC1jEEIoYUTKnhHErMjzc0QjOjEIIZQwAlmQBVmRFVmRFVmRFVmRFVmRFdmQDdmQDdmQDdmQDdmQDdmRHdmRHdmRHdmRHdmRHTmQAzmQAzmQAzmQAzmQA3ki72cvMjoxCCGUSHlmOBHEPKLvZ3CPRnRiEEIoYYQTQSA35IbckBtyQ27IDbkhN+SG3JE7ckfuyB25I3fkjtyRO/JAHsgDeSAP5IE8kAfyQB7IgizIgizIgizIgizIgizIiqzIiqzIeQb7lqGEEU4Ekdfu/cK+EY3oxCCEUMIIJ4JAduQ8gz0fL+QZPCLlkSGEEkY4kbJkzIo8g0c0ohODEEIJI1LWjCBmRZ7BI1K2jE4MQgglUvYMJ4KYR4w8g0ekHBmdGIQQKc8MI5wIYlbkGRxbRiM6MQghlDDCiSBmRUfuyB25I3fkjtyRO3JH7sgDeSAP5IE8kAfyQB7IA3kgC7IgC7IgC7IgC7IgC7IgK7IiK7IiK7IiK7IiK7IiG7IhG7Ih5xkcLUMJI5wIIuV8MJ5n8IhGdGIQQihhhBNBIAdyIAdyIAdyIAdyIAdyIE/kiTyRJ/JEnsgTeSJP5FmybBvRiE4MQggljHAiCOSG3JAbckNuyA25ITfkhtyQO3JH7sj7GRwZQihhhBMpS8as2M/gHilrRicGIYQSxpYTyANZkPczmM/j9jO4xyCEUMIIJ4KYFfsZ3ANZkRVZkRVZkRVZkRXZkA3ZkA3ZkA3ZkA3ZkA3ZkR3ZkR3ZkR3ZkR3ZkR05kAM5kAM5kAM5kAM5kAN5Ik/kiTyRJ/JEnsgTeSLvZ9Dz+flGNKITKUeGEEoY4UQQs2I/g3s0ohPIDbkh72dwZjgRxKzYz+AejejEIIRQArkjd+SOPJAH8kAeyAN5IA/kgTyQB7IgC7IgC7IgC7IgC7IgC7IiK7IiK7IiK7IiK7IiK7IhG7IhG7IhG7IhG7Ih5xmU/e7ORjSiZ7y93V24Ifbp5fl6zfthv9whW/fNftw/X59eLh+eXh8f7y5/3j++7v/ojx/3T/t8uX9e713k9enrmgv89vB4zXq7+2d7++/VdfujltedjPd1PbUfZ/bzYnLsj3nbvuiZ/Tlrfz33vG2/9RP7PR/DH/vj1v0zX/+RTzj2/fXY98Z9P7Pf5vt+3LYvcmJ/PcCq/fVY6cz+4PNfDzPO7Ov7vrUb98+cn3WtZj9u3J9nzs+6gtb+uirett/PfP30/ffHutSd2RdnX8dt+7ad2ff3zz9Off4u/9v+mfNvW9S+nTp/tvX3fblx/8zPvw2+fybjxv0zv//MOH/m2437dmZ/8vH7qevnL/vtzMfvws+/q9+2b2e+f+7vH7/P2/bDbtuf/z6/H9db918env/1mutbSs8P958fr/Xmt9enL7+89+WvH7yH12x/PH//cv36+nxN6Z8XbvMZz295/NevoI/5Ala+ua4GGvrxLf/7vwE=",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u64, z: i16, u: i64) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n    // regression tests for issue #8176, superseded by issue #8791\n    assert(u >> (x as i64 - 2) == -1);\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> a == 32);\n    a = -a;\n    assert(a << 6 == -64);\n    assert(a << -a == -2);\n\n    assert(x >> (x - 1) == 0);\n\n    assert_eq(z >> 3, -97);\n\n    assert(z >> 14 == -1);\n    let rhs = (if x as i16 > 14 { 14 } else { x as i16 });\n    assert(z >> rhs == -1);\n    assert(-z >> rhs == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
