---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 449 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 28 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(8), location: 34 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 39 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 44 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Cast { destination: Relative(5), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(6), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U64, lhs: Relative(5), rhs: Relative(6) }, Mov { destination: Relative(5), source: Relative(7) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U64) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(7) }, Not { destination: Relative(9), source: Relative(8), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U1, lhs: Relative(6), rhs: Relative(9) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(7), rhs: Relative(9) }, JumpIf { condition: Relative(6), location: 58 }, Call { location: 455 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 62 }, Jump { location: 93 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(10), op: Shl, bit_size: U64, lhs: Relative(9), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(9) }, Const { destination: Relative(16), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U64, lhs: Relative(16), rhs: Relative(6) }, Const { destination: Relative(17), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(18), op: Sub, bit_size: U64, lhs: Relative(17), rhs: Relative(6) }, JumpIf { condition: Relative(11), location: 71 }, Jump { location: 73 }, Mov { destination: Relative(12), source: Relative(18) }, Jump { location: 75 }, Mov { destination: Relative(12), source: Relative(6) }, Jump { location: 75 }, Const { destination: Relative(16), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U64, lhs: Relative(16), rhs: Relative(10) }, Const { destination: Relative(17), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(18), op: Sub, bit_size: U64, lhs: Relative(17), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 81 }, Jump { location: 83 }, Mov { destination: Relative(14), source: Relative(18) }, Jump { location: 85 }, Mov { destination: Relative(14), source: Relative(10) }, Jump { location: 85 }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U64, lhs: Relative(12), rhs: Relative(14) }, BinaryIntOp { destination: Relative(15), op: Xor, bit_size: U1, lhs: Relative(11), rhs: Relative(13) }, JumpIf { condition: Relative(15), location: 89 }, Jump { location: 91 }, Const { destination: Relative(16), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(16), rhs: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, Jump { location: 95 }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, Jump { location: 95 }, Mov { destination: Relative(4), source: Relative(6) }, Const { destination: Relative(5), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(6), location: 101 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U8, lhs: Relative(6), rhs: Relative(5) }, Mov { destination: Relative(5), source: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 115 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(10), rhs: Relative(6) }, JumpIf { condition: Relative(9), location: 120 }, Jump { location: 151 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U8, lhs: Relative(11), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(7) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(7) }, JumpIf { condition: Relative(13), location: 129 }, Jump { location: 131 }, Mov { destination: Relative(14), source: Relative(20) }, Jump { location: 133 }, Mov { destination: Relative(14), source: Relative(7) }, Jump { location: 133 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 139 }, Jump { location: 141 }, Mov { destination: Relative(16), source: Relative(20) }, Jump { location: 143 }, Mov { destination: Relative(16), source: Relative(12) }, Jump { location: 143 }, BinaryIntOp { destination: Relative(7), op: Div, bit_size: U8, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Xor, bit_size: U1, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 147 }, Jump { location: 149 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U8, lhs: Relative(18), rhs: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U8, lhs: Relative(7), rhs: Relative(11) }, Jump { location: 153 }, BinaryIntOp { destination: Relative(7), op: Shr, bit_size: U8, lhs: Relative(6), rhs: Relative(5) }, Jump { location: 153 }, Mov { destination: Relative(5), source: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 159 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(9), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 163 }, Jump { location: 194 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U8, lhs: Relative(11), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(5) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(5) }, JumpIf { condition: Relative(13), location: 172 }, Jump { location: 174 }, Mov { destination: Relative(14), source: Relative(20) }, Jump { location: 176 }, Mov { destination: Relative(14), source: Relative(5) }, Jump { location: 176 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 182 }, Jump { location: 184 }, Mov { destination: Relative(16), source: Relative(20) }, Jump { location: 186 }, Mov { destination: Relative(16), source: Relative(12) }, Jump { location: 186 }, BinaryIntOp { destination: Relative(5), op: Div, bit_size: U8, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Xor, bit_size: U1, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 190 }, Jump { location: 192 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(18), rhs: Relative(5) }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(11) }, Jump { location: 196 }, BinaryIntOp { destination: Relative(5), op: Shr, bit_size: U8, lhs: Relative(6), rhs: Relative(2) }, Jump { location: 196 }, Mov { destination: Relative(6), source: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 202 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(7), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(4) }, Not { destination: Relative(7), source: Relative(11), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(7) }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(12), location: 215 }, Call { location: 455 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 6 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, Mov { destination: Relative(6), source: Relative(7) }, Const { destination: Relative(7), bit_size: Integer(U8), value: 192 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(12), location: 223 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(2) }, Mov { destination: Relative(5), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Not { destination: Relative(7), source: Relative(11), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(7) }, JumpIf { condition: Relative(6), location: 232 }, Call { location: 455 }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(5) }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 239 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 244 }, Call { location: 455 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 250 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 255 }, Jump { location: 286 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(11), op: Shl, bit_size: U16, lhs: Relative(7), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(7) }, Const { destination: Relative(17), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U16, lhs: Relative(18), rhs: Relative(4) }, JumpIf { condition: Relative(12), location: 264 }, Jump { location: 266 }, Mov { destination: Relative(13), source: Relative(19) }, Jump { location: 268 }, Mov { destination: Relative(13), source: Relative(4) }, Jump { location: 268 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U16, lhs: Relative(18), rhs: Relative(11) }, JumpIf { condition: Relative(14), location: 274 }, Jump { location: 276 }, Mov { destination: Relative(15), source: Relative(19) }, Jump { location: 278 }, Mov { destination: Relative(15), source: Relative(11) }, Jump { location: 278 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(13), rhs: Relative(15) }, BinaryIntOp { destination: Relative(16), op: Xor, bit_size: U1, lhs: Relative(12), rhs: Relative(14) }, JumpIf { condition: Relative(16), location: 282 }, Jump { location: 284 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(17), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(7) }, Jump { location: 288 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 288 }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 294 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 14 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 299 }, Jump { location: 330 }, Const { destination: Relative(11), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U16, lhs: Relative(11), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U16, lhs: Relative(18), rhs: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(4) }, JumpIf { condition: Relative(13), location: 308 }, Jump { location: 310 }, Mov { destination: Relative(14), source: Relative(20) }, Jump { location: 312 }, Mov { destination: Relative(14), source: Relative(4) }, Jump { location: 312 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U16, lhs: Relative(18), rhs: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 318 }, Jump { location: 320 }, Mov { destination: Relative(16), source: Relative(20) }, Jump { location: 322 }, Mov { destination: Relative(16), source: Relative(12) }, Jump { location: 322 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Xor, bit_size: U1, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 326 }, Jump { location: 328 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(18), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(11) }, Jump { location: 332 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 332 }, Mov { destination: Relative(5), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 338 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Cast { destination: Relative(11), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(11), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(5), bit_size: Integer(U16) }, Const { destination: Relative(13), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U16, lhs: Relative(2), rhs: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U16, lhs: Relative(1), rhs: Relative(13) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(12) }, Not { destination: Relative(11), source: Relative(5), bit_size: U1 }, Cast { destination: Relative(12), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(11), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U16, lhs: Relative(12), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U16, lhs: Relative(11), rhs: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 355 }, Jump { location: 386 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(13), op: Shl, bit_size: U16, lhs: Relative(12), rhs: Relative(1) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(19), rhs: Relative(2) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(2) }, JumpIf { condition: Relative(14), location: 364 }, Jump { location: 366 }, Mov { destination: Relative(15), source: Relative(21) }, Jump { location: 368 }, Mov { destination: Relative(15), source: Relative(2) }, Jump { location: 368 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U16, lhs: Relative(19), rhs: Relative(13) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(13) }, JumpIf { condition: Relative(16), location: 374 }, Jump { location: 376 }, Mov { destination: Relative(17), source: Relative(21) }, Jump { location: 378 }, Mov { destination: Relative(17), source: Relative(13) }, Jump { location: 378 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(15), rhs: Relative(17) }, BinaryIntOp { destination: Relative(18), op: Xor, bit_size: U1, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(18), location: 382 }, Jump { location: 384 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(12) }, Jump { location: 388 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 388 }, Mov { destination: Relative(5), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 393 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(12), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(3) }, Not { destination: Relative(12), source: Relative(13), bit_size: U1 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(13), rhs: Relative(12) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(12) }, JumpIf { condition: Relative(4), location: 406 }, Call { location: 455 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 410 }, Jump { location: 441 }, Const { destination: Relative(13), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(14), op: Shl, bit_size: U16, lhs: Relative(13), rhs: Relative(1) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U16, lhs: Relative(5), rhs: Relative(13) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U16, lhs: Relative(20), rhs: Relative(3) }, Const { destination: Relative(21), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U16, lhs: Relative(21), rhs: Relative(3) }, JumpIf { condition: Relative(15), location: 419 }, Jump { location: 421 }, Mov { destination: Relative(16), source: Relative(22) }, Jump { location: 423 }, Mov { destination: Relative(16), source: Relative(3) }, Jump { location: 423 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U16, lhs: Relative(20), rhs: Relative(14) }, Const { destination: Relative(21), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U16, lhs: Relative(21), rhs: Relative(14) }, JumpIf { condition: Relative(17), location: 429 }, Jump { location: 431 }, Mov { destination: Relative(18), source: Relative(22) }, Jump { location: 433 }, Mov { destination: Relative(18), source: Relative(14) }, Jump { location: 433 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U16, lhs: Relative(16), rhs: Relative(18) }, BinaryIntOp { destination: Relative(19), op: Xor, bit_size: U1, lhs: Relative(15), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 437 }, Jump { location: 439 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(13) }, Jump { location: 443 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, Jump { location: 443 }, Mov { destination: Relative(1), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 448 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 454 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "rdnBbhs5DIDhd5lzDiNREqm8yqIo0tQtDBhO4CYLLIq8+4oj/m572MvMXso/Tfk1sS3bk/xcvp6+vH//fL5+e/mxPP71c/lyO18u5++fLy/PT2/nl+v425/L6n/ktDymhyXnOWR5zGOUOeocbQ6dw5ZHGaMvj+VhkXWONEeeQ+YYSh1jKG2MNofOYXMMRR+WMhQbI82R55A5htLHGEpax2wxNabF7HPWNWaKmWNKzBIzvBpeDa+6N26J2udsa8wUM8eUmCVmjdliaszwWnganoan4Wl4Gp6Gp+FpeBqehmfhWXgWnoVn4Vl4Fp6FZ+FZeD28Hl4Pr4fXw+vhdffGw6JrTIvZ50zrSrgoHpkQwtHiUYlGuFs9jOgRyeXmkYhMCFEIl9WjEUoY0SPySiQiE0IUAjkjZ+SMnJEFWZAFWZAFWZAFWZAFWZALckEuyAW5IBfkglyQC3JBrsgVuSJX5O1YmUclGqGEES6PM522w7VFIjIhRCEq0QgljEBWZEVWZEVWZEVWZEVWZEU2ZEM2ZEM2ZEM2ZEM2ZEPuyB25I3fkjtyRO7KfwLx6GNFnZD+DMxIx5OxP+H4GZxSiEo1Qwoge4WdwRiKQE3JC9jOY/SXEz+AMJVz2lxU/g1v4GZyRiEy4XDwKUYlGKGFEj/AzOCMRLlcPIVxuHpVohBJGuKz+srkSiciEEC6bh8vdoxFKGNEj/AyK33F+BmdkQohCVKIRShjRIxpyQ27IDbkhN+SG3JAbckNWZEVWZEVWZEVWZEVWZEU2ZEM2ZEM2ZEM2ZEM2ZD+D4g9RP4MzEpEJIVz2B62fwRmNUMKIPkP8DM5IRCaEKEQlGqGEEcgJOSEn5ISckBNyQk7ICTkhZ+SMnJEzckbOyBk5I2fkjCzIgizIfgZFPApRiUYo4fL2lrNH+Bmc4bK///QzOEOIQlSisaUEckGuyNsZ9Hev2xncQohCVKIRShjRI7YzuAVyQ27IDbkhN+SG3JAbsiIrsiIrsiIrsiIrsiIrsiEbsiEbsiEbsiEbsiFvZ1D9mmAlEpEJl82jEJVohBJG9BllO4NbJCITQhSiEi77Jch2BrcwokdsZ3CLRGRCiEJUAjkhJ+SEnJEzckbOyBk5I2fkjJyRM7IgC7IgC7IgC7IgC7IgC3JBLsgFuSD7GSx+4eZncEYj1OPj42HhevXz2+108svV3y5gx2Xt69PtdH1bHq/vl8vD8vfT5X37Rz9en67bfHu6jc8O8nT9OuYAv50vJ6+Ph1/b63+vjiuTWB4XGff1umvf9uz7M+Lcl35sv9Q9+73H/nhbeGw/5R372d9fzX05ur/n9hd/M7jtj5elg/u6Zz/1+74d2y9lx/547ov98TS2Z1/4/sczwJ79et9v6eD+nvNTTNi3g/t9z/mpK/dfTQf3857br96fP6rsefzUouxXObbf1j37ev/+bdf3r+V/299z/ttqsd92nb+25vt+Obi/5/HfhPuvFTm4v+f5rzXOX9P14H7bs9/5+nXX6+dv+2nP16+Fx79WPbbf9tx/qvevX/uxfWvH9vuf5/fT+Ojp+Xz741ciHy7dzk9fLqf48Nv79fm3z77988pn+JXK6+3l+fT1/XZy6dfvVfyC4K8ybr5Syyf/2bJ/OF6NStVPH/7f/ws=",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u64, z: i16, u: i64) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n    // regression tests for issue #8176, superseded by issue #8791\n    assert(u >> (x as i64 - 2) == -1);\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> a == 32);\n    a = -a;\n    assert(a << 6 == -64);\n    assert(a << -a == -2);\n\n    assert(x >> (x - 1) == 0);\n\n    assert_eq(z >> 3, -97);\n\n    assert(z >> 14 == -1);\n    let rhs = (if x as i16 > 14 { 14 } else { x as i16 });\n    assert(z >> rhs == -1);\n    assert(-z >> rhs == 0);\n}\n",
      "path": ""
    }
  },
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
