---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 530 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 28 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(8), location: 34 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 39 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 44 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Cast { destination: Relative(5), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(6), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U64, lhs: Relative(5), rhs: Relative(6) }, Mov { destination: Relative(5), source: Relative(7) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U64) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(7) }, Not { destination: Relative(9), source: Relative(8), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U1, lhs: Relative(6), rhs: Relative(9) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(7), rhs: Relative(9) }, JumpIf { condition: Relative(6), location: 58 }, Call { location: 536 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 62 }, Jump { location: 106 }, Const { destination: Relative(10), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U64, lhs: Relative(5), rhs: Relative(10) }, JumpIf { condition: Relative(9), location: 66 }, Call { location: 539 }, Const { destination: Relative(11), bit_size: Integer(U64), value: 1 }, Const { destination: Relative(12), bit_size: Integer(U64), value: 2 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 1 }, Cast { destination: Relative(14), source: Relative(5), bit_size: Integer(U32) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 77 }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U64, lhs: Relative(13), rhs: Relative(12) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Jump { location: 71 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(11) }, Const { destination: Relative(20), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U64, lhs: Relative(20), rhs: Relative(6) }, Const { destination: Relative(21), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U64, lhs: Relative(21), rhs: Relative(6) }, JumpIf { condition: Relative(15), location: 84 }, Jump { location: 86 }, Mov { destination: Relative(16), source: Relative(22) }, Jump { location: 88 }, Mov { destination: Relative(16), source: Relative(6) }, Jump { location: 88 }, Const { destination: Relative(20), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U64, lhs: Relative(20), rhs: Relative(13) }, Const { destination: Relative(21), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U64, lhs: Relative(21), rhs: Relative(13) }, JumpIf { condition: Relative(17), location: 94 }, Jump { location: 96 }, Mov { destination: Relative(18), source: Relative(22) }, Jump { location: 98 }, Mov { destination: Relative(18), source: Relative(13) }, Jump { location: 98 }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U64, lhs: Relative(16), rhs: Relative(18) }, BinaryIntOp { destination: Relative(19), op: Xor, bit_size: U1, lhs: Relative(15), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 102 }, Jump { location: 104 }, Const { destination: Relative(20), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(20), rhs: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(6), rhs: Relative(11) }, Jump { location: 108 }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, Jump { location: 108 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 113 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U8, lhs: Relative(6), rhs: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 126 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(11), rhs: Relative(6) }, JumpIf { condition: Relative(9), location: 131 }, Jump { location: 175 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(5), rhs: Relative(13) }, JumpIf { condition: Relative(12), location: 135 }, Call { location: 539 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(17), source: Relative(5), bit_size: Integer(U32) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 146 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U8, lhs: Relative(16), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Jump { location: 140 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U8, lhs: Relative(6), rhs: Relative(14) }, Const { destination: Relative(23), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U8, lhs: Relative(23), rhs: Relative(7) }, Const { destination: Relative(24), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U8, lhs: Relative(24), rhs: Relative(7) }, JumpIf { condition: Relative(18), location: 153 }, Jump { location: 155 }, Mov { destination: Relative(19), source: Relative(25) }, Jump { location: 157 }, Mov { destination: Relative(19), source: Relative(7) }, Jump { location: 157 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U8, lhs: Relative(23), rhs: Relative(16) }, Const { destination: Relative(24), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U8, lhs: Relative(24), rhs: Relative(16) }, JumpIf { condition: Relative(20), location: 163 }, Jump { location: 165 }, Mov { destination: Relative(21), source: Relative(25) }, Jump { location: 167 }, Mov { destination: Relative(21), source: Relative(16) }, Jump { location: 167 }, BinaryIntOp { destination: Relative(7), op: Div, bit_size: U8, lhs: Relative(19), rhs: Relative(21) }, BinaryIntOp { destination: Relative(22), op: Xor, bit_size: U1, lhs: Relative(18), rhs: Relative(20) }, JumpIf { condition: Relative(22), location: 171 }, Jump { location: 173 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U8, lhs: Relative(23), rhs: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U8, lhs: Relative(7), rhs: Relative(14) }, Jump { location: 177 }, BinaryIntOp { destination: Relative(7), op: Shr, bit_size: U8, lhs: Relative(6), rhs: Relative(5) }, Jump { location: 177 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 182 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(9), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 186 }, Jump { location: 230 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(14) }, JumpIf { condition: Relative(12), location: 190 }, Call { location: 539 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(18), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 201 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U8, lhs: Relative(17), rhs: Relative(16) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Jump { location: 195 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U8, lhs: Relative(6), rhs: Relative(15) }, Const { destination: Relative(24), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U8, lhs: Relative(24), rhs: Relative(5) }, Const { destination: Relative(25), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U8, lhs: Relative(25), rhs: Relative(5) }, JumpIf { condition: Relative(19), location: 208 }, Jump { location: 210 }, Mov { destination: Relative(20), source: Relative(26) }, Jump { location: 212 }, Mov { destination: Relative(20), source: Relative(5) }, Jump { location: 212 }, Const { destination: Relative(24), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U8, lhs: Relative(24), rhs: Relative(17) }, Const { destination: Relative(25), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U8, lhs: Relative(25), rhs: Relative(17) }, JumpIf { condition: Relative(21), location: 218 }, Jump { location: 220 }, Mov { destination: Relative(22), source: Relative(26) }, Jump { location: 222 }, Mov { destination: Relative(22), source: Relative(17) }, Jump { location: 222 }, BinaryIntOp { destination: Relative(5), op: Div, bit_size: U8, lhs: Relative(20), rhs: Relative(22) }, BinaryIntOp { destination: Relative(23), op: Xor, bit_size: U1, lhs: Relative(19), rhs: Relative(21) }, JumpIf { condition: Relative(23), location: 226 }, Jump { location: 228 }, Const { destination: Relative(24), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(24), rhs: Relative(5) }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(15) }, Jump { location: 232 }, BinaryIntOp { destination: Relative(5), op: Shr, bit_size: U8, lhs: Relative(6), rhs: Relative(2) }, Jump { location: 232 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 237 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(7), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(4) }, Not { destination: Relative(7), source: Relative(12), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(12), rhs: Relative(7) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(15), location: 250 }, Call { location: 536 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 6 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 192 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(6) }, JumpIf { condition: Relative(15), location: 257 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(2) }, Mov { destination: Relative(5), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Not { destination: Relative(7), source: Relative(12), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U1, lhs: Relative(12), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(7) }, JumpIf { condition: Relative(6), location: 266 }, Call { location: 536 }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U8, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 272 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 277 }, Call { location: 536 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 283 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 288 }, Jump { location: 332 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(12) }, JumpIf { condition: Relative(7), location: 292 }, Call { location: 539 }, Const { destination: Relative(15), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(18), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 303 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U16, lhs: Relative(17), rhs: Relative(16) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Jump { location: 297 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(15) }, Const { destination: Relative(24), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(24), rhs: Relative(4) }, Const { destination: Relative(25), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(19), location: 310 }, Jump { location: 312 }, Mov { destination: Relative(20), source: Relative(26) }, Jump { location: 314 }, Mov { destination: Relative(20), source: Relative(4) }, Jump { location: 314 }, Const { destination: Relative(24), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U16, lhs: Relative(24), rhs: Relative(17) }, Const { destination: Relative(25), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(26), op: Sub, bit_size: U16, lhs: Relative(25), rhs: Relative(17) }, JumpIf { condition: Relative(21), location: 320 }, Jump { location: 322 }, Mov { destination: Relative(22), source: Relative(26) }, Jump { location: 324 }, Mov { destination: Relative(22), source: Relative(17) }, Jump { location: 324 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(20), rhs: Relative(22) }, BinaryIntOp { destination: Relative(23), op: Xor, bit_size: U1, lhs: Relative(19), rhs: Relative(21) }, JumpIf { condition: Relative(23), location: 328 }, Jump { location: 330 }, Const { destination: Relative(24), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(24), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(15) }, Jump { location: 334 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 334 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 339 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 14 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 344 }, Jump { location: 388 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(16) }, JumpIf { condition: Relative(15), location: 348 }, Call { location: 539 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(20), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 359 }, BinaryIntOp { destination: Relative(19), op: Mul, bit_size: U16, lhs: Relative(19), rhs: Relative(18) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Jump { location: 353 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(17) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U16, lhs: Relative(26), rhs: Relative(4) }, Const { destination: Relative(27), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(28), op: Sub, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, JumpIf { condition: Relative(21), location: 366 }, Jump { location: 368 }, Mov { destination: Relative(22), source: Relative(28) }, Jump { location: 370 }, Mov { destination: Relative(22), source: Relative(4) }, Jump { location: 370 }, Const { destination: Relative(26), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U16, lhs: Relative(26), rhs: Relative(19) }, Const { destination: Relative(27), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(28), op: Sub, bit_size: U16, lhs: Relative(27), rhs: Relative(19) }, JumpIf { condition: Relative(23), location: 376 }, Jump { location: 378 }, Mov { destination: Relative(24), source: Relative(28) }, Jump { location: 380 }, Mov { destination: Relative(24), source: Relative(19) }, Jump { location: 380 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(22), rhs: Relative(24) }, BinaryIntOp { destination: Relative(25), op: Xor, bit_size: U1, lhs: Relative(21), rhs: Relative(23) }, JumpIf { condition: Relative(25), location: 384 }, Jump { location: 386 }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(17) }, Jump { location: 390 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 390 }, Const { destination: Relative(5), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U16, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(15), location: 395 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Cast { destination: Relative(15), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(4), source: Relative(15), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(4), bit_size: Integer(U16) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U16, lhs: Relative(2), rhs: Relative(18) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U16, lhs: Relative(1), rhs: Relative(18) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(15), rhs: Relative(17) }, Not { destination: Relative(15), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(17), source: Relative(4), bit_size: Integer(U16) }, Cast { destination: Relative(4), source: Relative(15), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U16, lhs: Relative(17), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U16, lhs: Relative(4), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U16, lhs: Relative(15), rhs: Relative(2) }, Const { destination: Relative(15), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(15), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 412 }, Jump { location: 456 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(18) }, JumpIf { condition: Relative(17), location: 416 }, Call { location: 539 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(22), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 427 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U16, lhs: Relative(21), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Jump { location: 421 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(19) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(2) }, JumpIf { condition: Relative(23), location: 434 }, Jump { location: 436 }, Mov { destination: Relative(24), source: Relative(30) }, Jump { location: 438 }, Mov { destination: Relative(24), source: Relative(2) }, Jump { location: 438 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(21) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(21) }, JumpIf { condition: Relative(25), location: 444 }, Jump { location: 446 }, Mov { destination: Relative(26), source: Relative(30) }, Jump { location: 448 }, Mov { destination: Relative(26), source: Relative(21) }, Jump { location: 448 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(24), rhs: Relative(26) }, BinaryIntOp { destination: Relative(27), op: Xor, bit_size: U1, lhs: Relative(23), rhs: Relative(25) }, JumpIf { condition: Relative(27), location: 452 }, Jump { location: 454 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(19) }, Jump { location: 458 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 458 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 462 }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(17) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(17), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(3) }, Not { destination: Relative(17), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(17) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(17) }, JumpIf { condition: Relative(4), location: 475 }, Call { location: 536 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 479 }, Jump { location: 523 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(20) }, JumpIf { condition: Relative(19), location: 483 }, Call { location: 539 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(22), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(23), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(24), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 494 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U16, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Jump { location: 488 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U16, lhs: Relative(5), rhs: Relative(21) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(3) }, JumpIf { condition: Relative(25), location: 501 }, Jump { location: 503 }, Mov { destination: Relative(26), source: Relative(32) }, Jump { location: 505 }, Mov { destination: Relative(26), source: Relative(3) }, Jump { location: 505 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(23) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(23) }, JumpIf { condition: Relative(27), location: 511 }, Jump { location: 513 }, Mov { destination: Relative(28), source: Relative(32) }, Jump { location: 515 }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 515 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U16, lhs: Relative(26), rhs: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Xor, bit_size: U1, lhs: Relative(25), rhs: Relative(27) }, JumpIf { condition: Relative(29), location: 519 }, Jump { location: 521 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(21) }, Jump { location: 525 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, Jump { location: 525 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(1), location: 529 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 535 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "rdnPThw5EIDxd5kzh66yy2XzKqsoImQSISFAE1hpFfHu63LXR5LDXnr2kvoIqV/45+np4efp6/nL2/fPD0/fnn+cbv/6efpyeXh8fPj++fH5/u714flp/u3P0xZ/qJxu5eakuo9yutU56j5sH20fvo9+ui1zjNNtvTmVbR+yD91H2cdUbI6ptDnaPnwffR9T8ZtTnUqfQ/ah+yj7mMqYYyqyzdlyes6ec+zTtpySU3OWnDVnepaepWfhza+EjX22Lafk1JwlZ81pOVtOz5leS8/T8/Q8PU/P0/P0PD1Pz9Pz9Hp6Pb2eXk+vp9fT6+n19Hp6Pb2R3khvpDfSG+mN9EZ6I72R3khPto0QQolCVMKIRjgRsEaMDNkIIZQIuURUwoiQa4QTnQh5/sSKbkTILUKJQlTCiJA9wolOjIw4L3sIoUQhKmEEckEuyAW5IlfkilyRK3JFrsgVuSJXZEM2ZEM2ZEM2ZEM2ZEM25IbckBtyQ27IDbkhN+SG3JAd2ZEd2ZEd2ZEdeZ22HtGJkbEO3AohQh4RhaiEEY1wohMjYx29FUIgD+SBPJAH8kAeyCNl3TZCCCUKUQkjGuFEJ5AFWZAFWZAFWZAFWZAFWZAVWZEVWZEVWZEVWZEVWZELckGOM6hbRCEqYUQj4jq4rpWdGBlxBvcQQolCVMKIRiBX5IocZ1DXJVmIkONCHGdwj0oY0YiQa0QnRkacwT2EUKIQlTAiZIsIuUV0YmTEGdxDiJA9ohCVMKIRIfeIkOPbFGdwRZzBPYRQYsolvk1xBvcwohFOdGJkxBncQwglkAfyQB7IA3kgj5TLthFCKFGIShjRCCc6gSzIgizIgizIgizIgizIgqzIiqzIiqzIiqzIiqzIilyQC3JBLshxBotEGNEIJzoRssaTzo0QQolCVMKIRjjRCWRDNmRDNmRDNmRDNmRDNuSG3JAbckNuyA25ITfkhtyQHdmRHdmRHdmRHdmRHdmRO3JH7sgduSN35I7ckTtyR15nsEQIoUQhKhFy3GysM7jCiZDjBmSdQYvbjI0QQomyb9V1BlcY0QgnQm4RI2OdwRVCKFGIShjRCCeQBVmRFVmRFVmRFVmRFVmRFbkgF+SCXJALckEuyAW5IBfkilyRK3JFrsgVuSJX5IpckQ3ZkA3ZkA3ZkA3ZkNcZjDvPdQYj1hlcIUTIcQe6zuCKShjRCCc6MTLWGVwhBLIjO/I6g3G/u87gCic6MTLWGVwhhBKFqARyR+7IHbkjD+SBPJAH8kAeyAN5IA/kkbJtGyGEEoWohBGNcKITyIIsyIIsyIIsyIIsyIIsyIqsyIqsyIocZ7CuVx4a4USPeH+/OfFCzOfXy/kcr8P89srMfL3m5e5yfno93T69PT7enP6+e3xb/+jHy93Tmq93l/neSZ6fvs45wW8Pj+eo95tf29t/r85b7lyed88f63Zovx/Zj0f6fb+M6/arHdkfI/fn/c51+6IH9jWeD+/75dr9I1//Ek/e1/58vnXlvh/Zl/Gx36/br/XA/ryo5/68Ph/ZL3z+89J2ZN8+9ptcuX/k/MzrA/v9yv1x5PzMR+3cn4/E1+3rka+ffTx+WDny82PV2bdy3X7bjuz7x+ffD33+Xv+3/SPnv20999uh89c2/divV+4f+flvhe9fq+XK/SOPf61x/ppvV+63I/uDj98PXT9/25cjH79Xfv7d/Lr9duT75/7x8fu4br+36/bHn+f303zr7v7h8sfv+t5DujzcfXk855vf3p7uf3vv6z8vvIffFb5cnu/PX98u55B+/cIwnmX/ZfMFGiv2KX5pst5s883+6T3++38B",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u64, z: i16, u: i64) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n    // regression tests for issue #8176, superseded by issue #8791\n    assert(u >> (x as i64 - 2) == -1);\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> a == 32);\n    a = -a;\n    assert(a << 6 == -64);\n    assert(a << -a == -2);\n\n    assert(x >> (x - 1) == 0);\n\n    assert_eq(z >> 3, -97);\n\n    assert(z >> 14 == -1);\n    let rhs = (if x as i16 > 14 { 14 } else { x as i16 });\n    assert(z >> rhs == -1);\n    assert(-z >> rhs == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
