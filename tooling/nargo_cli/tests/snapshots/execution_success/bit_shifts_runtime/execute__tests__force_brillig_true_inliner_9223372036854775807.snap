---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 472 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U64, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(7), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(6), location: 26 }, Call { location: 478 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(8), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 32 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 38 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 43 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 48 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(8), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, Mov { destination: Relative(6), source: Relative(9) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U64) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(12), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(9), location: 62 }, Call { location: 481 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 63 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 66 }, Call { location: 478 }, Const { destination: Relative(10), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U64, lhs: Relative(10), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 70 }, Jump { location: 101 }, Const { destination: Relative(11), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U64, lhs: Relative(11), rhs: Relative(6) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U64, lhs: Relative(18), rhs: Relative(8) }, Const { destination: Relative(19), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U64, lhs: Relative(19), rhs: Relative(8) }, JumpIf { condition: Relative(13), location: 79 }, Jump { location: 81 }, Mov { destination: Relative(14), source: Relative(20) }, Jump { location: 83 }, Mov { destination: Relative(14), source: Relative(8) }, Jump { location: 83 }, Const { destination: Relative(18), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U64, lhs: Relative(18), rhs: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U64, lhs: Relative(19), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 89 }, Jump { location: 91 }, Mov { destination: Relative(16), source: Relative(20) }, Jump { location: 93 }, Mov { destination: Relative(16), source: Relative(12) }, Jump { location: 93 }, BinaryIntOp { destination: Relative(8), op: Div, bit_size: U64, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Xor, bit_size: U1, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 97 }, Jump { location: 99 }, Const { destination: Relative(18), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(18), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(8), rhs: Relative(11) }, Jump { location: 103 }, BinaryIntOp { destination: Relative(8), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, Jump { location: 103 }, Mov { destination: Relative(4), source: Relative(8) }, Const { destination: Relative(6), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 109 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Cast { destination: Relative(6), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(8), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(8), bit_size: Integer(U64) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U8) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(8), rhs: Relative(6) }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 123 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(6), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(12), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 128 }, Jump { location: 159 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(14), op: Shl, bit_size: U8, lhs: Relative(13), rhs: Relative(6) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(8), rhs: Relative(13) }, Const { destination: Relative(20), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(20), rhs: Relative(9) }, Const { destination: Relative(21), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U8, lhs: Relative(21), rhs: Relative(9) }, JumpIf { condition: Relative(15), location: 137 }, Jump { location: 139 }, Mov { destination: Relative(16), source: Relative(22) }, Jump { location: 141 }, Mov { destination: Relative(16), source: Relative(9) }, Jump { location: 141 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U8, lhs: Relative(20), rhs: Relative(14) }, Const { destination: Relative(21), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U8, lhs: Relative(21), rhs: Relative(14) }, JumpIf { condition: Relative(17), location: 147 }, Jump { location: 149 }, Mov { destination: Relative(18), source: Relative(22) }, Jump { location: 151 }, Mov { destination: Relative(18), source: Relative(14) }, Jump { location: 151 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U8, lhs: Relative(16), rhs: Relative(18) }, BinaryIntOp { destination: Relative(19), op: Xor, bit_size: U1, lhs: Relative(15), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 155 }, Jump { location: 157 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(20), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(9), rhs: Relative(13) }, Jump { location: 161 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U8, lhs: Relative(8), rhs: Relative(6) }, Jump { location: 161 }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 167 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Cast { destination: Relative(6), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 7 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 172 }, Call { location: 478 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(13), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 176 }, Jump { location: 207 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(15), op: Shl, bit_size: U8, lhs: Relative(14), rhs: Relative(2) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(8), rhs: Relative(14) }, Const { destination: Relative(21), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(21), rhs: Relative(9) }, Const { destination: Relative(22), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(23), op: Sub, bit_size: U8, lhs: Relative(22), rhs: Relative(9) }, JumpIf { condition: Relative(16), location: 185 }, Jump { location: 187 }, Mov { destination: Relative(17), source: Relative(23) }, Jump { location: 189 }, Mov { destination: Relative(17), source: Relative(9) }, Jump { location: 189 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U8, lhs: Relative(21), rhs: Relative(15) }, Const { destination: Relative(22), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(23), op: Sub, bit_size: U8, lhs: Relative(22), rhs: Relative(15) }, JumpIf { condition: Relative(18), location: 195 }, Jump { location: 197 }, Mov { destination: Relative(19), source: Relative(23) }, Jump { location: 199 }, Mov { destination: Relative(19), source: Relative(15) }, Jump { location: 199 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U8, lhs: Relative(17), rhs: Relative(19) }, BinaryIntOp { destination: Relative(20), op: Xor, bit_size: U1, lhs: Relative(16), rhs: Relative(18) }, JumpIf { condition: Relative(20), location: 203 }, Jump { location: 205 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(21), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(9), rhs: Relative(14) }, Jump { location: 209 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Jump { location: 209 }, Mov { destination: Relative(8), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 215 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Const { destination: Relative(8), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(9) }, Cast { destination: Relative(9), source: Relative(2), bit_size: Integer(U8) }, Const { destination: Relative(11), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, Not { destination: Relative(6), source: Relative(14), bit_size: U1 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(14), rhs: Relative(6) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(15), location: 227 }, Call { location: 481 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 6 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 192 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(15), location: 235 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Mov { destination: Relative(8), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(8), bit_size: Integer(U8) }, Not { destination: Relative(9), source: Relative(14), bit_size: U1 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(14), rhs: Relative(9) }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(9) }, JumpIf { condition: Relative(14), location: 244 }, Call { location: 481 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 247 }, Call { location: 478 }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(8) }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 254 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 259 }, Call { location: 481 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(2), location: 262 }, Call { location: 478 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 268 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 273 }, Jump { location: 304 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U16, lhs: Relative(8), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(8) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(18), rhs: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 282 }, Jump { location: 284 }, Mov { destination: Relative(14), source: Relative(20) }, Jump { location: 286 }, Mov { destination: Relative(14), source: Relative(4) }, Jump { location: 286 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U16, lhs: Relative(18), rhs: Relative(9) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(9) }, JumpIf { condition: Relative(15), location: 292 }, Jump { location: 294 }, Mov { destination: Relative(16), source: Relative(20) }, Jump { location: 296 }, Mov { destination: Relative(16), source: Relative(9) }, Jump { location: 296 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Xor, bit_size: U1, lhs: Relative(11), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 300 }, Jump { location: 302 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(18), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(8) }, Jump { location: 306 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 306 }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 312 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 14 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(8), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 317 }, Jump { location: 348 }, Const { destination: Relative(9), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(11), op: Shl, bit_size: U16, lhs: Relative(9), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(9) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(19), rhs: Relative(4) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(4) }, JumpIf { condition: Relative(14), location: 326 }, Jump { location: 328 }, Mov { destination: Relative(15), source: Relative(21) }, Jump { location: 330 }, Mov { destination: Relative(15), source: Relative(4) }, Jump { location: 330 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U16, lhs: Relative(19), rhs: Relative(11) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(11) }, JumpIf { condition: Relative(16), location: 336 }, Jump { location: 338 }, Mov { destination: Relative(17), source: Relative(21) }, Jump { location: 340 }, Mov { destination: Relative(17), source: Relative(11) }, Jump { location: 340 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(15), rhs: Relative(17) }, BinaryIntOp { destination: Relative(18), op: Xor, bit_size: U1, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(18), location: 344 }, Jump { location: 346 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(9) }, Jump { location: 350 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 350 }, Mov { destination: Relative(5), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 356 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Cast { destination: Relative(9), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(9), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(5), bit_size: Integer(U16) }, Const { destination: Relative(14), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U16, lhs: Relative(2), rhs: Relative(14) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U16, lhs: Relative(1), rhs: Relative(14) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(9), rhs: Relative(11) }, Not { destination: Relative(9), source: Relative(5), bit_size: U1 }, Cast { destination: Relative(11), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(9), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U16, lhs: Relative(11), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U16, lhs: Relative(9), rhs: Relative(2) }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U16) }, Const { destination: Relative(5), bit_size: Integer(U16), value: 15 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 374 }, Call { location: 478 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 378 }, Jump { location: 409 }, Const { destination: Relative(9), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(11), op: Shl, bit_size: U16, lhs: Relative(9), rhs: Relative(1) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(9) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(19), rhs: Relative(2) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(2) }, JumpIf { condition: Relative(14), location: 387 }, Jump { location: 389 }, Mov { destination: Relative(15), source: Relative(21) }, Jump { location: 391 }, Mov { destination: Relative(15), source: Relative(2) }, Jump { location: 391 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U16, lhs: Relative(19), rhs: Relative(11) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(11) }, JumpIf { condition: Relative(16), location: 397 }, Jump { location: 399 }, Mov { destination: Relative(17), source: Relative(21) }, Jump { location: 401 }, Mov { destination: Relative(17), source: Relative(11) }, Jump { location: 401 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(15), rhs: Relative(17) }, BinaryIntOp { destination: Relative(18), op: Xor, bit_size: U1, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(18), location: 405 }, Jump { location: 407 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(9) }, Jump { location: 411 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 411 }, Mov { destination: Relative(5), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 416 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(9), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(9), rhs: Relative(3) }, Not { destination: Relative(9), source: Relative(11), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(9) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(9) }, JumpIf { condition: Relative(4), location: 429 }, Call { location: 481 }, Const { destination: Relative(9), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(9), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 433 }, Jump { location: 464 }, Const { destination: Relative(11), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(14), op: Shl, bit_size: U16, lhs: Relative(11), rhs: Relative(1) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U16, lhs: Relative(5), rhs: Relative(11) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U16, lhs: Relative(20), rhs: Relative(3) }, Const { destination: Relative(21), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U16, lhs: Relative(21), rhs: Relative(3) }, JumpIf { condition: Relative(15), location: 442 }, Jump { location: 444 }, Mov { destination: Relative(16), source: Relative(22) }, Jump { location: 446 }, Mov { destination: Relative(16), source: Relative(3) }, Jump { location: 446 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U16, lhs: Relative(20), rhs: Relative(14) }, Const { destination: Relative(21), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U16, lhs: Relative(21), rhs: Relative(14) }, JumpIf { condition: Relative(17), location: 452 }, Jump { location: 454 }, Mov { destination: Relative(18), source: Relative(22) }, Jump { location: 456 }, Mov { destination: Relative(18), source: Relative(14) }, Jump { location: 456 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U16, lhs: Relative(16), rhs: Relative(18) }, BinaryIntOp { destination: Relative(19), op: Xor, bit_size: U1, lhs: Relative(15), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 460 }, Jump { location: 462 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(11) }, Jump { location: 466 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, Jump { location: 466 }, Mov { destination: Relative(1), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 471 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 477 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "rdnBbhs3EIDhd9FZhyU5JGf8KkUQKI4SCBBkQ7ELFIHfvZzl/Epy6GW3l87vOvPFtkStNv55+Hr+8v798+X27eXH4emvn4cv98v1evn++fryfHq7vNzG//15WPw/OR2e0vGQ8xxlDpmjztHm6IenPIbOYesoyxxpjqGUMYYiY8gcdY42R59jKHWMobTjQZY50hx5jqH0MYaiY9Q52hx9jqHYGENJy/FQl5gpZo5ZYkrMGrPF7DE1ZngtvBZec2/8JFqJKTFrzBazx9SYNmdfYqaY4fXweng9vB5eD6+H18PT8DQ8DU/D0/A0PA1Pw9PwNDwLz8Kz8Cw8C8/Cs/AsPAvPwkvLQiQiE4VwNHtUohGdUMLl8QxLaSES4bJ4FEIIl6tHIzrhcvOwiLwQiciEy91DiEo0ohNKWISflRmJyARyQS7IBbkgF+SCLMiCLMiCLMiCLMiCLMiCXJErckWuyBW5IlfkilyRK3JDbsjr8VKPQghRiUa4bB5KWMR6zNZIRCYKIUQlGoHckTuyIiuyIiuyIiuyIiuyIiuyIRuyIRuyIRuyIRuyIVvIeVmIRGSiEEJUohGdUALZz2BePBKRiUIIMeTsVxE/gzM6oYRF+BmckYhMFEII5Iy8Xqn8GrVeq9awiPV6VTwSkYlCCOGyeDSiE0pYhJ/BGYnIRCFcrh6VaEQnlHC5+VV4IRKRiUK43D0q0YhOKOGy+oV9IRKRCZf9UfYzOKMSjejEkIs/yn4G1/AzOCMRmSiEEJVoRCeQO7IiK7IiK7IiK7IiK7IiK7IhG7IhG7IhG7IhG7IhW8hlWYhEZKIQQlSiES4nDyUsws/gjES4vL4lK4QQlWhEJ5SwCD+DMxKBnJEzckbOyBk5I2fkglyQC3JBLsgFuSAX5IJckAVZkAVZkAVZkAVZkAVZkCuyn8Hi73H9DM4ohBCVcHl9C9wJJVz2d8B+BmckIhOFkNjyMzgDuSE35PUMNn+nvRCJyEQhhKhEIzqhBLIiK7IiK7IiK7IiK7IiK7IhG7IhG7IhG7IhG7IhW8iyLEQiMlEIISrRiE4ogZyQE/J6Bv3eZT2DawhRCZf9HmY9g2soYRHrGVwjEZkohBCVQM7IGXk9g37HtJ7BNRKRiUIIUYlGdEIJZEEWZEEWZEEWZEEWZEEW5IpckStyRa7IFbkiV+SKXJEbckNuyA25ITfkhuxnUBYPJSzCz6AsHx/HA7fen9/u57Pfef92Lz7u0F9P9/Pt7fB0e79ej4e/T9f39Q/9eD3d1vl2uo/PDvJ8+zrmAL9drmevj+Ov7eW/V8eNViyPe6bHet20r1v2/eVz7hfbty91y75Z7I93ufv2U96wn/192twve/e3/PyLv6lc98dVdud+37Kf7LGv+/ZFNuyPl/LYH6/KW/YL3/94QduyXx/7Le3c33J+RAv7unPftpyfuvD41bRzP2/5+dXH60ctW54/VTr7tezbb8uW/f74/nXT99/lf9vfcv7borHfNp2/tuTHvuzc3/L8b4XHr0nZub/l9a81zl/ry879tmXf+Pr7puvnb/tpy9ffhed/r33fftvy+PX++Pq77dvXtm/f/jy/n8ZHp+fL/Y/f7ny4dL+cvlzP8eG399vzb599++eVz/Dbodf7y/P56/v97NKvXxH5/c1f0vNRev/k/1TuH2o6jivCpw//6/8F",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u64, z: i16, u: i64) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n    // regression tests for issue #8176, superseded by issue #8791\n    assert(u >> (x as i64 - 2) == -1);\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> a == 32);\n    a = -a;\n    assert(a << 6 == -64);\n    assert(a << -a == -2);\n\n    assert(x >> (x - 1) == 0);\n\n    assert_eq(z >> 3, -97);\n\n    assert(z >> 14 == -1);\n    let rhs = (if x as i16 > 14 { 14 } else { x as i16 });\n    assert(z >> rhs == -1);\n    assert(-z >> rhs == 0);\n}\n",
      "path": ""
    }
  },
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
