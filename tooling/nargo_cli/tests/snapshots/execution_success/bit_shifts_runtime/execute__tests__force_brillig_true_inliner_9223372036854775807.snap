---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 584 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U64, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(7), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(6), location: 26 }, Call { location: 590 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(8), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 32 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 38 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 43 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 48 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(8), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U64, lhs: Relative(6), rhs: Relative(8) }, Mov { destination: Relative(6), source: Relative(9) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U64) }, Const { destination: Relative(9), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(12), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(9), location: 62 }, Call { location: 593 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 63 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 66 }, Call { location: 590 }, Const { destination: Relative(10), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U64, lhs: Relative(10), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 70 }, Jump { location: 117 }, Const { destination: Relative(12), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U64, lhs: Relative(6), rhs: Relative(12) }, JumpIf { condition: Relative(11), location: 74 }, Jump { location: 114 }, Const { destination: Relative(13), bit_size: Integer(U64), value: 1 }, Const { destination: Relative(14), bit_size: Integer(U64), value: 2 }, Const { destination: Relative(15), bit_size: Integer(U64), value: 1 }, Cast { destination: Relative(16), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 85 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U64, lhs: Relative(15), rhs: Relative(14) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Jump { location: 79 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(13) }, Const { destination: Relative(22), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U64, lhs: Relative(22), rhs: Relative(8) }, Const { destination: Relative(23), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U64, lhs: Relative(23), rhs: Relative(8) }, JumpIf { condition: Relative(17), location: 92 }, Jump { location: 94 }, Mov { destination: Relative(18), source: Relative(24) }, Jump { location: 96 }, Mov { destination: Relative(18), source: Relative(8) }, Jump { location: 96 }, Const { destination: Relative(22), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U64, lhs: Relative(22), rhs: Relative(15) }, Const { destination: Relative(23), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(24), op: Sub, bit_size: U64, lhs: Relative(23), rhs: Relative(15) }, JumpIf { condition: Relative(19), location: 102 }, Jump { location: 104 }, Mov { destination: Relative(20), source: Relative(24) }, Jump { location: 106 }, Mov { destination: Relative(20), source: Relative(15) }, Jump { location: 106 }, BinaryIntOp { destination: Relative(8), op: Div, bit_size: U64, lhs: Relative(18), rhs: Relative(20) }, BinaryIntOp { destination: Relative(21), op: Xor, bit_size: U1, lhs: Relative(17), rhs: Relative(19) }, JumpIf { condition: Relative(21), location: 110 }, Jump { location: 112 }, Const { destination: Relative(22), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(22), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U64, lhs: Relative(8), rhs: Relative(13) }, Jump { location: 116 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 18446744073709551615 }, Jump { location: 116 }, Jump { location: 119 }, BinaryIntOp { destination: Relative(8), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, Jump { location: 119 }, Mov { destination: Relative(4), source: Relative(8) }, Const { destination: Relative(6), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(4), rhs: Relative(6) }, JumpIf { condition: Relative(8), location: 125 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Cast { destination: Relative(6), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(8), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(8), bit_size: Integer(U64) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U8) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(8), rhs: Relative(6) }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 139 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, Const { destination: Relative(6), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(13), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 144 }, Jump { location: 191 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(15) }, JumpIf { condition: Relative(14), location: 148 }, Jump { location: 188 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(19), source: Relative(6), bit_size: Integer(U32) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 159 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U8, lhs: Relative(18), rhs: Relative(17) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Jump { location: 153 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(8), rhs: Relative(16) }, Const { destination: Relative(25), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U8, lhs: Relative(25), rhs: Relative(9) }, Const { destination: Relative(26), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U8, lhs: Relative(26), rhs: Relative(9) }, JumpIf { condition: Relative(20), location: 166 }, Jump { location: 168 }, Mov { destination: Relative(21), source: Relative(27) }, Jump { location: 170 }, Mov { destination: Relative(21), source: Relative(9) }, Jump { location: 170 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(25), rhs: Relative(18) }, Const { destination: Relative(26), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U8, lhs: Relative(26), rhs: Relative(18) }, JumpIf { condition: Relative(22), location: 176 }, Jump { location: 178 }, Mov { destination: Relative(23), source: Relative(27) }, Jump { location: 180 }, Mov { destination: Relative(23), source: Relative(18) }, Jump { location: 180 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U8, lhs: Relative(21), rhs: Relative(23) }, BinaryIntOp { destination: Relative(24), op: Xor, bit_size: U1, lhs: Relative(20), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 184 }, Jump { location: 186 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(25), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(9), rhs: Relative(16) }, Jump { location: 190 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 255 }, Jump { location: 190 }, Jump { location: 193 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U8, lhs: Relative(8), rhs: Relative(6) }, Jump { location: 193 }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 199 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Cast { destination: Relative(6), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 7 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 204 }, Call { location: 590 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(14), rhs: Relative(8) }, JumpIf { condition: Relative(11), location: 208 }, Jump { location: 255 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 8 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(16), location: 212 }, Jump { location: 252 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 1 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 1 }, Cast { destination: Relative(21), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 223 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U8, lhs: Relative(20), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Jump { location: 217 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U8, lhs: Relative(8), rhs: Relative(18) }, Const { destination: Relative(27), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U8, lhs: Relative(27), rhs: Relative(9) }, Const { destination: Relative(28), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U8, lhs: Relative(28), rhs: Relative(9) }, JumpIf { condition: Relative(22), location: 230 }, Jump { location: 232 }, Mov { destination: Relative(23), source: Relative(29) }, Jump { location: 234 }, Mov { destination: Relative(23), source: Relative(9) }, Jump { location: 234 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U8, lhs: Relative(27), rhs: Relative(20) }, Const { destination: Relative(28), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U8, lhs: Relative(28), rhs: Relative(20) }, JumpIf { condition: Relative(24), location: 240 }, Jump { location: 242 }, Mov { destination: Relative(25), source: Relative(29) }, Jump { location: 244 }, Mov { destination: Relative(25), source: Relative(20) }, Jump { location: 244 }, BinaryIntOp { destination: Relative(9), op: Div, bit_size: U8, lhs: Relative(23), rhs: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Xor, bit_size: U1, lhs: Relative(22), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 248 }, Jump { location: 250 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(27), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(9), rhs: Relative(18) }, Jump { location: 254 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 255 }, Jump { location: 254 }, Jump { location: 257 }, BinaryIntOp { destination: Relative(9), op: Shr, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Jump { location: 257 }, Mov { destination: Relative(8), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U8, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(11), location: 263 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Const { destination: Relative(8), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(9), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(9) }, Cast { destination: Relative(9), source: Relative(2), bit_size: Integer(U8) }, Const { destination: Relative(11), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, Not { destination: Relative(6), source: Relative(16), bit_size: U1 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(9), rhs: Relative(11) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(6) }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(18), location: 275 }, Call { location: 593 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 6 }, BinaryIntOp { destination: Relative(9), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, Mov { destination: Relative(6), source: Relative(9) }, Const { destination: Relative(9), bit_size: Integer(U8), value: 192 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U8, lhs: Relative(6), rhs: Relative(9) }, JumpIf { condition: Relative(18), location: 283 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(8), rhs: Relative(2) }, Mov { destination: Relative(8), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(8), bit_size: Integer(U8) }, Not { destination: Relative(9), source: Relative(16), bit_size: U1 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(9) }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(9) }, JumpIf { condition: Relative(16), location: 292 }, Call { location: 593 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(9), location: 295 }, Call { location: 590 }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(8) }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U8, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 302 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(6), location: 307 }, Call { location: 593 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(2), location: 310 }, Call { location: 590 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 316 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 321 }, Jump { location: 368 }, Const { destination: Relative(9), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(8), location: 325 }, Jump { location: 365 }, Const { destination: Relative(11), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(19), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 336 }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U16, lhs: Relative(18), rhs: Relative(16) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Jump { location: 330 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(11) }, Const { destination: Relative(25), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(4) }, JumpIf { condition: Relative(20), location: 343 }, Jump { location: 345 }, Mov { destination: Relative(21), source: Relative(27) }, Jump { location: 347 }, Mov { destination: Relative(21), source: Relative(4) }, Jump { location: 347 }, Const { destination: Relative(25), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U16, lhs: Relative(25), rhs: Relative(18) }, Const { destination: Relative(26), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(27), op: Sub, bit_size: U16, lhs: Relative(26), rhs: Relative(18) }, JumpIf { condition: Relative(22), location: 353 }, Jump { location: 355 }, Mov { destination: Relative(23), source: Relative(27) }, Jump { location: 357 }, Mov { destination: Relative(23), source: Relative(18) }, Jump { location: 357 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(21), rhs: Relative(23) }, BinaryIntOp { destination: Relative(24), op: Xor, bit_size: U1, lhs: Relative(20), rhs: Relative(22) }, JumpIf { condition: Relative(24), location: 361 }, Jump { location: 363 }, Const { destination: Relative(25), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(25), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(11) }, Jump { location: 367 }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, Jump { location: 367 }, Jump { location: 370 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 370 }, Mov { destination: Relative(2), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 376 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 14 }, Const { destination: Relative(8), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(8), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 381 }, Jump { location: 428 }, Const { destination: Relative(16), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(16) }, JumpIf { condition: Relative(11), location: 385 }, Jump { location: 425 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(21), source: Relative(2), bit_size: Integer(U32) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 396 }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U16, lhs: Relative(20), rhs: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Jump { location: 390 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(18) }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(4) }, JumpIf { condition: Relative(22), location: 403 }, Jump { location: 405 }, Mov { destination: Relative(23), source: Relative(29) }, Jump { location: 407 }, Mov { destination: Relative(23), source: Relative(4) }, Jump { location: 407 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U16, lhs: Relative(27), rhs: Relative(20) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(29), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(20) }, JumpIf { condition: Relative(24), location: 413 }, Jump { location: 415 }, Mov { destination: Relative(25), source: Relative(29) }, Jump { location: 417 }, Mov { destination: Relative(25), source: Relative(20) }, Jump { location: 417 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(23), rhs: Relative(25) }, BinaryIntOp { destination: Relative(26), op: Xor, bit_size: U1, lhs: Relative(22), rhs: Relative(24) }, JumpIf { condition: Relative(26), location: 421 }, Jump { location: 423 }, Const { destination: Relative(27), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(27), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(18) }, Jump { location: 427 }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, Jump { location: 427 }, Jump { location: 430 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 430 }, Mov { destination: Relative(5), source: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 436 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, Cast { destination: Relative(11), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(11), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(5), bit_size: Integer(U16) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U16, lhs: Relative(2), rhs: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U16, lhs: Relative(1), rhs: Relative(19) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(18) }, Not { destination: Relative(11), source: Relative(5), bit_size: U1 }, Cast { destination: Relative(18), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(5), source: Relative(11), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U16, lhs: Relative(18), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U16, lhs: Relative(11), rhs: Relative(2) }, Cast { destination: Relative(2), source: Relative(1), bit_size: Integer(U16) }, Const { destination: Relative(5), bit_size: Integer(U16), value: 15 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(11), location: 454 }, Call { location: 590 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 458 }, Jump { location: 505 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(18) }, JumpIf { condition: Relative(11), location: 462 }, Jump { location: 502 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(22), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(24), op: LessThan, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Not { destination: Relative(24), source: Relative(24), bit_size: U1 }, JumpIf { condition: Relative(24), location: 473 }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U16, lhs: Relative(21), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Jump { location: 467 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(19) }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(2) }, JumpIf { condition: Relative(23), location: 480 }, Jump { location: 482 }, Mov { destination: Relative(24), source: Relative(30) }, Jump { location: 484 }, Mov { destination: Relative(24), source: Relative(2) }, Jump { location: 484 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(28), rhs: Relative(21) }, Const { destination: Relative(29), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U16, lhs: Relative(29), rhs: Relative(21) }, JumpIf { condition: Relative(25), location: 490 }, Jump { location: 492 }, Mov { destination: Relative(26), source: Relative(30) }, Jump { location: 494 }, Mov { destination: Relative(26), source: Relative(21) }, Jump { location: 494 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(24), rhs: Relative(26) }, BinaryIntOp { destination: Relative(27), op: Xor, bit_size: U1, lhs: Relative(23), rhs: Relative(25) }, JumpIf { condition: Relative(27), location: 498 }, Jump { location: 500 }, Const { destination: Relative(28), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(28), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(19) }, Jump { location: 504 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65535 }, Jump { location: 504 }, Jump { location: 507 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 507 }, Mov { destination: Relative(5), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U16, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 512 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(11), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(3) }, Not { destination: Relative(11), source: Relative(19), bit_size: U1 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(19), rhs: Relative(11) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(11) }, JumpIf { condition: Relative(4), location: 525 }, Call { location: 593 }, Const { destination: Relative(11), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 529 }, Jump { location: 576 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 16 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U16, lhs: Relative(1), rhs: Relative(20) }, JumpIf { condition: Relative(19), location: 533 }, Jump { location: 573 }, Const { destination: Relative(21), bit_size: Integer(U16), value: 1 }, Const { destination: Relative(22), bit_size: Integer(U16), value: 2 }, Const { destination: Relative(23), bit_size: Integer(U16), value: 1 }, Cast { destination: Relative(24), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(24) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 544 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U16, lhs: Relative(23), rhs: Relative(22) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Jump { location: 538 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U16, lhs: Relative(5), rhs: Relative(21) }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(3) }, JumpIf { condition: Relative(25), location: 551 }, Jump { location: 553 }, Mov { destination: Relative(26), source: Relative(32) }, Jump { location: 555 }, Mov { destination: Relative(26), source: Relative(3) }, Jump { location: 555 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(27), op: LessThan, bit_size: U16, lhs: Relative(30), rhs: Relative(23) }, Const { destination: Relative(31), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U16, lhs: Relative(31), rhs: Relative(23) }, JumpIf { condition: Relative(27), location: 561 }, Jump { location: 563 }, Mov { destination: Relative(28), source: Relative(32) }, Jump { location: 565 }, Mov { destination: Relative(28), source: Relative(23) }, Jump { location: 565 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U16, lhs: Relative(26), rhs: Relative(28) }, BinaryIntOp { destination: Relative(29), op: Xor, bit_size: U1, lhs: Relative(25), rhs: Relative(27) }, JumpIf { condition: Relative(29), location: 569 }, Jump { location: 571 }, Const { destination: Relative(30), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(30), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(21) }, Jump { location: 575 }, Const { destination: Relative(3), bit_size: Integer(U16), value: 65535 }, Jump { location: 575 }, Jump { location: 578 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, Jump { location: 578 }, Mov { destination: Relative(1), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U16, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 583 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 589 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14514982005979867414 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "rdnNTlxHEEDhd5k1i9vd9dPNq0SWhfHYQkKAxhApsnj3dN2ug+1FNneySR1C6gtgFzMMP09fz1/evn9+ePr2/ON0+9fP05fLw+Pjw/fPj8/3d68Pz0/z3/48bfGPWk635eZU6xptDVlD17A1/HRb5+hrjH20bY2yxlTaHFOROWQNXcPW8DWmonNMxW5Osq1R1qhrTMXnmEqfQ9ewNXyNqYw5plK2m5NuOUvOmrPllJya03J6zp4zPUvP0rPw5lfCWk7JqTktp+fsOceavuUsOdPz9Dw9T8/T8/Q8PU+vp9fT6+n19Hp6Pb2eXk+vp9fTG+mN9EZ6I72R3khvpDfSG+mN9Mq2EYWoRCOEUMIIJzqBXJALckEuyAW5IBfkglyQC3INuUYUohKNECLkFmGEEyFLxMiIW1kRskZUohEhW4QSRjjRiZDniZS4nxWFqEQjhFDCCCc6gazIiqzIiqzIiqzIiqzIimzIhmzIhmzIhmzIhmzIhuzIjuzIjuzIjuzIjuzIjtyRO3JH7sgduSN35I7ckTvyQB7IA3kg7+fXI5QwwolOhDy/N9b9BvcoRCUaIYQSRjjRCeSCXJALckEuyAW5IBfkglyQK3JFrsgVuSJX5IpckStyRW7IDbkhN+SG3JAbckNuyA1ZkAVZkAVZkAVZkAVZkAVZkRVZkRVZkRVZkRU5brBuESMjbnBFISox5bo/+AuhhBFOdGJkxA2uKEQlkB05brDGc4q4wRVOhNwiRkbc4IpCVCJkiRBCCSOc6MTIiBtcUYiQNaIRQihhRMgW0YmxosUNrihEyB7RCCGUMCLkHtGJkRE3uCLkEVGJRgihxJTbFuFEJ0ZG3OCKQlSiEUIogVyRK3JFbsgNuSE35IbckBtyQ27IDVmQBVmQBVmQBVmQBVmQBVmRFVmRFVmRFVmRFVmRFdmQDdmQDdmQDdmQDdmQDdmR4wZbiahEI4RQIuR4Lh83uKITIyNucEUhKtEIIZRA7sgduSMP5IE8kAfyQB7IA3kgD+SRsmwbUYhKNEIIJYxwohPIBbkgF+SCXJALckEuyAW5IFfkilyRK3JFrsgVuSJX5IrckPcbbBGVaIQQSoQsEU50ImSNH9c2ohCVaITk1n6DeyALsiDvNxg/D+43uEchKtEIIZQwwolOIBuyIRuyIRuyIRuyIRuyITuyIzuyIzuyIzuyIzuyI3fkjtyRO3JH7sgduSN35I48kAfyQB7IA3kgD+SBPJBHyrptRCEq0QghlDDCiZA9YmTsN7hHIULuEY0QQgkjnOjEyNhvcI9CIFfkirzf4IgwwolOjIz9BvcoRCUaIQRyQ27IDbkhC7IgC7IgC7IgC7IgC7IgK7IiK7IiK7IiK7IiK7IiG7IhG7IhG7IhG7IhG7IhO7IjO7IjO7IjO7IjO3LcoOyvF21EIWrE+/vNiZfaPr9ezud4pe23197mK3Ivd5fz0+vp9unt8fHm9Pfd49v+H/14uXva5+vdZb53kuenr3NO8NvD4znq/ebX9vbfq/OFlVyer5F8rOuh/X5kPx5e1n4b1+2LHtkfI/fnT7XX7Zd6YL/G8/y1367dP/L1b/FDyb4/n1Vfue9H9sv42O/X7Ysc2J9P3XJ/Pgs7st/4/OcTmCP7+rFv5cr9I/cznwWw36/cH0fuZz425/58vL1uvx75+unH94/5IHpkX5x9bdft23Zk3z8+/37o83f53/aP3L9tPfft0P3ZVj/25cr9I3//rfHnZ9Ku3D/y/c+M+zPfrty3I/uDj98PPX7+tl+OfPwu/P139ev27cifn/vHx+/juv1u1+2PP+/303zr7v7h8sdvc99DujzcfXk855vf3p7uf3vv6z8vvIffBr9cnu/PX98u55B+/Uo4fpb6S7vcaB+f4ldj8eZoNzr003v87/8F",
  "file_map": {
    "50": {
      "source": "fn main(x: u64, y: u64, z: i16, u: i64) {\n    // runtime shifts on compile-time known values\n    assert(64 << y == 128);\n    assert(64 >> y == 32);\n    // runtime shifts on runtime values\n    assert(x << y == 128);\n    assert(x >> y == 32);\n    // regression tests for issue #8176, superseded by issue #8791\n    assert(u >> (x as i64 - 2) == -1);\n\n    // Bit-shift with signed integers\n    let mut a: i8 = y as i8;\n    let mut b: i8 = x as i8;\n    assert(b << 1 == -128);\n    assert(b >> 2 == 16);\n    assert(b >> a == 32);\n    a = -a;\n    assert(a << 6 == -64);\n    assert(a << -a == -2);\n\n    assert(x >> (x - 1) == 0);\n\n    assert_eq(z >> 3, -97);\n\n    assert(z >> 14 == -1);\n    let rhs = (if x as i16 > 14 { 14 } else { x as i16 });\n    assert(z >> rhs == -1);\n    assert(-z >> rhs == 0);\n}\n",
      "path": ""
    }
  },
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
