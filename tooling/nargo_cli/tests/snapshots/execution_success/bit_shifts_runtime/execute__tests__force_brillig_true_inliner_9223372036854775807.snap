---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "private"
      },
      {
        "name": "u",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2, _3]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ (1, _1) 0 ], EXPR [ (1, _2) 0 ], EXPR [ (1, _3) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(5), offset_address: Relative(6) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U64) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U64) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U16) }, Cast { destination: Direct(32839), source: Direct(32839), bit_size: Integer(U64) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Mov { destination: Relative(4), source: Direct(32839) }, Call { location: 19 }, Call { location: 20 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 439 }, Const { destination: Relative(5), bit_size: Integer(U64), value: 64 }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 128 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 28 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(5), rhs: Relative(2) }, Const { destination: Relative(5), bit_size: Integer(U64), value: 32 }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(8), location: 34 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shl, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 39 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 44 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Cast { destination: Relative(5), source: Relative(1), bit_size: Integer(U64) }, Const { destination: Relative(6), bit_size: Integer(U64), value: 2 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U64, lhs: Relative(5), rhs: Relative(6) }, Mov { destination: Relative(5), source: Relative(7) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U64) }, Const { destination: Relative(7), bit_size: Integer(U64), value: 9223372036854775808 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U64, lhs: Relative(1), rhs: Relative(7) }, Not { destination: Relative(9), source: Relative(8), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U64, lhs: Relative(6), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(10), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U1, lhs: Relative(6), rhs: Relative(9) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(7), rhs: Relative(9) }, JumpIf { condition: Relative(6), location: 58 }, Call { location: 445 }, Const { destination: Relative(8), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U64, lhs: Relative(8), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 62 }, Jump { location: 93 }, Const { destination: Relative(9), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(10), op: Shl, bit_size: U64, lhs: Relative(9), rhs: Relative(5) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U64, lhs: Relative(4), rhs: Relative(9) }, Const { destination: Relative(16), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U64, lhs: Relative(16), rhs: Relative(6) }, Const { destination: Relative(17), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(18), op: Sub, bit_size: U64, lhs: Relative(17), rhs: Relative(6) }, JumpIf { condition: Relative(11), location: 71 }, Jump { location: 73 }, Mov { destination: Relative(12), source: Relative(18) }, Jump { location: 75 }, Mov { destination: Relative(12), source: Relative(6) }, Jump { location: 75 }, Const { destination: Relative(16), bit_size: Integer(U64), value: 9223372036854775807 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U64, lhs: Relative(16), rhs: Relative(10) }, Const { destination: Relative(17), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(18), op: Sub, bit_size: U64, lhs: Relative(17), rhs: Relative(10) }, JumpIf { condition: Relative(13), location: 81 }, Jump { location: 83 }, Mov { destination: Relative(14), source: Relative(18) }, Jump { location: 85 }, Mov { destination: Relative(14), source: Relative(10) }, Jump { location: 85 }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U64, lhs: Relative(12), rhs: Relative(14) }, BinaryIntOp { destination: Relative(15), op: Xor, bit_size: U1, lhs: Relative(11), rhs: Relative(13) }, JumpIf { condition: Relative(15), location: 89 }, Jump { location: 91 }, Const { destination: Relative(16), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(16), rhs: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U64, lhs: Relative(6), rhs: Relative(9) }, Jump { location: 95 }, BinaryIntOp { destination: Relative(6), op: Shr, bit_size: U64, lhs: Relative(4), rhs: Relative(5) }, Jump { location: 95 }, Const { destination: Relative(4), bit_size: Integer(U64), value: 18446744073709551615 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 100 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U64) }, Cast { destination: Relative(2), source: Relative(4), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(5), source: Relative(6), bit_size: Integer(U64) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U8, lhs: Relative(6), rhs: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 113 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 2 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(10), rhs: Relative(6) }, JumpIf { condition: Relative(9), location: 118 }, Jump { location: 149 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U8, lhs: Relative(11), rhs: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(7) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(7) }, JumpIf { condition: Relative(13), location: 127 }, Jump { location: 129 }, Mov { destination: Relative(14), source: Relative(20) }, Jump { location: 131 }, Mov { destination: Relative(14), source: Relative(7) }, Jump { location: 131 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 137 }, Jump { location: 139 }, Mov { destination: Relative(16), source: Relative(20) }, Jump { location: 141 }, Mov { destination: Relative(16), source: Relative(12) }, Jump { location: 141 }, BinaryIntOp { destination: Relative(7), op: Div, bit_size: U8, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Xor, bit_size: U1, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 145 }, Jump { location: 147 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U8, lhs: Relative(18), rhs: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Sub, bit_size: U8, lhs: Relative(7), rhs: Relative(11) }, Jump { location: 151 }, BinaryIntOp { destination: Relative(7), op: Shr, bit_size: U8, lhs: Relative(6), rhs: Relative(5) }, Jump { location: 151 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 16 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(5) }, JumpIf { condition: Relative(9), location: 156 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(9), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U8, lhs: Relative(9), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 160 }, Jump { location: 191 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U8, lhs: Relative(11), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U8, lhs: Relative(6), rhs: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(5) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(5) }, JumpIf { condition: Relative(13), location: 169 }, Jump { location: 171 }, Mov { destination: Relative(14), source: Relative(20) }, Jump { location: 173 }, Mov { destination: Relative(14), source: Relative(5) }, Jump { location: 173 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U8, lhs: Relative(18), rhs: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U8, lhs: Relative(19), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 179 }, Jump { location: 181 }, Mov { destination: Relative(16), source: Relative(20) }, Jump { location: 183 }, Mov { destination: Relative(16), source: Relative(12) }, Jump { location: 183 }, BinaryIntOp { destination: Relative(5), op: Div, bit_size: U8, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Xor, bit_size: U1, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 187 }, Jump { location: 189 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(18), rhs: Relative(5) }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(11) }, Jump { location: 193 }, BinaryIntOp { destination: Relative(5), op: Shr, bit_size: U8, lhs: Relative(6), rhs: Relative(2) }, Jump { location: 193 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 32 }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U8, lhs: Relative(5), rhs: Relative(6) }, JumpIf { condition: Relative(7), location: 198 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(2) }, Mov { destination: Relative(2), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(2), bit_size: Integer(U8) }, Cast { destination: Relative(7), source: Relative(4), bit_size: Integer(U8) }, Const { destination: Relative(4), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(7), rhs: Relative(4) }, Not { destination: Relative(7), source: Relative(11), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(7) }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(12), location: 211 }, Call { location: 445 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 6 }, BinaryIntOp { destination: Relative(7), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, Const { destination: Relative(6), bit_size: Integer(U8), value: 192 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U8, lhs: Relative(7), rhs: Relative(6) }, JumpIf { condition: Relative(12), location: 218 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(13) } }, BinaryIntOp { destination: Relative(6), op: Sub, bit_size: U8, lhs: Relative(5), rhs: Relative(2) }, Mov { destination: Relative(5), source: Relative(6) }, Cast { destination: Relative(6), source: Relative(5), bit_size: Integer(U8) }, Not { destination: Relative(7), source: Relative(11), bit_size: U1 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(7) }, JumpIf { condition: Relative(6), location: 227 }, Call { location: 445 }, BinaryIntOp { destination: Relative(4), op: Shl, bit_size: U8, lhs: Relative(2), rhs: Relative(5) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 254 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U8, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 233 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U64), value: 1 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U64, lhs: Relative(1), rhs: Relative(2) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U64, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 238 }, Call { location: 445 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U64, lhs: Relative(1), rhs: Relative(4) }, Const { destination: Relative(4), bit_size: Integer(U64), value: 0 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U64, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 244 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 3 }, Const { destination: Relative(6), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(6), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 249 }, Jump { location: 280 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(11), op: Shl, bit_size: U16, lhs: Relative(7), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(7) }, Const { destination: Relative(17), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(4) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U16, lhs: Relative(18), rhs: Relative(4) }, JumpIf { condition: Relative(12), location: 258 }, Jump { location: 260 }, Mov { destination: Relative(13), source: Relative(19) }, Jump { location: 262 }, Mov { destination: Relative(13), source: Relative(4) }, Jump { location: 262 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(17), rhs: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(19), op: Sub, bit_size: U16, lhs: Relative(18), rhs: Relative(11) }, JumpIf { condition: Relative(14), location: 268 }, Jump { location: 270 }, Mov { destination: Relative(15), source: Relative(19) }, Jump { location: 272 }, Mov { destination: Relative(15), source: Relative(11) }, Jump { location: 272 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(13), rhs: Relative(15) }, BinaryIntOp { destination: Relative(16), op: Xor, bit_size: U1, lhs: Relative(12), rhs: Relative(14) }, JumpIf { condition: Relative(16), location: 276 }, Jump { location: 278 }, Const { destination: Relative(17), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(17), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(7) }, Jump { location: 282 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 282 }, Const { destination: Relative(2), bit_size: Integer(U16), value: 65439 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U16, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 287 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 14 }, Const { destination: Relative(7), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U16, lhs: Relative(7), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 292 }, Jump { location: 323 }, Const { destination: Relative(11), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(12), op: Shl, bit_size: U16, lhs: Relative(11), rhs: Relative(2) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(11) }, Const { destination: Relative(18), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U16, lhs: Relative(18), rhs: Relative(4) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(4) }, JumpIf { condition: Relative(13), location: 301 }, Jump { location: 303 }, Mov { destination: Relative(14), source: Relative(20) }, Jump { location: 305 }, Mov { destination: Relative(14), source: Relative(4) }, Jump { location: 305 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U16, lhs: Relative(18), rhs: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 311 }, Jump { location: 313 }, Mov { destination: Relative(16), source: Relative(20) }, Jump { location: 315 }, Mov { destination: Relative(16), source: Relative(12) }, Jump { location: 315 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U16, lhs: Relative(14), rhs: Relative(16) }, BinaryIntOp { destination: Relative(17), op: Xor, bit_size: U1, lhs: Relative(13), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 319 }, Jump { location: 321 }, Const { destination: Relative(18), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(18), rhs: Relative(4) }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(4), rhs: Relative(11) }, Jump { location: 325 }, BinaryIntOp { destination: Relative(4), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, Jump { location: 325 }, Const { destination: Relative(5), bit_size: Integer(U16), value: 65535 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U16, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(11), location: 330 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Cast { destination: Relative(11), source: Relative(1), bit_size: Integer(U16) }, Cast { destination: Relative(4), source: Relative(11), bit_size: Integer(U64) }, Cast { destination: Relative(1), source: Relative(4), bit_size: Integer(U16) }, Const { destination: Relative(13), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U16, lhs: Relative(2), rhs: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U16, lhs: Relative(1), rhs: Relative(13) }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(12) }, Not { destination: Relative(11), source: Relative(4), bit_size: U1 }, Cast { destination: Relative(12), source: Relative(4), bit_size: Integer(U16) }, Cast { destination: Relative(4), source: Relative(11), bit_size: Integer(U16) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U16, lhs: Relative(12), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U16, lhs: Relative(4), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U16, lhs: Relative(11), rhs: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(11), rhs: Relative(3) }, JumpIf { condition: Relative(4), location: 347 }, Jump { location: 378 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(13), op: Shl, bit_size: U16, lhs: Relative(12), rhs: Relative(1) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U16, lhs: Relative(3), rhs: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U16, lhs: Relative(19), rhs: Relative(2) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(2) }, JumpIf { condition: Relative(14), location: 356 }, Jump { location: 358 }, Mov { destination: Relative(15), source: Relative(21) }, Jump { location: 360 }, Mov { destination: Relative(15), source: Relative(2) }, Jump { location: 360 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U16, lhs: Relative(19), rhs: Relative(13) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(13) }, JumpIf { condition: Relative(16), location: 366 }, Jump { location: 368 }, Mov { destination: Relative(17), source: Relative(21) }, Jump { location: 370 }, Mov { destination: Relative(17), source: Relative(13) }, Jump { location: 370 }, BinaryIntOp { destination: Relative(2), op: Div, bit_size: U16, lhs: Relative(15), rhs: Relative(17) }, BinaryIntOp { destination: Relative(18), op: Xor, bit_size: U1, lhs: Relative(14), rhs: Relative(16) }, JumpIf { condition: Relative(18), location: 374 }, Jump { location: 376 }, Const { destination: Relative(19), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(19), rhs: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(12) }, Jump { location: 380 }, BinaryIntOp { destination: Relative(2), op: Shr, bit_size: U16, lhs: Relative(3), rhs: Relative(1) }, Jump { location: 380 }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U16, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 384 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Const { destination: Relative(2), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U16, lhs: Relative(2), rhs: Relative(3) }, Mov { destination: Relative(5), source: Relative(4) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Integer(U16) }, Cast { destination: Relative(12), source: Relative(3), bit_size: Integer(U16) }, Const { destination: Relative(3), bit_size: Integer(U16), value: 32768 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(3) }, Not { destination: Relative(12), source: Relative(13), bit_size: U1 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U16, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U1, lhs: Relative(13), rhs: Relative(12) }, BinaryIntOp { destination: Relative(4), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(12) }, JumpIf { condition: Relative(4), location: 397 }, Call { location: 445 }, Const { destination: Relative(12), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U16, lhs: Relative(12), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 401 }, Jump { location: 432 }, Const { destination: Relative(13), bit_size: Integer(U16), value: 1 }, BinaryIntOp { destination: Relative(14), op: Shl, bit_size: U16, lhs: Relative(13), rhs: Relative(1) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U16, lhs: Relative(5), rhs: Relative(13) }, Const { destination: Relative(20), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U16, lhs: Relative(20), rhs: Relative(3) }, Const { destination: Relative(21), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U16, lhs: Relative(21), rhs: Relative(3) }, JumpIf { condition: Relative(15), location: 410 }, Jump { location: 412 }, Mov { destination: Relative(16), source: Relative(22) }, Jump { location: 414 }, Mov { destination: Relative(16), source: Relative(3) }, Jump { location: 414 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 32767 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U16, lhs: Relative(20), rhs: Relative(14) }, Const { destination: Relative(21), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(22), op: Sub, bit_size: U16, lhs: Relative(21), rhs: Relative(14) }, JumpIf { condition: Relative(17), location: 420 }, Jump { location: 422 }, Mov { destination: Relative(18), source: Relative(22) }, Jump { location: 424 }, Mov { destination: Relative(18), source: Relative(14) }, Jump { location: 424 }, BinaryIntOp { destination: Relative(3), op: Div, bit_size: U16, lhs: Relative(16), rhs: Relative(18) }, BinaryIntOp { destination: Relative(19), op: Xor, bit_size: U1, lhs: Relative(15), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 428 }, Jump { location: 430 }, Const { destination: Relative(20), bit_size: Integer(U16), value: 0 }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(20), rhs: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Sub, bit_size: U16, lhs: Relative(3), rhs: Relative(13) }, Jump { location: 434 }, BinaryIntOp { destination: Relative(3), op: Shr, bit_size: U16, lhs: Relative(5), rhs: Relative(1) }, Jump { location: 434 }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U16, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(1), location: 438 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 444 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
