---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 122 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 111 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 109 }, Const { destination: Relative(4), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(5), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 105 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 103 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(11) }, Store { destination_pointer: Relative(12), source: Relative(1) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(3) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(4) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(6) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(7) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(8) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(9) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(3), bit_size: Integer(U8), value: 34 }, Const { destination: Relative(11), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 58 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 44 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 57 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 125 }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 29 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(11) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(12) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(1) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(14) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(7) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(15) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(16) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(4) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(8) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(9) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(5) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(6) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(3) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(13) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(17) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Relative(18) }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(2), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Relative(1)), HeapArray(HeapArray { pointer: Relative(3), size: 9 }), HeapArray(HeapArray { pointer: Relative(4), size: 28 }), MemoryAddress(Relative(2))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 9 }, Array { value_types: [Simple(Integer(U8))], size: 28 }, Simple(Integer(U1))] }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 127 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "tdTNjqJAFEDhd6k1C279l6/S6RhU7JAQNLRMMjG8+4Dn6ujCpDe94YjF/dhQdTWHdjd9bbvhePo2m4+r2Y1d33df2/60by7daVj+vZp6vYgzG1sZ8SSQSBLJpNxiayLEEhSLYlEsikWxKBbFoTgUh+JQHIpDcSgOxaE4FI/iUTyKR/EoflHCkkgSyaTcEmoixBJHPEEJKAEloASUiBJRIkpEiSgRJaJElIgSURJKQkkoCSWhJJSEklASSkLJKBklo2SUjJJRMkpGySgZpaAUlIJSUApKQSkoBaWgFBSpa61ordZpvTZoozZps1Y9UU/UE/VEPVFP1Fs/5rg2abO20PWDjvNcmfvm2F7Gtl33xtNuWfbQuRnb4WI2w9T3lfnT9NPtoe9zM9x6acZlta5MOxyWLuCx69v111z9n67fj4otVqfF1f4BhFdB3gtRvAJRwmNe3E/nfYk6HyS+e797P5+L6Hyx7jFv7cu8/7355JPOp1y/zH8ud82+G19OwHmVxq7Z9a3eHqdh/7R6+Xu+r9xP0PN42reHaWxX6ekYXa4fYm0lNn3O6/v+AQ==",
  "file_map": {
    "13": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_default)]\n// docs:start:default-trait\npub trait Default {\n    fn default() -> Self;\n}\n// docs:end:default-trait\n\ncomptime fn derive_default(s: TypeDefinition) -> Quoted {\n    let name = quote { $crate::default::Default };\n    let signature = quote { fn default() -> Self };\n    let for_each_field = |name| quote { $name: $crate::default::Default::default() };\n    let body = |fields| quote { Self { $fields } };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote { , }, body)\n}\n\nimpl Default for Field {\n    fn default() -> Field {\n        0\n    }\n}\n\nimpl Default for u1 {\n    fn default() -> u1 {\n        0\n    }\n}\nimpl Default for u8 {\n    fn default() -> u8 {\n        0\n    }\n}\nimpl Default for u16 {\n    fn default() -> u16 {\n        0\n    }\n}\nimpl Default for u32 {\n    fn default() -> u32 {\n        0\n    }\n}\nimpl Default for u64 {\n    fn default() -> u64 {\n        0\n    }\n}\n\nimpl Default for u128 {\n    fn default() -> u128 {\n        0\n    }\n}\n\nimpl Default for i8 {\n    fn default() -> i8 {\n        0\n    }\n}\nimpl Default for i16 {\n    fn default() -> i16 {\n        0\n    }\n}\nimpl Default for i32 {\n    fn default() -> i32 {\n        0\n    }\n}\nimpl Default for i64 {\n    fn default() -> i64 {\n        0\n    }\n}\n\nimpl Default for () {\n    fn default() -> () {\n        ()\n    }\n}\nimpl Default for bool {\n    fn default() -> bool {\n        false\n    }\n}\n\nimpl<T, let N: u32> Default for [T; N]\nwhere\n    T: Default,\n{\n    fn default() -> [T; N] {\n        [T::default(); N]\n    }\n}\n\nimpl<T> Default for [T] {\n    fn default() -> [T] {\n        &[]\n    }\n}\n\nimpl<A, B> Default for (A, B)\nwhere\n    A: Default,\n    B: Default,\n{\n    fn default() -> (A, B) {\n        (A::default(), B::default())\n    }\n}\n\nimpl<A, B, C> Default for (A, B, C)\nwhere\n    A: Default,\n    B: Default,\n    C: Default,\n{\n    fn default() -> (A, B, C) {\n        (A::default(), B::default(), C::default())\n    }\n}\n\nimpl<A, B, C, D> Default for (A, B, C, D)\nwhere\n    A: Default,\n    B: Default,\n    C: Default,\n    D: Default,\n{\n    fn default() -> (A, B, C, D) {\n        (A::default(), B::default(), C::default(), D::default())\n    }\n}\n\nimpl<A, B, C, D, E> Default for (A, B, C, D, E)\nwhere\n    A: Default,\n    B: Default,\n    C: Default,\n    D: Default,\n    E: Default,\n{\n    fn default() -> (A, B, C, D, E) {\n        (A::default(), B::default(), C::default(), D::default(), E::default())\n    }\n}\n",
      "path": "std/default.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "use std::hash::{Hash, Hasher};\n\n#[derive_via(derive_do_nothing)]\ntrait DoNothing {\n    fn do_nothing(self);\n}\n\n#[derive(DoNothing)]\nstruct MyStruct {\n    my_field: u32,\n}\n\ncomptime fn derive_do_nothing(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let generics = s.generics().map(|g| quote { $g }).join(quote {,});\n    quote {\n        impl<$generics> DoNothing for $typ {\n            fn do_nothing(_self: Self) {\n                // Traits can't tell us what to do\n                println(\"something\");\n            }\n        }\n    }\n}\n\n// Test stdlib derive fns & multiple traits\n// - We can derive Ord and Hash even though std::cmp::Ordering and std::hash::Hasher aren't imported\n// - We need to define MyOtherOtherStruct first since MyOtherStruct references it as a field and\n//   attributes are run in reading order. If it were defined afterward, the derived Eq impl for MyOtherStruct\n//   would error that MyOtherOtherStruct doesn't (yet) implement Eq.\n#[derive(Eq, Default, Hash, Ord)]\nstruct MyOtherOtherStruct<T> {\n    x: T,\n}\n\n#[derive(Eq, Default, Hash, Ord)]\nstruct MyOtherStruct<A, B> {\n    field1: A,\n    field2: B,\n    field3: MyOtherOtherStruct<B>,\n}\n\n#[derive(Eq, Default, Hash, Ord)]\nstruct EmptyStruct {}\n\nfn main() {\n    let s = MyStruct { my_field: 1 };\n    s.do_nothing();\n\n    let o: MyOtherStruct<Field, u32> = MyOtherStruct::default();\n    assert_eq(o, o);\n\n    let o: MyOtherStruct<u8, [str<2>]> = MyOtherStruct::default();\n    assert_eq(o, o);\n\n    // Field & str<2> above don't implement Ord\n    let o1 = MyOtherStruct {\n        field1: 12 as u32,\n        field2: 24 as i8,\n        field3: MyOtherOtherStruct { x: 54 as i8 },\n    };\n    let o2 = MyOtherStruct {\n        field1: 12 as u32,\n        field2: 24 as i8,\n        field3: MyOtherOtherStruct { x: 55 as i8 },\n    };\n    assert(o1 < o2);\n\n    let mut hasher = TestHasher { result: 0 };\n    o1.hash(&mut hasher);\n    assert_eq(hasher.finish(), 12 + 24 + 54);\n\n    let empty = EmptyStruct {};\n    assert_eq(empty, empty);\n}\n\nstruct TestHasher {\n    result: Field,\n}\n\nimpl std::hash::Hasher for TestHasher {\n    fn finish(self) -> Field {\n        self.result\n    }\n\n    fn write(&mut self, input: Field) {\n        self.result += input;\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
