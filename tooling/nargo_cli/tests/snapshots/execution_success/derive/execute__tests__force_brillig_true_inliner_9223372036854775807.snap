---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/82ZzW7TQBDHx7GdZGOncWlz60PYTYrDLQdexNRE4oIQ4gFygAu8NLXYsZfJJCDyH+SRrI29m9987O6MPyIaJPJtQlcIQ3741vl2EvTHL8fen5fXSeWEXiR/V263TvEPaP/GeWZkwy+ZbxT/cuY5b48DP/SF9c5fjiz4ndOwPqz85/mz9P/ugs+Z9/XbBV8jmC31RvMVx399cEH8DPgt8xMb/hPzU5v492ttamP/jvkzG/4b5s9t+O+Z72z49dLzFjQI7zXWnQXXgXmgiYQ+ot/3CQn9C2Erui5GQh/bI+PDuYJjlyu2FkqfzGG5oidX9GisCZAVA1kJkJUCWVMgawZkzYEszhG2Na1+Z1vTHh+1vAPMeb39uQ2/r2lLE/6mYf6Nzfz28V/ZzO8z8wub+Pf8W5v49zX/lU38W64rdzSIrMn3wXVcDazav63JrH8hbLWqyffCHhkfWZPXiq2F0idz5FrRs1b0aKwYyMqArBmQNQeyciALGfvlSO2KgKwUyLoBssa6Vh2QhVwTq5HaVQBZCZA11jWB3I9TIGusefUWyOL7OO1dYyd735bXSaU9lwH5Jdse02kstPcXPD5Rxmv3Vl295nX66fOHj19ISAjSChYb5s4Y8CD+PznDlfzw3P2h/0FhLc+M11qi0xtiCmyVk9zJ3rfldVIVdBrX/6C3vKR3RXqiIOU8VcZORB+P/Sr8CosA8mNE+BBHQldGw3pKjnj99e7Xpu0kPg5xCDcwCf2pGP/dn4cvRUM/9v9o56FuqsOmOTRPTdtunxsZp07CjzY/AZZW++gWHQAA",
  "debug_symbols": "1dzdattAEAXgd9G1LmZ29mfWr1JCkG05CIRsZLtQjN+9UiqnpmkV3HSozk2IzGrmYDh8V95Lsa3X55fnptvtj8Xqy6Vo95vq1Oy74elyLYt137Rt8/J8/3FB4x+W1/PHQ9WNj8dT1Z+KFbvsyqLutsO/Qn6YsGvaulgFupbvDgel6WxQfjvKcn0qC/a244Pt+Gg7PtmOV9vx2XS8I9vxbDve2Y63ba2zba2zba2zba2zba2zba2zba3YtlZsWyu2rRXb1opta8W2tWLbWrFtrdi2Vmxb621b621b621b621b621b6z/fWp/jbTzH+aOaeTqanbwdde6Ro2PoiBg6IYZWxNAZMHQgxNCMGNohhhbE0B4xNKKIAVHEgChiQBQxIIoYEUWMiCJGRBEjoogRUcSIKGJEFDEiihgRRYyIIiZEEROiiAlRxIQoYkIUMSGKmBBFTIgiJkQRE6KIiiiiIoqoiCIqooiKKKIiiqiIIiqiiIoooiKKmBFFzIgiZkQRM6KIGVHEjChiRhQxI4qYEUXMiCIyIZLIhGgiEyKKTIgqMiGyyIToIhMijEyIMjIh0sgEaSND2siQNjKkjQxp4z/4YfH/SA1pIy/VxuTTdDQpvUu9VBvnUy/VxvnUS7VxNrVbqo3zqX9vo7pbElaRD1JHlumwj/7nhvBjgbNeIJ9fEEhvC8Ld1zkt8NYLgvWCaL0gWS/QBxe8vpT/4qU//Ob8g5cebdHTdXj6WvVNtW7r6VqV3bnb3N2ycvp2qH+5cOXQ7zf19tzX49Urd7eujJFZpGTRYfAw/Ds=",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "13": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_default)]\n// docs:start:default-trait\npub trait Default {\n    fn default() -> Self;\n}\n// docs:end:default-trait\n\ncomptime fn derive_default(s: TypeDefinition) -> Quoted {\n    let name = quote { Default };\n    let signature = quote { fn default() -> Self };\n    let for_each_field = |name| quote { $name: Default::default() };\n    let body = |fields| quote { Self { $fields } };\n    crate::meta::make_trait_impl(s, name, signature, for_each_field, quote { , }, body)\n}\n\nimpl Default for Field {\n    fn default() -> Field {\n        0\n    }\n}\n\nimpl Default for u1 {\n    fn default() -> u1 {\n        0\n    }\n}\nimpl Default for u8 {\n    fn default() -> u8 {\n        0\n    }\n}\nimpl Default for u16 {\n    fn default() -> u16 {\n        0\n    }\n}\nimpl Default for u32 {\n    fn default() -> u32 {\n        0\n    }\n}\nimpl Default for u64 {\n    fn default() -> u64 {\n        0\n    }\n}\n\nimpl Default for u128 {\n    fn default() -> u128 {\n        0\n    }\n}\n\nimpl Default for i8 {\n    fn default() -> i8 {\n        0\n    }\n}\nimpl Default for i16 {\n    fn default() -> i16 {\n        0\n    }\n}\nimpl Default for i32 {\n    fn default() -> i32 {\n        0\n    }\n}\nimpl Default for i64 {\n    fn default() -> i64 {\n        0\n    }\n}\n\nimpl Default for () {\n    fn default() -> () {\n        ()\n    }\n}\nimpl Default for bool {\n    fn default() -> bool {\n        false\n    }\n}\n\nimpl<T, let N: u32> Default for [T; N]\nwhere\n    T: Default,\n{\n    fn default() -> [T; N] {\n        [T::default(); N]\n    }\n}\n\nimpl<T> Default for [T] {\n    fn default() -> [T] {\n        &[]\n    }\n}\n\nimpl<A, B> Default for (A, B)\nwhere\n    A: Default,\n    B: Default,\n{\n    fn default() -> (A, B) {\n        (A::default(), B::default())\n    }\n}\n\nimpl<A, B, C> Default for (A, B, C)\nwhere\n    A: Default,\n    B: Default,\n    C: Default,\n{\n    fn default() -> (A, B, C) {\n        (A::default(), B::default(), C::default())\n    }\n}\n\nimpl<A, B, C, D> Default for (A, B, C, D)\nwhere\n    A: Default,\n    B: Default,\n    C: Default,\n    D: Default,\n{\n    fn default() -> (A, B, C, D) {\n        (A::default(), B::default(), C::default(), D::default())\n    }\n}\n\nimpl<A, B, C, D, E> Default for (A, B, C, D, E)\nwhere\n    A: Default,\n    B: Default,\n    C: Default,\n    D: Default,\n    E: Default,\n{\n    fn default() -> (A, B, C, D, E) {\n        (A::default(), B::default(), C::default(), D::default(), E::default())\n    }\n}\n",
      "path": "std/default.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "use std::hash::{Hash, Hasher};\n\n#[derive_via(derive_do_nothing)]\ntrait DoNothing {\n    fn do_nothing(self);\n}\n\n#[derive(DoNothing)]\nstruct MyStruct {\n    my_field: u32,\n}\n\ncomptime fn derive_do_nothing(s: TypeDefinition) -> Quoted {\n    let typ = s.as_type();\n    let generics = s.generics().map(|g| quote { $g }).join(quote {,});\n    quote {\n        impl<$generics> DoNothing for $typ {\n            fn do_nothing(_self: Self) {\n                // Traits can't tell us what to do\n                println(\"something\");\n            }\n        }\n    }\n}\n\n// Test stdlib derive fns & multiple traits\n// - We can derive Ord and Hash even though std::cmp::Ordering and std::hash::Hasher aren't imported\n// - We need to define MyOtherOtherStruct first since MyOtherStruct references it as a field and\n//   attributes are run in reading order. If it were defined afterward, the derived Eq impl for MyOtherStruct\n//   would error that MyOtherOtherStruct doesn't (yet) implement Eq.\n#[derive(Eq, Default, Hash, Ord)]\nstruct MyOtherOtherStruct<T> {\n    x: T,\n}\n\n#[derive(Eq, Default, Hash, Ord)]\nstruct MyOtherStruct<A, B> {\n    field1: A,\n    field2: B,\n    field3: MyOtherOtherStruct<B>,\n}\n\n#[derive(Eq, Default, Hash, Ord)]\nstruct EmptyStruct {}\n\nfn main() {\n    let s = MyStruct { my_field: 1 };\n    s.do_nothing();\n\n    let o: MyOtherStruct<Field, u32> = MyOtherStruct::default();\n    assert_eq(o, o);\n\n    let o: MyOtherStruct<u8, [str<2>]> = MyOtherStruct::default();\n    assert_eq(o, o);\n\n    // Field & str<2> above don't implement Ord\n    let o1 = MyOtherStruct {\n        field1: 12 as u32,\n        field2: 24 as i8,\n        field3: MyOtherOtherStruct { x: 54 as i8 },\n    };\n    let o2 = MyOtherStruct {\n        field1: 12 as u32,\n        field2: 24 as i8,\n        field3: MyOtherOtherStruct { x: 55 as i8 },\n    };\n    assert(o1 < o2);\n\n    let mut hasher = TestHasher { result: 0 };\n    o1.hash(&mut hasher);\n    assert_eq(hasher.finish(), 12 + 24 + 54);\n\n    let empty = EmptyStruct {};\n    assert_eq(empty, empty);\n}\n\nstruct TestHasher {\n    result: Field,\n}\n\nimpl std::hash::Hasher for TestHasher {\n    fn finish(self) -> Field {\n        self.result\n    }\n\n    fn write(&mut self, input: Field) {\n        self.result += input;\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
