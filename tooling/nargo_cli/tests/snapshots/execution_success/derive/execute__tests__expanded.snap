---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::hash::{Hash, Hasher};

trait DoNothing {
    fn do_nothing(self);
}

struct MyStruct {
    my_field: u32,
}

impl DoNothing for MyStruct {
    fn do_nothing(_self: Self) {
        println("something");
    }
}

comptime fn derive_do_nothing(s: TypeDefinition) -> Quoted {
    let typ: Type = s.as_type();
    let generics: Quoted =
        s.generics().map(|g: (Type, Option<Type>)| -> Quoted quote { $g }).join(quote { ,  });
    quote {
        impl < $generics > DoNothing for $typ {
            fn do_nothing(_self: Self) {
                // Traits can't tell us what to do
                println("something");
            }
        }
    }
}

struct MyOtherOtherStruct<T> {
    x: T,
}

impl<T> Default for MyOtherOtherStruct<T>
where
    T: Default,
{
    fn default() -> Self {
        Self { x: T::default() }
    }
}

impl<T> Eq for MyOtherOtherStruct<T>
where
    T: Eq,
{
    fn eq(_self: Self, _other: Self) -> bool {
        _self.x == _other.x
    }
}

impl<T> Hash for MyOtherOtherStruct<T>
where
    T: Hash,
{
    fn hash<H>(_self: Self, _state: &mut H)
    where
        H: Hasher,
    {
        _self.x.hash(_state);
    }
}

impl<T> Ord for MyOtherOtherStruct<T>
where
    T: Ord,
{
    fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering {
        let mut result: std::cmp::Ordering = std::cmp::Ordering::equal();
        if result == std::cmp::Ordering::equal() {
            result = _self.x.cmp(_other.x);
        };
        result
    }
}

struct MyOtherStruct<A, B> {
    field1: A,
    field2: B,
    field3: MyOtherOtherStruct<B>,
}

impl<A, B> Default for MyOtherStruct<A, B>
where
    A: Default,
    B: Default,
{
    fn default() -> Self {
        Self {
            field1: A::default(),
            field2: B::default(),
            field3: <MyOtherOtherStruct<B> as Default>::default(),
        }
    }
}

impl<A, B> Eq for MyOtherStruct<A, B>
where
    A: Eq,
    B: Eq,
{
    fn eq(_self: Self, _other: Self) -> bool {
        ((_self.field1 == _other.field1) & (_self.field2 == _other.field2))
            & (_self.field3 == _other.field3)
    }
}

impl<A, B> Hash for MyOtherStruct<A, B>
where
    A: Hash,
    B: Hash,
{
    fn hash<H>(_self: Self, _state: &mut H)
    where
        H: Hasher,
    {
        _self.field1.hash(_state);
        _self.field2.hash(_state);
        _self.field3.hash(_state);
    }
}

impl<A, B> Ord for MyOtherStruct<A, B>
where
    A: Ord,
    B: Ord,
{
    fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering {
        let mut result: std::cmp::Ordering = std::cmp::Ordering::equal();
        if result == std::cmp::Ordering::equal() {
            result = _self.field1.cmp(_other.field1);
        };
        if result == std::cmp::Ordering::equal() {
            result = _self.field2.cmp(_other.field2);
        };
        if result == std::cmp::Ordering::equal() {
            result = _self.field3.cmp(_other.field3);
        };
        result
    }
}

struct EmptyStruct {}

impl Default for EmptyStruct {
    fn default() -> Self {
        Self {}
    }
}

impl Eq for EmptyStruct {
    fn eq(_self: Self, _other: Self) -> bool {
        true
    }
}

impl Hash for EmptyStruct {
    fn hash<H>(_self: Self, _state: &mut H)
    where
        H: Hasher,
    {}
}

impl Ord for EmptyStruct {
    fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering {
        let mut result: std::cmp::Ordering = std::cmp::Ordering::equal();
        result
    }
}

fn main() {
    let s: MyStruct = MyStruct { my_field: 1_u32 };
    s.do_nothing();
    let o: MyOtherStruct<Field, u32> = MyOtherStruct::<Field, u32>::default();
    assert(o == o);
    let o: MyOtherStruct<u8, [str<2>]> = MyOtherStruct::<u8, [str<2>]>::default();
    assert(o == o);
    let o1: MyOtherStruct<u32, i8> = MyOtherStruct::<u32, i8> {
        field1: 12_u32,
        field2: 24_i8,
        field3: MyOtherOtherStruct::<i8> { x: 54_i8 },
    };
    let o2: MyOtherStruct<u32, i8> = MyOtherStruct::<u32, i8> {
        field1: 12_u32,
        field2: 24_i8,
        field3: MyOtherOtherStruct::<i8> { x: 55_i8 },
    };
    assert(o1 < o2);
    let mut hasher: TestHasher = TestHasher { result: 0_Field };
    o1.hash(&mut hasher);
    assert(hasher.finish() == ((12_Field + 24_Field) + 54_Field));
    let empty: EmptyStruct = EmptyStruct {};
    assert(empty == empty);
}

struct TestHasher {
    result: Field,
}

impl Hasher for TestHasher {
    fn finish(self) -> Field {
        self.result
    }

    fn write(&mut self, input: Field) {
        self.result = self.result + input;
    }
}
