---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _9",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 4294967295 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(1)), Simple(Witness(2))]",
    "BLACKBOX::RANGE [_1]:1 bits []",
    "EXPR [ (1, _0) (-4294967296, _1) (-1, _2) 4294967295 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [_3]:1 bits []",
    "BLACKBOX::RANGE [_4]:32 bits []",
    "EXPR [ (1, _0) (-4294967296, _3) (-1, _4) 2147483648 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 2147483648 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [_5]:1 bits []",
    "BLACKBOX::RANGE [_6]:32 bits []",
    "EXPR [ (1, _2) (-4294967296, _5) (-1, _6) 2147483648 ]",
    "EXPR [ (1, _3) (-1, _5) (-1, _7) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 })], outputs: [Simple(Witness(8))]",
    "EXPR [ (1, _7, _8) (1, _9) -1 ]",
    "EXPR [ (1, _7, _9) 0 ]",
    "EXPR [ (1, _3, _9) (-1, _3) 0 ]",
    "EXPR [ (1, _2) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "jZHBDoIwDIbfpecdqIoor2IMGVDMkmWQuZkYwrtbOglwMPHyd2v3/Wm7EVqq46MyruufUN5GqL2x1jwq2zc6mN5xdpwULNcqeCJOwabO1KA9uQCli9YqeGkb5dFz0E5i0J6rmQJyLUc27Iyl+TSplc5+o/nxy55XOP+bLha6uO7oO990Y/xuWkAoUcFB9Ch6Es1Fz6KF6EX0KopZConGhGPiMRlgcsBkgexxmOamvdG1pe+mu+iazeLDe1gqy9cMvm+ojZ7mtqXGg3wA",
  "file_map": {
    "50": {
      "source": "global foo: i32 = -1;\n\nfn main(x: i32) {\n    let y = x + foo;\n    assert(y == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
