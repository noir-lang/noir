---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 32
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U32) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 15 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Const { destination: Direct(32835), bit_size: Integer(U32), value: 4294967295 }, Return, Call { location: 35 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, Mov { destination: Relative(3), source: Relative(2) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(4), source: Relative(1), bit_size: Integer(U32) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 2147483648 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(4), rhs: Relative(1) }, Not { destination: Relative(4), source: Relative(5), bit_size: U1 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(5) }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U1, lhs: Relative(1), rhs: Relative(4) }, BinaryIntOp { destination: Relative(1), op: Equals, bit_size: U1, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(1), location: 29 }, Call { location: 41 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(2), location: 34 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 40 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "jZHdjoQgDIXfpddc8KPjjq9ijEHFCQlBw8AmG8O7b7FjxrnYZG/6Uco5NO0OsxnTY7B+WZ/QdjuMwTpnH4NbJx3t6vF2B16CuEErGIiG8EW4H5CcIAiSoAgVoSaQiyQXSS4SXSQDxQmCIAnoInNmcHY0xGBMaejSIja+6WB8hNYn5xh8a5eOR89N+4NRB6xyBsbPSDRcrDPllNlbzf+W1uqlvb3F9b/Vzalu7h/qHjM92fAx8Fx8gtWjM690SX66VOPPdlbOhW1hncycgilOl61h7FTNKt7jtnCyXSVYpfpcvv4F",
  "file_map": {
    "50": {
      "source": "global foo: i32 = -1;\n\nfn main(x: i32) {\n    let y = x + foo;\n    assert(y == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
