---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "in0",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "6485997221020871071": {
        "error_kind": "string",
        "string": "call to assert_max_bit_size"
      },
      "12161114527103510886": {
        "error_kind": "string",
        "string": "completeness violation"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "fn main(in0: Field) -> pub Field {\n    let mut out0: Field = 0;\n    let tmp1: Field = in0;\n\n    if (out0 == out0) // <== changing out0 to in0 or removing\n    {\n        //     the comparison changes the result\n        let in0_as_bytes: [u8; 32] = in0.to_be_bytes();\n        let mut result: [u8; 32] = [0; 32];\n        for i in 0..32 {\n            result[i] = in0_as_bytes[i];\n        }\n    }\n\n    let mut tmp2: Field = 0; // <== moving this to the top of main,\n    if (0.lt(in0)) //     changes the result\n    {\n        tmp2 = 1;\n    }\n\n    out0 = (tmp2 - tmp1);\n\n    assert(out0 == 0, \"completeness violation\");\n\n    out0\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "field_less_than",
    "decompose_hint",
    "lte_hint",
    "directive_to_radix",
    "directive_invert",
    "directive_integer_quotient"
  ]
}
