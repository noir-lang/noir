---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "in0",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "6485997221020871071": {
        "error_kind": "string",
        "string": "call to assert_max_bit_size"
      },
      "12161114527103510886": {
        "error_kind": "string",
        "string": "completeness violation"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _378",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BRILLIG CALL func 3: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Array([Witness(2), Witness(3), Witness(4), Witness(5), Witness(6), Witness(7), Witness(8), Witness(9), Witness(10), Witness(11), Witness(12), Witness(13), Witness(14), Witness(15), Witness(16), Witness(17), Witness(18), Witness(19), Witness(20), Witness(21), Witness(22), Witness(23), Witness(24), Witness(25), Witness(26), Witness(27), Witness(28), Witness(29), Witness(30), Witness(31), Witness(32), Witness(33)])]",
    "BLACKBOX::RANGE [_2]:8 bits []",
    "BLACKBOX::RANGE [_3]:8 bits []",
    "BLACKBOX::RANGE [_4]:8 bits []",
    "BLACKBOX::RANGE [_5]:8 bits []",
    "BLACKBOX::RANGE [_6]:8 bits []",
    "BLACKBOX::RANGE [_7]:8 bits []",
    "BLACKBOX::RANGE [_8]:8 bits []",
    "BLACKBOX::RANGE [_9]:8 bits []",
    "BLACKBOX::RANGE [_10]:8 bits []",
    "BLACKBOX::RANGE [_11]:8 bits []",
    "BLACKBOX::RANGE [_12]:8 bits []",
    "BLACKBOX::RANGE [_13]:8 bits []",
    "BLACKBOX::RANGE [_14]:8 bits []",
    "BLACKBOX::RANGE [_15]:8 bits []",
    "BLACKBOX::RANGE [_16]:8 bits []",
    "BLACKBOX::RANGE [_17]:8 bits []",
    "BLACKBOX::RANGE [_18]:8 bits []",
    "BLACKBOX::RANGE [_19]:8 bits []",
    "BLACKBOX::RANGE [_20]:8 bits []",
    "BLACKBOX::RANGE [_21]:8 bits []",
    "BLACKBOX::RANGE [_22]:8 bits []",
    "BLACKBOX::RANGE [_23]:8 bits []",
    "BLACKBOX::RANGE [_24]:8 bits []",
    "BLACKBOX::RANGE [_25]:8 bits []",
    "BLACKBOX::RANGE [_26]:8 bits []",
    "BLACKBOX::RANGE [_27]:8 bits []",
    "BLACKBOX::RANGE [_28]:8 bits []",
    "BLACKBOX::RANGE [_29]:8 bits []",
    "BLACKBOX::RANGE [_30]:8 bits []",
    "BLACKBOX::RANGE [_31]:8 bits []",
    "BLACKBOX::RANGE [_32]:8 bits []",
    "BLACKBOX::RANGE [_33]:8 bits []",
    "EXPR [ (1, _0) (-1, _2) (-256, _3) (-65536, _4) (-16777216, _5) (-4294967296, _6) (-1099511627776, _7) (-281474976710656, _8) (-72057594037927936, _9) (-18446744073709551616, _10) (-4722366482869645213696, _11) (-1208925819614629174706176, _12) (-309485009821345068724781056, _13) (-79228162514264337593543950336, _14) (-20282409603651670423947251286016, _15) (-5192296858534827628530496329220096, _16) (-1329227995784915872903807060280344576, _17) (-340282366920938463463374607431768211456, _18) (-87112285931760246646623899502532662132736, _19) (-22300745198530623141535718272648361505980416, _20) (-5708990770823839524233143877797980545530986496, _21) (-1461501637330902918203684832716283019655932542976, _22) (-374144419156711147060143317175368453031918731001856, _23) (-95780971304118053647396689196894323976171195136475136, _24) (-24519928653854221733733552434404946937899825954937634816, _25) (-6277101735386680763835789423207666416102355444464034512896, _26) (-1606938044258990275541962092341162602522202993782792835301376, _27) (-411376139330301510538742295639337626245683966408394965837152256, _28) (-105312291668557186697918027683670432318895095400549111254310977536, _29) (-26959946667150639794667015087019630673637144422540572481103610249216, _30) (-6901746346790563787434755862277025452451108972170386555162524223799296, _31) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _32) (-452312848583266388373324160190187140051835877600158453279131187530910662656, _33) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: -48 })], outputs: [Simple(Witness(34))]",
    "EXPR [ (1, _33, _34) (-48, _34) (1, _35) -1 ]",
    "EXPR [ (1, _33, _35) (-48, _35) 0 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(33))], q_c: 208 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(36)), Simple(Witness(37))]",
    "BLACKBOX::RANGE [_36]:1 bits []",
    "BLACKBOX::RANGE [_37]:8 bits []",
    "EXPR [ (1, _33) (-256, _36) (-1, _37) 208 ]",
    "EXPR [ (1, _35, _36) (-1, _36) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: -100 })], outputs: [Simple(Witness(38))]",
    "EXPR [ (1, _32, _38) (-100, _38) (1, _39) -1 ]",
    "EXPR [ (1, _32, _39) (-100, _39) 0 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(32))], q_c: 156 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(40)), Simple(Witness(41))]",
    "BLACKBOX::RANGE [_40]:1 bits []",
    "BLACKBOX::RANGE [_41]:8 bits []",
    "EXPR [ (1, _32) (-256, _40) (-1, _41) 156 ]",
    "EXPR [ (-1, _40) (-1, _42) 1 ]",
    "EXPR [ (-1, _35, _39) (1, _35) (-1, _43) 0 ]",
    "EXPR [ (1, _42, _43) (-1, _43) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: -78 })], outputs: [Simple(Witness(44))]",
    "EXPR [ (1, _31, _44) (-78, _44) (1, _45) -1 ]",
    "EXPR [ (1, _31, _45) (-78, _45) 0 ]",
    "EXPR [ (-1, _35, _43) (1, _35) (-1, _46) 0 ]",
    "EXPR [ (-1, _45) (-1, _47) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(31))], q_c: 178 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(48)), Simple(Witness(49))]",
    "BLACKBOX::RANGE [_48]:1 bits []",
    "BLACKBOX::RANGE [_49]:8 bits []",
    "EXPR [ (1, _31) (-256, _48) (-1, _49) 178 ]",
    "EXPR [ (-1, _48) (-1, _50) 1 ]",
    "EXPR [ (1, _46, _47) (-1, _51) 0 ]",
    "EXPR [ (1, _50, _51) (-1, _51) 0 ]",
    "EXPR [ (-1, _51) (-1, _52) 1 ]",
    "EXPR [ (1, _35, _43) (-1, _35) (-1, _53) 1 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: -114 })], outputs: [Simple(Witness(54))]",
    "EXPR [ (1, _30, _54) (-114, _54) (1, _55) -1 ]",
    "EXPR [ (1, _30, _55) (-114, _55) 0 ]",
    "EXPR [ (-1, _52, _53) (-1, _51) (-1, _56) 1 ]",
    "EXPR [ (-1, _55) (-1, _57) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(30))], q_c: 142 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(58)), Simple(Witness(59))]",
    "BLACKBOX::RANGE [_58]:1 bits []",
    "BLACKBOX::RANGE [_59]:8 bits []",
    "EXPR [ (1, _30) (-256, _58) (-1, _59) 142 ]",
    "EXPR [ (-1, _58) (-1, _60) 1 ]",
    "EXPR [ (1, _56, _57) (-1, _61) 0 ]",
    "EXPR [ (1, _60, _61) (-1, _61) 0 ]",
    "EXPR [ (-1, _61) (-1, _62) 1 ]",
    "EXPR [ (1, _52, _53) (1, _51) (-1, _63) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: -225 })], outputs: [Simple(Witness(64))]",
    "EXPR [ (1, _29, _64) (-225, _64) (1, _65) -1 ]",
    "EXPR [ (1, _29, _65) (-225, _65) 0 ]",
    "EXPR [ (-1, _62, _63) (-1, _61) (-1, _66) 1 ]",
    "EXPR [ (-1, _65) (-1, _67) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(29))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(68)), Simple(Witness(69))]",
    "BLACKBOX::RANGE [_68]:1 bits []",
    "BLACKBOX::RANGE [_69]:8 bits []",
    "EXPR [ (1, _29) (-256, _68) (-1, _69) 31 ]",
    "EXPR [ (-1, _68) (-1, _70) 1 ]",
    "EXPR [ (1, _66, _67) (-1, _71) 0 ]",
    "EXPR [ (1, _70, _71) (-1, _71) 0 ]",
    "EXPR [ (-1, _71) (-1, _72) 1 ]",
    "EXPR [ (1, _62, _63) (1, _61) (-1, _73) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: -49 })], outputs: [Simple(Witness(74))]",
    "EXPR [ (1, _28, _74) (-49, _74) (1, _75) -1 ]",
    "EXPR [ (1, _28, _75) (-49, _75) 0 ]",
    "EXPR [ (-1, _72, _73) (-1, _71) (-1, _76) 1 ]",
    "EXPR [ (-1, _75) (-1, _77) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(28))], q_c: 207 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(78)), Simple(Witness(79))]",
    "BLACKBOX::RANGE [_78]:1 bits []",
    "BLACKBOX::RANGE [_79]:8 bits []",
    "EXPR [ (1, _28) (-256, _78) (-1, _79) 207 ]",
    "EXPR [ (-1, _78) (-1, _80) 1 ]",
    "EXPR [ (1, _76, _77) (-1, _81) 0 ]",
    "EXPR [ (1, _80, _81) (-1, _81) 0 ]",
    "EXPR [ (-1, _81) (-1, _82) 1 ]",
    "EXPR [ (1, _72, _73) (1, _71) (-1, _83) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: -160 })], outputs: [Simple(Witness(84))]",
    "EXPR [ (1, _27, _84) (-160, _84) (1, _85) -1 ]",
    "EXPR [ (1, _27, _85) (-160, _85) 0 ]",
    "EXPR [ (-1, _82, _83) (-1, _81) (-1, _86) 1 ]",
    "EXPR [ (-1, _85) (-1, _87) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(27))], q_c: 96 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(88)), Simple(Witness(89))]",
    "BLACKBOX::RANGE [_88]:1 bits []",
    "BLACKBOX::RANGE [_89]:8 bits []",
    "EXPR [ (1, _27) (-256, _88) (-1, _89) 96 ]",
    "EXPR [ (-1, _88) (-1, _90) 1 ]",
    "EXPR [ (1, _86, _87) (-1, _91) 0 ]",
    "EXPR [ (1, _90, _91) (-1, _91) 0 ]",
    "EXPR [ (-1, _91) (-1, _92) 1 ]",
    "EXPR [ (1, _82, _83) (1, _81) (-1, _93) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: -41 })], outputs: [Simple(Witness(94))]",
    "EXPR [ (1, _26, _94) (-41, _94) (1, _95) -1 ]",
    "EXPR [ (1, _26, _95) (-41, _95) 0 ]",
    "EXPR [ (-1, _92, _93) (-1, _91) (-1, _96) 1 ]",
    "EXPR [ (-1, _95) (-1, _97) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: 215 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(98)), Simple(Witness(99))]",
    "BLACKBOX::RANGE [_98]:1 bits []",
    "BLACKBOX::RANGE [_99]:8 bits []",
    "EXPR [ (1, _26) (-256, _98) (-1, _99) 215 ]",
    "EXPR [ (-1, _98) (-1, _100) 1 ]",
    "EXPR [ (1, _96, _97) (-1, _101) 0 ]",
    "EXPR [ (1, _100, _101) (-1, _101) 0 ]",
    "EXPR [ (-1, _101) (-1, _102) 1 ]",
    "EXPR [ (1, _92, _93) (1, _91) (-1, _103) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: -184 })], outputs: [Simple(Witness(104))]",
    "EXPR [ (1, _25, _104) (-184, _104) (1, _105) -1 ]",
    "EXPR [ (1, _25, _105) (-184, _105) 0 ]",
    "EXPR [ (-1, _102, _103) (-1, _101) (-1, _106) 1 ]",
    "EXPR [ (-1, _105) (-1, _107) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(25))], q_c: 72 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(108)), Simple(Witness(109))]",
    "BLACKBOX::RANGE [_108]:1 bits []",
    "BLACKBOX::RANGE [_109]:8 bits []",
    "EXPR [ (1, _25) (-256, _108) (-1, _109) 72 ]",
    "EXPR [ (-1, _108) (-1, _110) 1 ]",
    "EXPR [ (1, _106, _107) (-1, _111) 0 ]",
    "EXPR [ (1, _110, _111) (-1, _111) 0 ]",
    "EXPR [ (-1, _111) (-1, _112) 1 ]",
    "EXPR [ (1, _102, _103) (1, _101) (-1, _113) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: -80 })], outputs: [Simple(Witness(114))]",
    "EXPR [ (1, _24, _114) (-80, _114) (1, _115) -1 ]",
    "EXPR [ (1, _24, _115) (-80, _115) 0 ]",
    "EXPR [ (-1, _112, _113) (-1, _111) (-1, _116) 1 ]",
    "EXPR [ (-1, _115) (-1, _117) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(24))], q_c: 176 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(118)), Simple(Witness(119))]",
    "BLACKBOX::RANGE [_118]:1 bits []",
    "BLACKBOX::RANGE [_119]:8 bits []",
    "EXPR [ (1, _24) (-256, _118) (-1, _119) 176 ]",
    "EXPR [ (-1, _118) (-1, _120) 1 ]",
    "EXPR [ (1, _116, _117) (-1, _121) 0 ]",
    "EXPR [ (1, _120, _121) (-1, _121) 0 ]",
    "EXPR [ (-1, _121) (-1, _122) 1 ]",
    "EXPR [ (1, _112, _113) (1, _111) (-1, _123) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: -69 })], outputs: [Simple(Witness(124))]",
    "EXPR [ (1, _23, _124) (-69, _124) (1, _125) -1 ]",
    "EXPR [ (1, _23, _125) (-69, _125) 0 ]",
    "EXPR [ (-1, _122, _123) (-1, _121) (-1, _126) 1 ]",
    "EXPR [ (-1, _125) (-1, _127) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(23))], q_c: 187 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(128)), Simple(Witness(129))]",
    "BLACKBOX::RANGE [_128]:1 bits []",
    "BLACKBOX::RANGE [_129]:8 bits []",
    "EXPR [ (1, _23) (-256, _128) (-1, _129) 187 ]",
    "EXPR [ (-1, _128) (-1, _130) 1 ]",
    "EXPR [ (1, _126, _127) (-1, _131) 0 ]",
    "EXPR [ (1, _130, _131) (-1, _131) 0 ]",
    "EXPR [ (-1, _131) (-1, _132) 1 ]",
    "EXPR [ (1, _122, _123) (1, _121) (-1, _133) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: -182 })], outputs: [Simple(Witness(134))]",
    "EXPR [ (1, _22, _134) (-182, _134) (1, _135) -1 ]",
    "EXPR [ (1, _22, _135) (-182, _135) 0 ]",
    "EXPR [ (-1, _132, _133) (-1, _131) (-1, _136) 1 ]",
    "EXPR [ (-1, _135) (-1, _137) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(22))], q_c: 74 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(138)), Simple(Witness(139))]",
    "BLACKBOX::RANGE [_138]:1 bits []",
    "BLACKBOX::RANGE [_139]:8 bits []",
    "EXPR [ (1, _22) (-256, _138) (-1, _139) 74 ]",
    "EXPR [ (-1, _138) (-1, _140) 1 ]",
    "EXPR [ (1, _136, _137) (-1, _141) 0 ]",
    "EXPR [ (1, _140, _141) (-1, _141) 0 ]",
    "EXPR [ (-1, _141) (-1, _142) 1 ]",
    "EXPR [ (1, _132, _133) (1, _131) (-1, _143) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: -129 })], outputs: [Simple(Witness(144))]",
    "EXPR [ (1, _21, _144) (-129, _144) (1, _145) -1 ]",
    "EXPR [ (1, _21, _145) (-129, _145) 0 ]",
    "EXPR [ (-1, _142, _143) (-1, _141) (-1, _146) 1 ]",
    "EXPR [ (-1, _145) (-1, _147) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(21))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(148)), Simple(Witness(149))]",
    "BLACKBOX::RANGE [_148]:1 bits []",
    "BLACKBOX::RANGE [_149]:8 bits []",
    "EXPR [ (1, _21) (-256, _148) (-1, _149) 127 ]",
    "EXPR [ (-1, _148) (-1, _150) 1 ]",
    "EXPR [ (1, _146, _147) (-1, _151) 0 ]",
    "EXPR [ (1, _150, _151) (-1, _151) 0 ]",
    "EXPR [ (-1, _151) (-1, _152) 1 ]",
    "EXPR [ (1, _142, _143) (1, _141) (-1, _153) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: -129 })], outputs: [Simple(Witness(154))]",
    "EXPR [ (1, _20, _154) (-129, _154) (1, _155) -1 ]",
    "EXPR [ (1, _20, _155) (-129, _155) 0 ]",
    "EXPR [ (-1, _152, _153) (-1, _151) (-1, _156) 1 ]",
    "EXPR [ (-1, _155) (-1, _157) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(158)), Simple(Witness(159))]",
    "BLACKBOX::RANGE [_158]:1 bits []",
    "BLACKBOX::RANGE [_159]:8 bits []",
    "EXPR [ (1, _20) (-256, _158) (-1, _159) 127 ]",
    "EXPR [ (-1, _158) (-1, _160) 1 ]",
    "EXPR [ (1, _156, _157) (-1, _161) 0 ]",
    "EXPR [ (1, _160, _161) (-1, _161) 0 ]",
    "EXPR [ (-1, _161) (-1, _162) 1 ]",
    "EXPR [ (1, _152, _153) (1, _151) (-1, _163) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: -88 })], outputs: [Simple(Witness(164))]",
    "EXPR [ (1, _19, _164) (-88, _164) (1, _165) -1 ]",
    "EXPR [ (1, _19, _165) (-88, _165) 0 ]",
    "EXPR [ (-1, _162, _163) (-1, _161) (-1, _166) 1 ]",
    "EXPR [ (-1, _165) (-1, _167) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(19))], q_c: 168 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(168)), Simple(Witness(169))]",
    "BLACKBOX::RANGE [_168]:1 bits []",
    "BLACKBOX::RANGE [_169]:8 bits []",
    "EXPR [ (1, _19) (-256, _168) (-1, _169) 168 ]",
    "EXPR [ (-1, _168) (-1, _170) 1 ]",
    "EXPR [ (1, _166, _167) (-1, _171) 0 ]",
    "EXPR [ (1, _170, _171) (-1, _171) 0 ]",
    "EXPR [ (-1, _171) (-1, _172) 1 ]",
    "EXPR [ (1, _162, _163) (1, _161) (-1, _173) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: -93 })], outputs: [Simple(Witness(174))]",
    "EXPR [ (1, _18, _174) (-93, _174) (1, _175) -1 ]",
    "EXPR [ (1, _18, _175) (-93, _175) 0 ]",
    "EXPR [ (-1, _172, _173) (-1, _171) (-1, _176) 1 ]",
    "EXPR [ (-1, _175) (-1, _177) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(18))], q_c: 163 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(178)), Simple(Witness(179))]",
    "BLACKBOX::RANGE [_178]:1 bits []",
    "BLACKBOX::RANGE [_179]:8 bits []",
    "EXPR [ (1, _18) (-256, _178) (-1, _179) 163 ]",
    "EXPR [ (-1, _178) (-1, _180) 1 ]",
    "EXPR [ (1, _176, _177) (-1, _181) 0 ]",
    "EXPR [ (1, _180, _181) (-1, _181) 0 ]",
    "EXPR [ (-1, _181) (-1, _182) 1 ]",
    "EXPR [ (1, _172, _173) (1, _171) (-1, _183) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: -40 })], outputs: [Simple(Witness(184))]",
    "EXPR [ (1, _17, _184) (-40, _184) (1, _185) -1 ]",
    "EXPR [ (1, _17, _185) (-40, _185) 0 ]",
    "EXPR [ (-1, _182, _183) (-1, _181) (-1, _186) 1 ]",
    "EXPR [ (-1, _185) (-1, _187) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(17))], q_c: 216 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(188)), Simple(Witness(189))]",
    "BLACKBOX::RANGE [_188]:1 bits []",
    "BLACKBOX::RANGE [_189]:8 bits []",
    "EXPR [ (1, _17) (-256, _188) (-1, _189) 216 ]",
    "EXPR [ (-1, _188) (-1, _190) 1 ]",
    "EXPR [ (1, _186, _187) (-1, _191) 0 ]",
    "EXPR [ (1, _190, _191) (-1, _191) 0 ]",
    "EXPR [ (-1, _191) (-1, _192) 1 ]",
    "EXPR [ (1, _182, _183) (1, _181) (-1, _193) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: -51 })], outputs: [Simple(Witness(194))]",
    "EXPR [ (1, _16, _194) (-51, _194) (1, _195) -1 ]",
    "EXPR [ (1, _16, _195) (-51, _195) 0 ]",
    "EXPR [ (-1, _192, _193) (-1, _191) (-1, _196) 1 ]",
    "EXPR [ (-1, _195) (-1, _197) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(16))], q_c: 205 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(198)), Simple(Witness(199))]",
    "BLACKBOX::RANGE [_198]:1 bits []",
    "BLACKBOX::RANGE [_199]:8 bits []",
    "EXPR [ (1, _16) (-256, _198) (-1, _199) 205 ]",
    "EXPR [ (-1, _198) (-1, _200) 1 ]",
    "EXPR [ (1, _196, _197) (-1, _201) 0 ]",
    "EXPR [ (1, _200, _201) (-1, _201) 0 ]",
    "EXPR [ (-1, _201) (-1, _202) 1 ]",
    "EXPR [ (1, _192, _193) (1, _191) (-1, _203) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: -232 })], outputs: [Simple(Witness(204))]",
    "EXPR [ (1, _15, _204) (-232, _204) (1, _205) -1 ]",
    "EXPR [ (1, _15, _205) (-232, _205) 0 ]",
    "EXPR [ (-1, _202, _203) (-1, _201) (-1, _206) 1 ]",
    "EXPR [ (-1, _205) (-1, _207) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 24 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(208)), Simple(Witness(209))]",
    "BLACKBOX::RANGE [_208]:1 bits []",
    "BLACKBOX::RANGE [_209]:8 bits []",
    "EXPR [ (1, _15) (-256, _208) (-1, _209) 24 ]",
    "EXPR [ (-1, _208) (-1, _210) 1 ]",
    "EXPR [ (1, _206, _207) (-1, _211) 0 ]",
    "EXPR [ (1, _210, _211) (-1, _211) 0 ]",
    "EXPR [ (-1, _211) (-1, _212) 1 ]",
    "EXPR [ (1, _202, _203) (1, _201) (-1, _213) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: -72 })], outputs: [Simple(Witness(214))]",
    "EXPR [ (1, _14, _214) (-72, _214) (1, _215) -1 ]",
    "EXPR [ (1, _14, _215) (-72, _215) 0 ]",
    "EXPR [ (-1, _212, _213) (-1, _211) (-1, _216) 1 ]",
    "EXPR [ (-1, _215) (-1, _217) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(14))], q_c: 184 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(218)), Simple(Witness(219))]",
    "BLACKBOX::RANGE [_218]:1 bits []",
    "BLACKBOX::RANGE [_219]:8 bits []",
    "EXPR [ (1, _14) (-256, _218) (-1, _219) 184 ]",
    "EXPR [ (-1, _218) (-1, _220) 1 ]",
    "EXPR [ (1, _216, _217) (-1, _221) 0 ]",
    "EXPR [ (1, _220, _221) (-1, _221) 0 ]",
    "EXPR [ (-1, _221) (-1, _222) 1 ]",
    "EXPR [ (1, _212, _213) (1, _211) (-1, _223) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: -121 })], outputs: [Simple(Witness(224))]",
    "EXPR [ (1, _13, _224) (-121, _224) (1, _225) -1 ]",
    "EXPR [ (1, _13, _225) (-121, _225) 0 ]",
    "EXPR [ (-1, _222, _223) (-1, _221) (-1, _226) 1 ]",
    "EXPR [ (-1, _225) (-1, _227) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 135 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(228)), Simple(Witness(229))]",
    "BLACKBOX::RANGE [_228]:1 bits []",
    "BLACKBOX::RANGE [_229]:8 bits []",
    "EXPR [ (1, _13) (-256, _228) (-1, _229) 135 ]",
    "EXPR [ (-1, _228) (-1, _230) 1 ]",
    "EXPR [ (1, _226, _227) (-1, _231) 0 ]",
    "EXPR [ (1, _230, _231) (-1, _231) 0 ]",
    "EXPR [ (-1, _231) (-1, _232) 1 ]",
    "EXPR [ (1, _222, _223) (1, _221) (-1, _233) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: -185 })], outputs: [Simple(Witness(234))]",
    "EXPR [ (1, _12, _234) (-185, _234) (1, _235) -1 ]",
    "EXPR [ (1, _12, _235) (-185, _235) 0 ]",
    "EXPR [ (-1, _232, _233) (-1, _231) (-1, _236) 1 ]",
    "EXPR [ (-1, _235) (-1, _237) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: 71 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(238)), Simple(Witness(239))]",
    "BLACKBOX::RANGE [_238]:1 bits []",
    "BLACKBOX::RANGE [_239]:8 bits []",
    "EXPR [ (1, _12) (-256, _238) (-1, _239) 71 ]",
    "EXPR [ (-1, _238) (-1, _240) 1 ]",
    "EXPR [ (1, _236, _237) (-1, _241) 0 ]",
    "EXPR [ (1, _240, _241) (-1, _241) 0 ]",
    "EXPR [ (-1, _241) (-1, _242) 1 ]",
    "EXPR [ (1, _232, _233) (1, _231) (-1, _243) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: -112 })], outputs: [Simple(Witness(244))]",
    "EXPR [ (1, _11, _244) (-112, _244) (1, _245) -1 ]",
    "EXPR [ (1, _11, _245) (-112, _245) 0 ]",
    "EXPR [ (-1, _242, _243) (-1, _241) (-1, _246) 1 ]",
    "EXPR [ (-1, _245) (-1, _247) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 144 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(248)), Simple(Witness(249))]",
    "BLACKBOX::RANGE [_248]:1 bits []",
    "BLACKBOX::RANGE [_249]:8 bits []",
    "EXPR [ (1, _11) (-256, _248) (-1, _249) 144 ]",
    "EXPR [ (-1, _248) (-1, _250) 1 ]",
    "EXPR [ (1, _246, _247) (-1, _251) 0 ]",
    "EXPR [ (1, _250, _251) (-1, _251) 0 ]",
    "EXPR [ (-1, _251) (-1, _252) 1 ]",
    "EXPR [ (1, _242, _243) (1, _241) (-1, _253) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: -145 })], outputs: [Simple(Witness(254))]",
    "EXPR [ (1, _10, _254) (-145, _254) (1, _255) -1 ]",
    "EXPR [ (1, _10, _255) (-145, _255) 0 ]",
    "EXPR [ (-1, _252, _253) (-1, _251) (-1, _256) 1 ]",
    "EXPR [ (-1, _255) (-1, _257) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 111 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(258)), Simple(Witness(259))]",
    "BLACKBOX::RANGE [_258]:1 bits []",
    "BLACKBOX::RANGE [_259]:8 bits []",
    "EXPR [ (1, _10) (-256, _258) (-1, _259) 111 ]",
    "EXPR [ (-1, _258) (-1, _260) 1 ]",
    "EXPR [ (1, _256, _257) (-1, _261) 0 ]",
    "EXPR [ (1, _260, _261) (-1, _261) 0 ]",
    "EXPR [ (-1, _261) (-1, _262) 1 ]",
    "EXPR [ (1, _252, _253) (1, _251) (-1, _263) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: -67 })], outputs: [Simple(Witness(264))]",
    "EXPR [ (1, _9, _264) (-67, _264) (1, _265) -1 ]",
    "EXPR [ (1, _9, _265) (-67, _265) 0 ]",
    "EXPR [ (-1, _262, _263) (-1, _261) (-1, _266) 1 ]",
    "EXPR [ (-1, _265) (-1, _267) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 189 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(268)), Simple(Witness(269))]",
    "BLACKBOX::RANGE [_268]:1 bits []",
    "BLACKBOX::RANGE [_269]:8 bits []",
    "EXPR [ (1, _9) (-256, _268) (-1, _269) 189 ]",
    "EXPR [ (-1, _268) (-1, _270) 1 ]",
    "EXPR [ (1, _266, _267) (-1, _271) 0 ]",
    "EXPR [ (1, _270, _271) (-1, _271) 0 ]",
    "EXPR [ (-1, _271) (-1, _272) 1 ]",
    "EXPR [ (1, _262, _263) (1, _261) (-1, _273) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: -225 })], outputs: [Simple(Witness(274))]",
    "EXPR [ (1, _8, _274) (-225, _274) (1, _275) -1 ]",
    "EXPR [ (1, _8, _275) (-225, _275) 0 ]",
    "EXPR [ (-1, _272, _273) (-1, _271) (-1, _276) 1 ]",
    "EXPR [ (-1, _275) (-1, _277) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(278)), Simple(Witness(279))]",
    "BLACKBOX::RANGE [_278]:1 bits []",
    "BLACKBOX::RANGE [_279]:8 bits []",
    "EXPR [ (1, _8) (-256, _278) (-1, _279) 31 ]",
    "EXPR [ (-1, _278) (-1, _280) 1 ]",
    "EXPR [ (1, _276, _277) (-1, _281) 0 ]",
    "EXPR [ (1, _280, _281) (-1, _281) 0 ]",
    "EXPR [ (-1, _281) (-1, _282) 1 ]",
    "EXPR [ (1, _272, _273) (1, _271) (-1, _283) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: -245 })], outputs: [Simple(Witness(284))]",
    "EXPR [ (1, _7, _284) (-245, _284) (1, _285) -1 ]",
    "EXPR [ (1, _7, _285) (-245, _285) 0 ]",
    "EXPR [ (-1, _282, _283) (-1, _281) (-1, _286) 1 ]",
    "EXPR [ (-1, _285) (-1, _287) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 11 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(288)), Simple(Witness(289))]",
    "BLACKBOX::RANGE [_288]:1 bits []",
    "BLACKBOX::RANGE [_289]:8 bits []",
    "EXPR [ (1, _7) (-256, _288) (-1, _289) 11 ]",
    "EXPR [ (-1, _288) (-1, _290) 1 ]",
    "EXPR [ (1, _286, _287) (-1, _291) 0 ]",
    "EXPR [ (1, _290, _291) (-1, _291) 0 ]",
    "EXPR [ (-1, _291) (-1, _292) 1 ]",
    "EXPR [ (1, _282, _283) (1, _281) (-1, _293) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: -147 })], outputs: [Simple(Witness(294))]",
    "EXPR [ (1, _6, _294) (-147, _294) (1, _295) -1 ]",
    "EXPR [ (1, _6, _295) (-147, _295) 0 ]",
    "EXPR [ (-1, _292, _293) (-1, _291) (-1, _296) 1 ]",
    "EXPR [ (-1, _295) (-1, _297) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 109 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(298)), Simple(Witness(299))]",
    "BLACKBOX::RANGE [_298]:1 bits []",
    "BLACKBOX::RANGE [_299]:8 bits []",
    "EXPR [ (1, _6) (-256, _298) (-1, _299) 109 ]",
    "EXPR [ (-1, _298) (-1, _300) 1 ]",
    "EXPR [ (1, _296, _297) (-1, _301) 0 ]",
    "EXPR [ (1, _300, _301) (-1, _301) 0 ]",
    "EXPR [ (-1, _301) (-1, _302) 1 ]",
    "EXPR [ (1, _292, _293) (1, _291) (-1, _303) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: -240 })], outputs: [Simple(Witness(304))]",
    "EXPR [ (1, _5, _304) (-240, _304) (1, _305) -1 ]",
    "EXPR [ (1, _5, _305) (-240, _305) 0 ]",
    "EXPR [ (-1, _302, _303) (-1, _301) (-1, _306) 1 ]",
    "EXPR [ (-1, _305) (-1, _307) 1 ]",
    "BRILLIG CALL func 5: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 16 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(308)), Simple(Witness(309))]",
    "BLACKBOX::RANGE [_308]:1 bits []",
    "BLACKBOX::RANGE [_309]:8 bits []",
    "EXPR [ (1, _5) (-256, _308) (-1, _309) 16 ]",
    "EXPR [ (-1, _308) (-1, _310) 1 ]",
    "EXPR [ (1, _306, _307) (-1, _311) 0 ]",
    "EXPR [ (1, _310, _311) (-1, _311) 0 ]",
    "EXPR [ (-1, _311) (-1, _312) 1 ]",
    "EXPR [ (1, _302, _303) (1, _301) (-1, _313) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 })], outputs: [Simple(Witness(314))]",
    "EXPR [ (1, _4, _314) (1, _315) -1 ]",
    "EXPR [ (1, _4, _315) 0 ]",
    "EXPR [ (-1, _312, _313) (-1, _311) (-1, _316) 1 ]",
    "EXPR [ (-1, _315) (-1, _317) 1 ]",
    "EXPR [ (-1, _316, _317) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 })], outputs: [Simple(Witness(318))]",
    "EXPR [ (1, _3, _318) (1, _319) -1 ]",
    "EXPR [ (1, _3, _319) 0 ]",
    "EXPR [ (1, _316, _319) (-1, _316) 0 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: -1 })], outputs: [Simple(Witness(320))]",
    "EXPR [ (1, _2, _320) (-1, _320) (1, _321) -1 ]",
    "EXPR [ (1, _2, _321) (-1, _321) 0 ]",
    "EXPR [ (-1, _316, _321) (1, _316) (-1, _322) 0 ]",
    "EXPR [ (1, _2, _322) 0 ]",
    "EXPR [ (-1, _322) (-1, _323) 1 ]",
    "EXPR [ (1, _312, _313) (1, _311) (-1, _324) 0 ]",
    "EXPR [ (1, _323, _324) (1, _322) -1 ]",
    "BRILLIG CALL func 4: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(325))]",
    "EXPR [ (1, _0, _325) (1, _326) -1 ]",
    "EXPR [ (1, _0, _326) 0 ]",
    "BRILLIG CALL func 0: PREDICATE = EXPR [ (-1, _326) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(327))]",
    "BLACKBOX::RANGE [_327]:1 bits []",
    "EXPR [ (-53438638232309528389504892708671455232, _326, _327) (53438638232309528389504892708671455232, _327) (-1, _328) 0 ]",
    "BLACKBOX::RANGE [_328]:128 bits []",
    "EXPR [ (-64323764613183177041862057485226039389, _326, _327) (64323764613183177041862057485226039389, _327) (-1, _329) 0 ]",
    "BLACKBOX::RANGE [_329]:128 bits []",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (-1, _326, _327) (1, _327) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(330)), Simple(Witness(331))]",
    "EXPR [ (-1, _326, _327) (1, _327) (-1, _332) 0 ]",
    "EXPR [ (1, _330, _332) (-1, _333) 0 ]",
    "BLACKBOX::RANGE [_333]:128 bits []",
    "EXPR [ (1, _331, _332) (-1, _334) 0 ]",
    "BLACKBOX::RANGE [_334]:128 bits []",
    "EXPR [ (-1, _332, _333) (-1, _370) 0 ]",
    "EXPR [ (-340282366920938463463374607431768211456, _332, _334) (-1, _371) 0 ]",
    "EXPR [ (1, _0, _332) (1, _370) (1, _371) 0 ]",
    "BRILLIG CALL func 2: PREDICATE = EXPR [ (1, _332) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 53438638232309528389504892708671455233 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(333))], q_c: 0 })], outputs: [Simple(Witness(335))]",
    "BLACKBOX::RANGE [_335]:1 bits []",
    "EXPR [ (340282366920938463463374607431768211456, _332, _335) (-1, _372) 0 ]",
    "EXPR [ (53438638232309528389504892708671455232, _332) (-1, _336) (1, _370) (1, _372) 0 ]",
    "BLACKBOX::RANGE [_336]:128 bits []",
    "EXPR [ (64323764613183177041862057485226039389, _332) (-1, _337) (8680525429001239497728366687280168587232520577698044359798894838135247199343, _371) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _372) 0 ]",
    "BLACKBOX::RANGE [_337]:128 bits []",
    "BRILLIG CALL func 2: PREDICATE = EXPR [ (1, _332) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(333))], q_c: 0 })], outputs: [Simple(Witness(338))]",
    "BLACKBOX::RANGE [_338]:1 bits []",
    "EXPR [ (340282366920938463463374607431768211456, _332, _338) (-1, _373) 0 ]",
    "EXPR [ (-1, _332) (-1, _339) (1, _370) (1, _373) 0 ]",
    "BLACKBOX::RANGE [_339]:128 bits []",
    "EXPR [ (-1, _340) (8680525429001239497728366687280168587232520577698044359798894838135247199343, _371) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _373) 0 ]",
    "BLACKBOX::RANGE [_340]:128 bits []",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _326, _327) (-1, _326) (-1, _327) 1 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(341)), Simple(Witness(342))]",
    "EXPR [ (1, _326, _327) (-1, _326) (-1, _327) (-1, _343) 1 ]",
    "EXPR [ (1, _341, _343) (-1, _344) 0 ]",
    "BLACKBOX::RANGE [_344]:128 bits []",
    "EXPR [ (1, _342, _343) (-1, _345) 0 ]",
    "BLACKBOX::RANGE [_345]:128 bits []",
    "EXPR [ (-1, _343, _344) (-1, _375) 0 ]",
    "EXPR [ (-340282366920938463463374607431768211456, _343, _345) (-1, _376) 0 ]",
    "EXPR [ (1, _0, _343) (1, _375) (1, _376) 0 ]",
    "BRILLIG CALL func 2: PREDICATE = EXPR [ (1, _343) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [], q_c: 53438638232309528389504892708671455233 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(344))], q_c: 0 })], outputs: [Simple(Witness(346))]",
    "BLACKBOX::RANGE [_346]:1 bits []",
    "EXPR [ (340282366920938463463374607431768211456, _343, _346) (-1, _377) 0 ]",
    "EXPR [ (53438638232309528389504892708671455232, _343) (-1, _347) (1, _375) (1, _377) 0 ]",
    "BLACKBOX::RANGE [_347]:128 bits []",
    "EXPR [ (64323764613183177041862057485226039389, _343) (-1, _348) (8680525429001239497728366687280168587232520577698044359798894838135247199343, _376) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _377) 0 ]",
    "BLACKBOX::RANGE [_348]:128 bits []",
    "EXPR [ (53438638232309528389504892708671455232, _343) (-1, _349) 0 ]",
    "BLACKBOX::RANGE [_349]:128 bits []",
    "EXPR [ (64323764613183177041862057485226039389, _343) (-1, _350) 0 ]",
    "BLACKBOX::RANGE [_350]:128 bits []",
    "BRILLIG CALL func 2: PREDICATE = EXPR [ (1, _343) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(344))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 0 })], outputs: [Simple(Witness(351))]",
    "BLACKBOX::RANGE [_351]:1 bits []",
    "EXPR [ (340282366920938463463374607431768211456, _343, _351) (-1, _378) 0 ]",
    "EXPR [ (-1, _343) (-1, _352) (-1, _375) (1, _378) 0 ]",
    "BLACKBOX::RANGE [_352]:128 bits []",
    "EXPR [ (-1, _353) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _376) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _378) 0 ]",
    "BLACKBOX::RANGE [_353]:128 bits []",
    "EXPR [ (-1, _0) (1, _343) 0 ]",
    "EXPR [ (1, _1) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 19 }, BinaryFieldOp { destination: Relative(3), op: LessThan, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 24 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Mov { destination: Direct(32838), source: Relative(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Stop { return_data: HeapVector { pointer: Relative(3), size: Relative(4) } }, Return, Call { location: 24 }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U128) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Field }, BinaryFieldOp { destination: Relative(3), op: Sub, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(1), bit_size: Field, value: 8680525429001239497728366687280168587232520577698044359798894838135247199343 }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(3), rhs: Relative(1) }, Mov { destination: Relative(1), source: Relative(2) }, Mov { destination: Relative(2), source: Relative(4) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 29 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 2",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 27 }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 22 }, Jump { location: 19 }, BinaryFieldOp { destination: Relative(4), op: LessThan, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(3), source: Relative(4) }, Jump { location: 25 }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Mov { destination: Relative(3), source: Relative(1) }, Jump { location: 25 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 32 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 3",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 4",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 5",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "tZrbbtw2FEX/ZZ79oHPhzb9SBIGTuIUBwwkcu0AR5N8rWmfRKQrJqlS/mNv2cA1JcXFIjX5cvtx+ev7j493D71+/X65/+3H59Hh3f3/3x8f7r59vnu6+Psx//XGZ+g/Jl2v5eXURfslzLktRL9dlLtrlul5ddH55nV+ovFCXf/nP+Y9wPz493t72F/zyRvPbf7t5vH14ulw/PN/fX13+vLl/fnnR9283Dy/l083j/N/p6nL78GUuZ+Dvd/e3Pf28eq09rVcVmVyj+pxzGgipexm1WRBqa6/1y976zXLUb6ms1bd37sMEoWpea0Nar5/do35OdqR+FerXeqg+k6BMduAaqHMNNMuon/45j9p6/aSjAUlbXrsCstGEXJRrkIvXNcRWI7IWGpEtnSW4HSKUOgjtECEV5tIcD/WiToNQp3xAB890wouuTQcp64CSChO6pOar86GuI8xqC4RZW10YZGMgbBqX0yazQwhJDIVJaccQbSBUVlvRZ/+qnlll+LneEd1YJXWaMFQnXUf4xrwqLPRZprVLutkGHZdUTVfXOc0bi30SEJJcVxHlbDc225BltKH6ahva2TZszohUxozIq/PSZKMbzUY3mtcjiJ2TyuzkSGy34fWza9oYifSebZA8roasz4g3EHIaMdaqw4h9hvrWltLGaIo1OYRwGRs61/8BkY4hdCw17n4QUQcitdMdOYoorx2p9SwiTccQ+1ZuP7tqbrdh18qd5D1X7tKXokWxktc3+3ZasU3EPsX2I9IxxC7F3kDsUWx3R44idim2F7Gh2CZin2JZT07v7TbsUiyf3Wdu7rh1HKHmD7HVC5rz6R13Lqf3V1uInfurfHbN3G7Drv1Vkfdsw7791RsIOY3Ytb/aROzbX5V8evHfROxb/Pcj0jHErsX/DcSexX93R44idi3+exEbi385fzKuZ89B5fzJuJ49nW+v3LtOxrWdtrSd3+22s6tmO7/bbfaeV2Pfbrel0wveJmLfarWN2LVavYHYs1rt7shRxK6lZhOxb3LLdHajud2IXbNbprM7zWnra488vvUoa/fJt+r7+LLgl4v5H+q/flVQ7R/1P8y/3Xy+e/zXN5ciL99Z9kKXwpbClyItRV6KshR1KVpUBxMcCZAESQIlwZKASdAkcBI8DZ7SruBp8DR4GjwNngZPg6fBs+BZ8IyOBs86b77wlqLMUXbePKBWo2xL6VOUEqUur3eLMnie4v85yuB58Dx4KXgpeCl4KXgpeCnal6J9KXgpeCl4OXg5eFmjtCg9ymhfDl4uUdYo21KWKcrgleCV4JXgleCV6G+J9pVoX4n21eBViTL6W6O/Nfpbg1eDV4NXg1eD16K/LdrXon0t2teC12L8WvS3RX9b9LcFT6aJIAQlGMEJiZAJhRBgmWIkRSaCEJQAWSALZIEskKUSaLPSZqXNClmN4IREyATIClkhG2SDbIyG0WajzUabkUisEBgNYzSc0cAkccgO2SFjk6CT4JMglGCUJMiJcUYqwSpBK0mQE2TMEtQS3BLkEuwS9BL8kgw5M84oJjgmSCYZcoGMZ4JogmmCaoJrgmyCbVIgF8YZ4QTjBOWkQq6QsU7QTvBOEE8wT1BPcE8a5MY4o5/gnyCgNMgNMg4qDioOKg4qDioOKg7qFGSdCqESYjQUB1UgC2QcVBxUHFQcVBxUHFQcVIWsQlCCEZwAWSHjoOKg4qDioOKg4qDioPIxpnyOKQ4qDioOKp9lyoeZ4qDioOKg4qDioOKg4qA6ZGeccVBxUHFQE+QEGQcVBxUHFQcVBxUHFQc1Q86MMw4qDioOaoacIeOg4qDioOKg4qDioOKgFsiFccZBxUHFQa2QK2QcVBxUHFQcVBxUHFQc1Aa5Mc44qDioOKgNcoOMg4qDioOGg4aDhoOGgzaxeZrYPeGg4aDhoE2QBTIOGg4aDhoOGg4aDhoOmkCWGGfDQcNBw0FTyAoZBw0HDQcNBw0HDQcNB80gmxEYjbGXHJvJsZsc20kcNBw0HDQcNBw0HDQcNIfsjDMOGg4aDhp7S0uQcdBw0HDQcNBw0HDQcNAy5Mw446DhoOGgsdO0DBkHDQcNBw0HDQcNBw0HrUAujHMZm3ZGAweNfadVyDhoOGg4aDhoOGg4aHWcByBXxhkHDQcNB41dqDXIOGg4aDhobRw1xlmDwwYO+sRxY+K8gYOOg46Dzl7UJw4dOOgyjjGQcdBx0HHQcdAFshRCJcRoOA66jhMSZBx0HHQcdBx0HHQcdBx0g2xCGIcvRgMHnb2o46DzOeh8Dvo407EXdYc8jnU46Djo42Q3jnYvDuYeav9epIcWoTu4BOlfFPSghJnc7wF5d3AJqT+b1kMmlP6tVQ8z2fp7dQdfQndwCTO5PzXr3cElzGRrPTghEWay93fvDi6h9psEPbQI3cElSL+X0YMSrN+n6MEJMzn3geoOLqEQan8CtocWoTvYnyb07mDpb9EdXIIRZnLp79UdXELuDw72UAiVMJNL6afpiTCTax+E7uASjDCTa3/37uASZnLrb9EdXMJMbr1f3cEeUnew5R6E0OfGZD3ZSD5Snx5T6imP1CfIy+21P28e724+3d9+n+/A9Hs0zw+fuSEz//r01zf+w8Pm3x6/fr798vx422/e/PLE+fzzt/nGm/qH8dx5/5P6lbYP4wnzlz+VK9MPP/ttoL8B",
  "file_map": {
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "fn main(in0: Field) -> pub Field {\n    let mut out0: Field = 0;\n    let tmp1: Field = in0;\n\n    if (out0 == out0) // <== changing out0 to in0 or removing\n    {\n        //     the comparison changes the result\n        let in0_as_bytes: [u8; 32] = in0.to_be_bytes();\n        let mut result: [u8; 32] = [0; 32];\n        for i in 0..32 {\n            result[i] = in0_as_bytes[i];\n        }\n    }\n\n    let mut tmp2: Field = 0; // <== moving this to the top of main,\n    if (0.lt(in0)) //     changes the result\n    {\n        tmp2 = 1;\n    }\n\n    out0 = (tmp2 - tmp1);\n\n    assert(out0 == 0, \"completeness violation\");\n\n    out0\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "field_less_than",
    "decompose_hint",
    "lte_hint",
    "directive_to_radix",
    "directive_invert",
    "directive_integer_quotient"
  ]
}
