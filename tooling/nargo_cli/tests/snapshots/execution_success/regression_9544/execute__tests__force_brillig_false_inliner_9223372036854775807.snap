---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "c",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 64
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 64
      },
      "visibility": "public"
    },
    "error_types": {
      "360331956598878543": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      },
      "6633451728158479105": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 6 limbs"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _99",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : [_1]",
    "BLACKBOX::RANGE [(_0, 64)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) -1 ]], outputs: [_2]",
    "EXPR [ (1, _0, _2) (-1, _2) (1, _3) -1 ]",
    "EXPR [ (1, _0, _3) (-1, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) -2 ]], outputs: [_4]",
    "EXPR [ (1, _0, _4) (-2, _4) (1, _5) -1 ]",
    "EXPR [ (1, _0, _5) (-2, _5) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _0) 18446744073709551552 ], EXPR [ 18446744073709551616 ]], outputs: [_6, _7]",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 64)] []",
    "EXPR [ (1, _0) (-18446744073709551616, _6) (-1, _7) 18446744073709551552 ]",
    "EXPR [ (-1, _6) (-1, _8) 1 ]",
    "EXPR [ (1, _3, _5) (-1, _9) 0 ]",
    "EXPR [ (1, _8, _9) (-1, _9) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _0, _9) 0 ], EXPR [ 6 ], EXPR [ 2 ]], outputs: [[_10, _11, _12, _13, _14, _15]]",
    "BLACKBOX::RANGE [(_10, 1)] []",
    "BLACKBOX::RANGE [(_11, 1)] []",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "BLACKBOX::RANGE [(_13, 1)] []",
    "BLACKBOX::RANGE [(_14, 1)] []",
    "BLACKBOX::RANGE [(_15, 1)] []",
    "EXPR [ (1, _0, _9) (-1, _72) 0 ]",
    "EXPR [ (-1, _10) (-2, _11) (-4, _12) (-8, _13) (-16, _14) (-32, _15) (1, _72) 0 ]",
    "EXPR [ (1, _15, _15) (2, _15) (-1, _16) 1 ]",
    "EXPR [ (-1, _14) (-1, _17) 1 ]",
    "EXPR [ (2, _14, _16) (1, _16, _17) (-1, _18) 0 ]",
    "EXPR [ (1, _18, _18) (-1, _19) 0 ]",
    "EXPR [ (-1, _13) (-1, _20) 1 ]",
    "EXPR [ (2, _13, _19) (1, _19, _20) (-1, _21) 0 ]",
    "EXPR [ (1, _21, _21) (-1, _22) 0 ]",
    "EXPR [ (-1, _12) (-1, _23) 1 ]",
    "EXPR [ (2, _12, _22) (1, _22, _23) (-1, _24) 0 ]",
    "EXPR [ (1, _24, _24) (-1, _25) 0 ]",
    "EXPR [ (-1, _11) (-1, _26) 1 ]",
    "EXPR [ (2, _11, _25) (1, _25, _26) (-1, _27) 0 ]",
    "EXPR [ (1, _27, _27) (-1, _28) 0 ]",
    "EXPR [ (-1, _10) (-1, _29) 1 ]",
    "EXPR [ (2, _10, _28) (-1, _83) 0 ]",
    "EXPR [ (1, _28, _29) (-1, _84) 0 ]",
    "EXPR [ (-1, _30) (1, _83) (1, _84) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _30) 0 ]], outputs: [_31]",
    "EXPR [ (1, _30, _31) (1, _32) -1 ]",
    "EXPR [ (1, _30, _32) 0 ]",
    "EXPR [ (1, _9, _32) 0 ]",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (1, _9) 0 ]",
    "inputs: [EXPR [ (1, _0) 0 ], EXPR [ (2, _28, _10) (1, _28, _29) 0 ]], outputs: [_33, _34]",
    "BLACKBOX::RANGE [(_33, 64)] []",
    "BLACKBOX::RANGE [(_34, 64)] []",
    "EXPR [ (-1, _9) (-1, _34) (-1, _35) (1, _83) (1, _84) 0 ]",
    "BLACKBOX::RANGE [(_35, 64)] []",
    "EXPR [ (-1, _36) (1, _83) (1, _84) 0 ]",
    "EXPR [ (1, _33, _36) (1, _34) (-1, _37) 0 ]",
    "EXPR [ (-1, _9, _37) (1, _72) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) -4 ]], outputs: [_38]",
    "EXPR [ (1, _0, _38) (-4, _38) (1, _39) -1 ]",
    "EXPR [ (1, _0, _39) (-4, _39) 0 ]",
    "EXPR [ (-1, _3, _39) (1, _39) (-1, _40) 0 ]",
    "EXPR [ (1, _8, _40) (-1, _40) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _0, _40) 0 ], EXPR [ 6 ], EXPR [ 2 ]], outputs: [[_41, _42, _43, _44, _45, _46]]",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "BLACKBOX::RANGE [(_43, 1)] []",
    "BLACKBOX::RANGE [(_44, 1)] []",
    "BLACKBOX::RANGE [(_45, 1)] []",
    "BLACKBOX::RANGE [(_46, 1)] []",
    "EXPR [ (1, _0, _40) (-1, _87) 0 ]",
    "EXPR [ (-1, _41) (-2, _42) (-4, _43) (-8, _44) (-16, _45) (-32, _46) (1, _87) 0 ]",
    "EXPR [ (1, _46, _46) (2, _46) (-1, _47) 1 ]",
    "EXPR [ (-1, _45) (-1, _48) 1 ]",
    "EXPR [ (2, _45, _47) (1, _47, _48) (-1, _49) 0 ]",
    "EXPR [ (1, _49, _49) (-1, _50) 0 ]",
    "EXPR [ (-1, _44) (-1, _51) 1 ]",
    "EXPR [ (2, _44, _50) (1, _50, _51) (-1, _52) 0 ]",
    "EXPR [ (1, _52, _52) (-1, _53) 0 ]",
    "EXPR [ (-1, _43) (-1, _54) 1 ]",
    "EXPR [ (2, _43, _53) (1, _53, _54) (-1, _55) 0 ]",
    "EXPR [ (1, _55, _55) (-1, _56) 0 ]",
    "EXPR [ (-1, _42) (-1, _57) 1 ]",
    "EXPR [ (2, _42, _56) (1, _56, _57) (-1, _58) 0 ]",
    "EXPR [ (1, _58, _58) (-1, _59) 0 ]",
    "EXPR [ (-1, _41) (-1, _60) 1 ]",
    "EXPR [ (2, _41, _59) (-1, _98) 0 ]",
    "EXPR [ (1, _59, _60) (-1, _99) 0 ]",
    "EXPR [ (-1, _61) (1, _98) (1, _99) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _61) 0 ]], outputs: [_62]",
    "EXPR [ (1, _61, _62) (1, _63) -1 ]",
    "EXPR [ (1, _61, _63) 0 ]",
    "EXPR [ (1, _40, _63) 0 ]",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (1, _40) 0 ]",
    "inputs: [EXPR [ (1, _0) 0 ], EXPR [ (2, _59, _41) (1, _59, _60) 0 ]], outputs: [_64, _65]",
    "BLACKBOX::RANGE [(_64, 64)] []",
    "BLACKBOX::RANGE [(_65, 64)] []",
    "EXPR [ (-1, _40) (-1, _65) (-1, _66) (1, _98) (1, _99) 0 ]",
    "BLACKBOX::RANGE [(_66, 64)] []",
    "EXPR [ (-1, _67) (1, _98) (1, _99) 0 ]",
    "EXPR [ (1, _64, _67) (1, _65) (-1, _68) 0 ]",
    "EXPR [ (-1, _40, _68) (1, _87) 0 ]",
    "EXPR [ (-3, _3, _5) (1, _9, _33) (3, _3) (-1, _69) 0 ]",
    "EXPR [ (-1, _3) (-1, _70) 1 ]",
    "EXPR [ (5, _3, _39) (1, _40, _64) (-5, _3) (-5, _39) (-1, _71) 5 ]",
    "EXPR [ (-1, _3, _69) (-1, _70, _71) (1, _1) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
