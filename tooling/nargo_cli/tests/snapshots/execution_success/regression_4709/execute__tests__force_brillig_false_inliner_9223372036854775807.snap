---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "6485997221020871071": {
        "error_kind": "string",
        "string": "call to assert_max_bit_size"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _50",
    "private parameters indices : [_0]",
    "public parameters indices : [_1]",
    "return value indices : []",
    "BRILLIG CALL func 3: inputs: [EXPR [ (1, _0) -8388993 ]], outputs: [_2]",
    "EXPR [ (1, _0, _2) (-8388993, _2) (1, _3) -1 ]",
    "EXPR [ (1, _0, _3) (-8388993, _3) 0 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (-1, _3) 1 ]",
    "inputs: [EXPR [ (1, _0) 0 ], EXPR [ 8388993 ]], outputs: [_4]",
    "BLACKBOX::RANGE [_4]:1 bits []",
    "EXPR [ (-8388993, _3, _4) (8388993, _4) (-1, _5) 0 ]",
    "BLACKBOX::RANGE [_5]:128 bits []",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (-1, _3, _4) (1, _4) 0 ]",
    "inputs: [EXPR [ 53438638232309528389504892708671455233 ], EXPR [ (1, _5) 0 ]], outputs: [_6]",
    "BLACKBOX::RANGE [_6]:1 bits []",
    "EXPR [ (-1, _5) (340282366920938463463374607431768211456, _6) (-1, _7) 53438638232309528389504892708671455232 ]",
    "EXPR [ (-1, _3, _4) (1, _4) (-1, _8) 0 ]",
    "EXPR [ (1, _7, _8) (-1, _9) 0 ]",
    "BLACKBOX::RANGE [_9]:128 bits []",
    "EXPR [ (-1, _6, _8) (64323764613183177041862057485226039389, _8) (-1, _10) 0 ]",
    "BLACKBOX::RANGE [_10]:128 bits []",
    "BRILLIG CALL func 2: PREDICATE: EXPR [ (1, _8) 0 ]",
    "inputs: [EXPR [ (1, _0) 0 ]], outputs: [_11, _12]",
    "EXPR [ (1, _8, _11) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [_13]:128 bits []",
    "EXPR [ (1, _8, _12) (-1, _14) 0 ]",
    "BLACKBOX::RANGE [_14]:128 bits []",
    "EXPR [ (-1, _8, _13) (-1, _38) 0 ]",
    "EXPR [ (-340282366920938463463374607431768211456, _8, _14) (-1, _39) 0 ]",
    "EXPR [ (1, _0, _8) (1, _38) (1, _39) 0 ]",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (1, _8) 0 ]",
    "inputs: [EXPR [ 53438638232309528389504892708671455233 ], EXPR [ (1, _13) 0 ]], outputs: [_15]",
    "BLACKBOX::RANGE [_15]:1 bits []",
    "EXPR [ (340282366920938463463374607431768211456, _8, _15) (-1, _40) 0 ]",
    "EXPR [ (53438638232309528389504892708671455232, _8) (-1, _16) (1, _38) (1, _40) 0 ]",
    "BLACKBOX::RANGE [_16]:128 bits []",
    "EXPR [ (64323764613183177041862057485226039389, _8) (-1, _17) (8680525429001239497728366687280168587232520577698044359798894838135247199343, _39) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _40) 0 ]",
    "BLACKBOX::RANGE [_17]:128 bits []",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (1, _8) 0 ]",
    "inputs: [EXPR [ (1, _5) 0 ], EXPR [ (1, _13) 0 ]], outputs: [_18]",
    "BLACKBOX::RANGE [_18]:1 bits []",
    "EXPR [ (340282366920938463463374607431768211456, _8, _18) (-1, _42) 0 ]",
    "EXPR [ (1, _5, _8) (-1, _8) (-1, _19) (1, _38) (1, _42) 0 ]",
    "BLACKBOX::RANGE [_19]:128 bits []",
    "EXPR [ (-1, _20) (8680525429001239497728366687280168587232520577698044359798894838135247199343, _39) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _42) 0 ]",
    "BLACKBOX::RANGE [_20]:128 bits []",
    "BRILLIG CALL func 2: PREDICATE: EXPR [ (1, _3, _4) (-1, _3) (-1, _4) 1 ]",
    "inputs: [EXPR [ (1, _0) 0 ]], outputs: [_21, _22]",
    "EXPR [ (1, _3, _4) (-1, _3) (-1, _4) (-1, _23) 1 ]",
    "EXPR [ (1, _21, _23) (-1, _24) 0 ]",
    "BLACKBOX::RANGE [_24]:128 bits []",
    "EXPR [ (1, _22, _23) (-1, _25) 0 ]",
    "BLACKBOX::RANGE [_25]:128 bits []",
    "EXPR [ (-1, _23, _24) (-1, _45) 0 ]",
    "EXPR [ (-340282366920938463463374607431768211456, _23, _25) (-1, _46) 0 ]",
    "EXPR [ (1, _0, _23) (1, _45) (1, _46) 0 ]",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (1, _23) 0 ]",
    "inputs: [EXPR [ 53438638232309528389504892708671455233 ], EXPR [ (1, _24) 0 ]], outputs: [_26]",
    "BLACKBOX::RANGE [_26]:1 bits []",
    "EXPR [ (340282366920938463463374607431768211456, _23, _26) (-1, _47) 0 ]",
    "EXPR [ (53438638232309528389504892708671455232, _23) (-1, _27) (1, _45) (1, _47) 0 ]",
    "BLACKBOX::RANGE [_27]:128 bits []",
    "EXPR [ (64323764613183177041862057485226039389, _23) (-1, _28) (8680525429001239497728366687280168587232520577698044359798894838135247199343, _46) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _47) 0 ]",
    "BLACKBOX::RANGE [_28]:128 bits []",
    "EXPR [ (8388993, _23) (-1, _29) 0 ]",
    "BLACKBOX::RANGE [_29]:128 bits []",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (1, _23) 0 ]",
    "inputs: [EXPR [ 53438638232309528389504892708671455233 ], EXPR [ (1, _29) 0 ]], outputs: [_30]",
    "BLACKBOX::RANGE [_30]:1 bits []",
    "EXPR [ (-1, _23, _29) (-1, _48) 0 ]",
    "EXPR [ (340282366920938463463374607431768211456, _23, _30) (53438638232309528389504892708671455232, _23) (-1, _31) (1, _48) 0 ]",
    "BLACKBOX::RANGE [_31]:128 bits []",
    "EXPR [ (-1, _23, _30) (64323764613183177041862057485226039389, _23) (-1, _32) 0 ]",
    "BLACKBOX::RANGE [_32]:128 bits []",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (1, _23) 0 ]",
    "inputs: [EXPR [ (1, _24) 0 ], EXPR [ (1, _29) 0 ]], outputs: [_33]",
    "BLACKBOX::RANGE [_33]:1 bits []",
    "EXPR [ (340282366920938463463374607431768211456, _23, _33) (-1, _50) 0 ]",
    "EXPR [ (-1, _23) (-1, _34) (-1, _45) (1, _48) (1, _50) 0 ]",
    "BLACKBOX::RANGE [_34]:128 bits []",
    "EXPR [ (-1, _35) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _46) (-8680525429001239497728366687280168587232520577698044359798894838135247199343, _50) 0 ]",
    "BLACKBOX::RANGE [_35]:128 bits []",
    "EXPR [ (1, _23) 0 ]",
    "BRILLIG CALL func 3: inputs: [EXPR [ (1, _0) (-1, _1) 0 ]], outputs: [_36]",
    "EXPR [ (1, _0, _36) (-1, _1, _36) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 19 }, BinaryFieldOp { destination: Relative(3), op: LessThan, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 24 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 1",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 2 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(3), offset_address: Relative(4) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32838), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 27 }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 22 }, Jump { location: 19 }, BinaryFieldOp { destination: Relative(4), op: LessThan, lhs: Relative(1), rhs: Relative(2) }, Mov { destination: Relative(3), source: Relative(4) }, Jump { location: 25 }, Const { destination: Relative(1), bit_size: Integer(U1), value: 1 }, Mov { destination: Relative(3), source: Relative(1) }, Jump { location: 25 }, Mov { destination: Relative(1), source: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 32 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 2",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32839 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 14 }, Call { location: 15 }, Mov { destination: Direct(32837), source: Relative(1) }, Mov { destination: Direct(32838), source: Relative(2) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 2 }, Stop { return_data: HeapVector { pointer: Relative(3), size: Relative(4) } }, Return, Call { location: 24 }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U128) }, Cast { destination: Relative(2), source: Relative(3), bit_size: Field }, BinaryFieldOp { destination: Relative(3), op: Sub, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(1), bit_size: Field, value: 8680525429001239497728366687280168587232520577698044359798894838135247199343 }, BinaryFieldOp { destination: Relative(4), op: Mul, lhs: Relative(3), rhs: Relative(1) }, Mov { destination: Relative(1), source: Relative(2) }, Mov { destination: Relative(2), source: Relative(4) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 29 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    "unconstrained func 3",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
