---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "eph_pk_bytes",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_header_ciphertext",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_body_ciphertext",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "flag",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 15,
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8193989641828211937": {
        "error_kind": "string",
        "string": "ciphertext length mismatch"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "nZbLbupADIbfJess5uaxp69SoSqFUEWKAkrhSEeId6/N2KEsupkN3xeG/Hiuya07jJ/Xr49pOZ6+u7f3W/e5TvM8fX3Mp/1wmU4Lf3vrnHxQ7t5C3xFWUEV5oLgKXxEqYkWqgIqaUmpKqSmlpnjnlF4ZlFHJUVEIyqzESs/tScjXIOT4LCyVwSm9kvNRyPkkTEpQZiUqOa8IS2V0Sq8MyqhMSs7zTiSboAmZlPofySm9Mii1xqSZCZRZiUqtMWmNoDWC1gic571INEkmYCJlyoADmpBJUcnOhIO9jH4OJtEkmYBJNkETMikq6EwsGS0ZJVlmGJMJmGQTyZHZJ/mxTDOBfZNN5N9l5mUZVykqspSreJNgIoEyB7Kkq4BJNkETMim1jCCru4o3CSbRJJmASTZBFe8eqzx4r5SUIhJNkgmYyLZzImhCJkVFdkcVbxIe+yjI/ngwKUGZlagkZamU/QH3e9/ZafJxWcdRDpNfxwsfOudhHZdL97Zc57nv/g3z9fGj7/OwPHgZVm7lisblwOTA4zSPYvf+ebf7+1ae1aJ38xDHLQBeE/zfCdy3YAmBmhKitx6w+pYEkmVYEyhQU0KKWwK6loTiyBJKKA0J0YGNZHS5ZSR5IK2GyCdpUw34THDQlFDSMyE19QJwS8CW2YxhW9UxxKZepLAlpNg0m7l4S8DQNBdIbkugppHEsvWCQm5JIHksWELTSNJzJAly096E7YyiXJoS8Lm76XVF7fhq2E/ry4vdXbLWaficR708Xpf9r9bL/7O12IvheT3tx8N1HSXp+XbIH+8hQR9y3vUdPy/e0fXkdvJ2Jk0x9iGSXHq55EIDwu4uhf0A",
  "file_map": {
    "50": {
      "source": "// The code below is inspired by [compute_encrypted_log](https://github.com/AztecProtocol/aztec-packages/blob/b42756bc10175fea9eb60544759e9dbe41ae5e76/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr#L111)\n// which resulted in a bytecode size blowup when compiled to ACIR, see https://github.com/noir-lang/noir/issues/6929\n// The issue was around `encrypted_bytes[offset + i]` generating large amounts of gates, as per the `flamegraph.sh` tool in aztec-packages.\n// The details around encryption and addresses have been stripped away, focusing on just copying bytes of equivalent size arrays.\n\n// Original values which resulted in huge bytecode even on this example (500K long SSA)\n// global PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 18;\n// global ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 31;\n// global EPH_PK_SIZE: u32 = 32;\n// global HEADER_SIZE: u32 = 48;\n// global OVERHEAD_PADDING: u32 = 15;\n\n// Using the same formulas with smaller numbers; the effect is the same, but the SSA is more manageable.\nglobal PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 4;\nglobal ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 5;\nglobal EPH_PK_SIZE: u32 = 3;\nglobal HEADER_SIZE: u32 = 2;\nglobal OVERHEAD_PADDING: u32 = 1;\n\n// Unused because encryption didn't play a role:\n// global OVERHEAD_SIZE: u32 = EPH_PK_SIZE + HEADER_SIZE + OVERHEAD_PADDING;\n// global PLAINTEXT_LENGTH_SIZE: u32 = 2;\n// global MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 =\n//     ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - OVERHEAD_SIZE - PLAINTEXT_LENGTH_SIZE - 1 /* aes padding */;\n\nglobal BODY_SIZE: u32 =\n    ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - EPH_PK_SIZE - HEADER_SIZE - OVERHEAD_PADDING;\n\nfn main(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> pub [u8; ENCRYPTED_PAYLOAD_SIZE_IN_BYTES] {\n    compute_encrypted_log(\n        eph_pk_bytes,\n        incoming_header_ciphertext,\n        incoming_body_ciphertext,\n        flag,\n    )\n}\n\nfn compute_encrypted_log<let M: u32>(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> [u8; M] {\n    let mut encrypted_bytes = [0; M];\n    let mut offset = 0;\n\n    // NOTE: Adding a conditional variable can result in the array being fully copied, item by item,\n    // in each iteration in the second loop that copies incoming_body_ciphertext into encrypted_bytes.\n    // Depending on where we place the `flag` we either get the item-by-item copying (blowup),\n    // or just a single array item gets read and a new array constructed in each iteration (no blowup).\n\n    // If the `flag` is here then it blows up.\n    if flag {\n        // eph_pk\n        for i in 0..EPH_PK_SIZE {\n            encrypted_bytes[offset + i] = eph_pk_bytes[i];\n        }\n        offset += EPH_PK_SIZE;\n\n        // If the `flag` is here then it blows up.\n        // if flag {\n\n        // incoming_header\n        for i in 0..HEADER_SIZE {\n            encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n        }\n        offset += HEADER_SIZE;\n\n        // Padding.\n        offset += OVERHEAD_PADDING;\n\n        // If the `flag` is here then it does not blow up.\n        //if flag {\n        // incoming_body\n        // Then we fill in the rest as the incoming body ciphertext\n        let size = M - offset;\n\n        // NOTE: This made the bytecode size blowup disappear in aztec packages,\n        // but in this reproduction the size seems to be statically known regardless.\n        // let size = M - 32 - HEADER_SIZE - OVERHEAD_PADDING;\n\n        assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n        for i in 0..size {\n            encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n        }\n    }\n\n    encrypted_bytes\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
