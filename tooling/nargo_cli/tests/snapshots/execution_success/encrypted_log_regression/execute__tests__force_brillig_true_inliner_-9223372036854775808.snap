---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "eph_pk_bytes",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_header_ciphertext",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_body_ciphertext",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "flag",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 15,
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8193989641828211937": {
        "error_kind": "string",
        "string": "ciphertext length mismatch"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "nZbNbuowEIXfJess7PHfuK9SoYrStIoUBZTCla4q3v167DmhXVyp8obvM3EOZhibfA1v0+vt42Ve38+fw9Pz1/C6zcsyf7ws59PxOp/X8u7XYOSF4/Bkx4FTAzfkimwabAM1uAbfECqsKSRhVCYlK3OjNUqrJKVTeqXmWc2zmmc1z2oeaR5pHmkelTwn9MqgjI2uXPfCMg7Ckh+FrMyN3iitsuQlYZnPwjI/C3NjMEqrlKIZEQfxkACJEPkRpJqBIVklGoiFEMRBPCRAIgTJEclRkqVSyUAshCCSI9VKMlnKxVbfYYLIp0sF2UMCJEIShCESKPWsLVbFQgjiIB4SdBk5QhKEIbpUMgZiIQRxkFh/TZJurZSUKllF+rWJhUgKiziIhwRIhCQI134h6Vuh9G2lVZLSKb0yKKMy174lZ5SyrCxCEAfxENlLRiRCEoQhWUUavomtO4M8KZ3SK4MyKpOSlSUx3O/jgDPn5bpNkxw53w6hcjRdjtu0Xoen9bYs4/DnuNzqpM/Lca28HrdytaxoWt8KS+D7vExi9/Fxt/n/raXHst5Nxrs9IPw6gYgJCcRdCc7iGxS1PQks3dcSmLgrwbs9IZmehGwYCZlyR4IzAZV0JrquhIQ1lJqGnoRyzu4JqaeSjvaOcmV39SR42hO866pkzBYJiVJPQmKzJ7DvSsj7t2CKPQksfwdI6KokPyrJoWsNJvtHR3XVwZpHT7rUtTfDfkZxzF0J6bG7+WdXH8roeJq3H49/d8na5uPrMunw/baevl29/r3gCh4fL9v5NL3dtkmSHs+Q5eWZYhrLBx/GofxPPCczsjnIc18ZZB6tcTKydaIdKbrDXdb1Dw==",
  "file_map": {
    "50": {
      "source": "// The code below is inspired by [compute_encrypted_log](https://github.com/AztecProtocol/aztec-packages/blob/b42756bc10175fea9eb60544759e9dbe41ae5e76/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr#L111)\n// which resulted in a bytecode size blowup when compiled to ACIR, see https://github.com/noir-lang/noir/issues/6929\n// The issue was around `encrypted_bytes[offset + i]` generating large amounts of gates, as per the `flamegraph.sh` tool in aztec-packages.\n// The details around encryption and addresses have been stripped away, focusing on just copying bytes of equivalent size arrays.\n\n// Original values which resulted in huge bytecode even on this example (500K long SSA)\n// global PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 18;\n// global ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 31;\n// global EPH_PK_SIZE: u32 = 32;\n// global HEADER_SIZE: u32 = 48;\n// global OVERHEAD_PADDING: u32 = 15;\n\n// Using the same formulas with smaller numbers; the effect is the same, but the SSA is more manageable.\nglobal PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 4;\nglobal ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 5;\nglobal EPH_PK_SIZE: u32 = 3;\nglobal HEADER_SIZE: u32 = 2;\nglobal OVERHEAD_PADDING: u32 = 1;\n\n// Unused because encryption didn't play a role:\n// global OVERHEAD_SIZE: u32 = EPH_PK_SIZE + HEADER_SIZE + OVERHEAD_PADDING;\n// global PLAINTEXT_LENGTH_SIZE: u32 = 2;\n// global MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 =\n//     ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - OVERHEAD_SIZE - PLAINTEXT_LENGTH_SIZE - 1 /* aes padding */;\n\nglobal BODY_SIZE: u32 =\n    ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - EPH_PK_SIZE - HEADER_SIZE - OVERHEAD_PADDING;\n\nfn main(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> pub [u8; ENCRYPTED_PAYLOAD_SIZE_IN_BYTES] {\n    compute_encrypted_log(\n        eph_pk_bytes,\n        incoming_header_ciphertext,\n        incoming_body_ciphertext,\n        flag,\n    )\n}\n\nfn compute_encrypted_log<let M: u32>(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> [u8; M] {\n    let mut encrypted_bytes = [0; M];\n    let mut offset = 0;\n\n    // NOTE: Adding a conditional variable can result in the array being fully copied, item by item,\n    // in each iteration in the second loop that copies incoming_body_ciphertext into encrypted_bytes.\n    // Depending on where we place the `flag` we either get the item-by-item copying (blowup),\n    // or just a single array item gets read and a new array constructed in each iteration (no blowup).\n\n    // If the `flag` is here then it blows up.\n    if flag {\n        // eph_pk\n        for i in 0..EPH_PK_SIZE {\n            encrypted_bytes[offset + i] = eph_pk_bytes[i];\n        }\n        offset += EPH_PK_SIZE;\n\n        // If the `flag` is here then it blows up.\n        // if flag {\n\n        // incoming_header\n        for i in 0..HEADER_SIZE {\n            encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n        }\n        offset += HEADER_SIZE;\n\n        // Padding.\n        offset += OVERHEAD_PADDING;\n\n        // If the `flag` is here then it does not blow up.\n        //if flag {\n        // incoming_body\n        // Then we fill in the rest as the incoming body ciphertext\n        let size = M - offset;\n\n        // NOTE: This made the bytecode size blowup disappear in aztec packages,\n        // but in this reproduction the size seems to be statically known regardless.\n        // let size = M - 32 - HEADER_SIZE - OVERHEAD_PADDING;\n\n        assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n        for i in 0..size {\n            encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n        }\n    }\n\n    encrypted_bytes\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
