---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "eph_pk_bytes",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_header_ciphertext",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_body_ciphertext",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "flag",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 15,
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8193989641828211937": {
        "error_kind": "string",
        "string": "ciphertext length mismatch"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "nZbNbqMwFEbfhTUL+/rvuq9SRRVNSYWESESTkUZR3n188XdJuxip8qbnEMipg43FvfsY32+fb9NyOn91L6/37n2d5nn6fJvPx+E6nZfy6b0z8odj92L7jlMFV+QN2VTYCqpwFb4ibLCmkIQRTCCDudIa0IIEOtCD6Fn0LHoWPYseoUfoEXpUek7owQDGSlfOe2E5DsLSj0IGc6U3YOknIYEO9GAAI1h6LGQwVwYDWpBAB5ZeFgYwggnk2g+5MhoQ44sYX0QvejCAEcT4IsYXMb6E8SWZcyNCKk7Fq8jcy+SnqJJUWCVDWNaSzAxbFVJxKl4lqESVpMIqGZK1nLW8rVSZ5W2tbuJVgop0ygogIxcHEa+fyDVRJKokFVbJEFnQVeS/JxFScSpeJahElaTCGIas7E1kaVexKjpUWd1VvEpQiSp5W+HkJMMiVoVUnIpkskhQiSpJhVUyRJ6NKnZ7iEgejo0O9GAAI5hABksxPB59p9vT23UdR9mdvu1XZRe7DOu4XLuX5TbPffdnmG/bRV+XYdl4HdZytizNcfkoLMHTNI9ij/75bfP/r5a1lPHtshzcHgi/LhAxaYG4qeCs/oKitqXAsqJqgYmbCt7thWRaCtmwFjLlhkK5DVpwZXtuKZj0LJjQVMj+WfBNvyKkvZBa5sLRviZdeT5bCp72gndNcxGz1UKiprlIbPYCN93JlPdfwRRbCiwboxaa7iQ/7ySH2PRkhX2H4ZibCun5bPLPFXUoR8NxWn+85z2ktU7D+zzi8HRbjt/OXv9e9Iy+J17W83H8uK2jlJ4vi+XPKwXuKeVD35Vd/jWZns1BXvDKQebeGidHVi7k2JcRHh4yrn8=",
  "file_map": {
    "50": {
      "source": "// The code below is inspired by [compute_encrypted_log](https://github.com/AztecProtocol/aztec-packages/blob/b42756bc10175fea9eb60544759e9dbe41ae5e76/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr#L111)\n// which resulted in a bytecode size blowup when compiled to ACIR, see https://github.com/noir-lang/noir/issues/6929\n// The issue was around `encrypted_bytes[offset + i]` generating large amounts of gates, as per the `flamegraph.sh` tool in aztec-packages.\n// The details around encryption and addresses have been stripped away, focusing on just copying bytes of equivalent size arrays.\n\n// Original values which resulted in huge bytecode even on this example (500K long SSA)\n// global PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 18;\n// global ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 31;\n// global EPH_PK_SIZE: u32 = 32;\n// global HEADER_SIZE: u32 = 48;\n// global OVERHEAD_PADDING: u32 = 15;\n\n// Using the same formulas with smaller numbers; the effect is the same, but the SSA is more manageable.\nglobal PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 4;\nglobal ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 5;\nglobal EPH_PK_SIZE: u32 = 3;\nglobal HEADER_SIZE: u32 = 2;\nglobal OVERHEAD_PADDING: u32 = 1;\n\n// Unused because encryption didn't play a role:\n// global OVERHEAD_SIZE: u32 = EPH_PK_SIZE + HEADER_SIZE + OVERHEAD_PADDING;\n// global PLAINTEXT_LENGTH_SIZE: u32 = 2;\n// global MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 =\n//     ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - OVERHEAD_SIZE - PLAINTEXT_LENGTH_SIZE - 1 /* aes padding */;\n\nglobal BODY_SIZE: u32 =\n    ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - EPH_PK_SIZE - HEADER_SIZE - OVERHEAD_PADDING;\n\nfn main(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> pub [u8; ENCRYPTED_PAYLOAD_SIZE_IN_BYTES] {\n    compute_encrypted_log(\n        eph_pk_bytes,\n        incoming_header_ciphertext,\n        incoming_body_ciphertext,\n        flag,\n    )\n}\n\nfn compute_encrypted_log<let M: u32>(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> [u8; M] {\n    let mut encrypted_bytes = [0; M];\n    let mut offset = 0;\n\n    // NOTE: Adding a conditional variable can result in the array being fully copied, item by item,\n    // in each iteration in the second loop that copies incoming_body_ciphertext into encrypted_bytes.\n    // Depending on where we place the `flag` we either get the item-by-item copying (blowup),\n    // or just a single array item gets read and a new array constructed in each iteration (no blowup).\n\n    // If the `flag` is here then it blows up.\n    if flag {\n        // eph_pk\n        for i in 0..EPH_PK_SIZE {\n            encrypted_bytes[offset + i] = eph_pk_bytes[i];\n        }\n        offset += EPH_PK_SIZE;\n\n        // If the `flag` is here then it blows up.\n        // if flag {\n\n        // incoming_header\n        for i in 0..HEADER_SIZE {\n            encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n        }\n        offset += HEADER_SIZE;\n\n        // Padding.\n        offset += OVERHEAD_PADDING;\n\n        // If the `flag` is here then it does not blow up.\n        //if flag {\n        // incoming_body\n        // Then we fill in the rest as the incoming body ciphertext\n        let size = M - offset;\n\n        // NOTE: This made the bytecode size blowup disappear in aztec packages,\n        // but in this reproduction the size seems to be statically known regardless.\n        // let size = M - 32 - HEADER_SIZE - OVERHEAD_PADDING;\n\n        assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n        for i in 0..size {\n            encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n        }\n    }\n\n    encrypted_bytes\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
