---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "eph_pk_bytes",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_header_ciphertext",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_body_ciphertext",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "flag",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 15,
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8193989641828211937": {
        "error_kind": "string",
        "string": "ciphertext length mismatch"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91ZvY/cRBQfe23fft5uEgifkeA/WO/3dpFILrl83iXhD/Du3UJNRWkKJBokJBoKGioqhASiQXT0NHT0NHT0SMRzmXf789s33r2c506bkUa2Z35+3+/NjO2pF+1G1j1zH7CrHq+ofCPsTXPtnq/FJdLqupLR2wIZ/RJl1LL5yq3fK1tg06Bkm9Yc2zTcAptGWyDjzhbIWN0CGWtbIGN9C2RsbIGMzS2QseVARhdy7qpy1x2SsW3u9bWT9StZv5r1a1l/LeuvZ/161t/I+ptZfyvrb2f9nay/q17sFU8JoPJ6s6AXdL1g6kVIF3ldRHWR0kVAJ5kOYh0k2gm78H5pQqmlI943N7Tg+jBf4sYjrjG+ZdKfdEcDacNQovz9mqEZuqG/IPqRG/rdHUNnL13SR12Ib4Xh+Dt40LkDmDsWzF3A3LVg9gGzb8HcA8w9C+Y+YO5bMA8A88CCeQiYhxbMI8A8smAeA+axBXMAmAML5hAwhxbME8A8sWCeAuapBfMMMM8Ao1sN8EqVncODkeMc6LdUPu4l3Xbc8B54jJ9SS5vjHPGvK6f1JvYYP5KH24fWgxZh0qU8HpsL0lU9aC6EOfKvXvP2AMdji+Qg37hYm7K4mzqOu94lxl3/VYw7Phekq3qcNe4wtnjcVRzYIou7meO4m15i3CWvYtxV2FyQrupx1rhDm4Rsjj4u60ZrsaZxCPQ+hPcxjlE/T9DPbWwPhzWmQ9n75bPWBe479E8A9txj9nGz5izt48L+2j7XLPLTvW47qTptFWZPtBHZrIp4NleDuSDN86mb5wD4IC2SI2T4A/NM594I3qH3OwL/iPHPyS2MoY04rYowRnid1/vmXp/Z6Qz6QbqkV/YZVLdbbuj3iP5tN/RPPs7pHJuRTZXT9W9MdRRrPjWaqwJvj83hNwufzdWZzDjXgDmsf7xJPwxxrfgY6HIc1wPXzSqbk/bUGK9BqnK63DTj3XO08WT5QY1qRahWdUb+IcN/ZJ7R1nQ9zw+nxTiJF/1kkQyTo6PBPLnK6Ovmg52kmEV7e6q0mO2SzyKQ5WL2bHH3ZfdsjvK3cM8WCb4i+1TdyLPwGH2UpyrYR6oj6DusIyHQQnwVdOR1pw5yhGzsU3PtCDR57NYEfXAM17tPmG7S2WKTOEK6HUGuiPGJSuDj+MzT7ajVfCBe5B9aDz4zV439mcnnKn6JPv8WXxL9mJ9bUH+t5+cwbot9PPPQPorH9t9A8wtz3xZ4RxZ+ag0/wjeAT0Wgj/Ij/ktz1X78z9xLsUHvS+s02u0rpkcAfKUz3q00Lxfh/wCaX5t7shvugSMLPwX8fIEft3Mk4Ln8iP/GXNFunsBP8t3tDWRA3/kWGb4VZJB85zP5+DmX5zHHr7NR1SLfdyDf/+Ze8uHpuUWtrhtl1jyeKwHoUxf09xke71FfGvse9PW9vA2lmMAxvr5UBHlcnvOzNi2yT1E8Ev4H0D80+q+rFz+qvJ2K6oXEm/C/AM2f4J7Wq7ZAC88XbbW63m5Sk/keCe+lmox4W03+1Vwxr7m+vwGmymJN2oPiWca3yLlOL2ndarA5fC+08EHfYt7xOkL43wVdpW9qxNvlWVGfPbQcDRbfubqQ5vVuwlxFwHN/tAR8EzBksw7Do2+kfWqD8ZHWSg/GaJ2ScpjexRw+775m0xzaZF/zp7lK67MU71It3sR/6/KjyebwvdDCZ9P8IPxfoGtRfhDvy8gPtCHPj6J41437Y1fAYw7w/NiFuaL8aDI+ZeUH7YnbatWnPD+k2KwLdHnMRBY81lzE/2OuUn5I8Y56n7VeBQX6t9gcvhda+GB+YD7x/CD8v6BrUX4Q78vID7Qhz4+ieNeN+6Mt4DEHyGYdhpdyB33QYnzWnVF5fkh1G8/aZX87HQyT8TwZx/F0EB8P4uG6b6dl8+9NJqNpb9YdjI/mi6NB/6L5J+P+ZN4bzMezYT/pj5KL5j+OZ6PjUS8ZZW06P44vmv98OJrNsyDoHsf6sbeOv/TvDuuDbvT/D/8PIh7PJ4hvGwI63q+wGhQK/DTuvQKcZ7me0BDGgjQ/Jv03xP+phCfe9XRVRpprwBzWLt2a5hnthbRIjpDhbxgC5BP8B0rvdwT+VcY/J7cwxv+nNgR8Q8Br/1w3L53uQYF32f8WTngy+jjGZaPY0XH9HK1D8BQVOAAA",
  "debug_symbols": "nZbNbuowEIXfJess7PHfuK9SoYrStIoUBZTCla4q3v167DmhXVyp8obvM3EOZhibfA1v0+vt42Ve38+fw9Pz1/C6zcsyf7ws59PxOp/X8u7XYOSF4/Bkx4FTAzfkimwabAM1uAbfECqsKSRhVCYlK3OjNUqrJKVTeqXmWc2zmmc1z2oeaR5pHmkelTwn9MqgjI2uXPfCMg7Ckh+FrMyN3iitsuQlYZnPwjI/C3NjMEqrlKIZEQfxkACJEPkRpJqBIVklGoiFEMRBPCRAIgTJEclRkqVSyUAshCCSI9VKMlnKxVbfYZkjhWMH8ZAAiZAEkU+XMtYGE6ktVsVCCOIgHhJ0GTlCEoQhulQyBmIhBHGQWH9Nkm61VRiSVaRhm0gMixDEQTwkQCIkQbg2DEnjCqVxK62SlE7plUEZlbk2LjlZVxaxEII4iGwmIxIgEZIgDMkq0vJNbN0b5EnplF4ZlFGZlKwsieF+HwecOi/XbZrk0Pl2DJXD6XLcpvU6PK23ZRmHP8flVid9Xo5r5fW4latlRdP6VlgC3+dlEruPj7vN/28tXZb1bjLe7QHh1wlETEgg7kpwFt+gqO1JYOnDlsDEXQne7QnJ9CRkw0jIlDsSnAmopDPRdSUkrKHUNPQklJN2T0g9lXS0d5Qru6snwdOe4F1XJWO2SEiUehISmz2BfVdC3r8FU+xJYPlnQEJXJflRSQ5dazDZPzqqqw7WPHrSpa69GfYzimPuSkiP3c0/u/pQRsfTvP14ALxL1jYfX5dJh++39fTt6vXvBVfwAHnZzqfp7bZNkvR4iiwvzxTTWD74MA7lf+I5mZHNQZ78yiDzaI2Tka0T7UjRHe6yrn8=",
  "file_map": {
    "50": {
      "source": "// The code below is inspired by [compute_encrypted_log](https://github.com/AztecProtocol/aztec-packages/blob/b42756bc10175fea9eb60544759e9dbe41ae5e76/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr#L111)\n// which resulted in a bytecode size blowup when compiled to ACIR, see https://github.com/noir-lang/noir/issues/6929\n// The issue was around `encrypted_bytes[offset + i]` generating large amounts of gates, as per the `flamegraph.sh` tool in aztec-packages.\n// The details around encryption and addresses have been stripped away, focusing on just copying bytes of equivalent size arrays.\n\n// Original values which resulted in huge bytecode even on this example (500K long SSA)\n// global PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 18;\n// global ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 31;\n// global EPH_PK_SIZE: u32 = 32;\n// global HEADER_SIZE: u32 = 48;\n// global OVERHEAD_PADDING: u32 = 15;\n\n// Using the same formulas with smaller numbers; the effect is the same, but the SSA is more manageable.\nglobal PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 4;\nglobal ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 5;\nglobal EPH_PK_SIZE: u32 = 3;\nglobal HEADER_SIZE: u32 = 2;\nglobal OVERHEAD_PADDING: u32 = 1;\n\n// Unused because encryption didn't play a role:\n// global OVERHEAD_SIZE: u32 = EPH_PK_SIZE + HEADER_SIZE + OVERHEAD_PADDING;\n// global PLAINTEXT_LENGTH_SIZE: u32 = 2;\n// global MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 =\n//     ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - OVERHEAD_SIZE - PLAINTEXT_LENGTH_SIZE - 1 /* aes padding */;\n\nglobal BODY_SIZE: u32 =\n    ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - EPH_PK_SIZE - HEADER_SIZE - OVERHEAD_PADDING;\n\nfn main(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> pub [u8; ENCRYPTED_PAYLOAD_SIZE_IN_BYTES] {\n    compute_encrypted_log(\n        eph_pk_bytes,\n        incoming_header_ciphertext,\n        incoming_body_ciphertext,\n        flag,\n    )\n}\n\nfn compute_encrypted_log<let M: u32>(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> [u8; M] {\n    let mut encrypted_bytes = [0; M];\n    let mut offset = 0;\n\n    // NOTE: Adding a conditional variable can result in the array being fully copied, item by item,\n    // in each iteration in the second loop that copies incoming_body_ciphertext into encrypted_bytes.\n    // Depending on where we place the `flag` we either get the item-by-item copying (blowup),\n    // or just a single array item gets read and a new array constructed in each iteration (no blowup).\n\n    // If the `flag` is here then it blows up.\n    if flag {\n        // eph_pk\n        for i in 0..EPH_PK_SIZE {\n            encrypted_bytes[offset + i] = eph_pk_bytes[i];\n        }\n        offset += EPH_PK_SIZE;\n\n        // If the `flag` is here then it blows up.\n        // if flag {\n\n        // incoming_header\n        for i in 0..HEADER_SIZE {\n            encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n        }\n        offset += HEADER_SIZE;\n\n        // Padding.\n        offset += OVERHEAD_PADDING;\n\n        // If the `flag` is here then it does not blow up.\n        //if flag {\n        // incoming_body\n        // Then we fill in the rest as the incoming body ciphertext\n        let size = M - offset;\n\n        // NOTE: This made the bytecode size blowup disappear in aztec packages,\n        // but in this reproduction the size seems to be statically known regardless.\n        // let size = M - 32 - HEADER_SIZE - OVERHEAD_PADDING;\n\n        assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n        for i in 0..size {\n            encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n        }\n    }\n\n    encrypted_bytes\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
