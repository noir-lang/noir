---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "eph_pk_bytes",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_header_ciphertext",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "incoming_body_ciphertext",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 8
          }
        },
        "visibility": "private"
      },
      {
        "name": "flag",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 15,
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "8193989641828211937": {
        "error_kind": "string",
        "string": "ciphertext length mismatch"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "nZbLbuowEED/Jess7PFjxv2VClUphCpSFFAKV7pC/Htn8Ewoi2686TkhcOrEjpVbdxg/r18f03I8fXdv77fuc53mefr6mE/74TKdFv701jn5Q7l7g74jrKCK8kBxFb4CKkJFrEgVtVJqpdRKqRXvnNIrQRmUnArCpMxKrPR8Pgr5OAk5n4WlEpzSK7mPwqCMyqTMSlRyj4SlMjilV4IyKKOSe0WYlagkZan96JReqeOLOr6ovZiUWYlKHV/U8SUdX9LxJe55JxJMokky4ab3ImhCJkUlOxMOe5mZDCbBJJokk2yCJmRSVNCZWBmtjFKWWcZokkyyiXRkBZB8WZYAJftEviOTLgu4CpkUFVnGVbyJ/He59bKYq0STZJJN0IRMSh0GyMqu4k3AJJhEk2SSTVDFu8cKBy8ZEgGTYBJNJFNEsgmakElRkUejijeBx0ME8nA8GJVJmZWoJGWplIcj3e99Z1vJx2UdR9lJfu0tvOOch3VcLt3bcp3nvvs3zNfHl77Pw/LgZVj5LC/NcTkwOXic5lHs3j9/7f7+KU9r0V/zPQ5bIL0W/N8FvjawAlBTIXi7AlbfUiBZUbVAQE2FGLYCupZCcWSFAqWhwLfBCoG3wZaCw2fBpaZCic9CbLqKhFsBW+YiwLYmA4Smq4iwFWJomotcvBUQmuYCyW0FarqTWLarIMgtBZKN0QpNd5Ked5JSbnqy0rbDUC5NBXw+m/S6onZ8NOyn9eWd7C6tdRo+51EPj9dl/+vs5f/Zztg73Xk97cfDdR2l9Hyx4z/vEFMPOe/6jnf7d3Q9uZ28WMmpEHoIJIdeDnmggGl3l4H9AA==",
  "file_map": {
    "50": {
      "source": "// The code below is inspired by [compute_encrypted_log](https://github.com/AztecProtocol/aztec-packages/blob/b42756bc10175fea9eb60544759e9dbe41ae5e76/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr#L111)\n// which resulted in a bytecode size blowup when compiled to ACIR, see https://github.com/noir-lang/noir/issues/6929\n// The issue was around `encrypted_bytes[offset + i]` generating large amounts of gates, as per the `flamegraph.sh` tool in aztec-packages.\n// The details around encryption and addresses have been stripped away, focusing on just copying bytes of equivalent size arrays.\n\n// Original values which resulted in huge bytecode even on this example (500K long SSA)\n// global PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 18;\n// global ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 31;\n// global EPH_PK_SIZE: u32 = 32;\n// global HEADER_SIZE: u32 = 48;\n// global OVERHEAD_PADDING: u32 = 15;\n\n// Using the same formulas with smaller numbers; the effect is the same, but the SSA is more manageable.\nglobal PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 4;\nglobal ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = (PRIVATE_LOG_SIZE_IN_FIELDS - 1) * 5;\nglobal EPH_PK_SIZE: u32 = 3;\nglobal HEADER_SIZE: u32 = 2;\nglobal OVERHEAD_PADDING: u32 = 1;\n\n// Unused because encryption didn't play a role:\n// global OVERHEAD_SIZE: u32 = EPH_PK_SIZE + HEADER_SIZE + OVERHEAD_PADDING;\n// global PLAINTEXT_LENGTH_SIZE: u32 = 2;\n// global MAX_PRIVATE_LOG_PLAINTEXT_SIZE_IN_BYTES: u32 =\n//     ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - OVERHEAD_SIZE - PLAINTEXT_LENGTH_SIZE - 1 /* aes padding */;\n\nglobal BODY_SIZE: u32 =\n    ENCRYPTED_PAYLOAD_SIZE_IN_BYTES - EPH_PK_SIZE - HEADER_SIZE - OVERHEAD_PADDING;\n\nfn main(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> pub [u8; ENCRYPTED_PAYLOAD_SIZE_IN_BYTES] {\n    compute_encrypted_log(\n        eph_pk_bytes,\n        incoming_header_ciphertext,\n        incoming_body_ciphertext,\n        flag,\n    )\n}\n\nfn compute_encrypted_log<let M: u32>(\n    eph_pk_bytes: [u8; EPH_PK_SIZE],\n    incoming_header_ciphertext: [u8; HEADER_SIZE],\n    incoming_body_ciphertext: [u8; BODY_SIZE],\n    flag: bool,\n) -> [u8; M] {\n    let mut encrypted_bytes = [0; M];\n    let mut offset = 0;\n\n    // NOTE: Adding a conditional variable can result in the array being fully copied, item by item,\n    // in each iteration in the second loop that copies incoming_body_ciphertext into encrypted_bytes.\n    // Depending on where we place the `flag` we either get the item-by-item copying (blowup),\n    // or just a single array item gets read and a new array constructed in each iteration (no blowup).\n\n    // If the `flag` is here then it blows up.\n    if flag {\n        // eph_pk\n        for i in 0..EPH_PK_SIZE {\n            encrypted_bytes[offset + i] = eph_pk_bytes[i];\n        }\n        offset += EPH_PK_SIZE;\n\n        // If the `flag` is here then it blows up.\n        // if flag {\n\n        // incoming_header\n        for i in 0..HEADER_SIZE {\n            encrypted_bytes[offset + i] = incoming_header_ciphertext[i];\n        }\n        offset += HEADER_SIZE;\n\n        // Padding.\n        offset += OVERHEAD_PADDING;\n\n        // If the `flag` is here then it does not blow up.\n        //if flag {\n        // incoming_body\n        // Then we fill in the rest as the incoming body ciphertext\n        let size = M - offset;\n\n        // NOTE: This made the bytecode size blowup disappear in aztec packages,\n        // but in this reproduction the size seems to be statically known regardless.\n        // let size = M - 32 - HEADER_SIZE - OVERHEAD_PADDING;\n\n        assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n        for i in 0..size {\n            encrypted_bytes[offset + i] = incoming_body_ciphertext[i];\n        }\n    }\n\n    encrypted_bytes\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
