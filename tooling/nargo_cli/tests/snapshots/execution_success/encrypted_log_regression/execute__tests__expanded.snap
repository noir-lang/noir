---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
global PRIVATE_LOG_SIZE_IN_FIELDS: u32 = 4;

global ENCRYPTED_PAYLOAD_SIZE_IN_BYTES: u32 = 15;

global EPH_PK_SIZE: u32 = 3;

global HEADER_SIZE: u32 = 2;

global OVERHEAD_PADDING: u32 = 1;

global BODY_SIZE: u32 = 9;

fn main(
    eph_pk_bytes: [u8; 3],
    incoming_header_ciphertext: [u8; 2],
    incoming_body_ciphertext: [u8; 9],
    flag: bool,
) -> pub [u8; 15] {
    compute_encrypted_log(
        eph_pk_bytes,
        incoming_header_ciphertext,
        incoming_body_ciphertext,
        flag,
    )
}

fn compute_encrypted_log<let M: u32>(
    eph_pk_bytes: [u8; 3],
    incoming_header_ciphertext: [u8; 2],
    incoming_body_ciphertext: [u8; 9],
    flag: bool,
) -> [u8; M] {
    let mut encrypted_bytes: [u8; M] = [0_u8; M];
    let mut offset: u32 = 0_u32;
    if flag {
        for i in 0_u32..EPH_PK_SIZE {
            {
<<<<<<< HEAD
                let i_3979: u32 = offset + i;
                encrypted_bytes[i_3979] = eph_pk_bytes[i];
=======
                let i_4251: u32 = offset + i;
                encrypted_bytes[i_4251] = eph_pk_bytes[i];
>>>>>>> 1b5e1de2e7c3d46945bb6747eba4e44342bd6b4e
            }
        }
        offset = offset + EPH_PK_SIZE;
        for i in 0_u32..HEADER_SIZE {
            {
<<<<<<< HEAD
                let i_3981: u32 = offset + i;
                encrypted_bytes[i_3981] = incoming_header_ciphertext[i];
=======
                let i_4253: u32 = offset + i;
                encrypted_bytes[i_4253] = incoming_header_ciphertext[i];
>>>>>>> 1b5e1de2e7c3d46945bb6747eba4e44342bd6b4e
            }
        }
        offset = offset + HEADER_SIZE;
        offset = offset + OVERHEAD_PADDING;
        let size: u32 = M - offset;
        assert(size == incoming_body_ciphertext.len(), "ciphertext length mismatch");
        for i in 0_u32..size {
            {
<<<<<<< HEAD
                let i_3984: u32 = offset + i;
                encrypted_bytes[i_3984] = incoming_body_ciphertext[i];
=======
                let i_4256: u32 = offset + i;
                encrypted_bytes[i_4256] = incoming_body_ciphertext[i];
>>>>>>> 1b5e1de2e7c3d46945bb6747eba4e44342bd6b4e
            }
        }
    };
    encrypted_bytes
}
