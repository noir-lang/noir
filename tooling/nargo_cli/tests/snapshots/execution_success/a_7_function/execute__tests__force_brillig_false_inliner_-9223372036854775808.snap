---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "arr1",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "arr2",
        "type": {
          "kind": "array",
          "length": 9,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "285656119219400463": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 32 limbs"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _147",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_3, 32)] []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "BLACKBOX::RANGE [(_11, 32)] []",
    "BLACKBOX::RANGE [(_12, 32)] []",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "BLACKBOX::RANGE [(_14, 32)] []",
    "BLACKBOX::RANGE [(_15, 32)] []",
    "BLACKBOX::RANGE [(_16, 32)] []",
    "BLACKBOX::RANGE [(_17, 32)] []",
    "BLACKBOX::RANGE [(_18, 32)] []",
    "BLACKBOX::RANGE [(_19, 32)] []",
    "BLACKBOX::RANGE [(_20, 32)] []",
    "EXPR [ (-1, _0) 59 ]",
    "EXPR [ (2, _2) -2 ]",
    "EXPR [ (1, _2) -1 ]",
    "EXPR [ (1, _2) -1 ]",
    "EXPR [ (1, _0) (1, _1) -64 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ], EXPR [ 32 ], EXPR [ 2 ]], outputs: [[_22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53]]",
    "BLACKBOX::RANGE [(_22, 1)] []",
    "BLACKBOX::RANGE [(_23, 1)] []",
    "BLACKBOX::RANGE [(_24, 1)] []",
    "BLACKBOX::RANGE [(_25, 1)] []",
    "BLACKBOX::RANGE [(_26, 1)] []",
    "BLACKBOX::RANGE [(_27, 1)] []",
    "BLACKBOX::RANGE [(_28, 1)] []",
    "BLACKBOX::RANGE [(_29, 1)] []",
    "BLACKBOX::RANGE [(_30, 1)] []",
    "BLACKBOX::RANGE [(_31, 1)] []",
    "BLACKBOX::RANGE [(_32, 1)] []",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 1)] []",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 1)] []",
    "BLACKBOX::RANGE [(_38, 1)] []",
    "BLACKBOX::RANGE [(_39, 1)] []",
    "BLACKBOX::RANGE [(_40, 1)] []",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "BLACKBOX::RANGE [(_43, 1)] []",
    "BLACKBOX::RANGE [(_44, 1)] []",
    "BLACKBOX::RANGE [(_45, 1)] []",
    "BLACKBOX::RANGE [(_46, 1)] []",
    "BLACKBOX::RANGE [(_47, 1)] []",
    "BLACKBOX::RANGE [(_48, 1)] []",
    "BLACKBOX::RANGE [(_49, 1)] []",
    "BLACKBOX::RANGE [(_50, 1)] []",
    "BLACKBOX::RANGE [(_51, 1)] []",
    "BLACKBOX::RANGE [(_52, 1)] []",
    "BLACKBOX::RANGE [(_53, 1)] []",
    "EXPR [ (1, _1) (-1, _22) (-2, _23) (-4, _24) (-8, _25) (-16, _26) (-32, _27) (-64, _28) (-128, _29) (-256, _30) (-512, _31) (-1024, _32) (-2048, _33) (-4096, _34) (-8192, _35) (-16384, _36) (-32768, _37) (-65536, _38) (-131072, _39) (-262144, _40) (-524288, _41) (-1048576, _42) (-2097152, _43) (-4194304, _44) (-8388608, _45) (-16777216, _46) (-33554432, _47) (-67108864, _48) (-134217728, _49) (-268435456, _50) (-536870912, _51) (-1073741824, _52) (-2147483648, _53) 0 ]",
    "EXPR [ (1, _0, _53) (-1, _53) (-1, _54) 1 ]",
    "EXPR [ (1, _54, _54) (-1, _55) 0 ]",
    "EXPR [ (1, _0, _55) (-1, _56) 0 ]",
    "EXPR [ (-1, _52, _55) (1, _52, _56) (1, _55) (-1, _57) 0 ]",
    "EXPR [ (1, _57, _57) (-1, _58) 0 ]",
    "EXPR [ (1, _0, _58) (-1, _59) 0 ]",
    "EXPR [ (-1, _51, _58) (1, _51, _59) (1, _58) (-1, _60) 0 ]",
    "EXPR [ (1, _60, _60) (-1, _61) 0 ]",
    "EXPR [ (1, _0, _61) (-1, _62) 0 ]",
    "EXPR [ (-1, _50, _61) (1, _50, _62) (1, _61) (-1, _63) 0 ]",
    "EXPR [ (1, _63, _63) (-1, _64) 0 ]",
    "EXPR [ (1, _0, _64) (-1, _65) 0 ]",
    "EXPR [ (-1, _49, _64) (1, _49, _65) (1, _64) (-1, _66) 0 ]",
    "EXPR [ (1, _66, _66) (-1, _67) 0 ]",
    "EXPR [ (1, _0, _67) (-1, _68) 0 ]",
    "EXPR [ (-1, _48, _67) (1, _48, _68) (1, _67) (-1, _69) 0 ]",
    "EXPR [ (1, _69, _69) (-1, _70) 0 ]",
    "EXPR [ (1, _0, _70) (-1, _71) 0 ]",
    "EXPR [ (-1, _47, _70) (1, _47, _71) (1, _70) (-1, _72) 0 ]",
    "EXPR [ (1, _72, _72) (-1, _73) 0 ]",
    "EXPR [ (1, _0, _73) (-1, _74) 0 ]",
    "EXPR [ (-1, _46, _73) (1, _46, _74) (1, _73) (-1, _75) 0 ]",
    "EXPR [ (1, _75, _75) (-1, _76) 0 ]",
    "EXPR [ (1, _0, _76) (-1, _77) 0 ]",
    "EXPR [ (-1, _45, _76) (1, _45, _77) (1, _76) (-1, _78) 0 ]",
    "EXPR [ (1, _78, _78) (-1, _79) 0 ]",
    "EXPR [ (1, _0, _79) (-1, _80) 0 ]",
    "EXPR [ (-1, _44, _79) (1, _44, _80) (1, _79) (-1, _81) 0 ]",
    "EXPR [ (1, _81, _81) (-1, _82) 0 ]",
    "EXPR [ (1, _0, _82) (-1, _83) 0 ]",
    "EXPR [ (-1, _43, _82) (1, _43, _83) (1, _82) (-1, _84) 0 ]",
    "EXPR [ (1, _84, _84) (-1, _85) 0 ]",
    "EXPR [ (1, _0, _85) (-1, _86) 0 ]",
    "EXPR [ (-1, _42, _85) (1, _42, _86) (1, _85) (-1, _87) 0 ]",
    "EXPR [ (1, _87, _87) (-1, _88) 0 ]",
    "EXPR [ (1, _0, _88) (-1, _89) 0 ]",
    "EXPR [ (-1, _41, _88) (1, _41, _89) (1, _88) (-1, _90) 0 ]",
    "EXPR [ (1, _90, _90) (-1, _91) 0 ]",
    "EXPR [ (1, _0, _91) (-1, _92) 0 ]",
    "EXPR [ (-1, _40, _91) (1, _40, _92) (1, _91) (-1, _93) 0 ]",
    "EXPR [ (1, _93, _93) (-1, _94) 0 ]",
    "EXPR [ (1, _0, _94) (-1, _95) 0 ]",
    "EXPR [ (-1, _39, _94) (1, _39, _95) (1, _94) (-1, _96) 0 ]",
    "EXPR [ (1, _96, _96) (-1, _97) 0 ]",
    "EXPR [ (1, _0, _97) (-1, _98) 0 ]",
    "EXPR [ (-1, _38, _97) (1, _38, _98) (1, _97) (-1, _99) 0 ]",
    "EXPR [ (1, _99, _99) (-1, _100) 0 ]",
    "EXPR [ (1, _0, _100) (-1, _101) 0 ]",
    "EXPR [ (-1, _37, _100) (1, _37, _101) (1, _100) (-1, _102) 0 ]",
    "EXPR [ (1, _102, _102) (-1, _103) 0 ]",
    "EXPR [ (1, _0, _103) (-1, _104) 0 ]",
    "EXPR [ (-1, _36, _103) (1, _36, _104) (1, _103) (-1, _105) 0 ]",
    "EXPR [ (1, _105, _105) (-1, _106) 0 ]",
    "EXPR [ (1, _0, _106) (-1, _107) 0 ]",
    "EXPR [ (-1, _35, _106) (1, _35, _107) (1, _106) (-1, _108) 0 ]",
    "EXPR [ (1, _108, _108) (-1, _109) 0 ]",
    "EXPR [ (1, _0, _109) (-1, _110) 0 ]",
    "EXPR [ (-1, _34, _109) (1, _34, _110) (1, _109) (-1, _111) 0 ]",
    "EXPR [ (1, _111, _111) (-1, _112) 0 ]",
    "EXPR [ (1, _0, _112) (-1, _113) 0 ]",
    "EXPR [ (-1, _33, _112) (1, _33, _113) (1, _112) (-1, _114) 0 ]",
    "EXPR [ (1, _114, _114) (-1, _115) 0 ]",
    "EXPR [ (1, _0, _115) (-1, _116) 0 ]",
    "EXPR [ (-1, _32, _115) (1, _32, _116) (1, _115) (-1, _117) 0 ]",
    "EXPR [ (1, _117, _117) (-1, _118) 0 ]",
    "EXPR [ (1, _0, _118) (-1, _119) 0 ]",
    "EXPR [ (-1, _31, _118) (1, _31, _119) (1, _118) (-1, _120) 0 ]",
    "EXPR [ (1, _120, _120) (-1, _121) 0 ]",
    "EXPR [ (1, _0, _121) (-1, _122) 0 ]",
    "EXPR [ (-1, _30, _121) (1, _30, _122) (1, _121) (-1, _123) 0 ]",
    "EXPR [ (1, _123, _123) (-1, _124) 0 ]",
    "EXPR [ (1, _0, _124) (-1, _125) 0 ]",
    "EXPR [ (-1, _29, _124) (1, _29, _125) (1, _124) (-1, _126) 0 ]",
    "EXPR [ (1, _126, _126) (-1, _127) 0 ]",
    "EXPR [ (1, _0, _127) (-1, _128) 0 ]",
    "EXPR [ (-1, _28, _127) (1, _28, _128) (1, _127) (-1, _129) 0 ]",
    "EXPR [ (1, _129, _129) (-1, _130) 0 ]",
    "EXPR [ (1, _0, _130) (-1, _131) 0 ]",
    "EXPR [ (-1, _27, _130) (1, _27, _131) (1, _130) (-1, _132) 0 ]",
    "EXPR [ (1, _132, _132) (-1, _133) 0 ]",
    "EXPR [ (1, _0, _133) (-1, _134) 0 ]",
    "EXPR [ (-1, _26, _133) (1, _26, _134) (1, _133) (-1, _135) 0 ]",
    "EXPR [ (1, _135, _135) (-1, _136) 0 ]",
    "EXPR [ (1, _0, _136) (-1, _137) 0 ]",
    "EXPR [ (-1, _25, _136) (1, _25, _137) (1, _136) (-1, _138) 0 ]",
    "EXPR [ (1, _138, _138) (-1, _139) 0 ]",
    "EXPR [ (1, _0, _139) (-1, _140) 0 ]",
    "EXPR [ (-1, _24, _139) (1, _24, _140) (1, _139) (-1, _141) 0 ]",
    "EXPR [ (1, _141, _141) (-1, _142) 0 ]",
    "EXPR [ (1, _0, _142) (-1, _143) 0 ]",
    "EXPR [ (-1, _23, _142) (1, _23, _143) (1, _142) (-1, _144) 0 ]",
    "EXPR [ (1, _144, _144) (-1, _145) 0 ]",
    "EXPR [ (1, _0, _145) (-1, _146) 0 ]",
    "EXPR [ (-1, _22, _145) (1, _22, _146) (1, _145) -714924299 ]",
    "EXPR [ (1, _1) (-1, _147) 54 ]",
    "BLACKBOX::RANGE [(_147, 32)] []",
    "EXPR [ (1, _0) (-1, _147) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix"
  ]
}
