---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/7VUu27DMAykYzutGhQo2rVLu7RDB+UFZyyQx38ICfwd/vRACJnQZzlLKAKGJJA6Hk+kC7pYwV+0itcJDU1i/nn1j9ncEMvn5Flk4nklqvcFjQv/x6uj/iNFf2lYsEtwssLf+FXjEvUZ8l86hZkBfyH4VR58/8Q4+66PT5D3lfrDq++ITw/ygX3P7Jf9G+8d4OV4d83JWrePBP+Jqi3atrvpYZT3Oi87e+zFjN/oG94oU++tpW9qGpr4pir3vf9WCWfNO9b0q3AxDnPq/p+OYNYQG23X9X0S+8mr6FkrPMuefFe4RENtke9Y/6IvVesWapXYL6g11/ylapVcM7rNYNXZ52823kveUumAPajz1xD/w+eXRB3VAzzbJszbZWjDOpxOq2NAnQh00vOOOspZ39X/NPThXYmNec7zrauiAQoAAA==",
  "debug_symbols": "pZPNjoMgFIXf5a5ZiPxYfZWmaVCxISFoqE4yMb77XESmziR2YTd8Xi/ncMLPDK2up8fduK5/QnWdofbGWvO4275Ro+kd/p0hCwMtoKIE6CWiXJFnETQij2ARHKocISJkRBGBLhyBLoIAyyJoRL6CYyURWF2WhUBKdB+91iHQLiIGH5TXboTKTdYS+FJ2Wic9B+VWjspjNyOgXYtEw85YHb4W8lJnx1LK8k1MJf+VC3pGX57QC1ZueiGLIz17s75gMgUQnH6WoMjP7AAXNCXgQp5y4OLlcLgLxbtTkDw5sH/ncMNKNcb/ufxL8PJG1VZvZTe5Ztcdv4fUSY9n8H2j28nr4LR7QTheGSesvC1htR8=",
  "file_map": {
    "51": {
      "source": "mod consts;\nuse consts::EXPONENTIATE;\n\nfn main(x: Field, y: pub Field) {\n    // Safety: testing context\n    unsafe {\n        assert(entry_point_only_const_global(x) == 2);\n        check_acc_entry_point(x, y);\n        assert(entry_point_only_const_global(x) == 2);\n        entry_point_inner_func_globals(x as Field, y);\n        // NOTE: We want a lot of these calls to display clearly\n        // that execution time has not been tainted by accidentally initializing globals\n        // for entry points which do not use them.\n        assert(entry_point_no_globals(x, y) == 1);\n        assert(entry_point_no_globals(x, y) == 1);\n        assert(entry_point_only_const_global(x) == 2);\n        assert(entry_point_only_const_global(x) == 2);\n        assert(entry_point_only_const_global(x) == 2);\n        assert(entry_point_only_const_global(x) == 2);\n        assert(entry_point_only_const_global(x) == 2);\n        assert(entry_point_no_globals(x, y) == 1);\n        assert(entry_point_no_globals(x, y) == 1);\n        assert(entry_point_no_globals(x, y) == 1);\n    }\n}\n\nunconstrained fn check_acc_entry_point(x: Field, y: Field) {\n    let mut acc: Field = 0;\n    for i in 0..2 {\n        for j in 0..2 {\n            acc += EXPONENTIATE[i][j];\n        }\n    }\n    assert(!acc.lt(x));\n    assert(x != y);\n\n    assert(inner(x + 1) == 2);\n}\n\nfn inner(x: Field) -> Field {\n    x + 1\n}\n\nunconstrained fn entry_point_only_const_global(x: Field) -> Field {\n    inner(x + 1)\n}\n\nunconstrained fn entry_point_no_globals(x: Field, y: Field) -> Field {\n    x + y\n}\n\nunconstrained fn entry_point_inner_func_globals(x: Field, y: Field) {\n    one_more_wrapper(x, y);\n}\n\nunconstrained fn one_more_wrapper(x: Field, y: Field) {\n    check_acc_entry_point(x, y);\n    check_acc_entry_point(x, y);\n    check_acc_entry_point(x, y);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
