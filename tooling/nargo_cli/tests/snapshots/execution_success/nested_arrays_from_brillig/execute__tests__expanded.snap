---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
struct Header {
    params: [Field; 3],
}

struct MyNote {
    plain: Field,
    array: [Field; 2],
    header: Header,
}

fn access_nested(notes: [MyNote; 2]) -> Field {
    ((notes[0_u32].array[1_u32] + notes[1_u32].array[0_u32]) + notes[0_u32].plain)
        + notes[1_u32].header.params[0_u32]
}

unconstrained fn create_inside_brillig(values: [Field; 6]) -> [MyNote; 2] {
    let header: Header = Header { params: [values[0_u32], values[1_u32], values[2_u32]] };
    let note0: MyNote =
        MyNote { array: [values[0_u32], values[1_u32]], plain: values[2_u32], header: header };
    let note1: MyNote =
        MyNote { array: [values[3_u32], values[4_u32]], plain: values[5_u32], header: header };
    [note0, note1]
}

fn main(values: [Field; 6]) {
    // Safety: comment added by `nargo expand`
    let notes: [MyNote; 2] = unsafe { create_inside_brillig(values) };
    assert(access_nested(notes) == (((2_Field + 4_Field) + 3_Field) + 1_Field));
}
