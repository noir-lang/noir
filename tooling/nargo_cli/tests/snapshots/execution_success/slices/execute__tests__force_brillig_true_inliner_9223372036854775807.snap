---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "use std::slice;\n\nfn main(x: Field, y: pub Field) {\n    let mut slice = &[0; 2];\n    assert(slice[0] == 0);\n    assert(slice[0] != 1);\n    slice[0] = x;\n    assert(slice[0] == x);\n\n    let slice_plus_10 = slice.push_back(y);\n    assert(slice_plus_10[2] == 10);\n    assert(slice_plus_10[2] != 8);\n    assert(slice_plus_10.len() == 3);\n\n    let mut new_slice = &[];\n    for i in 0..5 {\n        new_slice = new_slice.push_back(i);\n    }\n    assert(new_slice.len() == 5);\n\n    new_slice = new_slice.push_front(20);\n    assert(new_slice[0] == 20);\n    assert(new_slice.len() == 6);\n\n    let (popped_slice, last_elem) = new_slice.pop_back();\n    assert(last_elem == 4);\n    assert(popped_slice.len() == 5);\n\n    let (first_elem, rest_of_slice) = popped_slice.pop_front();\n    assert(first_elem == 20);\n    assert(rest_of_slice.len() == 4);\n\n    new_slice = rest_of_slice.insert(2, 100);\n    assert(new_slice[2] == 100);\n    assert(new_slice[4] == 3);\n    assert(new_slice.len() == 5);\n\n    let (remove_slice, removed_elem) = new_slice.remove(3);\n    assert(removed_elem == 2);\n    assert(remove_slice[3] == 3);\n    assert(remove_slice.len() == 4);\n\n    let append = &[1, 2].append(&[3, 4, 5]);\n    assert(append.len() == 5);\n    assert(append[0] == 1);\n    assert(append[4] == 5);\n\n    let mapped = &[1, 2].map(|x| x + 1);\n    assert_eq(mapped, &[2, 3]);\n\n    assert_eq(&[1, 2, 3].fold(0, |acc, x| acc + x), 6);\n    assert_eq(&[1, 2, 3].reduce(|acc, x| acc + x), 6);\n    assert(&[2, 4, 6].all(|x| x > 0));\n    assert(&[2, 4, 6].any(|x| x > 5));\n\n    regression_2083();\n    // The parameters to this function must come from witness values (inputs to main)\n    regression_merge_slices(x, y);\n    regression_2370();\n\n    regression_4418(x);\n    regression_slice_call_result(x, y);\n    regression_4506();\n}\n\n// Ensure that slices of struct/tuple values work.\nfn regression_2083() {\n    let y = &[(1, 2)];\n    let y = y.push_back((3, 4)); // [(1, 2), (3, 4)]\n    let y = y.push_back((5, 6)); // [(1, 2), (3, 4), (5, 6)]\n    assert(y[2].1 == 6);\n\n    let y = y.push_front((10, 11)); // [(10, 11), (1, 2), (3, 4), (5, 6)]\n    let y = y.push_front((12, 13)); // [(12, 13), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[1].0 == 10);\n\n    let y = y.insert(1, (55, 56)); // [(12, 13), (55, 56), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].1 == 13);\n    assert(y[1].1 == 56);\n    assert(y[2].0 == 10);\n\n    let (y, x) = y.remove(2); // [(12, 13), (55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[2].0 == 1);\n    assert(x.0 == 10);\n    assert(x.1 == 11);\n\n    let (x, y) = y.pop_front(); // [(55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].0 == 55);\n    assert(x.0 == 12);\n    assert(x.1 == 13);\n\n    let (y, x) = y.pop_back(); // [(55, 56), (1, 2), (3, 4)]\n    assert(y.len() == 3);\n    assert(x.0 == 5);\n    assert(x.1 == 6);\n}\n\n// The parameters to this function must come from witness values (inputs to main)\nfn regression_merge_slices(x: Field, y: Field) {\n    merge_slices_if(x, y);\n    merge_slices_else(x);\n}\n\nfn merge_slices_if(x: Field, y: Field) {\n    let slice = merge_slices_return(x, y);\n    assert(slice.len() == 3);\n    assert(slice[2] == 10);\n\n    let slice = merge_slices_mutate(x, y);\n    assert(slice.len() == 4);\n    assert(slice[3] == 5);\n\n    let slice = merge_slices_mutate_in_loop(x, y);\n    assert(slice.len() == 7);\n    assert(slice[6] == 4);\n\n    let slice = merge_slices_mutate_two_ifs(x, y);\n    assert(slice.len() == 6);\n    assert(slice[3] == 5);\n    assert(slice[4] == 15);\n    assert(slice[5] == 30);\n\n    let slice = merge_slices_mutate_between_ifs(x, y);\n    assert(slice.len() == 8);\n    assert(slice[3] == 5);\n    assert(slice[4] == 30);\n    assert(slice[5] == 15);\n    assert(slice[6] == 50);\n    assert(slice[7] == 60);\n\n    merge_slices_push_then_pop(x, y);\n\n    let slice = merge_slices_push_then_insert(x, y);\n    assert(slice.len() == 7);\n    assert(slice[1] == 50);\n    assert(slice[2] == 0);\n    assert(slice[5] == 30);\n    assert(slice[6] == 100);\n\n    let slice = merge_slices_remove_between_ifs(x, y);\n    assert(slice.len() == 5);\n}\n\nfn merge_slices_else(x: Field) {\n    let slice = merge_slices_return(x, 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice.len() == 2);\n\n    let slice = merge_slices_mutate(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n\n    let slice = merge_slices_mutate_in_loop(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n}\n\n// Test returning a merged slice without a mutation\nfn merge_slices_return(x: Field, y: Field) -> [Field] {\n    let slice = &[0; 2];\n    if x != y {\n        if x != 20 {\n            slice.push_back(y)\n        } else {\n            slice\n        }\n    } else {\n        slice\n    }\n}\n\n// Test mutating a slice inside of an if statement\nfn merge_slices_mutate(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\n// Test mutating a slice inside of a loop in an if statement\nfn merge_slices_mutate_in_loop(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        for i in 0..5 {\n            slice = slice.push_back(i as Field);\n        }\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\nfn merge_slices_mutate_two_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n    slice = slice.push_back(30);\n\n    slice\n}\n\nfn merge_slices_mutate_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n\n    slice\n}\n\nfn merge_slices_push_then_pop(x: Field, y: Field) {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 4);\n    assert(elem == 30);\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 3);\n    assert(elem == x);\n}\n\nfn merge_slices_push_then_insert(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n        slice = slice.push_back(15);\n    }\n\n    slice = slice.insert(1, 50);\n    // Test that we can use slice insert the same as slice push back\n    slice = slice.insert(6, 100);\n\n    slice\n}\n\nfn merge_slices_remove_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    let (mut slice, elem) = slice.remove(2);\n    assert(elem == y);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice\n}\n// Previously, we'd get a type error when trying to assign an array of a different size to\n// an existing array variable. Now, we infer the variable must be a slice.\nfn regression_2370() {\n    let mut slice = &[];\n    slice = &[1, 2, 3];\n}\n\nfn regression_4418(x: Field) {\n    let mut crash: [u8; 32] = x.to_be_bytes();\n\n    if x != 0 {\n        crash[0] = 10;\n    }\n}\n\nfn regression_slice_call_result(x: Field, y: Field) {\n    let mut slice = merge_slices_return(x, y);\n    if x != 0 {\n        slice = slice.push_back(5);\n        slice = slice.push_back(10);\n    } else {\n        slice = slice.push_back(5);\n    }\n    assert(slice.len() == 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice[2] == 10);\n    assert(slice[3] == 5);\n    assert(slice[4] == 10);\n}\n\nfn regression_4506() {\n    let slice: [Field] = &[1, 2, 3];\n    assert(slice == slice);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
