---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 540",
    "private parameters indices : [0]",
    "public parameters indices : [1]",
    "return value indices : []",
    "EXPR [ (1, _1) -10 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -10 })], outputs: [Simple(Witness(2))]",
    "EXPR [ (1, _0, _2) (-10, _2) (1, _3) -1 ]",
    "EXPR [ (1, _0, _3) (-10, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -20 })], outputs: [Simple(Witness(4))]",
    "EXPR [ (1, _0, _4) (-20, _4) (1, _5) -1 ]",
    "EXPR [ (1, _0, _5) (-20, _5) 0 ]",
    "EXPR [ (-1, _3) (-1, _6) 1 ]",
    "EXPR [ (1, _3, _5) (-3, _3) (-1, _5) (-1, _7) 3 ]",
    "EXPR [ (10, _3, _5) (-10, _3) (-10, _5) (-1, _8) 10 ]",
    "EXPR [ (1, _6, _7) (2, _3) -3 ]",
    "EXPR [ (1, _6, _8) -10 ]",
    "EXPR [ (2, _3, _6) (-1, _479) 0 ]",
    "EXPR [ (4, _6, _6) (-1, _480) 0 ]",
    "EXPR [ (3, _3) (1, _479) (1, _480) -4 ]",
    "EXPR [ (1, _0, _6) -5 ]",
    "EXPR [ (3, _3) (1, _479) (5472060717959818805561601436314318772137091100104008585924551046643952123906, _480) -7 ]",
    "EXPR [ (4, _6) -4 ]",
    "EXPR [ (5, _5) (-1, _9) 0 ]",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "EXPR [ (1, _0, _3) (10, _6) (-1, _10) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: -1 })], outputs: [Simple(Witness(11))]",
    "EXPR [ (1, _5, _11) (-1, _11) (1, _12) -1 ]",
    "EXPR [ (1, _5, _12) (-1, _12) 0 ]",
    "EXPR [ (1, _5) (-1, _13) 5 ]",
    "EXPR [ (-1, _14) 0 ]",
    "EXPR [ (-1, _15) 5 ]",
    "EXPR [ (20, _5) (-1, _16) 0 ]",
    "EXPR [ (-1, _17) 15 ]",
    "INIT (id: 0, len: 6, witnesses: [_14, _14, _10, _15, _16, _17])",
    "EXPR [ (1, _5) (-1, _18) 4 ]",
    "MEM (id: 0, write EXPR [ (1, _17) 0 ] at: EXPR [ (1, _18) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _19) 0 ]) ",
    "EXPR [ (-1, _20) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _20) 0 ], value: EXPR [ (1, _21) 0 ]) ",
    "EXPR [ (-1, _22) 2 ]",
    "MEM (id: 0, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _23) 0 ]) ",
    "EXPR [ (-1, _24) 3 ]",
    "MEM (id: 0, read at: EXPR [ (1, _24) 0 ], value: EXPR [ (1, _25) 0 ]) ",
    "EXPR [ (-1, _26) 4 ]",
    "MEM (id: 0, read at: EXPR [ (1, _26) 0 ], value: EXPR [ (1, _27) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _15) 0 ], value: EXPR [ (1, _28) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: -6 })], outputs: [Simple(Witness(29))]",
    "EXPR [ (1, _13, _29) (-6, _29) (1, _30) -1 ]",
    "EXPR [ (1, _13, _30) (-6, _30) 0 ]",
    "EXPR [ (-1, _12, _19) (1, _19) (-1, _32) 0 ]",
    "EXPR [ (-1, _12, _21) (1, _21) (-1, _33) 0 ]",
    "EXPR [ (1, _10, _12) (-1, _12, _23) (1, _23) (-1, _34) 0 ]",
    "EXPR [ (-1, _12, _25) (5, _12) (1, _25) (-1, _35) 0 ]",
    "EXPR [ (1, _12, _16) (-1, _12, _27) (1, _27) (-1, _36) 0 ]",
    "EXPR [ (-1, _12, _28) (15, _12) (1, _28) (-1, _37) 0 ]",
    "EXPR [ (-1, _38) 30 ]",
    "INIT (id: 1, len: 7, witnesses: [_32, _33, _34, _35, _36, _37, _38])",
    "MEM (id: 1, write EXPR [ (1, _38) 0 ] at: EXPR [ (1, _13) 0 ]) ",
    "MEM (id: 1, read at: EXPR [ (1, _24) 0 ], value: EXPR [ (1, _39) 0 ]) ",
    "MEM (id: 1, read at: EXPR [ (1, _26) 0 ], value: EXPR [ (1, _40) 0 ]) ",
    "MEM (id: 1, read at: EXPR [ (1, _15) 0 ], value: EXPR [ (1, _41) 0 ]) ",
    "EXPR [ (1, _13) -5 ]",
    "EXPR [ (1, _30, _35) (-1, _30, _39) (1, _39) -5 ]",
    "EXPR [ (1, _30, _36) (-1, _30, _40) (1, _40) -15 ]",
    "EXPR [ (1, _30, _37) (-1, _30, _41) (1, _41) -30 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: -1 })], outputs: [Simple(Witness(42))]",
    "EXPR [ (1, _5, _42) (-1, _42) (1, _43) -1 ]",
    "EXPR [ (1, _5, _43) (-1, _43) 0 ]",
    "EXPR [ (1, _5) (-1, _44) 6 ]",
    "BLACKBOX::RANGE [(_44, 32)] []",
    "INIT (id: 2, len: 7, witnesses: [_14, _14, _10, _15, _38, _16, _17])",
    "EXPR [ (1, _5) (-1, _45) 5 ]",
    "MEM (id: 2, write EXPR [ (1, _17) 0 ] at: EXPR [ (1, _45) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _46) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _20) 0 ], value: EXPR [ (1, _47) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _48) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _24) 0 ], value: EXPR [ (1, _49) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _26) 0 ], value: EXPR [ (1, _50) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _15) 0 ], value: EXPR [ (1, _51) 0 ]) ",
    "EXPR [ (-1, _52) 6 ]",
    "MEM (id: 2, read at: EXPR [ (1, _52) 0 ], value: EXPR [ (1, _53) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(44))], q_c: -7 })], outputs: [Simple(Witness(54))]",
    "EXPR [ (1, _44, _54) (-7, _54) (1, _55) -1 ]",
    "EXPR [ (1, _44, _55) (-7, _55) 0 ]",
    "EXPR [ (-1, _5, _44) (-1, _5) (1, _44) (-1, _56) 1 ]",
    "BLACKBOX::RANGE [(_56, 32)] []",
    "EXPR [ (-1, _43, _46) (1, _46) (-1, _57) 0 ]",
    "EXPR [ (-1, _43, _47) (1, _47) (-1, _58) 0 ]",
    "EXPR [ (1, _10, _43) (-1, _43, _48) (1, _48) (-1, _59) 0 ]",
    "EXPR [ (-1, _43, _49) (5, _43) (1, _49) (-1, _60) 0 ]",
    "EXPR [ (-1, _43, _50) (30, _43) (1, _50) (-1, _61) 0 ]",
    "EXPR [ (1, _16, _43) (-1, _43, _51) (1, _51) (-1, _62) 0 ]",
    "EXPR [ (-1, _43, _53) (15, _43) (1, _53) (-1, _63) 0 ]",
    "EXPR [ (-1, _64) 50 ]",
    "INIT (id: 3, len: 8, witnesses: [_57, _58, _59, _60, _61, _62, _63, _64])",
    "EXPR [ (-1, _5, _44) (1, _44) (-1, _65) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _65) 0 ], value: EXPR [ (1, _66) 0 ]) ",
    "EXPR [ (1, _5, _66) (-50, _5) (-1, _67) 50 ]",
    "MEM (id: 3, write EXPR [ (1, _67) 0 ] at: EXPR [ (1, _65) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _68) 0 ]) ",
    "EXPR [ (-1, _5) (-1, _69) 1 ]",
    "MEM (id: 3, read at: EXPR [ (1, _69) 0 ], value: EXPR [ (1, _70) 0 ]) ",
    "EXPR [ (-2, _5) (-1, _71) 2 ]",
    "MEM (id: 3, read at: EXPR [ (1, _71) 0 ], value: EXPR [ (1, _72) 0 ]) ",
    "EXPR [ (-3, _5) (-1, _73) 3 ]",
    "MEM (id: 3, read at: EXPR [ (1, _73) 0 ], value: EXPR [ (1, _74) 0 ]) ",
    "EXPR [ (-4, _5) (-1, _75) 4 ]",
    "MEM (id: 3, read at: EXPR [ (1, _75) 0 ], value: EXPR [ (1, _76) 0 ]) ",
    "EXPR [ (-5, _5) (-1, _77) 5 ]",
    "MEM (id: 3, read at: EXPR [ (1, _77) 0 ], value: EXPR [ (1, _78) 0 ]) ",
    "EXPR [ (-6, _5) (-1, _79) 6 ]",
    "MEM (id: 3, read at: EXPR [ (1, _79) 0 ], value: EXPR [ (1, _80) 0 ]) ",
    "EXPR [ (-7, _5) (-1, _81) 7 ]",
    "MEM (id: 3, read at: EXPR [ (1, _81) 0 ], value: EXPR [ (1, _82) 0 ]) ",
    "EXPR [ (-1, _5) (-1, _83) 1 ]",
    "EXPR [ (1, _55, _57) (-1, _55, _68) (1, _68) (-1, _84) 0 ]",
    "EXPR [ (1, _55, _58) (-1, _55, _70) (1, _70) (-1, _85) 0 ]",
    "EXPR [ (1, _55, _59) (-1, _55, _72) (1, _72) (-1, _86) 0 ]",
    "EXPR [ (1, _55, _60) (-1, _55, _74) (1, _74) (-1, _87) 0 ]",
    "EXPR [ (1, _55, _61) (-1, _55, _76) (1, _76) (-1, _88) 0 ]",
    "EXPR [ (1, _55, _62) (-1, _55, _78) (1, _78) (-1, _89) 0 ]",
    "EXPR [ (1, _55, _63) (-1, _55, _80) (1, _80) (-1, _90) 0 ]",
    "EXPR [ (-1, _55, _82) (50, _55) (1, _82) (-1, _91) 0 ]",
    "EXPR [ (-1, _5) (1, _44) (-1, _92) -7 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(92))], q_c: 0 })], outputs: [Simple(Witness(93))]",
    "EXPR [ (1, _92, _93) (1, _94) -1 ]",
    "EXPR [ (1, _92, _94) 0 ]",
    "EXPR [ (1, _5, _57) (1, _83, _84) (-1, _96) 0 ]",
    "EXPR [ (1, _5, _58) (1, _83, _85) (-1, _97) 0 ]",
    "EXPR [ (1, _5, _59) (1, _83, _86) (-1, _98) 0 ]",
    "EXPR [ (1, _5, _60) (1, _83, _87) (-1, _99) 0 ]",
    "EXPR [ (1, _5, _61) (1, _83, _88) (-1, _100) 0 ]",
    "EXPR [ (1, _5, _62) (1, _83, _89) (-1, _101) 0 ]",
    "EXPR [ (1, _5, _63) (1, _83, _90) (-1, _102) 0 ]",
    "EXPR [ (1, _83, _91) (-1, _103) 0 ]",
    "EXPR [ (-1, _104) 60 ]",
    "INIT (id: 4, len: 9, witnesses: [_96, _97, _98, _99, _100, _101, _102, _103, _104])",
    "EXPR [ (-1, _5) (1, _44) (-1, _105) 1 ]",
    "MEM (id: 4, write EXPR [ (1, _104) 0 ] at: EXPR [ (1, _105) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _24) 0 ], value: EXPR [ (1, _106) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _26) 0 ], value: EXPR [ (1, _107) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _15) 0 ], value: EXPR [ (1, _108) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _52) 0 ], value: EXPR [ (1, _109) 0 ]) ",
    "EXPR [ (-1, _110) 7 ]",
    "MEM (id: 4, read at: EXPR [ (1, _110) 0 ], value: EXPR [ (1, _111) 0 ]) ",
    "EXPR [ (-1, _5) (1, _44) -6 ]",
    "EXPR [ (1, _94, _99) (-1, _94, _106) (1, _106) -5 ]",
    "EXPR [ (1, _94, _100) (-1, _94, _107) (1, _107) -30 ]",
    "EXPR [ (1, _94, _101) (-1, _94, _108) (1, _108) -15 ]",
    "EXPR [ (1, _94, _102) (-1, _94, _109) (1, _109) -50 ]",
    "EXPR [ (1, _94, _103) (-1, _94, _111) (1, _111) -60 ]",
    "INIT (id: 5, len: 6, witnesses: [_14, _14, _10, _15, _38, _16])",
    "EXPR [ (1, _45) (-1, _112) -1 ]",
    "MEM (id: 5, read at: EXPR [ (1, _112) 0 ], value: EXPR [ (1, _113) 0 ]) ",
    "INIT (id: 6, len: 6, witnesses: [_14, _14, _10, _15, _38, _16])",
    "EXPR [ (1, _112) -4 ]",
    "EXPR [ (1, _113) -30 ]",
    "MEM (id: 6, read at: EXPR [ (1, _24) 0 ], value: EXPR [ (1, _114) 0 ]) ",
    "EXPR [ (-1, _0) (1, _114) 0 ]",
    "EXPR [ (2, _5) (-1, _115) 6 ]",
    "BLACKBOX::RANGE [(_115, 32)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(115))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(116)), Simple(Witness(117))]",
    "BLACKBOX::RANGE [(_117, 32)] []",
    "EXPR [ (-1, _115) (-4294967296, _116) (-1, _117) 4294967297 ]",
    "EXPR [ (-1, _116) 0 ]",
    "EXPR [ (1, _115) (-1, _118) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(118))], q_c: 4294967302 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(119)), Simple(Witness(120))]",
    "BLACKBOX::RANGE [(_120, 32)] []",
    "EXPR [ (-1, _118) (-4294967296, _119) (-1, _120) 4294967302 ]",
    "EXPR [ (-1, _119) 0 ]",
    "EXPR [ (1, _118) -7 ]",
    "EXPR [ (1, _10) -10 ]",
    "EXPR [ (4, _5) (3, _83) (-1, _121) 1 ]",
    "BLACKBOX::RANGE [(_121, 32)] []",
    "EXPR [ (1, _83, _121) (1, _83) (-1, _122) 0 ]",
    "BLACKBOX::RANGE [(_122, 32)] []",
    "EXPR [ (1, _5, _121) (1, _83, _121) (1, _83) -5 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -5 })], outputs: [Simple(Witness(123))]",
    "EXPR [ (1, _0, _123) (-5, _123) (1, _124) -1 ]",
    "EXPR [ (1, _0, _124) (-5, _124) 0 ]",
    "EXPR [ (-1, _124) (-1, _125) 1 ]",
    "EXPR [ (-2, _5, _124) (-3, _83, _124) (2, _5) (3, _83) (-1, _126) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-1, Witness(125), Witness(126))], linear_combinations: [(-2, Witness(124))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(127)), Simple(Witness(128))]",
    "BLACKBOX::RANGE [(_128, 32)] []",
    "EXPR [ (-1, _125, _126) (-1, _538) 0 ]",
    "EXPR [ (-2, _124) (-4294967296, _127) (-1, _128) (1, _538) 4294967296 ]",
    "EXPR [ (-1, _127) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-1, Witness(125), Witness(126))], linear_combinations: [(-2, Witness(124))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(129)), Simple(Witness(130))]",
    "BLACKBOX::RANGE [(_130, 32)] []",
    "EXPR [ (-2, _124) (-4294967296, _129) (-1, _130) (1, _538) 4294967297 ]",
    "EXPR [ (-1, _129) 0 ]",
    "EXPR [ (1, _125, _126) (2, _124) -2 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(124), Witness(125)), (-4, Witness(125), Witness(125))], linear_combinations: [(-3, Witness(124))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(131)), Simple(Witness(132))]",
    "BLACKBOX::RANGE [(_132, 32)] []",
    "EXPR [ (-2, _124, _125) (-1, _539) 0 ]",
    "EXPR [ (-4, _125, _125) (-1, _540) 0 ]",
    "EXPR [ (-3, _124) (-4294967296, _131) (-1, _132) (1, _539) (1, _540) 4294967298 ]",
    "EXPR [ (-1, _131) 0 ]",
    "EXPR [ (1, _0, _124) (5, _125) -5 ]",
    "EXPR [ (3, _124) (-1, _539) (-1, _540) -3 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(124), Witness(125)), (-7, Witness(125), Witness(125))], linear_combinations: [(-3, Witness(124))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(133)), Simple(Witness(134))]",
    "BLACKBOX::RANGE [(_134, 32)] []",
    "EXPR [ (-3, _124) (-4294967296, _133) (-1, _134) (1, _539) (5472060717959818805561601436314318772137091100104008585924551046643952123906, _540) 4294967298 ]",
    "EXPR [ (-1, _133) 0 ]",
    "EXPR [ (1, _0, _124) -5 ]",
    "EXPR [ (3, _124) (-1, _539) (-5472060717959818805561601436314318772137091100104008585924551046643952123906, _540) -3 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Array([Witness(135), Witness(136), Witness(137), Witness(138), Witness(139), Witness(140), Witness(141), Witness(142), Witness(143), Witness(144), Witness(145), Witness(146), Witness(147), Witness(148), Witness(149), Witness(150), Witness(151), Witness(152), Witness(153), Witness(154), Witness(155), Witness(156), Witness(157), Witness(158), Witness(159), Witness(160), Witness(161), Witness(162), Witness(163), Witness(164), Witness(165), Witness(166)])]",
    "BLACKBOX::RANGE [(_135, 8)] []",
    "BLACKBOX::RANGE [(_136, 8)] []",
    "BLACKBOX::RANGE [(_137, 8)] []",
    "BLACKBOX::RANGE [(_138, 8)] []",
    "BLACKBOX::RANGE [(_139, 8)] []",
    "BLACKBOX::RANGE [(_140, 8)] []",
    "BLACKBOX::RANGE [(_141, 8)] []",
    "BLACKBOX::RANGE [(_142, 8)] []",
    "BLACKBOX::RANGE [(_143, 8)] []",
    "BLACKBOX::RANGE [(_144, 8)] []",
    "BLACKBOX::RANGE [(_145, 8)] []",
    "BLACKBOX::RANGE [(_146, 8)] []",
    "BLACKBOX::RANGE [(_147, 8)] []",
    "BLACKBOX::RANGE [(_148, 8)] []",
    "BLACKBOX::RANGE [(_149, 8)] []",
    "BLACKBOX::RANGE [(_150, 8)] []",
    "BLACKBOX::RANGE [(_151, 8)] []",
    "BLACKBOX::RANGE [(_152, 8)] []",
    "BLACKBOX::RANGE [(_153, 8)] []",
    "BLACKBOX::RANGE [(_154, 8)] []",
    "BLACKBOX::RANGE [(_155, 8)] []",
    "BLACKBOX::RANGE [(_156, 8)] []",
    "BLACKBOX::RANGE [(_157, 8)] []",
    "BLACKBOX::RANGE [(_158, 8)] []",
    "BLACKBOX::RANGE [(_159, 8)] []",
    "BLACKBOX::RANGE [(_160, 8)] []",
    "BLACKBOX::RANGE [(_161, 8)] []",
    "BLACKBOX::RANGE [(_162, 8)] []",
    "BLACKBOX::RANGE [(_163, 8)] []",
    "BLACKBOX::RANGE [(_164, 8)] []",
    "BLACKBOX::RANGE [(_165, 8)] []",
    "BLACKBOX::RANGE [(_166, 8)] []",
    "EXPR [ (1, _0) (-1, _135) (-256, _136) (-65536, _137) (-16777216, _138) (-4294967296, _139) (-1099511627776, _140) (-281474976710656, _141) (-72057594037927936, _142) (-18446744073709551616, _143) (-4722366482869645213696, _144) (-1208925819614629174706176, _145) (-309485009821345068724781056, _146) (-79228162514264337593543950336, _147) (-20282409603651670423947251286016, _148) (-5192296858534827628530496329220096, _149) (-1329227995784915872903807060280344576, _150) (-340282366920938463463374607431768211456, _151) (-87112285931760246646623899502532662132736, _152) (-22300745198530623141535718272648361505980416, _153) (-5708990770823839524233143877797980545530986496, _154) (-1461501637330902918203684832716283019655932542976, _155) (-374144419156711147060143317175368453031918731001856, _156) (-95780971304118053647396689196894323976171195136475136, _157) (-24519928653854221733733552434404946937899825954937634816, _158) (-6277101735386680763835789423207666416102355444464034512896, _159) (-1606938044258990275541962092341162602522202993782792835301376, _160) (-411376139330301510538742295639337626245683966408394965837152256, _161) (-105312291668557186697918027683670432318895095400549111254310977536, _162) (-26959946667150639794667015087019630673637144422540572481103610249216, _163) (-6901746346790563787434755862277025452451108972170386555162524223799296, _164) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _165) (-452312848583266388373324160190187140051835877600158453279131187530910662656, _166) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(166))], q_c: -48 })], outputs: [Simple(Witness(167))]",
    "EXPR [ (1, _166, _167) (-48, _167) (1, _168) -1 ]",
    "EXPR [ (1, _166, _168) (-48, _168) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(166))], q_c: 208 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(169)), Simple(Witness(170))]",
    "BLACKBOX::RANGE [(_169, 1)] []",
    "BLACKBOX::RANGE [(_170, 8)] []",
    "EXPR [ (1, _166) (-256, _169) (-1, _170) 208 ]",
    "EXPR [ (1, _168, _169) (-1, _169) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: -100 })], outputs: [Simple(Witness(171))]",
    "EXPR [ (1, _165, _171) (-100, _171) (1, _172) -1 ]",
    "EXPR [ (1, _165, _172) (-100, _172) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 156 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(173)), Simple(Witness(174))]",
    "BLACKBOX::RANGE [(_173, 1)] []",
    "BLACKBOX::RANGE [(_174, 8)] []",
    "EXPR [ (1, _165) (-256, _173) (-1, _174) 156 ]",
    "EXPR [ (-1, _173) (-1, _175) 1 ]",
    "EXPR [ (-1, _168, _172) (1, _168) (-1, _176) 0 ]",
    "EXPR [ (1, _175, _176) (-1, _176) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: -78 })], outputs: [Simple(Witness(177))]",
    "EXPR [ (1, _164, _177) (-78, _177) (1, _178) -1 ]",
    "EXPR [ (1, _164, _178) (-78, _178) 0 ]",
    "EXPR [ (-1, _168, _176) (1, _168) (-1, _179) 0 ]",
    "EXPR [ (-1, _178) (-1, _180) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 178 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(181)), Simple(Witness(182))]",
    "BLACKBOX::RANGE [(_181, 1)] []",
    "BLACKBOX::RANGE [(_182, 8)] []",
    "EXPR [ (1, _164) (-256, _181) (-1, _182) 178 ]",
    "EXPR [ (-1, _181) (-1, _183) 1 ]",
    "EXPR [ (1, _179, _180) (-1, _184) 0 ]",
    "EXPR [ (1, _183, _184) (-1, _184) 0 ]",
    "EXPR [ (-1, _184) (-1, _185) 1 ]",
    "EXPR [ (1, _168, _176) (-1, _168) (-1, _186) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(163))], q_c: -114 })], outputs: [Simple(Witness(187))]",
    "EXPR [ (1, _163, _187) (-114, _187) (1, _188) -1 ]",
    "EXPR [ (1, _163, _188) (-114, _188) 0 ]",
    "EXPR [ (-1, _185, _186) (-1, _184) (-1, _189) 1 ]",
    "EXPR [ (-1, _188) (-1, _190) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(163))], q_c: 142 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(191)), Simple(Witness(192))]",
    "BLACKBOX::RANGE [(_191, 1)] []",
    "BLACKBOX::RANGE [(_192, 8)] []",
    "EXPR [ (1, _163) (-256, _191) (-1, _192) 142 ]",
    "EXPR [ (-1, _191) (-1, _193) 1 ]",
    "EXPR [ (1, _189, _190) (-1, _194) 0 ]",
    "EXPR [ (1, _193, _194) (-1, _194) 0 ]",
    "EXPR [ (-1, _194) (-1, _195) 1 ]",
    "EXPR [ (1, _185, _186) (1, _184) (-1, _196) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(162))], q_c: -225 })], outputs: [Simple(Witness(197))]",
    "EXPR [ (1, _162, _197) (-225, _197) (1, _198) -1 ]",
    "EXPR [ (1, _162, _198) (-225, _198) 0 ]",
    "EXPR [ (-1, _195, _196) (-1, _194) (-1, _199) 1 ]",
    "EXPR [ (-1, _198) (-1, _200) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(162))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(201)), Simple(Witness(202))]",
    "BLACKBOX::RANGE [(_201, 1)] []",
    "BLACKBOX::RANGE [(_202, 8)] []",
    "EXPR [ (1, _162) (-256, _201) (-1, _202) 31 ]",
    "EXPR [ (-1, _201) (-1, _203) 1 ]",
    "EXPR [ (1, _199, _200) (-1, _204) 0 ]",
    "EXPR [ (1, _203, _204) (-1, _204) 0 ]",
    "EXPR [ (-1, _204) (-1, _205) 1 ]",
    "EXPR [ (1, _195, _196) (1, _194) (-1, _206) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(161))], q_c: -49 })], outputs: [Simple(Witness(207))]",
    "EXPR [ (1, _161, _207) (-49, _207) (1, _208) -1 ]",
    "EXPR [ (1, _161, _208) (-49, _208) 0 ]",
    "EXPR [ (-1, _205, _206) (-1, _204) (-1, _209) 1 ]",
    "EXPR [ (-1, _208) (-1, _210) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(161))], q_c: 207 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(211)), Simple(Witness(212))]",
    "BLACKBOX::RANGE [(_211, 1)] []",
    "BLACKBOX::RANGE [(_212, 8)] []",
    "EXPR [ (1, _161) (-256, _211) (-1, _212) 207 ]",
    "EXPR [ (-1, _211) (-1, _213) 1 ]",
    "EXPR [ (1, _209, _210) (-1, _214) 0 ]",
    "EXPR [ (1, _213, _214) (-1, _214) 0 ]",
    "EXPR [ (-1, _214) (-1, _215) 1 ]",
    "EXPR [ (1, _205, _206) (1, _204) (-1, _216) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(160))], q_c: -160 })], outputs: [Simple(Witness(217))]",
    "EXPR [ (1, _160, _217) (-160, _217) (1, _218) -1 ]",
    "EXPR [ (1, _160, _218) (-160, _218) 0 ]",
    "EXPR [ (-1, _215, _216) (-1, _214) (-1, _219) 1 ]",
    "EXPR [ (-1, _218) (-1, _220) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(160))], q_c: 96 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(221)), Simple(Witness(222))]",
    "BLACKBOX::RANGE [(_221, 1)] []",
    "BLACKBOX::RANGE [(_222, 8)] []",
    "EXPR [ (1, _160) (-256, _221) (-1, _222) 96 ]",
    "EXPR [ (-1, _221) (-1, _223) 1 ]",
    "EXPR [ (1, _219, _220) (-1, _224) 0 ]",
    "EXPR [ (1, _223, _224) (-1, _224) 0 ]",
    "EXPR [ (-1, _224) (-1, _225) 1 ]",
    "EXPR [ (1, _215, _216) (1, _214) (-1, _226) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: -41 })], outputs: [Simple(Witness(227))]",
    "EXPR [ (1, _159, _227) (-41, _227) (1, _228) -1 ]",
    "EXPR [ (1, _159, _228) (-41, _228) 0 ]",
    "EXPR [ (-1, _225, _226) (-1, _224) (-1, _229) 1 ]",
    "EXPR [ (-1, _228) (-1, _230) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 215 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(231)), Simple(Witness(232))]",
    "BLACKBOX::RANGE [(_231, 1)] []",
    "BLACKBOX::RANGE [(_232, 8)] []",
    "EXPR [ (1, _159) (-256, _231) (-1, _232) 215 ]",
    "EXPR [ (-1, _231) (-1, _233) 1 ]",
    "EXPR [ (1, _229, _230) (-1, _234) 0 ]",
    "EXPR [ (1, _233, _234) (-1, _234) 0 ]",
    "EXPR [ (-1, _234) (-1, _235) 1 ]",
    "EXPR [ (1, _225, _226) (1, _224) (-1, _236) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: -184 })], outputs: [Simple(Witness(237))]",
    "EXPR [ (1, _158, _237) (-184, _237) (1, _238) -1 ]",
    "EXPR [ (1, _158, _238) (-184, _238) 0 ]",
    "EXPR [ (-1, _235, _236) (-1, _234) (-1, _239) 1 ]",
    "EXPR [ (-1, _238) (-1, _240) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 72 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(241)), Simple(Witness(242))]",
    "BLACKBOX::RANGE [(_241, 1)] []",
    "BLACKBOX::RANGE [(_242, 8)] []",
    "EXPR [ (1, _158) (-256, _241) (-1, _242) 72 ]",
    "EXPR [ (-1, _241) (-1, _243) 1 ]",
    "EXPR [ (1, _239, _240) (-1, _244) 0 ]",
    "EXPR [ (1, _243, _244) (-1, _244) 0 ]",
    "EXPR [ (-1, _244) (-1, _245) 1 ]",
    "EXPR [ (1, _235, _236) (1, _234) (-1, _246) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(157))], q_c: -80 })], outputs: [Simple(Witness(247))]",
    "EXPR [ (1, _157, _247) (-80, _247) (1, _248) -1 ]",
    "EXPR [ (1, _157, _248) (-80, _248) 0 ]",
    "EXPR [ (-1, _245, _246) (-1, _244) (-1, _249) 1 ]",
    "EXPR [ (-1, _248) (-1, _250) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(157))], q_c: 176 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(251)), Simple(Witness(252))]",
    "BLACKBOX::RANGE [(_251, 1)] []",
    "BLACKBOX::RANGE [(_252, 8)] []",
    "EXPR [ (1, _157) (-256, _251) (-1, _252) 176 ]",
    "EXPR [ (-1, _251) (-1, _253) 1 ]",
    "EXPR [ (1, _249, _250) (-1, _254) 0 ]",
    "EXPR [ (1, _253, _254) (-1, _254) 0 ]",
    "EXPR [ (-1, _254) (-1, _255) 1 ]",
    "EXPR [ (1, _245, _246) (1, _244) (-1, _256) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(156))], q_c: -69 })], outputs: [Simple(Witness(257))]",
    "EXPR [ (1, _156, _257) (-69, _257) (1, _258) -1 ]",
    "EXPR [ (1, _156, _258) (-69, _258) 0 ]",
    "EXPR [ (-1, _255, _256) (-1, _254) (-1, _259) 1 ]",
    "EXPR [ (-1, _258) (-1, _260) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(156))], q_c: 187 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(261)), Simple(Witness(262))]",
    "BLACKBOX::RANGE [(_261, 1)] []",
    "BLACKBOX::RANGE [(_262, 8)] []",
    "EXPR [ (1, _156) (-256, _261) (-1, _262) 187 ]",
    "EXPR [ (-1, _261) (-1, _263) 1 ]",
    "EXPR [ (1, _259, _260) (-1, _264) 0 ]",
    "EXPR [ (1, _263, _264) (-1, _264) 0 ]",
    "EXPR [ (-1, _264) (-1, _265) 1 ]",
    "EXPR [ (1, _255, _256) (1, _254) (-1, _266) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(155))], q_c: -182 })], outputs: [Simple(Witness(267))]",
    "EXPR [ (1, _155, _267) (-182, _267) (1, _268) -1 ]",
    "EXPR [ (1, _155, _268) (-182, _268) 0 ]",
    "EXPR [ (-1, _265, _266) (-1, _264) (-1, _269) 1 ]",
    "EXPR [ (-1, _268) (-1, _270) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(155))], q_c: 74 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(271)), Simple(Witness(272))]",
    "BLACKBOX::RANGE [(_271, 1)] []",
    "BLACKBOX::RANGE [(_272, 8)] []",
    "EXPR [ (1, _155) (-256, _271) (-1, _272) 74 ]",
    "EXPR [ (-1, _271) (-1, _273) 1 ]",
    "EXPR [ (1, _269, _270) (-1, _274) 0 ]",
    "EXPR [ (1, _273, _274) (-1, _274) 0 ]",
    "EXPR [ (-1, _274) (-1, _275) 1 ]",
    "EXPR [ (1, _265, _266) (1, _264) (-1, _276) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(154))], q_c: -129 })], outputs: [Simple(Witness(277))]",
    "EXPR [ (1, _154, _277) (-129, _277) (1, _278) -1 ]",
    "EXPR [ (1, _154, _278) (-129, _278) 0 ]",
    "EXPR [ (-1, _275, _276) (-1, _274) (-1, _279) 1 ]",
    "EXPR [ (-1, _278) (-1, _280) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(154))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(281)), Simple(Witness(282))]",
    "BLACKBOX::RANGE [(_281, 1)] []",
    "BLACKBOX::RANGE [(_282, 8)] []",
    "EXPR [ (1, _154) (-256, _281) (-1, _282) 127 ]",
    "EXPR [ (-1, _281) (-1, _283) 1 ]",
    "EXPR [ (1, _279, _280) (-1, _284) 0 ]",
    "EXPR [ (1, _283, _284) (-1, _284) 0 ]",
    "EXPR [ (-1, _284) (-1, _285) 1 ]",
    "EXPR [ (1, _275, _276) (1, _274) (-1, _286) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(153))], q_c: -129 })], outputs: [Simple(Witness(287))]",
    "EXPR [ (1, _153, _287) (-129, _287) (1, _288) -1 ]",
    "EXPR [ (1, _153, _288) (-129, _288) 0 ]",
    "EXPR [ (-1, _285, _286) (-1, _284) (-1, _289) 1 ]",
    "EXPR [ (-1, _288) (-1, _290) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(153))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(291)), Simple(Witness(292))]",
    "BLACKBOX::RANGE [(_291, 1)] []",
    "BLACKBOX::RANGE [(_292, 8)] []",
    "EXPR [ (1, _153) (-256, _291) (-1, _292) 127 ]",
    "EXPR [ (-1, _291) (-1, _293) 1 ]",
    "EXPR [ (1, _289, _290) (-1, _294) 0 ]",
    "EXPR [ (1, _293, _294) (-1, _294) 0 ]",
    "EXPR [ (-1, _294) (-1, _295) 1 ]",
    "EXPR [ (1, _285, _286) (1, _284) (-1, _296) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(152))], q_c: -88 })], outputs: [Simple(Witness(297))]",
    "EXPR [ (1, _152, _297) (-88, _297) (1, _298) -1 ]",
    "EXPR [ (1, _152, _298) (-88, _298) 0 ]",
    "EXPR [ (-1, _295, _296) (-1, _294) (-1, _299) 1 ]",
    "EXPR [ (-1, _298) (-1, _300) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(152))], q_c: 168 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(301)), Simple(Witness(302))]",
    "BLACKBOX::RANGE [(_301, 1)] []",
    "BLACKBOX::RANGE [(_302, 8)] []",
    "EXPR [ (1, _152) (-256, _301) (-1, _302) 168 ]",
    "EXPR [ (-1, _301) (-1, _303) 1 ]",
    "EXPR [ (1, _299, _300) (-1, _304) 0 ]",
    "EXPR [ (1, _303, _304) (-1, _304) 0 ]",
    "EXPR [ (-1, _304) (-1, _305) 1 ]",
    "EXPR [ (1, _295, _296) (1, _294) (-1, _306) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(151))], q_c: -93 })], outputs: [Simple(Witness(307))]",
    "EXPR [ (1, _151, _307) (-93, _307) (1, _308) -1 ]",
    "EXPR [ (1, _151, _308) (-93, _308) 0 ]",
    "EXPR [ (-1, _305, _306) (-1, _304) (-1, _309) 1 ]",
    "EXPR [ (-1, _308) (-1, _310) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(151))], q_c: 163 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(311)), Simple(Witness(312))]",
    "BLACKBOX::RANGE [(_311, 1)] []",
    "BLACKBOX::RANGE [(_312, 8)] []",
    "EXPR [ (1, _151) (-256, _311) (-1, _312) 163 ]",
    "EXPR [ (-1, _311) (-1, _313) 1 ]",
    "EXPR [ (1, _309, _310) (-1, _314) 0 ]",
    "EXPR [ (1, _313, _314) (-1, _314) 0 ]",
    "EXPR [ (-1, _314) (-1, _315) 1 ]",
    "EXPR [ (1, _305, _306) (1, _304) (-1, _316) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(150))], q_c: -40 })], outputs: [Simple(Witness(317))]",
    "EXPR [ (1, _150, _317) (-40, _317) (1, _318) -1 ]",
    "EXPR [ (1, _150, _318) (-40, _318) 0 ]",
    "EXPR [ (-1, _315, _316) (-1, _314) (-1, _319) 1 ]",
    "EXPR [ (-1, _318) (-1, _320) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(150))], q_c: 216 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(321)), Simple(Witness(322))]",
    "BLACKBOX::RANGE [(_321, 1)] []",
    "BLACKBOX::RANGE [(_322, 8)] []",
    "EXPR [ (1, _150) (-256, _321) (-1, _322) 216 ]",
    "EXPR [ (-1, _321) (-1, _323) 1 ]",
    "EXPR [ (1, _319, _320) (-1, _324) 0 ]",
    "EXPR [ (1, _323, _324) (-1, _324) 0 ]",
    "EXPR [ (-1, _324) (-1, _325) 1 ]",
    "EXPR [ (1, _315, _316) (1, _314) (-1, _326) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: -51 })], outputs: [Simple(Witness(327))]",
    "EXPR [ (1, _149, _327) (-51, _327) (1, _328) -1 ]",
    "EXPR [ (1, _149, _328) (-51, _328) 0 ]",
    "EXPR [ (-1, _325, _326) (-1, _324) (-1, _329) 1 ]",
    "EXPR [ (-1, _328) (-1, _330) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: 205 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(331)), Simple(Witness(332))]",
    "BLACKBOX::RANGE [(_331, 1)] []",
    "BLACKBOX::RANGE [(_332, 8)] []",
    "EXPR [ (1, _149) (-256, _331) (-1, _332) 205 ]",
    "EXPR [ (-1, _331) (-1, _333) 1 ]",
    "EXPR [ (1, _329, _330) (-1, _334) 0 ]",
    "EXPR [ (1, _333, _334) (-1, _334) 0 ]",
    "EXPR [ (-1, _334) (-1, _335) 1 ]",
    "EXPR [ (1, _325, _326) (1, _324) (-1, _336) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(148))], q_c: -232 })], outputs: [Simple(Witness(337))]",
    "EXPR [ (1, _148, _337) (-232, _337) (1, _338) -1 ]",
    "EXPR [ (1, _148, _338) (-232, _338) 0 ]",
    "EXPR [ (-1, _335, _336) (-1, _334) (-1, _339) 1 ]",
    "EXPR [ (-1, _338) (-1, _340) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(148))], q_c: 24 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(341)), Simple(Witness(342))]",
    "BLACKBOX::RANGE [(_341, 1)] []",
    "BLACKBOX::RANGE [(_342, 8)] []",
    "EXPR [ (1, _148) (-256, _341) (-1, _342) 24 ]",
    "EXPR [ (-1, _341) (-1, _343) 1 ]",
    "EXPR [ (1, _339, _340) (-1, _344) 0 ]",
    "EXPR [ (1, _343, _344) (-1, _344) 0 ]",
    "EXPR [ (-1, _344) (-1, _345) 1 ]",
    "EXPR [ (1, _335, _336) (1, _334) (-1, _346) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(147))], q_c: -72 })], outputs: [Simple(Witness(347))]",
    "EXPR [ (1, _147, _347) (-72, _347) (1, _348) -1 ]",
    "EXPR [ (1, _147, _348) (-72, _348) 0 ]",
    "EXPR [ (-1, _345, _346) (-1, _344) (-1, _349) 1 ]",
    "EXPR [ (-1, _348) (-1, _350) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(147))], q_c: 184 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(351)), Simple(Witness(352))]",
    "BLACKBOX::RANGE [(_351, 1)] []",
    "BLACKBOX::RANGE [(_352, 8)] []",
    "EXPR [ (1, _147) (-256, _351) (-1, _352) 184 ]",
    "EXPR [ (-1, _351) (-1, _353) 1 ]",
    "EXPR [ (1, _349, _350) (-1, _354) 0 ]",
    "EXPR [ (1, _353, _354) (-1, _354) 0 ]",
    "EXPR [ (-1, _354) (-1, _355) 1 ]",
    "EXPR [ (1, _345, _346) (1, _344) (-1, _356) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: -121 })], outputs: [Simple(Witness(357))]",
    "EXPR [ (1, _146, _357) (-121, _357) (1, _358) -1 ]",
    "EXPR [ (1, _146, _358) (-121, _358) 0 ]",
    "EXPR [ (-1, _355, _356) (-1, _354) (-1, _359) 1 ]",
    "EXPR [ (-1, _358) (-1, _360) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: 135 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(361)), Simple(Witness(362))]",
    "BLACKBOX::RANGE [(_361, 1)] []",
    "BLACKBOX::RANGE [(_362, 8)] []",
    "EXPR [ (1, _146) (-256, _361) (-1, _362) 135 ]",
    "EXPR [ (-1, _361) (-1, _363) 1 ]",
    "EXPR [ (1, _359, _360) (-1, _364) 0 ]",
    "EXPR [ (1, _363, _364) (-1, _364) 0 ]",
    "EXPR [ (-1, _364) (-1, _365) 1 ]",
    "EXPR [ (1, _355, _356) (1, _354) (-1, _366) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(145))], q_c: -185 })], outputs: [Simple(Witness(367))]",
    "EXPR [ (1, _145, _367) (-185, _367) (1, _368) -1 ]",
    "EXPR [ (1, _145, _368) (-185, _368) 0 ]",
    "EXPR [ (-1, _365, _366) (-1, _364) (-1, _369) 1 ]",
    "EXPR [ (-1, _368) (-1, _370) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(145))], q_c: 71 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(371)), Simple(Witness(372))]",
    "BLACKBOX::RANGE [(_371, 1)] []",
    "BLACKBOX::RANGE [(_372, 8)] []",
    "EXPR [ (1, _145) (-256, _371) (-1, _372) 71 ]",
    "EXPR [ (-1, _371) (-1, _373) 1 ]",
    "EXPR [ (1, _369, _370) (-1, _374) 0 ]",
    "EXPR [ (1, _373, _374) (-1, _374) 0 ]",
    "EXPR [ (-1, _374) (-1, _375) 1 ]",
    "EXPR [ (1, _365, _366) (1, _364) (-1, _376) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(144))], q_c: -112 })], outputs: [Simple(Witness(377))]",
    "EXPR [ (1, _144, _377) (-112, _377) (1, _378) -1 ]",
    "EXPR [ (1, _144, _378) (-112, _378) 0 ]",
    "EXPR [ (-1, _375, _376) (-1, _374) (-1, _379) 1 ]",
    "EXPR [ (-1, _378) (-1, _380) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(144))], q_c: 144 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(381)), Simple(Witness(382))]",
    "BLACKBOX::RANGE [(_381, 1)] []",
    "BLACKBOX::RANGE [(_382, 8)] []",
    "EXPR [ (1, _144) (-256, _381) (-1, _382) 144 ]",
    "EXPR [ (-1, _381) (-1, _383) 1 ]",
    "EXPR [ (1, _379, _380) (-1, _384) 0 ]",
    "EXPR [ (1, _383, _384) (-1, _384) 0 ]",
    "EXPR [ (-1, _384) (-1, _385) 1 ]",
    "EXPR [ (1, _375, _376) (1, _374) (-1, _386) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(143))], q_c: -145 })], outputs: [Simple(Witness(387))]",
    "EXPR [ (1, _143, _387) (-145, _387) (1, _388) -1 ]",
    "EXPR [ (1, _143, _388) (-145, _388) 0 ]",
    "EXPR [ (-1, _385, _386) (-1, _384) (-1, _389) 1 ]",
    "EXPR [ (-1, _388) (-1, _390) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(143))], q_c: 111 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(391)), Simple(Witness(392))]",
    "BLACKBOX::RANGE [(_391, 1)] []",
    "BLACKBOX::RANGE [(_392, 8)] []",
    "EXPR [ (1, _143) (-256, _391) (-1, _392) 111 ]",
    "EXPR [ (-1, _391) (-1, _393) 1 ]",
    "EXPR [ (1, _389, _390) (-1, _394) 0 ]",
    "EXPR [ (1, _393, _394) (-1, _394) 0 ]",
    "EXPR [ (-1, _394) (-1, _395) 1 ]",
    "EXPR [ (1, _385, _386) (1, _384) (-1, _396) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(142))], q_c: -67 })], outputs: [Simple(Witness(397))]",
    "EXPR [ (1, _142, _397) (-67, _397) (1, _398) -1 ]",
    "EXPR [ (1, _142, _398) (-67, _398) 0 ]",
    "EXPR [ (-1, _395, _396) (-1, _394) (-1, _399) 1 ]",
    "EXPR [ (-1, _398) (-1, _400) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(142))], q_c: 189 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(401)), Simple(Witness(402))]",
    "BLACKBOX::RANGE [(_401, 1)] []",
    "BLACKBOX::RANGE [(_402, 8)] []",
    "EXPR [ (1, _142) (-256, _401) (-1, _402) 189 ]",
    "EXPR [ (-1, _401) (-1, _403) 1 ]",
    "EXPR [ (1, _399, _400) (-1, _404) 0 ]",
    "EXPR [ (1, _403, _404) (-1, _404) 0 ]",
    "EXPR [ (-1, _404) (-1, _405) 1 ]",
    "EXPR [ (1, _395, _396) (1, _394) (-1, _406) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: -225 })], outputs: [Simple(Witness(407))]",
    "EXPR [ (1, _141, _407) (-225, _407) (1, _408) -1 ]",
    "EXPR [ (1, _141, _408) (-225, _408) 0 ]",
    "EXPR [ (-1, _405, _406) (-1, _404) (-1, _409) 1 ]",
    "EXPR [ (-1, _408) (-1, _410) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(411)), Simple(Witness(412))]",
    "BLACKBOX::RANGE [(_411, 1)] []",
    "BLACKBOX::RANGE [(_412, 8)] []",
    "EXPR [ (1, _141) (-256, _411) (-1, _412) 31 ]",
    "EXPR [ (-1, _411) (-1, _413) 1 ]",
    "EXPR [ (1, _409, _410) (-1, _414) 0 ]",
    "EXPR [ (1, _413, _414) (-1, _414) 0 ]",
    "EXPR [ (-1, _414) (-1, _415) 1 ]",
    "EXPR [ (1, _405, _406) (1, _404) (-1, _416) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: -245 })], outputs: [Simple(Witness(417))]",
    "EXPR [ (1, _140, _417) (-245, _417) (1, _418) -1 ]",
    "EXPR [ (1, _140, _418) (-245, _418) 0 ]",
    "EXPR [ (-1, _415, _416) (-1, _414) (-1, _419) 1 ]",
    "EXPR [ (-1, _418) (-1, _420) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 11 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(421)), Simple(Witness(422))]",
    "BLACKBOX::RANGE [(_421, 1)] []",
    "BLACKBOX::RANGE [(_422, 8)] []",
    "EXPR [ (1, _140) (-256, _421) (-1, _422) 11 ]",
    "EXPR [ (-1, _421) (-1, _423) 1 ]",
    "EXPR [ (1, _419, _420) (-1, _424) 0 ]",
    "EXPR [ (1, _423, _424) (-1, _424) 0 ]",
    "EXPR [ (-1, _424) (-1, _425) 1 ]",
    "EXPR [ (1, _415, _416) (1, _414) (-1, _426) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(139))], q_c: -147 })], outputs: [Simple(Witness(427))]",
    "EXPR [ (1, _139, _427) (-147, _427) (1, _428) -1 ]",
    "EXPR [ (1, _139, _428) (-147, _428) 0 ]",
    "EXPR [ (-1, _425, _426) (-1, _424) (-1, _429) 1 ]",
    "EXPR [ (-1, _428) (-1, _430) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(139))], q_c: 109 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(431)), Simple(Witness(432))]",
    "BLACKBOX::RANGE [(_431, 1)] []",
    "BLACKBOX::RANGE [(_432, 8)] []",
    "EXPR [ (1, _139) (-256, _431) (-1, _432) 109 ]",
    "EXPR [ (-1, _431) (-1, _433) 1 ]",
    "EXPR [ (1, _429, _430) (-1, _434) 0 ]",
    "EXPR [ (1, _433, _434) (-1, _434) 0 ]",
    "EXPR [ (-1, _434) (-1, _435) 1 ]",
    "EXPR [ (1, _425, _426) (1, _424) (-1, _436) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(138))], q_c: -240 })], outputs: [Simple(Witness(437))]",
    "EXPR [ (1, _138, _437) (-240, _437) (1, _438) -1 ]",
    "EXPR [ (1, _138, _438) (-240, _438) 0 ]",
    "EXPR [ (-1, _435, _436) (-1, _434) (-1, _439) 1 ]",
    "EXPR [ (-1, _438) (-1, _440) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(138))], q_c: 16 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(441)), Simple(Witness(442))]",
    "BLACKBOX::RANGE [(_441, 1)] []",
    "BLACKBOX::RANGE [(_442, 8)] []",
    "EXPR [ (1, _138) (-256, _441) (-1, _442) 16 ]",
    "EXPR [ (-1, _441) (-1, _443) 1 ]",
    "EXPR [ (1, _439, _440) (-1, _444) 0 ]",
    "EXPR [ (1, _443, _444) (-1, _444) 0 ]",
    "EXPR [ (-1, _444) (-1, _445) 1 ]",
    "EXPR [ (1, _435, _436) (1, _434) (-1, _446) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(137))], q_c: 0 })], outputs: [Simple(Witness(447))]",
    "EXPR [ (1, _137, _447) (1, _448) -1 ]",
    "EXPR [ (1, _137, _448) 0 ]",
    "EXPR [ (-1, _445, _446) (-1, _444) (-1, _449) 1 ]",
    "EXPR [ (-1, _448) (-1, _450) 1 ]",
    "EXPR [ (-1, _449, _450) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(136))], q_c: 0 })], outputs: [Simple(Witness(451))]",
    "EXPR [ (1, _136, _451) (1, _452) -1 ]",
    "EXPR [ (1, _136, _452) 0 ]",
    "EXPR [ (-1, _445, _446) (-1, _444) (-1, _453) 1 ]",
    "EXPR [ (-1, _452) (-1, _454) 1 ]",
    "EXPR [ (-1, _453, _454) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(135))], q_c: -1 })], outputs: [Simple(Witness(455))]",
    "EXPR [ (1, _135, _455) (-1, _455) (1, _456) -1 ]",
    "EXPR [ (1, _135, _456) (-1, _456) 0 ]",
    "EXPR [ (-1, _445, _446) (-1, _444) (-1, _457) 1 ]",
    "EXPR [ (-1, _456) (-1, _458) 1 ]",
    "EXPR [ (1, _457, _458) (-1, _459) 0 ]",
    "EXPR [ (1, _135, _459) 0 ]",
    "EXPR [ (-1, _459) (-1, _460) 1 ]",
    "EXPR [ (1, _445, _446) (1, _444) (-1, _461) 0 ]",
    "EXPR [ (1, _460, _461) (1, _459) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(462))]",
    "EXPR [ (1, _0, _462) (1, _463) -1 ]",
    "EXPR [ (1, _0, _463) 0 ]",
    "EXPR [ (-4, _463) (-1, _464) 4 ]",
    "BLACKBOX::RANGE [(_464, 32)] []",
    "EXPR [ (-5, _463) (-1, _465) 5 ]",
    "BLACKBOX::RANGE [(_465, 32)] []",
    "EXPR [ (-1, _466) 10 ]",
    "INIT (id: 9, len: 5, witnesses: [_14, _14, _466, _15, _466])",
    "EXPR [ (-4, _463) (-1, _467) 4 ]",
    "MEM (id: 9, read at: EXPR [ (1, _467) 0 ], value: EXPR [ (1, _468) 0 ]) ",
    "EXPR [ (1, _463, _468) (-10, _463) (-1, _469) 10 ]",
    "MEM (id: 9, write EXPR [ (1, _469) 0 ] at: EXPR [ (1, _467) 0 ]) ",
    "MEM (id: 9, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _470) 0 ]) ",
    "EXPR [ (-1, _463) (-1, _471) 1 ]",
    "MEM (id: 9, read at: EXPR [ (1, _471) 0 ], value: EXPR [ (1, _472) 0 ]) ",
    "EXPR [ (-2, _463) (-1, _473) 2 ]",
    "MEM (id: 9, read at: EXPR [ (1, _473) 0 ], value: EXPR [ (1, _474) 0 ]) ",
    "EXPR [ (-3, _463) (-1, _475) 3 ]",
    "MEM (id: 9, read at: EXPR [ (1, _475) 0 ], value: EXPR [ (1, _476) 0 ]) ",
    "EXPR [ (-4, _463) (-1, _477) 4 ]",
    "MEM (id: 9, read at: EXPR [ (1, _477) 0 ], value: EXPR [ (1, _478) 0 ]) ",
    "EXPR [ (2, _463, _463) (-3, _463) 0 ]",
    "EXPR [ (-10, _463) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "1Z3bbhs5FkX/xc954OG5kMyvDAYNJ3EaBgw7cJwBBkH/e6uDqJQWkzIakNjrvPlSUi3Yqr3pYy3W15sPd+++/P7b/ePHp883b//z9ebh6f3ty/3T4+Gzrzfl25c+f7p9/Ouzzy+3zy83b6v6m5u7xw+Hj7z98ebm4/3D3c1bL3/8982N/OwBEl6/P0Kiy48PeTM/+3A9Pv1otn+wljg+s5be9g827/b9YPNRzshrWnJNS25k8igbeYickXta8khLLmUxupRyRBeJc5rVUSd6ojE7p1kdX7Vsv9Yq/ZxGUTSGolkdHVVPNObnNKvj4HAlHWm0TquHtprGTjQ+XVN99RUetl3hfbwSlaONY1SOMaGPtOh1dcpr29CtvFJQHuWI7lEndEGj2wk9JvSaF13zolve17rn/alHXvSWF73nRR9p0ZXdprvoedtU87ap5m1TZbfpLnreNtW8bap521TztqnmbVPL26aWt02N3aa9bujjfKBl7DbdRWe36S46u0130dltuovObtNddHab7qKz23QP3dltuovObtNd9Lxt6nnb1PO2qedtU8/bpr66Ta1uby8wPX+zg68uSPMTTeg5zerOs9Y2mjG9oWZ1jXk5vv9OXcY5zepmch0bTYv9g6PEET1KL+foNS+65kU3NHo9oduE7nnRI+8LpuVF73nRR1r0VvKi523TlrdNW942bew23UVnt+kuet42beg2le2PwhA9f+9wQ7fpPjq6TXfRO7tN9xa9nd2mu+joNt1/waDbdB8d3ab76Og23UdHt+k+et427XnbtOdt04Fu0310dJvuo+dt05G3TUfeNh1523TkbdORt01H3jYdedtUSt46lZK3T6XkLVQpeRtVSt5KlZK3U6XkLVUpeVtVSt5alZK4VyVxr0riXpXEvSqJe3X5lj2XZE/cq5K4VyVxr0riXhV2r8aJvU3sld2r++zsXt1nZ/fqPju7V/fZ2b26z87u1X12dq/us7N7dZ+d3av77Il7VRP3qibuVU3cq5q4V5dvPXRJ9sS9qol7VRP3qibuVU3cq5a4V5fvQOR9Y48y46yuypATjtYJZ3X7hcWGE2XCWV1ocTLno887uK/uqHbawr3NW/8v36Wnnfb+b/Pe/8t33ml++un0Vw6OU4SEu07sPTH7yMu+fPOdS7ILmj36xt6na3X59jv/jH1s7FHmO1comT00NnafCm35Bjz/jH1s7lEr82tmdfv1cjxYu/b9g1sZx4ObzMus5VvwXJK9JWbvidlHXvbluwFdkl3I7LJlZKtlunPQ8s2DLsmuidktMTu6V19hX96rvt0qq8eMs7oqx9juIVX0lcHUYSl2XNY215m9o9m3wUjzPib2kZd9+b5Al2SXxOyLq9KKndhjWnVcZLefvs3HSimv4Jzezmby9xsi/uTg3fvXykW2+/m32D0xe1/Nvt3f8PDh/BIeKJyLbBFzQRxh4VQWzvL4G7LhjOn/UN1YOM7CCRZOW4xT5fjMVus0H+6rU7mOE86Y/k3QBwpnFBaOsHAqC0dZOKtTufY44Ux/QYzVqaxy/HPDtM44q1PZypbKVqZUHo2F01k4g4RTy+pU1m2sd8DpE87qVD70+IajM87PU7nJ8Ud6GCa8crf3XraDe6mv/SN0bL+sGHKa1En/2TNXOy6se43648Hf2DUxuyVm98TskZi9JWbvidlHXvZf7CuRg10SsyfuVUncq5K4VyVxr0riXpXEvSqJe1US92pN3Ks1ca/WxL1aE/dqTdyrNXGv1sS9WhP3ak3cqzVxr2riXtXEvaqJe1UT96om7lVN3Ku6uFdbte0dyjVswmksnM7CGatxtvfiNpUJxwoLR1g4lYWjLBxDXVnmLBxWKltjvXY6C4eVys5KZWelsrNS2Vmp7KxUdlYqOyuVnbVWdtZa2VmpHKxUDlYqByuVg5XKYSwcZ+EEC4e1Vg5WKsdA4bTCwhEWTmXhsFK5sVK5sVK5sVK5sVK5sSYYjbVW7qy1cmetlTsrlbuycIyFw5pgdNYEo7NSubNSubNSebBSebBSebAmGIO1Vh6stfJgrZUHK5UHa648WBOMgZpgaEFNMLSgUlkLKpW1oFJZCyqVtaBSWQtqgqEFtVbWglora0GtlVVYqSyoubIKaoKhgppgqBgLh5XKwkplYaWysFJZWKlcURMMray1cmWtlStrrVxZqVxRc2WtqAmGVtQEQytqgqGVlcrKSmVlpbKyUllZqazGwmGtlZW1VlbWWpnl9qmy5srGmmAYa4JhrAkGy+1TY6WysVLZWKnMcvuU5fYpy+1TltunLLdPnZXKzpors9w+Zbl9ynL71Fmp7KxUZrl9ynL7lOX2KcvtU5bbpyy3T1lunwYrlYM1V2a5fcpy+5Tl9mljpXJjpTLL7VOW26cst09Zbp+y3D5luX3Kcvu0s1K5s+bKLLdPWW6fstw+7axU7qxUZrl9ynL7lOX2KcvtU5bbpyy3T1lunw5WKg/WXJnl9inL7VOW26cDlcpWUKlsLLfPWG6fsdw+K8bCQa2VjeX2Gcvts4JKZSuoubKx3D5juX3GcvtMWKksrFRmuX3GcvuM5fYZy+0zlttnLLfPWG6fVVYqV9Rc2Vhun7HcPmO5fVZZqVxZqcxy+4zl9hnL7TOW22cst89Ybp+x3D5j3bfPWPftM5bbZyy3z1hun7Hu22es+/YZy+0zlttnLLfPWG6fsdw+Y7l9xnL7zFmp7Ky5MsvtM5bbZyy3z5yVys5KZZbbZyy3z1hun7HcPmO5fcZy+4zl9lmwUjlYc2WW22cst89Ybp8FK5UbK5VZbp+x3D5juX3GcvuM5fYZy+0zlttnjZXKjTVXZrl9xnL7jOX2WWelcmelMsvtM5bbZyy3z1hun7HcPmO5fcZy+2ywUnmw5sost89Ybp+x3D4brFQerFRmuX3Ocvuc5fY5y+1zltvnBbVWdpbb5wWVyl5Qc2VnuX3Ocvuc5fa5sFJZWKnMcvuc5fY5y+1zltvnLLfPWW6fs9w+r6xUrqi5srPcPme5fc5y+7yyUrmyUpnl9jnL7XOW2+cst89Zbp+z3D5nuX2urFRW1FzZWW6fs9w+Z7l9rqxUNlYqs9w+Z7l9znL7nOX2Ocvtc5bb5yy3z42VysaaK7PcPme5fc5y+9xZqeysVGa5fc5y+5zl9jnL7XOW2+cst89Zbp8HK5WDNVdmuX3Ocvuc5fZ5sFI5WKnMcvuc5fY5y+1zltvnLLfPWW6fs9w+b6xUbqy5Msvtc5bb5yy3zzsrlTsrlVlun7PcPme5fc5y+5zl9jnL7XOW2+eDlcqDNVdmuX3Ocvuc5fb5YKXyYKUyy+1zltvnLLcvWG5fsNy+YLl9wXL7oqBSOQpqrhwsty9Ybl+w3L4orFQWViqz3L5guX3BcvuC5fYFy+0LltsXLLcvhJXKgporB8vtC5bbFyy3LyorlSsrlVluX7DcvmC5fcFy+4Ll9gXL7QuW2xfKSmVFzZWD5fYFy+0LltsXykplltsXrPv2Beu+fWGstbKxUpnl9oWxUtlYqWysVDbWXJnl9gXrvn3hrLWys9bKzporL3f7rPoRx2qbcC6RyhobjtUfD/52Br/6GeLaZ/iVGKW+nSFeO0O17Qw1ZDpDvfoZ9OpnsKufwa9+hrj6GdrVz9CvfoZx7TP8ysG54Bmufk23q1/T7erXdLv6Nd2ufk23C1zTqno8g9qYznCBa9paPZ7BevztDIdP3j3fPzzc//7bw9P725f7p8fPh4cevvy/2+f723cPd98//fjl8f0P3335/6fjd46P//T89P7uw5fnu7+e6dv3Dk//Jw==",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "use std::slice;\n\nfn main(x: Field, y: pub Field) {\n    let mut slice = &[0; 2];\n    assert(slice[0] == 0);\n    assert(slice[0] != 1);\n    slice[0] = x;\n    assert(slice[0] == x);\n\n    let slice_plus_10 = slice.push_back(y);\n    assert(slice_plus_10[2] == 10);\n    assert(slice_plus_10[2] != 8);\n    assert(slice_plus_10.len() == 3);\n\n    let mut new_slice = &[];\n    for i in 0..5 {\n        new_slice = new_slice.push_back(i);\n    }\n    assert(new_slice.len() == 5);\n\n    new_slice = new_slice.push_front(20);\n    assert(new_slice[0] == 20);\n    assert(new_slice.len() == 6);\n\n    let (popped_slice, last_elem) = new_slice.pop_back();\n    assert(last_elem == 4);\n    assert(popped_slice.len() == 5);\n\n    let (first_elem, rest_of_slice) = popped_slice.pop_front();\n    assert(first_elem == 20);\n    assert(rest_of_slice.len() == 4);\n\n    new_slice = rest_of_slice.insert(2, 100);\n    assert(new_slice[2] == 100);\n    assert(new_slice[4] == 3);\n    assert(new_slice.len() == 5);\n\n    let (remove_slice, removed_elem) = new_slice.remove(3);\n    assert(removed_elem == 2);\n    assert(remove_slice[3] == 3);\n    assert(remove_slice.len() == 4);\n\n    let append = &[1, 2].append(&[3, 4, 5]);\n    assert(append.len() == 5);\n    assert(append[0] == 1);\n    assert(append[4] == 5);\n\n    let mapped = &[1, 2].map(|x| x + 1);\n    assert_eq(mapped, &[2, 3]);\n\n    assert_eq(&[1, 2, 3].fold(0, |acc, x| acc + x), 6);\n    assert_eq(&[1, 2, 3].reduce(|acc, x| acc + x), 6);\n    assert(&[2, 4, 6].all(|x| x > 0));\n    assert(&[2, 4, 6].any(|x| x > 5));\n\n    regression_2083();\n    // The parameters to this function must come from witness values (inputs to main)\n    regression_merge_slices(x, y);\n    regression_2370();\n\n    regression_4418(x);\n    regression_slice_call_result(x, y);\n    regression_4506();\n}\n\n// Ensure that slices of struct/tuple values work.\nfn regression_2083() {\n    let y = &[(1, 2)];\n    let y = y.push_back((3, 4)); // [(1, 2), (3, 4)]\n    let y = y.push_back((5, 6)); // [(1, 2), (3, 4), (5, 6)]\n    assert(y[2].1 == 6);\n\n    let y = y.push_front((10, 11)); // [(10, 11), (1, 2), (3, 4), (5, 6)]\n    let y = y.push_front((12, 13)); // [(12, 13), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[1].0 == 10);\n\n    let y = y.insert(1, (55, 56)); // [(12, 13), (55, 56), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].1 == 13);\n    assert(y[1].1 == 56);\n    assert(y[2].0 == 10);\n\n    let (y, x) = y.remove(2); // [(12, 13), (55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[2].0 == 1);\n    assert(x.0 == 10);\n    assert(x.1 == 11);\n\n    let (x, y) = y.pop_front(); // [(55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].0 == 55);\n    assert(x.0 == 12);\n    assert(x.1 == 13);\n\n    let (y, x) = y.pop_back(); // [(55, 56), (1, 2), (3, 4)]\n    assert(y.len() == 3);\n    assert(x.0 == 5);\n    assert(x.1 == 6);\n}\n\n// The parameters to this function must come from witness values (inputs to main)\nfn regression_merge_slices(x: Field, y: Field) {\n    merge_slices_if(x, y);\n    merge_slices_else(x);\n}\n\nfn merge_slices_if(x: Field, y: Field) {\n    let slice = merge_slices_return(x, y);\n    assert(slice.len() == 3);\n    assert(slice[2] == 10);\n\n    let slice = merge_slices_mutate(x, y);\n    assert(slice.len() == 4);\n    assert(slice[3] == 5);\n\n    let slice = merge_slices_mutate_in_loop(x, y);\n    assert(slice.len() == 7);\n    assert(slice[6] == 4);\n\n    let slice = merge_slices_mutate_two_ifs(x, y);\n    assert(slice.len() == 6);\n    assert(slice[3] == 5);\n    assert(slice[4] == 15);\n    assert(slice[5] == 30);\n\n    let slice = merge_slices_mutate_between_ifs(x, y);\n    assert(slice.len() == 8);\n    assert(slice[3] == 5);\n    assert(slice[4] == 30);\n    assert(slice[5] == 15);\n    assert(slice[6] == 50);\n    assert(slice[7] == 60);\n\n    merge_slices_push_then_pop(x, y);\n\n    let slice = merge_slices_push_then_insert(x, y);\n    assert(slice.len() == 7);\n    assert(slice[1] == 50);\n    assert(slice[2] == 0);\n    assert(slice[5] == 30);\n    assert(slice[6] == 100);\n\n    let slice = merge_slices_remove_between_ifs(x, y);\n    assert(slice.len() == 5);\n}\n\nfn merge_slices_else(x: Field) {\n    let slice = merge_slices_return(x, 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice.len() == 2);\n\n    let slice = merge_slices_mutate(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n\n    let slice = merge_slices_mutate_in_loop(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n}\n\n// Test returning a merged slice without a mutation\nfn merge_slices_return(x: Field, y: Field) -> [Field] {\n    let slice = &[0; 2];\n    if x != y {\n        if x != 20 {\n            slice.push_back(y)\n        } else {\n            slice\n        }\n    } else {\n        slice\n    }\n}\n\n// Test mutating a slice inside of an if statement\nfn merge_slices_mutate(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\n// Test mutating a slice inside of a loop in an if statement\nfn merge_slices_mutate_in_loop(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        for i in 0..5 {\n            slice = slice.push_back(i as Field);\n        }\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\nfn merge_slices_mutate_two_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n    slice = slice.push_back(30);\n\n    slice\n}\n\nfn merge_slices_mutate_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n\n    slice\n}\n\nfn merge_slices_push_then_pop(x: Field, y: Field) {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 4);\n    assert(elem == 30);\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 3);\n    assert(elem == x);\n}\n\nfn merge_slices_push_then_insert(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n        slice = slice.push_back(15);\n    }\n\n    slice = slice.insert(1, 50);\n    // Test that we can use slice insert the same as slice push back\n    slice = slice.insert(6, 100);\n\n    slice\n}\n\nfn merge_slices_remove_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    let (mut slice, elem) = slice.remove(2);\n    assert(elem == y);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice\n}\n// Previously, we'd get a type error when trying to assign an array of a different size to\n// an existing array variable. Now, we infer the variable must be a slice.\nfn regression_2370() {\n    let mut slice = &[];\n    slice = &[1, 2, 3];\n}\n\nfn regression_4418(x: Field) {\n    let mut crash: [u8; 32] = x.to_be_bytes();\n\n    if x != 0 {\n        crash[0] = 10;\n    }\n}\n\nfn regression_slice_call_result(x: Field, y: Field) {\n    let mut slice = merge_slices_return(x, y);\n    if x != 0 {\n        slice = slice.push_back(5);\n        slice = slice.push_back(10);\n    } else {\n        slice = slice.push_back(5);\n    }\n    assert(slice.len() == 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice[2] == 10);\n    assert(slice[3] == 5);\n    assert(slice[4] == 10);\n}\n\nfn regression_4506() {\n    let slice: [Field] = &[1, 2, 3];\n    assert(slice == slice);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
