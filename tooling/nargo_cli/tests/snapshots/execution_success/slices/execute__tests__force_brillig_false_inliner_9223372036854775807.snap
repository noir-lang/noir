---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "285656119219400463": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 32 limbs"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _597",
    "private parameters indices : [_0]",
    "public parameters indices : [_1]",
    "return value indices : []",
    "EXPR [ (1, _1) -10 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -10 })], outputs: [Simple(Witness(2))]",
    "EXPR [ (1, _0, _2) (-10, _2) (1, _3) -1 ]",
    "EXPR [ (1, _0, _3) (-10, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -20 })], outputs: [Simple(Witness(4))]",
    "EXPR [ (1, _0, _4) (-20, _4) (1, _5) -1 ]",
    "EXPR [ (1, _0, _5) (-20, _5) 0 ]",
    "EXPR [ (-1, _3) (-1, _6) 1 ]",
    "EXPR [ (1, _3, _5) (-3, _3) (-1, _5) (-1, _7) 3 ]",
    "EXPR [ (10, _3, _5) (-10, _3) (-10, _5) (-1, _8) 10 ]",
    "EXPR [ (1, _6, _7) (2, _3) -3 ]",
    "EXPR [ (1, _6, _8) -10 ]",
    "EXPR [ (2, _3, _6) (-1, _532) 0 ]",
    "EXPR [ (4, _6, _6) (-1, _533) 0 ]",
    "EXPR [ (3, _3) (1, _532) (1, _533) -4 ]",
    "EXPR [ (1, _0, _6) -5 ]",
    "EXPR [ (3, _3) (1, _532) (5472060717959818805561601436314318772137091100104008585924551046643952123906, _533) -7 ]",
    "EXPR [ (4, _6) -4 ]",
    "EXPR [ (-1, _9) 0 ]",
    "EXPR [ (1, _0, _3) (10, _6) (-1, _10) 0 ]",
    "EXPR [ (-1, _11) 5 ]",
    "EXPR [ (-1, _12) 20 ]",
    "INIT (id: 0, len: 5, witnesses: [_9, _9, _10, _11, _12])",
    "EXPR [ (4, _5) (-1, _13) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _13) 0 ], value: EXPR [ (1, _14) 0 ]) ",
    "EXPR [ (-1, _5, _14) (20, _5) (1, _14) (-1, _15) 0 ]",
    "MEM (id: 0, write EXPR [ (1, _15) 0 ] at: EXPR [ (1, _13) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _16) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _5) 0 ], value: EXPR [ (1, _17) 0 ]) ",
    "EXPR [ (2, _5) (-1, _18) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _18) 0 ], value: EXPR [ (1, _19) 0 ]) ",
    "EXPR [ (3, _5) (-1, _20) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _20) 0 ], value: EXPR [ (1, _21) 0 ]) ",
    "EXPR [ (4, _5) (-1, _22) 0 ]",
    "MEM (id: 0, read at: EXPR [ (1, _22) 0 ], value: EXPR [ (1, _23) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: -1 })], outputs: [Simple(Witness(24))]",
    "EXPR [ (1, _5, _24) (-1, _24) (1, _25) -1 ]",
    "EXPR [ (1, _5, _25) (-1, _25) 0 ]",
    "EXPR [ (1, _5) (-1, _26) 5 ]",
    "EXPR [ (20, _5) (-1, _27) 0 ]",
    "EXPR [ (-1, _28) 15 ]",
    "INIT (id: 1, len: 6, witnesses: [_9, _9, _10, _11, _27, _28])",
    "EXPR [ (1, _5) (-1, _29) 4 ]",
    "MEM (id: 1, write EXPR [ (1, _28) 0 ] at: EXPR [ (1, _29) 0 ]) ",
    "MEM (id: 1, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _30) 0 ]) ",
    "EXPR [ (-1, _31) 1 ]",
    "MEM (id: 1, read at: EXPR [ (1, _31) 0 ], value: EXPR [ (1, _32) 0 ]) ",
    "EXPR [ (-1, _33) 2 ]",
    "MEM (id: 1, read at: EXPR [ (1, _33) 0 ], value: EXPR [ (1, _34) 0 ]) ",
    "EXPR [ (-1, _35) 3 ]",
    "MEM (id: 1, read at: EXPR [ (1, _35) 0 ], value: EXPR [ (1, _36) 0 ]) ",
    "EXPR [ (-1, _37) 4 ]",
    "MEM (id: 1, read at: EXPR [ (1, _37) 0 ], value: EXPR [ (1, _38) 0 ]) ",
    "MEM (id: 1, read at: EXPR [ (1, _11) 0 ], value: EXPR [ (1, _39) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(26))], q_c: -6 })], outputs: [Simple(Witness(40))]",
    "EXPR [ (1, _26, _40) (-6, _40) (1, _41) -1 ]",
    "EXPR [ (1, _26, _41) (-6, _41) 0 ]",
    "EXPR [ (-1, _25, _30) (1, _30) (-1, _43) 0 ]",
    "EXPR [ (-1, _25, _32) (1, _32) (-1, _44) 0 ]",
    "EXPR [ (1, _10, _25) (-1, _25, _34) (1, _34) (-1, _45) 0 ]",
    "EXPR [ (-1, _25, _36) (5, _25) (1, _36) (-1, _46) 0 ]",
    "EXPR [ (1, _25, _27) (-1, _25, _38) (1, _38) (-1, _47) 0 ]",
    "EXPR [ (-1, _25, _39) (15, _25) (1, _39) (-1, _48) 0 ]",
    "EXPR [ (-1, _49) 30 ]",
    "INIT (id: 2, len: 7, witnesses: [_43, _44, _45, _46, _47, _48, _49])",
    "MEM (id: 2, write EXPR [ (1, _49) 0 ] at: EXPR [ (1, _26) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _50) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _31) 0 ], value: EXPR [ (1, _51) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _33) 0 ], value: EXPR [ (1, _52) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _35) 0 ], value: EXPR [ (1, _53) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _37) 0 ], value: EXPR [ (1, _54) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _11) 0 ], value: EXPR [ (1, _55) 0 ]) ",
    "EXPR [ (-1, _56) 6 ]",
    "MEM (id: 2, read at: EXPR [ (1, _56) 0 ], value: EXPR [ (1, _57) 0 ]) ",
    "EXPR [ (1, _26) -5 ]",
    "EXPR [ (1, _41, _46) (-1, _41, _53) (1, _53) -5 ]",
    "EXPR [ (1, _41, _47) (-1, _41, _54) (1, _54) -15 ]",
    "EXPR [ (1, _41, _48) (-1, _41, _55) (1, _55) -30 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: -1 })], outputs: [Simple(Witness(58))]",
    "EXPR [ (1, _5, _58) (-1, _58) (1, _59) -1 ]",
    "EXPR [ (1, _5, _59) (-1, _59) 0 ]",
    "EXPR [ (1, _5) (-1, _60) 6 ]",
    "BLACKBOX::RANGE [(_60, 32)] []",
    "INIT (id: 3, len: 7, witnesses: [_9, _9, _10, _11, _49, _27, _28])",
    "EXPR [ (1, _5) (-1, _61) 5 ]",
    "MEM (id: 3, write EXPR [ (1, _28) 0 ] at: EXPR [ (1, _61) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _62) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _31) 0 ], value: EXPR [ (1, _63) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _33) 0 ], value: EXPR [ (1, _64) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _35) 0 ], value: EXPR [ (1, _65) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _37) 0 ], value: EXPR [ (1, _66) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _11) 0 ], value: EXPR [ (1, _67) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _56) 0 ], value: EXPR [ (1, _68) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(60))], q_c: -7 })], outputs: [Simple(Witness(69))]",
    "EXPR [ (1, _60, _69) (-7, _69) (1, _70) -1 ]",
    "EXPR [ (1, _60, _70) (-7, _70) 0 ]",
    "EXPR [ (-1, _5, _60) (-1, _5) (1, _60) (-1, _71) 1 ]",
    "BLACKBOX::RANGE [(_71, 32)] []",
    "EXPR [ (-1, _59, _62) (1, _62) (-1, _72) 0 ]",
    "EXPR [ (-1, _59, _63) (1, _63) (-1, _73) 0 ]",
    "EXPR [ (1, _10, _59) (-1, _59, _64) (1, _64) (-1, _74) 0 ]",
    "EXPR [ (-1, _59, _65) (5, _59) (1, _65) (-1, _75) 0 ]",
    "EXPR [ (-1, _59, _66) (30, _59) (1, _66) (-1, _76) 0 ]",
    "EXPR [ (1, _27, _59) (-1, _59, _67) (1, _67) (-1, _77) 0 ]",
    "EXPR [ (-1, _59, _68) (15, _59) (1, _68) (-1, _78) 0 ]",
    "EXPR [ (-1, _79) 50 ]",
    "INIT (id: 4, len: 8, witnesses: [_72, _73, _74, _75, _76, _77, _78, _79])",
    "EXPR [ (-1, _5, _60) (1, _60) (-1, _80) 0 ]",
    "MEM (id: 4, read at: EXPR [ (1, _80) 0 ], value: EXPR [ (1, _81) 0 ]) ",
    "EXPR [ (1, _5, _81) (-50, _5) (-1, _82) 50 ]",
    "MEM (id: 4, write EXPR [ (1, _82) 0 ] at: EXPR [ (1, _80) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _83) 0 ]) ",
    "EXPR [ (-1, _5) (-1, _84) 1 ]",
    "MEM (id: 4, read at: EXPR [ (1, _84) 0 ], value: EXPR [ (1, _85) 0 ]) ",
    "EXPR [ (-2, _5) (-1, _86) 2 ]",
    "MEM (id: 4, read at: EXPR [ (1, _86) 0 ], value: EXPR [ (1, _87) 0 ]) ",
    "EXPR [ (-3, _5) (-1, _88) 3 ]",
    "MEM (id: 4, read at: EXPR [ (1, _88) 0 ], value: EXPR [ (1, _89) 0 ]) ",
    "EXPR [ (-4, _5) (-1, _90) 4 ]",
    "MEM (id: 4, read at: EXPR [ (1, _90) 0 ], value: EXPR [ (1, _91) 0 ]) ",
    "EXPR [ (-5, _5) (-1, _92) 5 ]",
    "MEM (id: 4, read at: EXPR [ (1, _92) 0 ], value: EXPR [ (1, _93) 0 ]) ",
    "EXPR [ (-6, _5) (-1, _94) 6 ]",
    "MEM (id: 4, read at: EXPR [ (1, _94) 0 ], value: EXPR [ (1, _95) 0 ]) ",
    "EXPR [ (-7, _5) (-1, _96) 7 ]",
    "MEM (id: 4, read at: EXPR [ (1, _96) 0 ], value: EXPR [ (1, _97) 0 ]) ",
    "EXPR [ (-1, _5) (-1, _98) 1 ]",
    "EXPR [ (1, _70, _72) (-1, _70, _83) (1, _83) (-1, _99) 0 ]",
    "EXPR [ (1, _70, _73) (-1, _70, _85) (1, _85) (-1, _100) 0 ]",
    "EXPR [ (1, _70, _74) (-1, _70, _87) (1, _87) (-1, _101) 0 ]",
    "EXPR [ (1, _70, _75) (-1, _70, _89) (1, _89) (-1, _102) 0 ]",
    "EXPR [ (1, _70, _76) (-1, _70, _91) (1, _91) (-1, _103) 0 ]",
    "EXPR [ (1, _70, _77) (-1, _70, _93) (1, _93) (-1, _104) 0 ]",
    "EXPR [ (1, _70, _78) (-1, _70, _95) (1, _95) (-1, _105) 0 ]",
    "EXPR [ (-1, _70, _97) (50, _70) (1, _97) (-1, _106) 0 ]",
    "EXPR [ (1, _5, _60) (-1, _562) 0 ]",
    "EXPR [ (-1, _5, _71) (-1, _563) 0 ]",
    "EXPR [ (1, _71) (-1, _107) (1, _562) (1, _563) -8 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(107))], q_c: 0 })], outputs: [Simple(Witness(108))]",
    "EXPR [ (1, _107, _108) (1, _109) -1 ]",
    "EXPR [ (1, _107, _109) 0 ]",
    "EXPR [ (1, _5, _72) (1, _98, _99) (-1, _111) 0 ]",
    "EXPR [ (1, _5, _73) (1, _98, _100) (-1, _112) 0 ]",
    "EXPR [ (1, _5, _74) (1, _98, _101) (-1, _113) 0 ]",
    "EXPR [ (1, _5, _75) (1, _98, _102) (-1, _114) 0 ]",
    "EXPR [ (1, _5, _76) (1, _98, _103) (-1, _115) 0 ]",
    "EXPR [ (1, _5, _77) (1, _98, _104) (-1, _116) 0 ]",
    "EXPR [ (1, _5, _78) (1, _98, _105) (-1, _117) 0 ]",
    "EXPR [ (1, _98, _106) (-1, _118) 0 ]",
    "EXPR [ (-1, _119) 60 ]",
    "INIT (id: 5, len: 9, witnesses: [_111, _112, _113, _114, _115, _116, _117, _118, _119])",
    "EXPR [ (1, _71) (-1, _120) (1, _562) (1, _563) 0 ]",
    "MEM (id: 5, write EXPR [ (1, _119) 0 ] at: EXPR [ (1, _120) 0 ]) ",
    "MEM (id: 5, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _121) 0 ]) ",
    "MEM (id: 5, read at: EXPR [ (1, _31) 0 ], value: EXPR [ (1, _122) 0 ]) ",
    "MEM (id: 5, read at: EXPR [ (1, _33) 0 ], value: EXPR [ (1, _123) 0 ]) ",
    "MEM (id: 5, read at: EXPR [ (1, _35) 0 ], value: EXPR [ (1, _124) 0 ]) ",
    "MEM (id: 5, read at: EXPR [ (1, _37) 0 ], value: EXPR [ (1, _125) 0 ]) ",
    "MEM (id: 5, read at: EXPR [ (1, _11) 0 ], value: EXPR [ (1, _126) 0 ]) ",
    "MEM (id: 5, read at: EXPR [ (1, _56) 0 ], value: EXPR [ (1, _127) 0 ]) ",
    "EXPR [ (-1, _128) 7 ]",
    "MEM (id: 5, read at: EXPR [ (1, _128) 0 ], value: EXPR [ (1, _129) 0 ]) ",
    "EXPR [ (-1, _130) 8 ]",
    "MEM (id: 5, read at: EXPR [ (1, _130) 0 ], value: EXPR [ (1, _131) 0 ]) ",
    "EXPR [ (1, _71) (1, _562) (1, _563) -7 ]",
    "EXPR [ (1, _109, _114) (-1, _109, _124) (1, _124) -5 ]",
    "EXPR [ (1, _109, _115) (-1, _109, _125) (1, _125) -30 ]",
    "EXPR [ (1, _109, _116) (-1, _109, _126) (1, _126) -15 ]",
    "EXPR [ (1, _109, _117) (-1, _109, _127) (1, _127) -50 ]",
    "EXPR [ (1, _109, _118) (-1, _109, _129) (1, _129) -60 ]",
    "INIT (id: 6, len: 6, witnesses: [_9, _9, _10, _11, _49, _27])",
    "EXPR [ (1, _61) (-1, _132) -1 ]",
    "MEM (id: 6, read at: EXPR [ (1, _132) 0 ], value: EXPR [ (1, _133) 0 ]) ",
    "INIT (id: 7, len: 6, witnesses: [_9, _9, _10, _11, _49, _27])",
    "EXPR [ (1, _132) -4 ]",
    "EXPR [ (1, _133) -30 ]",
    "MEM (id: 7, read at: EXPR [ (1, _35) 0 ], value: EXPR [ (1, _134) 0 ]) ",
    "EXPR [ (-1, _0) (1, _134) 0 ]",
    "EXPR [ (2, _5) (-1, _135) 6 ]",
    "BLACKBOX::RANGE [(_135, 32)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(135))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(136)), Simple(Witness(137))]",
    "BLACKBOX::RANGE [(_137, 32)] []",
    "EXPR [ (-1, _135) (-4294967296, _136) (-1, _137) 4294967297 ]",
    "EXPR [ (-1, _136) 0 ]",
    "EXPR [ (1, _135) (-1, _138) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(138))], q_c: 4294967302 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(139)), Simple(Witness(140))]",
    "BLACKBOX::RANGE [(_140, 32)] []",
    "EXPR [ (-1, _138) (-4294967296, _139) (-1, _140) 4294967302 ]",
    "EXPR [ (-1, _139) 0 ]",
    "EXPR [ (1, _138) -7 ]",
    "EXPR [ (1, _10) -10 ]",
    "EXPR [ (4, _5) (3, _98) (-1, _141) -4 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 0 })], outputs: [Simple(Witness(142))]",
    "EXPR [ (1, _141, _142) (1, _143) -1 ]",
    "EXPR [ (1, _141, _143) 0 ]",
    "EXPR [ (4, _5) (3, _98) (-1, _144) 1 ]",
    "BLACKBOX::RANGE [(_144, 32)] []",
    "INIT (id: 9, len: 5, witnesses: [_9, _9, _11, _27, _28])",
    "EXPR [ (4, _5) (3, _98) (-1, _145) 0 ]",
    "MEM (id: 9, write EXPR [ (1, _28) 0 ] at: EXPR [ (1, _145) 0 ]) ",
    "MEM (id: 9, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _146) 0 ]) ",
    "MEM (id: 9, read at: EXPR [ (1, _31) 0 ], value: EXPR [ (1, _147) 0 ]) ",
    "MEM (id: 9, read at: EXPR [ (1, _33) 0 ], value: EXPR [ (1, _148) 0 ]) ",
    "MEM (id: 9, read at: EXPR [ (1, _35) 0 ], value: EXPR [ (1, _149) 0 ]) ",
    "MEM (id: 9, read at: EXPR [ (1, _37) 0 ], value: EXPR [ (1, _150) 0 ]) ",
    "EXPR [ (1, _98, _144) (1, _98) (-1, _151) 0 ]",
    "BLACKBOX::RANGE [(_151, 32)] []",
    "EXPR [ (-1, _143, _146) (1, _146) (-1, _152) 0 ]",
    "EXPR [ (-1, _143, _147) (1, _147) (-1, _153) 0 ]",
    "EXPR [ (-1, _143, _148) (5, _143) (1, _148) (-1, _154) 0 ]",
    "EXPR [ (1, _27, _143) (-1, _143, _149) (1, _149) (-1, _155) 0 ]",
    "EXPR [ (-1, _143, _150) (15, _143) (1, _150) (-1, _156) 0 ]",
    "INIT (id: 10, len: 6, witnesses: [_152, _153, _154, _155, _156, _79])",
    "EXPR [ (1, _98, _144) (-1, _157) 0 ]",
    "MEM (id: 10, read at: EXPR [ (1, _157) 0 ], value: EXPR [ (1, _158) 0 ]) ",
    "EXPR [ (-1, _98, _158) (50, _98) (1, _158) (-1, _159) 0 ]",
    "MEM (id: 10, write EXPR [ (1, _159) 0 ] at: EXPR [ (1, _157) 0 ]) ",
    "MEM (id: 10, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _160) 0 ]) ",
    "MEM (id: 10, read at: EXPR [ (1, _98) 0 ], value: EXPR [ (1, _161) 0 ]) ",
    "EXPR [ (2, _98) (-1, _162) 0 ]",
    "MEM (id: 10, read at: EXPR [ (1, _162) 0 ], value: EXPR [ (1, _163) 0 ]) ",
    "EXPR [ (3, _98) (-1, _164) 0 ]",
    "MEM (id: 10, read at: EXPR [ (1, _164) 0 ], value: EXPR [ (1, _165) 0 ]) ",
    "EXPR [ (4, _98) (-1, _166) 0 ]",
    "MEM (id: 10, read at: EXPR [ (1, _166) 0 ], value: EXPR [ (1, _167) 0 ]) ",
    "EXPR [ (5, _98) (-1, _168) 0 ]",
    "MEM (id: 10, read at: EXPR [ (1, _168) 0 ], value: EXPR [ (1, _169) 0 ]) ",
    "EXPR [ (1, _5, _144) (1, _98, _151) -5 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -5 })], outputs: [Simple(Witness(170))]",
    "EXPR [ (1, _0, _170) (-5, _170) (1, _171) -1 ]",
    "EXPR [ (1, _0, _171) (-5, _171) 0 ]",
    "EXPR [ (-1, _171) (-1, _172) 1 ]",
    "EXPR [ (-2, _5, _171) (-3, _98, _171) (2, _5) (3, _98) (-1, _173) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-1, Witness(172), Witness(173))], linear_combinations: [(-2, Witness(171))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(174)), Simple(Witness(175))]",
    "BLACKBOX::RANGE [(_175, 32)] []",
    "EXPR [ (-1, _172, _173) (-1, _595) 0 ]",
    "EXPR [ (-2, _171) (-4294967296, _174) (-1, _175) (1, _595) 4294967296 ]",
    "EXPR [ (-1, _174) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-1, Witness(172), Witness(173))], linear_combinations: [(-2, Witness(171))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(176)), Simple(Witness(177))]",
    "BLACKBOX::RANGE [(_177, 32)] []",
    "EXPR [ (-2, _171) (-4294967296, _176) (-1, _177) (1, _595) 4294967297 ]",
    "EXPR [ (-1, _176) 0 ]",
    "EXPR [ (1, _172, _173) (2, _171) -2 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(171), Witness(172)), (-4, Witness(172), Witness(172))], linear_combinations: [(-3, Witness(171))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(178)), Simple(Witness(179))]",
    "BLACKBOX::RANGE [(_179, 32)] []",
    "EXPR [ (-2, _171, _172) (-1, _596) 0 ]",
    "EXPR [ (-4, _172, _172) (-1, _597) 0 ]",
    "EXPR [ (-3, _171) (-4294967296, _178) (-1, _179) (1, _596) (1, _597) 4294967298 ]",
    "EXPR [ (-1, _178) 0 ]",
    "EXPR [ (1, _0, _171) (5, _172) -5 ]",
    "EXPR [ (3, _171) (-1, _596) (-1, _597) -3 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(171), Witness(172)), (-7, Witness(172), Witness(172))], linear_combinations: [(-3, Witness(171))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(180)), Simple(Witness(181))]",
    "BLACKBOX::RANGE [(_181, 32)] []",
    "EXPR [ (-3, _171) (-4294967296, _180) (-1, _181) (1, _596) (5472060717959818805561601436314318772137091100104008585924551046643952123906, _597) 4294967298 ]",
    "EXPR [ (-1, _180) 0 ]",
    "EXPR [ (1, _0, _171) -5 ]",
    "EXPR [ (3, _171) (-1, _596) (-5472060717959818805561601436314318772137091100104008585924551046643952123906, _597) -3 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Array([Witness(182), Witness(183), Witness(184), Witness(185), Witness(186), Witness(187), Witness(188), Witness(189), Witness(190), Witness(191), Witness(192), Witness(193), Witness(194), Witness(195), Witness(196), Witness(197), Witness(198), Witness(199), Witness(200), Witness(201), Witness(202), Witness(203), Witness(204), Witness(205), Witness(206), Witness(207), Witness(208), Witness(209), Witness(210), Witness(211), Witness(212), Witness(213)])]",
    "BLACKBOX::RANGE [(_182, 8)] []",
    "BLACKBOX::RANGE [(_183, 8)] []",
    "BLACKBOX::RANGE [(_184, 8)] []",
    "BLACKBOX::RANGE [(_185, 8)] []",
    "BLACKBOX::RANGE [(_186, 8)] []",
    "BLACKBOX::RANGE [(_187, 8)] []",
    "BLACKBOX::RANGE [(_188, 8)] []",
    "BLACKBOX::RANGE [(_189, 8)] []",
    "BLACKBOX::RANGE [(_190, 8)] []",
    "BLACKBOX::RANGE [(_191, 8)] []",
    "BLACKBOX::RANGE [(_192, 8)] []",
    "BLACKBOX::RANGE [(_193, 8)] []",
    "BLACKBOX::RANGE [(_194, 8)] []",
    "BLACKBOX::RANGE [(_195, 8)] []",
    "BLACKBOX::RANGE [(_196, 8)] []",
    "BLACKBOX::RANGE [(_197, 8)] []",
    "BLACKBOX::RANGE [(_198, 8)] []",
    "BLACKBOX::RANGE [(_199, 8)] []",
    "BLACKBOX::RANGE [(_200, 8)] []",
    "BLACKBOX::RANGE [(_201, 8)] []",
    "BLACKBOX::RANGE [(_202, 8)] []",
    "BLACKBOX::RANGE [(_203, 8)] []",
    "BLACKBOX::RANGE [(_204, 8)] []",
    "BLACKBOX::RANGE [(_205, 8)] []",
    "BLACKBOX::RANGE [(_206, 8)] []",
    "BLACKBOX::RANGE [(_207, 8)] []",
    "BLACKBOX::RANGE [(_208, 8)] []",
    "BLACKBOX::RANGE [(_209, 8)] []",
    "BLACKBOX::RANGE [(_210, 8)] []",
    "BLACKBOX::RANGE [(_211, 8)] []",
    "BLACKBOX::RANGE [(_212, 8)] []",
    "BLACKBOX::RANGE [(_213, 8)] []",
    "EXPR [ (1, _0) (-1, _182) (-256, _183) (-65536, _184) (-16777216, _185) (-4294967296, _186) (-1099511627776, _187) (-281474976710656, _188) (-72057594037927936, _189) (-18446744073709551616, _190) (-4722366482869645213696, _191) (-1208925819614629174706176, _192) (-309485009821345068724781056, _193) (-79228162514264337593543950336, _194) (-20282409603651670423947251286016, _195) (-5192296858534827628530496329220096, _196) (-1329227995784915872903807060280344576, _197) (-340282366920938463463374607431768211456, _198) (-87112285931760246646623899502532662132736, _199) (-22300745198530623141535718272648361505980416, _200) (-5708990770823839524233143877797980545530986496, _201) (-1461501637330902918203684832716283019655932542976, _202) (-374144419156711147060143317175368453031918731001856, _203) (-95780971304118053647396689196894323976171195136475136, _204) (-24519928653854221733733552434404946937899825954937634816, _205) (-6277101735386680763835789423207666416102355444464034512896, _206) (-1606938044258990275541962092341162602522202993782792835301376, _207) (-411376139330301510538742295639337626245683966408394965837152256, _208) (-105312291668557186697918027683670432318895095400549111254310977536, _209) (-26959946667150639794667015087019630673637144422540572481103610249216, _210) (-6901746346790563787434755862277025452451108972170386555162524223799296, _211) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _212) (-452312848583266388373324160190187140051835877600158453279131187530910662656, _213) 0 ]",
    "INIT (id: 11, len: 32, witnesses: [_213, _212, _211, _210, _209, _208, _207, _206, _205, _204, _203, _202, _201, _200, _199, _198, _197, _196, _195, _194, _193, _192, _191, _190, _189, _188, _187, _186, _185, _184, _183, _182])",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: -48 })], outputs: [Simple(Witness(214))]",
    "EXPR [ (1, _213, _214) (-48, _214) (1, _215) -1 ]",
    "EXPR [ (1, _213, _215) (-48, _215) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(213))], q_c: 208 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(216)), Simple(Witness(217))]",
    "BLACKBOX::RANGE [(_216, 1)] []",
    "BLACKBOX::RANGE [(_217, 8)] []",
    "EXPR [ (1, _213) (-256, _216) (-1, _217) 208 ]",
    "EXPR [ (1, _215, _216) (-1, _216) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: -100 })], outputs: [Simple(Witness(218))]",
    "EXPR [ (1, _212, _218) (-100, _218) (1, _219) -1 ]",
    "EXPR [ (1, _212, _219) (-100, _219) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(212))], q_c: 156 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(220)), Simple(Witness(221))]",
    "BLACKBOX::RANGE [(_220, 1)] []",
    "BLACKBOX::RANGE [(_221, 8)] []",
    "EXPR [ (1, _212) (-256, _220) (-1, _221) 156 ]",
    "EXPR [ (-1, _220) (-1, _222) 1 ]",
    "EXPR [ (-1, _215, _219) (1, _215) (-1, _223) 0 ]",
    "EXPR [ (1, _222, _223) (-1, _223) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(211))], q_c: -78 })], outputs: [Simple(Witness(224))]",
    "EXPR [ (1, _211, _224) (-78, _224) (1, _225) -1 ]",
    "EXPR [ (1, _211, _225) (-78, _225) 0 ]",
    "EXPR [ (-1, _215, _223) (1, _215) (-1, _226) 0 ]",
    "EXPR [ (-1, _225) (-1, _227) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(211))], q_c: 178 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(228)), Simple(Witness(229))]",
    "BLACKBOX::RANGE [(_228, 1)] []",
    "BLACKBOX::RANGE [(_229, 8)] []",
    "EXPR [ (1, _211) (-256, _228) (-1, _229) 178 ]",
    "EXPR [ (-1, _228) (-1, _230) 1 ]",
    "EXPR [ (1, _226, _227) (-1, _231) 0 ]",
    "EXPR [ (1, _230, _231) (-1, _231) 0 ]",
    "EXPR [ (-1, _231) (-1, _232) 1 ]",
    "EXPR [ (1, _215, _223) (-1, _215) (-1, _233) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(210))], q_c: -114 })], outputs: [Simple(Witness(234))]",
    "EXPR [ (1, _210, _234) (-114, _234) (1, _235) -1 ]",
    "EXPR [ (1, _210, _235) (-114, _235) 0 ]",
    "EXPR [ (-1, _232, _233) (-1, _231) (-1, _236) 1 ]",
    "EXPR [ (-1, _235) (-1, _237) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(210))], q_c: 142 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(238)), Simple(Witness(239))]",
    "BLACKBOX::RANGE [(_238, 1)] []",
    "BLACKBOX::RANGE [(_239, 8)] []",
    "EXPR [ (1, _210) (-256, _238) (-1, _239) 142 ]",
    "EXPR [ (-1, _238) (-1, _240) 1 ]",
    "EXPR [ (1, _236, _237) (-1, _241) 0 ]",
    "EXPR [ (1, _240, _241) (-1, _241) 0 ]",
    "EXPR [ (-1, _241) (-1, _242) 1 ]",
    "EXPR [ (1, _232, _233) (1, _231) (-1, _243) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(209))], q_c: -225 })], outputs: [Simple(Witness(244))]",
    "EXPR [ (1, _209, _244) (-225, _244) (1, _245) -1 ]",
    "EXPR [ (1, _209, _245) (-225, _245) 0 ]",
    "EXPR [ (-1, _242, _243) (-1, _241) (-1, _246) 1 ]",
    "EXPR [ (-1, _245) (-1, _247) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(209))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(248)), Simple(Witness(249))]",
    "BLACKBOX::RANGE [(_248, 1)] []",
    "BLACKBOX::RANGE [(_249, 8)] []",
    "EXPR [ (1, _209) (-256, _248) (-1, _249) 31 ]",
    "EXPR [ (-1, _248) (-1, _250) 1 ]",
    "EXPR [ (1, _246, _247) (-1, _251) 0 ]",
    "EXPR [ (1, _250, _251) (-1, _251) 0 ]",
    "EXPR [ (-1, _251) (-1, _252) 1 ]",
    "EXPR [ (1, _242, _243) (1, _241) (-1, _253) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(208))], q_c: -49 })], outputs: [Simple(Witness(254))]",
    "EXPR [ (1, _208, _254) (-49, _254) (1, _255) -1 ]",
    "EXPR [ (1, _208, _255) (-49, _255) 0 ]",
    "EXPR [ (-1, _252, _253) (-1, _251) (-1, _256) 1 ]",
    "EXPR [ (-1, _255) (-1, _257) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(208))], q_c: 207 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(258)), Simple(Witness(259))]",
    "BLACKBOX::RANGE [(_258, 1)] []",
    "BLACKBOX::RANGE [(_259, 8)] []",
    "EXPR [ (1, _208) (-256, _258) (-1, _259) 207 ]",
    "EXPR [ (-1, _258) (-1, _260) 1 ]",
    "EXPR [ (1, _256, _257) (-1, _261) 0 ]",
    "EXPR [ (1, _260, _261) (-1, _261) 0 ]",
    "EXPR [ (-1, _261) (-1, _262) 1 ]",
    "EXPR [ (1, _252, _253) (1, _251) (-1, _263) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: -160 })], outputs: [Simple(Witness(264))]",
    "EXPR [ (1, _207, _264) (-160, _264) (1, _265) -1 ]",
    "EXPR [ (1, _207, _265) (-160, _265) 0 ]",
    "EXPR [ (-1, _262, _263) (-1, _261) (-1, _266) 1 ]",
    "EXPR [ (-1, _265) (-1, _267) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(207))], q_c: 96 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(268)), Simple(Witness(269))]",
    "BLACKBOX::RANGE [(_268, 1)] []",
    "BLACKBOX::RANGE [(_269, 8)] []",
    "EXPR [ (1, _207) (-256, _268) (-1, _269) 96 ]",
    "EXPR [ (-1, _268) (-1, _270) 1 ]",
    "EXPR [ (1, _266, _267) (-1, _271) 0 ]",
    "EXPR [ (1, _270, _271) (-1, _271) 0 ]",
    "EXPR [ (-1, _271) (-1, _272) 1 ]",
    "EXPR [ (1, _262, _263) (1, _261) (-1, _273) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(206))], q_c: -41 })], outputs: [Simple(Witness(274))]",
    "EXPR [ (1, _206, _274) (-41, _274) (1, _275) -1 ]",
    "EXPR [ (1, _206, _275) (-41, _275) 0 ]",
    "EXPR [ (-1, _272, _273) (-1, _271) (-1, _276) 1 ]",
    "EXPR [ (-1, _275) (-1, _277) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(206))], q_c: 215 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(278)), Simple(Witness(279))]",
    "BLACKBOX::RANGE [(_278, 1)] []",
    "BLACKBOX::RANGE [(_279, 8)] []",
    "EXPR [ (1, _206) (-256, _278) (-1, _279) 215 ]",
    "EXPR [ (-1, _278) (-1, _280) 1 ]",
    "EXPR [ (1, _276, _277) (-1, _281) 0 ]",
    "EXPR [ (1, _280, _281) (-1, _281) 0 ]",
    "EXPR [ (-1, _281) (-1, _282) 1 ]",
    "EXPR [ (1, _272, _273) (1, _271) (-1, _283) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(205))], q_c: -184 })], outputs: [Simple(Witness(284))]",
    "EXPR [ (1, _205, _284) (-184, _284) (1, _285) -1 ]",
    "EXPR [ (1, _205, _285) (-184, _285) 0 ]",
    "EXPR [ (-1, _282, _283) (-1, _281) (-1, _286) 1 ]",
    "EXPR [ (-1, _285) (-1, _287) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(205))], q_c: 72 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(288)), Simple(Witness(289))]",
    "BLACKBOX::RANGE [(_288, 1)] []",
    "BLACKBOX::RANGE [(_289, 8)] []",
    "EXPR [ (1, _205) (-256, _288) (-1, _289) 72 ]",
    "EXPR [ (-1, _288) (-1, _290) 1 ]",
    "EXPR [ (1, _286, _287) (-1, _291) 0 ]",
    "EXPR [ (1, _290, _291) (-1, _291) 0 ]",
    "EXPR [ (-1, _291) (-1, _292) 1 ]",
    "EXPR [ (1, _282, _283) (1, _281) (-1, _293) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(204))], q_c: -80 })], outputs: [Simple(Witness(294))]",
    "EXPR [ (1, _204, _294) (-80, _294) (1, _295) -1 ]",
    "EXPR [ (1, _204, _295) (-80, _295) 0 ]",
    "EXPR [ (-1, _292, _293) (-1, _291) (-1, _296) 1 ]",
    "EXPR [ (-1, _295) (-1, _297) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(204))], q_c: 176 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(298)), Simple(Witness(299))]",
    "BLACKBOX::RANGE [(_298, 1)] []",
    "BLACKBOX::RANGE [(_299, 8)] []",
    "EXPR [ (1, _204) (-256, _298) (-1, _299) 176 ]",
    "EXPR [ (-1, _298) (-1, _300) 1 ]",
    "EXPR [ (1, _296, _297) (-1, _301) 0 ]",
    "EXPR [ (1, _300, _301) (-1, _301) 0 ]",
    "EXPR [ (-1, _301) (-1, _302) 1 ]",
    "EXPR [ (1, _292, _293) (1, _291) (-1, _303) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(203))], q_c: -69 })], outputs: [Simple(Witness(304))]",
    "EXPR [ (1, _203, _304) (-69, _304) (1, _305) -1 ]",
    "EXPR [ (1, _203, _305) (-69, _305) 0 ]",
    "EXPR [ (-1, _302, _303) (-1, _301) (-1, _306) 1 ]",
    "EXPR [ (-1, _305) (-1, _307) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(203))], q_c: 187 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(308)), Simple(Witness(309))]",
    "BLACKBOX::RANGE [(_308, 1)] []",
    "BLACKBOX::RANGE [(_309, 8)] []",
    "EXPR [ (1, _203) (-256, _308) (-1, _309) 187 ]",
    "EXPR [ (-1, _308) (-1, _310) 1 ]",
    "EXPR [ (1, _306, _307) (-1, _311) 0 ]",
    "EXPR [ (1, _310, _311) (-1, _311) 0 ]",
    "EXPR [ (-1, _311) (-1, _312) 1 ]",
    "EXPR [ (1, _302, _303) (1, _301) (-1, _313) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(202))], q_c: -182 })], outputs: [Simple(Witness(314))]",
    "EXPR [ (1, _202, _314) (-182, _314) (1, _315) -1 ]",
    "EXPR [ (1, _202, _315) (-182, _315) 0 ]",
    "EXPR [ (-1, _312, _313) (-1, _311) (-1, _316) 1 ]",
    "EXPR [ (-1, _315) (-1, _317) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(202))], q_c: 74 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(318)), Simple(Witness(319))]",
    "BLACKBOX::RANGE [(_318, 1)] []",
    "BLACKBOX::RANGE [(_319, 8)] []",
    "EXPR [ (1, _202) (-256, _318) (-1, _319) 74 ]",
    "EXPR [ (-1, _318) (-1, _320) 1 ]",
    "EXPR [ (1, _316, _317) (-1, _321) 0 ]",
    "EXPR [ (1, _320, _321) (-1, _321) 0 ]",
    "EXPR [ (-1, _321) (-1, _322) 1 ]",
    "EXPR [ (1, _312, _313) (1, _311) (-1, _323) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(201))], q_c: -129 })], outputs: [Simple(Witness(324))]",
    "EXPR [ (1, _201, _324) (-129, _324) (1, _325) -1 ]",
    "EXPR [ (1, _201, _325) (-129, _325) 0 ]",
    "EXPR [ (-1, _322, _323) (-1, _321) (-1, _326) 1 ]",
    "EXPR [ (-1, _325) (-1, _327) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(201))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(328)), Simple(Witness(329))]",
    "BLACKBOX::RANGE [(_328, 1)] []",
    "BLACKBOX::RANGE [(_329, 8)] []",
    "EXPR [ (1, _201) (-256, _328) (-1, _329) 127 ]",
    "EXPR [ (-1, _328) (-1, _330) 1 ]",
    "EXPR [ (1, _326, _327) (-1, _331) 0 ]",
    "EXPR [ (1, _330, _331) (-1, _331) 0 ]",
    "EXPR [ (-1, _331) (-1, _332) 1 ]",
    "EXPR [ (1, _322, _323) (1, _321) (-1, _333) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(200))], q_c: -129 })], outputs: [Simple(Witness(334))]",
    "EXPR [ (1, _200, _334) (-129, _334) (1, _335) -1 ]",
    "EXPR [ (1, _200, _335) (-129, _335) 0 ]",
    "EXPR [ (-1, _332, _333) (-1, _331) (-1, _336) 1 ]",
    "EXPR [ (-1, _335) (-1, _337) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(200))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(338)), Simple(Witness(339))]",
    "BLACKBOX::RANGE [(_338, 1)] []",
    "BLACKBOX::RANGE [(_339, 8)] []",
    "EXPR [ (1, _200) (-256, _338) (-1, _339) 127 ]",
    "EXPR [ (-1, _338) (-1, _340) 1 ]",
    "EXPR [ (1, _336, _337) (-1, _341) 0 ]",
    "EXPR [ (1, _340, _341) (-1, _341) 0 ]",
    "EXPR [ (-1, _341) (-1, _342) 1 ]",
    "EXPR [ (1, _332, _333) (1, _331) (-1, _343) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(199))], q_c: -88 })], outputs: [Simple(Witness(344))]",
    "EXPR [ (1, _199, _344) (-88, _344) (1, _345) -1 ]",
    "EXPR [ (1, _199, _345) (-88, _345) 0 ]",
    "EXPR [ (-1, _342, _343) (-1, _341) (-1, _346) 1 ]",
    "EXPR [ (-1, _345) (-1, _347) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(199))], q_c: 168 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(348)), Simple(Witness(349))]",
    "BLACKBOX::RANGE [(_348, 1)] []",
    "BLACKBOX::RANGE [(_349, 8)] []",
    "EXPR [ (1, _199) (-256, _348) (-1, _349) 168 ]",
    "EXPR [ (-1, _348) (-1, _350) 1 ]",
    "EXPR [ (1, _346, _347) (-1, _351) 0 ]",
    "EXPR [ (1, _350, _351) (-1, _351) 0 ]",
    "EXPR [ (-1, _351) (-1, _352) 1 ]",
    "EXPR [ (1, _342, _343) (1, _341) (-1, _353) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(198))], q_c: -93 })], outputs: [Simple(Witness(354))]",
    "EXPR [ (1, _198, _354) (-93, _354) (1, _355) -1 ]",
    "EXPR [ (1, _198, _355) (-93, _355) 0 ]",
    "EXPR [ (-1, _352, _353) (-1, _351) (-1, _356) 1 ]",
    "EXPR [ (-1, _355) (-1, _357) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(198))], q_c: 163 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(358)), Simple(Witness(359))]",
    "BLACKBOX::RANGE [(_358, 1)] []",
    "BLACKBOX::RANGE [(_359, 8)] []",
    "EXPR [ (1, _198) (-256, _358) (-1, _359) 163 ]",
    "EXPR [ (-1, _358) (-1, _360) 1 ]",
    "EXPR [ (1, _356, _357) (-1, _361) 0 ]",
    "EXPR [ (1, _360, _361) (-1, _361) 0 ]",
    "EXPR [ (-1, _361) (-1, _362) 1 ]",
    "EXPR [ (1, _352, _353) (1, _351) (-1, _363) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(197))], q_c: -40 })], outputs: [Simple(Witness(364))]",
    "EXPR [ (1, _197, _364) (-40, _364) (1, _365) -1 ]",
    "EXPR [ (1, _197, _365) (-40, _365) 0 ]",
    "EXPR [ (-1, _362, _363) (-1, _361) (-1, _366) 1 ]",
    "EXPR [ (-1, _365) (-1, _367) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(197))], q_c: 216 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(368)), Simple(Witness(369))]",
    "BLACKBOX::RANGE [(_368, 1)] []",
    "BLACKBOX::RANGE [(_369, 8)] []",
    "EXPR [ (1, _197) (-256, _368) (-1, _369) 216 ]",
    "EXPR [ (-1, _368) (-1, _370) 1 ]",
    "EXPR [ (1, _366, _367) (-1, _371) 0 ]",
    "EXPR [ (1, _370, _371) (-1, _371) 0 ]",
    "EXPR [ (-1, _371) (-1, _372) 1 ]",
    "EXPR [ (1, _362, _363) (1, _361) (-1, _373) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(196))], q_c: -51 })], outputs: [Simple(Witness(374))]",
    "EXPR [ (1, _196, _374) (-51, _374) (1, _375) -1 ]",
    "EXPR [ (1, _196, _375) (-51, _375) 0 ]",
    "EXPR [ (-1, _372, _373) (-1, _371) (-1, _376) 1 ]",
    "EXPR [ (-1, _375) (-1, _377) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(196))], q_c: 205 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(378)), Simple(Witness(379))]",
    "BLACKBOX::RANGE [(_378, 1)] []",
    "BLACKBOX::RANGE [(_379, 8)] []",
    "EXPR [ (1, _196) (-256, _378) (-1, _379) 205 ]",
    "EXPR [ (-1, _378) (-1, _380) 1 ]",
    "EXPR [ (1, _376, _377) (-1, _381) 0 ]",
    "EXPR [ (1, _380, _381) (-1, _381) 0 ]",
    "EXPR [ (-1, _381) (-1, _382) 1 ]",
    "EXPR [ (1, _372, _373) (1, _371) (-1, _383) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(195))], q_c: -232 })], outputs: [Simple(Witness(384))]",
    "EXPR [ (1, _195, _384) (-232, _384) (1, _385) -1 ]",
    "EXPR [ (1, _195, _385) (-232, _385) 0 ]",
    "EXPR [ (-1, _382, _383) (-1, _381) (-1, _386) 1 ]",
    "EXPR [ (-1, _385) (-1, _387) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(195))], q_c: 24 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(388)), Simple(Witness(389))]",
    "BLACKBOX::RANGE [(_388, 1)] []",
    "BLACKBOX::RANGE [(_389, 8)] []",
    "EXPR [ (1, _195) (-256, _388) (-1, _389) 24 ]",
    "EXPR [ (-1, _388) (-1, _390) 1 ]",
    "EXPR [ (1, _386, _387) (-1, _391) 0 ]",
    "EXPR [ (1, _390, _391) (-1, _391) 0 ]",
    "EXPR [ (-1, _391) (-1, _392) 1 ]",
    "EXPR [ (1, _382, _383) (1, _381) (-1, _393) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(194))], q_c: -72 })], outputs: [Simple(Witness(394))]",
    "EXPR [ (1, _194, _394) (-72, _394) (1, _395) -1 ]",
    "EXPR [ (1, _194, _395) (-72, _395) 0 ]",
    "EXPR [ (-1, _392, _393) (-1, _391) (-1, _396) 1 ]",
    "EXPR [ (-1, _395) (-1, _397) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(194))], q_c: 184 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(398)), Simple(Witness(399))]",
    "BLACKBOX::RANGE [(_398, 1)] []",
    "BLACKBOX::RANGE [(_399, 8)] []",
    "EXPR [ (1, _194) (-256, _398) (-1, _399) 184 ]",
    "EXPR [ (-1, _398) (-1, _400) 1 ]",
    "EXPR [ (1, _396, _397) (-1, _401) 0 ]",
    "EXPR [ (1, _400, _401) (-1, _401) 0 ]",
    "EXPR [ (-1, _401) (-1, _402) 1 ]",
    "EXPR [ (1, _392, _393) (1, _391) (-1, _403) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(193))], q_c: -121 })], outputs: [Simple(Witness(404))]",
    "EXPR [ (1, _193, _404) (-121, _404) (1, _405) -1 ]",
    "EXPR [ (1, _193, _405) (-121, _405) 0 ]",
    "EXPR [ (-1, _402, _403) (-1, _401) (-1, _406) 1 ]",
    "EXPR [ (-1, _405) (-1, _407) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(193))], q_c: 135 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(408)), Simple(Witness(409))]",
    "BLACKBOX::RANGE [(_408, 1)] []",
    "BLACKBOX::RANGE [(_409, 8)] []",
    "EXPR [ (1, _193) (-256, _408) (-1, _409) 135 ]",
    "EXPR [ (-1, _408) (-1, _410) 1 ]",
    "EXPR [ (1, _406, _407) (-1, _411) 0 ]",
    "EXPR [ (1, _410, _411) (-1, _411) 0 ]",
    "EXPR [ (-1, _411) (-1, _412) 1 ]",
    "EXPR [ (1, _402, _403) (1, _401) (-1, _413) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(192))], q_c: -185 })], outputs: [Simple(Witness(414))]",
    "EXPR [ (1, _192, _414) (-185, _414) (1, _415) -1 ]",
    "EXPR [ (1, _192, _415) (-185, _415) 0 ]",
    "EXPR [ (-1, _412, _413) (-1, _411) (-1, _416) 1 ]",
    "EXPR [ (-1, _415) (-1, _417) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(192))], q_c: 71 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(418)), Simple(Witness(419))]",
    "BLACKBOX::RANGE [(_418, 1)] []",
    "BLACKBOX::RANGE [(_419, 8)] []",
    "EXPR [ (1, _192) (-256, _418) (-1, _419) 71 ]",
    "EXPR [ (-1, _418) (-1, _420) 1 ]",
    "EXPR [ (1, _416, _417) (-1, _421) 0 ]",
    "EXPR [ (1, _420, _421) (-1, _421) 0 ]",
    "EXPR [ (-1, _421) (-1, _422) 1 ]",
    "EXPR [ (1, _412, _413) (1, _411) (-1, _423) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(191))], q_c: -112 })], outputs: [Simple(Witness(424))]",
    "EXPR [ (1, _191, _424) (-112, _424) (1, _425) -1 ]",
    "EXPR [ (1, _191, _425) (-112, _425) 0 ]",
    "EXPR [ (-1, _422, _423) (-1, _421) (-1, _426) 1 ]",
    "EXPR [ (-1, _425) (-1, _427) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(191))], q_c: 144 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(428)), Simple(Witness(429))]",
    "BLACKBOX::RANGE [(_428, 1)] []",
    "BLACKBOX::RANGE [(_429, 8)] []",
    "EXPR [ (1, _191) (-256, _428) (-1, _429) 144 ]",
    "EXPR [ (-1, _428) (-1, _430) 1 ]",
    "EXPR [ (1, _426, _427) (-1, _431) 0 ]",
    "EXPR [ (1, _430, _431) (-1, _431) 0 ]",
    "EXPR [ (-1, _431) (-1, _432) 1 ]",
    "EXPR [ (1, _422, _423) (1, _421) (-1, _433) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(190))], q_c: -145 })], outputs: [Simple(Witness(434))]",
    "EXPR [ (1, _190, _434) (-145, _434) (1, _435) -1 ]",
    "EXPR [ (1, _190, _435) (-145, _435) 0 ]",
    "EXPR [ (-1, _432, _433) (-1, _431) (-1, _436) 1 ]",
    "EXPR [ (-1, _435) (-1, _437) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(190))], q_c: 111 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(438)), Simple(Witness(439))]",
    "BLACKBOX::RANGE [(_438, 1)] []",
    "BLACKBOX::RANGE [(_439, 8)] []",
    "EXPR [ (1, _190) (-256, _438) (-1, _439) 111 ]",
    "EXPR [ (-1, _438) (-1, _440) 1 ]",
    "EXPR [ (1, _436, _437) (-1, _441) 0 ]",
    "EXPR [ (1, _440, _441) (-1, _441) 0 ]",
    "EXPR [ (-1, _441) (-1, _442) 1 ]",
    "EXPR [ (1, _432, _433) (1, _431) (-1, _443) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(189))], q_c: -67 })], outputs: [Simple(Witness(444))]",
    "EXPR [ (1, _189, _444) (-67, _444) (1, _445) -1 ]",
    "EXPR [ (1, _189, _445) (-67, _445) 0 ]",
    "EXPR [ (-1, _442, _443) (-1, _441) (-1, _446) 1 ]",
    "EXPR [ (-1, _445) (-1, _447) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(189))], q_c: 189 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(448)), Simple(Witness(449))]",
    "BLACKBOX::RANGE [(_448, 1)] []",
    "BLACKBOX::RANGE [(_449, 8)] []",
    "EXPR [ (1, _189) (-256, _448) (-1, _449) 189 ]",
    "EXPR [ (-1, _448) (-1, _450) 1 ]",
    "EXPR [ (1, _446, _447) (-1, _451) 0 ]",
    "EXPR [ (1, _450, _451) (-1, _451) 0 ]",
    "EXPR [ (-1, _451) (-1, _452) 1 ]",
    "EXPR [ (1, _442, _443) (1, _441) (-1, _453) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(188))], q_c: -225 })], outputs: [Simple(Witness(454))]",
    "EXPR [ (1, _188, _454) (-225, _454) (1, _455) -1 ]",
    "EXPR [ (1, _188, _455) (-225, _455) 0 ]",
    "EXPR [ (-1, _452, _453) (-1, _451) (-1, _456) 1 ]",
    "EXPR [ (-1, _455) (-1, _457) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(188))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(458)), Simple(Witness(459))]",
    "BLACKBOX::RANGE [(_458, 1)] []",
    "BLACKBOX::RANGE [(_459, 8)] []",
    "EXPR [ (1, _188) (-256, _458) (-1, _459) 31 ]",
    "EXPR [ (-1, _458) (-1, _460) 1 ]",
    "EXPR [ (1, _456, _457) (-1, _461) 0 ]",
    "EXPR [ (1, _460, _461) (-1, _461) 0 ]",
    "EXPR [ (-1, _461) (-1, _462) 1 ]",
    "EXPR [ (1, _452, _453) (1, _451) (-1, _463) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(187))], q_c: -245 })], outputs: [Simple(Witness(464))]",
    "EXPR [ (1, _187, _464) (-245, _464) (1, _465) -1 ]",
    "EXPR [ (1, _187, _465) (-245, _465) 0 ]",
    "EXPR [ (-1, _462, _463) (-1, _461) (-1, _466) 1 ]",
    "EXPR [ (-1, _465) (-1, _467) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(187))], q_c: 11 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(468)), Simple(Witness(469))]",
    "BLACKBOX::RANGE [(_468, 1)] []",
    "BLACKBOX::RANGE [(_469, 8)] []",
    "EXPR [ (1, _187) (-256, _468) (-1, _469) 11 ]",
    "EXPR [ (-1, _468) (-1, _470) 1 ]",
    "EXPR [ (1, _466, _467) (-1, _471) 0 ]",
    "EXPR [ (1, _470, _471) (-1, _471) 0 ]",
    "EXPR [ (-1, _471) (-1, _472) 1 ]",
    "EXPR [ (1, _462, _463) (1, _461) (-1, _473) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(186))], q_c: -147 })], outputs: [Simple(Witness(474))]",
    "EXPR [ (1, _186, _474) (-147, _474) (1, _475) -1 ]",
    "EXPR [ (1, _186, _475) (-147, _475) 0 ]",
    "EXPR [ (-1, _472, _473) (-1, _471) (-1, _476) 1 ]",
    "EXPR [ (-1, _475) (-1, _477) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(186))], q_c: 109 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(478)), Simple(Witness(479))]",
    "BLACKBOX::RANGE [(_478, 1)] []",
    "BLACKBOX::RANGE [(_479, 8)] []",
    "EXPR [ (1, _186) (-256, _478) (-1, _479) 109 ]",
    "EXPR [ (-1, _478) (-1, _480) 1 ]",
    "EXPR [ (1, _476, _477) (-1, _481) 0 ]",
    "EXPR [ (1, _480, _481) (-1, _481) 0 ]",
    "EXPR [ (-1, _481) (-1, _482) 1 ]",
    "EXPR [ (1, _472, _473) (1, _471) (-1, _483) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(185))], q_c: -240 })], outputs: [Simple(Witness(484))]",
    "EXPR [ (1, _185, _484) (-240, _484) (1, _485) -1 ]",
    "EXPR [ (1, _185, _485) (-240, _485) 0 ]",
    "EXPR [ (-1, _482, _483) (-1, _481) (-1, _486) 1 ]",
    "EXPR [ (-1, _485) (-1, _487) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(185))], q_c: 16 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(488)), Simple(Witness(489))]",
    "BLACKBOX::RANGE [(_488, 1)] []",
    "BLACKBOX::RANGE [(_489, 8)] []",
    "EXPR [ (1, _185) (-256, _488) (-1, _489) 16 ]",
    "EXPR [ (-1, _488) (-1, _490) 1 ]",
    "EXPR [ (1, _486, _487) (-1, _491) 0 ]",
    "EXPR [ (1, _490, _491) (-1, _491) 0 ]",
    "EXPR [ (-1, _491) (-1, _492) 1 ]",
    "EXPR [ (1, _482, _483) (1, _481) (-1, _493) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(184))], q_c: 0 })], outputs: [Simple(Witness(494))]",
    "EXPR [ (1, _184, _494) (1, _495) -1 ]",
    "EXPR [ (1, _184, _495) 0 ]",
    "EXPR [ (-1, _492, _493) (-1, _491) (-1, _496) 1 ]",
    "EXPR [ (-1, _495) (-1, _497) 1 ]",
    "EXPR [ (-1, _496, _497) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(183))], q_c: 0 })], outputs: [Simple(Witness(498))]",
    "EXPR [ (1, _183, _498) (1, _499) -1 ]",
    "EXPR [ (1, _183, _499) 0 ]",
    "EXPR [ (1, _496, _499) (-1, _496) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(182))], q_c: -1 })], outputs: [Simple(Witness(500))]",
    "EXPR [ (1, _182, _500) (-1, _500) (1, _501) -1 ]",
    "EXPR [ (1, _182, _501) (-1, _501) 0 ]",
    "EXPR [ (-1, _496, _501) (1, _496) (-1, _502) 0 ]",
    "EXPR [ (1, _182, _502) 0 ]",
    "EXPR [ (-1, _502) (-1, _503) 1 ]",
    "EXPR [ (1, _492, _493) (1, _491) (-1, _504) 0 ]",
    "EXPR [ (1, _503, _504) (1, _502) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(505))]",
    "EXPR [ (1, _0, _505) (1, _506) -1 ]",
    "EXPR [ (1, _0, _506) 0 ]",
    "MEM (id: 11, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _507) 0 ]) ",
    "EXPR [ (1, _506, _507) (-10, _506) (-1, _508) 10 ]",
    "MEM (id: 11, write EXPR [ (1, _508) 0 ] at: EXPR [ (1, _9) 0 ]) ",
    "EXPR [ (-1, _509) 10 ]",
    "INIT (id: 12, len: 4, witnesses: [_9, _9, _509, _11])",
    "EXPR [ (-3, _506) (-1, _510) 3 ]",
    "MEM (id: 12, read at: EXPR [ (1, _510) 0 ], value: EXPR [ (1, _511) 0 ]) ",
    "EXPR [ (1, _506, _511) (-5, _506) (-1, _512) 5 ]",
    "MEM (id: 12, write EXPR [ (1, _512) 0 ] at: EXPR [ (1, _510) 0 ]) ",
    "MEM (id: 12, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _513) 0 ]) ",
    "EXPR [ (-1, _506) (-1, _514) 1 ]",
    "MEM (id: 12, read at: EXPR [ (1, _514) 0 ], value: EXPR [ (1, _515) 0 ]) ",
    "EXPR [ (-2, _506) (-1, _516) 2 ]",
    "MEM (id: 12, read at: EXPR [ (1, _516) 0 ], value: EXPR [ (1, _517) 0 ]) ",
    "EXPR [ (-3, _506) (-1, _518) 3 ]",
    "MEM (id: 12, read at: EXPR [ (1, _518) 0 ], value: EXPR [ (1, _519) 0 ]) ",
    "INIT (id: 13, len: 5, witnesses: [_9, _9, _509, _11, _509])",
    "EXPR [ (-4, _506) (-1, _520) 4 ]",
    "MEM (id: 13, read at: EXPR [ (1, _520) 0 ], value: EXPR [ (1, _521) 0 ]) ",
    "EXPR [ (1, _506, _521) (-10, _506) (-1, _522) 10 ]",
    "MEM (id: 13, write EXPR [ (1, _522) 0 ] at: EXPR [ (1, _520) 0 ]) ",
    "MEM (id: 13, read at: EXPR [ (1, _9) 0 ], value: EXPR [ (1, _523) 0 ]) ",
    "EXPR [ (-1, _506) (-1, _524) 1 ]",
    "MEM (id: 13, read at: EXPR [ (1, _524) 0 ], value: EXPR [ (1, _525) 0 ]) ",
    "EXPR [ (-2, _506) (-1, _526) 2 ]",
    "MEM (id: 13, read at: EXPR [ (1, _526) 0 ], value: EXPR [ (1, _527) 0 ]) ",
    "EXPR [ (-3, _506) (-1, _528) 3 ]",
    "MEM (id: 13, read at: EXPR [ (1, _528) 0 ], value: EXPR [ (1, _529) 0 ]) ",
    "EXPR [ (-4, _506) (-1, _530) 4 ]",
    "MEM (id: 13, read at: EXPR [ (1, _530) 0 ], value: EXPR [ (1, _531) 0 ]) ",
    "EXPR [ (2, _506, _506) (-3, _506) 0 ]",
    "EXPR [ (-10, _506) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "pZvNbtw4FkbfpdZeiOT9IftVBoPASZyGAcMJnKSBQdDvPrwlHipZSAiYje8Xu+qEuuKhKJX94/bx6f33v989v376/PX2139+3N6/Pb+8PP/97uXzh8dvz59f+3d//Ptw45/vvr09PfVv3X76eX/Xl8e3p9dvt79ev7+8PNz+eXz5fn/R1y+Pr/f67fGt/3R7uD29fuy1Az89vzxF+vfhePd2/tZcdLw5q8+362+/P5nmAUhW0xkhX4ygaWEIzeWMUM4JZTPGULZ6ehRyThCtMgiibVsh2DYJltLKUaSN81hSsiVCOQiy1MlkMgm1nRHaRR/aHIM00SWCt0loS0eRtzkfcqpLhHIQzo/ikmA6Ce10DOliSukxCM3iS4gy55SWtHQcfS5yHCX7EkEOgi6dz+JzVsp23oiLSaVSmFQq5yf0EmHbRFiWNYQcCFtE1DkprC2dD8lzlZCytM6IHgQrSwT3SWhLq6Vu0y9NbYkwp0RRP+1DrhcnozUQtm1LCNuyToRsawg7EHUNkeacsFR0bRRNJmJLa6OwYxS+tFppnefUtiWCpYNQ8hJBbBJsWyIc653VpeuXH1dAX9tL+LGX8LW9hOsxhnpKiIvD6YQ4FDXVsoawOhGro2gT0QVbQlixidBtDXFYfrHRvka0ifBt6ZzWjb16qeW8FVeS18S06HEJ4du8Y/DNFhFtItL5QnGJSLObnrelK3HVuTOqtkRoc16VpktrzXEJk+18N6B60QjN+OFafA0xVzzX8/uOa4Qco1BdQliao7C8NgqTOa8uRL9GWJuIumKpbHKcU9Ole/I6V/9tOz0MuxrEsaWQdL7jtj+/K7c/vy2/PpB5T9yjriFamoiWlxB5LpuSc11DTEMk++nV1Lc/vru/RvzW7f31gbSjF62sIaodiLaE6I9bQJS8iDhELfV0Xrj98UOCS8TvPSS4PBDZ5gSXbW2Cl3k57Yi1Cd7NmIjz3cnV00yfTzuSn5/TerF01m0i6nb+mKCWq3M6V1/N7bgm993SL4iLdc98tqLfTNRTxNUoLPt80vDTPeEqQsoawuvxvGMNcWwuelw7kDovIz2en5HLeTG3ah2W16bW3Pf2QaSl+T0f9ye38+e7F62oOTE5a866hph3yDWfH8c1ok1ESWuIUmY3+zq8hrADcf4I6RrRZjv7BnwJIcknoqz1oj8TnQitawjPE1F/7cV/+78ePzy//fLh123rk/DhlvpLHm75/rXcv0pfsx5uev9q96+pv7QfYuqv7YtB6i+OzVAqo8qo/S1xSU4Ws7tXD0F7rX1DG/9T22veRk2j5lHLqDKqjmqj+qiDlwevDF4ZvDJ4ZfDK4JXg9XEWG9VHHbzS9n/LNmoaNY9aRpVRB08GTwZP6qiDp4Ong6eDp4Onwet9Ux3VRvVR66htr7aNmkbNo5ZRB88GzwbPBs8GzwbPB88HzwfPB8+D15dfD16fHx68Pis8eP08e41Pq3pte63bqCnuXnrNo5bxfRlVR7VRfdTBq4PXBq+lUfOowev9azKqjmr7/9d81Dq+3/baP+cjJEImFIIQlGAEJ1QC5AQ5QU6QE+QEOUFOkBPkBDlBzpAz5Aw5Q86QM+QMOUPOkDPkArlALpAL5AI5HCoSwQhOqIQ2Qoi0h0TIhEIQAmSBLJAFskBWyApZIStkhayQFbJCVsgK2SAbZINskEOwuI6nMCx2FSkUK7HkhWMl1ryQLB6eprBMtlgNt7jXiZAImVAIEhvxCBp76AgWN98ROlnuq2onx3OrFL7dQwi3h0TIhEKQ2MxGUIIRnFAJQY5hhHoaBxjuaRxOyLeHQhBCkGOEIeAenB9VQttDDgf3kAiZUAhCGOS8GcHjM4oIldBGCAf3kAiZUAhCUIIRICfICXKGnCFnyBlyhpwhZ8jhYPyiRA4H42FyDgfvIRzcQ3DiAMO4PSjBCE4ITo3QRgjj9pAIMcLoYRjnJYIQlGAEJ1RCJ8fuPYdxHiMM4+IJQg7j9lAIQtDYIUfo5Hq/lHdyvb+9EtoIYdweEiETCkEISjACZINskB2yQ3bIDtkhO2SH7JAdskOukCvkCrlCrpAr5Aq5Qq6QK+QGuUEO42qc7jBuD0IIcpzlMG4PTqiEtocSxsW7Shi3h0wovEYISjCCEyoBcoKcICfIqRCEADlBTpAT5AQ5jNtDImQCY86Qw7g9GMEJlQC5QC6QC+QCudCNwpgLYy6MuUAOB+9B6IbQDaEbAlkgC2SBLJCFbghjVsasjFkhK31WuqF0Q+mGQlbICtkgG2SjG8aYjTEbYzbIRp+NbhjdcLrhkB2yQ3bIDtnphjNmZ8zOmCvkSp8r3ah0o9KNCrlCrpAr5Aq50Y3GmBtjbowZB0ujz41uNLrR6AYOyrYREiETCkEISjCCEwZZttFnwUHBQcFBSZATZBwUHBQcFBwUHBQcFByUDDkXghCUYATIGTIOCg4KDgoOCg4KDgoOSoFcnEA3cFBwUASyQMZBwUHBQcFBwUHBQcFBUchKn3FQcFBwUBSyQsZBwUHBQcFBwUHBQcFBMchGn3FQcFBwUAyyQ8ZBwUHBQcFBwUHBQcFBcchOn3FQcFBwUCrkChkHBQcFBwUHBQcFBwUHheugcB0UHBQcFBwUroPCdVBwUHFQcVBxUHFQcVBxULdB1s0JlTC6oTioCXKCjIOKg4qDioOKg4qDioOaIedEyIRCEALkDBkHFQcVBxUHFQcVBxUHtUAuSqAbOKg4qAWyQMZBxUHFQcVBxUHFQcVBFchCn3FQcVBxUBWyQsZBxUHFQcVBxUHFQcVBNchGn3FQcVBxUA2yQcZBxUHFQcVBxUHFQcVBdchOn3FQcVBxUCvkChkHFQcVBxUHFQcVBxUHtUFu9BkHFQcVB5W9qLIXVRxUHFQcNBw0HDQcNBy0bZBtU4IRnFAJkBNkHDQcNBw0HDQcNBw0HLQEOY0+Gw4aDhoOGntRy5Bx0HDQcNBw0HDQcNBw0ArkUgh0AwcNB429qBXIOGg4aDhoOGg4aDhoOGgCWegzDhoOGg4ae1FTyDhoOGg4aDhoOGg4aDhoBtnoMw4aDhoOGntRM8g4aDhoOGg4aDhoOGg4aA7Z6TMOGg4aDhp7UauQcdBw0HDQcNBw0HDQcNAq5EqfcdBw0HDQ2IsaDhrXQeM6aDho7EWtDbJzP+g46DjoOOhcBz0cjA9KPByMX6bwcHAPldDJ8YsBHg7uIRE6OX491cPBPQhBCUZwQiW0EcLBPSQC5Aw5Qw4H4zNtDwf34IRKaCOEg3tIhEwoBCFALpAL5AI5HGzR3nAw3T+T/+fx7fnx/cvT19v9T48+fX/98NNfIn373xd+wt8qfXn7/OHp4/e3p/jg5v6z/lHO/wE=",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        __assert_max_bit_size(self, BIT_SIZE);\n    }\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = __to_le_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = __to_be_bits(self);\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_le_radix(self, radix)\n    }\n\n    fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        __to_be_radix(self, radix)\n    }\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(apply_range_constraint)]\nfn __assert_max_bit_size(value: Field, bit_size: u32) {}\n\n// `_radix` must be less than 256\n#[builtin(to_le_radix)]\nfn __to_le_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n// `_radix` must be less than 256\n#[builtin(to_be_radix)]\nfn __to_be_radix<let N: u32>(value: Field, radix: u32) -> [u8; N] {}\n\n/// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n/// This slice will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_le_bits)]\nfn __to_le_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n/// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n/// This array will be zero padded should not all bits be necessary to represent `self`.\n///\n/// # Failures\n/// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n/// be able to represent the original `Field`.\n///\n/// # Safety\n/// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n/// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n/// wrap around due to overflow when verifying the decomposition.\n#[builtin(to_be_bits)]\nfn __to_be_bits<let N: u32>(value: Field) -> [u1; N] {}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    unconstrained fn not_enough_limbs_brillig() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    #[test(should_fail_with = \"Field failed to decompose into specified 16 limbs\")]\n    fn not_enough_limbs() {\n        let _: [u8; 16] = 0x100000000000000000000000000000000.to_le_bytes();\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "use std::slice;\n\nfn main(x: Field, y: pub Field) {\n    let mut slice = &[0; 2];\n    assert(slice[0] == 0);\n    assert(slice[0] != 1);\n    slice[0] = x;\n    assert(slice[0] == x);\n\n    let slice_plus_10 = slice.push_back(y);\n    assert(slice_plus_10[2] == 10);\n    assert(slice_plus_10[2] != 8);\n    assert(slice_plus_10.len() == 3);\n\n    let mut new_slice = &[];\n    for i in 0..5 {\n        new_slice = new_slice.push_back(i);\n    }\n    assert(new_slice.len() == 5);\n\n    new_slice = new_slice.push_front(20);\n    assert(new_slice[0] == 20);\n    assert(new_slice.len() == 6);\n\n    let (popped_slice, last_elem) = new_slice.pop_back();\n    assert(last_elem == 4);\n    assert(popped_slice.len() == 5);\n\n    let (first_elem, rest_of_slice) = popped_slice.pop_front();\n    assert(first_elem == 20);\n    assert(rest_of_slice.len() == 4);\n\n    new_slice = rest_of_slice.insert(2, 100);\n    assert(new_slice[2] == 100);\n    assert(new_slice[4] == 3);\n    assert(new_slice.len() == 5);\n\n    let (remove_slice, removed_elem) = new_slice.remove(3);\n    assert(removed_elem == 2);\n    assert(remove_slice[3] == 3);\n    assert(remove_slice.len() == 4);\n\n    let append = &[1, 2].append(&[3, 4, 5]);\n    assert(append.len() == 5);\n    assert(append[0] == 1);\n    assert(append[4] == 5);\n\n    let mapped = &[1, 2].map(|x| x + 1);\n    assert_eq(mapped, &[2, 3]);\n\n    assert_eq(&[1, 2, 3].fold(0, |acc, x| acc + x), 6);\n    assert_eq(&[1, 2, 3].reduce(|acc, x| acc + x), 6);\n    assert(&[2, 4, 6].all(|x| x > 0));\n    assert(&[2, 4, 6].any(|x| x > 5));\n\n    regression_2083();\n    // The parameters to this function must come from witness values (inputs to main)\n    regression_merge_slices(x, y);\n    regression_2370();\n\n    regression_4418(x);\n    regression_slice_call_result(x, y);\n    regression_4506();\n}\n\n// Ensure that slices of struct/tuple values work.\nfn regression_2083() {\n    let y = &[(1, 2)];\n    let y = y.push_back((3, 4)); // [(1, 2), (3, 4)]\n    let y = y.push_back((5, 6)); // [(1, 2), (3, 4), (5, 6)]\n    assert(y[2].1 == 6);\n\n    let y = y.push_front((10, 11)); // [(10, 11), (1, 2), (3, 4), (5, 6)]\n    let y = y.push_front((12, 13)); // [(12, 13), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[1].0 == 10);\n\n    let y = y.insert(1, (55, 56)); // [(12, 13), (55, 56), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].1 == 13);\n    assert(y[1].1 == 56);\n    assert(y[2].0 == 10);\n\n    let (y, x) = y.remove(2); // [(12, 13), (55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[2].0 == 1);\n    assert(x.0 == 10);\n    assert(x.1 == 11);\n\n    let (x, y) = y.pop_front(); // [(55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].0 == 55);\n    assert(x.0 == 12);\n    assert(x.1 == 13);\n\n    let (y, x) = y.pop_back(); // [(55, 56), (1, 2), (3, 4)]\n    assert(y.len() == 3);\n    assert(x.0 == 5);\n    assert(x.1 == 6);\n}\n\n// The parameters to this function must come from witness values (inputs to main)\nfn regression_merge_slices(x: Field, y: Field) {\n    merge_slices_if(x, y);\n    merge_slices_else(x);\n}\n\nfn merge_slices_if(x: Field, y: Field) {\n    let slice = merge_slices_return(x, y);\n    assert(slice.len() == 3);\n    assert(slice[2] == 10);\n\n    let slice = merge_slices_mutate(x, y);\n    assert(slice.len() == 4);\n    assert(slice[3] == 5);\n\n    let slice = merge_slices_mutate_in_loop(x, y);\n    assert(slice.len() == 7);\n    assert(slice[6] == 4);\n\n    let slice = merge_slices_mutate_two_ifs(x, y);\n    assert(slice.len() == 6);\n    assert(slice[3] == 5);\n    assert(slice[4] == 15);\n    assert(slice[5] == 30);\n\n    let slice = merge_slices_mutate_between_ifs(x, y);\n    assert(slice.len() == 8);\n    assert(slice[3] == 5);\n    assert(slice[4] == 30);\n    assert(slice[5] == 15);\n    assert(slice[6] == 50);\n    assert(slice[7] == 60);\n\n    merge_slices_push_then_pop(x, y);\n\n    let slice = merge_slices_push_then_insert(x, y);\n    assert(slice.len() == 7);\n    assert(slice[1] == 50);\n    assert(slice[2] == 0);\n    assert(slice[5] == 30);\n    assert(slice[6] == 100);\n\n    let slice = merge_slices_remove_between_ifs(x, y);\n    assert(slice.len() == 5);\n}\n\nfn merge_slices_else(x: Field) {\n    let slice = merge_slices_return(x, 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice.len() == 2);\n\n    let slice = merge_slices_mutate(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n\n    let slice = merge_slices_mutate_in_loop(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n}\n\n// Test returning a merged slice without a mutation\nfn merge_slices_return(x: Field, y: Field) -> [Field] {\n    let slice = &[0; 2];\n    if x != y {\n        if x != 20 {\n            slice.push_back(y)\n        } else {\n            slice\n        }\n    } else {\n        slice\n    }\n}\n\n// Test mutating a slice inside of an if statement\nfn merge_slices_mutate(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\n// Test mutating a slice inside of a loop in an if statement\nfn merge_slices_mutate_in_loop(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        for i in 0..5 {\n            slice = slice.push_back(i as Field);\n        }\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\nfn merge_slices_mutate_two_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n    slice = slice.push_back(30);\n\n    slice\n}\n\nfn merge_slices_mutate_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n\n    slice\n}\n\nfn merge_slices_push_then_pop(x: Field, y: Field) {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 4);\n    assert(elem == 30);\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 3);\n    assert(elem == x);\n}\n\nfn merge_slices_push_then_insert(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n        slice = slice.push_back(15);\n    }\n\n    slice = slice.insert(1, 50);\n    // Test that we can use slice insert the same as slice push back\n    slice = slice.insert(6, 100);\n\n    slice\n}\n\nfn merge_slices_remove_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    let (mut slice, elem) = slice.remove(2);\n    assert(elem == y);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice\n}\n// Previously, we'd get a type error when trying to assign an array of a different size to\n// an existing array variable. Now, we infer the variable must be a slice.\nfn regression_2370() {\n    let mut slice = &[];\n    slice = &[1, 2, 3];\n}\n\nfn regression_4418(x: Field) {\n    let mut crash: [u8; 32] = x.to_be_bytes();\n\n    if x != 0 {\n        crash[0] = 10;\n    }\n}\n\nfn regression_slice_call_result(x: Field, y: Field) {\n    let mut slice = merge_slices_return(x, y);\n    if x != 0 {\n        slice = slice.push_back(5);\n        slice = slice.push_back(10);\n    } else {\n        slice = slice.push_back(5);\n    }\n    assert(slice.len() == 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice[2] == 10);\n    assert(slice[3] == 5);\n    assert(slice[4] == 10);\n}\n\nfn regression_4506() {\n    let slice: [Field] = &[1, 2, 3];\n    assert(slice == slice);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
