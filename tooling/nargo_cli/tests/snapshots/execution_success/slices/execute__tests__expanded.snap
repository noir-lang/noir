---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::slice;

fn main(x: Field, y: pub Field) {
    let mut slice: [Field] = &[0_Field; 2];
    assert(slice[0_u32] == 0_Field);
    assert(slice[0_u32] != 1_Field);
    slice[0_u32] = x;
    assert(slice[0_u32] == x);
    let slice_plus_10: [Field] = slice.push_back(y);
    assert(slice_plus_10[2_u32] == 10_Field);
    assert(slice_plus_10[2_u32] != 8_Field);
    assert(slice_plus_10.len() == 3_u32);
    let mut new_slice: [u32] = &[];
    for i in 0_u32..5_u32 {
        new_slice = new_slice.push_back(i);
    }
    assert(new_slice.len() == 5_u32);
    new_slice = new_slice.push_front(20_u32);
    assert(new_slice[0_u32] == 20_u32);
    assert(new_slice.len() == 6_u32);
    let (popped_slice, last_elem): ([u32], u32) = new_slice.pop_back();
    assert(last_elem == 4_u32);
    assert(popped_slice.len() == 5_u32);
    let (first_elem, rest_of_slice): (u32, [u32]) = popped_slice.pop_front();
    assert(first_elem == 20_u32);
    assert(rest_of_slice.len() == 4_u32);
    new_slice = rest_of_slice.insert(2_u32, 100_u32);
    assert(new_slice[2_u32] == 100_u32);
    assert(new_slice[4_u32] == 3_u32);
    assert(new_slice.len() == 5_u32);
    let (remove_slice, removed_elem): ([u32], u32) = new_slice.remove(3_u32);
    assert(removed_elem == 2_u32);
    assert(remove_slice[3_u32] == 3_u32);
    assert(remove_slice.len() == 4_u32);
    let append: [Field] = &[1_Field, 2_Field].append(&[3_Field, 4_Field, 5_Field]);
    assert(append.len() == 5_u32);
    assert(append[0_u32] == 1_Field);
    assert(append[4_u32] == 5_Field);
    let mapped: [Field] = &[1_Field, 2_Field].map(|x: Field| -> Field { x + 1_Field });
    assert(mapped == &[2_Field, 3_Field]);
    assert(
        &[1_Field, 2_Field, 3_Field].fold(0_Field, |acc: Field, x: Field| -> Field { acc + x })
            == 6_Field,
    );
    assert(
        &[1_Field, 2_Field, 3_Field].reduce(|acc: Field, x: Field| -> Field { acc + x }) == 6_Field,
    );
    assert(&[2_u32, 4_u32, 6_u32].all(|x: u32| -> bool { x > 0_u32 }));
    assert(&[2_u32, 4_u32, 6_u32].any(|x: u32| -> bool { x > 5_u32 }));
    regression_2083();
    regression_merge_slices(x, y);
    regression_2370();
    regression_4418(x);
    regression_slice_call_result(x, y);
    regression_4506();
}

fn regression_2083() {
    let y: [(Field, Field)] = &[(1_Field, 2_Field)];
    let y: [(Field, Field)] = y.push_back((3_Field, 4_Field));
    let y: [(Field, Field)] = y.push_back((5_Field, 6_Field));
    assert(y[2_u32].1 == 6_Field);
    let y: [(Field, Field)] = y.push_front((10_Field, 11_Field));
    let y: [(Field, Field)] = y.push_front((12_Field, 13_Field));
    assert(y[1_u32].0 == 10_Field);
    let y: [(Field, Field)] = y.insert(1_u32, (55_Field, 56_Field));
    assert(y[0_u32].1 == 13_Field);
    assert(y[1_u32].1 == 56_Field);
    assert(y[2_u32].0 == 10_Field);
    let (y, x): ([(Field, Field)], (Field, Field)) = y.remove(2_u32);
    assert(y[2_u32].0 == 1_Field);
    assert(x.0 == 10_Field);
    assert(x.1 == 11_Field);
    let (x, y): ((Field, Field), [(Field, Field)]) = y.pop_front();
    assert(y[0_u32].0 == 55_Field);
    assert(x.0 == 12_Field);
    assert(x.1 == 13_Field);
    let (y, x): ([(Field, Field)], (Field, Field)) = y.pop_back();
    assert(y.len() == 3_u32);
    assert(x.0 == 5_Field);
    assert(x.1 == 6_Field);
}

fn regression_merge_slices(x: Field, y: Field) {
    merge_slices_if(x, y);
    merge_slices_else(x);
}

fn merge_slices_if(x: Field, y: Field) {
    let slice: [Field] = merge_slices_return(x, y);
    assert(slice.len() == 3_u32);
    assert(slice[2_u32] == 10_Field);
    let slice: [Field] = merge_slices_mutate(x, y);
    assert(slice.len() == 4_u32);
    assert(slice[3_u32] == 5_Field);
    let slice: [Field] = merge_slices_mutate_in_loop(x, y);
    assert(slice.len() == 7_u32);
    assert(slice[6_u32] == 4_Field);
    let slice: [Field] = merge_slices_mutate_two_ifs(x, y);
    assert(slice.len() == 6_u32);
    assert(slice[3_u32] == 5_Field);
    assert(slice[4_u32] == 15_Field);
    assert(slice[5_u32] == 30_Field);
    let slice: [Field] = merge_slices_mutate_between_ifs(x, y);
    assert(slice.len() == 8_u32);
    assert(slice[3_u32] == 5_Field);
    assert(slice[4_u32] == 30_Field);
    assert(slice[5_u32] == 15_Field);
    assert(slice[6_u32] == 50_Field);
    assert(slice[7_u32] == 60_Field);
    merge_slices_push_then_pop(x, y);
    let slice: [Field] = merge_slices_push_then_insert(x, y);
    assert(slice.len() == 7_u32);
    assert(slice[1_u32] == 50_Field);
    assert(slice[2_u32] == 0_Field);
    assert(slice[5_u32] == 30_Field);
    assert(slice[6_u32] == 100_Field);
    let slice: [Field] = merge_slices_remove_between_ifs(x, y);
    assert(slice.len() == 5_u32);
}

fn merge_slices_else(x: Field) {
    let slice: [Field] = merge_slices_return(x, 5_Field);
    assert(slice[0_u32] == 0_Field);
    assert(slice[1_u32] == 0_Field);
    assert(slice.len() == 2_u32);
    let slice: [Field] = merge_slices_mutate(x, 5_Field);
    assert(slice[2_u32] == 5_Field);
    assert(slice.len() == 3_u32);
    let slice: [Field] = merge_slices_mutate_in_loop(x, 5_Field);
    assert(slice[2_u32] == 5_Field);
    assert(slice.len() == 3_u32);
}

fn merge_slices_return(x: Field, y: Field) -> [Field] {
    let slice: [Field] = &[0_Field; 2];
    if x != y {
        if x != 20_Field {
            slice.push_back(y)
        } else {
            slice
        }
    } else {
        slice
    }
}

fn merge_slices_mutate(x: Field, y: Field) -> [Field] {
    let mut slice: [Field] = &[0_Field; 2];
    if x != y {
        slice = slice.push_back(y);
        slice = slice.push_back(x);
    } else {
        slice = slice.push_back(x);
    };
    slice
}

fn merge_slices_mutate_in_loop(x: Field, y: Field) -> [Field] {
    let mut slice: [Field] = &[0_Field; 2];
    if x != y {
        for i in 0_u32..5_u32 {
            slice = slice.push_back(i as Field);
        }
    } else {
        slice = slice.push_back(x);
    };
    slice
}

fn merge_slices_mutate_two_ifs(x: Field, y: Field) -> [Field] {
    let mut slice: [Field] = &[0_Field; 2];
    if x != y {
        slice = slice.push_back(y);
        slice = slice.push_back(x);
    } else {
        slice = slice.push_back(x);
    };
    if x == 20_Field {
        slice = slice.push_back(20_Field);
    };
    slice = slice.push_back(15_Field);
    slice = slice.push_back(30_Field);
    slice
}

fn merge_slices_mutate_between_ifs(x: Field, y: Field) -> [Field] {
    let mut slice: [Field] = &[0_Field; 2];
    if x != y {
        slice = slice.push_back(y);
        slice = slice.push_back(x);
    } else {
        slice = slice.push_back(x);
    };
    slice = slice.push_back(30_Field);
    if x == 20_Field {
        slice = slice.push_back(20_Field);
    };
    slice = slice.push_back(15_Field);
    if x != 20_Field {
        slice = slice.push_back(50_Field);
    };
    slice = slice.push_back(60_Field);
    slice
}

fn merge_slices_push_then_pop(x: Field, y: Field) {
    let mut slice: [Field] = &[0_Field; 2];
    if x != y {
        slice = slice.push_back(y);
        slice = slice.push_back(x);
    } else {
        slice = slice.push_back(x);
    };
    slice = slice.push_back(30_Field);
    if x == 20_Field {
        slice = slice.push_back(20_Field);
    };
    let (slice, elem): ([Field], Field) = slice.pop_back();
    assert(slice.len() == 4_u32);
    assert(elem == 30_Field);
    let (slice, elem): ([Field], Field) = slice.pop_back();
    assert(slice.len() == 3_u32);
    assert(elem == x);
}

fn merge_slices_push_then_insert(x: Field, y: Field) -> [Field] {
    let mut slice: [Field] = &[0_Field; 2];
    if x != y {
        slice = slice.push_back(y);
        slice = slice.push_back(x);
    } else {
        slice = slice.push_back(x);
    };
    slice = slice.push_back(30_Field);
    if x == 20_Field {
        slice = slice.push_back(20_Field);
        slice = slice.push_back(15_Field);
    };
    slice = slice.insert(1_u32, 50_Field);
    slice = slice.insert(6_u32, 100_Field);
    slice
}

fn merge_slices_remove_between_ifs(x: Field, y: Field) -> [Field] {
    let mut slice: [Field] = &[0_Field; 2];
    if x != y {
        slice = slice.push_back(y);
        slice = slice.push_back(x);
    } else {
        slice = slice.push_back(x);
    };
    let (mut slice, elem): ([Field], Field) = slice.remove(2_u32);
    assert(elem == y);
    if x == 20_Field {
        slice = slice.push_back(20_Field);
    };
    slice = slice.push_back(15_Field);
    if x != 20_Field {
        slice = slice.push_back(50_Field);
    };
    slice
}

fn regression_2370() {
    let mut slice: [Field] = &[];
    slice = &[1_Field, 2_Field, 3_Field];
}

fn regression_4418(x: Field) {
    let mut crash: [u8; 32] = x.to_be_bytes();
    if x != 0_Field {
        crash[0_u32] = 10_u8;
    }
}

fn regression_slice_call_result(x: Field, y: Field) {
    let mut slice: [Field] = merge_slices_return(x, y);
    if x != 0_Field {
        slice = slice.push_back(5_Field);
        slice = slice.push_back(10_Field);
    } else {
        slice = slice.push_back(5_Field);
    };
    assert(slice.len() == 5_u32);
    assert(slice[0_u32] == 0_Field);
    assert(slice[1_u32] == 0_Field);
    assert(slice[2_u32] == 10_Field);
    assert(slice[3_u32] == 5_Field);
    assert(slice[4_u32] == 10_Field);
}

fn regression_4506() {
    let slice: [Field] = &[1_Field, 2_Field, 3_Field];
    assert(slice == slice);
}
