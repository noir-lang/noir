---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZvNbtw4FkbfpdZe6PL+kOxXGQwaTuI0DBhO4CQNDIJ+9yFLPFSykJBmNr6f6+eEuqVDUaz4++3D07tvf/35/Prx05fbH//5fnv39vzy8vzXny+f3j9+ff702h79/s/DjV///Pr29NQeuv3wfHvX58e3p9evtz9ev728PNz+fnz5dn/Rl8+Pr/f69fGtPbs93J5eP7TagB+fX556+ufhePd2/takPt6cPM+3+y+/X8LTAEgUOSOkixFUV4ZQs50R9JygWzAG3crpUdg5wbzYIJjXbYUQ2ySEyMpRyMbnqCKxRNCDYEudlLBJKPWMUC/6UKLSh5J9hVDnUVi1NUKeY6h1qQ9pm2dUkrJE0INwfhSXhPBJqKdjED9HuMxGuBRfQhzH4cnyEkLnie0qS61oQtAKTXmJYAfBl04JzVMN207HkOSiEabz47Dzc+ISEdtERLI1hB2IWESUeVJEXfo8LM2pynRpsjM/CKFLhJwnoS5N2b5NRV3qEmGeEur5vA8XV2CvFURs2xIituQTYdsaIg5EWUPIPCdC1NdGUW0iNlkbRRyjyEuzlZf5mca2RAg5CJqWCBaTENsS4ZjvoixdAvNxEc1rC5p8LGjy2oIm+zGGckqwC0Qcioa7riGiTMTqKOpENMGWEKExEb6tIQ7LL1b714g6EXlb+kzLxg2DFj1thV9JXoTTosUlRN7mbUveYhFRJ0LOJ4pLhMxu5rQtXYmLz5VRiSVCneeVVl+aa45LmG3nqwHPF43whB/ZNa8h7EC4ryHmpJn9/P7pEhE2T4oLS68R8x4sR1lRzDY7PpDwpbv6MqfubTs9jLi6pT7WAybny+Xw376vv0T82o399YHMu+oWfQ1RZSJqWkKkOedZSmUNMQ2xlE8vhVl+e3/gEvFrGwTXiF/aIbjuRT3aWXUNUeJA1CVE2/MB0XYJ1hCH61pOT61cfnuf4RLxa/sMl4hf22e47IVtUzPb1jTTeUVuiDXNmp8Tcb7AudqVzXPDRPL5aVEu5r2yTUTZznca+hl8usqqs5tR5fhM24LrJ8TFpawkY+osKdIp4mIU+Zi0cvL4bcQPWyb/CjGXOLltzi4hfljrSV07EJs3+i2efyKX58Vc7ZXN0tLJOb9zkBznm8xXg5ACosj51s0lIs075HZmLSLqRKisIVR1ImytF22LYCLOt5CuEZWZs7QF+BLCJE+ErvWi7YlOhJc1RE4TUX7uxX/bb4/vn99++gbutrWT8OEm7SUPt3T/qfef1uash5vff8b9p7SXtkOU9to2GUh7cb/0io5qo7a3SJuypL2pb+JIbmvh1lwp/bu2Vmur7fm0jSqjpv35pON3G9VHjVHzqGXUwdPB08HTNOrg6eDp4Ong6eDp4OngWef1PsioaVQd1Ub1UWPUPGoZte7VB88HzwfPB88Hzzuvd77zWru981q/vfNaP732rfj2mWyjyqipf03Sqo5q43EfNUbNo5ZRBy8PXh68nEbVUQcvd17rT45R86hl/3dz3WvZ9seLjJpG1VFt1MErg1cGr5RR617r4NXBq4NXB68OXh28Onh18Org1cFrXzYShJAISjCCE4KQCYUAWSALZIEskAWyQBbI3Zh+iZGuzB7qCF2aPQghEZRgBCcEAXKCnCArZIWskBWyQlbIClkhK+TukfbpooukfcLoJvWdROkqWZ8Sukv9aynpMlnqwfuSr4cgZEIh1H4z22eard+S9tDI1v+tLlVfzEu3yu+zkRGcEIRMKITav5jqc9dGEEIiKKGT+zC6Yd4PsCvW986lO7aHQqgjdM365Uq6Z9EH30XbgxI6pwO7W3sohDpC12sPndMPuQu2ByUYwfteWw/R92V6yIRCqCN00fYghNT3UXpo5P6VkXTZ+jdg0m3bQxAyofTrag+1X4z6jN/IpfQghERQghGcEIRMKIQ6gkAWyAJZIAtkgSyQBbJAFsgJcoKcICfICXKCnCAnyAlygqyQFbJCVsjduL4ySd24PQShkfuWSOrG7aGO0I3bgxDSeFc3bg+Qu3H7a4IA2SAbZIfskB2yQ3bIzpidMTtkh+yQA3JA7sbtQQlGYMwBuRu3h0KoI3Tj9gA5Q86QM+QMOdONzJgzY86MuUDuDu6BbhS6UehGgVwgF8gFcoFc6UZlzJUxV8ZcIVf6XOlGpRuVbtRB1m0jCCERlGAEJwQhEwZZt9FnlY0ghESALJAFskAWyFIIjDkx5sSYE+SkBCM4IQiQE+QEWSErZKUbypiVMStjxkHVTKAbSjeMbuCgGmSDbJBxUHFQcVBxUHFQHbLTZxxUHFQcVIfskHFQcVBxUHFQcVBxUHFQA3LQZxxUHFQc1ICcIeOg4qDioOKg4qDioOKgZsiZPuOg4qDioBbIBTIOKg4qDioOKg4qDioOaoVc6TMOKg4qDmqFXCHjoOGg4aDhoOGg4aDhoG2DbFsmFMLohuGgCWSBjIOGg4aDhoOGg4aDhoOWICchJIISjAA5QcZBw0HDQcNBw0HDQcNB4zpoXAcNBw0HDQeN66BxHTQcNBw0HDQcNBw0HDQcNINs9BkHDQcNB80hO2QcNBw0HDQcNBw0HDQctIAc9BkHDQcNBy0gB2QcNBw0HDQcNBw0HDQctAw502ccNBw0HLQCuUDGQcNBw0HDQcNBw0HDQauQK33GQcNBw0GrkCtkHDQcNBx0HHQcdBx0HPRtkH1zQhAyoRAgC2QcdBx0HHQcdBx0HHQcdIEso8+Og46DjoOeICfIOOg46DjoOOg46DjoOOgKWZVAN3DQcdBZizprUcdBx0HHQcdBx0HHQcdBN8hGn3HQcdBx0FmLukPGQcdBx0HHQcdBx0HHQQ/IQZ9x0HHQcdBZi3pAxkHHQcdBx0HHQcdBx0HPkDN9xkHHQcdBZy3qBTIOOg46DjoOOg46DjoOeoFc6DMOOg46DjprUa+QcdBx0HHQcdBxMHAwcDC2QY5NCUZwQhAy7yoEyDgYOBg4GDgYOBg4GAJZMqEQRjcCB4O1aCTIOBg4GDgYOBg4GDgYOBgKWYVAN3AwcDBYiwYOBtfB4DoYrEWDtWjgYHA/GNwPBveDYfQZB4PrYLAWDdaiwf1g3B287zZ2svWgBCN0cu4hCJlQCHWEu4P3IIREUIIRIAfkgByQA/LdwdpDI8v9P2D9/fj2/Pju5enL7f4nKR+/vb7/4S9Uvv7vM8/wNyyf3z69f/rw7e2p76Xfn2u76/8H",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "use std::slice;\n\nfn main(x: Field, y: pub Field) {\n    let mut slice = &[0; 2];\n    assert(slice[0] == 0);\n    assert(slice[0] != 1);\n    slice[0] = x;\n    assert(slice[0] == x);\n\n    let slice_plus_10 = slice.push_back(y);\n    assert(slice_plus_10[2] == 10);\n    assert(slice_plus_10[2] != 8);\n    assert(slice_plus_10.len() == 3);\n\n    let mut new_slice = &[];\n    for i in 0..5 {\n        new_slice = new_slice.push_back(i);\n    }\n    assert(new_slice.len() == 5);\n\n    new_slice = new_slice.push_front(20);\n    assert(new_slice[0] == 20);\n    assert(new_slice.len() == 6);\n\n    let (popped_slice, last_elem) = new_slice.pop_back();\n    assert(last_elem == 4);\n    assert(popped_slice.len() == 5);\n\n    let (first_elem, rest_of_slice) = popped_slice.pop_front();\n    assert(first_elem == 20);\n    assert(rest_of_slice.len() == 4);\n\n    new_slice = rest_of_slice.insert(2, 100);\n    assert(new_slice[2] == 100);\n    assert(new_slice[4] == 3);\n    assert(new_slice.len() == 5);\n\n    let (remove_slice, removed_elem) = new_slice.remove(3);\n    assert(removed_elem == 2);\n    assert(remove_slice[3] == 3);\n    assert(remove_slice.len() == 4);\n\n    let append = &[1, 2].append(&[3, 4, 5]);\n    assert(append.len() == 5);\n    assert(append[0] == 1);\n    assert(append[4] == 5);\n\n    let mapped = &[1, 2].map(|x| x + 1);\n    assert_eq(mapped, &[2, 3]);\n\n    assert_eq(&[1, 2, 3].fold(0, |acc, x| acc + x), 6);\n    assert_eq(&[1, 2, 3].reduce(|acc, x| acc + x), 6);\n    assert(&[2, 4, 6].all(|x| x > 0));\n    assert(&[2, 4, 6].any(|x| x > 5));\n\n    regression_2083();\n    // The parameters to this function must come from witness values (inputs to main)\n    regression_merge_slices(x, y);\n    regression_2370();\n\n    regression_4418(x);\n    regression_slice_call_result(x, y);\n    regression_4506();\n}\n\n// Ensure that slices of struct/tuple values work.\nfn regression_2083() {\n    let y = &[(1, 2)];\n    let y = y.push_back((3, 4)); // [(1, 2), (3, 4)]\n    let y = y.push_back((5, 6)); // [(1, 2), (3, 4), (5, 6)]\n    assert(y[2].1 == 6);\n\n    let y = y.push_front((10, 11)); // [(10, 11), (1, 2), (3, 4), (5, 6)]\n    let y = y.push_front((12, 13)); // [(12, 13), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[1].0 == 10);\n\n    let y = y.insert(1, (55, 56)); // [(12, 13), (55, 56), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].1 == 13);\n    assert(y[1].1 == 56);\n    assert(y[2].0 == 10);\n\n    let (y, x) = y.remove(2); // [(12, 13), (55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[2].0 == 1);\n    assert(x.0 == 10);\n    assert(x.1 == 11);\n\n    let (x, y) = y.pop_front(); // [(55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].0 == 55);\n    assert(x.0 == 12);\n    assert(x.1 == 13);\n\n    let (y, x) = y.pop_back(); // [(55, 56), (1, 2), (3, 4)]\n    assert(y.len() == 3);\n    assert(x.0 == 5);\n    assert(x.1 == 6);\n}\n\n// The parameters to this function must come from witness values (inputs to main)\nfn regression_merge_slices(x: Field, y: Field) {\n    merge_slices_if(x, y);\n    merge_slices_else(x);\n}\n\nfn merge_slices_if(x: Field, y: Field) {\n    let slice = merge_slices_return(x, y);\n    assert(slice.len() == 3);\n    assert(slice[2] == 10);\n\n    let slice = merge_slices_mutate(x, y);\n    assert(slice.len() == 4);\n    assert(slice[3] == 5);\n\n    let slice = merge_slices_mutate_in_loop(x, y);\n    assert(slice.len() == 7);\n    assert(slice[6] == 4);\n\n    let slice = merge_slices_mutate_two_ifs(x, y);\n    assert(slice.len() == 6);\n    assert(slice[3] == 5);\n    assert(slice[4] == 15);\n    assert(slice[5] == 30);\n\n    let slice = merge_slices_mutate_between_ifs(x, y);\n    assert(slice.len() == 8);\n    assert(slice[3] == 5);\n    assert(slice[4] == 30);\n    assert(slice[5] == 15);\n    assert(slice[6] == 50);\n    assert(slice[7] == 60);\n\n    merge_slices_push_then_pop(x, y);\n\n    let slice = merge_slices_push_then_insert(x, y);\n    assert(slice.len() == 7);\n    assert(slice[1] == 50);\n    assert(slice[2] == 0);\n    assert(slice[5] == 30);\n    assert(slice[6] == 100);\n\n    let slice = merge_slices_remove_between_ifs(x, y);\n    assert(slice.len() == 5);\n}\n\nfn merge_slices_else(x: Field) {\n    let slice = merge_slices_return(x, 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice.len() == 2);\n\n    let slice = merge_slices_mutate(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n\n    let slice = merge_slices_mutate_in_loop(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n}\n\n// Test returning a merged slice without a mutation\nfn merge_slices_return(x: Field, y: Field) -> [Field] {\n    let slice = &[0; 2];\n    if x != y {\n        if x != 20 {\n            slice.push_back(y)\n        } else {\n            slice\n        }\n    } else {\n        slice\n    }\n}\n\n// Test mutating a slice inside of an if statement\nfn merge_slices_mutate(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\n// Test mutating a slice inside of a loop in an if statement\nfn merge_slices_mutate_in_loop(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        for i in 0..5 {\n            slice = slice.push_back(i as Field);\n        }\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\nfn merge_slices_mutate_two_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n    slice = slice.push_back(30);\n\n    slice\n}\n\nfn merge_slices_mutate_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n\n    slice\n}\n\nfn merge_slices_push_then_pop(x: Field, y: Field) {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 4);\n    assert(elem == 30);\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 3);\n    assert(elem == x);\n}\n\nfn merge_slices_push_then_insert(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n        slice = slice.push_back(15);\n    }\n\n    slice = slice.insert(1, 50);\n    // Test that we can use slice insert the same as slice push back\n    slice = slice.insert(6, 100);\n\n    slice\n}\n\nfn merge_slices_remove_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    let (mut slice, elem) = slice.remove(2);\n    assert(elem == y);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice\n}\n// Previously, we'd get a type error when trying to assign an array of a different size to\n// an existing array variable. Now, we infer the variable must be a slice.\nfn regression_2370() {\n    let mut slice = &[];\n    slice = &[1, 2, 3];\n}\n\nfn regression_4418(x: Field) {\n    let mut crash: [u8; 32] = x.to_be_bytes();\n\n    if x != 0 {\n        crash[0] = 10;\n    }\n}\n\nfn regression_slice_call_result(x: Field, y: Field) {\n    let mut slice = merge_slices_return(x, y);\n    if x != 0 {\n        slice = slice.push_back(5);\n        slice = slice.push_back(10);\n    } else {\n        slice = slice.push_back(5);\n    }\n    assert(slice.len() == 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice[2] == 10);\n    assert(slice[3] == 5);\n    assert(slice[4] == 10);\n}\n\nfn regression_4506() {\n    let slice: [Field] = &[1, 2, 3];\n    assert(slice == slice);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
