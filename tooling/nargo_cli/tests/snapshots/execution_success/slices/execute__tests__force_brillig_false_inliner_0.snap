---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _533",
    "private parameters indices : [_0]",
    "public parameters indices : [_1]",
    "return value indices : []",
    "EXPR [ (1, _1) -10 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -10 })], outputs: [Simple(Witness(2))]",
    "EXPR [ (1, _0, _2) (-10, _2) (1, _3) -1 ]",
    "EXPR [ (1, _0, _3) (-10, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -20 })], outputs: [Simple(Witness(4))]",
    "EXPR [ (1, _0, _4) (-20, _4) (1, _5) -1 ]",
    "EXPR [ (1, _0, _5) (-20, _5) 0 ]",
    "EXPR [ (-1, _3) (-1, _6) 1 ]",
    "EXPR [ (1, _3, _5) (-3, _3) (-1, _5) (-1, _7) 3 ]",
    "EXPR [ (10, _3, _5) (-10, _3) (-10, _5) (-1, _8) 10 ]",
    "EXPR [ (1, _6, _7) (2, _3) -3 ]",
    "EXPR [ (1, _6, _8) -10 ]",
    "EXPR [ (2, _3, _6) (-1, _472) 0 ]",
    "EXPR [ (4, _6, _6) (-1, _473) 0 ]",
    "EXPR [ (3, _3) (1, _472) (1, _473) -4 ]",
    "EXPR [ (1, _0, _6) -5 ]",
    "EXPR [ (3, _3) (1, _472) (5472060717959818805561601436314318772137091100104008585924551046643952123906, _473) -7 ]",
    "EXPR [ (4, _6) -4 ]",
    "EXPR [ (1, _0, _3) (10, _6) (-1, _9) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: -1 })], outputs: [Simple(Witness(10))]",
    "EXPR [ (1, _5, _10) (-1, _10) (1, _11) -1 ]",
    "EXPR [ (1, _5, _11) (-1, _11) 0 ]",
    "EXPR [ (1, _5) (-1, _12) 5 ]",
    "EXPR [ (-1, _13) 0 ]",
    "EXPR [ (-1, _14) 5 ]",
    "EXPR [ (20, _5) (-1, _15) 0 ]",
    "EXPR [ (-1, _16) 15 ]",
    "INIT (id: 0, len: 6, witnesses: [_13, _13, _9, _14, _15, _16])",
    "EXPR [ (1, _5) (-1, _17) 4 ]",
    "MEM (id: 0, write EXPR [ (1, _16) 0 ] at: EXPR [ (1, _17) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _13) 0 ], value: EXPR [ (1, _18) 0 ]) ",
    "EXPR [ (-1, _19) 1 ]",
    "MEM (id: 0, read at: EXPR [ (1, _19) 0 ], value: EXPR [ (1, _20) 0 ]) ",
    "EXPR [ (-1, _21) 2 ]",
    "MEM (id: 0, read at: EXPR [ (1, _21) 0 ], value: EXPR [ (1, _22) 0 ]) ",
    "EXPR [ (-1, _23) 3 ]",
    "MEM (id: 0, read at: EXPR [ (1, _23) 0 ], value: EXPR [ (1, _24) 0 ]) ",
    "EXPR [ (-1, _25) 4 ]",
    "MEM (id: 0, read at: EXPR [ (1, _25) 0 ], value: EXPR [ (1, _26) 0 ]) ",
    "MEM (id: 0, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _27) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(12))], q_c: -6 })], outputs: [Simple(Witness(28))]",
    "EXPR [ (1, _12, _28) (-6, _28) (1, _29) -1 ]",
    "EXPR [ (1, _12, _29) (-6, _29) 0 ]",
    "EXPR [ (-1, _11, _18) (1, _18) (-1, _31) 0 ]",
    "EXPR [ (-1, _11, _20) (1, _20) (-1, _32) 0 ]",
    "EXPR [ (1, _9, _11) (-1, _11, _22) (1, _22) (-1, _33) 0 ]",
    "EXPR [ (-1, _11, _24) (5, _11) (1, _24) (-1, _34) 0 ]",
    "EXPR [ (1, _11, _15) (-1, _11, _26) (1, _26) (-1, _35) 0 ]",
    "EXPR [ (-1, _11, _27) (15, _11) (1, _27) (-1, _36) 0 ]",
    "EXPR [ (-1, _37) 30 ]",
    "INIT (id: 1, len: 7, witnesses: [_31, _32, _33, _34, _35, _36, _37])",
    "MEM (id: 1, write EXPR [ (1, _37) 0 ] at: EXPR [ (1, _12) 0 ]) ",
    "MEM (id: 1, read at: EXPR [ (1, _23) 0 ], value: EXPR [ (1, _38) 0 ]) ",
    "MEM (id: 1, read at: EXPR [ (1, _25) 0 ], value: EXPR [ (1, _39) 0 ]) ",
    "MEM (id: 1, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _40) 0 ]) ",
    "EXPR [ (1, _12) -5 ]",
    "EXPR [ (1, _29, _34) (-1, _29, _38) (1, _38) -5 ]",
    "EXPR [ (1, _29, _35) (-1, _29, _39) (1, _39) -15 ]",
    "EXPR [ (1, _29, _36) (-1, _29, _40) (1, _40) -30 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: -1 })], outputs: [Simple(Witness(41))]",
    "EXPR [ (1, _5, _41) (-1, _41) (1, _42) -1 ]",
    "EXPR [ (1, _5, _42) (-1, _42) 0 ]",
    "EXPR [ (1, _5) (-1, _43) 6 ]",
    "BLACKBOX::RANGE [_43]:32 bits []",
    "INIT (id: 2, len: 7, witnesses: [_13, _13, _9, _14, _37, _15, _16])",
    "EXPR [ (1, _5) (-1, _44) 5 ]",
    "MEM (id: 2, write EXPR [ (1, _16) 0 ] at: EXPR [ (1, _44) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _13) 0 ], value: EXPR [ (1, _45) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _19) 0 ], value: EXPR [ (1, _46) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _21) 0 ], value: EXPR [ (1, _47) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _23) 0 ], value: EXPR [ (1, _48) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _25) 0 ], value: EXPR [ (1, _49) 0 ]) ",
    "MEM (id: 2, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _50) 0 ]) ",
    "EXPR [ (-1, _51) 6 ]",
    "MEM (id: 2, read at: EXPR [ (1, _51) 0 ], value: EXPR [ (1, _52) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(43))], q_c: -7 })], outputs: [Simple(Witness(53))]",
    "EXPR [ (1, _43, _53) (-7, _53) (1, _54) -1 ]",
    "EXPR [ (1, _43, _54) (-7, _54) 0 ]",
    "EXPR [ (-1, _5, _43) (-1, _5) (1, _43) (-1, _55) 1 ]",
    "BLACKBOX::RANGE [_55]:32 bits []",
    "EXPR [ (-1, _42, _45) (1, _45) (-1, _56) 0 ]",
    "EXPR [ (-1, _42, _46) (1, _46) (-1, _57) 0 ]",
    "EXPR [ (1, _9, _42) (-1, _42, _47) (1, _47) (-1, _58) 0 ]",
    "EXPR [ (-1, _42, _48) (5, _42) (1, _48) (-1, _59) 0 ]",
    "EXPR [ (-1, _42, _49) (30, _42) (1, _49) (-1, _60) 0 ]",
    "EXPR [ (1, _15, _42) (-1, _42, _50) (1, _50) (-1, _61) 0 ]",
    "EXPR [ (-1, _42, _52) (15, _42) (1, _52) (-1, _62) 0 ]",
    "EXPR [ (-1, _63) 50 ]",
    "INIT (id: 3, len: 8, witnesses: [_56, _57, _58, _59, _60, _61, _62, _63])",
    "EXPR [ (-1, _5, _43) (1, _43) (-1, _64) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _64) 0 ], value: EXPR [ (1, _65) 0 ]) ",
    "EXPR [ (1, _5, _65) (-50, _5) (-1, _66) 50 ]",
    "MEM (id: 3, write EXPR [ (1, _66) 0 ] at: EXPR [ (1, _64) 0 ]) ",
    "MEM (id: 3, read at: EXPR [ (1, _13) 0 ], value: EXPR [ (1, _67) 0 ]) ",
    "EXPR [ (-1, _5) (-1, _68) 1 ]",
    "MEM (id: 3, read at: EXPR [ (1, _68) 0 ], value: EXPR [ (1, _69) 0 ]) ",
    "EXPR [ (-2, _5) (-1, _70) 2 ]",
    "MEM (id: 3, read at: EXPR [ (1, _70) 0 ], value: EXPR [ (1, _71) 0 ]) ",
    "EXPR [ (-3, _5) (-1, _72) 3 ]",
    "MEM (id: 3, read at: EXPR [ (1, _72) 0 ], value: EXPR [ (1, _73) 0 ]) ",
    "EXPR [ (-4, _5) (-1, _74) 4 ]",
    "MEM (id: 3, read at: EXPR [ (1, _74) 0 ], value: EXPR [ (1, _75) 0 ]) ",
    "EXPR [ (-5, _5) (-1, _76) 5 ]",
    "MEM (id: 3, read at: EXPR [ (1, _76) 0 ], value: EXPR [ (1, _77) 0 ]) ",
    "EXPR [ (-6, _5) (-1, _78) 6 ]",
    "MEM (id: 3, read at: EXPR [ (1, _78) 0 ], value: EXPR [ (1, _79) 0 ]) ",
    "EXPR [ (-7, _5) (-1, _80) 7 ]",
    "MEM (id: 3, read at: EXPR [ (1, _80) 0 ], value: EXPR [ (1, _81) 0 ]) ",
    "EXPR [ (-1, _5) (-1, _82) 1 ]",
    "EXPR [ (1, _54, _56) (-1, _54, _67) (1, _67) (-1, _83) 0 ]",
    "EXPR [ (1, _54, _57) (-1, _54, _69) (1, _69) (-1, _84) 0 ]",
    "EXPR [ (1, _54, _58) (-1, _54, _71) (1, _71) (-1, _85) 0 ]",
    "EXPR [ (1, _54, _59) (-1, _54, _73) (1, _73) (-1, _86) 0 ]",
    "EXPR [ (1, _54, _60) (-1, _54, _75) (1, _75) (-1, _87) 0 ]",
    "EXPR [ (1, _54, _61) (-1, _54, _77) (1, _77) (-1, _88) 0 ]",
    "EXPR [ (1, _54, _62) (-1, _54, _79) (1, _79) (-1, _89) 0 ]",
    "EXPR [ (-1, _54, _81) (50, _54) (1, _81) (-1, _90) 0 ]",
    "EXPR [ (-1, _5) (1, _43) (-1, _91) -7 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(91))], q_c: 0 })], outputs: [Simple(Witness(92))]",
    "EXPR [ (1, _91, _92) (1, _93) -1 ]",
    "EXPR [ (1, _91, _93) 0 ]",
    "EXPR [ (1, _5, _56) (1, _82, _83) (-1, _95) 0 ]",
    "EXPR [ (1, _5, _57) (1, _82, _84) (-1, _96) 0 ]",
    "EXPR [ (1, _5, _58) (1, _82, _85) (-1, _97) 0 ]",
    "EXPR [ (1, _5, _59) (1, _82, _86) (-1, _98) 0 ]",
    "EXPR [ (1, _5, _60) (1, _82, _87) (-1, _99) 0 ]",
    "EXPR [ (1, _5, _61) (1, _82, _88) (-1, _100) 0 ]",
    "EXPR [ (1, _5, _62) (1, _82, _89) (-1, _101) 0 ]",
    "EXPR [ (1, _82, _90) (-1, _102) 0 ]",
    "EXPR [ (-1, _103) 60 ]",
    "INIT (id: 4, len: 9, witnesses: [_95, _96, _97, _98, _99, _100, _101, _102, _103])",
    "EXPR [ (-1, _5) (1, _43) (-1, _104) 1 ]",
    "MEM (id: 4, write EXPR [ (1, _103) 0 ] at: EXPR [ (1, _104) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _23) 0 ], value: EXPR [ (1, _105) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _25) 0 ], value: EXPR [ (1, _106) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _14) 0 ], value: EXPR [ (1, _107) 0 ]) ",
    "MEM (id: 4, read at: EXPR [ (1, _51) 0 ], value: EXPR [ (1, _108) 0 ]) ",
    "EXPR [ (-1, _109) 7 ]",
    "MEM (id: 4, read at: EXPR [ (1, _109) 0 ], value: EXPR [ (1, _110) 0 ]) ",
    "EXPR [ (-1, _5) (1, _43) -6 ]",
    "EXPR [ (1, _93, _98) (-1, _93, _105) (1, _105) -5 ]",
    "EXPR [ (1, _93, _99) (-1, _93, _106) (1, _106) -30 ]",
    "EXPR [ (1, _93, _100) (-1, _93, _107) (1, _107) -15 ]",
    "EXPR [ (1, _93, _101) (-1, _93, _108) (1, _108) -50 ]",
    "EXPR [ (1, _93, _102) (-1, _93, _110) (1, _110) -60 ]",
    "INIT (id: 5, len: 6, witnesses: [_13, _13, _9, _14, _37, _15])",
    "EXPR [ (1, _44) (-1, _111) -1 ]",
    "MEM (id: 5, read at: EXPR [ (1, _111) 0 ], value: EXPR [ (1, _112) 0 ]) ",
    "INIT (id: 6, len: 6, witnesses: [_13, _13, _9, _14, _37, _15])",
    "EXPR [ (1, _111) -4 ]",
    "EXPR [ (1, _112) -30 ]",
    "MEM (id: 6, read at: EXPR [ (1, _23) 0 ], value: EXPR [ (1, _113) 0 ]) ",
    "EXPR [ (-1, _0) (1, _113) 0 ]",
    "EXPR [ (2, _5) (-1, _114) 6 ]",
    "BLACKBOX::RANGE [_114]:32 bits []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(114))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(115)), Simple(Witness(116))]",
    "BLACKBOX::RANGE [_116]:32 bits []",
    "EXPR [ (-1, _114) (-4294967296, _115) (-1, _116) 4294967297 ]",
    "EXPR [ (-1, _115) 0 ]",
    "EXPR [ (1, _114) (-1, _117) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(117))], q_c: 4294967302 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(118)), Simple(Witness(119))]",
    "BLACKBOX::RANGE [_119]:32 bits []",
    "EXPR [ (-1, _117) (-4294967296, _118) (-1, _119) 4294967302 ]",
    "EXPR [ (-1, _118) 0 ]",
    "EXPR [ (1, _117) -7 ]",
    "EXPR [ (1, _9) -10 ]",
    "EXPR [ (4, _5) (3, _82) (-1, _120) 1 ]",
    "BLACKBOX::RANGE [_120]:32 bits []",
    "EXPR [ (1, _82, _120) (1, _82) (-1, _121) 0 ]",
    "BLACKBOX::RANGE [_121]:32 bits []",
    "EXPR [ (1, _5, _120) (1, _82, _120) (1, _82) -5 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -5 })], outputs: [Simple(Witness(122))]",
    "EXPR [ (1, _0, _122) (-5, _122) (1, _123) -1 ]",
    "EXPR [ (1, _0, _123) (-5, _123) 0 ]",
    "EXPR [ (-1, _123) (-1, _124) 1 ]",
    "EXPR [ (-2, _5, _123) (-3, _82, _123) (2, _5) (3, _82) (-1, _125) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-1, Witness(124), Witness(125))], linear_combinations: [(-2, Witness(123))], q_c: 4294967296 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(126)), Simple(Witness(127))]",
    "BLACKBOX::RANGE [_127]:32 bits []",
    "EXPR [ (-1, _124, _125) (-1, _531) 0 ]",
    "EXPR [ (-2, _123) (-4294967296, _126) (-1, _127) (1, _531) 4294967296 ]",
    "EXPR [ (-1, _126) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-1, Witness(124), Witness(125))], linear_combinations: [(-2, Witness(123))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(128)), Simple(Witness(129))]",
    "BLACKBOX::RANGE [_129]:32 bits []",
    "EXPR [ (-2, _123) (-4294967296, _128) (-1, _129) (1, _531) 4294967297 ]",
    "EXPR [ (-1, _128) 0 ]",
    "EXPR [ (1, _124, _125) (2, _123) -2 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(123), Witness(124)), (-4, Witness(124), Witness(124))], linear_combinations: [(-3, Witness(123))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(130)), Simple(Witness(131))]",
    "BLACKBOX::RANGE [_131]:32 bits []",
    "EXPR [ (-2, _123, _124) (-1, _532) 0 ]",
    "EXPR [ (-4, _124, _124) (-1, _533) 0 ]",
    "EXPR [ (-3, _123) (-4294967296, _130) (-1, _131) (1, _532) (1, _533) 4294967298 ]",
    "EXPR [ (-1, _130) 0 ]",
    "EXPR [ (1, _0, _123) (5, _124) -5 ]",
    "EXPR [ (3, _123) (-1, _532) (-1, _533) -3 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-2, Witness(123), Witness(124)), (-7, Witness(124), Witness(124))], linear_combinations: [(-3, Witness(123))], q_c: 4294967298 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(132)), Simple(Witness(133))]",
    "BLACKBOX::RANGE [_133]:32 bits []",
    "EXPR [ (-3, _123) (-4294967296, _132) (-1, _133) (1, _532) (5472060717959818805561601436314318772137091100104008585924551046643952123906, _533) 4294967298 ]",
    "EXPR [ (-1, _132) 0 ]",
    "EXPR [ (1, _0, _123) -5 ]",
    "EXPR [ (3, _123) (-1, _532) (-5472060717959818805561601436314318772137091100104008585924551046643952123906, _533) -3 ]",
    "BRILLIG CALL func 2: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 32 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Array([Witness(134), Witness(135), Witness(136), Witness(137), Witness(138), Witness(139), Witness(140), Witness(141), Witness(142), Witness(143), Witness(144), Witness(145), Witness(146), Witness(147), Witness(148), Witness(149), Witness(150), Witness(151), Witness(152), Witness(153), Witness(154), Witness(155), Witness(156), Witness(157), Witness(158), Witness(159), Witness(160), Witness(161), Witness(162), Witness(163), Witness(164), Witness(165)])]",
    "BLACKBOX::RANGE [_134]:8 bits []",
    "BLACKBOX::RANGE [_135]:8 bits []",
    "BLACKBOX::RANGE [_136]:8 bits []",
    "BLACKBOX::RANGE [_137]:8 bits []",
    "BLACKBOX::RANGE [_138]:8 bits []",
    "BLACKBOX::RANGE [_139]:8 bits []",
    "BLACKBOX::RANGE [_140]:8 bits []",
    "BLACKBOX::RANGE [_141]:8 bits []",
    "BLACKBOX::RANGE [_142]:8 bits []",
    "BLACKBOX::RANGE [_143]:8 bits []",
    "BLACKBOX::RANGE [_144]:8 bits []",
    "BLACKBOX::RANGE [_145]:8 bits []",
    "BLACKBOX::RANGE [_146]:8 bits []",
    "BLACKBOX::RANGE [_147]:8 bits []",
    "BLACKBOX::RANGE [_148]:8 bits []",
    "BLACKBOX::RANGE [_149]:8 bits []",
    "BLACKBOX::RANGE [_150]:8 bits []",
    "BLACKBOX::RANGE [_151]:8 bits []",
    "BLACKBOX::RANGE [_152]:8 bits []",
    "BLACKBOX::RANGE [_153]:8 bits []",
    "BLACKBOX::RANGE [_154]:8 bits []",
    "BLACKBOX::RANGE [_155]:8 bits []",
    "BLACKBOX::RANGE [_156]:8 bits []",
    "BLACKBOX::RANGE [_157]:8 bits []",
    "BLACKBOX::RANGE [_158]:8 bits []",
    "BLACKBOX::RANGE [_159]:8 bits []",
    "BLACKBOX::RANGE [_160]:8 bits []",
    "BLACKBOX::RANGE [_161]:8 bits []",
    "BLACKBOX::RANGE [_162]:8 bits []",
    "BLACKBOX::RANGE [_163]:8 bits []",
    "BLACKBOX::RANGE [_164]:8 bits []",
    "BLACKBOX::RANGE [_165]:8 bits []",
    "EXPR [ (1, _0) (-1, _134) (-256, _135) (-65536, _136) (-16777216, _137) (-4294967296, _138) (-1099511627776, _139) (-281474976710656, _140) (-72057594037927936, _141) (-18446744073709551616, _142) (-4722366482869645213696, _143) (-1208925819614629174706176, _144) (-309485009821345068724781056, _145) (-79228162514264337593543950336, _146) (-20282409603651670423947251286016, _147) (-5192296858534827628530496329220096, _148) (-1329227995784915872903807060280344576, _149) (-340282366920938463463374607431768211456, _150) (-87112285931760246646623899502532662132736, _151) (-22300745198530623141535718272648361505980416, _152) (-5708990770823839524233143877797980545530986496, _153) (-1461501637330902918203684832716283019655932542976, _154) (-374144419156711147060143317175368453031918731001856, _155) (-95780971304118053647396689196894323976171195136475136, _156) (-24519928653854221733733552434404946937899825954937634816, _157) (-6277101735386680763835789423207666416102355444464034512896, _158) (-1606938044258990275541962092341162602522202993782792835301376, _159) (-411376139330301510538742295639337626245683966408394965837152256, _160) (-105312291668557186697918027683670432318895095400549111254310977536, _161) (-26959946667150639794667015087019630673637144422540572481103610249216, _162) (-6901746346790563787434755862277025452451108972170386555162524223799296, _163) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _164) (-452312848583266388373324160190187140051835877600158453279131187530910662656, _165) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: -48 })], outputs: [Simple(Witness(166))]",
    "EXPR [ (1, _165, _166) (-48, _166) (1, _167) -1 ]",
    "EXPR [ (1, _165, _167) (-48, _167) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(165))], q_c: 208 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(168)), Simple(Witness(169))]",
    "BLACKBOX::RANGE [_168]:1 bits []",
    "BLACKBOX::RANGE [_169]:8 bits []",
    "EXPR [ (1, _165) (-256, _168) (-1, _169) 208 ]",
    "EXPR [ (1, _167, _168) (-1, _168) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: -100 })], outputs: [Simple(Witness(170))]",
    "EXPR [ (1, _164, _170) (-100, _170) (1, _171) -1 ]",
    "EXPR [ (1, _164, _171) (-100, _171) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(164))], q_c: 156 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(172)), Simple(Witness(173))]",
    "BLACKBOX::RANGE [_172]:1 bits []",
    "BLACKBOX::RANGE [_173]:8 bits []",
    "EXPR [ (1, _164) (-256, _172) (-1, _173) 156 ]",
    "EXPR [ (-1, _172) (-1, _174) 1 ]",
    "EXPR [ (-1, _167, _171) (1, _167) (-1, _175) 0 ]",
    "EXPR [ (1, _174, _175) (-1, _175) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(163))], q_c: -78 })], outputs: [Simple(Witness(176))]",
    "EXPR [ (1, _163, _176) (-78, _176) (1, _177) -1 ]",
    "EXPR [ (1, _163, _177) (-78, _177) 0 ]",
    "EXPR [ (-1, _167, _175) (1, _167) (-1, _178) 0 ]",
    "EXPR [ (-1, _177) (-1, _179) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(163))], q_c: 178 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(180)), Simple(Witness(181))]",
    "BLACKBOX::RANGE [_180]:1 bits []",
    "BLACKBOX::RANGE [_181]:8 bits []",
    "EXPR [ (1, _163) (-256, _180) (-1, _181) 178 ]",
    "EXPR [ (-1, _180) (-1, _182) 1 ]",
    "EXPR [ (1, _178, _179) (-1, _183) 0 ]",
    "EXPR [ (1, _182, _183) (-1, _183) 0 ]",
    "EXPR [ (-1, _183) (-1, _184) 1 ]",
    "EXPR [ (1, _167, _175) (-1, _167) (-1, _185) 1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(162))], q_c: -114 })], outputs: [Simple(Witness(186))]",
    "EXPR [ (1, _162, _186) (-114, _186) (1, _187) -1 ]",
    "EXPR [ (1, _162, _187) (-114, _187) 0 ]",
    "EXPR [ (-1, _184, _185) (-1, _183) (-1, _188) 1 ]",
    "EXPR [ (-1, _187) (-1, _189) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(162))], q_c: 142 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(190)), Simple(Witness(191))]",
    "BLACKBOX::RANGE [_190]:1 bits []",
    "BLACKBOX::RANGE [_191]:8 bits []",
    "EXPR [ (1, _162) (-256, _190) (-1, _191) 142 ]",
    "EXPR [ (-1, _190) (-1, _192) 1 ]",
    "EXPR [ (1, _188, _189) (-1, _193) 0 ]",
    "EXPR [ (1, _192, _193) (-1, _193) 0 ]",
    "EXPR [ (-1, _193) (-1, _194) 1 ]",
    "EXPR [ (1, _184, _185) (1, _183) (-1, _195) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(161))], q_c: -225 })], outputs: [Simple(Witness(196))]",
    "EXPR [ (1, _161, _196) (-225, _196) (1, _197) -1 ]",
    "EXPR [ (1, _161, _197) (-225, _197) 0 ]",
    "EXPR [ (-1, _194, _195) (-1, _193) (-1, _198) 1 ]",
    "EXPR [ (-1, _197) (-1, _199) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(161))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(200)), Simple(Witness(201))]",
    "BLACKBOX::RANGE [_200]:1 bits []",
    "BLACKBOX::RANGE [_201]:8 bits []",
    "EXPR [ (1, _161) (-256, _200) (-1, _201) 31 ]",
    "EXPR [ (-1, _200) (-1, _202) 1 ]",
    "EXPR [ (1, _198, _199) (-1, _203) 0 ]",
    "EXPR [ (1, _202, _203) (-1, _203) 0 ]",
    "EXPR [ (-1, _203) (-1, _204) 1 ]",
    "EXPR [ (1, _194, _195) (1, _193) (-1, _205) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(160))], q_c: -49 })], outputs: [Simple(Witness(206))]",
    "EXPR [ (1, _160, _206) (-49, _206) (1, _207) -1 ]",
    "EXPR [ (1, _160, _207) (-49, _207) 0 ]",
    "EXPR [ (-1, _204, _205) (-1, _203) (-1, _208) 1 ]",
    "EXPR [ (-1, _207) (-1, _209) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(160))], q_c: 207 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(210)), Simple(Witness(211))]",
    "BLACKBOX::RANGE [_210]:1 bits []",
    "BLACKBOX::RANGE [_211]:8 bits []",
    "EXPR [ (1, _160) (-256, _210) (-1, _211) 207 ]",
    "EXPR [ (-1, _210) (-1, _212) 1 ]",
    "EXPR [ (1, _208, _209) (-1, _213) 0 ]",
    "EXPR [ (1, _212, _213) (-1, _213) 0 ]",
    "EXPR [ (-1, _213) (-1, _214) 1 ]",
    "EXPR [ (1, _204, _205) (1, _203) (-1, _215) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: -160 })], outputs: [Simple(Witness(216))]",
    "EXPR [ (1, _159, _216) (-160, _216) (1, _217) -1 ]",
    "EXPR [ (1, _159, _217) (-160, _217) 0 ]",
    "EXPR [ (-1, _214, _215) (-1, _213) (-1, _218) 1 ]",
    "EXPR [ (-1, _217) (-1, _219) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(159))], q_c: 96 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(220)), Simple(Witness(221))]",
    "BLACKBOX::RANGE [_220]:1 bits []",
    "BLACKBOX::RANGE [_221]:8 bits []",
    "EXPR [ (1, _159) (-256, _220) (-1, _221) 96 ]",
    "EXPR [ (-1, _220) (-1, _222) 1 ]",
    "EXPR [ (1, _218, _219) (-1, _223) 0 ]",
    "EXPR [ (1, _222, _223) (-1, _223) 0 ]",
    "EXPR [ (-1, _223) (-1, _224) 1 ]",
    "EXPR [ (1, _214, _215) (1, _213) (-1, _225) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: -41 })], outputs: [Simple(Witness(226))]",
    "EXPR [ (1, _158, _226) (-41, _226) (1, _227) -1 ]",
    "EXPR [ (1, _158, _227) (-41, _227) 0 ]",
    "EXPR [ (-1, _224, _225) (-1, _223) (-1, _228) 1 ]",
    "EXPR [ (-1, _227) (-1, _229) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(158))], q_c: 215 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(230)), Simple(Witness(231))]",
    "BLACKBOX::RANGE [_230]:1 bits []",
    "BLACKBOX::RANGE [_231]:8 bits []",
    "EXPR [ (1, _158) (-256, _230) (-1, _231) 215 ]",
    "EXPR [ (-1, _230) (-1, _232) 1 ]",
    "EXPR [ (1, _228, _229) (-1, _233) 0 ]",
    "EXPR [ (1, _232, _233) (-1, _233) 0 ]",
    "EXPR [ (-1, _233) (-1, _234) 1 ]",
    "EXPR [ (1, _224, _225) (1, _223) (-1, _235) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(157))], q_c: -184 })], outputs: [Simple(Witness(236))]",
    "EXPR [ (1, _157, _236) (-184, _236) (1, _237) -1 ]",
    "EXPR [ (1, _157, _237) (-184, _237) 0 ]",
    "EXPR [ (-1, _234, _235) (-1, _233) (-1, _238) 1 ]",
    "EXPR [ (-1, _237) (-1, _239) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(157))], q_c: 72 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(240)), Simple(Witness(241))]",
    "BLACKBOX::RANGE [_240]:1 bits []",
    "BLACKBOX::RANGE [_241]:8 bits []",
    "EXPR [ (1, _157) (-256, _240) (-1, _241) 72 ]",
    "EXPR [ (-1, _240) (-1, _242) 1 ]",
    "EXPR [ (1, _238, _239) (-1, _243) 0 ]",
    "EXPR [ (1, _242, _243) (-1, _243) 0 ]",
    "EXPR [ (-1, _243) (-1, _244) 1 ]",
    "EXPR [ (1, _234, _235) (1, _233) (-1, _245) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(156))], q_c: -80 })], outputs: [Simple(Witness(246))]",
    "EXPR [ (1, _156, _246) (-80, _246) (1, _247) -1 ]",
    "EXPR [ (1, _156, _247) (-80, _247) 0 ]",
    "EXPR [ (-1, _244, _245) (-1, _243) (-1, _248) 1 ]",
    "EXPR [ (-1, _247) (-1, _249) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(156))], q_c: 176 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(250)), Simple(Witness(251))]",
    "BLACKBOX::RANGE [_250]:1 bits []",
    "BLACKBOX::RANGE [_251]:8 bits []",
    "EXPR [ (1, _156) (-256, _250) (-1, _251) 176 ]",
    "EXPR [ (-1, _250) (-1, _252) 1 ]",
    "EXPR [ (1, _248, _249) (-1, _253) 0 ]",
    "EXPR [ (1, _252, _253) (-1, _253) 0 ]",
    "EXPR [ (-1, _253) (-1, _254) 1 ]",
    "EXPR [ (1, _244, _245) (1, _243) (-1, _255) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(155))], q_c: -69 })], outputs: [Simple(Witness(256))]",
    "EXPR [ (1, _155, _256) (-69, _256) (1, _257) -1 ]",
    "EXPR [ (1, _155, _257) (-69, _257) 0 ]",
    "EXPR [ (-1, _254, _255) (-1, _253) (-1, _258) 1 ]",
    "EXPR [ (-1, _257) (-1, _259) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(155))], q_c: 187 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(260)), Simple(Witness(261))]",
    "BLACKBOX::RANGE [_260]:1 bits []",
    "BLACKBOX::RANGE [_261]:8 bits []",
    "EXPR [ (1, _155) (-256, _260) (-1, _261) 187 ]",
    "EXPR [ (-1, _260) (-1, _262) 1 ]",
    "EXPR [ (1, _258, _259) (-1, _263) 0 ]",
    "EXPR [ (1, _262, _263) (-1, _263) 0 ]",
    "EXPR [ (-1, _263) (-1, _264) 1 ]",
    "EXPR [ (1, _254, _255) (1, _253) (-1, _265) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(154))], q_c: -182 })], outputs: [Simple(Witness(266))]",
    "EXPR [ (1, _154, _266) (-182, _266) (1, _267) -1 ]",
    "EXPR [ (1, _154, _267) (-182, _267) 0 ]",
    "EXPR [ (-1, _264, _265) (-1, _263) (-1, _268) 1 ]",
    "EXPR [ (-1, _267) (-1, _269) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(154))], q_c: 74 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(270)), Simple(Witness(271))]",
    "BLACKBOX::RANGE [_270]:1 bits []",
    "BLACKBOX::RANGE [_271]:8 bits []",
    "EXPR [ (1, _154) (-256, _270) (-1, _271) 74 ]",
    "EXPR [ (-1, _270) (-1, _272) 1 ]",
    "EXPR [ (1, _268, _269) (-1, _273) 0 ]",
    "EXPR [ (1, _272, _273) (-1, _273) 0 ]",
    "EXPR [ (-1, _273) (-1, _274) 1 ]",
    "EXPR [ (1, _264, _265) (1, _263) (-1, _275) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(153))], q_c: -129 })], outputs: [Simple(Witness(276))]",
    "EXPR [ (1, _153, _276) (-129, _276) (1, _277) -1 ]",
    "EXPR [ (1, _153, _277) (-129, _277) 0 ]",
    "EXPR [ (-1, _274, _275) (-1, _273) (-1, _278) 1 ]",
    "EXPR [ (-1, _277) (-1, _279) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(153))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(280)), Simple(Witness(281))]",
    "BLACKBOX::RANGE [_280]:1 bits []",
    "BLACKBOX::RANGE [_281]:8 bits []",
    "EXPR [ (1, _153) (-256, _280) (-1, _281) 127 ]",
    "EXPR [ (-1, _280) (-1, _282) 1 ]",
    "EXPR [ (1, _278, _279) (-1, _283) 0 ]",
    "EXPR [ (1, _282, _283) (-1, _283) 0 ]",
    "EXPR [ (-1, _283) (-1, _284) 1 ]",
    "EXPR [ (1, _274, _275) (1, _273) (-1, _285) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(152))], q_c: -129 })], outputs: [Simple(Witness(286))]",
    "EXPR [ (1, _152, _286) (-129, _286) (1, _287) -1 ]",
    "EXPR [ (1, _152, _287) (-129, _287) 0 ]",
    "EXPR [ (-1, _284, _285) (-1, _283) (-1, _288) 1 ]",
    "EXPR [ (-1, _287) (-1, _289) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(152))], q_c: 127 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(290)), Simple(Witness(291))]",
    "BLACKBOX::RANGE [_290]:1 bits []",
    "BLACKBOX::RANGE [_291]:8 bits []",
    "EXPR [ (1, _152) (-256, _290) (-1, _291) 127 ]",
    "EXPR [ (-1, _290) (-1, _292) 1 ]",
    "EXPR [ (1, _288, _289) (-1, _293) 0 ]",
    "EXPR [ (1, _292, _293) (-1, _293) 0 ]",
    "EXPR [ (-1, _293) (-1, _294) 1 ]",
    "EXPR [ (1, _284, _285) (1, _283) (-1, _295) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(151))], q_c: -88 })], outputs: [Simple(Witness(296))]",
    "EXPR [ (1, _151, _296) (-88, _296) (1, _297) -1 ]",
    "EXPR [ (1, _151, _297) (-88, _297) 0 ]",
    "EXPR [ (-1, _294, _295) (-1, _293) (-1, _298) 1 ]",
    "EXPR [ (-1, _297) (-1, _299) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(151))], q_c: 168 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(300)), Simple(Witness(301))]",
    "BLACKBOX::RANGE [_300]:1 bits []",
    "BLACKBOX::RANGE [_301]:8 bits []",
    "EXPR [ (1, _151) (-256, _300) (-1, _301) 168 ]",
    "EXPR [ (-1, _300) (-1, _302) 1 ]",
    "EXPR [ (1, _298, _299) (-1, _303) 0 ]",
    "EXPR [ (1, _302, _303) (-1, _303) 0 ]",
    "EXPR [ (-1, _303) (-1, _304) 1 ]",
    "EXPR [ (1, _294, _295) (1, _293) (-1, _305) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(150))], q_c: -93 })], outputs: [Simple(Witness(306))]",
    "EXPR [ (1, _150, _306) (-93, _306) (1, _307) -1 ]",
    "EXPR [ (1, _150, _307) (-93, _307) 0 ]",
    "EXPR [ (-1, _304, _305) (-1, _303) (-1, _308) 1 ]",
    "EXPR [ (-1, _307) (-1, _309) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(150))], q_c: 163 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(310)), Simple(Witness(311))]",
    "BLACKBOX::RANGE [_310]:1 bits []",
    "BLACKBOX::RANGE [_311]:8 bits []",
    "EXPR [ (1, _150) (-256, _310) (-1, _311) 163 ]",
    "EXPR [ (-1, _310) (-1, _312) 1 ]",
    "EXPR [ (1, _308, _309) (-1, _313) 0 ]",
    "EXPR [ (1, _312, _313) (-1, _313) 0 ]",
    "EXPR [ (-1, _313) (-1, _314) 1 ]",
    "EXPR [ (1, _304, _305) (1, _303) (-1, _315) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: -40 })], outputs: [Simple(Witness(316))]",
    "EXPR [ (1, _149, _316) (-40, _316) (1, _317) -1 ]",
    "EXPR [ (1, _149, _317) (-40, _317) 0 ]",
    "EXPR [ (-1, _314, _315) (-1, _313) (-1, _318) 1 ]",
    "EXPR [ (-1, _317) (-1, _319) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(149))], q_c: 216 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(320)), Simple(Witness(321))]",
    "BLACKBOX::RANGE [_320]:1 bits []",
    "BLACKBOX::RANGE [_321]:8 bits []",
    "EXPR [ (1, _149) (-256, _320) (-1, _321) 216 ]",
    "EXPR [ (-1, _320) (-1, _322) 1 ]",
    "EXPR [ (1, _318, _319) (-1, _323) 0 ]",
    "EXPR [ (1, _322, _323) (-1, _323) 0 ]",
    "EXPR [ (-1, _323) (-1, _324) 1 ]",
    "EXPR [ (1, _314, _315) (1, _313) (-1, _325) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(148))], q_c: -51 })], outputs: [Simple(Witness(326))]",
    "EXPR [ (1, _148, _326) (-51, _326) (1, _327) -1 ]",
    "EXPR [ (1, _148, _327) (-51, _327) 0 ]",
    "EXPR [ (-1, _324, _325) (-1, _323) (-1, _328) 1 ]",
    "EXPR [ (-1, _327) (-1, _329) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(148))], q_c: 205 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(330)), Simple(Witness(331))]",
    "BLACKBOX::RANGE [_330]:1 bits []",
    "BLACKBOX::RANGE [_331]:8 bits []",
    "EXPR [ (1, _148) (-256, _330) (-1, _331) 205 ]",
    "EXPR [ (-1, _330) (-1, _332) 1 ]",
    "EXPR [ (1, _328, _329) (-1, _333) 0 ]",
    "EXPR [ (1, _332, _333) (-1, _333) 0 ]",
    "EXPR [ (-1, _333) (-1, _334) 1 ]",
    "EXPR [ (1, _324, _325) (1, _323) (-1, _335) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(147))], q_c: -232 })], outputs: [Simple(Witness(336))]",
    "EXPR [ (1, _147, _336) (-232, _336) (1, _337) -1 ]",
    "EXPR [ (1, _147, _337) (-232, _337) 0 ]",
    "EXPR [ (-1, _334, _335) (-1, _333) (-1, _338) 1 ]",
    "EXPR [ (-1, _337) (-1, _339) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(147))], q_c: 24 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(340)), Simple(Witness(341))]",
    "BLACKBOX::RANGE [_340]:1 bits []",
    "BLACKBOX::RANGE [_341]:8 bits []",
    "EXPR [ (1, _147) (-256, _340) (-1, _341) 24 ]",
    "EXPR [ (-1, _340) (-1, _342) 1 ]",
    "EXPR [ (1, _338, _339) (-1, _343) 0 ]",
    "EXPR [ (1, _342, _343) (-1, _343) 0 ]",
    "EXPR [ (-1, _343) (-1, _344) 1 ]",
    "EXPR [ (1, _334, _335) (1, _333) (-1, _345) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: -72 })], outputs: [Simple(Witness(346))]",
    "EXPR [ (1, _146, _346) (-72, _346) (1, _347) -1 ]",
    "EXPR [ (1, _146, _347) (-72, _347) 0 ]",
    "EXPR [ (-1, _344, _345) (-1, _343) (-1, _348) 1 ]",
    "EXPR [ (-1, _347) (-1, _349) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(146))], q_c: 184 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(350)), Simple(Witness(351))]",
    "BLACKBOX::RANGE [_350]:1 bits []",
    "BLACKBOX::RANGE [_351]:8 bits []",
    "EXPR [ (1, _146) (-256, _350) (-1, _351) 184 ]",
    "EXPR [ (-1, _350) (-1, _352) 1 ]",
    "EXPR [ (1, _348, _349) (-1, _353) 0 ]",
    "EXPR [ (1, _352, _353) (-1, _353) 0 ]",
    "EXPR [ (-1, _353) (-1, _354) 1 ]",
    "EXPR [ (1, _344, _345) (1, _343) (-1, _355) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(145))], q_c: -121 })], outputs: [Simple(Witness(356))]",
    "EXPR [ (1, _145, _356) (-121, _356) (1, _357) -1 ]",
    "EXPR [ (1, _145, _357) (-121, _357) 0 ]",
    "EXPR [ (-1, _354, _355) (-1, _353) (-1, _358) 1 ]",
    "EXPR [ (-1, _357) (-1, _359) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(145))], q_c: 135 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(360)), Simple(Witness(361))]",
    "BLACKBOX::RANGE [_360]:1 bits []",
    "BLACKBOX::RANGE [_361]:8 bits []",
    "EXPR [ (1, _145) (-256, _360) (-1, _361) 135 ]",
    "EXPR [ (-1, _360) (-1, _362) 1 ]",
    "EXPR [ (1, _358, _359) (-1, _363) 0 ]",
    "EXPR [ (1, _362, _363) (-1, _363) 0 ]",
    "EXPR [ (-1, _363) (-1, _364) 1 ]",
    "EXPR [ (1, _354, _355) (1, _353) (-1, _365) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(144))], q_c: -185 })], outputs: [Simple(Witness(366))]",
    "EXPR [ (1, _144, _366) (-185, _366) (1, _367) -1 ]",
    "EXPR [ (1, _144, _367) (-185, _367) 0 ]",
    "EXPR [ (-1, _364, _365) (-1, _363) (-1, _368) 1 ]",
    "EXPR [ (-1, _367) (-1, _369) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(144))], q_c: 71 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(370)), Simple(Witness(371))]",
    "BLACKBOX::RANGE [_370]:1 bits []",
    "BLACKBOX::RANGE [_371]:8 bits []",
    "EXPR [ (1, _144) (-256, _370) (-1, _371) 71 ]",
    "EXPR [ (-1, _370) (-1, _372) 1 ]",
    "EXPR [ (1, _368, _369) (-1, _373) 0 ]",
    "EXPR [ (1, _372, _373) (-1, _373) 0 ]",
    "EXPR [ (-1, _373) (-1, _374) 1 ]",
    "EXPR [ (1, _364, _365) (1, _363) (-1, _375) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(143))], q_c: -112 })], outputs: [Simple(Witness(376))]",
    "EXPR [ (1, _143, _376) (-112, _376) (1, _377) -1 ]",
    "EXPR [ (1, _143, _377) (-112, _377) 0 ]",
    "EXPR [ (-1, _374, _375) (-1, _373) (-1, _378) 1 ]",
    "EXPR [ (-1, _377) (-1, _379) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(143))], q_c: 144 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(380)), Simple(Witness(381))]",
    "BLACKBOX::RANGE [_380]:1 bits []",
    "BLACKBOX::RANGE [_381]:8 bits []",
    "EXPR [ (1, _143) (-256, _380) (-1, _381) 144 ]",
    "EXPR [ (-1, _380) (-1, _382) 1 ]",
    "EXPR [ (1, _378, _379) (-1, _383) 0 ]",
    "EXPR [ (1, _382, _383) (-1, _383) 0 ]",
    "EXPR [ (-1, _383) (-1, _384) 1 ]",
    "EXPR [ (1, _374, _375) (1, _373) (-1, _385) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(142))], q_c: -145 })], outputs: [Simple(Witness(386))]",
    "EXPR [ (1, _142, _386) (-145, _386) (1, _387) -1 ]",
    "EXPR [ (1, _142, _387) (-145, _387) 0 ]",
    "EXPR [ (-1, _384, _385) (-1, _383) (-1, _388) 1 ]",
    "EXPR [ (-1, _387) (-1, _389) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(142))], q_c: 111 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(390)), Simple(Witness(391))]",
    "BLACKBOX::RANGE [_390]:1 bits []",
    "BLACKBOX::RANGE [_391]:8 bits []",
    "EXPR [ (1, _142) (-256, _390) (-1, _391) 111 ]",
    "EXPR [ (-1, _390) (-1, _392) 1 ]",
    "EXPR [ (1, _388, _389) (-1, _393) 0 ]",
    "EXPR [ (1, _392, _393) (-1, _393) 0 ]",
    "EXPR [ (-1, _393) (-1, _394) 1 ]",
    "EXPR [ (1, _384, _385) (1, _383) (-1, _395) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: -67 })], outputs: [Simple(Witness(396))]",
    "EXPR [ (1, _141, _396) (-67, _396) (1, _397) -1 ]",
    "EXPR [ (1, _141, _397) (-67, _397) 0 ]",
    "EXPR [ (-1, _394, _395) (-1, _393) (-1, _398) 1 ]",
    "EXPR [ (-1, _397) (-1, _399) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(141))], q_c: 189 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(400)), Simple(Witness(401))]",
    "BLACKBOX::RANGE [_400]:1 bits []",
    "BLACKBOX::RANGE [_401]:8 bits []",
    "EXPR [ (1, _141) (-256, _400) (-1, _401) 189 ]",
    "EXPR [ (-1, _400) (-1, _402) 1 ]",
    "EXPR [ (1, _398, _399) (-1, _403) 0 ]",
    "EXPR [ (1, _402, _403) (-1, _403) 0 ]",
    "EXPR [ (-1, _403) (-1, _404) 1 ]",
    "EXPR [ (1, _394, _395) (1, _393) (-1, _405) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: -225 })], outputs: [Simple(Witness(406))]",
    "EXPR [ (1, _140, _406) (-225, _406) (1, _407) -1 ]",
    "EXPR [ (1, _140, _407) (-225, _407) 0 ]",
    "EXPR [ (-1, _404, _405) (-1, _403) (-1, _408) 1 ]",
    "EXPR [ (-1, _407) (-1, _409) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(140))], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(410)), Simple(Witness(411))]",
    "BLACKBOX::RANGE [_410]:1 bits []",
    "BLACKBOX::RANGE [_411]:8 bits []",
    "EXPR [ (1, _140) (-256, _410) (-1, _411) 31 ]",
    "EXPR [ (-1, _410) (-1, _412) 1 ]",
    "EXPR [ (1, _408, _409) (-1, _413) 0 ]",
    "EXPR [ (1, _412, _413) (-1, _413) 0 ]",
    "EXPR [ (-1, _413) (-1, _414) 1 ]",
    "EXPR [ (1, _404, _405) (1, _403) (-1, _415) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(139))], q_c: -245 })], outputs: [Simple(Witness(416))]",
    "EXPR [ (1, _139, _416) (-245, _416) (1, _417) -1 ]",
    "EXPR [ (1, _139, _417) (-245, _417) 0 ]",
    "EXPR [ (-1, _414, _415) (-1, _413) (-1, _418) 1 ]",
    "EXPR [ (-1, _417) (-1, _419) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(139))], q_c: 11 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(420)), Simple(Witness(421))]",
    "BLACKBOX::RANGE [_420]:1 bits []",
    "BLACKBOX::RANGE [_421]:8 bits []",
    "EXPR [ (1, _139) (-256, _420) (-1, _421) 11 ]",
    "EXPR [ (-1, _420) (-1, _422) 1 ]",
    "EXPR [ (1, _418, _419) (-1, _423) 0 ]",
    "EXPR [ (1, _422, _423) (-1, _423) 0 ]",
    "EXPR [ (-1, _423) (-1, _424) 1 ]",
    "EXPR [ (1, _414, _415) (1, _413) (-1, _425) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(138))], q_c: -147 })], outputs: [Simple(Witness(426))]",
    "EXPR [ (1, _138, _426) (-147, _426) (1, _427) -1 ]",
    "EXPR [ (1, _138, _427) (-147, _427) 0 ]",
    "EXPR [ (-1, _424, _425) (-1, _423) (-1, _428) 1 ]",
    "EXPR [ (-1, _427) (-1, _429) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(138))], q_c: 109 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(430)), Simple(Witness(431))]",
    "BLACKBOX::RANGE [_430]:1 bits []",
    "BLACKBOX::RANGE [_431]:8 bits []",
    "EXPR [ (1, _138) (-256, _430) (-1, _431) 109 ]",
    "EXPR [ (-1, _430) (-1, _432) 1 ]",
    "EXPR [ (1, _428, _429) (-1, _433) 0 ]",
    "EXPR [ (1, _432, _433) (-1, _433) 0 ]",
    "EXPR [ (-1, _433) (-1, _434) 1 ]",
    "EXPR [ (1, _424, _425) (1, _423) (-1, _435) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(137))], q_c: -240 })], outputs: [Simple(Witness(436))]",
    "EXPR [ (1, _137, _436) (-240, _436) (1, _437) -1 ]",
    "EXPR [ (1, _137, _437) (-240, _437) 0 ]",
    "EXPR [ (-1, _434, _435) (-1, _433) (-1, _438) 1 ]",
    "EXPR [ (-1, _437) (-1, _439) 1 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(137))], q_c: 16 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(440)), Simple(Witness(441))]",
    "BLACKBOX::RANGE [_440]:1 bits []",
    "BLACKBOX::RANGE [_441]:8 bits []",
    "EXPR [ (1, _137) (-256, _440) (-1, _441) 16 ]",
    "EXPR [ (-1, _440) (-1, _442) 1 ]",
    "EXPR [ (1, _438, _439) (-1, _443) 0 ]",
    "EXPR [ (1, _442, _443) (-1, _443) 0 ]",
    "EXPR [ (-1, _443) (-1, _444) 1 ]",
    "EXPR [ (1, _434, _435) (1, _433) (-1, _445) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(136))], q_c: 0 })], outputs: [Simple(Witness(446))]",
    "EXPR [ (1, _136, _446) (1, _447) -1 ]",
    "EXPR [ (1, _136, _447) 0 ]",
    "EXPR [ (-1, _444, _445) (-1, _443) (-1, _448) 1 ]",
    "EXPR [ (-1, _447) (-1, _449) 1 ]",
    "EXPR [ (-1, _448, _449) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(135))], q_c: 0 })], outputs: [Simple(Witness(450))]",
    "EXPR [ (1, _135, _450) (1, _451) -1 ]",
    "EXPR [ (1, _135, _451) 0 ]",
    "EXPR [ (1, _448, _451) (-1, _448) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(134))], q_c: -1 })], outputs: [Simple(Witness(452))]",
    "EXPR [ (1, _134, _452) (-1, _452) (1, _453) -1 ]",
    "EXPR [ (1, _134, _453) (-1, _453) 0 ]",
    "EXPR [ (-1, _448, _453) (1, _448) (-1, _454) 0 ]",
    "EXPR [ (1, _134, _454) 0 ]",
    "EXPR [ (-1, _454) (-1, _455) 1 ]",
    "EXPR [ (1, _444, _445) (1, _443) (-1, _456) 0 ]",
    "EXPR [ (1, _455, _456) (1, _454) -1 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(457))]",
    "EXPR [ (1, _0, _457) (1, _458) -1 ]",
    "EXPR [ (1, _0, _458) 0 ]",
    "EXPR [ (-1, _459) 10 ]",
    "INIT (id: 9, len: 5, witnesses: [_13, _13, _459, _14, _459])",
    "EXPR [ (-4, _458) (-1, _460) 4 ]",
    "MEM (id: 9, read at: EXPR [ (1, _460) 0 ], value: EXPR [ (1, _461) 0 ]) ",
    "EXPR [ (1, _458, _461) (-10, _458) (-1, _462) 10 ]",
    "MEM (id: 9, write EXPR [ (1, _462) 0 ] at: EXPR [ (1, _460) 0 ]) ",
    "MEM (id: 9, read at: EXPR [ (1, _13) 0 ], value: EXPR [ (1, _463) 0 ]) ",
    "EXPR [ (-1, _458) (-1, _464) 1 ]",
    "MEM (id: 9, read at: EXPR [ (1, _464) 0 ], value: EXPR [ (1, _465) 0 ]) ",
    "EXPR [ (-2, _458) (-1, _466) 2 ]",
    "MEM (id: 9, read at: EXPR [ (1, _466) 0 ], value: EXPR [ (1, _467) 0 ]) ",
    "EXPR [ (-3, _458) (-1, _468) 3 ]",
    "MEM (id: 9, read at: EXPR [ (1, _468) 0 ], value: EXPR [ (1, _469) 0 ]) ",
    "EXPR [ (-4, _458) (-1, _470) 4 ]",
    "MEM (id: 9, read at: EXPR [ (1, _470) 0 ], value: EXPR [ (1, _471) 0 ]) ",
    "EXPR [ (2, _458, _458) (-3, _458) 0 ]",
    "EXPR [ (-10, _458) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "pZvNbtw4FkbfpdZekLw/JPtVBoOGkzgNA4YTOEkDg6DffXRLPFSykJBmNr6f7apj6oqHomT7++3D07tvf/35/Prx05fbH//5fnv39vzy8vzXny+f3j9+ff70un31+z8PNz798+vb09P2pdsP39/e9fnx7en16+2P128vLw+3vx9fvt1f9OXz4+u9fn18276bHm5Prx+2ugE/Pr88Rfrn4Xh3On9rERtvLlbn2+2X35/dygBkb/mMUC5G0E0YQq96RpBzgiRnDJLa6VHoOUGt6SCo9bRC8DQJnvPKUeTEeZScfYkgB0GXOpldJ6H1M0K/6EOfY9CutkSofRL60lGUNOdDyW2JIAfh/CguCW6T0E/HkC+mlB2DsKJ1CSFzTpnkpePY5iLHIaUuEfQg2NL5lDpnpabzRlxMKlNhUpmen9BLhKeJ8KJrCD0Qvohoc1J4XzofWuYqobK0zqgdBJclQq2T0JdWS0vTL8t9iTCnhFg97UNpFyejdxCe0hLCU7GJ0LSG8APR1hB5zgnPYmuj6DoRKa+Nwo9R1KXVyto8p56WCJ4PgpQlgvokeFoiHOudt6XrVz2ugHVtL1GPvURd20tUO8bQTglxcTidEIeibiZrCG8TsTqKPhGbYEsIF58IS2uIw/KLjfY1ok9ETUvntCX26tLkvBVXkrfMtNjiEqKmecdQky8i+kTk84XiEpFnN2tJS1fiZnNn1HyJ0Oe8km5La81xCdN0vhswu2iEFfyoJnUNMVe8auf3HdcIPUZhtoRwnZPiwtJrhPeJaCuKadLjhLgt3VC3uXSndHoYfoHQYz+g+Xy77PLbt9SXiF+7p74+kHlDu0VbQ/Q8Eb0sIcpc87SUtoaY01tLPb0U+u/fmvvv35tfH0g/etFlDdH8QPQlxPasBMR2f76GOESVdjovqv32Hf4l4tfu8C8PRNOc4JrWJrjMa+GGWJvgmxkTcb61uHoUWeejilzPz2m72CG1NBEtnd/jt4vj8D676T0f53Tb6vyEuFj3WlEWrVa8nCIuRlGP5aIW899G/PCw4l8h5uaibk8klxA/7LJyXzsQnbfYWzw/I5fzYu6zWtKyNDnng/Zc/fzJ6tUgcgPR8vlDk0tEmfem28xaRPSJkLyGEJGJ0LVeiB+I84c314jOytm2re8SQnOdCFnrxfY0ciKsrSFqmYj2cy/+u332+P757adfO93SNgkfbnl7ycOt3D/K/aNua9bDze4f/f4xby/dDjFvr90Wg7y9OHYyWUbVUbe3xPU0e8zurdawa6tt243GT+pb3V5X0qh51LJ/v8j4XEe1UX3UOmobdfBk8GTwpIw6eDJ4MngyeDJ4MngyeBq87Tg0j1pGlVF1VBvVR62jtlH7Xm3wbPBs8GzwbPAseNuSb8HbzoMFL85E8LZ+Wo/fx2znJI2aRy2xxd+qjKrj6zaqj1pHbaMOXh28Oni1jCqjDl4N3taf6qPWUdv+c2vfa0v711setYwqo+qog9cGrw1ea6P2vfbB64PXB68PXh+8Pnh98Prg9cHrg7f9ho2QCYUgBCUYwQmV0AiQM+QMOUPOkDPkDDlDDmNEIzRCHyGk2UMmFIIQlGAEJ0AukAtkgSyQBbJAFsgCWSALZIEcHsVlLodIccXMYZLEihAqSSwJ4VI81cshk6YIFvv4CE6ohEboscmMlSbF/jBCjhvLCBtZ40eEVfFAJYdWezCCEyqhEXpsvmPtSoRMKAQhBPm+0AU5DjAUs/jp4dgeGqGPEJp5/KzwLO5Hc4i2ByHEehvAcGsPjdBHCL32EJwgh2B7EIISYhm/r8EeG7EIldAIfYQQbQ+ZUGLPFkFi2xRhI9cAhm17cEIlBDlObhgXTyFKGBcPAkoYt4dCEIISjOCESmiEPkKGnCFnyBlyhpwhZ8gZcoacIRfIBXKBXCAXyAVygVwgF8gFskAWyAJZIIdxcX9bwrg9OCHINUIj9BHCuD1kQhnvCuP2ADmM21/jBMgKWSEbZINskA2yQTbGbIzZIBtkg+yQHXIYtwchKIExO+Qwbg+N0EcI4/YAuUKukCvkCrnSjcqYK2OujLlBDgf3QDca3Wh0o0FukBvkBrlB7nSjM+bOmDtj7pA7fe50o9ONTjf6IEtKhEwoBCEowQhOqIRBljT6LDkRMqEQIGfIGXKGnCHnRmDMhTEXxlwgFyEowQhOgFwgF8gCWSAL3RDGLIxZGDMOilQC3RC6oXQDB0UhK2SFjIOCg4KDgoOCg2KQjT7joOCg4KAYZIOMg4KDgoOCg4KDgoOCg+KQnT7joOCg4KA45AoZBwUHBQcFBwUHBQcFB6VCrvQZBwUHBQelQW6QcVBwUHBQcFBwUHBQcFA65E6fcVBwUHBQOuQOGQcVBxUHFQcVBxUHFQc1DbKmSmiE0Q3FQc2QM2QcVBxUHFQcVBxUHFQc1AK5ZEIhCEEJkAtkHFQcVBxUHFQcVBxUHFSug8p1UHFQcVBxULkOKtdBxUHFQcVBxUHFQcVBxUFVyEqfcVBxUHFQDbJBxkHFQcVBxUHFQcVBxUF1yE6fcVBxUHFQHbJDxkHFQcVBxUHFQcVBxUGtkCt9xkHFQcVBbZAbZBxUHFQcVBxUHFQcVBzUDrnTZxxUHFQc1A65Q8ZBxUHFQcNBw0HDQcNBS4NsyQhOqIRGgJwh46DhoOGg4aDhoOGg4aBlyHn02XDQcNBw0ArkAhkHDQcNBw0HDQcNBw0HTSCLEOgGDhoOGntRYy9qOGg4aDhoOGg4aDhoOGgKWekzDhoOGg4ae1EzyDhoOGg4aDhoOGg4aDhoDtnpMw4aDhoOGntRc8g4aDhoOGg4aDhoOGg4aBVypc84aDhoOGjsRa1BxkHDQcNBw0HDQcNBw0FrkBt9xkHDQcNBYy9qHTIOGg4aDhoOGg46DjoOehpkT0JQghGcUHlXI0DGQcdBx0HHQcdBx0HPkHMlNMLohuOgsxf1AhkHHQcdBx0HHQcdBx0HXSBLJtANHHQcdPaijoPOddC5DjoOOntRV8jcDzoOOg46DjrXQb872CNs5H5/tNhHCAf3sJHjr2g8HNyDEJRgBCdUQiP0EcLBPUB2yA7ZITvkcDB+R+ThYL7/vcPfj2/Pj+9enr7c7v9j8fHb6/sf/uXi6/8+8x3+KePz26f3Tx++vT3Fc/L797Yn5/8H",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "use std::slice;\n\nfn main(x: Field, y: pub Field) {\n    let mut slice = &[0; 2];\n    assert(slice[0] == 0);\n    assert(slice[0] != 1);\n    slice[0] = x;\n    assert(slice[0] == x);\n\n    let slice_plus_10 = slice.push_back(y);\n    assert(slice_plus_10[2] == 10);\n    assert(slice_plus_10[2] != 8);\n    assert(slice_plus_10.len() == 3);\n\n    let mut new_slice = &[];\n    for i in 0..5 {\n        new_slice = new_slice.push_back(i);\n    }\n    assert(new_slice.len() == 5);\n\n    new_slice = new_slice.push_front(20);\n    assert(new_slice[0] == 20);\n    assert(new_slice.len() == 6);\n\n    let (popped_slice, last_elem) = new_slice.pop_back();\n    assert(last_elem == 4);\n    assert(popped_slice.len() == 5);\n\n    let (first_elem, rest_of_slice) = popped_slice.pop_front();\n    assert(first_elem == 20);\n    assert(rest_of_slice.len() == 4);\n\n    new_slice = rest_of_slice.insert(2, 100);\n    assert(new_slice[2] == 100);\n    assert(new_slice[4] == 3);\n    assert(new_slice.len() == 5);\n\n    let (remove_slice, removed_elem) = new_slice.remove(3);\n    assert(removed_elem == 2);\n    assert(remove_slice[3] == 3);\n    assert(remove_slice.len() == 4);\n\n    let append = &[1, 2].append(&[3, 4, 5]);\n    assert(append.len() == 5);\n    assert(append[0] == 1);\n    assert(append[4] == 5);\n\n    let mapped = &[1, 2].map(|x| x + 1);\n    assert_eq(mapped, &[2, 3]);\n\n    assert_eq(&[1, 2, 3].fold(0, |acc, x| acc + x), 6);\n    assert_eq(&[1, 2, 3].reduce(|acc, x| acc + x), 6);\n    assert(&[2, 4, 6].all(|x| x > 0));\n    assert(&[2, 4, 6].any(|x| x > 5));\n\n    regression_2083();\n    // The parameters to this function must come from witness values (inputs to main)\n    regression_merge_slices(x, y);\n    regression_2370();\n\n    regression_4418(x);\n    regression_slice_call_result(x, y);\n    regression_4506();\n}\n\n// Ensure that slices of struct/tuple values work.\nfn regression_2083() {\n    let y = &[(1, 2)];\n    let y = y.push_back((3, 4)); // [(1, 2), (3, 4)]\n    let y = y.push_back((5, 6)); // [(1, 2), (3, 4), (5, 6)]\n    assert(y[2].1 == 6);\n\n    let y = y.push_front((10, 11)); // [(10, 11), (1, 2), (3, 4), (5, 6)]\n    let y = y.push_front((12, 13)); // [(12, 13), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[1].0 == 10);\n\n    let y = y.insert(1, (55, 56)); // [(12, 13), (55, 56), (10, 11), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].1 == 13);\n    assert(y[1].1 == 56);\n    assert(y[2].0 == 10);\n\n    let (y, x) = y.remove(2); // [(12, 13), (55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[2].0 == 1);\n    assert(x.0 == 10);\n    assert(x.1 == 11);\n\n    let (x, y) = y.pop_front(); // [(55, 56), (1, 2), (3, 4), (5, 6)]\n    assert(y[0].0 == 55);\n    assert(x.0 == 12);\n    assert(x.1 == 13);\n\n    let (y, x) = y.pop_back(); // [(55, 56), (1, 2), (3, 4)]\n    assert(y.len() == 3);\n    assert(x.0 == 5);\n    assert(x.1 == 6);\n}\n\n// The parameters to this function must come from witness values (inputs to main)\nfn regression_merge_slices(x: Field, y: Field) {\n    merge_slices_if(x, y);\n    merge_slices_else(x);\n}\n\nfn merge_slices_if(x: Field, y: Field) {\n    let slice = merge_slices_return(x, y);\n    assert(slice.len() == 3);\n    assert(slice[2] == 10);\n\n    let slice = merge_slices_mutate(x, y);\n    assert(slice.len() == 4);\n    assert(slice[3] == 5);\n\n    let slice = merge_slices_mutate_in_loop(x, y);\n    assert(slice.len() == 7);\n    assert(slice[6] == 4);\n\n    let slice = merge_slices_mutate_two_ifs(x, y);\n    assert(slice.len() == 6);\n    assert(slice[3] == 5);\n    assert(slice[4] == 15);\n    assert(slice[5] == 30);\n\n    let slice = merge_slices_mutate_between_ifs(x, y);\n    assert(slice.len() == 8);\n    assert(slice[3] == 5);\n    assert(slice[4] == 30);\n    assert(slice[5] == 15);\n    assert(slice[6] == 50);\n    assert(slice[7] == 60);\n\n    merge_slices_push_then_pop(x, y);\n\n    let slice = merge_slices_push_then_insert(x, y);\n    assert(slice.len() == 7);\n    assert(slice[1] == 50);\n    assert(slice[2] == 0);\n    assert(slice[5] == 30);\n    assert(slice[6] == 100);\n\n    let slice = merge_slices_remove_between_ifs(x, y);\n    assert(slice.len() == 5);\n}\n\nfn merge_slices_else(x: Field) {\n    let slice = merge_slices_return(x, 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice.len() == 2);\n\n    let slice = merge_slices_mutate(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n\n    let slice = merge_slices_mutate_in_loop(x, 5);\n    assert(slice[2] == 5);\n    assert(slice.len() == 3);\n}\n\n// Test returning a merged slice without a mutation\nfn merge_slices_return(x: Field, y: Field) -> [Field] {\n    let slice = &[0; 2];\n    if x != y {\n        if x != 20 {\n            slice.push_back(y)\n        } else {\n            slice\n        }\n    } else {\n        slice\n    }\n}\n\n// Test mutating a slice inside of an if statement\nfn merge_slices_mutate(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\n// Test mutating a slice inside of a loop in an if statement\nfn merge_slices_mutate_in_loop(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        for i in 0..5 {\n            slice = slice.push_back(i as Field);\n        }\n    } else {\n        slice = slice.push_back(x);\n    }\n    slice\n}\n\nfn merge_slices_mutate_two_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n    slice = slice.push_back(30);\n\n    slice\n}\n\nfn merge_slices_mutate_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice = slice.push_back(60);\n\n    slice\n}\n\nfn merge_slices_push_then_pop(x: Field, y: Field) {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 4);\n    assert(elem == 30);\n\n    let (slice, elem) = slice.pop_back();\n    assert(slice.len() == 3);\n    assert(elem == x);\n}\n\nfn merge_slices_push_then_insert(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    slice = slice.push_back(30);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n        slice = slice.push_back(15);\n    }\n\n    slice = slice.insert(1, 50);\n    // Test that we can use slice insert the same as slice push back\n    slice = slice.insert(6, 100);\n\n    slice\n}\n\nfn merge_slices_remove_between_ifs(x: Field, y: Field) -> [Field] {\n    let mut slice = &[0; 2];\n    if x != y {\n        slice = slice.push_back(y);\n        slice = slice.push_back(x);\n    } else {\n        slice = slice.push_back(x);\n    }\n\n    let (mut slice, elem) = slice.remove(2);\n    assert(elem == y);\n\n    if x == 20 {\n        slice = slice.push_back(20);\n    }\n\n    slice = slice.push_back(15);\n\n    if x != 20 {\n        slice = slice.push_back(50);\n    }\n\n    slice\n}\n// Previously, we'd get a type error when trying to assign an array of a different size to\n// an existing array variable. Now, we infer the variable must be a slice.\nfn regression_2370() {\n    let mut slice = &[];\n    slice = &[1, 2, 3];\n}\n\nfn regression_4418(x: Field) {\n    let mut crash: [u8; 32] = x.to_be_bytes();\n\n    if x != 0 {\n        crash[0] = 10;\n    }\n}\n\nfn regression_slice_call_result(x: Field, y: Field) {\n    let mut slice = merge_slices_return(x, y);\n    if x != 0 {\n        slice = slice.push_back(5);\n        slice = slice.push_back(10);\n    } else {\n        slice = slice.push_back(5);\n    }\n    assert(slice.len() == 5);\n    assert(slice[0] == 0);\n    assert(slice[1] == 0);\n    assert(slice[2] == 10);\n    assert(slice[3] == 5);\n    assert(slice[4] == 10);\n}\n\nfn regression_4506() {\n    let slice: [Field] = &[1, 2, 3];\n    assert(slice == slice);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient",
    "directive_to_radix"
  ]
}
