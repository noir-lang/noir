---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "databus"
      },
      {
        "name": "z",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "databus"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 4,
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        }
      },
      "visibility": "databus"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _38",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_4, 32)] []",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "BLACKBOX::RANGE [(_7, 32)] []",
    "BLACKBOX::RANGE [(_8, 32)] []",
    "BLACKBOX::RANGE [(_9, 32)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 4294967293 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(15)), Simple(Witness(16))]",
    "BLACKBOX::RANGE [(_16, 32)] []",
    "EXPR [ (1, _0) (-4294967296, _15) (-1, _16) 4294967293 ]",
    "EXPR [ (-1, _15) 0 ]",
    "INIT CALLDATA 0 (id: 3, len: 3, witnesses: [_4, _5, _6])",
    "MEM (id: 3, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _17) 0 ]) ",
    "BLACKBOX::RANGE [(_0, 2)] []",
    "INIT CALLDATA 1 (id: 5, len: 4, witnesses: [_7, _8, _9, _10])",
    "MEM (id: 5, read at: EXPR [ (1, _0) 0 ], value: EXPR [ (1, _18) 0 ]) ",
    "EXPR [ (1, _17) (1, _18) (-1, _19) 0 ]",
    "BLACKBOX::RANGE [(_19, 32)] []",
    "EXPR [ (-1, _20) 0 ]",
    "INIT (id: 6, len: 4, witnesses: [_20, _20, _20, _20])",
    "MEM (id: 6, write EXPR [ (1, _19) 0 ] at: EXPR [ (1, _0) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 4294967293 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(21)), Simple(Witness(22))]",
    "BLACKBOX::RANGE [(_22, 32)] []",
    "EXPR [ (1, _1) (-4294967296, _21) (-1, _22) 4294967293 ]",
    "EXPR [ (-1, _21) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _23) 0 ]) ",
    "BLACKBOX::RANGE [(_1, 2)] []",
    "MEM (id: 5, read at: EXPR [ (1, _1) 0 ], value: EXPR [ (1, _24) 0 ]) ",
    "EXPR [ (1, _23) (1, _24) (-1, _25) 0 ]",
    "BLACKBOX::RANGE [(_25, 32)] []",
    "MEM (id: 6, write EXPR [ (1, _25) 0 ] at: EXPR [ (1, _1) 0 ]) ",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 4294967293 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(26)), Simple(Witness(27))]",
    "BLACKBOX::RANGE [(_27, 32)] []",
    "EXPR [ (1, _2) (-4294967296, _26) (-1, _27) 4294967293 ]",
    "EXPR [ (-1, _26) 0 ]",
    "MEM (id: 3, read at: EXPR [ (1, _2) 0 ], value: EXPR [ (1, _28) 0 ]) ",
    "BLACKBOX::RANGE [(_2, 2)] []",
    "MEM (id: 5, read at: EXPR [ (1, _2) 0 ], value: EXPR [ (1, _29) 0 ]) ",
    "EXPR [ (1, _28) (1, _29) (-1, _30) 0 ]",
    "BLACKBOX::RANGE [(_30, 32)] []",
    "MEM (id: 6, write EXPR [ (1, _30) 0 ] at: EXPR [ (1, _2) 0 ]) ",
    "BLACKBOX::RANGE [(_3, 2)] []",
    "MEM (id: 5, read at: EXPR [ (1, _3) 0 ], value: EXPR [ (1, _31) 0 ]) ",
    "MEM (id: 6, write EXPR [ (1, _31) 0 ] at: EXPR [ (1, _3) 0 ]) ",
    "MEM (id: 6, read at: EXPR [ (1, _20) 0 ], value: EXPR [ (1, _32) 0 ]) ",
    "EXPR [ (-1, _33) 1 ]",
    "MEM (id: 6, read at: EXPR [ (1, _33) 0 ], value: EXPR [ (1, _34) 0 ]) ",
    "EXPR [ (-1, _35) 2 ]",
    "MEM (id: 6, read at: EXPR [ (1, _35) 0 ], value: EXPR [ (1, _36) 0 ]) ",
    "EXPR [ (-1, _37) 3 ]",
    "MEM (id: 6, read at: EXPR [ (1, _37) 0 ], value: EXPR [ (1, _38) 0 ]) ",
    "EXPR [ (1, _11) (-1, _32) 0 ]",
    "EXPR [ (1, _12) (-1, _34) 0 ]",
    "EXPR [ (1, _13) (-1, _36) 0 ]",
    "EXPR [ (1, _14) (-1, _38) 0 ]",
    "INIT RETURNDATA (id: 4, len: 4, witnesses: [_11, _12, _13, _14])",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "pZTRboMgFED/hWcfkAui/ZVlaailDQlBQ3XJ0vTfd+WCax+WLPTFU6XnSMBwZ2d7Wq9HFy7TjR0+7uwUnffuevTTaBY3BXx6fzSs3B6XaC0+Yk/jaM0m2rCwQ1i9b9iX8Wv60202IXExEUd5w2w4IzF4cd5uvx7Nr83/VgGKDNDuuvq/r1Xx9VDhSw7Zl7zKb0Xx2/6991f50A/7/HnN+0EXX9asv5S7r+p8tfuiav58n/+r/4l3ZnTx5Ytnmh1ww/p0HdK15YQWFxMhCECQ2EUoQodlhCZgpEMMCYIT2hQTggAESVCpKTqCTk3Rp5gYEoAqQBWgClAFqAJUAaoAVYAqQBVJFYmVHoEV/EYkVlpcKykzVWaXqTP7zIGo+MbHtgPRmZO3+eC4rGF8OkeW77mMlJNmjtNoz2u02w6kMdyTHw==",
  "file_map": {
    "50": {
      "source": "// An simple program demonstrating two calldata array inputs and a single return data array. As an arbitrary example,\n// the return data is computed as a linear combination of the calldata.\nfn main(\n    mut x: [u32; 4],\n    y: call_data(0) [u32; 3],\n    z: call_data(1) [u32; 4],\n) -> return_data [u32; 4] {\n    let mut result = [0; 4];\n    for i in 0..3 {\n        let idx = x[i];\n        result[idx] = y[idx] + z[idx];\n    }\n    result[x[3]] = z[x[3]];\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient"
  ]
}
