---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "databus"
      },
      {
        "name": "z",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "databus"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 4,
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        }
      },
      "visibility": "databus"
    },
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZyY7TQBBtx3YS29kEPxIzDhluM9Ls2z9kMhMhceMH8I0TN+5cQOKAuHBDAok/Iz3TlbyUq52EcQNGtBR1u+u59urF8dR9681/nhkHpvdN78Gcgjnd9kw/fFhLK+Q1dKWjVwMdGzXQ0a9QRw/y1JW+QQ18GtZAx2bFcXe9JrVq4NN2DXSMaqBjXHFuko6Uo8n815n/uup+r11MokF68fbNS7qgdcHoJNRB1k6MAV/KGBz0w/SR6RtAr3AhTiMmt0r+u8PRTqRWW8X63/HHgFXM/5r4h274D1uGz0G+5I+2kFyf4fg7PmAOAXNowRwB5siCOQbMsQVzApgTC+YUMKcWzBlgziyYc8CcWzAXgLmwYC4Bc2nBXAHmimEoJ9zUTJY5zrmsq4qXA7KFZDfdyB55TJ5SqxcWxeTHyml9px6TR/pw/9D62yVMvtTHY7QgL9pBtBBoFF+9T+wDjucW6UGxcbEXzPNu13He7fzBvMv+xbzjtCAv2rFt3mFu8bzzHfhinnfX/9e7euWdz2hBXrRj27yTPlpp3AWMLwGDuYo2eIINjvN35vgMmm1b+zw+GAP07T7zj6N9ZebS/9o/jy3601i3Vq4WzWf+RB+Rz9qIZ7QIaEG+Kic2zwHIQV6kR8jw5+a5b/omvEPvDwT5TSZ/RW9hDn3EefnCHOF1XR+YcWJ+OofemTmq43D5qvIsPcqS6nWgivsBX69dnL11Izuagh0ku+VG9sZ7BcmPldO9a7FXtJg+3D+4FmlaW9B1INA8Nm4LctqCnDryIt+gLx9aH5iHFA/H55nF95Y2068i/inxj9zov7hbx274p/ysiTmgY/KczRMtVMVzGMYxZPhXwPOFGfdVMX9bjIbrP19fce32BXzEeAUlvBpr7IqYXYR/aXqdXx820M+HuQbDS2dc1DNg9uD7/Bwr3ffJhgBoVe4H2gcfQQ9ub5j/Hv8MVHFNKVuLfKazJ9D0+UHKV55HHUFHr8SmroDvCDaR7ARoXUaT6ojrhfmNvHjdEv616aX8lnRvlNjaE/BdwCTMHvRDzyLbZg+vV8K/KbFH0q8sH/sCvldiD9ra30A22t+1yG5a8D1mP+HfqqX93834b1szsIb4mlFWL7ptEiMp5waqGJceo2FNdZgcT5CD+0fMbFy337r0+3h3+echxZzqiLcA6Ih/b57xXKLAtr1f1HM2nqSznclsMprc3GTTySPGXzeKceJA/nT09HqajSbD21Q/PlknX7r/Yh3pRndovGMjHs8eiP9E2PnvsxnzbyQoT+O+leA8S3/HQ5gL8tU56e6N3yQIT7LjvKgj0RKgYY3r1jHP6C/kRXqEDP/VPFNM8DsCvT8Q5LeZ/BW9hTn+TSIR8ImA1/H5QvxMj7ZXfRe+k8n44xzXjXLHRV3NS2o8nYzT9FmW3mbpaF1d/QSIJkNSMSgAAA==",
  "debug_symbols": "pdTRqtswDAbgd/F1LmzLjq2+Siklbd1DIKQlJxmMknefVMk5Z4PByG7y2XV/RRjHL3Mrl+Xj3I/3x6c5HF/mMvXD0H+ch8e1m/vHSL++jOVHdubgGpO9AEIQotAKScgCvkErSBWUKihVUKqgVEGpglLFWVr0LM2BzSrVDaSzKlWOrFdBpXzLRrVVqV5is4qit6pTvQpqUJP05SmfWRTBqk71KqhBpX6QbdWkZhXFYFXeOcsDXwdQB7x/vFch1kFbB6kOdNsCitGqTvUqqEGNKlWEdW1MPRnneSqFD8a3o0IH6NlNZZzNYVyGoTE/umF5/+nz2Y1v526iVeq6jDeSCt77ofBobb7S9u9RgBoGcFs8/ns+Qs3HsCefUfPB2h35AKnmw57+Q9jycV8+bnm/q3+79b8nD6m+HxLueb+Fbf935Z2veZf/7/1/5E8066799NvluXKlqe8uQ9HpfRmv31bnn8+6Ui/f5/S4ltsyFa70dQPT4+ja3LiMp8bQd3psY5PiiS9DXorYuDbw1PEUbePQn1Zu7Bc=",
  "file_map": {
    "50": {
      "source": "// An simple program demonstrating two calldata array inputs and a single return data array. As an arbitrary example,\n// the return data is computed as a linear combination of the calldata.\nfn main(\n    mut x: [u32; 4],\n    y: call_data(0) [u32; 3],\n    z: call_data(1) [u32; 4],\n) -> return_data [u32; 4] {\n    let mut result = [0; 4];\n    for i in 0..3 {\n        let idx = x[i];\n        result[idx] = y[idx] + z[idx];\n    }\n    result[x[3]] = z[x[3]];\n    result\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
