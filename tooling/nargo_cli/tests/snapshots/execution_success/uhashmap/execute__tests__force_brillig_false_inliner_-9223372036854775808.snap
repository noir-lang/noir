---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "4105629585450304037": {
        "error_kind": "string",
        "string": "UHashMap after one insert should have a length of 1 element."
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "6665645948190457319": {
        "error_kind": "string",
        "string": "CtHashMaps should be equal."
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "7511829951750337011": {
        "error_kind": "fmtstring",
        "length": 37,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "8082322909743101849": {
        "error_kind": "string",
        "string": "UHashMap after one insert and corresponding removal should be empty."
      },
      "8591465503772373437": {
        "error_kind": "string",
        "string": "UHashMap after clear() should be empty."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13674703438729013973": {
        "error_kind": "string",
        "string": "UHashMap length is invalid."
      },
      "13848700712118281102": {
        "error_kind": "string",
        "string": "New hashmap should be empty."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14241324264716156348": {
        "error_kind": "string",
        "string": "CtHashMaps should not be equal."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16178254310986598383": {
        "error_kind": "string",
        "string": "New UHashMap should be empty."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16986922238178214607": {
        "error_kind": "string",
        "string": "UHashMap should have retained 2 elements."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "9": {
      "source": "use crate::cmp::Eq;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// An unconstrained hash table with open addressing and quadratic probing.\n// Note that \"unconstrained\" here means that almost all operations on this\n// map are unconstrained and importantly are not constrained afterward either.\n// This map is meant to be used in unconstrained or comptime code where this\n// is not an issue.\n//\n// Compared to the constrained HashMap type, UHashMap can grow automatically\n// as needed and is more efficient since it can break out of loops early.\npub struct UHashMap<K, V, B> {\n    _table: [Slot<K, V>],\n\n    // Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the UHashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, B> UHashMap<K, V, B> {\n    // Creates a new instance of UHashMap with specified BuildHasher.\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = &[Slot::default()];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    pub fn with_hasher_and_capacity<H>(_build_hasher: B, capacity: u32) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let mut _table = &[];\n        for _ in 0..capacity {\n            _table = _table.push_back(Slot::default());\n        }\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    // Clears the map, removing all key-value entries.\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = &[Slot::default()];\n        self._len = 0;\n    }\n\n    // Returns true if the map contains a value for the specified key.\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        // Safety: unconstrained context\n        unsafe { self.get(key) }.is_some()\n    }\n\n    // Returns true if the map contains no elements.\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    // Returns a BoundedVec of all valid entries in this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:entries\n    pub fn entries(self) -> [(K, V)] {\n        // docs:end:entries\n        let mut entries = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries = entries.push_back(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    // Returns a BoundedVec containing all the keys within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:keys\n    pub fn keys(self) -> [K] {\n        // docs:end:keys\n        let mut keys = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys = keys.push_back(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    // Returns a BoundedVec containing all the values within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:values\n    pub fn values(self) -> [V] {\n        // docs:end:values\n        let mut values = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values = values.push_back(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    // For each key-value entry applies mutator function.\n    // docs:start:iter_mut\n    pub unconstrained fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = f(entry.0, entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each key applies mutator function.\n    // docs:start:iter_keys_mut\n    pub unconstrained fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = (f(entry.0), entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each value applies mutator function.\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..self._table.len() {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    // Retains only the elements specified by the predicate.\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..self._table.len() {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    // Amount of active key-value entries.\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    // Get the current capacity of the inner table.\n    // docs:start:capacity\n    pub fn capacity(self: Self) -> u32 {\n        // docs:end:capacity\n        self._table.len()\n    }\n\n    // Get the value by key. If it does not exist, returns none().\n    // docs:start:get\n    pub unconstrained fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, value) = slot.key_value_unchecked();\n                if current_key == key {\n                    result = Option::some(value);\n                    break;\n                }\n            }\n        }\n\n        result\n    }\n\n    // Insert key-value entry. In case key was already present, value is overridden.\n    // docs:start:insert\n    pub unconstrained fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.try_resize();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n            let mut insert = false;\n\n            // Either marked as deleted or has unset key-value.\n            if slot.is_available() {\n                insert = true;\n                self._len += 1;\n            } else {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    insert = true;\n                }\n            }\n\n            if insert {\n                slot.set(key, value);\n                self._table[index] = slot;\n                break;\n            }\n        }\n    }\n\n    unconstrained fn try_resize<H>(&mut self)\n    where\n        B: BuildHasher<H>,\n        K: Eq + Hash,\n        H: Hasher,\n    {\n        if self.len() + 1 >= self.capacity() / 2 {\n            let capacity = self.capacity() * 2;\n            let mut new_map = UHashMap::with_hasher_and_capacity(self._build_hasher, capacity);\n\n            for entry in self.entries() {\n                new_map.insert(entry.0, entry.1);\n            }\n            *self = new_map;\n        }\n    }\n\n    // Removes a key-value entry. If key is not present, UHashMap remains unchanged.\n    // docs:start:remove\n    pub unconstrained fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    slot.mark_deleted();\n                    self._table[index] = slot;\n                    self._len -= 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Apply UHashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % self._table.len()\n    }\n}\n\n// Equality class on UHashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, B, H> Eq for UHashMap<K, V, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    fn eq(self, other: UHashMap<K, V, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    // Safety: unconstrained context\n                    let other_value = unsafe { other.get(key) };\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, B, H> Default for UHashMap<K, V, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        // docs:end:default\n        UHashMap::with_hasher(B::default())\n    }\n}\n",
      "path": "std/collections/umap.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "use std::collections::umap::UHashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> UHashMap::default();\n\nunconstrained fn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nunconstrained fn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"UHashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"UHashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nunconstrained fn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"UHashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nunconstrained fn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"UHashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nunconstrained fn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for entry in input {\n        println(f\"Inserting {entry}\");\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    println(hashmap.len());\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"UHashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nunconstrained fn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"UHashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nunconstrained fn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"CtHashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"CtHashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nunconstrained fn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nunconstrained fn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib cthashmap documentation\nunconstrained fn doc_tests() {\n    // docs:start:default_example\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::default();\n    assert(empty_map.len() == 0);\n    println(empty_map.capacity());\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    let mut map2: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // Safety: testing context\n    let x = unsafe { map.get(12) };\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries[i];\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for key in keys {\n        // Safety: testing context\n        let value = unsafe { map.get(key) }.unwrap_unchecked();\n        println(f\"{key} -> {value}\");\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for value in values {\n        println(f\"Found value {value}\");\n    }\n    // docs:end:values_example\n}\n\nunconstrained fn iter_examples(\n    mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>,\n) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
