---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "4105629585450304037": {
        "error_kind": "string",
        "string": "UHashMap after one insert should have a length of 1 element."
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "6665645948190457319": {
        "error_kind": "string",
        "string": "CtHashMaps should be equal."
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "7511829951750337011": {
        "error_kind": "fmtstring",
        "length": 37,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "8082322909743101849": {
        "error_kind": "string",
        "string": "UHashMap after one insert and corresponding removal should be empty."
      },
      "8591465503772373437": {
        "error_kind": "string",
        "string": "UHashMap after clear() should be empty."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13674703438729013973": {
        "error_kind": "string",
        "string": "UHashMap length is invalid."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14241324264716156348": {
        "error_kind": "string",
        "string": "CtHashMaps should not be equal."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16986922238178214607": {
        "error_kind": "string",
        "string": "UHashMap should have retained 2 elements."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "9": {
      "source": "use crate::cmp::Eq;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// An unconstrained hash table with open addressing and quadratic probing.\n// Note that \"unconstrained\" here means that almost all operations on this\n// map are unconstrained and importantly are not constrained afterward either.\n// This map is meant to be used in unconstrained or comptime code where this\n// is not an issue.\n//\n// Compared to the constrained HashMap type, UHashMap can grow automatically\n// as needed and is more efficient since it can break out of loops early.\npub struct UHashMap<K, V, B> {\n    _table: [Slot<K, V>],\n\n    // Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the UHashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, B> UHashMap<K, V, B> {\n    // Creates a new instance of UHashMap with specified BuildHasher.\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = &[Slot::default()];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    pub fn with_hasher_and_capacity<H>(_build_hasher: B, capacity: u32) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let mut _table = &[];\n        for _ in 0..capacity {\n            _table = _table.push_back(Slot::default());\n        }\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    // Clears the map, removing all key-value entries.\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = &[Slot::default()];\n        self._len = 0;\n    }\n\n    // Returns true if the map contains a value for the specified key.\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        // Safety: unconstrained context\n        unsafe { self.get(key) }.is_some()\n    }\n\n    // Returns true if the map contains no elements.\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    // Returns a BoundedVec of all valid entries in this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:entries\n    pub fn entries(self) -> [(K, V)] {\n        // docs:end:entries\n        let mut entries = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries = entries.push_back(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    // Returns a BoundedVec containing all the keys within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:keys\n    pub fn keys(self) -> [K] {\n        // docs:end:keys\n        let mut keys = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys = keys.push_back(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    // Returns a BoundedVec containing all the values within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:values\n    pub fn values(self) -> [V] {\n        // docs:end:values\n        let mut values = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values = values.push_back(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    // For each key-value entry applies mutator function.\n    // docs:start:iter_mut\n    pub unconstrained fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = f(entry.0, entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each key applies mutator function.\n    // docs:start:iter_keys_mut\n    pub unconstrained fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = (f(entry.0), entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each value applies mutator function.\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..self._table.len() {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    // Retains only the elements specified by the predicate.\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..self._table.len() {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    // Amount of active key-value entries.\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    // Get the current capacity of the inner table.\n    // docs:start:capacity\n    pub fn capacity(self: Self) -> u32 {\n        // docs:end:capacity\n        self._table.len()\n    }\n\n    // Get the value by key. If it does not exist, returns none().\n    // docs:start:get\n    pub unconstrained fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, value) = slot.key_value_unchecked();\n                if current_key == key {\n                    result = Option::some(value);\n                    break;\n                }\n            }\n        }\n\n        result\n    }\n\n    // Insert key-value entry. In case key was already present, value is overridden.\n    // docs:start:insert\n    pub unconstrained fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.try_resize();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n            let mut insert = false;\n\n            // Either marked as deleted or has unset key-value.\n            if slot.is_available() {\n                insert = true;\n                self._len += 1;\n            } else {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    insert = true;\n                }\n            }\n\n            if insert {\n                slot.set(key, value);\n                self._table[index] = slot;\n                break;\n            }\n        }\n    }\n\n    unconstrained fn try_resize<H>(&mut self)\n    where\n        B: BuildHasher<H>,\n        K: Eq + Hash,\n        H: Hasher,\n    {\n        if self.len() + 1 >= self.capacity() / 2 {\n            let capacity = self.capacity() * 2;\n            let mut new_map = UHashMap::with_hasher_and_capacity(self._build_hasher, capacity);\n\n            for entry in self.entries() {\n                new_map.insert(entry.0, entry.1);\n            }\n            *self = new_map;\n        }\n    }\n\n    // Removes a key-value entry. If key is not present, UHashMap remains unchanged.\n    // docs:start:remove\n    pub unconstrained fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    slot.mark_deleted();\n                    self._table[index] = slot;\n                    self._len -= 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Apply UHashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % self._table.len()\n    }\n}\n\n// Equality class on UHashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, B, H> Eq for UHashMap<K, V, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    fn eq(self, other: UHashMap<K, V, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    // Safety: unconstrained context\n                    let other_value = unsafe { other.get(key) };\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, B, H> Default for UHashMap<K, V, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        // docs:end:default\n        UHashMap::with_hasher(B::default())\n    }\n}\n",
      "path": "std/collections/umap.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "use std::collections::umap::UHashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> UHashMap::default();\n\nunconstrained fn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nunconstrained fn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"UHashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"UHashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nunconstrained fn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"UHashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nunconstrained fn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"UHashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nunconstrained fn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for entry in input {\n        println(f\"Inserting {entry}\");\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    println(hashmap.len());\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"UHashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nunconstrained fn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"UHashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nunconstrained fn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"CtHashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"CtHashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nunconstrained fn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nunconstrained fn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib cthashmap documentation\nunconstrained fn doc_tests() {\n    // docs:start:default_example\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::default();\n    assert(empty_map.len() == 0);\n    println(empty_map.capacity());\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    let mut map2: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // Safety: testing context\n    let x = unsafe { map.get(12) };\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries[i];\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for key in keys {\n        // Safety: testing context\n        let value = unsafe { map.get(key) }.unwrap_unchecked();\n        println(f\"{key} -> {value}\");\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for value in values {\n        println(f\"Found value {value}\");\n    }\n    // docs:end:values_example\n}\n\nunconstrained fn iter_examples(\n    mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>,\n) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
