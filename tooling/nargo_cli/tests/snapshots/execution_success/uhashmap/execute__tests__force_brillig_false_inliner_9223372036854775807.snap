---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "4105629585450304037": {
        "error_kind": "string",
        "string": "UHashMap after one insert should have a length of 1 element."
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "6665645948190457319": {
        "error_kind": "string",
        "string": "CtHashMaps should be equal."
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "7511829951750337011": {
        "error_kind": "fmtstring",
        "length": 37,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "8082322909743101849": {
        "error_kind": "string",
        "string": "UHashMap after one insert and corresponding removal should be empty."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13674703438729013973": {
        "error_kind": "string",
        "string": "UHashMap length is invalid."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14241324264716156348": {
        "error_kind": "string",
        "string": "CtHashMaps should not be equal."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16986922238178214607": {
        "error_kind": "string",
        "string": "UHashMap should have retained 2 elements."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "9": {
      "source": "use crate::cmp::Eq;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// An unconstrained hash table with open addressing and quadratic probing.\n// Note that \"unconstrained\" here means that almost all operations on this\n// map are unconstrained and importantly are not constrained afterward either.\n// This map is meant to be used in unconstrained or comptime code where this\n// is not an issue.\n//\n// Compared to the constrained HashMap type, UHashMap can grow automatically\n// as needed and is more efficient since it can break out of loops early.\npub struct UHashMap<K, V, B> {\n    _table: [Slot<K, V>],\n\n    // Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the UHashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, B> UHashMap<K, V, B> {\n    // Creates a new instance of UHashMap with specified BuildHasher.\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = &[Slot::default()];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    pub fn with_hasher_and_capacity<H>(_build_hasher: B, capacity: u32) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let mut _table = &[];\n        for _ in 0..capacity {\n            _table = _table.push_back(Slot::default());\n        }\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    // Clears the map, removing all key-value entries.\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = &[Slot::default()];\n        self._len = 0;\n    }\n\n    // Returns true if the map contains a value for the specified key.\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        // Safety: unconstrained context\n        unsafe { self.get(key) }.is_some()\n    }\n\n    // Returns true if the map contains no elements.\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    // Returns a BoundedVec of all valid entries in this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:entries\n    pub fn entries(self) -> [(K, V)] {\n        // docs:end:entries\n        let mut entries = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries = entries.push_back(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    // Returns a BoundedVec containing all the keys within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:keys\n    pub fn keys(self) -> [K] {\n        // docs:end:keys\n        let mut keys = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys = keys.push_back(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    // Returns a BoundedVec containing all the values within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:values\n    pub fn values(self) -> [V] {\n        // docs:end:values\n        let mut values = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values = values.push_back(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    // For each key-value entry applies mutator function.\n    // docs:start:iter_mut\n    pub unconstrained fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = f(entry.0, entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each key applies mutator function.\n    // docs:start:iter_keys_mut\n    pub unconstrained fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = (f(entry.0), entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each value applies mutator function.\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..self._table.len() {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    // Retains only the elements specified by the predicate.\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..self._table.len() {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    // Amount of active key-value entries.\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    // Get the current capacity of the inner table.\n    // docs:start:capacity\n    pub fn capacity(self: Self) -> u32 {\n        // docs:end:capacity\n        self._table.len()\n    }\n\n    // Get the value by key. If it does not exist, returns none().\n    // docs:start:get\n    pub unconstrained fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, value) = slot.key_value_unchecked();\n                if current_key == key {\n                    result = Option::some(value);\n                    break;\n                }\n            }\n        }\n\n        result\n    }\n\n    // Insert key-value entry. In case key was already present, value is overridden.\n    // docs:start:insert\n    pub unconstrained fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.try_resize();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n            let mut insert = false;\n\n            // Either marked as deleted or has unset key-value.\n            if slot.is_available() {\n                insert = true;\n                self._len += 1;\n            } else {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    insert = true;\n                }\n            }\n\n            if insert {\n                slot.set(key, value);\n                self._table[index] = slot;\n                break;\n            }\n        }\n    }\n\n    unconstrained fn try_resize<H>(&mut self)\n    where\n        B: BuildHasher<H>,\n        K: Eq + Hash,\n        H: Hasher,\n    {\n        if self.len() + 1 >= self.capacity() / 2 {\n            let capacity = self.capacity() * 2;\n            let mut new_map = UHashMap::with_hasher_and_capacity(self._build_hasher, capacity);\n\n            for entry in self.entries() {\n                new_map.insert(entry.0, entry.1);\n            }\n            *self = new_map;\n        }\n    }\n\n    // Removes a key-value entry. If key is not present, UHashMap remains unchanged.\n    // docs:start:remove\n    pub unconstrained fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    slot.mark_deleted();\n                    self._table[index] = slot;\n                    self._len -= 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Apply UHashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % self._table.len()\n    }\n}\n\n// Equality class on UHashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, B, H> Eq for UHashMap<K, V, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    fn eq(self, other: UHashMap<K, V, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    // Safety: unconstrained context\n                    let other_value = unsafe { other.get(key) };\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, B, H> Default for UHashMap<K, V, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        // docs:end:default\n        UHashMap::with_hasher(B::default())\n    }\n}\n",
      "path": "std/collections/umap.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "use std::collections::umap::UHashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> UHashMap::default();\n\nunconstrained fn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nunconstrained fn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"UHashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"UHashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nunconstrained fn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"UHashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nunconstrained fn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"UHashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nunconstrained fn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for entry in input {\n        println(f\"Inserting {entry}\");\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    println(hashmap.len());\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"UHashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nunconstrained fn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"UHashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nunconstrained fn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"CtHashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"CtHashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nunconstrained fn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nunconstrained fn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib cthashmap documentation\nunconstrained fn doc_tests() {\n    // docs:start:default_example\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::default();\n    assert(empty_map.len() == 0);\n    println(empty_map.capacity());\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    let mut map2: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // Safety: testing context\n    let x = unsafe { map.get(12) };\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries[i];\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for key in keys {\n        // Safety: testing context\n        let value = unsafe { map.get(key) }.unwrap_unchecked();\n        println(f\"{key} -> {value}\");\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for value in values {\n        println(f\"Found value {value}\");\n    }\n    // docs:end:values_example\n}\n\nunconstrained fn iter_examples(\n    mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>,\n) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
