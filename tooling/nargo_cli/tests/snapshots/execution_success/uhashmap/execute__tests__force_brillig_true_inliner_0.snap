---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "4105629585450304037": {
        "error_kind": "string",
        "string": "UHashMap after one insert should have a length of 1 element."
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "6665645948190457319": {
        "error_kind": "string",
        "string": "CtHashMaps should be equal."
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "7511829951750337011": {
        "error_kind": "fmtstring",
        "length": 37,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "8082322909743101849": {
        "error_kind": "string",
        "string": "UHashMap after one insert and corresponding removal should be empty."
      },
      "8591465503772373437": {
        "error_kind": "string",
        "string": "UHashMap after clear() should be empty."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13674703438729013973": {
        "error_kind": "string",
        "string": "UHashMap length is invalid."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14241324264716156348": {
        "error_kind": "string",
        "string": "CtHashMaps should not be equal."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16986922238178214607": {
        "error_kind": "string",
        "string": "UHashMap should have retained 2 elements."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_loop<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) {\n    let mut stack: [(u32, u32)] = &[(low, high)];\n    // TODO(https://github.com/noir-lang/noir_sort/issues/22): use 'loop' once it's stabilized\n    for _ in 0..2 * N {\n        if stack.len() == 0 {\n            break;\n        }\n\n        let (new_stack, (new_low, new_high)) = stack.pop_back();\n        stack = new_stack;\n\n        if new_high < new_low + 1 {\n            continue;\n        }\n\n        let pivot_index = partition(arr, new_low, new_high, sortfn);\n        stack = stack.push_back((pivot_index + 1, new_high));\n        if 0 < pivot_index {\n            stack = stack.push_back((new_low, pivot_index - 1));\n        }\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32, Env>(\n    arr: [T; N],\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = arr;\n    if arr.len() > 1 {\n        quicksort_loop(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "9": {
      "source": "use crate::cmp::Eq;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// An unconstrained hash table with open addressing and quadratic probing.\n// Note that \"unconstrained\" here means that almost all operations on this\n// map are unconstrained and importantly are not constrained afterward either.\n// This map is meant to be used in unconstrained or comptime code where this\n// is not an issue.\n//\n// Compared to the constrained HashMap type, UHashMap can grow automatically\n// as needed and is more efficient since it can break out of loops early.\npub struct UHashMap<K, V, B> {\n    _table: [Slot<K, V>],\n\n    // Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the UHashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, B> UHashMap<K, V, B> {\n    // Creates a new instance of UHashMap with specified BuildHasher.\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = &[Slot::default()];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    pub fn with_hasher_and_capacity<H>(_build_hasher: B, capacity: u32) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let mut _table = &[];\n        for _ in 0..capacity {\n            _table = _table.push_back(Slot::default());\n        }\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    // Clears the map, removing all key-value entries.\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = &[Slot::default()];\n        self._len = 0;\n    }\n\n    // Returns true if the map contains a value for the specified key.\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        // Safety: unconstrained context\n        unsafe { self.get(key) }.is_some()\n    }\n\n    // Returns true if the map contains no elements.\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    // Returns a BoundedVec of all valid entries in this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:entries\n    pub fn entries(self) -> [(K, V)] {\n        // docs:end:entries\n        let mut entries = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries = entries.push_back(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    // Returns a BoundedVec containing all the keys within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:keys\n    pub fn keys(self) -> [K] {\n        // docs:end:keys\n        let mut keys = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys = keys.push_back(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    // Returns a BoundedVec containing all the values within this UHashMap.\n    // The length of the returned vector will always match the length of this UHashMap.\n    // docs:start:values\n    pub fn values(self) -> [V] {\n        // docs:end:values\n        let mut values = &[];\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values = values.push_back(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    // For each key-value entry applies mutator function.\n    // docs:start:iter_mut\n    pub unconstrained fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = f(entry.0, entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each key applies mutator function.\n    // docs:start:iter_keys_mut\n    pub unconstrained fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = UHashMap::with_hasher(self._build_hasher);\n\n        for entry in entries {\n            let (key, value) = (f(entry.0), entry.1);\n            new_map.insert(key, value);\n        }\n\n        self._table = new_map._table;\n    }\n\n    // For each value applies mutator function.\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..self._table.len() {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    // Retains only the elements specified by the predicate.\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..self._table.len() {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    // Amount of active key-value entries.\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    // Get the current capacity of the inner table.\n    // docs:start:capacity\n    pub fn capacity(self: Self) -> u32 {\n        // docs:end:capacity\n        self._table.len()\n    }\n\n    // Get the value by key. If it does not exist, returns none().\n    // docs:start:get\n    pub unconstrained fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, value) = slot.key_value_unchecked();\n                if current_key == key {\n                    result = Option::some(value);\n                    break;\n                }\n            }\n        }\n\n        result\n    }\n\n    // Insert key-value entry. In case key was already present, value is overridden.\n    // docs:start:insert\n    pub unconstrained fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.try_resize();\n\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n            let mut insert = false;\n\n            // Either marked as deleted or has unset key-value.\n            if slot.is_available() {\n                insert = true;\n                self._len += 1;\n            } else {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    insert = true;\n                }\n            }\n\n            if insert {\n                slot.set(key, value);\n                self._table[index] = slot;\n                break;\n            }\n        }\n    }\n\n    unconstrained fn try_resize<H>(&mut self)\n    where\n        B: BuildHasher<H>,\n        K: Eq + Hash,\n        H: Hasher,\n    {\n        if self.len() + 1 >= self.capacity() / 2 {\n            let capacity = self.capacity() * 2;\n            let mut new_map = UHashMap::with_hasher_and_capacity(self._build_hasher, capacity);\n\n            for entry in self.entries() {\n                new_map.insert(entry.0, entry.1);\n            }\n            *self = new_map;\n        }\n    }\n\n    // Removes a key-value entry. If key is not present, UHashMap remains unchanged.\n    // docs:start:remove\n    pub unconstrained fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n\n        for attempt in 0..self._table.len() {\n            let index = self.quadratic_probe(hash, attempt as u32);\n            let mut slot = self._table[index];\n\n            // Not marked as deleted and has key-value.\n            if slot.is_valid() {\n                let (current_key, _) = slot.key_value_unchecked();\n                if current_key == key {\n                    slot.mark_deleted();\n                    self._table[index] = slot;\n                    self._len -= 1;\n                    break;\n                }\n            }\n        }\n    }\n\n    // Apply UHashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % self._table.len()\n    }\n}\n\n// Equality class on UHashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, B, H> Eq for UHashMap<K, V, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    fn eq(self, other: UHashMap<K, V, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    // Safety: unconstrained context\n                    let other_value = unsafe { other.get(key) };\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, B, H> Default for UHashMap<K, V, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        // docs:end:default\n        UHashMap::with_hasher(B::default())\n    }\n}\n",
      "path": "std/collections/umap.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32, T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "46": {
      "source": "use crate::append::Append;\n\nimpl<T> [T] {\n    /// Returns the length of the slice.\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements\n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and\n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    /// Append each element of the `other` slice to the end of `self`.\n    /// This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::mem::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice with its index, returning a\n    // new slice containing the mapped elements.\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U] {\n        let mut ret = &[];\n        let mut index = 0;\n        for elem in self {\n            ret = ret.push_back(f(index, elem));\n            index += 1;\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for elem in self {\n            f(elem);\n        }\n    }\n\n    // Apply a function to each element of the slice with its index\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        let mut index = 0;\n        for elem in self {\n            f(index, elem);\n            index += 1;\n        }\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T\n    where\n        T: Append,\n    {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq(&[].map(|x| x + 1), &[]);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq(&[].mapi(|i, x| i * x + 1), &[]);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_slice: [Field] = &[];\n        empty_slice.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = &[1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = &[1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_each(|a| { *b_ref = b_ref.push_back(a * 2); });\n        assert_eq(b, &[2, 4, 6]);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = &[1, 2, 3];\n        let mut b = &[];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { *b_ref = b_ref.push_back(i + a * 2); });\n        assert_eq(b, &[2, 5, 8]);\n    }\n\n}\n",
      "path": "std/slice.nr"
    },
    "50": {
      "source": "use std::collections::umap::UHashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> UHashMap<K, V, BuildHasherDefault<Poseidon2Hasher>> UHashMap::default();\n\nunconstrained fn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nunconstrained fn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"UHashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"UHashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nunconstrained fn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"UHashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nunconstrained fn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"UHashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nunconstrained fn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    for entry in input {\n        println(f\"Inserting {entry}\");\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    println(hashmap.len());\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"UHashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nunconstrained fn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New UHashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"UHashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nunconstrained fn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"CtHashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"CtHashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nunconstrained fn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nunconstrained fn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = hashmap.keys().as_array().sort_via(K_CMP);\n    let values: [V; 3] = hashmap.values().as_array().sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = hashmap.entries().as_array().sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib cthashmap documentation\nunconstrained fn doc_tests() {\n    // docs:start:default_example\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: UHashMap<u8, u32, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>> =\n        UHashMap::default();\n    assert(empty_map.len() == 0);\n    println(empty_map.capacity());\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n    let mut map2: UHashMap<Field, u64, BuildHasherDefault<Poseidon2Hasher>> = UHashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // Safety: testing context\n    let x = unsafe { map.get(12) };\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries[i];\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for key in keys {\n        // Safety: testing context\n        let value = unsafe { map.get(key) }.unwrap_unchecked();\n        println(f\"{key} -> {value}\");\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for value in values {\n        println(f\"Found value {value}\");\n    }\n    // docs:end:values_example\n}\n\nunconstrained fn iter_examples(\n    mut map: UHashMap<Field, Field, BuildHasherDefault<Poseidon2Hasher>>,\n) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
