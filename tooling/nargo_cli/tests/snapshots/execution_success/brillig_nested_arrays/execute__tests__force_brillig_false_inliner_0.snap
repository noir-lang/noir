---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "pZfbbttIEET/Rc96mOm5+1cCw5BtJRAgyIZiBVgY+fftnj5kdrEIkKVefEiLXRpVsXj53L0en2/fnk6Xr2/fdw9fPnfP19P5fPr2dH57OXyc3i76389dsD8xtN1D3Cs7HM4YYIQC0+5BjBkWWGGDHQ6nBBihQPQEPUFP0BPVS8YOhzOpXjZGKDDBDAussMEOVa8oc4ARql41ql4zql43Flih6g1jh8NZzL/wc78Tt1kPj/Z90++8GJ4Xx/NieV48z4vpGdd9Iy8buo5YMN432rLRl43BhhCuEG4i3ES4iXDNvIh5gnmCeYJ5gnmCeYJ5gnmCeYJ5gnmCeYJ5gnmCeQnzEuZNEm4h3EK4hXAL4RbCLYRbCLcMZyXcSrhVYPKQa/aQK+FWwq0NEm4l3BZgJOQ0Q7ZIphxssMPhtCpM2rTKWxUmE8ywwAob7HA4Z5q6nJmmUWCC2WlpRI3X0pgssMIGOxzOeSobIxSIXkGvoFfQszSixmtpTA6npTEZocAEMyzQ9PR0sDQmOxxOS2MyQoEJZlgges0vfc3L0bwb3avRvRndi9G9Fz07iqM6XKW7SneV4SrDVYarDFcZrjJ8YFDJQCUDlQxUMlDJQIUCFQpUKFChQCUDlYxUMlLJSCX/z/U7cQ2Z110qKVRSqKRQSaGSQiWFSgqVFCopVDJRyUQlE5VMVDJRyUQlE5VMVDJRyUQlM5XMXknt5HKze/q4Ho/Wz3/c/fSe+H64Hi8fu4fL7Xze734czrd50Pf3w2Xy43DVT8N+d7y8KlXw6+l8tK2f+1/T4fejJTSGS+jrePnjeQmDeYntvnmpW+ZlnU/tvvlc71v/vfM1bZmvdZlv+b75Ee9b/6b5NDLzaZQN8zkt68+b8s9jnR9b5mta1l9ruG++jQ3zrSfme9hy/rUal/n42/MvtjsN+EOBTQ6MtFzBRtpyBRurg6NvaZDe9JYF6GbfpFD6qlDGJoW+rkFvevcq5C1N1ptzWRX6Jh/iWH2QtOlXSJZVof/7dHzUvcPL6fqf90uxO72izNcgqfNB2ZAdxVEdzWEPMmqYPcfYT/1xuJ4Oz+ejadq33i4vy1fo7sdf78sny0vu+/Xt5fh6ux5tOb/edPWbv+gVUU+kR3tM0j19ndjrq4Ltxrk79vqG8Li8s80BPSKkdUDiXh9s1oGmcq0+rs//doxeNHNcj8h6RNYjzKO/AQ==",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested",
    "create_inside_brillig",
    "assert_inside_brillig",
    "create_and_assert_inside_brillig"
  ]
}
