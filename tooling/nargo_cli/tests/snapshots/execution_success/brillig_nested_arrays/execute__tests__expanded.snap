---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
struct Header {
    params: [Field; 3],
}

struct MyNote {
    plain: Field,
    array: [Field; 2],
    header: Header,
}

unconstrained fn access_nested(notes: [MyNote; 2], x: u32, y: u32) -> Field {
    ((notes[x].array[y] + notes[y].array[x]) + notes[x].plain) + notes[y].header.params[x]
}

unconstrained fn create_inside_brillig() -> [MyNote; 2] {
    let header: Header = Header { params: [1_Field, 2_Field, 3_Field] };
    let note0: MyNote = MyNote { array: [1_Field, 2_Field], plain: 3_Field, header: header };
    let note1: MyNote = MyNote { array: [4_Field, 5_Field], plain: 6_Field, header: header };
    [note0, note1]
}

unconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: u32, y: u32) {
    assert(access_nested(notes, x, y) == (((2_Field + 4_Field) + 3_Field) + 1_Field));
}

unconstrained fn create_and_assert_inside_brillig(x: u32, y: u32) {
    assert_inside_brillig(create_inside_brillig(), x, y);
}

fn main(x: u32, y: u32) {
    // Safety: comment added by `nargo expand`
    unsafe {
        let header: Header = Header { params: [1_Field, 2_Field, 3_Field] };
        let note0: MyNote = MyNote { array: [1_Field, 2_Field], plain: 3_Field, header: header };
        let note1: MyNote = MyNote { array: [4_Field, 5_Field], plain: 6_Field, header: header };
        assert(access_nested([note0, note1], x, y) == (((2_Field + 4_Field) + 3_Field) + 1_Field));
        let notes: [MyNote; 2] = create_inside_brillig();
        assert_inside_brillig(notes, x, y);
        create_and_assert_inside_brillig(x, y);
    }
}
