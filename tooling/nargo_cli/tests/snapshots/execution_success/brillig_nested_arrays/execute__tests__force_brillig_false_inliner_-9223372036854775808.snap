---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "vZfdattAEIXfRde62J39nbxKMcFxlGAQtlHsQAl5985oziotxdBKpTf5VonmaHOOZiR9dM/D0+318Xh6Ob91D98+uqfpOI7H18fxfNhfj+eT/Pajc/rDu9I9+F5YQTZ6B3qQwNA9kDKCCcxgASvIRnKgBwmEHkGPoEfQI9ELygqyMYheVHqQwABGMIEZLGAFRS8JowM9KHpZKXpFKXpVmcAMih4rK8jGpP65z74js1lO93q92e/YDI/N8dgsj83z2EyPcN0WsS1kHz7BeFuUtqhtwVgQwiWEGxBuQLgB4ap5HuYRzCOYRzCPYB7BPIJ5BPMI5hHMI5hHMI9gHsE8gnkB5gWYNxPhJoSbEG5CuAnhJoSbEG5CuImNGeFmhJsJDBZyjhZyRrgZ4eYCItyMcIsDPUIOc8gaySwHFrCCbNRWmKnVcllthZkBjGACM1jAatQ0vMSlacxko6Yx04MEBjCCCcwg9CL0IvQS9DQNL3FpGjMDGMEEZrCAFWSjpuElXk1jJoEBjGACM1jACrKxQK/Y3VzsZi52L5doSIZssKFXrC2KdUW1pqimUk2lmko1lWoq1VSqqVRTYfQqo1UZncoJxARgDABG/3Nrf9fa33m0raO2CG0R26K1/9/Mbd//37lNd+Z26P/N3I535nbC6MkYPeXO3K535jZj9EhrS2+3h+bjdRoG7fOfnqLybL3sp+F07R5Ot3Hsu/f9eJtPervsTzOv+0n+6vpuOD0LRfDlOA66+uy/qt390uQKipOrS3n643pyjHryZVs95TX1tNSHsq0+5m3731qfw5r6nFt9idvq2W/b/6r6wBH1gdOK+hja/uOq/CMv9bymPoe2/5zdtvrCK+pLDaivbs39V7Jv9X7N/cehzQ8Oa+YHL/vnuub+lYdW24As6yqFVBeFxKsU6rIHeYRtVYhr+kgetWlRqKt88Lz4QGHVf0GRFoX6azfs5Gh/OE6/fSWSPsd1es8fMxTn111FNCRDNhSDvkbIv6tvEXrTv++n4/5pHFRTr3o7Hdol5PD6/dL+0j5VL9P5MDzfpkG38/W9Klf+JvNIbqSdvvTIkXwU9PLCr4d+PuRe3vN37ctrLpAzXFgKyPfymrIUFJErebe8xes5wfUhfUnKGUnOUI9+AA==",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested",
    "create_inside_brillig",
    "assert_inside_brillig",
    "create_and_assert_inside_brillig"
  ]
}
