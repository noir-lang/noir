---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91ZS27bMBAlRdmO5AQx2h5E8jdLA3X62/UIih0v2l1PoEN01SsV6JkKIhx79Dyi5YqEiwxgUNZQb94MZyiK1OpFtPtZSV2bqFOhPmvXFv2kDIhVxOSpI/FsBFmrdiHdH9dm8LzVm4AOZ2A3JP5DMX/KBP8C8p9lDDMC/pTw0zj4xcjhfK6b+Ars3qlm8fJnSMdz7IvT3Tg9Xb9z1xngxRh3zil03N4K/BPmm5X39TEegewe6mUTHntK2I/hsWeE/SE89pywP4bHXhD2p/DYy7F6qYlnh0d1ZI6mDvkVeR6Ya7CnVHMeUGA/V1HnvVKDPeKD8UkgdgOB6wR0Vqg2taAzwr3Eg7UJiEW1d6dO/cdc4L6GfKd1zQWyn6uouVn64poKcaXYDQWuE9BZwVwYCnaGgh0Ja1M3OXDOOH6c3zXGj+znKmo+lb64SnVBsRsJXCegs0LvFC3ojHAv8WDROwRziPCtZAK/gPFadR0/sp+rqPlU+uIq1QXF7kbgOgGdFZrztKAzwr2kBQvnoL5YJhCWFVo/hOA1CMSL+xh5fbHCmuYi5csQdBn4zHU50/H1PoqB/9xfa/s7w8V+yJXnBvHGGFpZu7boJxXZorEfCDxS0FHfr8Av0jxRvGG4CmxFXrMspflaAR8uUi4QNzuev9z1pbkwAn8jxfriejKgi1VP5O+l9cTz4gb6Uv+B0BdznvruXBt7H0DKebI1Vsc4p3V4+6uHoiC7pj7GAceF2x9A/2/uPx9zatMePPerqtzPqn21qHa7+bbCOCmIE/8OxrW9NH6Rx3VKucTnWx8vqd5VOD4l5v4P19q4/QYOMb8L+ZyTtMQE1yd8D9aoZp0SDu+fC/35fEX279XpPJdDLLI4sSh9XPl3Ac6zY3VZLG6F/mPB33vB9i08l0Ms+LWG+4OW5xKm5/1r1/J89PksfY/9q89G8NmXq9wfzNX/bTwzj2/nuKLt0YVcx2fwkSt/ftzBduaxfc63FGxrgZcSbGO+aNDplmdxnmmrFWkexFr56VqpVqQ9Ln6ugnHy7alIceK+494GnhHymOL6UQvPte1nY0ytRH5/d97PJvt5i8/rMHwO74sE+LTVoPRtgd/xfJ2He5hGsCPtm0tYm4BYj3XTH+kcOvIZauf9ULqXq6i5WfriKtU6ngXwZyegs4K5IJ2hSPvmEtambnK4wtlU5/F7LWdTuJ/d5zwJ97OvcJ7UeT/7tZwn0Zzne0d3OU/COagvlg6EZQX3s/vwMoF4cR+ldQqNrV2nhN7v2C6WT9v5oiqeS/t3em6/4y9ZREvPEScAAA==",
  "debug_symbols": "pZbLTuNAEEX/xessuqufxa8ghEIwKFKURCYZaYTy79Pl2zfAAmlkbzgnCXUwdsXy5/A6vlzfn/fHt9PH8PD4ObxM+8Nh//58OO22l/3p2N79HJz9ED88+M0gAgQgAgnIQAEqoDOCA1AJrSINAYhAAjJQgArojOiAVgkNAgQgAgnIQAEqoDNSq8QGDwgQgAgkIAMFqIDOyKhkVDIqGZWMSkYlo5JbJTVUQGcUB3hAgABEIAGtkhsKUAGdUR3QKqVBgABEIAEZaBVtqIDOUAd4QIAARCABdqVdY+msnQp6Z294E+3iHcVThBIotk5ikiiZUiiVol3EUTxFKIHCsrAsLAvL88IGE+0yL+0sVo4mQgmUSEmUTCmUStEutsg+mXiKUKycTaxcTKxcTTKlUKysJtrFlhvSymLXwnZZ7PTaNkMKpVK0i201xFOEEiiRwrJtuNg5tB2HVIp2sU2HeIpQAiVSrGxn3rYeUiiVol1s+yGeIpRAiX3H7HsAyZRC4dJWLq1yaZVLq1xa5dIqy8qysqwsK8vay+Lm8u22GXirfb5M42h32m/33nZHPm+n8XgZHo7Xw2Ez/NkervMvfZy3x5mX7dQ+bdd5PL42tuDb/jCa3TZf0+73UQ2lD2uo9/H0//M1cL7GBfPeRR5A07qokOq9kHRRod6Pod091haiX1JoX6d7oS46D23PWJDw639Rfy/kEHsgZ7duviy5DsnxJCa35AyI0z4vvqybl7xkXu7zoaybj3nd8a+dz2HJfM6cL3HdvPp1x79oPij3N2haMB8Djz8uuv5R7/P6c/6pvdru9tOPJ/Oblab99uUw9pdv1+Pu26eXv2d+wif783Taja/XabTS1+O9PZ49euc33uUne7pqL8WFjbj0dLM//w8=",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
