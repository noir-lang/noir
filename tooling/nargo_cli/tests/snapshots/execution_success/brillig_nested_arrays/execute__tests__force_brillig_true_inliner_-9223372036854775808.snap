---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/8VZy27bMBAkK9Eypbgx2h+hLNnO0Yf2A9pLeytUp771H9xTgXx1IIQbr8cryg8yIRDQyoo7M8shRdlavTTt//qW+/6DOm10z8b37rZWR8zlUvLUiXgeFVmr4UaxJ99bGN/Hs4iCLeDGzP/g2pUV9EXk31iWM0H+BeXP0+R3hc/zZX+cXwHuTB0vXj6GYtxjX31s6uP0+aP/bCFfinnnnGLX7bPAn7Aqr/U7aM1YfSLxqNEfEXO/es/Ez92QZyYst4Z6FWnmrtWAp9Sx5xXgl8A19h6oAY/4YH3IX1S7qcB1LsS4Nh7jOFMBR8qVR8xlQA/Xj15APRt/7W5rzbleIPxSJfVmHaprIdSVamcFrnMhhl6wAo4VcKRc5IWE+1ubcH9b4joiXVwT1i4S9tm+I/xSJV0HdcgP0nqm2pUC17kQQ9+VAk4p4Ei53sB3q5k69d0beWN9rTcSnRGD3uD1udYbhn2+1RtFxFyTiLli+n+aQCOe9SJ7aCWd96jh85/7ajagmcf4OuTnfWwZXHO9ff6fLC/eh1z5fBJvfKfp28b37rbWoT6jZF/xGN37Dfilepf8xPIqwKrUYZ7yfXz89YNzhJvtD3XAOef4Bu7/4a/5+uA6Nlfy3K27etd0u27ZPT622w7r1Lehd0fcZ9HjmTrMa6J33QV5i+plRngRnwnojMSnNsDnl+/7uv0HDon2s4ZqUrD5k2qCzzbpGSr5ILS38/2O8O/V6T5ZQi0SnVfqEFe+p1vQVqnLanEn3F8Jeu8F7DsYN/Rs5jzo/2Zg3NBe/Nf33I8hzdJ73bWaM0FzyKuXnsPecz5tQNsYV8QuLuRajeRHrnx8dQa2DWCPacsBWwu8lICNftEQ0wNjcZ8ZWivSPohr5Z/vpbViBN38O2as00S4n3sa68S14/eQ+HsJrymNmwkx/hyPfY7YLle/t+2yc3/q/nIxdo54BujD6G51GwAA",
  "debug_symbols": "pdXdquIwFAXgd8l1L/K7k/gqB5Gq9VAoVXragUH67rOTlTjOwIFDe+O3at3LYFP7FNfuvHye+vF2/xKHj6c4T/0w9J+n4X5p5/4+8rtPIdOLcuKgGqEIeBBAzGgJFNDAAAvQotGi0aLRorlFN8JIoIAGBljgAAEPuMUwMWMlUEADAyxwgIAHaLHcYhvhJFBAAwMscICABwGghdBCaCG0EFoILYQWQgtxi2MCiBkvgQIaGGCBA9xCjAcBxEyQgI98I6IECmhggAXcGRgCHgQQM0rKoirqoinaoitS0RdDkfsiq2RRFdNWkimYGmwNrgaqwdcQaogl5A2aQ9qiaePmTZqDqSE16xRSs0khNdsUfA2hhtTMv7hKmxZB1ZCaaV0bUe+l0zx1XbqV3m4uvuUe7dSNsziMyzA04lc7LPlDX492zM7txGd51d14Zbnw1g9dSmvzd1p+PxqNL8PRhNe4+/l8MHU+2A3zfPnrAjiGTQ0uvBpc3NQQXmvgi763waoNDU7WAie3/ApaxjKvld83r2nLvH7NG79v3tK+9e+dJ7NlnqjOe7tvPqp96/9v/shH7aWf/nlsr6lp6tvz0JXD2zJe3s7Ovx/1TH3sP6b7pbsuU5ea3p79/PoRdBP8Mf2d8oEyrlHGH9f05X8A",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
