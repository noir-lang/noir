---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+VazW7TQBBee+00dhIRgXiPOL89ViLl98QDcHBTeuUCNw658xCceCUkngAeAYkLWrrTjL+M17a8S6R2pMqxZ/3Nz87MrncaqVuK7J+hxF5jdUw05sJeZ/2o8Ig1C6lnFEjPipMjVU/E+2OvGbxv+NqjwRnI9Yl/PlvuMsE+j/ovMoYZAH9O+EkY/NmZxXm9r+IrkDtR1eTl7xCPx9gbyxtaPv1+an9ngBdi3rlOvv32RNA/ZrYZerY/+MOT3Lt82frHnhP2pX/sBWE/94+9JOwX/rFXhP3SP/aasF/5xy5H6jbfPlg8ylF9EHUXu4FrzDICeUpVa4wC+bkKWlOLCOSRPuifGHyXCrpOgWeI8j4SeFp4Fjuwth6xKK8n6th+jAVuq8/1sm0skPxcBY3NwuXXRPAr+W4g6DoFniGMhYEgZyDIkbC2+6oOXGecP67fKeaP5OcqaDwVLr9KeUG+OxN0nQLPEK1XkcDTwrPYgUXrE8YQ4RvKBP08+mvTdv5Ifq6CxlPh8quUF+S7oaDrFHiGqOZFAk8Lz+IaLKxBfbG0JyxDtDfxoVfqSS9uY+D9xQZzmpMULwPgZWAz5+WMx78lkDTcc3uN7E8MF8ehrjw2hjWYKYw1RPvIFMa+tdfAa/vsMcNVICtwDKykNVGBPpya5uub/d11vii2HtXYy30Rah5wTUzU8ZrIdYvVcY3ntTeFZ++Yn76zdzimUu591FQd+y4B/wSKlbW0/hJJ+wMNvCHYzHm8lvSpFz8YLo4jCnz21NlP6IthD19o5otfDBfHEY3UwffJvopzYZ/PetDm/Dav/ulr8VN1rDuXn8L4j/aeryl0TXroebMpi5tFeVOuyuvr5a7EOmwoZn7i5wKYozhXWh3iLNBZ2pxih/yVNuglfeMof/oUKejz2V6N336DDiG/k3l+xTU+wf0aP+/WqpqXhMPH58J4XsNIPq1nPKdz8EUWxheFS1def3AfN1bdfDERxo8Fe8kXI8abAFaTrrGDh/U8gudpAybuDb/YK49fl49G7FlXH2G8cFvQRyMmQ7IHY/vMoev/mH+0LXPY1qQryh511HXcgI+68vfHLXTNHLIlXfm8JSCbr3P8XZSN8RIBL6p5F+tSXa5IdRNz5au9SrkinRHynhf6yXUmJflJ+o5Qghz0Ke5PI+G9un4A+tRQ4PW+dT+A5Oc1Nl/40edufYlBn7oclL776r5rDOEZsBbkSH0HCWvrEetyX7VH+h+BwN8Yrc+T6VmugsZm4fKrlOvYS+HvToFnCGOh6/cy5233VR1O0NtrPX/3pbeH/YA+/TjsB5ygH9e6H3Bf+nFU81xrdJt+HNagvliRJyxD2A/oo5f2pBe3Udqn0NyafYrv85FyszjfzZe7zdVqUS7Wnc5HAudfkDM26SwSc5qThntub9feBa8LuLen8difMIS9Cxr7015D/z+X1LtoiomH0ss4pb1SfcfvnVBn0F3P40PUrt1qfbVbrsrZ+8Lczptq119aSxbwaS0AAA==",
  "debug_symbols": "ndrfauJAFAbwd8m1F3P+zJk5fZVlKba1RRAt1i4sxXffWJpsSaYJ37kppvhD9PuSOMf56J52D+8v9/vj8+mtu/v10R1Oj9vL/nTsjz6um+7hvD8c9i/33//dpdsf5s/nv71uj7fDt8v2fOnuXMqm2x2fbo9q75/3h113l9P196ZjgYXCIsPCYFFgUWHhqJAEC4IFnLm0M68yiKpTobDIsDBYFFhUWDgqNMGCYNHMnJIOofcPp6mrBIwGTA4YC5gSMDVgHDc5BQy1Ta6jyT41HDASMBowOWAsYErA1IBx3FgKmEAPLNADC/TAAj2wQA8s0AML9MB+6EEdz1NinhrHTUkBQwHDASMBowGTA8YCpqwapampAeO4qSlg2j0gy6Op03tJ5YCRgNGAyQFjAVMCpgaM48ZTwAR64IEeeKAHHuiB/9ADH6/XLNNz2y1gSsDUgHHcUEoRRBHEEdTuAiuPqKYZ0gjKEWQRVCKoRpAHEDVfKafhDpFTnRGHCSecEE4YJ4KTZt84+RdhKjOScWI4KTipOHGYtMdSy4RwwjgRnODpC56+4OkLnr7g6cta+mxTogknhJN2+jwSmb2X9oRqmShOMk4MJwUnFScOk/ZoapnQCtFZ+plxIjhZO/cbZO3cN5mRdvpmAyk6IwUnFSe+Qny6lqT2QGqZEE7WrvwN0vyQxfWLiOcZKTipOHGYtKc9y4RwwjgRnChOMk7w9NtjHpWhljq/jrWnPMvEYdKe8SwTwgnjRHCiOMk4aaavPhKfk4KTihOHSXuys0wIJ4wTwYniJMPLt/ZMZ5kUnODLaoeX1ZwSTggnjBPBieIk48RwUnBScYKnT3j6hKffHhCZDPdKszQjDpP2gGiZEE4YJ4ITxUnGieGkrJDiM1Jx4jCRhJNmLmXcxFKTzYjiJOPEcFJwUnHSzKUYDYSmS1Fuj26WCeGEcSI4UZxknBhGrv3Rn+15v3047L62Wz6/Hx+/7b68/H3dTTZivp5Pj7un9/PutiXz/27Mz/sBEW36H8JuXyhuSTDphvvD67V/rX8=",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
