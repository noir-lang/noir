---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1aXW7TQBAee+MkdloRgbiHnSZNHyuR8vvEEUxKeYE33skpeOJKnACOgMQV0Ko7yfjLeOPIuwqqOlJlx7P+5pvZ2R/PNqF7SdyflYG7prQv3ObaXct+UgXEKmPyTCLxbAQ5oXZh3V93zeF9qzcBHc7Bbkj8q3K+zhX/AvK/yAVmBPwZ4w/i4Jcjh/N208QnsHtOzcEr32GdzLF3Tjd2er5/7u5zwIvR75JT6Lg9U/inwjcrLza7eASyux0vq/DYM8a+CY99wdgvw2PPGftVeOwFY78Oj33J2G/CY9cTuh9vnxwej1GzM7XN3chzzDwBe0TNOYbAfkFR59QqAXvMB+OTQuwyhesUdFZ43CeKzijPUg/WKiAWj+tz2vcfc0H6GnK97JoLbL+gqLlZ+eI6UOLKsRsqXKegs4K5MFTsDBU7GtZq0+QgOWP/SX6n6D+2X1DUfKp8cdXGBcdupHCdgs4Kr1eJojPKs9SDxesT5hDjW8kVfgHjtezaf2y/oKj5VPniqo0Ljt1Y4ToFnRWe8xJFZ5RnaQsWzkF9sUwgLCu8NwnBKwvES/oYeX+xxDEtRcuXIehy8FnqCqGT3xIoBn5Lf63tLwIX2yFXmRvjFswM2lrhfWQGbd+7a+S1vXwqcAlsRc6BhbYmEvCRcqi/frj7Y/tr+B/4q+1RDOjk+oI5L8dKn5z/KXCxHUvk+slc2+sS+ItzntQNe8TCiFj8FrjYjmVCu7losGniXLvnZQ9ZXpUl2zMOP6N97tJ+Bu0/u99yXuTroAfPu2Vd3V3Ud/Wivr2dr2ucS6ykIk7y2xb369hXhnZ5FqkeNOPc4XhlB3hp+3QKx6fKgM9Xd7Vx+wMcYn7rybkmbYkJrhHjOHy2e01ZE8Y9PNq3fxOlvZaX/PxMaT8Rbdj+E9rfY5zBeznEQt4n8DxreS8Vetn+m7vKnPD5XFA4n43icwJ20hZ/cL7OPVxP0Z9jj2+HuKLt4kiukwP4yFW+P+lge9zD9gBs54ptUuxgvuB+XYupL0aaXxJzBDyl7QJ4JS288b22carNgzhOv7urNk61ulXq8d1XJ9H6SNvbkmJHxkK+d67o2tZx7YyJ7yOv351r1Gy/aPH5Ogyf7VqVAp+23Na+RfDbXO7zsC5pFDtaLVzDWgXEutk0/dHOrSN/M3SucfKzgqLmZuWLqzbW8ZtHvjsFnRXMBe1cRKuFa1irTZPDCc6bOvffQzlvwhp1nzMirFGf4Iyoc436oZwR8ZznW6O7nBHhHNQXKwmEZQVr1H14mUC8pI/aPoX7FvcpkfP/UjsfIuB5bP1Oq3XjmJJi4Lf099h6thyXI2jL7bFmbQXr2dz2l7vG/h8frZ7dtnd9rG8/1rdlOxabJ6FrpevF5Yf1fFGXHyv7c3aoVvoPifLNU30rAAA=",
  "debug_symbols": "pZfdTttAEIXfxde52N/ZHV6lQiiAqSJFAaVJpQrl3Tvj4+OWi0rV5obvC2EO9uasHX9Or/Pz9fvT4fT2/mN6+PY5PZ8Px+Ph+9Px/WV/Obyf7LefU/AfKU0PcTelDBSgAgI0oAO6IAcgAkjJlpIMBaiAAA3ogC4oAYiApWRDBgpQAQEa0AFdUANgKcWQgAwUoAICNKADukACgBRBiiBFkCJIEaQIUsRSqkEXtABEIAEZKEAFBLAUMXRAF/QAWEozJCADBaiAAJbSDR3QBRqACCQgAwWwFDUI0IAO6IIYwsoIRv/og0ukJEqmFEqleJmiS6N0iq6SAiVSEiVTCqVSmLwUNbl0iq6y1DW7REqiZEqhVIpQGqVTPNk+/egVhkSKJ1cXTxaXQqkUT24untxdOkVX8VpHX3AvNiRRfKP5qnqTk5+7dxmiq3ifIZGSKJlSKJUiFCZ7v5OvoTd8Ee84JFISJVMKpVKE4sm+ht55iK7ivYdESqJkSqFUiqwd810A6RRdRVlaZWmVpVWWVllaZWmVycpkZbKuySkESqQkip9ycWmUTtFVfDdBIiVRMqVQ/JSri1Aapa/ieyeJS6JkSqFUilA8p7l0iq7iewcSKYmSKZ7cbrfdxFvM0+U8z36H+eueY3eij/15Pl2mh9P1eNxNP/fH6/JHPz72p4WX/dnetcWbT69GC3w7HGe32+7PdPj3qOa2Dmvu23j9//meOd/LwHwMhQdg2ocSat8Sqg4l9O0Y7BJ6b0KJIwl2TdkS+tA62GZjglVuJCGVtCX0MJBQA5ehhpFzsH2+zttOvW8+ych82uZzu2++yH3HPzZftvl65/pJHpkX4Xwr981rvO/4h+azlnU+ax2YL5nHX4b6U3Sb15F5yTx+kXDffBu5krbtbtDDSH+bRM7Hr/17tFf7l8P5yzPZzZPOh/3zcV5fvl1PL3+9e/n1wXf4TPdxfn+ZX6/n2ZP+PNj594pvMeSdXcof/Uu2vUz2aabcH2/+738D",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
