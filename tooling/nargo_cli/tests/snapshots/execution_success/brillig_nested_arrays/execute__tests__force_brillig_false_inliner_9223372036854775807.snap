---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZjRbtswDEX/Jc95kCiJkvorQ1CkrTcECNIiSwYMRf99pHXpdhhsCDb20nPdmjcWKdKN3ncvw9P9x+Pp8v315+7h2/vu6Xo6n08/Hs+vz8fb6fUiv33fOf3hXd49+L2wgLXRO9CDBIbdAykjmEAGM1jA2kgO9CCB8CPxC8oEMih+UVnA2hgc6EECAxjBBIpfUmawgOLHwih+WelBAsWvKMWvKhPIoObPqSgmKkTSFPoPUS3TEuH1o8aUs+WcLelsWWdLO1veMxLfRDSRTLCJbKKYqBCa/ya8CXPWEviCGjSRTKhzRRmaKCYqhFaiCW+CTAQT0YRuF4d6NJFN6I7xKAkRatKEN6G7JqAsFFGXJpIJdU4oTRPFhDozSkO69uRNkIlgQp2zlI/G8qm9roDBDBawNo77XOlBAgMYQfgR/Ah+BD9Nb5C0aHZHepDAAEYwgQxmUPyCZFWTqtScjvQggQGMYAIZzCD8NJVBSqKZHOlBAgMYwQQymMECwo/hx/Bj+DH8GH4MP4Yfq5/UmAtYG7MDPUig+slWyBFMIIMZLGBtLA70IIHwK+on26ckkEH1k5YqBayN1YEeJDCAEUyg+sn+qBksoM5FbSOng3Gc5N4EmdDZqG3kdDhqG7lkgk3ovI0YTk1UCB1OMWE4RRtOTQQT0YQ684e0j710Hm/XYdBW+vIWknfT2/E6XG67h8v9fN7vfh3P9/Gmn2/Hy8jb8Sp/lZUNlxehGH4/nQdVH/vPaDcfmlxGcHJlCk/d8eQq4snnbfHEa+Jpig95W3zkbc+/Lj5O8Wlj/jisiWe2+By3xVe/7flXxYcaER9qWhEfgz1/XLV/Yp3i65p4Dvb8zG4u3qeNDbxk0NXBnQbzLbxo0NPDnQaRNy5hpUFPG3c+wXwfLxr0NHKnwXwndi5hVSt/aYVcV8TnEhBf3GwRqWycJUsGXcNk0aBnmiwZbH2dZ/aWQz+7DUPYOM/0nk0rWDLommedBvPzbNGgZ551GkTeuISVBj3zrPMJ5ufZokHPPOs0mB9HnUtYMAj/b6DVYK1Qw5pmrtNArGXN/3byTcgeQGRZ5ZDK5JDqKocyPYMcymx1iGteTHJONK2CwqpnIP1mCYfy91w8yNXx+XT95/wx+fFwLNF4yJKklvI9Mmkhfx2vp+PTedA71et+ebZAubz9frO/2NHm2/X1eXi5Xwf9kM/zTfH7Ju88Ke5Bv8rKlRzw7H0qeunHy7r37A92TDcGyB0ufAbweIcFMMllPEwHQ+M9cpAmtZvukTMqOUQ7fOja/wA=",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested",
    "assert_inside_brillig",
    "create_and_assert_inside_brillig"
  ]
}
