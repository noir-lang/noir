---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1aUW7bMAyVEruenQYttotYlh07f/3YAbYdYIDTOtj2txPMd9jXfjZgJ12dickzoyQNYq4NFgKGbFMkHylSkpVo9ZdG7uoocO3YtfrxulZ+unNtehpZIb1GSG92wbsiqXGbCenNhfQWQnrPOh+0QCwG0pVK4tQD4tSAc6QYDQ18BLpsOsvzpswaY02dZvNFVaR5sZhVpjJFVTxklbVNlVflfDEv07nJbWOWxdw2yxWVHbbAA1yr3US8366NmXzHHw/ob8zsDqm/Sgsbe/wbEP9KP8Z5YP0N6Q9l9KeR0/O23ehHX0LIA62kxinPhf2cTZlvCnwh21cytkvN7CnV39gpZj9RojllNLNHeHh8Riw+r2TwpKQ/FtJP/iYefzH+5N+Ne46Al8D9Ll2YP+TLrUc++jdxNcJxNcfGlfBcy+DJqMYngIfX+FTGtn1qjZP9hGGVGpup2h4bjA/VOPUbtxs8CeMF7bYf1IbAo/Htxv0j+Ic8xLOvbjBXCLdw3VjhusleWN3YZ6yb/FI3G96Z181MuG7sf7qOl8JxzS/r+Jou6zjwznw+mgvXTXFZx9d0WceBJ103U7WdYwHj4Xnfu7bPGwPvfbvB+hlwfwF9HX1o+34otckpibPBx7O7LGZ4h86RNzvwK/AxatWaiDeGdyHEdhU77M94MfCCtm8ncc8B2EFdhCNk/T+55xvXXoEMyd967F8x+z3cnncYI65r7HlH/bvcrt39xF1dfv0AWcxf33hI5lkK32MU2/AALt95oRoOjwkZnq+u7eL2i2EQOi9d77UjGE9fTNA+zl9Kba+FpAf7+9ZOXK/JPu3lca+QsFg8xzkXflvEzLfJkbHwrQ0Tj7++75prJpewWOC9Zu/DHXIj4GP/b67FfNznc6SG89n3h4h9uYr+8Fx9aeMZ7/HtEFZuOzoS6+SAfo4V5SdPsB3vsX3It4DZ1h5cymOb54tmPL1Dls8zu2rFNw/yWvnuWl+thGrbb9y38Tj5fq/BnOZxQt9RltvhMSU53z6T5LoxpzEN2r7snXufnkBltfnhnfZRoervXRWzH7L+P90zzgHUBifgXJa1Wdp6WRf1w0N+X79m+hWL09D274vZ4j4v6rQx3WN2yP4f8/FsrWEmAAA=",
  "debug_symbols": "pdXfaoMwFAbwd8m1F/lv0lcZpaQ2LUJQSbUwiu++c+qJ3RiDoTf9mer3EaPEJ7vE83Q7td21v7PDx5Odc5tSezulvglj23fw75Nx/BG8ZgdRgY70i4KTgpSkYgeJatKQlqxJR/pFyUlBSpL6JPVJ6pPUJ6FPoY70iwr6NCpISSpSk4a0ZE06EvoMqDkpSOizKPTVKPQ51JCWhD6POtIvGlw/Ps8VK4t+GnOMuObfngI8myHk2I3s0E0pVewR0vS66D6E7uUYMpzlFYvdBYTCa5siHs3VO83/jhpeU9hwt8bNv/OSe8pLUe/LS7slL9e8qvfltd03/715q7bkrS35Wu/Le7Fv/pvyXpX3z6st7593quTdlvsXXJcJwKHb1GDc2mD8pga3zgG2vr0N+udzOMIoNG3+tb8L3MkAfG0fIbfhnCKew/TUNeVSGI6fQzlTPhZD7pt4mXLE2vcXA/bDD68rWMojfi5gJIyqhHE4FK+hr4QVxxkn9gU=",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested"
  ]
}
