---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "zZzRbuIwEEX/Jc88eMb22O6vrFYr2tIKCUFF6UorxL9viBq6JVboLLll3prCOdzUusYBN/vmcXH/9vxruX7avDZ3P/bNavMw3y036/Zo37juV68v8/Xx6HU33+6aO3I5zZrF+rH9kZgPs+ZpuVo0d9Edfs4auogEOkO4ilDJPcL+/FV8FeHAJyS7T0h7cL9drlbL51/nZ7hvyKWaL7o+dHT5/DRd1iNFjZDTI6RHWI9UR4BdeUeY0gAJeiTqEdEjSY9kPVLUCDs9QnqE9Yh+9Fk/+qwffdaPPutHny+NPssAKWrEOz1SH30+IX5wLp71iNcjQY9EPSJ6JOmRrEeKGgnuAhIGox9Ij7AeudT9CnKp++IHSH30RXokhQEieiTpkXwBKTRAihqJTo9cmvnPkEO3Vjsufqp/N/HhHRT5tJSaKRc9CWrPUHtB2utru8nsBLXzlfbxpZKH2gPUHqF2gdoT1J6h9oK0s4PaCWqHdpWhXWVoVxnaVYZ2lSfsauVyJUPtBWn3V3d1dClPUDtD7R5qD1B7hNoFak9Qe4bay3T2ypWhg9oJap/wffWrl9n/Z69cXl/d1dFr5Ai1C9SeprNXPgrIUHtB2uOEa+Cvfnzxjz2VAcJ6xOuRoEeiDjl034G1H8VUuZT9O5edjP+Ffelfwpd4nkqQ8oSUZ6S8AOX1y8ap5ISUM1LukfKAlCMbysiGMrKhjGwoX9vQ4Pt3tTBY33qHlBNSzki5R8oDUh6RckHKE1J+bUNDOcnLQF6A8uCQckLKGSn3SHlAyiNSLkh5QsqRDQ3XNnTs28DokHJCyhkp90h5QMojUi5IeULKM1KObKggGyrIhgqyoYJsqCAbKsiGCrKhUm+oUC8nPy6faAuLZCM5io0cyRnJQUZysJEc/vtyjG04SMFIjmgkhxjJkYzkyEZyFBs5sjOSg4zkYCM5jMyn2ch8mo3Mp9nIfJqNzKf5NvPpYDtdLjZyFGckx3fOpyMbswobyeGN5AhGckQjOcRIjmQkRzaSo9jIQc7dJMhwp6MjK0HYSpDbrFErQW6zSB3uV3XfOauObQ91YiVIshIk3yTIcAepK0aCkLMS5DbX/pUgE86sw+225KH2ALVHqF1g9kN79Hu+Xc7vV4vjnXSOD76tH/ob67SHuz8v/SP9rXdetpuHxePbdnG8Cc/H/XeO41fCrH276XrcHlFsD2PpzuF4KG5Gwqf/We8A3wL+A0jdM05A+6jEj53V3XMoz4j96TncvgZLeybt2fwF",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested",
    "assert_inside_brillig",
    "create_and_assert_inside_brillig"
  ]
}
