---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1bS4/jRBAuT+I8nBk2Yv+In3nc9sAicQMunEBkZhJ24QISXEBAbnCBA5wQCMRK/E/Gma64Uik7zqTLSWa6Jattt7te/qpf1e3BferdXYG5b5u8ZXLv7roEOb0weXhYSpToRkp0YyfvKmn9t5ES3VSJbqZE96zx4CnYwhKtUFNOz6KcHpHzAliyLfgFoZWEozSdj+N5lESzMJ5eT7Iwza5Hk2gSZZPsNp4kyXySTsbT6+k4nEZpMo8W2TSZL1ZpXCXnQ2kvjKAtaAawh8rZBp2GwLacPug0LLbl7IBOB2Nbzi7odFi25ezZkzPLsZ63H27QWJrcoPE+uUHjfXKDxvvkBo2WB41rIfNGOW+Qt0aOztB25fSgWDa5EISXEn7/xuR9Vj+va3GkG/UJXdv0J2GW9Jl+luVf0ad2tkx/jvR9HfqrUWGe3lkW9KkuPsGBB1r/KU2V9RxdMd2A6IK8Ozq8xx7jB7A5IgXGPwBVTEUe44fycPtcMPv0dOQJkX5fiT7qGwj6Uvujfs/Mc5eUBeS+jBbFD+oyFOp3m7FrpGzXaF+7ojyXOvLE6OMDIg/38Ssd3kldH0f+AZNV699cwfa/ofZBH8fvWstCnoCVtZfbemDukzL8v/l//4ToR8uoPFV+Q7GCciv7TaLsN/GJ+U1yRL9Jnd8UZWfuNyNlv0meaD8+VrZr6vrxdXL9OCk78/Zoquw3mevH18n146RM22+uYBtjbVZG1/veX26WtUjZB8tC1tdE7s8JvTx9uNzUA6DAlMba4N3aXdxn8trGyPMS+YHo2F3COmFZi7zziW1XtqPfs7I+KWsvN/kE5hkXxzktlMNn378yz89M3iF1sP5Q4N9h/DfkFt5RG3FaLeEdfp9je2buB+bK8fUHqUvxK/0PTZyFZD6GtvV3yCWtF4I9eSKfyfOVyXO7/cNkUFovXY+1u+R/Sjah/Gn7BbDdFyId+r3Ud9L+GvnjWJ6OFQJmi2Osc9G5RZ/pNtjTFlLfMBD0leY1l6xewGxB7z323i+pd0HK6fc/mpzisUrnLtjTWdrJUYVVqg/H6qn9z36Fbrtk5by7e8o62EGfy0rrD2rw7lfw3qVbm/H2BLlA4M3x4rEyr6Qub2fKfEVqB7mv/G5yyVd82Nabjtu4naR4DcU0txPVndblfLhNsZ40zsR6+T/Hf9pebtZ9Yd6HB6TxpNhmiuMoHzbHrsD4++z7v80zbQMwP2QX5GI8ixbJbDHLZre36c3sbUYfmJ1s87/JRtc3aTYL51H+GO/i/6u5P/NYfthULN/ToR8qj2PFWL7ku3lb9JLcvwub39O2oarv0JyfNbAnIFSO+4dV/SHFAOqH7TbtV7rs30i0pHZ+COX9qLJdI2W7rsfjPdjPrlX9u0SratwqzXOk/4C2CHRsEUvrVqiLtG7VZ2U+KUMZ8/rfM/mVsBIrYyVxWClsceZYSZSxMnqi7XXaxP4354OrdO7tdaaMlanDyjo11l7rxG+K8btS/OamKn6DcYafma4eFMmSHBG3o0XaWzEwi7STOnuitfocj/ED2MQJMP5N7YmW1uSkPdFou44g61Ao89i9tJbXEfhItOqsC9alxdf6qP4cC5pjdMoPQMYC3x+vNX+tsqsv2BVt1xVklcZ1HAvSGFHqnyRafC1GoX1LFdu3jPsRwDbuqL7HwB3yD0DVD6IqPEj+jLbrCbIOQR4L0XtpXNQT+Ei0GsDdSNrL0hA2xg/FhtbaehU2pJjRvtjgcbJDsOFbpNW2SMsm/jsKOu6Kt+H7U9+T9JN5PuU9Sfj6HOKYv5jnY8cx/zP3Zx5HjJuKI7ozwQ9P7kywPOdxZ4Lt0Ed93ZlgHRy5s0TuLJFPyuiZiI+JfrSMyuPOBB/Vb9xZoiI5v3l4cmeCdfR2Z4LB9eOuPdo7uTPB4Prxx+g3WmeCXxG5X5t73XWf4tyv0vpi+FyQn68ln/oa+2fm+ZTX2D819/Tc71+kLsWo9L+f+rnfL02e2+0Nk8Gd+3XnfmndFvuWtukekwPf73vu9weTUzxW6ezO/dbTzZ37lXmf87nf30wu+cqpn/tV3NMz47x8kHFMy/DbP5l8SrGwkMfBKa9z2C/wr3l+6ueesb867/0K6aip/QotHfqxtr9K+xWoLmX7q2gdaY780pT1gMzz7q63zL3y/ofRMefBOF/7hulK2yFLckQcHxZpx3y+ZJF2csS9y7XX1h7L3mU+njuVPaU+04ePQ/OkHZuuiwXkH4AqNivP50tzQrRdX5B1KJRxLEhrD9K8Q6LFz9gqtG+pYvuWcT9CvahOmrFXyg/tT99R/gGo+kFUhQfJn9F2gSCrFNvluJPmr4HAR6LVAO5q7W9Uwsb4odjQ3t8oYaPqfF9dbNRZY6qLja5FWh2LtGziv6egY6tETiq/5pg93BFTkORqOqbwnslz+3/HZDhGTIHapE5MQfLVKgw95phClS20Ygp8Luqx92UxBY+U0+8/MjnFY5XONmMKF4LOVVjVjinY/J+HxBQ8dt/dU9Z9YwqUn3ZMocV4twW5QODN8dIuKQOBJ+/rsG5Z38BjCvj9FyaXfEWKKXjk3b4xhSo78fUOjz1LdlI8Qz7jMvuwjauymObXTD4XUyjK6fffmuenHlP4H6qTD9GbhgAA",
  "debug_symbols": "tZjdTuMwEEbfJde9sMf22OZVVhUqEFClqqDSIq0Q774z8TeB1SpRlGhvOBOaOXXGf40/u6f+4fZyfzw/v753d78+u4fL8XQ6vtyfXh8P1+PrWf772Tn9413u7vxOWMDa6B3oQQJDd0fKCCaQwQwWsDaSAz1IIHwEH8FH8JH4grKAtTGILyo9SGAAI5hABjNYQPElYXSgB8XHSvFlpfiKMoEMiq8qC1gbk9bPfe06amWW2716h3onK3iyiicrebKaJys6o+otiBYkC9iCbEGxoCLQ4rfAW2BmMjOZmcysXeAz+qAFxQI1F3RDC7wFZEGwIFqQLGALsgVqruiPIdAOaYGOGIcuIY8+IUKntCBZoMMmoF9aUCzQkRjRNaTlTd4CsiBYoOYk3ReG7lO9PjeDGSxgbRwGudKDBAYwgvARfAQfwaflJSmLVnegBwkMYAQTyGAG1Sc11KIqtaYDPUhgACOYQAYzCJ+WMkiXaCUHepDAAEYwgQxmsIDwMXwMH8PH8DF8DB/Dx+qTPuYC1sbsQA8SqD4ZCjmCCWQwgwWsjcWBHiQQvgJfga/AV9Qnw6oUsDZW9clUqx4kMIARTCCDGSyg+nQcOmeBt0CVOsOcOnU+OV0ZdT65ZAFboIuj7QbRtoNo+0EkLE4xYHFqQbAgWqDm8CXTx3ac++ul73Uq/diCZGN6O1z687W7O99Op133cTjdhpve3w7ngdfDRT6VpvXnJ6EIn4+nXqOv3Xe2m05NLiM5uTKmp8X55Cryyedt+cRr8mnMD3lbfuRt7d+az2FNPrPl57gtv/pt7V+VH2pEfqhpRX4M1v64qv9jHfPrmnwO1n5mN5Xv48YJOCdYNAMXCqan4KxgyRxcKIi88RE2C6an4axgyTxcKJieSAsfYdVM/DGSc12Rn0tAfnGTfUC8cSmYEyxaC2YFSxaDOcHW3TSztxr6yWEY/MblKNDGJ5gTLFqOFgqml6NZwZLlaKEg8sZH2CyYXo5mBUuWo4WC6dVk4SPMCPz/W49qsJFcw5q5WMf1rJY1v6zkPcIaIGFZZUhlNKS6ylDGNsiRxlZDXLOvyAFMGg1lVR18HetAYdVTkL6awVD+Xhj3cnV4PF7+OfyL+laoW8FwRpXccNahiA2pgRtyg7wXJhnUemimDf04XI6Hh1OvTv3W2/nRvkIur7/f7BM7gXy7vD72T7dLr835PoaUb/4l26MMpL2+dMqVHMXsfCp66YfLuvPs93agNiTIHS58J/BwhyUwyWXcj0c4wz1yeCXjZLxHzoXkuGv/pVX6Aw==",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "access_nested",
    "create_inside_brillig",
    "assert_inside_brillig",
    "create_and_assert_inside_brillig"
  ]
}
