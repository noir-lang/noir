---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/8VYy5LTMBAcxVZs2buQgh+xYyfZYw5w4M4PmCy5cIULVFH5dHChYSftsZONpV1VpWRnpO6ecUt+GPrXjP/1LfX9goaNx+x9X81rdUCsKqZOE0nnWZENjTeO/fa9g/l9PAmYsAPekPgPVbt1Sn4B9TdOYEbAXzN+Gge/yjzOh9M5PgHvPZ0vXjmHY9JjH30s93E+fuOPHeDFuO5SU+i6vVf0M1fpc/0BuSaiPoF01OiPgNj/vWfDYzfsmaXANlCvLM61aw3wEZ17noC/AK2h90ADfKwH68P+4trlitaVEpO5yZjkyRUeDSsNiGUhH5k/egHz2fvzal5rrvUC8xcU1Zv1VF0zpa5cO6doXSkx9IJTeJzCo2GxFyLub23E/W2D64jzkjlh7QJxX+075i8o6jqop/ygrWeuXaFoXSkx9F2h8BQKj4b1Ar7b3tPQdy/kjd2t3oj0jDjpDVmfW71hxfFcb2QBsZYBsUL6P4+QYzKiU+qP+cz+t60Zm/1gL+hyNLxOFE5PbUHPJ9/39f8FGmycmjT4bLgYqYkFPa9xn5BrDz1aKuO1vYPH3ynjSzGG+d/S0NN3ME/u0/g+aOB/OzLPiLgc/9n30hNTOWvr8tacF0rOuCcsRvLBPddNaH2N65lP5HZJq4Hj4playwv4qFXylVdw5zO4E+B2CjcpPOgX9Pa19/apvCRmBjrl/AJ0pSO6jcKrrVNtH8R1+s332jq1Si6GxnNfKuNx/6eR3PF7h4Fz+QzH8/BbVt/2vq/mtQ41Wxp6egExHvsd9MX6RvlO4GKdSnryXXoKz797qCrmTU5PdZDvHAT8Fsb/9OdyHcs89jfqPO66+th0x27TPT62hw7r1Df5TTI0/2Gz/XJoN131te5P15f4/wAmT16fBRoAAA==",
  "debug_symbols": "pdXRjrIwEAXgd+Gai3baTltfZWMMKm5ICBpW/+SP8d13hkNd98JkAzd+g3iOiAXu1bHd3z533XA6f1Wbj3u1H7u+7z53/fnQXLvzIO/eK6MvNlQbW1eWQQQJ5AkywAICDniAFkILoYXQQtJCdeUMsICAAx4EwCACaXFCnvAGWEDAAQ8CYBABWry0+LoKBlhAwAEPAmAQQQJoYbQwWhgtjBZGC6OF0cLSwkICeSIaYAEBaYmCBwEwiCCBPJEMsIAAWpK0JCEABtKShQTyRDbAAgIOeBCA/tNGjLNpVpeMLh2ji4Z0sGWgMujScTro4vE6hDJwGbQ36JDKkOfBajProM1RByqDK4MvgzbHx6OuytLfXce21ZX/ci3IFXJpxna4Vpvh1vd19a/pb9OHvi7NMHltRtkrv7AdjqIUnrq+1elR/6TN+2h2cQ5nl57x8Pd8ciWf/IK8nO1yADKmRQ0hPRtCXtSQnsdgid41hPcNwZSCYNKCPJk850mWxao88ZI8PfMurst7Xnf8y/L+mQ8rzx+7JXnmko9+XT7bdcf/Pv/XK8D/btjKVnPoxl9P6Yd2jV2z79t583QbDi97r/8vZU95yl/G86E93sZWm14e9fL6YeW2KJfeVu+NuklONsP2oV//DQ==",
  "file_map": {
    "50": {
      "source": "struct Header {\n    params: [Field; 3],\n}\n\nstruct MyNote {\n    plain: Field,\n    array: [Field; 2],\n    header: Header,\n}\n\nunconstrained fn access_nested(notes: [MyNote; 2], x: Field, y: Field) -> Field {\n    notes[x].array[y] + notes[y].array[x] + notes[x].plain + notes[y].header.params[x]\n}\n\nunconstrained fn create_inside_brillig() -> [MyNote; 2] {\n    let header = Header { params: [1, 2, 3] };\n    let note0 = MyNote { array: [1, 2], plain: 3, header };\n    let note1 = MyNote { array: [4, 5], plain: 6, header };\n    [note0, note1]\n}\n\nunconstrained fn assert_inside_brillig(notes: [MyNote; 2], x: Field, y: Field) {\n    assert(access_nested(notes, x, y) == (2 + 4 + 3 + 1));\n}\n\nunconstrained fn create_and_assert_inside_brillig(x: Field, y: Field) {\n    assert_inside_brillig(create_inside_brillig(), x, y);\n}\n\nfn main(x: Field, y: Field) {\n    // Safety: testing context\n    unsafe {\n        let header = Header { params: [1, 2, 3] };\n        let note0 = MyNote { array: [1, 2], plain: 3, header };\n        let note1 = MyNote { array: [4, 5], plain: 6, header };\n\n        assert(access_nested([note0, note1], x, y) == (2 + 4 + 3 + 1));\n\n        let notes = create_inside_brillig();\n        assert_inside_brillig(notes, x, y);\n        create_and_assert_inside_brillig(x, y);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
