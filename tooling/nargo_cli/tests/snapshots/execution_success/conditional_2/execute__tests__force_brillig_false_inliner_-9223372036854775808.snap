---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _10",
    "private parameters indices : [_0, _1, _2, _3, _4]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [_0]:32 bits []",
    "BLACKBOX::RANGE [_1]:32 bits []",
    "BLACKBOX::RANGE [_2]:32 bits []",
    "BLACKBOX::RANGE [_3]:32 bits []",
    "BLACKBOX::RANGE [_4]:32 bits []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(5))]",
    "EXPR [ (1, _0, _5) (1, _6) -1 ]",
    "EXPR [ (1, _0, _6) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: -2 })], outputs: [Simple(Witness(7))]",
    "EXPR [ (1, _2, _7) (-2, _7) (1, _8) -1 ]",
    "EXPR [ (1, _2, _8) (-2, _8) 0 ]",
    "EXPR [ (-1, _6, _8) (1, _8) 0 ]",
    "EXPR [ (-1, _2, _6) (1, _2) (2, _6) -2 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: -42 })], outputs: [Simple(Witness(9))]",
    "EXPR [ (1, _0, _9) (-42, _9) (1, _10) -1 ]",
    "EXPR [ (1, _0, _10) (-42, _10) 0 ]",
    "EXPR [ (-3, _10) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pZPBjoMgEIbfZc4eUEDRV9lsDCo2JAQNhSYb03ffEWW3PTRp6GV+YPgGGGY2mNQQLr2283KF7muDwWlj9KU3yyi9XiyubvcC0rT3Tilcggc/Uqt0ynrobDCmgJs0IW66rtJG9dKhlxSg7ISKAWdt1D66F/80eY1WjJ5wxdo/nL/P1yzxTZnBU1KePCX8M74kOXzdJr4RGTxrUv6YyDmfk/R5nNQ5PBWJ5zSHb6rEi2f+G2dy1O6pYoFDhwmvo22iFfj0AtpoS3JIeUiFkVAodDUKO4QfgiH2ertJp+Vg1NkOc7DjQ3f4nzV5Uv+sbhnVFJza7xV9eNNf",
  "file_map": {
    "50": {
      "source": "fn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn test3(x: u8) {\n    if x == 0 {\n        must_be_zero(x);\n    }\n}\n\nfn test4() -> [u32; 4] {\n    let b: [u32; 4] = [1, 2, 3, 4];\n    b\n}\n\nfn main(a: u32, mut c: [u32; 4]) {\n    test3(1);\n\n    if a == 0 {\n        c = test4();\n    } else {\n        assert(c[1] != 2);\n    }\n    if false {\n        c[1] = 5;\n    }\n    assert(c[1] == 2);\n\n    test5(4);\n    // Test case for function synchronisation\n    let mut c_sync = 0;\n    if a == 42 {\n        c_sync = foo2();\n    } else {\n        c_sync = foo2() + foo2();\n    }\n    assert(c_sync == 6);\n}\n\nfn test5(a: u32) {\n    if a > 1 {\n        let q = a / 2;\n        assert(q == 2);\n    }\n}\n\nfn foo2() -> Field {\n    3\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
