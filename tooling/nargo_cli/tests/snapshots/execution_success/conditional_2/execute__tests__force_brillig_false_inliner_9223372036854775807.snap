---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/81WS27EIAwlYfLdVc3sewQTkgF2c5VGIfc/QgcNSC7DrDBtnoSMTPR4NsakYk+Mj/Hh59VjcG8dviJflfDVCR9P+C7ed0F7xQi+u7eQB0HIBVhvU1JwU4C3RVwSbsti1WyFFN8wm02vsKzbTQstVr3us5bS6kUrsxkFRizSimM18vBkpeJuUYKJeOEvi60myLE9nsB6u5KCHXkd8eaK7wg19icvXJe7PsGbm8OeTmMy7txctm/ihjyIs8ftzrtN3BnIw6/mAXmYKZp9qMP/eq3zdO8K6x1KCh4YdQPd1UCocWTnf/lHRt1AdzUy2kbyroYyL5il1Bl+sx2aSLOrUY7WUwixDZG9onVOePaBfyrDDx17xRXNpyjOGq3diTQEPu5tw15RR2vh2z7SV9HrE7EWntgr4NPbCflCPn8AqslHaE8OAAA=",
  "debug_symbols": "pZPBjoMgEIbfZc4eUEDRV9lsDCo2JAQNhSYb03ffEWW3PTRp6GV+YPgGGGY2mNQQLr2283KF7muDwWlj9KU3yyi9XiyubvcC0rT3Tilcggc/Uqt0ynrobDCmgJs0IW66rtJG9dKhlxSg7ISKAWdt1D66F/80eY1WjJ5wxdo/nL/P1yzxTZnBU1KePCX8M74kOXzdJr4RGTxrUv6YyDmfk/R5nNQ5PBWJ5zSHb6rEi2f+G2dy1O6pYoFDhwmvo22iFfj0AtpoS3JIeUiFkVAodDUKO4QfgiH2ertJp+Vg1NkOc7DjQ3f4nzV5Uv+sbhnVFJza7xV9eNNf",
  "file_map": {
    "50": {
      "source": "fn must_be_zero(x: u8) {\n    assert(x == 0);\n}\n\nfn test3(x: u8) {\n    if x == 0 {\n        must_be_zero(x);\n    }\n}\n\nfn test4() -> [u32; 4] {\n    let b: [u32; 4] = [1, 2, 3, 4];\n    b\n}\n\nfn main(a: u32, mut c: [u32; 4]) {\n    test3(1);\n\n    if a == 0 {\n        c = test4();\n    } else {\n        assert(c[1] != 2);\n    }\n    if false {\n        c[1] = 5;\n    }\n    assert(c[1] == 2);\n\n    test5(4);\n    // Test case for function synchronisation\n    let mut c_sync = 0;\n    if a == 42 {\n        c_sync = foo2();\n    } else {\n        c_sync = foo2() + foo2();\n    }\n    assert(c_sync == 6);\n}\n\nfn test5(a: u32) {\n    if a > 1 {\n        let q = a / 2;\n        assert(q == 2);\n    }\n}\n\nfn foo2() -> Field {\n    3\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert"
  ]
}
