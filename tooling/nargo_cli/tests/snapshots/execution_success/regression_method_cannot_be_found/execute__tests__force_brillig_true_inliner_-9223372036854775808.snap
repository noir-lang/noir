---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/82WUW7CMAyGHdoCbWGrtoe9bHdIoVD21oedYDfoYEh7maZpB+DoI1JMjZeBRG0JS1VIE33+7RinBjozfoyhhyHk1Y+pHwdkPdo/jZ/bflamzK8kf2WrKg3EJ6h/nnqm0eFb5Cvl344852XX8Wks6He8f3LyewJdfWjFj+enGf/9iZhzH+vDiVgBZP8L1L8GO9LJYzX1zFDzwbWE+DZsbRjIvwmwIjanMbmzeiJcvg/NnSv2hXh3zGn8e9vD6pW16C/y/AT+aqf+E7b/0c8zph9z3Fyoc1u35XbebttFu9lU6/aO8Z2dq39aQwakaqh+S+G4hmT5sxnyExX+8qB/qMN/Rv5Ih/+O/LEO/9DLUxX+vEV+pqN/ifxch79A/kSHv0b+VIVfb7CX30Bn2FfQ9y15L3f/lCW/kwGO+xQw/xnTKv1da5g/1MPzg70Wc1cEtBaBNd6Di4CfIuAnxIoFWYkgayjIGgmyxoIsydynV6orE2RJ1kQuyJoIsq61vvDeCH0HOmv8aHuaYdqp1lDvdLnHvvP1/fH5A8woyBDBOB+wtZgkge6L/uHBGb4JsJy5AvwFuVOjlMIRAAA=",
  "debug_symbols": "pdPNioMwFIbhe8nahfk5OdpbKaVYm5ZAiJLqwFC894l+dVoXwsBsfJum56kQ8hRXdxnvZx9v3UMcjk9xST4Efz+Hrm0G38X87VOU80NqcdCFkAYhxCKMVEi9RJWIXKLzyuRIRCEaMQghFmGkQuolBoqBYqAYKAaKgWKgGCgGioFCUAgKQSEoBIWgEBSCQlAIioVioVgoFoqFYqFYKBaKhWKhMBSGwlAYCkNhKAyFoXBWKKdeUmWFpqkQ67mdh+TcfGwfB5mPt2+Si4M4xDGEQnw1YVx+9OibuHRoUt4tC+HiNTeDNx/c/Gkq3tPl/qiW67CW9DtO23m5P1/za1xKvTeu9serWr7ma/WeV+qvr//feTbr+3NVbuZPedW0Pm1u1jRLyTeX4F7L2xjbj93hu1931pvZp6511zG5Wfq4nvl5VLpQ1Wma/+0H",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "struct Item {\n    id: Field,\n}\n\nimpl Item {\n    fn log(self) {\n        let id = self.id;\n        std::println(id);\n    }\n}\n\nfn create<V>(something: V) -> V {\n    something\n}\n\nfn main() {\n    let a = Item { id: 1 };\n    let b = create(a);\n    let _id = b.id;\n    // Regression for:  cannot find this method\n    b.log();\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
