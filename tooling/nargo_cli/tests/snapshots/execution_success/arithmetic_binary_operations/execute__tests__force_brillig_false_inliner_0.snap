---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/7VX246DIBAFravW9WGz7X8wgBXe+ite//8HNtmaMglFtsnG4STNWAePZy4MkbMn2sfvy12fnM3YHtzZu7PiGIDTcYmIXCpu6ecC81NgQnJnN8dPICBPmDAlblovvVxAwSCkHU0ndDfeDBjoTDdLo9RitOntaHthQasF1s6qZX3iRMC1OmEFS1PILMjfUZ2UMX94XGCUlL3a1plZgJ4naaScRy0mMUxysRrsqqVW0zyND84BVrEOk13Nk8vvow/XRyf3n7M9eMK8UMSCKFMKLiMNclR8SdfIUBHGmyqHVYT3aA4rRjsMwhqLY4DCxU1Z5ypBfWrCPPoDpmb7oUJ9slMeCP8ZhOIYJCHXyyA8pxR89l50J2q+jSNLoDUj1MgdH/XGaxjtAKPeXFu9mwRxfxLHjUjRR1Qxt4lrTVGTNkEP5Yx20OFnUe7VnbPXz0geWYP+ytna2bP3DKFWifxNGn5Rsj38+dwEPoz/FHnur0M6C+y7te8OzTbiQ85vZ329GEcd2KvHS5hLQP5LGv5ora7e9SWI08/3nUgD8uGeKNgeWeDDteGe4fT6gAXII+9CYM9cvHuYz18FDqmraxIAAA==",
  "debug_symbols": "nZLPjoQgDMbfpWcPyh8dfZXNxqDihISgYWCTjfHdt1aZnTnMhcv3AeVXStoNJj3Ee2/cvDyg+9pg8MZac+/tMqpgFoen215A2vbBa41H8BJHalVeuwCdi9YW8KNspEuPVTnyoDxGywK0m9Ax4WysPlZ78U+Xn1HG2gtmvH7iMocXVQ4vm8TXLIe/Pd9vRQbPWXXxnOX8n0uReNlm8EKk5gkh3/hv3KnR+LeJgRI6LLgiZaScVJBK0pq0Ib2RtieFMENDukZjp/HTMAF2osIMzX6U640arL6mdI5ufBna8LumSBrr1S+jnqLXR7kUww/8AQ==",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested are:\n// Binary addition, multiplication, division, constant modulo\n// x = 3, y = 4, z = 5\nfn main(x: Field, y: Field, z: Field) -> pub Field {\n    //cast\n    assert(y as u1 == 0);\n\n    let a = x + x; // 3 + 3 = 6\n    let b = a - y; // 6 - 4 = 2\n    let c = b * z; // 2 * 5 = 10\n    let d = c / a; // 10 / 6 (This uses field inversion, so we test it by multiplying by `a`)\n    d * a\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
