---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _13",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : [_3]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Simple(Witness(4)), Simple(Witness(5))]",
    "BLACKBOX::RANGE [(_4, 253)] []",
    "EXPR [ (1, _1) (-2, _4) (-1, _5) 0 ]",
    "EXPR [ (-1, _4) (-1, _6) 10944121435919637611123202872628637544274182200208017171849102093287904247808 ]",
    "BLACKBOX::RANGE [(_6, 253)] []",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(4))], q_c: 10944121435919637611123202872628637544274182200208017171849102093287904247808 })], outputs: [Simple(Witness(7))]",
    "EXPR [ (-1, _4, _7) (10944121435919637611123202872628637544274182200208017171849102093287904247808, _7) (1, _8) -1 ]",
    "EXPR [ (-1, _4, _8) (10944121435919637611123202872628637544274182200208017171849102093287904247808, _8) 0 ]",
    "EXPR [ (1, _5, _8) (1, _8, _8) (-1, _9) 0 ]",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "EXPR [ (1, _5) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(2, Witness(0))], q_c: 0 })], outputs: [Simple(Witness(10))]",
    "EXPR [ (2, _0, _10) -1 ]",
    "EXPR [ (2, _0, _2) (-1, _1, _2) (-1, _11) 0 ]",
    "EXPR [ (1, _10, _11) (-1, _12) 0 ]",
    "EXPR [ (2, _0) (-1, _13) 0 ]",
    "EXPR [ (-1, _12, _13) (1, _3) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "nZLPjoQgDMbfpWcPyh8dfZXNxqDihISgYWCTjfHdt1aZnTnMhcv3AeVXStoNJj3Ee2/cvDyg+9pg8MZac+/tMqpgFoen215A2vbBa41H8BJHalVeuwCdi9YW8KNspEuPVTnyoDxGywK0m9Ax4WysPlZ78U+Xn1HG2gtmvH7iMocXVQ4vm8TXLIe/Pd9vRQbPWXXxnOX8n0uReNlm8EKk5gkh3/hv3KnR+LeJgRI6LLgiZaScVJBK0pq0Ib2RtieFMENDukZjp/HTMAF2osIMzX6U640arL6mdI5ufBna8LumSBrr1S+jnqLXR7kUww/8AQ==",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested are:\n// Binary addition, multiplication, division, constant modulo\n// x = 3, y = 4, z = 5\nfn main(x: Field, y: Field, z: Field) -> pub Field {\n    //cast\n    assert(y as u1 == 0);\n\n    let a = x + x; // 3 + 3 = 6\n    let b = a - y; // 6 - 4 = 2\n    let c = b * z; // 2 * 5 = 10\n    let d = c / a; // 10 / 6 (This uses field inversion, so we test it by multiplying by `a`)\n    d * a\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
