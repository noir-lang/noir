---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : [_3]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 15 }, Call { location: 16 }, Mov { destination: Direct(32839), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 32 }, Cast { destination: Relative(5), source: Relative(2), bit_size: Integer(U1) }, Cast { destination: Relative(4), source: Relative(5), bit_size: Field }, Cast { destination: Relative(5), source: Relative(4), bit_size: Integer(U1) }, Const { destination: Relative(4), bit_size: Integer(U1), value: 0 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U1, lhs: Relative(5), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 25 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, BinaryFieldOp { destination: Relative(4), op: Add, lhs: Relative(1), rhs: Relative(1) }, BinaryFieldOp { destination: Relative(1), op: Sub, lhs: Relative(4), rhs: Relative(2) }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(1), rhs: Relative(3) }, BinaryFieldOp { destination: Relative(1), op: Div, lhs: Relative(2), rhs: Relative(4) }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(1), rhs: Relative(4) }, Mov { destination: Relative(1), source: Relative(2) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 37 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZLNroMgEEbfZdYs5E+rr9I0BhUbEoKG6k1ujO9+B5Feu+iGDUcczzcSZoNBd+uzNW6cXtDcN+i8sdY8Wzv1ajGTw7cbFGGhFTSUAL1F1AcYlhiCRrAIHiEiJDQcUUIjEJgiEZhSIjCl2ncCqV27eK1Dt0t//KtZee0WaNxqLYEfZdfjo9es3MFFeawWBLQbkBg4GqvD007+7eK7ylh9yoyXb13m+ILm+LJKfsly/Nu7fy0yfM7o6XOWc34uRfJlneELkS5PCPnhP3CneuM/JnIPSd6ozupzO66uv1SX3zlV0kTPfur1sHodki5jjeudM8Krxx66/QE=",
  "file_map": {
    "50": {
      "source": "// Tests a very simple program.\n//\n// The features being tested are:\n// Binary addition, multiplication, division, constant modulo\n// x = 3, y = 4, z = 5\nfn main(x: Field, y: Field, z: Field) -> pub Field {\n    //cast\n    assert(y as u1 == 0);\n\n    let a = x + x; // 3 + 3 = 6\n    let b = a - y; // 6 - 4 = 2\n    let c = b * z; // 2 * 5 = 10\n    let d = c / a; // 10 / 6 (This uses field inversion, so we test it by multiplying by `a`)\n    d * a\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
