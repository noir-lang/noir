---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "year",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "min_age",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 32
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _20",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2]",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 8)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "EXPR [ (1, _1, _3) (1, _4) -1 ]",
    "EXPR [ (1, _1, _4) 0 ]",
    "EXPR [ (1, _0, _4) (-2, _4) (-1, _5) 0 ]",
    "BLACKBOX::RANGE [(_5, 32)] []",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _4) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4 })], outputs: [Simple(Witness(6)), Simple(Witness(7))]",
    "BLACKBOX::RANGE [(_6, 30)] []",
    "BLACKBOX::RANGE [(_7, 3)] []",
    "EXPR [ (1, _4) (1, _7) (-1, _8) 3 ]",
    "BLACKBOX::RANGE [(_8, 3)] []",
    "EXPR [ (-4, _4, _6) (-1, _20) 0 ]",
    "EXPR [ (1, _4, _5) (-1, _4, _7) (1, _20) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 4294967297 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(9)), Simple(Witness(10))]",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 32)] []",
    "EXPR [ (-1, _0) (-4294967296, _9) (-1, _10) 4294967297 ]",
    "EXPR [ (1, _0) (-1, _11) -2 ]",
    "EXPR [ (1, _4, _9) (-1, _4) (-1, _9) (-1, _12) 1 ]",
    "EXPR [ (1, _11, _12) (-1, _13) 0 ]",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _12) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(13))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_14, 30)] []",
    "BLACKBOX::RANGE [(_15, 3)] []",
    "EXPR [ (1, _12) (1, _15) (-1, _16) 3 ]",
    "BLACKBOX::RANGE [(_16, 3)] []",
    "EXPR [ (1, _12, _13) (-4, _12, _14) (-1, _12, _15) 0 ]",
    "EXPR [ (-1, _4) (-1, _17) 1 ]",
    "EXPR [ (1, _12, _14) (-1, _18) 0 ]",
    "EXPR [ (-1, _17, _18) (1, _2) (-5472060717959818805561601436314318772137091100104008585924551046643952123904, _20) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "nZLBjoQgDED/pWcPgiKjv7LZGFSckBA0DGyyMf77VqruzGGSiZc+oLyGlC4w6C7eW+PG6QHN1wKdN9aae2unXgUzOTxd1gyObRu81ngET3m0ZuW1C9C4aG0GP8rGdOkxK5cYlMdsnoF2AxILjsbqbbVm/3b+XhV8d6vylMXHtqx2+3bJFoddX7BZXu46Y/yKz0+/uOYXpy9f/G/cqd74l78GjhczKFIsUxTQYPerFCU0WO6WYp0iywmMwAkFAQvg65kgVARJwCLYWFYn8JzACFgFv4wXhJIgCBVBEugpfHvLujXBG9VZvU/tGF3/NMThdz4yx5jPfur1EL3empBy2JY/",
  "file_map": {
    "50": {
      "source": "fn main(year: u32, min_age: u8) -> pub u32 {\n    if min_age == 0 {\n        (year - 2) / 4\n    } else if year > 1 {\n        (year - 2) / 4\n    } else {\n        0\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient"
  ]
}
