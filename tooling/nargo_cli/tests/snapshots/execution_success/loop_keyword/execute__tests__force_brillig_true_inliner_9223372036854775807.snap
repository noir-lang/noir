---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : []",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(1), offset_address: Relative(2) }, Call { location: 11 }, Call { location: 12 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32836 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 49 }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(2), bit_size: Field, value: 0 }, Store { destination_pointer: Relative(1), source: Relative(2) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Const { destination: Relative(2), bit_size: Field, value: 4 }, Const { destination: Relative(4), bit_size: Field, value: 2 }, Const { destination: Relative(5), bit_size: Field, value: 1 }, Jump { location: 24 }, Load { destination: Relative(6), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(6), rhs: Relative(2) }, JumpIf { condition: Relative(7), location: 43 }, Jump { location: 28 }, Load { destination: Relative(6), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(6), rhs: Relative(4) }, JumpIf { condition: Relative(7), location: 39 }, Jump { location: 32 }, Load { destination: Relative(6), source_pointer: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(8), op: Add, lhs: Relative(6), rhs: Relative(7) }, Store { destination_pointer: Relative(3), source: Relative(8) }, BinaryFieldOp { destination: Relative(6), op: Add, lhs: Relative(7), rhs: Relative(5) }, Store { destination_pointer: Relative(1), source: Relative(6) }, Jump { location: 24 }, Load { destination: Relative(6), source_pointer: Relative(1) }, BinaryFieldOp { destination: Relative(7), op: Add, lhs: Relative(6), rhs: Relative(5) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Jump { location: 24 }, Load { destination: Relative(1), source_pointer: Relative(3) }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 48 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 54 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZPLroMgEED/ZdYs5CXqrzRNQy1tSAgaqje5afz3Ozpy+0i6YcMRZ87AkMwDLu48304+Xoc7dIcHnJMPwd9OYejt5IeIfx9QrQuX0AkGXBE0oSYY6CSiIbQbhCJgpkI0BIxpBlJAVyMkATMNQhOwZoMwBBJUtWUqTpBbTKHXIjShJqDXLguD3MJpSs6tHbz0hJ2ONrk4QRfnEBj82DBvSffRxo2TTRitGLh4QWLBqw9u/VrY066+q7rZXfOU9bvNv9tcm13nuinxTT6em7bAF5XafcFL7i/0v18X+UZnv+EFvhT5fClFia9E9lXJ+0vDs/9x/yPubO/T24wta6Xk7Tm4fXudY/8SnX7HHMkzOqahd5c5ubXSy6DielAt0+q4rKf9AQ==",
  "file_map": {
    "50": {
      "source": "fn main() {\n    // Safety: test code\n    unsafe {\n        check_loop();\n    }\n\n    check_comptime_loop();\n}\n\nunconstrained fn check_loop() {\n    let mut i = 0;\n    let mut sum = 0;\n\n    loop {\n        if i == 4 {\n            break;\n        }\n\n        if i == 2 {\n            i += 1;\n            continue;\n        }\n\n        sum += i;\n        i += 1;\n    }\n\n    assert_eq(sum, 1 + 3);\n}\n\nfn check_comptime_loop() {\n    comptime {\n        let mut i = 0;\n        let mut sum = 0;\n\n        loop {\n            if i == 4 {\n                break;\n            }\n\n            if i == 2 {\n                i += 1;\n                continue;\n            }\n\n            sum += i;\n            i += 1;\n        }\n\n        assert_eq(sum, 1 + 3);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
