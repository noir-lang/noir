---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1YTY/TMBB1mrhJGqpW8EcS0pIekKgEEleQuHFAaVe9cAGJA+JCTkjsr966O7N5O5lmu0qsvaylyI5n/N582BO3gWlbQH1kBjQGuaY+pX4C8vD4bOk9H9aKVPCOib/JV6tU8W9E+8uUMAM/+Dnje4p/HhPOh6bFR1+YNzk+GYznpt0fvvzn/Pn0/1WPz7x33jdeuOuMYvldxJL5zYh+zsF+A74ib+QnxrtA8BmwA2XMPxO2jl1zAsHH9sj4cB44dlaxdanIcK+iDHmswvOM9Yz1VFhz0609wZmeeeSc5JE127WF0WuNa6li35i1nuM1JbzIdOOFtk2EPo4NrcG5gnpX03/CmnO1JuqJXajYM1fWDc1RXx481d+7O83UD/6a8WPwexzsYsfYiR/bC85xoOTFxestzKPMmnZfYb757mKF/mfAfEfjhcKNdyHtTG/H8bvqq2WaPQvT3aO4FtdZRTcWMtb9KPz1VYteAq60X8tDJPzS6smlcZL145I4afk3ZvzazNyRYh/yS1s/CTs93WXVvDFXZrrnEr8xuGZ6xo8v1Dv5NxprOZT5lfsUY5F6igX7NFN8RU62bSL0cYyx4Lmv1Gvf08feebQ60fcNvDT+/Ds4bLoYHINIyLY0nw9rOxeXX2CHjIEFXsyJMf0xk3lF/VTouLY03bzGQobYVmCECg+elUT4+NC30Wfcq83tvj/ZSvhW+GAEvxX6P+gd48V9NMDOQ1UXh7I+1Ov66mq1r2Wtco3zkHngr6tys3+92le7dVmXbx7kX9B42rRyPEeuxfTOtUXq4/cA9X+z7vH5Q2M+q1bhc3r/e/SCM/0JQ5mLmvtzadPVD5uuPnPPmq6NLMtAhmfctRf0jvFCLLbDCv1/9M45SWANr18q/Ingv2e3MifvD5minyn6Lj9/GY969H3s/4dOnAIf56RtvHfcvr4BCk9ViZUXAAA=",
  "debug_symbols": "pZTbbuowEEX/xc95sD3jG79SIRTAVJGigNLkSEco/95xdtzLQ6UqfcmaYdgLNBg/1TWf59dTN9zub+rw8lTnsev77vXU3y/t1N0HefWpdHkYVgfTKOMADwQgAmmF1YABLEAALBYWC4uFxcJiYSFYCBaChWAhWAgWgoVgIVgIFoaFYWFYGBaGhWFhWBgWhoVhcbA4WBwsDhYvMyuQjgTiZIEDPCBOJ4hAWhE0YABxegEBYgkCB3ggABFIK6LEo4ABB3ggABFIK5IGkEsWIEDiSVA2oYVhY9yYQKN1LUwtbC2oFmW5elkaVY/SaRpzLifpy9mSE/doxzxM6jDMfd+of20/r296e7TDyqkdZSrKPFyFIrx1fS7V0nym9c9R77esDx9h9+u0sfWjjTU78uTTlqcQ9+QTb3nW6W95QzvyzHV97OPf8oH37J9c3T+7HXmra97qXb9/8h95+y1/lK69dOO3u3IpprFrz33e2ts8XL5Mp/+POql37WO8X/J1HnMxfV648ngxxjeGwrH8oUqrQ2OMLa1ZpyStOy7ly7wD",
  "file_map": {
    "50": {
      "source": "global N: u32 = 10;\n\nunconstrained fn main() {\n    let mut arr = [0; N];\n    let mut mid_change = arr;\n\n    for i in 0..N {\n        if i == N / 2 {\n            mid_change = arr;\n        }\n        arr[i] = 27;\n    }\n\n    // Expect:\n    // arr        = [27, 27, 27, 27, 27, 27, 27, 27, 27, 27]\n    // mid_change = [27, 27, 27, 27, 27, 0, 0, 0, 0, 0]\n    let modified_i = N / 2 + 1;\n    assert_eq(arr[modified_i], 27);\n\n    // Fail here!\n    assert(mid_change[modified_i] != 27);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
