---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 12 }, Call { location: 13 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 39 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Store { destination_pointer: Relative(3), source: Relative(4) }, Const { destination: Relative(5), bit_size: Field, value: 5 }, BinaryFieldOp { destination: Relative(6), op: Equals, lhs: Relative(1), rhs: Relative(5) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 1 }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 23 }, BinaryIntOp { destination: Relative(5), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(5), location: 26 }, Jump { location: 33 }, JumpIf { condition: Relative(6), location: 31 }, Jump { location: 28 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(1) }, Mov { destination: Relative(2), source: Relative(5) }, Jump { location: 23 }, Store { destination_pointer: Relative(3), source: Relative(2) }, Jump { location: 33 }, Load { destination: Relative(1), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 38 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 44 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZLRisMgEEX/ZZ59iBqzqb9SSjCJKYKYYHVhCf77jjHppg8LpS8edbz3DjgrjLqP9864aX6AvK7Qe2OtuXd2HlQws8PbFaq80BokJUBFQVPwVdCCZIjLBsZBckS55LSAF6BLjRAFTQG61CkROFK74LXOoac2sLlFee0CSBetJfCtbNwePRblNgblsVoR0G5EouFkrM67RP7U1f9SRsUuZrR5ysX7enGEM/GRnj/z+Sd6ztpdz3n7or/hSQ3Gv3xsyk7eqN7q/ThFN5yq4Wc5KsdgLH4e9Bi9zk6n6cD1yi+krm8pp/0C",
  "file_map": {
    "50": {
      "source": "// Regression for issue #7359 (https://github.com/noir-lang/noir/issues/7359)\n// We want the loop to be small enough that the compiler may attempt to unroll it.\nunconstrained fn main(x: Field) {\n    let mut count = 0;\n\n    for i in 0..1 {\n        if x == 5 {\n            count = i;\n            break;\n        }\n    }\n    assert(count == 0);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
