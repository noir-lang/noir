---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "a",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "b",
        "type": {
          "kind": "array",
          "length": 32,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "c",
        "type": {
          "kind": "array",
          "length": 3,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "public"
      },
      {
        "name": "d",
        "type": {
          "kind": "array",
          "length": 5,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+2cyW8TSxDG2/aMkwkvL3nw9veAsO8wju3Y7AGyHLhx5DYkyg2JExc4DDckLiDxB+MPd+FyTRtkMQ36EC2NZjzdU/3r6uq9koYbh93R1fDPibnj/ZqbDpJ209/zrwudGmXlsRgbBIxNAsYWAWNCwJgSMLYJGBcIGBcJGDMCxiUCxkMEjL8QMC4TMP5KwLhCwLhKwPgbAeNhAsYjBIy/EzD+QcD4JwHjXwSMfxMw/kPA+C8B438EjP8TMB4lYDxGwHi8RsZvsRe5RqDTEwSMJwkYTxEwniZgPEPAeJaA8RwB43kCxgsEjBcJGC8RMF4mYLxCwHiVgPEaAWNOwNghYFwnYOwSMPYIGPsEjBsEjAMCxiEB43UCxhsEjDcJGG8RMN4mYLxDwHi3Rkawtdx0qJt3k0Cn9wgY79dc76mLW+8PCHS6RcC4TcC4Q8C4G4HxY9hWz4BuunGnCgdcNDI4kMJBEw6QcDCEAx8c5OCABgcvOFDBQWl1dMHBBg4scBCBAwYcHOBAgAN6HIDjgBkHuDggxQEkDvhwgIYDqrXRhUMVHFrgUACb7tjUxqYxNmWx6YlNRWzaYVMMm07Y1MGmCTYlUCosqrFoxaIQiy4sarBowKQck15MKjFpw6QIkw4M6hg0MSihwW95fcAgdt1kcNkcXehk77tqkIp+7++ZvzdVfI0O153M5Fun/GE+PMgC5auRv5t5mWkU+b2hyG/H4c8XvJzdciJfl6Wt7KDhYtVTbxC3nOv5simbU2WRvBfi5N1pmPycm7RFHSf5L7mYNjX+wxOdn/BY/UibX5Y05YSnYeKSsloOiUtVnNQv+t+bKp21LeGQuonR/wzzjZ9257jszsYlZbUc89qdti1rd60IuhiNS5HtLu9+P7vLez+i3bVMXFJWyzGv3WmdWLtLIuhiZHdFZLvrf0e72/gR7S4xcUlZLce8dqdtK1XpdtTzQ/8cd943np/HGt8RjgT4dV4IC6X7FMReWuqd6FX0vKjTm7hMxSXldD5L/nei8tGyhCM16WVNu+LvbfWNfL8ayL9t8p/iDryzeskC6bNAetjaHf+MtbSsuR6UE3l1r7kQtuLI74v87Sjy13ORvxOHv0AdoA2/8fJWXLXPlz4gcp+cS9tb9PLE9m2ewtY06fUzQmrePfJ3/H6nvtEyncpTvxP7XXXVfrFtdGfHY627WGvzz+kuVJfz6u6xm627xFV1l3xGd60AT8y5DEIWKGNNsj/t62Rx2Dt2nqT1hLotTH1In5y68BxC+trUpH+lZO77Z7vucW56fNR356pzKOeq9a9lbZXT+bRqzEfLkv457h5c53pof0LX1VP1XsfputLfpipep3+pZD7zzytu9vwl7typM7TlSWaUpzmjPM8NZ6R5dn5YybU6DulP25nmD5UPQcbp1KR/YcoXY69gVvkkL4z1obYhzLZ9Wl3M6ut1GukD520HzYBczWiZQuN1aG8mVKf625BN6rSLJk7Svvb32ON6qD7bRheNgC50+7F1kprvnZseRyR9UtZfpsFwPFf5yFpOdGudGXT+qUn/1v9eUuWQ+9f885yDQdE56BYHRb/Y3+/tFVb3CFL/hyLkXwy6w7313t7gSb9bdDe+mP8HEU7n+0FLAAA=",
  "debug_symbols": "pZPbisMgEIbfxWsvPB/yKqUUm9oiiAk2WVhK3n3H7qSHi4UlvcnnRP8PGZkbOcXjfDmkch6upNvdyLGmnNPlkIc+TGko8PdGWPt4SzpOCWdQiUaOFEiJVEiN9KSTQA7nVCOc040KqZEGaZEOCXkDFAzJkQKpfr1CIw0SchYoGZIjIecaJVIhNRLyflkoWVtwmGqMrQMvPYFOjaHGMpGuzDlT8hXyfD90HUO5cwoVdhklsZyAIDynHNtqoc80+zvqmMSwE8+4lv/NQ8cNCmBpNxmMehiM32Tw8mHweotBKL0ahBabDObRB2HlBoOTbn0JJT7L2y15r9dn8M695fdQhT7Vt3ldmqmmcMwRy/Nc+pfd6Xtcd9Z5H+vQx9NcYzM9hx5mZKc9NX7fJhkKLj3lSrWStxIehyu7X9pVfgA=",
  "file_map": {
    "53": {
      "source": "mod foo;\nmod baz;\n\nglobal M: u32 = 32;\nglobal L: Field = 10; // Unused globals currently allowed\nglobal N: u32 = 5;\nglobal T_LEN: u32 = 2;\n\n// Globals can reference other globals\nglobal DERIVED: Field = M as Field + L;\n\nstruct Dummy {\n    x: [Field; N],\n    y: [Field; foo::MAGIC_NUMBER],\n}\n\nstruct Test {\n    v: Field,\n}\nglobal VALS: [Test; 1] = [Test { v: 100 }];\nglobal NESTED: [[Test; 1]; 2] = [VALS, VALS];\n\nunconstrained fn calculate_global_value() -> Field {\n    42\n}\n\n// Regression test for https://github.com/noir-lang/noir/issues/4318\nglobal CALCULATED_GLOBAL: Field = calculate_global_value();\n\nfn main(\n    a: [Field; M + N - N],\n    b: [Field; 30 + N / 2],\n    c: pub [Field; foo::MAGIC_NUMBER],\n    d: [Field; foo::bar::N],\n) {\n    let test_struct = Dummy { x: d, y: c };\n\n    for i in 0..foo::MAGIC_NUMBER {\n        assert(c[i] == foo::MAGIC_NUMBER as Field);\n        assert(test_struct.y[i] == foo::MAGIC_NUMBER as Field);\n        assert(test_struct.y[i] != NESTED[1][0].v);\n    }\n\n    assert(N as Field != M as Field);\n\n    let expected: u32 = 42;\n    assert(foo::TYPE_INFERRED == expected);\n\n    let mut y = 5;\n    let mut x = M;\n    for i in 0..N * N {\n        let M: u32 = 10;\n        x = M;\n\n        y = i;\n    }\n    assert(y == 24);\n    assert(x == 10);\n\n    let q = multiplyByM(3);\n    assert(q == 96);\n\n    arrays_neq(a, b);\n\n    let t: [Field; T_LEN] = [N as Field, M as Field];\n    assert(t[1] == 32);\n\n    assert(15 == my_submodule::my_helper());\n\n    let add_submodules_N = my_submodule::N as Field + foo::bar::N as Field;\n    assert(15 == add_submodules_N);\n    let add_from_bar_N = my_submodule::N as Field + foo::bar::from_bar(1);\n    assert(15 == add_from_bar_N);\n    // Example showing an array filled with (my_submodule::N + 2) 0's\n    let sugared = [0; my_submodule::N + 2];\n    assert(sugared[my_submodule::N + 1] == 0);\n\n    let arr: [Field; my_submodule::N] = [N as Field; 10];\n    assert((arr[0] == 5) & (arr[9] == 5));\n\n    foo::from_foo(d);\n    baz::from_baz(c);\n    assert(DERIVED == M as Field + L);\n\n    assert(CALCULATED_GLOBAL == 42);\n}\n\nfn multiplyByM(x: Field) -> Field {\n    x * M as Field\n}\n\nfn arrays_neq(a: [Field; M], b: [Field; M]) {\n    assert(a != b);\n}\n\nmod my_submodule {\n    global N: u32 = 10;\n    global L: Field = 50;\n\n    fn my_bool_or(x: u1, y: u1) {\n        assert(x | y == 1);\n    }\n\n    pub fn my_helper() -> Field {\n        let N: u32 = 15; // Like in Rust, local variables override globals\n        let x = N as Field;\n        x\n    }\n}\n\nstruct Foo {\n    a: Field,\n}\n\nstruct Bar {}\n\nimpl Bar {\n    fn get_a() -> Field {\n        1\n    }\n}\n\n// Regression for #1440\nglobal foo: Foo = Foo { a: Bar::get_a() };\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
