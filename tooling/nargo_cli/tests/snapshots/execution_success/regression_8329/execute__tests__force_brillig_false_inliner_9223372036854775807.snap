---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "boolean"
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _20",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : [_3]",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "BLACKBOX::RANGE [(_2, 1)] []",
    "EXPR [ (1, _1) (-1, _2) (-1, _4) 0 ]",
    "BLACKBOX::RANGE [(_4, 1)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: [Simple(Witness(5))]",
    "EXPR [ (1, _2, _5) (1, _6) -1 ]",
    "EXPR [ (1, _2, _6) 0 ]",
    "EXPR [ (1, _4, _6) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _4) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: [Simple(Witness(7)), Simple(Witness(8))]",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 1)] []",
    "EXPR [ (1, _2) (-1, _4) (-1, _8) (-1, _9) 0 ]",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "EXPR [ (1, _2, _7) (1, _8) (-1, _10) 0 ]",
    "EXPR [ (1, _0, _4) (-1, _4, _10) 0 ]",
    "EXPR [ (-1, _2, _4) (1, _4, _7) (-1, _11) 0 ]",
    "BLACKBOX::RANGE [(_11, 1)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 })], outputs: [Simple(Witness(12))]",
    "EXPR [ (1, _11, _12) (1, _13) -1 ]",
    "EXPR [ (1, _11, _13) 0 ]",
    "EXPR [ (1, _4, _11) (-1, _14) 0 ]",
    "EXPR [ (1, _13, _14) 0 ]",
    "BRILLIG CALL func 1: PREDICATE = EXPR [ (1, _14) 0 ]",
    "inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 })], outputs: [Simple(Witness(15)), Simple(Witness(16))]",
    "BLACKBOX::RANGE [(_15, 1)] []",
    "BLACKBOX::RANGE [(_16, 1)] []",
    "EXPR [ (1, _11) (-1, _14) (-1, _16) (-1, _17) 0 ]",
    "BLACKBOX::RANGE [(_17, 1)] []",
    "EXPR [ (1, _11, _15) (1, _16) (-1, _18) 0 ]",
    "EXPR [ (1, _7, _14) (-1, _14, _18) 0 ]",
    "EXPR [ (1, _0) (-1, _2) (-1, _19) 0 ]",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "EXPR [ (1, _1) (-1, _19) (-1, _20) 0 ]",
    "BLACKBOX::RANGE [(_20, 1)] []",
    "EXPR [ (1, _3) (-1, _20) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "nZLBboQgEIbfhTMHBhTXfZWmMai4ISFoWNmkMfvuHRlpdw9NGi/zCfj9ZnA2Nto+3ToXpvnOrh8b66Pz3t06Pw9mdXPA3e3JWVl2a7QWt9jLOVqLiTas7BqS95w9jE/5pftiQuZqIp4KzmwYkRg4OW/3pyf/tcXfqobD1fpHrv9tt/VhgxAndIBL8aU64+vSOej6jN/qw5cCTvgSSv9Svvf/iSszuPj2u5nCT3JW5VqjxJnOtcn1kmubKwgCECRBESoCJQBGKERDwJAK0WZIQQCCJChCRagJmtAQKEVSisIU7FMBAVPw1hSm7BPzMNGZ3ttjnKcUhpfpXr+WclLmf4nzYMcU7X41+Qwv6xs=",
  "file_map": {
    "50": {
      "source": "fn main(x: bool, y: bool, z: bool) -> pub bool {\n    let p = y - z;\n    if p {\n        let a = x / z;\n        let b = a - z;\n        if b {\n            let _ = a / b;\n        }\n    }\n\n    let u = x - z;\n    let v = y - u;\n    v\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient"
  ]
}
