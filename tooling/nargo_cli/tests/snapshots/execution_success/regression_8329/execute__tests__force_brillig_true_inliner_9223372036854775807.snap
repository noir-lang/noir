---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 1
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 1
        },
        "visibility": "private"
      },
      {
        "name": "z",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 1
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "unsigned",
        "width": 1
      },
      "visibility": "public"
    },
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : [_3]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U1) }, Cast { destination: Direct(32837), source: Direct(32837), bit_size: Integer(U1) }, Cast { destination: Direct(32838), source: Direct(32838), bit_size: Integer(U1) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 18 }, Call { location: 19 }, Mov { destination: Direct(32839), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 44 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U1, lhs: Relative(2), rhs: Relative(3) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U1, lhs: Relative(3), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 24 }, Call { location: 50 }, JumpIf { condition: Relative(4), location: 26 }, Jump { location: 35 }, BinaryIntOp { destination: Relative(4), op: Div, bit_size: U1, lhs: Relative(1), rhs: Relative(3) }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U1, lhs: Relative(4), rhs: Relative(3) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U1, lhs: Relative(3), rhs: Relative(4) }, JumpIf { condition: Relative(6), location: 31 }, Call { location: 50 }, JumpIf { condition: Relative(5), location: 33 }, Jump { location: 35 }, BinaryIntOp { destination: Relative(6), op: Div, bit_size: U1, lhs: Relative(4), rhs: Relative(5) }, Jump { location: 35 }, BinaryIntOp { destination: Relative(4), op: Sub, bit_size: U1, lhs: Relative(1), rhs: Relative(3) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U1, lhs: Relative(3), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 39 }, Call { location: 50 }, BinaryIntOp { destination: Relative(1), op: Sub, bit_size: U1, lhs: Relative(2), rhs: Relative(4) }, BinaryIntOp { destination: Relative(3), op: LessThanEquals, bit_size: U1, lhs: Relative(4), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 43 }, Call { location: 50 }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 49 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZLbyoQgEIDfZa69UNNOrxIRVrYIYuHWDz/Ru++YtYeLhaWb+dTxGweZFXrdLrfGuGG8Q1mt0Hpjrbk1duzUbEaHpyvQEDhGRoCzCB6RRKRQckQGZYLII4odCY3AmwIhoZSINCKLyCNQSAkIGsEi8KF02wicHTWz1zo09NYiNj4pr90MpVusJfCn7LJfuk/K7ZyVxywloF2PxIKDsTqsNvKy6XdVJocr86csf7YLediM0gs6Y/np8+SKnz797IrPqTh8TosrPj9/j/PP76txpzrjPyZuC5W8Ua3Vx3ZYXPeWnf+nM3NO7OTHTveL16HSa2wZxkoIIoqaAMOZqiQlktdbePoB",
  "file_map": {
    "50": {
      "source": "fn main(x: u1, y: u1, z: u1) -> pub u1 {\n    let p = y - z;\n    if p as bool {\n        let a = x / z;\n        let b = a - z;\n        if b as bool {\n            let _ = a / b;\n        }\n    }\n\n    let u = x - z;\n    let v = y - u;\n    v\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
