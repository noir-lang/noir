---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "cond",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "array",
        "length": 31,
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 8
        }
      },
      "visibility": "public"
    },
    "error_types": {
      "8403890105346170400": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 31 limbs"
      },
      "11856048133850814249": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 1 limbs"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _78",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : [_2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32]",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 31 ], EXPR [ 256 ]], outputs: [[_33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63]]",
    "BLACKBOX::RANGE [(_33, 8)] []",
    "BLACKBOX::RANGE [(_34, 8)] []",
    "BLACKBOX::RANGE [(_35, 8)] []",
    "BLACKBOX::RANGE [(_36, 8)] []",
    "BLACKBOX::RANGE [(_37, 8)] []",
    "BLACKBOX::RANGE [(_38, 8)] []",
    "BLACKBOX::RANGE [(_39, 8)] []",
    "BLACKBOX::RANGE [(_40, 8)] []",
    "BLACKBOX::RANGE [(_41, 8)] []",
    "BLACKBOX::RANGE [(_42, 8)] []",
    "BLACKBOX::RANGE [(_43, 8)] []",
    "BLACKBOX::RANGE [(_44, 8)] []",
    "BLACKBOX::RANGE [(_45, 8)] []",
    "BLACKBOX::RANGE [(_46, 8)] []",
    "BLACKBOX::RANGE [(_47, 8)] []",
    "BLACKBOX::RANGE [(_48, 8)] []",
    "BLACKBOX::RANGE [(_49, 8)] []",
    "BLACKBOX::RANGE [(_50, 8)] []",
    "BLACKBOX::RANGE [(_51, 8)] []",
    "BLACKBOX::RANGE [(_52, 8)] []",
    "BLACKBOX::RANGE [(_53, 8)] []",
    "BLACKBOX::RANGE [(_54, 8)] []",
    "BLACKBOX::RANGE [(_55, 8)] []",
    "BLACKBOX::RANGE [(_56, 8)] []",
    "BLACKBOX::RANGE [(_57, 8)] []",
    "BLACKBOX::RANGE [(_58, 8)] []",
    "BLACKBOX::RANGE [(_59, 8)] []",
    "BLACKBOX::RANGE [(_60, 8)] []",
    "BLACKBOX::RANGE [(_61, 8)] []",
    "BLACKBOX::RANGE [(_62, 8)] []",
    "BLACKBOX::RANGE [(_63, 8)] []",
    "EXPR [ (1, _0) (-1, _33) (-256, _34) (-6901746346790563787434755862277025452451108972170386555162524223799296, _62) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _63) (-1, _75) 0 ]",
    "EXPR [ (-65536, _35) (-16777216, _36) (-4294967296, _37) (-1099511627776, _38) (-281474976710656, _39) (-72057594037927936, _40) (-18446744073709551616, _41) (-4722366482869645213696, _42) (-1208925819614629174706176, _43) (-1, _76) 0 ]",
    "EXPR [ (-309485009821345068724781056, _44) (-79228162514264337593543950336, _45) (-20282409603651670423947251286016, _46) (-5192296858534827628530496329220096, _47) (-1329227995784915872903807060280344576, _48) (-340282366920938463463374607431768211456, _49) (-87112285931760246646623899502532662132736, _50) (-22300745198530623141535718272648361505980416, _51) (-5708990770823839524233143877797980545530986496, _52) (-1, _77) 0 ]",
    "EXPR [ (-1461501637330902918203684832716283019655932542976, _53) (-374144419156711147060143317175368453031918731001856, _54) (-95780971304118053647396689196894323976171195136475136, _55) (-24519928653854221733733552434404946937899825954937634816, _56) (-6277101735386680763835789423207666416102355444464034512896, _57) (-1606938044258990275541962092341162602522202993782792835301376, _58) (-411376139330301510538742295639337626245683966408394965837152256, _59) (-105312291668557186697918027683670432318895095400549111254310977536, _60) (-26959946667150639794667015087019630673637144422540572481103610249216, _61) (-1, _78) 0 ]",
    "EXPR [ (1, _75) (1, _76) (1, _77) (1, _78) 0 ]",
    "EXPR [ (-1, _75) (-1, _76) (-1, _77) (-1, _78) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0, _1) 0 ], EXPR [ 1 ], EXPR [ 256 ]], outputs: [[_64]]",
    "BLACKBOX::RANGE [(_64, 8)] []",
    "EXPR [ (1, _0, _1) (-1, _64) 0 ]",
    "EXPR [ (1, _2) (-1, _33) 0 ]",
    "EXPR [ (1, _3) (-1, _34) 0 ]",
    "EXPR [ (1, _4) (-1, _35) 0 ]",
    "EXPR [ (1, _5) (-1, _36) 0 ]",
    "EXPR [ (1, _6) (-1, _37) 0 ]",
    "EXPR [ (1, _7) (-1, _38) 0 ]",
    "EXPR [ (1, _8) (-1, _39) 0 ]",
    "EXPR [ (1, _9) (-1, _40) 0 ]",
    "EXPR [ (1, _10) (-1, _41) 0 ]",
    "EXPR [ (1, _11) (-1, _42) 0 ]",
    "EXPR [ (1, _12) (-1, _43) 0 ]",
    "EXPR [ (1, _13) (-1, _44) 0 ]",
    "EXPR [ (1, _14) (-1, _45) 0 ]",
    "EXPR [ (1, _15) (-1, _46) 0 ]",
    "EXPR [ (1, _16) (-1, _47) 0 ]",
    "EXPR [ (1, _17) (-1, _48) 0 ]",
    "EXPR [ (1, _18) (-1, _49) 0 ]",
    "EXPR [ (1, _19) (-1, _50) 0 ]",
    "EXPR [ (1, _20) (-1, _51) 0 ]",
    "EXPR [ (1, _21) (-1, _52) 0 ]",
    "EXPR [ (1, _22) (-1, _53) 0 ]",
    "EXPR [ (1, _23) (-1, _54) 0 ]",
    "EXPR [ (1, _24) (-1, _55) 0 ]",
    "EXPR [ (1, _25) (-1, _56) 0 ]",
    "EXPR [ (1, _26) (-1, _57) 0 ]",
    "EXPR [ (1, _27) (-1, _58) 0 ]",
    "EXPR [ (1, _28) (-1, _59) 0 ]",
    "EXPR [ (1, _29) (-1, _60) 0 ]",
    "EXPR [ (1, _30) (-1, _61) 0 ]",
    "EXPR [ (1, _31) (-1, _62) 0 ]",
    "EXPR [ (1, _32) (-1, _63) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix"
  ]
}
