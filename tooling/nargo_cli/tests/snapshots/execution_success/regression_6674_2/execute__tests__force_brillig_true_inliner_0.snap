---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/9VXTYvbMBCV13YSx04T2p9RKP7SOnto2UPpvZdeWiiON4HSS2+FFop/eqOsZv0ynmQXIi2swIykGc17M5JGSaCGFlgZqQsaOflnZWLlFejD/Xdrx/llrUgYrkv/67yuEyE+h/yrxPoM/PjPyb+n/OdT6+djP/jHWAh3tv9S6GdqOB++4qf98xn/mzMxpzbWLyxW0iuHPBYQmwIuiBv5yYEOGJ4CHqgj/Dnj6romBAyP+PD80D5Q7mKB60rQ4VlCHeLEAs5L9EW5wVwGJyTh8DmOw88h4oQOcBIhHpd3fqXG5zdmcUwcxLFivgIhRk917aFuToGXI98F+Z6x2F37T/zkpqA9xv2k/Td79RbmURer4R5K70XM7D+Az3e2vxTWR0zH64BSw3nxVHNzXnMjNa65yO1KjWsB1piYzWkrzZn5xuLD9zQU5vh9knLv+T6V52qyxGcp5AfX4rpYsJ0yHdm+t9Lk8bvtp4AnvYGkm7PcoC4FHa99GRunAk+p1mXqONYMYgoFTvwekf0niHlj+wsrw35YT7FT3Yj643hv7Xx+WdOGxxZ48BzF/XHcC9CFgj2/768E+wXYUM5WzJ7vzanzijlPmD2tn5ywx1qI9p+tNLn5y/jhuc6YTnqDn3rXiPtT67nPc9Gs72vogWs/5Ah/DymGHzP7r3aM+SYZXcBz17TFrmp3rW7v7uqufc38m4b/eVzjt0217sq6aza6aqvr58fXeVmty1qXdaWL9ua58Tt9velq3ebbwgzLx/CXtj/pBz3WOdOmdkzvNLfHWor2P8h2//20faotsYBn7P6csQtOyIMPYS7qj+eSfmwf9mN7wp73Y46kS0GHNdi0zI4xX+iLeMTM/rcd057MYA2tXwn4M4Z/xFuYwzeA+wqFObI3+/OL/FmJsbv+X37AZP5xjnOjs+PjXu2vVNO1TVHc1MW2LvRj9+o/X57GJi0VAAA=",
  "debug_symbols": "pdXBjoIwEAbgd+mZQ2da2o6vYoxBrRsSgoaFTTaGd98p0+6uB8yGvfhZkd8fhtiHusTT9HZs++vtXe32D3Ua2q5r347d7dyM7a3nTx9KpxcwaoeVAivUghO8EARaQC2AgIKkoKSgpKCkIKcAEwRaMFoAAQUjWKEW3ILlY5bhVc1wpmeCQAu1FkBAwQhW4MzAOMELnEIMLTgtpEr8u85kbTa14qtyLpuujou5kCXRpwvkph6ymDVZm62zLpvyHBuyJAadhSxmU56Z50qV2R7HIcY02l/D5kfg3gyxH9Wun7quUh9NNy1fer83/eLYDHxUVyr2F5YDr20X07u5+jlbr58K3pezwRN8B9TPCbCe4NDmAGdw7fyXDciXBsHqtQSznuDR5QCPfksDslgakDUbElCbUgG1X72L7kUHDHXpYAA3daAySQTj/5uwaRLBllEGZ1efpRcVApT7GKzbEkC+jJICbbmCPxUw/yzwKgAtlCE4sykgfE+RngMOvGrO7fC0o8wpaWibUxfz8jr1519Hx897OVJ2pPtwO8fLNMSU9LMt8cseNFSAeOCtJy2DqwjSgv8B91RX5A9zKvIF",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
