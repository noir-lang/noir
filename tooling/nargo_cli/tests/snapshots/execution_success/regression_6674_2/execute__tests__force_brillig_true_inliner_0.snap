---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+VYwW7TQBBd13ESx0WJ4DOQkJ3YTXqrgILEH3B001Zw5M7BXEDixg0JhITEgS9AQuKAuHBDAon/IVt26peXidsq3qKKlay1vbPzZt7O7KwdmLoFru+YDZoo+e362PVbMB4urj33nG7Wsphw29Q/S/NprPjXov2T2OkM/OhPRb8n/tOe03O/qvWjL4LbX1wJ3I9MHR++/Jf18+n/jQafJXbuVP7W1ra7oN+Y9nNr34/9p/rv+dGfJy7WnpnlWJP1aZGr9BrYbyAWELdjvPhZBIRnwA4cE/wB2dr2ugaEJ/YwP7IOwl2k2DpSxjCXcQxxIgXnKuoSbpDLYE0vOPyOcTgOESdsEQd1yR7Ia90Gjsab5FwX5u25Pt2sZeJDoPhn8W6CPfaSGhmZOg5wrux/Eck/NrXOW+5ew+Z9xlNen3ufkXcD4/Vsc7rPhGQP89O0z8jc/32fGSq6OzQWKvM817aUfeyAj9o+tqX4iFxE9O626+054QXMWRdXWv0aKdyFDdxxvkaeuesp3EUN3PVgTO6RO3n3wLTHnbZ/xIo9LfIzk/2gb1abjMXkl4HekI/Y0G6r/yXoZTnGxFgR/KFiA+egJ55O40h4wjhCTLFti+SZ44jePTQ1TxxHXGvW7e1aDnKe9f3ws8uxgk3GBoCNNnLT4kjsvmgcYawMLoeLcUB44hP7LfgS17Fiq6F5kSLbpTGRfWRqzj65+wTwMG65zjE36+zkMyzbrdmp1WCMDXzG8yLmD58XRf6JqX3+7O4lTsKqxhDfxb5OtezvnnufbtYKa8cXsIM5iqplvxMYCxV5zu1tRT4BGeFsRPLavt5TdCHn+9WyvMzvKvKoj2P2qeut7C+yD88zAxoLFd1NtgeK7dq+0AM/5LvFZ1xMZ3/ryYmtVc0R73uIH5H8c/eMeSN9ZwM7j6dldjwpj8uiPDzM5+V10m+bxGDiAb+cTmbzcT6fHhSTcrJzJj7+2zrPOfOqntFfud7XOdPnvw/EFBz8/yi5afPvNc0R7rAO4FyuAyL/1tQ637j7xOj/kvC/xTvCjxR8XE+uyyL/AfDfr/HJrPGJ9yrtexS5GprVWGLuuw1+2MY8ivxH12M9bdpztW9uke8r8k1nkC6MyVytlgvmv6jlS9+G1fn91fiJFXmsp5xfTWerplqp/SvBWOD4w3iXuZgrrdeAIh1PZuO8GOeTIit3L7sGzYudg3lelOlRZh/HZ+EPhZOqHsf4tK3nnqUusDzuIyj/VWQX1zd3LzkQKXhW7meD3EX39E61/C6uVuXDalVesAfVqo0ylsAY5o5t2+4Z+UJdYkdE8j/cs6xJH+bI/JGC3yf8JbuVd/z9mijyiSJv1+e76HM9+t72v+ETTNKP79g2iR0febVIqem8nGbZbp4d5VlxVl79ATXZqYiZIQAA",
  "debug_symbols": "pZbRbqMwEEX/hWce8Nge2/2VqqpoSiskRCKarLSq8u87w82QdiVQRV9yLiE+GtuDw2f12r1c3p/78e34UT08flYvUz8M/fvzcDy05/44yrefVaMfLlUPVFcuA2UGNYADCPBAACLAACwEC8HiYfFicQICPBCACDCQgAyUGUEGBIH8JAoSkIEyIzaAAwjwQAAiAEuEJcISYWFYGBaGhWFhWBgWhoVhYbEkQZmRGsABBHggABEQSxYkIANlRm4ABxDggQBEAJYMS4Ylw1JgKWIpAgI8EIAIMJAA3YBGWEDXNBZ0L50GsuAt6FZ6DWwhWVBf0FBuwamQNTgLZEGFSUOwEC2whWQhWyi3oK3rsgZngSx4C8FCtKBm2Us3N50sgQuNBWeBLHgLwUK0wBb0gdBl0U5FKLeg/Un6rGn7ka6Pthzpsmib4ZtogS0kCzpKS9WGm4O2HIJ5tO0QvIVgIVpgC8lCtqDmcL3WlZ0Xz+ep6/S4+HKAyLFyaqduPFcP42UY6upPO1zmH32c2nHmuZ3krjRON74KRfjWD52ma30f3awPleJstFTlFkH8bnDrBtYZzQL2tDZ+s4KSrIIcmjWDXzck4psgUdpTQQlkFZTgdxio8VYCNWl1FXnLUGwfyK2vwobBUY42C+9oj8HHpRd8DrvW4cssfPqtYVc35GDtlHl1Do42BM72MgfeIyjJ2qnksmcGPyog/rKALQEFZ5vAfpcgL7tY9jxQv29F+V9YjpXoVh9J2lLEwouipF0Kvh8tvH60bCt4qYJ5ZxX5XkXmnYqyKP7b0ie5ag/99O3l96quqW9fhu52+XYZD1/unv+e7I69PJ+m46F7vUydmu5v0PLx6HKu5Wx40nccvaRSOx/00s13qZY/j6erFvMP",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
