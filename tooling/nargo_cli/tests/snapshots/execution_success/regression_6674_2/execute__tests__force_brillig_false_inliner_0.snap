---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZvW7TUBS+juMkjls1gmdgtxO7abdKUJAYGdnctJV4A0YzsrOwgMTGhgRCQmLgCZCQGBALGxJIvAO95Z76y5cTNyW+QCWOFF3b99zz893zY98EpqbAjV2zBomQH26M3diB+fDkt+fu0/Uoi0lvm/J30nwaK/61aP8kdjIDP/JTke8J/7Tv5Nyqavnoi+gdnPwSuB6ZOj58+S/759P/qw0+S+xcr/ztraUbIN+Y9nNr34/9Z/Jv+pGfJy7WHpv5WJP9aRGrdBPsNxALqLdrvPhZBKTPgB04J/qHZGvb+xqQPrGH8ZF9EOwixdaRMoe5jHOoJ1L0XEZZW0aPHUuxsq7N+iJ+9Jy8ruIH2tYhfrw2bg0+u+ZGm6NPYc2y2Ok2YBcq9mwq64IlozGLOaPp0fahKfd/Vw/Kkv4henot6sG9wr5l7/uwbs+N6XqUiQ+B4p+1ZQL2YJxFpo4DXCu9IyL+B6aWue2uNd1coz3VxJVrtDwbGn/vRSnU6JDsYXyaarSs/V+jF2V3aS5U1nl+L0jZR6zfWh3rKD4iFpxjt92o1W8trrTeP1KwCxuw43z9272PsVu1990x7WEXrIgdx13PM3YDBbueWY7dAObkGrGTZ3dNe9hpcRcr9rSIz67UUj5bsCRzQ/LLwGjIRyS0247PQC7zsU6MFdG/ZZbHmGeczuJIcMI4Qp1iW4f4GeOInt0zNU4cR9ynl/VF7f2Ta5Snd4oLxxHGOpMWRyHgc5E4wljhOGrCKSbde+4+XZMCsgXjiHVa6phF7IbgZ0TP7gNOPmq55zPCMeODtvL7kiVtL3Et8kYKb5/mhLdyo8XxvbtOQJ/2zSlzXINwDveYv53Y7lixU/tW4vo8BJ+4Rlni7xThf2hqnz+4a8mxsKp1iO9ntbCa93fPPU/Xo8La8RHsWIj9at7vBOZChZ/jZ0PhT4BHMBsRP+8NYoKyEPP9ap5f1veM3kfwWxP5H7nR8n4n+/A9ekhzoSK7yfZAsV2rqRH4Id/LPuNiuvOrhp7aWtUYcc9A/RHxP3H3mDcydtew83haZseT8rgsysPDfFZeIfmWJAYTD/rL6WRnNs5n04NiUk62z9WP59Gr9MTL+m343I2+eqLPMzfUKXrwPwPJTZt/L2iNYId9ANdyHxD+V6aW+dJdJ0Y/w8TzstekXzsvw/3smHn9wv8W9L9Z4pNZ4hPXKu0cBLHS+jlj32vwwxLjKPzv3Ij9VGT2FT+0sx7hHyj8fcW3LbP4fiBr/7VejhhwL2/yV8MnVvixn3J+ae9hWu71SY/WKzEWOP4w3rFXSq603gOKdDzZGefFOJ8UWbn7p3vQrNg+mOVFmR5l9nZ8nv4twaSq5zE+LfXdvfQF5sc6gvyfhPfk99ldSw5Eij7L962B76I1vVvNP4urRf6wWuQX3cNq0UaZS2AOc8fShrtHvFCW2BER/1d3L3sygDWyfqToH5D+ObuVZ/ztnyj8icJv9+eLyHMj+t72fxKnOkk+PmPbJHZ85NVJSk1n5TTLdvPsKM+K8/LqJ55VNIdNJQAA",
  "debug_symbols": "zZvdTuMwEIXfJde5sMf2/PAqqxUqEFClqkWlrLRCvPs2iBS2IVt1yOn6BpHKZ76T5Iyb1PJLc9fdPD9cL9f3m6fm6sdLs9rcLnbLzXp/9PLaNjfb5Wq1fLj+/HET+j9R3sY/PS7W/eHTbrHdNVdRJLRNt77r/7W4r3C/XHXNVQmv7WgwU34fy4k+D/3ZNlGx5Q1angK2fMSWJ2z5hC2fseULtjxjy2O7lrBdS9iuTdiuTed2ba8hhyY5NNmhKQ4NOzTi0KhDY+drcnBoHDnIjhxkRw6yIwfZkYPsyEF25KBMXGuTQaM5/Lulhfh9rJAcl//6clmmobzldKwpDg07NOLQqENj52s4ODTRoSGHJjk0jhywIwfsyAE7csCOHLAjB+LIgThyII4ciCMH4siBOHIgjhyIIwfiyIE4cqCOHKgjB+rIgTpyoI4cqCMH6siBOnKgjhyoIwfmyIE5cmBf5oBCGr7qKciJJ/1IWgZAisfP+pbQgIwGFDSA0QBBAxQNMDAghgAnRDiB4IQEJ2Q4ocAJDCfM0NGpHF4Xk+YRQeEEQxNigBMinEBwQoITMpxQ4ASGE+A9HeE9HeE9TfCeJnhP00RP2yCimGQkSh5R9ojKSdHfPxW+idgjEo/Ivv1LpuZhrHI+MTQOt10zH1uZWif5H1ZiPVboklZMhtdbUxtZSfVYyd+3MnXVz7VS6rHC9ViRS1qhHIc5jtPIitZjxaqxkkM9VmI9VqgeK6keKxedbUkPDyw2tlLqscL1WJF6rGg9VqwaKwU42/b1J1aXsx7ql3jqNasYHwbb6D1mYi16TkKBExhOEDhB4QRDEybW5+ckRDiB4AR4T8sM/cAfC6I8WhCNOsNVYj6cA/PoHHSGWYP14xx0NLeqws/B0AQLcEKEE+bIktqBMP6WtgQnZDgB3g/GcILACQonGJhAIcAJEU4gOCFBCa/7o1+L7XJxs+reNzfdP69vP+112v1+7I62PT1uN7fd3fO26zdAfex96u8nRWoppT5B/WEsqY1F+8P+XlDgloLuqXvyHw==",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
