---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+VZvY7bRhAeSlz9xrhL0uQxSIk86boDkovzDEkTWudLHiJAWOYd8gABUqdKHyBd2gAuDDfuDNiAKwM2fCvvnD59HPFOFtfA2QMQy+XOzt/OzM4uE9lAEtpUDgAl8lV4GYd+D8b7V89Z6GeHQT4mvl3SX2bFcmzo16H883GgmcShnyn9SPbPhoHOd/WGPuqifEdXzxTeP5eNf8TSX9cvpv5ftuisvvN1HW9tPXwD9EW6j63zOPJf0/820I8h+/04shfel70f/wBrjX7QoS7ZPfIrAT5j0C2CnmVC/IR4CfGfSNR4yxPip/KwffRdbZcash4bYwm9pwaf1OBzF2mpbdCWyY5WpLnuFh/E4TXodcgHaWl+5bXugo9lN405B2Md+viJ6jGQJujYkHjj2AjGeA2wXkLdGPrUR309/QroMh7L2pa3OC7PQj87DG6dt5T/h8pbVty25S1nyHpsjHF+cAYfZ/C5i7SOxK4ZcaxvzIvscxnrmEozN6NsPUNHtIWjb+eh9fH3C+ln7Yf4je1q2e5j2A/uep5ODFo35eJfgS7jCdkiUn6btcV3Yuhpxakj2XWek6Zf6pnBEe73YJc/wvtUNvteWnev/2L5LvbXOoNcvG7I3xH+j6E/Af21TQ+Q83JR5Zfz6rIqq4uLYlV9QfQ99MBOeKax6imttbzPXwAtXD/VnefeB90R/2fZ0PwJZFGfHQCfDn12wTGKYMVoQmNYS3Fum5DMIrePbdXX8/4T6DIey4p5TuX+WGyIujHcZMO/gC7jCclm5S/04fN6W8bUkBFjo+t4rhbz5WpWrBYPynk1P9krnq2cy/nYOu8cSXMNFC+yf13XVOpfWFMNDNv3pLnvom86+vZbaK2aat9a1fKFsdh1wFk39llyjCF0ceYbgn3+BbqMxzzRV5S/VXs6GuP6xENbTW/5Lft0m99GWpdrv9V1Qb8dGvr3pJkrcU0dffs9tLH9dhTHPqfsmwhW/t/Xb1XuQ/xW+bedmSy/VRpTiZD/y2w2X86KclbMy7w6fZ/8b51FrVjhGMN8y2e3IfVxz9Rafd/4H9BY3+B3z6CZ7qF/2x7HZ0qVB+tbjCuubxX/79B6Wf4HuT1o/c+5yUMKY13ejXk5HoEcKOta/npbb1zbvoHPdhoZ+FbOOxY7xyAt614DbX5OsqoNBwY+0nOE/09ovSwvSD70LfZJa7/a5XdtdxSR/t9kbBfch6w6sCfNGMFYZrv9B3bjfQhzRNtdp2XnHtkn0r1FYZ1xFaw9AWVksPYh/P/9EugynkKMPWNVnjxYFWWVPcx9d3bTnnEU3gc16FZvzxmGvvoT4ys9R/iPFffqeRLe1R7O4OfxnrfgJTvaNQ3jW1pvfxvXTfx+3cRX3pO6KaOOTWEMc6iHz0If7YW0VA5H+M9CX9dkBHN0/rHBf0T8t+Q2vvH949TAnxr4fn2eKr3Qou5d/0NZ8yT6+I1lU9+JEVdXIbVYVYs8Py3yh0Vevs/dWqy79oT4YN7VPdPb5xXN0XlY4+BcrnEU/41saL4O71Np1mce8A5RB3ifQv7WvsD70CDZ0Owntk6yQye1B9sK56Kt2uponeNa9PCw6y50EpCwVtS5A0MP65//beo2lMeqfbG+Xs+vN2OfSp3K8YV1KtewuP5sY+ufL/oC+x/nJ5HtWHkL/CU/MbUpAAA=",
  "debug_symbols": "pZfdTuMwEIXfJde9iP/GNq+CECoQUKWorUK70gr13XcmxyfASuyF96bfl6Y+ndiTuP0YXqan69vj4fh6eh/u7j+Gp+Uwz4e3x/n0vL8cTkd992MY7cWV4c7vBldX+BFwgAcCEIEECJABpHikBKQEpARNcYoARCABAmSgAHVFHAFNCQoPBCACCRAgAwXQlLgb0gg4wAMBiEACBMhAAZAiSBGkCFIEKYIUQYogRZAiSBGkZKRkpGSkZKRkpGSkZKRkTUmKAtQVZQQc4IEAaIooEiCApmRFAeoKN2pMMeqQakyN0pgbS2MF3djoGn2jre9oEimJIpRMKZTaxDoP4iio1/lWsHXVStfoG0NjbEyN0pgb7TudSW2ydtgqjuIpgRIpiSKUTGFyZHJicmJyYnJicmJyYnJisvWgs7vSuhBSm1gnQhzFUwIlUlKTzEm1poNwuazxnC2gtR5EKLmJ9RrEUwKFwwuHW9d5S7a+gxRKbVJHiqN4ij1tbBJqpCSKUDKlQPzYZsOPnhIokZIoQsmUQrF5DvYEHCmO4imBEpusvRFNhJKbrJ2QTOyUmNhXZHuC+vbOunCrREqi2KhikimFwhx7rEAcxVMCJVISRSiWnG+33cDd4fGyTJNtDl+2C91EzvtlOl6Gu+N1nnfDr/18XT/0ft4fV172i57VNZyOL0oNfD3Mk9lt9zl6/HmoNhxHu1zdFpC+J7ifE8THFiDB/zT+nxXUzApKHHsSavRMqDF0JGjnSkvQBnVdCZXzqM2a/zehax6y50Vk31NBiVyIIrFnvOP3lyg96+hL4joG19VLIW3dHErPNejGsnVjcj2doPuGbAm1Zx10M9n6Wbr62YlsNYj01VA+ayjSl1C3hNpzFTWzhFpqzx0VHW8o6XoqlO2G/Kv+Bz3aPx+Wbz/ub5a0HPZP89QOX6/H5y9nL7/PPMM/B+fl9Dy9XJfJkj7/IejLvded3cfxwX4H6mF1uyp2oBvOvZO800l9uFkpfwA=",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
