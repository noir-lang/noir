---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+VZzW7TQBBeJ978glrgwmPYid2EWyUo5Rnggpu28BBI+MY78AJInDlxR+LGFYkD4sINCSROSCC6Zaf58nnipo0X0TJSZK93dv52/nYTmTlE/hmbNUCI3PQvfT9uwXz76Lftx8l6kPaJb5P0p0k27Sv6NSj/uO9pRmHoJ0I/kP2Trqdzr5zTR12Eb+/oN4T3a2buH6H0l/0Lqf+NGp3Fd26X4fbWwR2gb0zzsbUTRv4T+nc9/RCy74aRPXO+7Pz4Aew1+kGDuiRXya8M8OmDbgH0zCPiZ4iXIf4DEzTe0oj4iTxsH3kX28WKrJvKXETvscInVvhcRFpiG7RltORpTHXfNT6Iw3vQapAP0pL8ynvdBB/NbhJzFuYa9PEt0aNjqiBzXeKNcz2Y4z3Afgl1Y2jTGPV19Augy3gsa13e4rjc9uNkPVg5bwn/v5W3tLity1tWkXVTmeP8YBU+VuFzEWltGL1nxLm2si6wzyWsY2yquRllayk6oi0sfdvxTxd/T0g/rR7iN7arZrvLUA8uep6OFFqn5eKnQJfxDNkiUH4b1cV3pOipxakl2WWdNVW/lDODJdz7YJcX/n1o5nUvLpvXfzL9E/vHOoNcvG/I3xL+Qz8egP7yjNeQ83BSpIfj4rDIi/39bFZcJ/oOWmAnPNNo/ZT0Ws7n94EW7p/ozmt3QXfEf2zmNB+BLOKzHeDToM9OOEYRtBiNaA57Kc5tA5LZmNVjW/R1vF8CXcZjWTHPidyXxYaoG8NpNnwFdBnPkGxa/kIf3ikXZYwVGTE2mo7nYjKezkbZbLKXj4vx1pniua432jDL+5TAdfSkb5I9w75J639bpurTWIMtfXvmn1rfdNZzdFuR51+LsXXyzVugy3jME31F+Gs+Vtd78pmG+5PTaK7it4H25cRvZV/QbzuKji3C5z219O25f4b2224Y+0zZNxG0/H9Wv+2Cfc7rt8K/LjfWnZk0vxX6Lv82nv/zZDSejrJ8lI3ztLh1nvyvxYqMuQdHn5KeW+igj3MdQZ+qi/8OzaEduzSnnRWumuU5ZRX9WW6ryM31CftbtBf3t4L/2j+dLO9BbgfS/3NcOohhrsm7MSfHB5CjUj/LRb0xR7UVfLZTT8FHfxCbbZr62sX+qdl8h2QVG3aM3kMIPUv4b/zTyfKN5FvVX4X2Mr+ru6MI9P9NwnbBGqXV05apxgjmALbbO7Ab1yi836m769Ts3CL7BLq3yLQzroB2rkIZGbQahf9/fwe6jCcQombM8q29WZYXyUHqhqPTasaGf++UoFu5uKbrx+JPjC/0LOF/FNyj3yf/LvawCj+H97UGL1ryPKahfIvLxW/9sorfLqv4wntQVmWUuSHMYQ51cMWP0V5IS+SwhP/Fj2VPerBG1m8q/HvEf0Fu5RvfPw4V/KGC7/bns9DzT9S96f9QjnkSffzGsonvhIiro5CazIpJmt7K0oMszc9ztxbqrj0iPph3pWY6+/ygNbIOexxcyz2O4P8yc5o//fvQVPszB3iHKBNcp5C/Vhe4DnWiOc12pOtklugk9mBb4Vq0VV0fLWtsjR4Olt2FDjwS9oqytqPooZ35VunbUB6t95W1/3OfyvGFfSr3sLj/bGPtrI6+wP7H+cmYxVj5DTinkHW1KQAA",
  "debug_symbols": "pZfdTuMwEIXfJde9iP/GNq+CECoQUKWorUK70gr13XcmxyfASuyF96bfl6Y+mdqTuP0YXqan69vj4fh6eh/u7j+Gp+Uwz4e3x/n0vL8cTkd992MY7cWV4c7vBldX+BFwgAcCEIEECJABpHikBKQEpARNcYoARCABAmSgAHVFHAFNCQoPBCACCRAgAwXQlLgb0gg4wAMBiEACBMhAAZAiSBGkCFIEKYIUQYogRZAiSBGkZKRkpGSkZKRkpGSkZKRkTUmKAtQVZQQc4IEAaIooEiCApmRFAeoKN2pMMeqQakyN0pgbS2MF3djoGn2jre9oEimJIpRMKZTaxDoP4iio1/lWsHXVStfoG0NjbEyN0mgXdSaFUpusLbaKo3hKoERKogiFyZHJkcmJyYnJicmJyYnJicnWgs7uRmtCSKHUJtaKEEfxlECJlNQkc1at65ytl/UdJFISRSi5iTUbhMMLhxcOLxxubeftWtZ4kEKpTepIcRRPsceNzUaNlEQRSqYUiB/bbPjRUwIlUhJFKJlSKDbPwR6BI8VRPCVQYpO1N6KJUHKTtROSiZ0SE7tEtkeob++sC7dKpCSKjSommVIozLHnCsRRPCVQIiVRhGLJ+XbbDdweHi/LNNnu8GW/0F3kvF+m42W4O17neTf82s/X9UPv5/1x5WW/6Fldw+n4otTA18M8md12n6PHn4dqw3G0y9VtAel7gvs5QXxsARL8T+P/WUHNrKDEsSehRs+EGkNHgnautARtUNeVUDmP2qz5fxO65iF7fonseyookQtRJPaMd7x+idKzjr4krmNwXb0U0tbNofR8B91Ytm5MrqcTdN+QLaH2rINuJls/S1c/O5GtBpG+GspnDUX6EuqWUHu+Rc0soZbac0dFxxtKup4KZbsh/6r/QY/2z4fl26/7myUth/3TPLXD1+vx+cvZy+8zz/DfwXk5PU8v12WypM+/CPpy73Vn93F8sB+Celjdrood6IZz7yTvdFIfblbKHw==",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
