---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "11890127694861652393": {
        "error_kind": "string",
        "string": "equality"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/91ZzW7TQBBeJ3Z+QS1w4THsxG7SWyUo5Rnggpu28BBI+MY78AJInDlxR+LGFYkD4sINCSROSCCyZaf58nnspI0X0Y4UrXd3dv52ZnZ2E5gFBK4NzQYgRG67j77rt2C+Pf/tuX68GSR94tsk/WmcTvuKfg3KP+47moEf+rHQ92T/uOvo3C8W9FEX4dub/4bwfcMs/MOX/rJ/PvW/VaOz+M6dwt/eWrgL9I1pPrb2/ch/Rv+eo+9D9gM/sqfWl60fP4S9Rj9oUJf4OvmVAT590M2DnllA/AzxMsR/YLzGWxIQP5GH7SPfYrtQkXVbmQvoO1T4hAqfy0hLbIO2DCpaY8r7rvFBHN6DVoN8kJbkV97rJvhodpOYi2CuQR/fET06pgwy1yXeONeDOd4DrJdQN4Y29VFfSz8HuozHstblLY7LPdePN4O185bw/1d5S4vburwVKbJuK3OcHyKFT6TwuYy0toxeM+JcW1nn2edi1jE05dyMsrUUHdEWEY3tu9bG31PSTzsPcYztqtnuKpwHlz1PBwqtVbn4GdBlPEO28JTfRnXxHSh6anEakeyyLjJlv5Q7Q0S4D8AuL9330CzOvbBoXv/J9G/sn+oMcvG+If+I8B+5/gD0lzbcQM6TSZ6cjPOTPMuPjtJZfpPoW2iBnfBOo9VTUmtZnz8CWrh/ojuvPQDdEf+JWdB8DLKIz3aAT4M+O+EYRdBiNKA5rKU4tw1IZmPWj23R1/J+BXQZj2XFPCdyXxUbom4Mq2z4GugyniHZtPyFPrxfLMsYKjJibDQdz/lkPJ2N0tnkMBvn451zxXNdbbRlqusUz+foWd0ke4Z1k1b/tkzZp/EMjmjsuWu1uum89+i2Is//FmOb5Jt3QJfxmCf6ivDXfKyu9uQ7Ddcnq2iu47ee9uXMb2Vf0G87io4twuc9jWjshWt9+23Xj32m7JsIWv4/r992wT4X9VvhX5cb6+5Mmt8KfZt/G8//WTwaT0dpNkrHWZLvXiT/a7Eifa7B0aek5hY66ON8jqBP1cV/h+bQjl2a0+4K1011TllHf84jdW8XIuu69a3gv3GtleUDyG1B6n/k7fOuMofMyvER5Cidn8Wy3pij2go+3717Cj76A+f8qrOL/bOuHhN8rMHq3l74DvLWtVaW7yTfuv4qtKv8ru6NwtP/NzGfF3hGaedpS7EZ2juisfdgNz6j8H2n7q1Ts3OL7OPp3SLV7rgC2r0KZWTQzij8//sH0GU8AR9nxizbOZylWR4fJ7Y7WnVmbLnvTgG6Fctruq4v/sT4Qi8i/E+CO/99dt9ij0jhZ/G+1eAFFe0pDWUsLJbH+kUZv12U8YX3oCjLKHNDmMMcauGa66O9kJbIERH+V9eXPenBGlm/rfDvEf8luZUxfn8cKvhDBd/uzxeh51rUven/UE55En0cY9nEd3zE1TykJrN8kiS7aXKcJtlF3tZ8vbUHxAfzrpyZ1j4/aY2swxoH13KNI/i/zYLmL/c9NOX6zAK+IcoEn1PIXzsX+BzqBAua7UDXyVToJPZgW+FatFVdHc11iKaHhaq30IFDwlpR1nYUPbQ73zp1G8qj1b6yVqtT8f5oIYS5q1SncnxhnRrRHO4/21i7q6MvsP9xfjJmOVb+AEj5TWi1KQAA",
  "debug_symbols": "pZfdTuMwEIXfJde9iP/GNq+CECoQUKWorUK70gr13XcmxyfASuyF96bfl6Y+mdqTuP0YXqan69vj4fh6eh/u7j+Gp+Uwz4e3x/n0vL8cTkd992MY7cWV4c7vBldX+BFwgAcCEIEECJABpHikBKQEpARNcYoARCABAmSgAHVFHAFNCQoPBCACCRAgAwXQlLgb0gg4wAMBiEACBMhAAZAiSBGkCFIEKYIUQYogRZAiSBGkZKRkpGSkZKRkpGSkZKRkTUmKAtQVZQQc4IEAaIooEiCApmRFAeoKN2pMMeqQakyN0pgbS2MF3djoGn2jre9oEimJIpRMKZTaxDoP4iio1/lWsHXVStfoG0NjbEyN0mgXdSaFUpusLbaKo3hKoERKogiFyZHJkcmJyYnJicmJyYnJicnWgs7uRmtCSKHUJtaKEEfxlECJlNQkc1at65ytl/UdJFISRSi5iTUbhMMLhxcOLxxubeftWtZ4kEKpTepIcRRPsceNzUaNlEQRSqYUiB/bbPjRUwIlUhJFKJlSKDbPwR6BI8VRPCVQYpO1N6KJUHKTtROSiZ0SE7tEtkeob++sC7dKpCSKjSommVIozLHnCsRRPCVQIiVRhGLJ+XbbDdweHi/LNNnu8GW/0F3kvF+m42W4O17neTf82s/X9UPv5/1x5WW/6Fldw+n4otTA18M8md12n6PHn4dqw3G0y9VtAel7gvs5QXxsARL8T+P/WUHNrKDEsSehRs+EGkNHgnautARtUNeVUDmP2qz5fxO65iF7fonseyookQtRJPaMd7x+idKzjr4krmNwXb0U0tbNofR8B91Ytm5MrqcTdN+QLaH2rINuJls/S1c/O5GtBpG+GspnDUX6EuqWUHu+Rc0soZbac0dFxxtKup4KZbsh/6r/QY/2z4fl26/7myUth/3TPLXD1+vx+cvZy+8zz/DfwXk5PU8v12WypM+/CPpy73Vn93F8sB+Celjdrood6IZz7yTvdFIfblbKHw==",
  "file_map": {
    "50": {
      "source": "use std::mem::zeroed;\n\npub struct BoundedVec4 {\n    storage: [Field; 4],\n    len: u32,\n}\n\nimpl BoundedVec4 {\n    pub fn new() -> Self {\n        BoundedVec4 { storage: [0; 4], len: 0 }\n    }\n\n    pub fn push(&mut self, elem: Field) {\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputs {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\npub struct FixtureBuilder {\n    pub public_call_requests: BoundedVec4,\n    pub counter: Field,\n}\n\nimpl FixtureBuilder {\n    pub fn new() -> Self {\n        FixtureBuilder { public_call_requests: zeroed(), counter: 0 }\n    }\n\n    pub fn append_public_call_requests(&mut self) {\n        for _ in 0..4 {\n            // Note that here we push directly, not through a method call\n            self.public_call_requests.push(self.next_counter());\n        }\n    }\n\n    fn next_counter(&mut self) -> Field {\n        let counter = self.counter;\n        self.counter += 1;\n        counter\n    }\n}\n\npub struct PrivateKernelCircuitPublicInputsComposer {\n    pub l2_to_l1_msgs: [Field; 4],\n    pub public_call_requests: [Field; 4],\n}\n\nimpl PrivateKernelCircuitPublicInputsComposer {\n    pub unconstrained fn sort_ordered_values(&mut self) {\n        self.l2_to_l1_msgs = sort_by(self.l2_to_l1_msgs);\n        self.public_call_requests = sort_by(self.public_call_requests);\n    }\n}\n\npub unconstrained fn sort_by(array: [Field; 4]) -> [Field; 4] {\n    let result = array;\n    get_sorting_index(array);\n    result\n}\n\nunconstrained fn get_sorting_index(array: [Field; 4]) {\n    let _ = [0; 4];\n    let mut a = array;\n    for i in 1..4 {\n        for j in 0..i {\n            a[i] = a[j];\n        }\n    }\n}\n\nunconstrained fn main() {\n    let mut previous_kernel = FixtureBuilder::new();\n    previous_kernel.append_public_call_requests();\n\n    let mut output_composer = PrivateKernelCircuitPublicInputsComposer {\n        l2_to_l1_msgs: [0; 4],\n        public_call_requests: previous_kernel.public_call_requests.storage,\n    };\n    output_composer.sort_ordered_values();\n\n    assert_eq(previous_kernel.public_call_requests.storage[1], 1, \"equality\");\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
