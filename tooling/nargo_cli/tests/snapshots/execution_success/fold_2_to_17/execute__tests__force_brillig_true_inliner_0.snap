---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZjdbuI8EIbvheMexDOesd1bWVUVbekKCdGKhU/6VHHvO5PxG7YrBaGgPeF9+PFDbM8kga/V2+bl9PN5u3//+LV6/PG1ejlsd7vtz+fdx+v6uP3Y26tfq8EfOK8e88OKJUIjSkSNaGPkISJFUARHhCWHJZtFLEpEjWhjyBCRIiiCI3KERIRFwiJhkbCoWdgiRVAER+QIidCIElEj2hglLCUsxcaphX2yWtgnm0Ubow4RKcK+Lw2W3DP3lJ7as/SsPVtkG3qmnt3Xuq91X+u+1n2t+5r7kmWLTIML1SEBCMCADBCAAgqgAlqHBHNyc3EgAAMyQAAKKIAKaB1oAMBMMBPM5GZxEIACCqACWgceAAlAAAbAzDB7sSfb+OQFToODjSJfXi/ygAwQgB0PkUMBVEDr4CUfkAAEYEAGCABmgVlgFpgVZoXZW4HYgQFuzg4CUEDp4B1AvgiFAAzw4V4ARQAKKIAKaB28XwISgAAMgNDbgXy7vR8CCOAf9k3xlggQgAIKoAJaAHlfBCQAAbqQvFa5OPhJwV/xygxIAAIwIAMEoIACqACYGWavTGoOBGBABghAAQVQAa2Dn5wDYM4wZ5i9aMeZetHy+Err4CUakAAEwJQFUxZM2Us0Dw4FUAF+zbAGIcWUFYupWEyFWWFWmBWLqVhMxWIqFrPAXCAsWCivTPbD8MoMaB28MgMSwIf7oXpBMjkooAAqoHXwog1IAPewAwMyQAAKKIAKcLNfbb1oAxKAAAzIAAEowIXi0Dr4OTwgAQjAgAwQgAIKAOYE89gp6pAABGBABghAAX15mSqgLy+PnULn88MKtyzPx8Nm43csf9zD2J3N5/qw2R9Xj/vTbvew+m+9O40f+vW53o95XB/sXdvnzf7N0oTv293G6fxwGT3MD01eG+NgO3VNw+X7+DQ/noX6+Jz0Mr58G0/z4+28hAOwM1ObM/C8QbwnRoHwsGR8K328JlkyA+LLDDItMRS/BwlDmZ9D+ZcGu2yiiuzCWZcYSmEYSqMlhjZgK+0aOWu4Vs3TXtIwX81XtsLOFF3AqrMCvrMf/EvubAi/qburI64KbmmJq5O4rSeuKm4r6dT+qeLGtriquK0vrirubgy6rATl2bq+th12dYbBrrTLiqK2STEsOlHedhB09zFcO8UMhA63n5iyxJB4qin7PbXIoNMx2A+NJQaeWtxw0TEITbOQXBYZdKpqqW3RLC59YXdZiww5TwZZMouSsRUl64LxLUsf32TJDNqAjWy06PunUmpF7jv+v8Y/2bP16/bw7W+5s5sO2/XLbtOfvp/2r3+8e/z/E+/gb73Pw8fr5u102Ljp8t+ePfxgu9O2fXvyP3XsKdliUCJ/mvxdTQ+s/HT2g/kN",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2 - 240; // for just under 2^17 gates\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    let z = foo(x);\n    assert(val == z);\n}\n\n#[fold]\nfn foo(x: Field) -> Field {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    val\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
