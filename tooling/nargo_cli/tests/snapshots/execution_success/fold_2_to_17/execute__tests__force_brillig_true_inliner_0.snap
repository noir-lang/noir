---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZjbbiI7EEX/hec8tKtcZTu/MooikpAREiIRA0c6ivj3qerybiYjNUKN5oW9uHjhS9nd8LV627ycfj5v9+8fv1aPP75WL4ftbrf9+bz7eF0ftx97e/VrNfgD59VjflixRGhEiagRbYw8RKQIiuCIsOSwZLOIRYmoEW0MGSJSBEVwRI6QiLBIWCQsEhY1C1ukCIrgiBwhERpRImpEG6OEpYSlWDu1sE9WC/tks2hj1CEiRdj3pcGSe+ae0lN7lp61Z4tsQ8/Us/ta97Xua93Xuq91X3NfsmyRaXChOiQAARiQAQJQQAFUQOuQYE5uLg4EYEAGCEABBVABrQMNAJgJZoKZ3CwOAlBAAVRA68ADIAEIwACYGWYv9mQLn7zAaXCwVuTT60UekAECsP4QORRABbQOXvIBCUAABmSAAGAWmAVmgVlhVph9KxA7MMDN2UEACigdfAeQT0IhAAO8uRdAEYACCqACWgffLwEJQAAGQOjbgXy5fT8EEMA/7IviWyJAAAoogApoAeT7IiABCNCF5LXKxcEPBX/FKzMgAQjAgAwQgAIKwPvTHFoHr8yABCAAAzJAAAooAJgZ5gxzhjnDnGH2oh1H6kXL4yutg2DIgiELhiwYspdoHhwEoAC/XiSHCmgdFGaFWWFWmBWTqZhMxWQqJnM8uUfAMhWYC4QFE+WVyd4xr8yA1sErMyABvLl31QuSyUEBBVABrYMXbUACuIcdGJABAlBAAVSAm/1q60UbkAAEYEAGCEABLhSH1sHP8IAEIAADMkAACigAmBPM405RhwQgAAMyQAAK6NPLVAF9epnH6T2fH1a4ZXk+HjYbv2P54x7G7mw+14fN/rh63J92u4fVf+vdafzQr8/1fszj+mDv2jpv9m+WJnzf7jZO54dL62G+afLaGBvb0TU1l+/t03x7Furtc9JL+/KtPc23t3MJHbCTqc0ZeN4gvidGgfCwpH0rvb0mWTIC4ssIMi0xFL8HCUOZH0P5lwa7bKKK7MJZlxhKYRhKoyWGNmAp7Ro5a7hWzdNa0jBfzVeWwk6KLmDVWQHfuR/8S+7cEH5Td9eOuCq4ZUtcHcRte+Kq4raSTu2fKm7cFlcVt+2Lq4q7NwZdZoLybF1fWw67OsNgV9plRVHbpBgWHZS3dYLu7sO1I2Yg7HD7iSlLDImnmrLfU4sMOvXBfmgsMfC0xQ0X9UFoGoXkssigU1VLbYtGcdkXdpe1yJDzZJAloygZS1GyLmjfsvT2TZaMoA1YyEaLvn8qpVbkvv7/1f7Jnq1ft4dvf8ud3XTYrl92m/70/bR//ePd4/+feAd/630ePl43b6fDxk2X//bs4Qfbnbat25P/qWNPySaDEvnT5O9qemDlp7N35jc=",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2 - 240; // for just under 2^17 gates\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    let z = foo(x);\n    assert(val == z);\n}\n\n#[fold]\nfn foo(x: Field) -> Field {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    val\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
