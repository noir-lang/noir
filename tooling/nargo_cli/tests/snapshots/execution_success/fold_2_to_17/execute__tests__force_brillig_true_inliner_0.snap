---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "tZjbbiI7EEX/hec8tKtcZTu/MooikpAREiIRA0c6ivj3qerybiYjNUKN5oW9uHjhS9nd8LV627ycfj5v9+8fv1aPP75WL4ftbrf9+bz7eF0ftx97e/VrNfgD59VjflixRGhEiagRbYw8RKQIiuCIsOSwZLOIRYmoEW0MGSJSBEVwRI6QiLBIWCQsEhY1C1ukCIrgiBwhERpRImpEG6OEpYSlWDu1sE9WC/tks2hj1CEiRdj3pcGSe+ae0lN7lp61Z4tsQ8/Us/ta97Xua93Xuq91X3NfsmyRaXChOiQAARiQAQJQQAFUQOuQYE5uLg4EYEAGCEABBVABrQMNAJgJZoKZ3CwOAlBAAVRA68ADIAEIwACYGWYv9mQLn7zAaXCwVuTT60UekAECsP4QORRABbQOXvIBCUAABmSAAGAWmAVmgVlhVph9KxA7MMDN2UEACigdfAeQT0IhAAO8uRdAEYACCqACWgffLwEJQAAGQOjbgXy5fT8EEMA/7IviWyJAAAoogApoAeT7IiABCNCF5LXKxcEPBX/FKzMgAQjAgAwQgAIKwPvTHFoHr8yABCAAAzJAAAooAJgZ5gxzhjnDnGH2oh1H6kXL4yutg2DIgiELhiwYspdoHhwEoAC/XiSHCmgdFGaFWWFWmBWTqZhMxWQqJnM8uUfAMhWYC4QFE+WVyd4xr8yA1sErMyABvLl31QuSyUEBBVABrYMXbUACuIcdGJABAlBAAVSAm/1q60UbkAAEYEAGCEABLhSH1sHP8IAEIAADMkAACigAmBPM405RhwQgAAMyQAAK6NPLVAF9epnH6T2fH1a4ZXk+HjYbv2P54x7G7mw+14fN/rh63J92u4fVf+vdafzQr8/1fszj+mDv2jpv9m+WJnzf7jZO54dL62G+afLaGBvb0TU1l+/t03x7Furtc9JL+/KtPc23t3MJHbCTqc0ZeN4gvidGgfCwpH0rvb0mWTIC4ssIMi0xFL8HCUOZH0P5lwa7bKKK7MJZlxhKYRhKoyWGNmAp7Ro5a7hWzdNa0jBfzVeWwk6KLmDVWQHfuR/8S+7cEH5Td9eOuCq4ZUtcHcRte+Kq4raSTu2fKm7cFlcVt+2Lq4q7NwZdZoLybF1fWw67OsNgV9plRVHbpBgWHZS3dYLu7sO1I2Yg7HD7iSlLDImnmrLfU4sMOvXBfmgsMfC0xQ0X9UFoGoXkssigU1VLbYtGcdkXdpe1yJDzZJAloygZS1GyLmjfsvT2TZaMoA1YyEaLvn8qpVbkvv7/1f7Jnq1ft4dvf8ud3XTYrl92m/70/bR//ePd4/+feAd/630ePl43b6fDxk2X//bs4Qfbnbat25P/qWNPySaDEvnT5O9qemDlp7N35jc=",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2 - 240; // for just under 2^17 gates\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    let z = foo(x);\n    assert(val == z);\n}\n\n#[fold]\nfn foo(x: Field) -> Field {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    val\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
