---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32837), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32837) }, Call { location: 12 }, Call { location: 15 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32838 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Const { destination: Direct(32835), bit_size: Integer(U32), value: 4660 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 3 }, Return, Call { location: 456 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 4661 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4660 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(5), rhs: Relative(4) }, Mov { destination: Relative(6), source: Relative(4) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(5) }, Not { destination: Relative(7), source: Relative(7), bit_size: U1 }, JumpIf { condition: Relative(7), location: 30 }, Store { destination_pointer: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Jump { location: 24 }, Const { destination: Relative(1), bit_size: Field, value: 0 }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(5), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(5) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(6), source: Relative(5) }, Store { destination_pointer: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(1) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(1) }, Const { destination: Relative(5), bit_size: Field, value: 85961827383486510530560 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(8), source: Relative(1) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(1) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(1) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Store { destination_pointer: Relative(6), source: Relative(8) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(10), bit_size: Integer(U1), value: 0 }, Store { destination_pointer: Relative(9), source: Relative(10) }, Const { destination: Relative(11), bit_size: Integer(U1), value: 1 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(13), bit_size: Integer(U32), value: 4 }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 75 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(14), location: 356 }, Jump { location: 78 }, Load { destination: Relative(14), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U1, lhs: Relative(14), rhs: Relative(10) }, JumpIf { condition: Relative(15), location: 83 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(16) } }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 85 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, JumpIf { condition: Relative(14), location: 327 }, Jump { location: 88 }, Load { destination: Relative(14), source_pointer: Relative(7) }, Load { destination: Relative(15), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(6) }, Load { destination: Relative(17), source_pointer: Relative(15) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 97 }, Call { location: 462 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(19), size: Relative(20) }, output: HeapArray { pointer: Relative(21), size: 4 }, len: Relative(13) }), Store { destination_pointer: Relative(7), source: Relative(14) }, Store { destination_pointer: Relative(4), source: Relative(17) }, Store { destination_pointer: Relative(6), source: Relative(16) }, Store { destination_pointer: Relative(9), source: Relative(11) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(12) }, Load { destination: Relative(4), source_pointer: Relative(6) }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(9), source: Relative(7) }, Store { destination_pointer: Relative(9), source: Relative(1) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(1) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(1) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(9) }, Store { destination_pointer: Relative(14), source: Relative(1) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(1) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(1) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(4) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Mov { destination: Relative(5), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(5), source: Relative(8) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(10) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 154 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(9), location: 227 }, Jump { location: 157 }, Load { destination: Relative(3), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(10) }, JumpIf { condition: Relative(9), location: 162 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 164 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32836) }, JumpIf { condition: Relative(3), location: 198 }, Jump { location: 167 }, Load { destination: Relative(2), source_pointer: Relative(1) }, Load { destination: Relative(3), source_pointer: Relative(4) }, Load { destination: Relative(8), source_pointer: Relative(5) }, Load { destination: Relative(9), source_pointer: Relative(3) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 176 }, Call { location: 462 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(14), size: Relative(15) }, output: HeapArray { pointer: Relative(16), size: 4 }, len: Relative(13) }), Store { destination_pointer: Relative(1), source: Relative(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Store { destination_pointer: Relative(5), source: Relative(8) }, Store { destination_pointer: Relative(7), source: Relative(11) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(12) }, Load { destination: Relative(1), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(6) }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 197 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Return, Load { destination: Relative(3), source_pointer: Relative(1) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Load { destination: Relative(9), source_pointer: Relative(5) }, Load { destination: Relative(10), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(14), location: 205 }, Jump { location: 224 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, Load { destination: Relative(15), source_pointer: Relative(17) }, BinaryFieldOp { destination: Relative(16), op: Add, lhs: Relative(14), rhs: Relative(15) }, Mov { destination: Direct(32771), source: Relative(8) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 465 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, Store { destination_pointer: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(1), source: Relative(3) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Store { destination_pointer: Relative(5), source: Relative(9) }, Store { destination_pointer: Relative(7), source: Relative(10) }, Jump { location: 224 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, Mov { destination: Relative(2), source: Relative(3) }, Jump { location: 164 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, Load { destination: Relative(9), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(1) }, Load { destination: Relative(15), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(5) }, Load { destination: Relative(17), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U1, lhs: Relative(17), rhs: Relative(10) }, JumpIf { condition: Relative(18), location: 238 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(19) } }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Direct(32836) }, JumpIf { condition: Relative(17), location: 260 }, Jump { location: 241 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Direct(32836) }, JumpIf { condition: Relative(17), location: 244 }, Call { location: 487 }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 465 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Store { destination_pointer: Relative(19), source: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, BinaryIntOp { destination: Relative(14), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(9) }, JumpIf { condition: Relative(14), location: 255 }, Call { location: 490 }, Store { destination_pointer: Relative(1), source: Relative(17) }, Store { destination_pointer: Relative(4), source: Relative(15) }, Store { destination_pointer: Relative(5), source: Relative(9) }, Store { destination_pointer: Relative(7), source: Relative(10) }, Jump { location: 295 }, Mov { destination: Relative(14), source: Relative(8) }, Jump { location: 262 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Direct(32836) }, JumpIf { condition: Relative(15), location: 298 }, Jump { location: 265 }, Load { destination: Relative(14), source_pointer: Relative(1) }, Load { destination: Relative(15), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(7) }, Load { destination: Relative(17), source_pointer: Relative(15) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 274 }, Call { location: 462 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(19), size: Relative(20) }, output: HeapArray { pointer: Relative(21), size: 4 }, len: Relative(13) }), Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 465 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Store { destination_pointer: Relative(19), source: Relative(9) }, Store { destination_pointer: Relative(1), source: Relative(15) }, Store { destination_pointer: Relative(4), source: Relative(17) }, Store { destination_pointer: Relative(5), source: Relative(12) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Jump { location: 295 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, Mov { destination: Relative(2), source: Relative(9) }, Jump { location: 154 }, Load { destination: Relative(15), source_pointer: Relative(1) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(5) }, Load { destination: Relative(18), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 305 }, Jump { location: 324 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(14) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(14) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryFieldOp { destination: Relative(21), op: Add, lhs: Relative(19), rhs: Relative(20) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 465 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(14) }, Store { destination_pointer: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(1), source: Relative(15) }, Store { destination_pointer: Relative(4), source: Relative(19) }, Store { destination_pointer: Relative(5), source: Relative(17) }, Store { destination_pointer: Relative(7), source: Relative(18) }, Jump { location: 324 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Mov { destination: Relative(14), source: Relative(15) }, Jump { location: 262 }, Load { destination: Relative(14), source_pointer: Relative(7) }, Load { destination: Relative(15), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(6) }, Load { destination: Relative(17), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(16) }, JumpIf { condition: Relative(18), location: 334 }, Jump { location: 353 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(2) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(2) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryFieldOp { destination: Relative(20), op: Add, lhs: Relative(18), rhs: Relative(19) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 465 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(2) }, Store { destination_pointer: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(7), source: Relative(14) }, Store { destination_pointer: Relative(4), source: Relative(18) }, Store { destination_pointer: Relative(6), source: Relative(16) }, Store { destination_pointer: Relative(9), source: Relative(17) }, Jump { location: 353 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, Mov { destination: Relative(2), source: Relative(14) }, Jump { location: 85 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(7) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(6) }, Load { destination: Relative(18), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U1, lhs: Relative(18), rhs: Relative(10) }, JumpIf { condition: Relative(19), location: 367 }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(20) } }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Direct(32836) }, JumpIf { condition: Relative(18), location: 389 }, Jump { location: 370 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(17), rhs: Direct(32836) }, JumpIf { condition: Relative(18), location: 373 }, Call { location: 487 }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 465 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Store { destination_pointer: Relative(20), source: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(12) }, BinaryIntOp { destination: Relative(15), op: LessThanEquals, bit_size: U32, lhs: Relative(17), rhs: Relative(14) }, JumpIf { condition: Relative(15), location: 384 }, Call { location: 490 }, Store { destination_pointer: Relative(7), source: Relative(18) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Store { destination_pointer: Relative(6), source: Relative(14) }, Store { destination_pointer: Relative(9), source: Relative(10) }, Jump { location: 424 }, Mov { destination: Relative(15), source: Relative(8) }, Jump { location: 391 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, JumpIf { condition: Relative(16), location: 427 }, Jump { location: 394 }, Load { destination: Relative(15), source_pointer: Relative(7) }, Load { destination: Relative(16), source_pointer: Relative(4) }, Load { destination: Relative(17), source_pointer: Relative(9) }, Load { destination: Relative(18), source_pointer: Relative(16) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 403 }, Call { location: 462 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(18) }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(20), size: Relative(21) }, output: HeapArray { pointer: Relative(22), size: 4 }, len: Relative(13) }), Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 465 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Store { destination_pointer: Relative(20), source: Relative(14) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Store { destination_pointer: Relative(4), source: Relative(18) }, Store { destination_pointer: Relative(6), source: Relative(12) }, Store { destination_pointer: Relative(9), source: Relative(17) }, Jump { location: 424 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, Mov { destination: Relative(2), source: Relative(14) }, Jump { location: 75 }, Load { destination: Relative(16), source_pointer: Relative(7) }, Load { destination: Relative(17), source_pointer: Relative(4) }, Load { destination: Relative(18), source_pointer: Relative(6) }, Load { destination: Relative(19), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, JumpIf { condition: Relative(20), location: 434 }, Jump { location: 453 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(15) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(15) }, Load { destination: Relative(21), source_pointer: Relative(23) }, BinaryFieldOp { destination: Relative(22), op: Add, lhs: Relative(20), rhs: Relative(21) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 465 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(15) }, Store { destination_pointer: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(7), source: Relative(16) }, Store { destination_pointer: Relative(4), source: Relative(20) }, Store { destination_pointer: Relative(6), source: Relative(18) }, Store { destination_pointer: Relative(9), source: Relative(19) }, Jump { location: 453 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Mov { destination: Relative(15), source: Relative(16) }, Jump { location: 391 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 461 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 469 }, Jump { location: 471 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 486 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 483 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 476 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 486 }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "tZndbts4EIXfxde5IIcz/OmrFEXhpm5hwHACN1lgUeTdl0fD47QLSBCk9ibnsy2ekMOZEWX/PHw9fXn9/vl8/fb04/Dh48/Dl9v5cjl//3x5ejy+nJ+u/d2fh4A/qf/Vh0OKLuKSXNTFXLJLcakubRJ1F3UX7S7WJbmoi7lkl+JSXdokFlyii7uYu5i7mLtYd0ldikt1aZPk4BJdxCW5qIu5uEt2l+wu2V1KvyR36W/WLv3N9nCowSW6iEu/Msau/dIoXZtrC0PjUBmahupQG5qHlqHDr8GvzyiGQIgEISSCEoyQCfANgEpoA2IgwFkBQoAzVIfaUNg2QCFUQhsggRAJQkgEJRiBztKdBbOSSmgDkLUOkSCERFCCETKBzonOic7I5FgBkSCERFCCETKhECqhDTA6G52R04JgIo8Fe4RMFoQduTwBstkhEjAqAzCqACqhDSiBEAlCSAQlGCET6Iz0F0wVBTABSsAhEoSQCEowApwNUAiV0AagXgT7joJxQOSnj1C92B3UjIMRMqGOsKBeAIJ6cYgENIMIGEuWkAmFgDYggDYA1eGAlpIAI5gSE0EJdI50jnSOlTC2SSQQIoHOQkNUQVJAJbQBqIKEdaEKHISQCIgYfFAFDplQCHDu2yTI+dQAQkgE3AsCwAiZUAiV0AYg5x1wZ0Dk0dUdEkEJRsiEQqgD0M4VW4AWrggCmrhDIVRCG4BycIgEISSCEuiMclADFEIltAEoB4dIEEIiwBl7gXJwyIRCqIQ2AOUwRb5xUxo3pXFTpirAv0DyT2FB8gMSkt8hEjCxAhgLTCETCgE+FdAGIPkd4NMAI3QpJoIS6BzpHOkcK2FsSpJAiAQ6Cw2R/Li3JiS/QxuA5HfAcSEAxg01JSNkAo4b08WV0Aag4Ruu0XGfTiqERKCz0lnprIVQCeP+nywQ6Gw0RIYbNgUZ7lAJmJjhuBUIkSAEnIkyQAlGyAQ4Y7uR/IYdRPI7CAE+2FMkv4MRMqEQKqENQPJnRB7J7yCERFCCETKhDECGZ4QF7T0jCEhsh0wohEpoDopUd4gEISSCEuA8nVgzoRAqoQ1A8jtEghDgjKMrkt/BCJlQCJXQPPIqgRAJQsBeTKfo4mFRJL9DG4Dkd8DEMoALTEbIBPgUQCW0AUj+jH+qDJ0ydMrQKZ2VzkpnLYRK4KYYN8XobJPh29vDgU8hn19upxMeQn55LOkPK8/H2+n6cvhwfb1cHg7/HC+v00U/no/XSV+Ot/5pT5zT9WvXbvjtfDmB3h7eR4f5oRFngGlwP7Pch9vv4+P8+IR+MY3ve/0+vvw2XubH9wMAJ9CPAG3OIc07GM5Hk4GlsGV8K2N8jrZlBZLeV6CyxaHETIcyv4byNx1izsyifpiuWxxKSXQobTYOcSEZizKZiuYtBg2HjMmgWd1i0B8jOYX+tGhbwtAC87Ef2mfDsDSHe0JKmC9JW6hJPK1OBv0WOGuQdxZ1LLurGk9+u8p60WBNXS8uYl1hx/11KfJXLVbW9qLFuuIW21ncSwarinvJYGVxL8Zhd3XL+3aKzhXnYhgC87rJtjhmRqEV27kRZVtlpcBs6jUWtxVnbXeLMLsRaX86LFrEdK+s/jXXNov7dvSvDbfNIt1bXcdtszC5L8S0bLPI99Kw2rYt5L26+mPunIXKzi6zZLCqyywZ/Im0Sqr3OFjZtIw1XWLRYE2XWBnIhS4Rdi5h0WDNElYeJ8umR4N1fU52tzk8I+/Mx0WLdW1u2WJVm1u0WNfmFi3Wtblli1Vtbnkhq9pcjjvb3JLBqja3ZPAn0mpdm1tcxpoesWiwpkesDOT/DD71V8fH8+23X5rf4HQ7H79cTuPlt9fr4y+fvvz7zE/4S/Xz7enx9PX1doLT+8/V/c9H7V+lac2f8AsmXvavOzVHvIx42cKDNvn0hsn8Bw==",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2 - 240; // for just under 2^17 gates\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    let z = foo(x);\n    assert(val == z);\n}\n\n#[fold]\nfn foo(x: Field) -> Field {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    val\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
