---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "50": {
      "source": "global len: u32 = 2450 * 2 - 240; // for just under 2^17 gates\nfn main(x: Field) {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    let z = foo(x);\n    assert(val == z);\n}\n\n#[fold]\nfn foo(x: Field) -> Field {\n    let ped_input = [x; len];\n    let mut val = poseidon::poseidon2::Poseidon2::hash(ped_input, len);\n    val\n}\n",
      "path": ""
    },
    "57": {
      "source": "use std::default::Default;\nuse std::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
