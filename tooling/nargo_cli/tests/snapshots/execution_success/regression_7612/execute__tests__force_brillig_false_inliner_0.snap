---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "array",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "struct",
            "path": "Data",
            "fields": [
              {
                "name": "fields",
                "type": {
                  "kind": "array",
                  "length": 1,
                  "type": {
                    "kind": "field"
                  }
                }
              },
              {
                "name": "counter",
                "type": {
                  "kind": "integer",
                  "sign": "unsigned",
                  "width": 32
                }
              }
            ]
          }
        },
        "visibility": "databus"
      },
      {
        "name": "x",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 13",
    "private parameters indices : [0, 1, 2]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 1)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(2))], q_c: 1 })], outputs: [Simple(Witness(3))]",
    "EXPR [ (-1, _2, _3) (1, _3) (1, _4) -1 ]",
    "EXPR [ (-1, _2, _4) (1, _4) 0 ]",
    "EXPR [ (1, _2, _4) (-1, _2) 0 ]",
    "EXPR [ (-1, _5) 0 ]",
    "EXPR [ (-1, _6) 1 ]",
    "EXPR [ (-1, _7) 2 ]",
    "INIT (id: 1, len: 3, witnesses: [_5, _6, _7])",
    "EXPR [ (2, _2, _4) (-2, _2) (-1, _4) (-1, _8) 1 ]",
    "MEM (id: 1, read at: EXPR [ (1, _8) 0 ], value: EXPR [ (1, _9) 0 ]) ",
    "INIT CALLDATA 0 (id: 2, len: 2, witnesses: [_0, _1])",
    "EXPR [ (-1, _4, _9) (1, _9) (-1, _10) 0 ]",
    "MEM (id: 2, read at: EXPR [ (1, _10) 0 ], value: EXPR [ (1, _11) 0 ]) ",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [(-1, Witness(4), Witness(11))], linear_combinations: [(1, Witness(11))], q_c: 4294967293 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 4294967296 })], outputs: [Simple(Witness(12)), Simple(Witness(13))]",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "BLACKBOX::RANGE [(_13, 32)] []",
    "EXPR [ (-1, _4, _11) (1, _11) (-4294967296, _12) (-1, _13) 4294967293 ]",
    "EXPR [ (1, _4, _12) (-1, _12) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]"
  ],
  "debug_symbols": "ldNBCoMwEAXQu8zahUkaNV6lFIkaJRASibFQxLs3ihYRocxu/nze7GaGVtVTX2nbuRHK5wzGNTJoZ2OagW6rcZB2TWOQPkBJuEhA2TZOmVgS6LRRUPJ0eSXAsOCBBfwWCLYDmtILyG5Bkf8Au4AcCwosEFhAUrQgaEHRgqHFAy34H0H4VWRokaNFgRYCJ2KovTZG99X5I+P6Lb2WtVF77CbbnNrwGY7m8IN3jWonr9ZLWxfPfwE=",
  "file_map": {
    "50": {
      "source": "pub struct Data {\n    fields: [Field; 1],\n    counter: u32,\n}\n\nfn main(array: call_data(0) [Data; 1], x: bool) {\n    let index = if x { 0 } else { 1 };\n    if index != 0 {\n        assert(array[index - 1].counter < 3);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_invert",
    "directive_integer_quotient"
  ]
}
