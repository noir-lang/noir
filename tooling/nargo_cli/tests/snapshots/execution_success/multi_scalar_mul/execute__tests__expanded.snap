---
source: tooling/nargo_cli/tests/execute.rs
expression: expanded_code
---
use std::embedded_curve_ops::{embedded_curve_add, EmbeddedCurvePoint};

unconstrained fn main(
    points: [EmbeddedCurvePoint; 5],
    scalars: [Field; 5],
) -> pub EmbeddedCurvePoint {
    double_then_add_msm(points, scalars)
}

unconstrained fn double_then_add_msm<let N: u32>(
    points: [EmbeddedCurvePoint; N],
    scalars: [Field; N],
) -> EmbeddedCurvePoint {
    let mut acc: EmbeddedCurvePoint = EmbeddedCurvePoint::point_at_infinity();
    for i in 0_u32..N {
        let full_scalar: Field = scalars[i];
        if full_scalar == 0_Field { continue; };
        let full_scalar_bits: [u1; 254] = full_scalar.to_be_bits();
        let mut index_of_msb: u32 = 0_u32;
        for j in 0_u32..254_u32 {
            if full_scalar_bits[j] == 1_u1 {
                index_of_msb = j;
                break;
            }
        }
        let temp: EmbeddedCurvePoint = points[i];
        let mut res: EmbeddedCurvePoint = points[i];
        for j in index_of_msb + 1_u32..254_u32 {
            res = embedded_curve_add(res, res);
            if full_scalar_bits[j] == 1_u1 {
                res = embedded_curve_add(res, temp);
            }
        }
        acc = embedded_curve_add(acc, res);
    }
    acc
}
