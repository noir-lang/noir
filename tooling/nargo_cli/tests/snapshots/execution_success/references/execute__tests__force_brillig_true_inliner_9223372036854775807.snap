---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/71Xy07DMBB03g+IWoHEByDEhYtDWtpKHIpAXLjAgQMHDqFVv6OfDpF2ldHWMS21sRStE69ndnbXaRqofgRkY3GvDD5Lsvq4UTvE0sZAbYN9VmQLsiGsRw7FFoLXJf5cT6aFQZ/D+JuCMH3mhzE94OuMcJ62Pb7U0o2K7rGHeE/+c52qfl7RvBB7fNTWY+71uSF+5johrZ9Cawj5cRRHjdoUxGKKS+bcYRwNc/HLMFG7vRmIGJM9fBPheyG0pLDHZX3PAFcJrmpAj8kqoYuHrAnWb+lGw2yszGcMNSQONaTuNeixiBN5PPLeMnbmHLuecE/zWbki2+m4pLlNd2evLX6ZwW9Eazn4ydrL85gbMOV5vCHL+cLfbN/nkblc9vI+/ZZ50sj4uR/8qeca1VwH/CDGXmzgeXeVdJ9QHHJvDuvo/wGYd5a6cU1/i2sh4goPjIv93wHznuYjw37Zp6XAQ990IAcPZLmmJ7DH97ljrkrtfmNhXh/hufw2iAx784E8vAHmM81Hhv0yr/JbBH3TAa4XsoXa7SffeU0s2gKhLbBoi8Qa+74KbfE/amOurnds71jZK0qZe0W++0MDF/bgPpyhgTO2cOJaCJyLAzjLIzhL4OR3K/vH297PVW1nc625phHh81mWI4Z19P+i+xJ0KNC2/GOcm1lbb5p2007b9XqyamUPdgP/n30D5Gjf9ckRAAA=",
  "debug_symbols": "zZjdiuowEMffJdde5GNmkvgqh8NStS6FUqXqgYPsu2+6NFmZuiuliXgjE/knv2kyM/m4il29uby/Nd3+cBLrP1fRHrbVuTl0oXX9WIlN37Rt8/52+7eQw4+CL/3pWHVD83Su+rNYa7cSdbcTa5Ch975pa7HGYE6ESoEapcF0t+K/K6Gw5OB0b3A0Yw/0XG9n6t1MvZ+n13KmXs3U65l6M1N/P3IIxg7awoPlNWjj8hriy6ux7PB3o0dJLWMfCfQ7AKT0KZLNg1g2WuIoDiZxb+xLeeNeyhv/St4YeLI3oGMNDKbm3jw7itHH/AvmZG6eHTekYnUyNJ2bHHEDJnmDwAAgSwNUaYAuDTD3AagTwPoHAPV9XlCab0IApQG4HKCBIkCDZQBUywFAsUYEk+cBZpgir+NWGky+laLNAEBIAEQGILkYgNrHuoJG8i+g5WuAxrgEAF4ZSZcGmNIAKA2wGQCOEsDxRLMZosja9AV2CsgQRU7GREOneB5YXRpgSgOgNOCHcu0wXSSlfXBv+Fk8AGgxgKSNYpLecIAtDXClAb4wwGVINFKpVJDii+wyJBrZtOHQpFS45acKDPfbCAj3Ww6gDACfit30HuT88k2ffDq2kOfHFr+8XINLrxfg2LnoI7T+VX1Tbdp6fCTbX7rtzZvZ+f+xZs9nx/6wrXeXvh4e0m7e0AZXvVl5F4YNQ38C",
  "file_map": {
    "50": {
      "source": "fn main(mut x: Field) {\n    add1(&mut x);\n    assert(x == 3);\n    let mut s = S { y: x };\n    s.add2();\n    assert(s.y == 5);\n    // Regression for #1946: Method resolution error when calling &mut methods with a variable of type &mut T\n    let s_ref = &mut s;\n    s_ref.add2();\n    assert(s.y == 7);\n    // Test that normal mutable variables are still copied\n    let mut a = 0;\n    mutate_copy(a);\n    assert(a == 0);\n    // Test something 3 allocations deep\n    let mut nested_allocations = Nested { y: &mut &mut 0 };\n    add1(*nested_allocations.y);\n    assert(**nested_allocations.y == 1);\n    // Test nested struct allocations with a mutable reference to an array.\n    let mut c = C { foo: 0, bar: &mut C2 { array: &mut [1, 2] } };\n    *c.bar.array = [3, 4];\n    assert(*c.bar.array == [3, 4]);\n    regression_1887();\n    regression_2054();\n    regression_2030();\n    regression_2255();\n    regression_6443();\n    assert(x == 3);\n    regression_2218_if_inner_if(x, 10);\n    regression_2218_if_inner_else(20, x);\n    regression_2218_else(x, 3);\n    regression_2218_loop(x, 10);\n    regression_2560(s_ref);\n}\n\nfn add1(x: &mut Field) {\n    *x += 1;\n}\n\nstruct S {\n    y: Field,\n}\n\nstruct Nested {\n    y: &mut &mut Field,\n}\n\nstruct C {\n    foo: Field,\n    bar: &mut C2,\n}\n\nstruct C2 {\n    array: &mut [Field; 2],\n}\n\nimpl S {\n    fn add2(&mut self) {\n        self.y += 2;\n    }\n\n    fn get_y(self) -> Field {\n        self.y\n    }\n}\n\nfn mutate_copy(mut a: Field) {\n    a = 7;\n}\n// Previously the `foo.bar` in `foo.bar.mutate()` would insert an automatic dereference\n// of `foo` which caused the method to wrongly be mutating a copy of bar rather than the original.\nfn regression_1887() {\n    let foo = &mut Foo { bar: Bar { x: 0 } };\n    foo.bar.mutate();\n    assert(foo.bar.x == 32);\n}\n\nstruct Foo {\n    bar: Bar,\n}\nstruct Bar {\n    x: Field,\n}\n\nimpl Bar {\n    fn mutate(&mut self) {\n        self.x = 32;\n    }\n}\n// Ensure that mutating a variable does not also mutate its copy\nfn regression_2054() {\n    let mut x = 2;\n    let z = x;\n\n    x += 1;\n    assert(z == 2);\n}\n// The compiler was still trying to convert an LValue from an array of structs to struct of arrays indexing,\n// even though this conversion was mostly removed elsewhere.\nfn regression_2030() {\n    let ref = &mut 0;\n    let mut array = [ref, ref];\n    let _ = *array[0];\n    *array[0] = 1;\n}\n\n// The `mut x: &mut ...` caught a bug handling lvalues where a double-dereference would occur internally\n// in one step rather than being tracked by two separate steps. This lead to assigning the 1 value to the\n// incorrect outer `mut` reference rather than the correct `&mut` reference.\nfn regression_2255() {\n    let x = &mut 0;\n    regression_2255_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_2255_helper(mut x: &mut Field) {\n    *x = 1;\n}\n\n// Similar to `regression_2255` but without the double-dereferencing.\n// The test checks that `mem2reg` does not eliminate storing to a reference passed as a parameter.\nfn regression_6443() {\n    let x = &mut 0;\n    regression_6443_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_6443_helper(x: &mut Field) {\n    *x = 1;\n}\n\nfn regression_2218(x: Field, y: Field) -> Field {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    if x != y {\n        *q1 = 1;\n        // Make sure that we correct load reference aliases through multiple blocks\n        if x != 20 {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 15;\n            assert(*q1 == 15);\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    // Have to assign value to return it\n    let value = *q1;\n    value\n}\n\nfn regression_2218_if_inner_if(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 2);\n}\n\nfn regression_2218_if_inner_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 15);\n}\n\nfn regression_2218_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 20);\n}\n\nfn regression_2218_loop(x: Field, y: Field) {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    for _ in 0..1 {\n        if x != y {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    for _ in 0..1 {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            } else {\n                *q2 = 20;\n                assert(*q1 == 20);\n            }\n        }\n        if x != y {\n            *q1 = 1;\n            for _ in 0..5 {\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    if x != y {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    assert(*q1 == 2);\n}\n// This is more a feature test than a proper regression.\n// Before, we never automatically dereferenced objects in method calls to their value types.\n// Now, we insert as many `*` as necessary to get to `S`.\nfn regression_2560(s_ref: &mut S) {\n    assert(s_ref.get_y() == 7);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
