---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ]], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32842 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32841), size_address: Relative(2), offset_address: Relative(3) }, Mov { destination: Relative(1), source: Direct(32841) }, Call { location: 12 }, Call { location: 19 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32842 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Const { destination: Direct(32835), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(32836), bit_size: Field, value: 0 }, Const { destination: Direct(32837), bit_size: Field, value: 1 }, Const { destination: Direct(32838), bit_size: Field, value: 2 }, Const { destination: Direct(32839), bit_size: Field, value: 15 }, Const { destination: Direct(32840), bit_size: Field, value: 20 }, Return, Call { location: 143 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, BinaryFieldOp { destination: Relative(4), op: Add, lhs: Relative(1), rhs: Direct(32837) }, Store { destination_pointer: Relative(3), source: Relative(4) }, Const { destination: Relative(1), bit_size: Field, value: 3 }, BinaryFieldOp { destination: Relative(5), op: Equals, lhs: Relative(4), rhs: Relative(1) }, JumpIf { condition: Relative(5), location: 29 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(5), bit_size: Field, value: 7 }, Store { destination_pointer: Relative(4), source: Relative(5) }, Const { destination: Relative(6), bit_size: Integer(U32), value: 7 }, Mov { destination: Relative(7), source: Direct(0) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(6) }, Call { location: 149 }, Mov { destination: Direct(0), source: Relative(0) }, Const { destination: Relative(6), bit_size: Field, value: 10 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 9 }, Mov { destination: Relative(9), source: Direct(0) }, Mov { destination: Relative(10), source: Relative(1) }, Mov { destination: Relative(11), source: Relative(6) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(8) }, Call { location: 151 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(7), source: Relative(10) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(7), rhs: Direct(32838) }, JumpIf { condition: Relative(8), location: 51 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Const { destination: Relative(8), bit_size: Integer(U32), value: 9 }, Mov { destination: Relative(9), source: Direct(0) }, Mov { destination: Relative(10), source: Direct(32840) }, Mov { destination: Relative(11), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(8) }, Call { location: 151 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(7), source: Relative(10) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(7), rhs: Direct(32839) }, JumpIf { condition: Relative(8), location: 63 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Const { destination: Relative(8), bit_size: Integer(U32), value: 9 }, Mov { destination: Relative(9), source: Direct(0) }, Mov { destination: Relative(10), source: Relative(1) }, Mov { destination: Relative(11), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(8) }, Call { location: 151 }, Mov { destination: Direct(0), source: Relative(0) }, Mov { destination: Relative(7), source: Relative(10) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(7), rhs: Direct(32840) }, JumpIf { condition: Relative(8), location: 75 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(9) } }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32838) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 1 }, Mov { destination: Relative(2), source: Direct(32835) }, Jump { location: 82 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 139 }, Jump { location: 85 }, Store { destination_pointer: Relative(7), source: Direct(32837) }, Mov { destination: Relative(2), source: Direct(32835) }, Jump { location: 88 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 135 }, Jump { location: 91 }, Load { destination: Relative(10), source_pointer: Relative(7) }, BinaryFieldOp { destination: Relative(11), op: Equals, lhs: Relative(10), rhs: Direct(32838) }, JumpIf { condition: Relative(11), location: 96 }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(12) } }, Mov { destination: Relative(2), source: Direct(32835) }, Jump { location: 98 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 131 }, Jump { location: 101 }, Load { destination: Relative(2), source_pointer: Relative(7) }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(2), rhs: Direct(32838) }, JumpIf { condition: Relative(7), location: 106 }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(8) } }, Load { destination: Relative(2), source_pointer: Relative(4) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(4), location: 111 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(7) } }, Load { destination: Relative(2), source_pointer: Relative(3) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 7 }, Mov { destination: Relative(7), source: Direct(0) }, Mov { destination: Relative(8), source: Relative(2) }, Mov { destination: Relative(9), source: Relative(6) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 170 }, Mov { destination: Direct(0), source: Relative(0) }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(2), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 123 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Const { destination: Relative(2), bit_size: Integer(U32), value: 3 }, Mov { destination: Relative(3), source: Direct(0) }, Mov { destination: Relative(4), source: Relative(1) }, Mov { destination: Relative(5), source: Relative(1) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 170 }, Mov { destination: Direct(0), source: Relative(0) }, Return, Store { destination_pointer: Relative(7), source: Direct(32838) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 98 }, Store { destination_pointer: Relative(7), source: Direct(32838) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 88 }, Store { destination_pointer: Relative(7), source: Direct(32838) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 82 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 148 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 143 }, Return, Call { location: 143 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32836) }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(4), location: 166 }, Jump { location: 158 }, Store { destination_pointer: Relative(3), source: Direct(32837) }, BinaryFieldOp { destination: Relative(2), op: Equals, lhs: Relative(1), rhs: Direct(32840) }, JumpIf { condition: Relative(2), location: 164 }, Jump { location: 162 }, Store { destination_pointer: Relative(3), source: Direct(32838) }, Jump { location: 168 }, Store { destination_pointer: Relative(3), source: Direct(32839) }, Jump { location: 168 }, Store { destination_pointer: Relative(3), source: Direct(32840) }, Jump { location: 168 }, Load { destination: Relative(1), source_pointer: Relative(3) }, Return, Call { location: 143 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32836) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Direct(32835) }, BinaryFieldOp { destination: Relative(5), op: Equals, lhs: Relative(1), rhs: Relative(2) }, Const { destination: Relative(1), bit_size: Field, value: 52 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 69 }, Const { destination: Relative(6), bit_size: Field, value: 12 }, Const { destination: Relative(7), bit_size: Integer(U32), value: 28 }, JumpIf { condition: Relative(5), location: 187 }, Jump { location: 184 }, Store { destination_pointer: Relative(3), source: Relative(6) }, Store { destination_pointer: Relative(4), source: Relative(7) }, Jump { location: 190 }, Store { destination_pointer: Relative(3), source: Relative(1) }, Store { destination_pointer: Relative(4), source: Relative(2) }, Jump { location: 190 }, JumpIf { condition: Relative(5), location: 203 }, Jump { location: 192 }, Load { destination: Relative(1), source_pointer: Relative(3) }, BinaryFieldOp { destination: Relative(2), op: Equals, lhs: Relative(1), rhs: Relative(6) }, JumpIf { condition: Relative(2), location: 197 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Load { destination: Relative(1), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, JumpIf { condition: Relative(2), location: 202 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(3) } }, Jump { location: 214 }, Load { destination: Relative(5), source_pointer: Relative(3) }, BinaryFieldOp { destination: Relative(3), op: Equals, lhs: Relative(5), rhs: Relative(1) }, JumpIf { condition: Relative(3), location: 208 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(6) } }, Load { destination: Relative(1), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 213 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(4) } }, Jump { location: 214 }, Return]"
  ],
  "debug_symbols": "nVhBbiM5DPxLn3OQREqU8pXBIHASZ2DAcAKPvcAi8N+XZYnyzALdB15SlbRZIsUSo/b38r5/vf56OZw+Pn8vzz++l9fz4Xg8/Ho5fr7tLofPk/71ewn4kdLynJ6WRB14eSaF3KF0kA61Q7sDhQ5xec4KqYOqFAXukDuUDtJBVapCuwOHDrFD6kAduEPuUDqoSlOoHdodcuigKjEqpoE0kAfmgWWgDKwDVS3qJpQwMA5MA6HHijwwDywDZWAd2DpKGAg93SVJA2kgD4SeKJaB0NOaKz6v9VV9noKi6ifNt6le0rwaWqi9aDSQB+aB+LyuHwMCMggiCggZYSPZiGaRKoimkRpINdIGicEIlAVElSmAkBE2ko0UI2KkGoG5tLSYgpFoJBmBcgJhI9lIMSJGqpE2CBxLBAJBbAt8StgWOJVQO9xJKAf+JGwCPMWoFKbqhI1oeEby8FFGhjBSxlpwTsZasEzGWvBKxlowScZacAVBB7bohIywkWykGNECGYtWpIFF4Y5O8Airwyd3AoMw0oBDGGnAIp1kI8WIGEE4Um2tkxSCkWgEggUEggKSjRQjYqQagaDuaoJ/OolGkGq93Z4WG1Uvl/N+j0n1x+zSifa1O+9Pl+X5dD0en5Z/dsfr/UO/v3anO152Z32qO7Q/vSuq4MfhuAe7PT2iw3oovH+P5Udw/js6rkerXduIV8OWNYWN9eGbe3xujuhUeIQn4bV43sif0d+eP2dP/pVtA2rxxDeyBjRJa/GyHk+12A5SrexSaGIKLYinBrEadPauphA3FKhVnj4M2SPBIT6snDxm0v8XYdbBq82MtJXE3EvWce+SiBj/Q4KTqw5M5VGHrO5ELBtJJDztSaQoLgmi2VKi7JLI83BxzsEjkUO0A660+CQ4TQkmlwRVs0Wm5suCk3UkM7FPQnhKiKsjWYecSVSvRJsdaYFc/q5zaMf1gZU2Zp5IsJ6KpOyRKHEO3hJr9NQRI8062KeQZSoUn0KZs1tvSa6GSpi2kuCUKPN8iNNWKc2bREq+85HqNHdqLgkWmRNLqmticeM5/9v60NvoaSGZzqT1a9GWAjdzRdGZ51GQx+mQ6jnlEqYnJNTqUYjRjCn6puVSmLcz0Rcgl8LshcTmyoHaVODouWIK89xJLuxSqHNccvPcrSjNKmjjbG0p0OyF3ix8CiVOheK5WRFnO97Erus+5TAVcvT4QYuwW6pSVxVldlOpayclzJ2U/1XxU3/bvR3Of30Jd4PW+bB7Pe7Hrx/X09sfTy//ftkT+xLv6/z5tn+/nvdQenyTh5fpH1Hf8yPXnzes9x8=",
  "file_map": {
    "50": {
      "source": "fn main(mut x: Field) {\n    add1(&mut x);\n    assert(x == 3);\n    let mut s = S { y: x };\n    s.add2();\n    assert(s.y == 5);\n    // Regression for #1946: Method resolution error when calling &mut methods with a variable of type &mut T\n    let s_ref = &mut s;\n    s_ref.add2();\n    assert(s.y == 7);\n    // Test that normal mutable variables are still copied\n    let mut a = 0;\n    mutate_copy(a);\n    assert(a == 0);\n    // Test something 3 allocations deep\n    let mut nested_allocations = Nested { y: &mut &mut 0 };\n    add1(*nested_allocations.y);\n    assert(**nested_allocations.y == 1);\n    // Test nested struct allocations with a mutable reference to an array.\n    let mut c = C { foo: 0, bar: &mut C2 { array: &mut [1, 2] } };\n    *c.bar.array = [3, 4];\n    assert(*c.bar.array == [3, 4]);\n    regression_1887();\n    regression_2054();\n    regression_2030();\n    regression_2255();\n    regression_6443();\n    assert(x == 3);\n    regression_2218_if_inner_if(x, 10);\n    regression_2218_if_inner_else(20, x);\n    regression_2218_else(x, 3);\n    regression_2218_loop(x, 10);\n    regression_2560(s_ref);\n    nested_struct_aliases(x, 10);\n    assert_eq(x, 3);\n    nested_struct_aliases(x, 3);\n}\n\nfn add1(x: &mut Field) {\n    *x += 1;\n}\n\nstruct S {\n    y: Field,\n}\n\nstruct Nested {\n    y: &mut &mut Field,\n}\n\nstruct C {\n    foo: Field,\n    bar: &mut C2,\n}\n\nstruct C2 {\n    array: &mut [Field; 2],\n}\n\nimpl S {\n    fn add2(&mut self) {\n        self.y += 2;\n    }\n\n    fn get_y(self) -> Field {\n        self.y\n    }\n}\n\nfn mutate_copy(mut a: Field) {\n    a = 7;\n}\n// Previously the `foo.bar` in `foo.bar.mutate()` would insert an automatic dereference\n// of `foo` which caused the method to wrongly be mutating a copy of bar rather than the original.\nfn regression_1887() {\n    let foo = &mut Foo { bar: Bar { x: 0 } };\n    foo.bar.mutate();\n    assert(foo.bar.x == 32);\n}\n\nstruct Foo {\n    bar: Bar,\n}\nstruct Bar {\n    x: Field,\n}\n\nimpl Bar {\n    fn mutate(&mut self) {\n        self.x = 32;\n    }\n}\n// Ensure that mutating a variable does not also mutate its copy\nfn regression_2054() {\n    let mut x = 2;\n    let z = x;\n\n    x += 1;\n    assert(z == 2);\n}\n// The compiler was still trying to convert an LValue from an array of structs to struct of arrays indexing,\n// even though this conversion was mostly removed elsewhere.\nfn regression_2030() {\n    let ref = &mut 0;\n    let mut array = [ref, ref];\n    let _ = *array[0];\n    *array[0] = 1;\n}\n\n// The `mut x: &mut ...` caught a bug handling lvalues where a double-dereference would occur internally\n// in one step rather than being tracked by two separate steps. This lead to assigning the 1 value to the\n// incorrect outer `mut` reference rather than the correct `&mut` reference.\nfn regression_2255() {\n    let x = &mut 0;\n    regression_2255_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_2255_helper(mut x: &mut Field) {\n    *x = 1;\n}\n\n// Similar to `regression_2255` but without the double-dereferencing.\n// The test checks that `mem2reg` does not eliminate storing to a reference passed as a parameter.\nfn regression_6443() {\n    let x = &mut 0;\n    regression_6443_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_6443_helper(x: &mut Field) {\n    *x = 1;\n}\n\nfn regression_2218(x: Field, y: Field) -> Field {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    if x != y {\n        *q1 = 1;\n        // Make sure that we correct load reference aliases through multiple blocks\n        if x != 20 {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 15;\n            assert(*q1 == 15);\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    // Have to assign value to return it\n    let value = *q1;\n    value\n}\n\nfn regression_2218_if_inner_if(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 2);\n}\n\nfn regression_2218_if_inner_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 15);\n}\n\nfn regression_2218_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 20);\n}\n\nfn regression_2218_loop(x: Field, y: Field) {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    for _ in 0..1 {\n        if x != y {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    for _ in 0..1 {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            } else {\n                *q2 = 20;\n                assert(*q1 == 20);\n            }\n        }\n        if x != y {\n            *q1 = 1;\n            for _ in 0..5 {\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    if x != y {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    assert(*q1 == 2);\n}\n// This is more a feature test than a proper regression.\n// Before, we never automatically dereferenced objects in method calls to their value types.\n// Now, we insert as many `*` as necessary to get to `S`.\nfn regression_2560(s_ref: &mut S) {\n    assert(s_ref.get_y() == 7);\n}\n\nstruct MyStruct {\n    a: Field,\n    b: u32,\n}\n\nstruct Outer {\n    inner: MyStruct,\n}\n\nfn nested_struct_aliases(x: Field, y: Field) {\n    let mut var = Outer { inner: MyStruct { a: 0, b: 0 } };\n    let ref_outer = &mut var;\n    let ref_inner1 = &mut ref_outer.inner;\n    let ref_inner2 = &mut var.inner;\n\n    if x != y {\n        (*ref_inner1).a = 5;\n        (*ref_inner1).b = 7;\n        (*ref_inner2).a = 3;\n        (*ref_inner2).b = 10;\n\n        for _ in 0..3 {\n            (*ref_inner1).a += 1;\n            (*ref_inner1).b += 2;\n            (*ref_inner2).a += 2;\n            (*ref_inner2).b += 4;\n        }\n    } else {\n        (*ref_inner2).a = 20;\n        (*ref_inner2).b = 15;\n        (*ref_inner1).a = 25;\n        (*ref_inner1).b = 30;\n\n        for _ in 0..3 {\n            (*ref_inner2).a += 5;\n            (*ref_inner2).b += 3;\n            (*ref_inner1).a += 4;\n            (*ref_inner1).b += 10;\n        }\n    }\n\n    if x != y {\n        assert(var.inner.a == 12);\n        assert(var.inner.b == 28);\n        assert(ref_inner1.a == 12);\n        assert(ref_inner1.b == 28);\n        assert(ref_inner2.a == 12);\n        assert(ref_inner2.b == 28);\n        assert(ref_outer.inner.a == 12);\n        assert(ref_outer.inner.b == 28);\n    } else {\n        assert(var.inner.a == 52);\n        assert(var.inner.b == 69);\n        assert(ref_inner1.a == 52);\n        assert(ref_inner1.b == 69);\n        assert(ref_inner2.a == 52);\n        assert(ref_inner2.b == 69);\n        assert(ref_outer.inner.a == 52);\n        assert(ref_outer.inner.b == 69);\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
