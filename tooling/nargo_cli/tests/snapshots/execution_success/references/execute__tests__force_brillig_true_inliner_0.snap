---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1ZvW4TQRBe23exLxAZhTfgCc7Ylk2BZAknQeIFaC0s15RISNHRICQaGigoKGigoaGjQAgh3ousPB83/ry3/rldxUVGiuY2OzffzOy3c7fnhimlITqhsXHYTETn9aQX0FfuDNQnsPkrOhPdVPOtgMlmhBvS/zgfPMgc+QWMv5+Jz5j1gc8I/vO2+HlclP45FysnMtYcwj2dq7/bprw+leuM7omxthFrn991xN9UuVl5VJT1CIUL39Pwvv/vt7Pwvu/D93l43wv4vgjuuze4ZZa8/Sz+wPVWCbXCAa2NWd2bEPDkjlnfv7CLuT+uZIA8ErMumEsJ2xj3c6JFYx23rd1X5ZftIN2KfHUtNM5EdF5P+obqkHriSMn2HsXH9ZqEiTE/VX4NYbl6b10++tYgiZPjkDmnBXNHCtuVG+dolA3itnz8pvyyHaTryJf3po51IjqvJ0NDuaaOOFKag22P4mure2LzsU3YNzyJypORMfvz5CHFdx08cT1/6vYt7QvvXplZ50TAHEcnlJcWzHUUtu+w6OIj4t71OXrkwOQx88LKtFidg+0T0YfUW0w43FnkvMbMBS2Yywhbzx2ruV05hJws9nfll+04Hs2hjGx9HML5gTn0VPQhcOgQ+oEVnFl8HNinV+yyzppPnQqfvJZWcJZjDsxF36zzKraeO7R1rjrjWAFHU7J9LjpyrZ3rfES5xTiPW0Evi/xem0eu4TDyXuxhHfT3NtTK5vRC/V/zL5U4+F7uO7D/pHy+9KzbtFjqTXFdBorro/L5Sq67proPYJxV+LPCz1HYvhaNNT0m/xMZ5zXFte+Atamub9T/+X1hm7rC/oPy+Vauu477ua7cz5pqnusK23eiY+91V10TT24Nyq1RkVvDrJ/5YPuecov1m4ErN2DZb6m+HstcMcbNFT5DbuLgNpidGpgdhXl5DZjoregPSVHahVrb0TjPsaYt8Y+9zJKoeW3/Rca6X0EnNeJcjGa9RX+2mA1n8/ng2Yw5aFTt+Hv+NvuNe4vuJdNiqX3fTkNjnu2BGfs9Sf/Wxf2eY2zSHGx/i7ac/uHBmharWM0KLCv87grbXwrrpwcLtbZ2fzx251vaXTjsfL992HX8B/7SodJ1IAAA",
  "debug_symbols": "tZjdaiNJDIXfpa99UVVS/eVVhiE4SWcwGCd47IUl+N1XxyqVZwdsBsHc5DtJW6fVqtPVHX8tb+vL+cfz7vD+8XN5+va1vBx3+/3ux/P+43V72n0c5K9fS8CPlJanuFkSKViRFUVRFU3Rl6e0WSgooiIpSMGKrCgKcSFBU/QrOCiiIilIIS4syIqiqIqmEJe8WXJQREVSkIIVWSEuRVAVTdGvKEEhLlWQFKQQlybIiqKoiqboV9SgEJcuSApSsALTlUnWMlgH22BXtjAYB9MgDWKxZLItD5bBOgg/mVLryh4G42AapEEezIPwk6H1OtgGuzIGGFaIaCKZIBNsIpsoJqoJGDeIPkQMJqIJJCxAkAmkTMYQE6KYIHCIIBA5hkBY0eo1rgUimkgmyASq0A/CmXBSxDN1iGgimSAT0gahDQSV0AaiqqKaaEMgqYQOkVVCh8gnoUMklNAGUkloA7kktIFoEc6FcDGuHfFSgZsEZ0eo9DPFhFQxToocqYgm5CoYbSA6jDaQHUYbCAujDaSE0QbiwWgDueB+uWwW20aeT8d1xS7yy74iu83n9rgeTsvT4bzfb5Z/tvvz9UM/P7eHK0/boxyV9tfDm1AM33f7FeqyuVWH+6VYnGst34rzH1dnGtW5O6o7j2qJv6M84s7R+kSO+lTs/Kmyp751q+/VM7xo588xe+rTnH52LV65rZ6nvpNlp9d0rz4+MKBabQWp9uKyaMEWgVp0hbC2mcJ4NwaRHvXQi/XQY3VZdArTgqPnZggpzOvg+7Ms9y04zFlyoOCzYJoWmV3XkdO8jnp3QWN/0ES8bWry2HJZJLYlFVldFlyiWXBJLouOZ6ha9NR8FpmnRc4ei5y6xSJTcHWRaW4VmR6E86FFK9OiuVYk13mr5+q0aMFWJDfXpi1vaPOpJQG/50B/16KEufOW0Mk1ihLngpTom2apM1nFuSCR8nyIki9Zsc9YpOCy4NLnvV66715v812K2/3t4lEsKFs2ZRLN9ULFcQaLXQ5c51OIq+c5RinMd4IHq/HQIc9naco+h0rTwfVqSFRtkiI9kyRO04GTJw+Ukz1JRbquIs83dJGuSZY4J1l+u4rv8tv2dXf83zcpF3gdd9uX/Tp+fT8fXn85evr3047YNzGfx4/X9e18XOF0+zoG//h+iyVtYqnfLzjffw==",
  "file_map": {
    "50": {
      "source": "fn main(mut x: Field) {\n    add1(&mut x);\n    assert(x == 3);\n    let mut s = S { y: x };\n    s.add2();\n    assert(s.y == 5);\n    // Regression for #1946: Method resolution error when calling &mut methods with a variable of type &mut T\n    let s_ref = &mut s;\n    s_ref.add2();\n    assert(s.y == 7);\n    // Test that normal mutable variables are still copied\n    let mut a = 0;\n    mutate_copy(a);\n    assert(a == 0);\n    // Test something 3 allocations deep\n    let mut nested_allocations = Nested { y: &mut &mut 0 };\n    add1(*nested_allocations.y);\n    assert(**nested_allocations.y == 1);\n    // Test nested struct allocations with a mutable reference to an array.\n    let mut c = C { foo: 0, bar: &mut C2 { array: &mut [1, 2] } };\n    *c.bar.array = [3, 4];\n    assert(*c.bar.array == [3, 4]);\n    regression_1887();\n    regression_2054();\n    regression_2030();\n    regression_2255();\n    regression_6443();\n    assert(x == 3);\n    regression_2218_if_inner_if(x, 10);\n    regression_2218_if_inner_else(20, x);\n    regression_2218_else(x, 3);\n    regression_2218_loop(x, 10);\n    regression_2560(s_ref);\n}\n\nfn add1(x: &mut Field) {\n    *x += 1;\n}\n\nstruct S {\n    y: Field,\n}\n\nstruct Nested {\n    y: &mut &mut Field,\n}\n\nstruct C {\n    foo: Field,\n    bar: &mut C2,\n}\n\nstruct C2 {\n    array: &mut [Field; 2],\n}\n\nimpl S {\n    fn add2(&mut self) {\n        self.y += 2;\n    }\n\n    fn get_y(self) -> Field {\n        self.y\n    }\n}\n\nfn mutate_copy(mut a: Field) {\n    a = 7;\n}\n// Previously the `foo.bar` in `foo.bar.mutate()` would insert an automatic dereference\n// of `foo` which caused the method to wrongly be mutating a copy of bar rather than the original.\nfn regression_1887() {\n    let foo = &mut Foo { bar: Bar { x: 0 } };\n    foo.bar.mutate();\n    assert(foo.bar.x == 32);\n}\n\nstruct Foo {\n    bar: Bar,\n}\nstruct Bar {\n    x: Field,\n}\n\nimpl Bar {\n    fn mutate(&mut self) {\n        self.x = 32;\n    }\n}\n// Ensure that mutating a variable does not also mutate its copy\nfn regression_2054() {\n    let mut x = 2;\n    let z = x;\n\n    x += 1;\n    assert(z == 2);\n}\n// The compiler was still trying to convert an LValue from an array of structs to struct of arrays indexing,\n// even though this conversion was mostly removed elsewhere.\nfn regression_2030() {\n    let ref = &mut 0;\n    let mut array = [ref, ref];\n    let _ = *array[0];\n    *array[0] = 1;\n}\n\n// The `mut x: &mut ...` caught a bug handling lvalues where a double-dereference would occur internally\n// in one step rather than being tracked by two separate steps. This lead to assigning the 1 value to the\n// incorrect outer `mut` reference rather than the correct `&mut` reference.\nfn regression_2255() {\n    let x = &mut 0;\n    regression_2255_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_2255_helper(mut x: &mut Field) {\n    *x = 1;\n}\n\n// Similar to `regression_2255` but without the double-dereferencing.\n// The test checks that `mem2reg` does not eliminate storing to a reference passed as a parameter.\nfn regression_6443() {\n    let x = &mut 0;\n    regression_6443_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_6443_helper(x: &mut Field) {\n    *x = 1;\n}\n\nfn regression_2218(x: Field, y: Field) -> Field {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    if x != y {\n        *q1 = 1;\n        // Make sure that we correct load reference aliases through multiple blocks\n        if x != 20 {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 15;\n            assert(*q1 == 15);\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    // Have to assign value to return it\n    let value = *q1;\n    value\n}\n\nfn regression_2218_if_inner_if(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 2);\n}\n\nfn regression_2218_if_inner_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 15);\n}\n\nfn regression_2218_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 20);\n}\n\nfn regression_2218_loop(x: Field, y: Field) {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    for _ in 0..1 {\n        if x != y {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    for _ in 0..1 {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            } else {\n                *q2 = 20;\n                assert(*q1 == 20);\n            }\n        }\n        if x != y {\n            *q1 = 1;\n            for _ in 0..5 {\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    if x != y {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    assert(*q1 == 2);\n}\n// This is more a feature test than a proper regression.\n// Before, we never automatically dereferenced objects in method calls to their value types.\n// Now, we insert as many `*` as necessary to get to `S`.\nfn regression_2560(s_ref: &mut S) {\n    assert(s_ref.get_y() == 7);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
