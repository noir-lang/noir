---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+1az4oTTRDvSTLJRj9RlO+uB0HEw2STbFYEHXV3dd2LqKAIIjHLgiKILHhSCHjzICLiY3jRixcRfALfQBHfQPGq7XY5lV9qOp1M9xrDFoSeTlfX/+rq6Z5IZRCZtgJ9JeCkpk2KQcMjrUQU1AaE89I81E2/xMbLHpWtA1+f9BeTVq8u6OdR/mbd0AxpH6IZgH5SM3TW+hl91EXDHtPnMURz5n79/lPZ8//muQ5zQvg2oO2TA4L8JaabhrP9zB6++BLtpX4Qvf7k3LJ/2f/QXvFPe55on/NPu0O0z/unvUG0V73TbrSI9gXvtOeT3Worn18ZerQGlDJWA7nBWw1l4T+au08N5y7hhVw3fkFzjxpc2zjQGC/4XEYEpMHl1rZ7w+giHsFeZV9n0OapaZNi0FRgh9giRwy4h0E+bi+fa/B+RlcBL6kmFY1Hmw8C1eAWxhwHGosZb0k31FGBrBp0PL5ldBGPYK+gL+YmlzU1bVIM2gp0jQU5KjBGuC2Qrwr6p35kFOOxCrx34iTro784X6rjMeCeMi3ZMwYZU9NPCoLkyxh4T4MvNdA+cxJfvmN0EQ95loXxSdfSsiB/4HrRlmyHOuLaQM8Ikl1J7nFrO+qrhD7mgQbao2P+XDbtNOWIUmHzI9oenZsu8c7571JBY7oRqeGYLqth+1D+SXFOc/cJY7gHrwp8qgIfiRbZSaoNJGvomEU9KkyPWJC1JOjB9Y3hv55p9Rrwns3BXCgL/6HtpHUh8B6mQ/FRU8NAY3OMN+6368KY6/pJOmn6HxhdxEN5eByRbFIt0ZCaNikGDVxz7wPfGdxjLuDakecXglF7j4/m2ebjf02nzzOo05cZ1OnrDOr0fQKdlD99uoH371Z7Yd3iexepbhXZ2/9gdBGPYJpsoYHOlyVbjHuGyW0RRxldxJtGW4yKiyK2ODBjtiiSI4fGsEWgO7qxbREJMtr0LTF9Hzjou1tl++NK37/OncWt95vf8hr6sRqWnfOPAf+16e8C+cm/6YRybnS6jY1md6Pb7q6vt3pd3MdqKDE78bslel+U7oO4DXmf34ks97da6Ry/HIjnygQ8dd+33bud5mJvvtXr3Go3u82FseweqcG8Vip7b+Xzl/pbre29nuZI5xQlCy0+n8/lfdtdQOA93DzpJZ2LSD6X9OLvinm0ShZakUBLwbxYyf7gz9TnvGKBVt7dL+aH1JJO+F/eXZsGPB8OVC/GvvstUi8eOdQLlzWI+rEaziW698e720+mDf39kHRWYVv7bP2dGBuGUTHW34YYo9qKMfbNtNMcY9N23xTBmLRPd40Dvhd/7BAH0lkq1hKMA86X9jsYBxXzEPp7PCkO8urVjt+H5ZnU7/RNHPp9/47fB2DW/E7nSej3g1Po9+36foHm4Hctkoy4Hz9qkLQPjkT5vGid1XjHLHirAh7Veumek/pVkC8WeOOdZwN8XgP6qeknBUHyeQ3kx3fCSLBJ4G9Ik8B3gG381pbronkuRIP/15hNpPdJ9Dnh32ExeTwaxKG4XWU4JyzxSPvEUbKf9CT7GSbXafa8BnpQvKwwnCXH/FvJkVUp+9mGZIOaYINReb0GeS2dESB9aQ+PeU24FyGv8Ww4Nf2kIEh5PQfyUrzdYn66xOqcLaaugJ94XXOJKcK/xnhfZc/rOblxk+Fcd8gNjEk+/4ZjTN7M0VWp8WNSsuGomFyHmMQ1VrE+1sJI0Anj9TbE5N96r0Rf32e+ujuBrzfZ/HuOvt509MlmoHWK6sy45+Y8/5D3uf7gGOE+nBK/c12lcyQ6c3PBXc7B/Rf2q89ZvD5xiPc8elxmfKcg3GeM11PH3HhhwTvviLcq4NnWNe3Hn9bm8RshPAAA",
  "debug_symbols": "tdvbbtw2EAbgd9lrX5Bz4JB5laIInMQJDBh24DgFCsPvXjq1uK5mNsI/QG8CbcDP2tVQFGdIPZ++3Hz6+e3j7f3Xhx+nD388n+4ePl8/3T7cz0/PL1enT4+3d3e33z6+/+9Tef2H9Ff7H9+v718//ni6fnw6faB+dbq5/3L6IGXqr7d3N6cPWl7+vDpRA9sb2L6D7QfWngvYvoLtKWqv/NZex749g+0FbK9g+wa2N7B9B9sPrL2E8R3y1r6WfcCkooBQwCgQFCgKGgrCMNeqmyDeiw6LgQotsKiwCMNNbbtWZLIXDAuBhcKiwcJg0WFxYfgemxi2E63AosKCYBHGnDu9CR5tLwQWCosGC4NFh0U8pNetl2jVnbACiwqL+MFN60mj+zHRGBYCC4VFg4XBosMijnk7P8f3ohdYVFgQLMKYm24jgzUnBBYKiwYLg0WHxUDFKLCosCBYxDFfsyUb+7FkCCwUFg0WBosOi4GKOdfESRx1O5PmCOGEcSI4UZw0nBhOOk4GTGrBCR79ike/htHvZXs2dCqOCE4UJw0nhpMw+p3aRoQdGTChgpOKE8JJHH3ZnhK9uQ5DghPFScOJ4SSOvm2T+t6HIwMmcS3u96TihHASR39sVYJRyRHBieKk4cRwEkZ/8Fb0HObJgMmFSt1vScUJ4YRxIjhRnMRVO+urbFfFGUuYnjADN3H57sDUhKGECTvBnEaWhcQNm3Ed7whpBrUMsgzqGTQSKK7szQkyLWRuqI6Le0eIMogzSDJIM6hl0IUe0Vc9fCqHegaNBLKSQTWDKIHigtN8rtuGuHWH4jPNZ9s6k3jEGRT3CLF1E4pVhyzzm3oCxQUMKmWbllOp7+bl/xpLmHhRolRbhnRvBmwormP897u9G/Nerp59ProlZNbb/q9X+JdTXPM4MJwwkrhamjDtf73Ccc8f4/zXaW/i6sUcTdZKqtG+ekVx/eIIUQbFw4bxGtVMhkOSQZpBLYMsg3oGjQSiCz2ineNkHtUMogziBLqwZ6b1bQI9Dz2qGUQZdGG9faW4ZK6+RXG+foQ0g1oGWQb1DBoJFOfuZMwL+Z1acfZ+hCiDOIPihWyz7UKwrxJTnPYeoDjvPUI1gyiDOIMkgzSDLmxqKFs9k3t1Y4RaBvUMGgkUJ6Tc19yDRzWHOIMkgzSDWgZZBvUMGgkUJ6Q8uCwk1aGaQZRBnEFhnKSsDiuF/a5ey6CeQSOB4s0jR6hmEGUQZ5DESHghFYc0g1oGWQLFGz6knvdXz3Ulh2oGUQbFcZpliA3NfNmh+OqRtIXEDSxxkUJY1pnY5RocVxyEV4FnHnoUXz059z1x4x7HlYQjxBkkGRT38kbbPEIa71dTOM7dRVpdZ2oexWcatOI0qDsUB3eoLKT73J3j5WStK/uch82hePPfrIFtaBZRHIr35s0Hw0LmflOc3imNLU7KxaMLL0esRS9ltyzAl96Q+D2SDNIEilMh5b6uHnfXYeOVPBVeaN66Dl3YQ1kXav7W0AubIm3FqfmvF0/m9bxJTq1Vh+LfZGuZTS04U7z3tJftftLudupyPC8/QiOB4iWpIxQPYVrXwKJuzZ3jia+0sVAbHsVzo/POlnnobsJ4Oip9vVMj3Y97pvj6CMczy1ZWetfKYIcsg3oGjQS6sHzT17hXR3G3Rr/wkl3Z1ubmoT9TnNXMyvk2mQ/G8njP7QGKZ2FHKM5qZnFjIfUozj5pleXZvyLC8d5Ynh15Q+yfT/GEioUWEtr3coknVKy0XmZQEofiTE3XBtZ52ByKL0Sr60K03dd7mZ/+un68vf50d/P2VufXn/ef373k+fT395vd+57fHx8+33z5+Xjz+ubn+aXPX1OfWb2+qjb+fN259/px0FUdMs8zz/UP",
  "file_map": {
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "50": {
      "source": "fn main(mut x: Field) {\n    add1(&mut x);\n    assert(x == 3);\n    let mut s = S { y: x };\n    s.add2();\n    assert(s.y == 5);\n    // Regression for #1946: Method resolution error when calling &mut methods with a variable of type &mut T\n    let s_ref = &mut s;\n    s_ref.add2();\n    assert(s.y == 7);\n    // Test that normal mutable variables are still copied\n    let mut a = 0;\n    mutate_copy(a);\n    assert(a == 0);\n    // Test something 3 allocations deep\n    let mut nested_allocations = Nested { y: &mut &mut 0 };\n    add1(*nested_allocations.y);\n    assert(**nested_allocations.y == 1);\n    // Test nested struct allocations with a mutable reference to an array.\n    let mut c = C { foo: 0, bar: &mut C2 { array: &mut [1, 2] } };\n    *c.bar.array = [3, 4];\n    assert(*c.bar.array == [3, 4]);\n    regression_1887();\n    regression_2054();\n    regression_2030();\n    regression_2255();\n    regression_6443();\n    assert(x == 3);\n    regression_2218_if_inner_if(x, 10);\n    regression_2218_if_inner_else(20, x);\n    regression_2218_else(x, 3);\n    regression_2218_loop(x, 10);\n    regression_2560(s_ref);\n}\n\nfn add1(x: &mut Field) {\n    *x += 1;\n}\n\nstruct S {\n    y: Field,\n}\n\nstruct Nested {\n    y: &mut &mut Field,\n}\n\nstruct C {\n    foo: Field,\n    bar: &mut C2,\n}\n\nstruct C2 {\n    array: &mut [Field; 2],\n}\n\nimpl S {\n    fn add2(&mut self) {\n        self.y += 2;\n    }\n\n    fn get_y(self) -> Field {\n        self.y\n    }\n}\n\nfn mutate_copy(mut a: Field) {\n    a = 7;\n}\n// Previously the `foo.bar` in `foo.bar.mutate()` would insert an automatic dereference\n// of `foo` which caused the method to wrongly be mutating a copy of bar rather than the original.\nfn regression_1887() {\n    let foo = &mut Foo { bar: Bar { x: 0 } };\n    foo.bar.mutate();\n    assert(foo.bar.x == 32);\n}\n\nstruct Foo {\n    bar: Bar,\n}\nstruct Bar {\n    x: Field,\n}\n\nimpl Bar {\n    fn mutate(&mut self) {\n        self.x = 32;\n    }\n}\n// Ensure that mutating a variable does not also mutate its copy\nfn regression_2054() {\n    let mut x = 2;\n    let z = x;\n\n    x += 1;\n    assert(z == 2);\n}\n// The compiler was still trying to convert an LValue from an array of structs to struct of arrays indexing,\n// even though this conversion was mostly removed elsewhere.\nfn regression_2030() {\n    let ref = &mut 0;\n    let mut array = [ref, ref];\n    let _ = *array[0];\n    *array[0] = 1;\n}\n\n// The `mut x: &mut ...` caught a bug handling lvalues where a double-dereference would occur internally\n// in one step rather than being tracked by two separate steps. This lead to assigning the 1 value to the\n// incorrect outer `mut` reference rather than the correct `&mut` reference.\nfn regression_2255() {\n    let x = &mut 0;\n    regression_2255_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_2255_helper(mut x: &mut Field) {\n    *x = 1;\n}\n\n// Similar to `regression_2255` but without the double-dereferencing.\n// The test checks that `mem2reg` does not eliminate storing to a reference passed as a parameter.\nfn regression_6443() {\n    let x = &mut 0;\n    regression_6443_helper(x);\n    assert(*x == 1);\n}\n\nfn regression_6443_helper(x: &mut Field) {\n    *x = 1;\n}\n\nfn regression_2218(x: Field, y: Field) -> Field {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    if x != y {\n        *q1 = 1;\n        // Make sure that we correct load reference aliases through multiple blocks\n        if x != 20 {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 15;\n            assert(*q1 == 15);\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    // Have to assign value to return it\n    let value = *q1;\n    value\n}\n\nfn regression_2218_if_inner_if(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 2);\n}\n\nfn regression_2218_if_inner_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 15);\n}\n\nfn regression_2218_else(x: Field, y: Field) {\n    let value = regression_2218(x, y);\n    assert(value == 20);\n}\n\nfn regression_2218_loop(x: Field, y: Field) {\n    let q = &mut &mut 0;\n    let q1 = *q;\n    let q2 = *q;\n\n    for _ in 0..1 {\n        if x != y {\n            *q1 = 10;\n            *q2 = 2; // now we'd expect q1 == q2 == 2\n            assert(*q1 == 2);\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    for _ in 0..1 {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            } else {\n                *q2 = 20;\n                assert(*q1 == 20);\n            }\n        }\n        if x != y {\n            *q1 = 1;\n            for _ in 0..5 {\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        } else {\n            *q2 = 20;\n            assert(*q1 == 20);\n        }\n    }\n    assert(*q1 == 2);\n\n    if x != y {\n        for _ in 0..5 {\n            if x != y {\n                *q1 = 1;\n                // Make sure that we correct load reference aliases through multiple blocks\n                if x != 20 {\n                    *q1 = 10;\n                    *q2 = 2; // now we'd expect q1 == q2 == 2\n                    assert(*q1 == 2);\n                }\n            }\n        }\n    } else {\n        *q2 = 20;\n        assert(*q1 == 20);\n    }\n    assert(*q1 == 2);\n}\n// This is more a feature test than a proper regression.\n// Before, we never automatically dereferenced objects in method calls to their value types.\n// Now, we insert as many `*` as necessary to get to `S`.\nfn regression_2560(s_ref: &mut S) {\n    assert(s_ref.get_y() == 7);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
