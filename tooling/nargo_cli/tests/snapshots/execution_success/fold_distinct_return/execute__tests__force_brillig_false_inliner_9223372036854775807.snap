---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "private"
      },
      {
        "name": "y",
        "type": {
          "kind": "integer",
          "sign": "unsigned",
          "width": 32
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _5",
    "private parameters indices : [_0]",
    "public parameters indices : [_1]",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "EXPR [ (-1, _2) 3 ]",
    "CALL func 1: PREDICATE: EXPR [ 1 ]",
    "inputs: [_0, _1, _2], outputs: [_3, _4, _5]",
    "EXPR [ (1, _3) -25 ]",
    "func 1",
    "current witness index : _6",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : [_3, _4, _5]",
    "BLACKBOX::RANGE [(_0, 32)] []",
    "BLACKBOX::RANGE [(_1, 32)] []",
    "BLACKBOX::RANGE [(_2, 32)] []",
    "EXPR [ (1, _0) (-1, _6) 20 ]",
    "BLACKBOX::RANGE [(_6, 32)] []",
    "EXPR [ (1, _3) (-1, _6) 0 ]",
    "EXPR [ (-1, _1) (1, _4) 0 ]",
    "EXPR [ (-1, _2) (1, _5) 0 ]"
  ],
  "debug_symbols": "zZHNCoQgEIDfZc4d1P0Je5UlwmoKQSxMF5bo3dci3TosROxhL+rM+I0y3wg1lq4tpG66AbLHCKWRSsm2UF0lrOy0z45TAiEsrEH0KdjUPdULg9pCpp1SCTyFcsuloRd62a0wvkoSQF373TdspML5NCUfmnxH0/vKpmmEb4fpW3g55SdoStiKU3I5wfOIU7LDcx+JSprdsIFB5oHLsl4hu05zZyNFqXCV0ThdbdzYVx8qwV5vugprZ3BuvdTmv/6pWxbny07Nl/J75E/55TQI4uyAoKiG/UhNPr0B",
  "file_map": {
    "50": {
      "source": "fn main(x: u32, y: pub u32) {\n    let new_field = new_field_in_array([x, y, 3]);\n    assert(new_field[0] == 25);\n}\n\n#[fold]\nfn new_field_in_array(mut input: [u32; 3]) -> [u32; 3] {\n    input[0] = input[0] + 20;\n    input\n}\n",
      "path": ""
    }
  },
  "names": [
    "main",
    "new_field_in_array"
  ],
  "brillig_names": []
}
