---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "active",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "public"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 16
      },
      "visibility": "public"
    },
    "error_types": {
      "7151707756932127359": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 16 limbs"
      },
      "14514982005979867414": {
        "error_kind": "string",
        "string": "attempt to bit-shift with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _137",
    "private parameters indices : [_0]",
    "public parameters indices : [_1]",
    "return value indices : [_2]",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "BLACKBOX::RANGE [(_1, 16)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 65521 ], EXPR [ 65536 ]], outputs: [_3, _4]",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 16)] []",
    "EXPR [ (1, _1) (-65536, _3) (-1, _4) 65521 ]",
    "EXPR [ (-1, _0, _3) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _1, _0) 0 ], EXPR [ 16 ], EXPR [ 2 ]], outputs: [[_5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20]]",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "BLACKBOX::RANGE [(_8, 1)] []",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 1)] []",
    "BLACKBOX::RANGE [(_11, 1)] []",
    "BLACKBOX::RANGE [(_12, 1)] []",
    "BLACKBOX::RANGE [(_13, 1)] []",
    "BLACKBOX::RANGE [(_14, 1)] []",
    "BLACKBOX::RANGE [(_15, 1)] []",
    "BLACKBOX::RANGE [(_16, 1)] []",
    "BLACKBOX::RANGE [(_17, 1)] []",
    "BLACKBOX::RANGE [(_18, 1)] []",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "BLACKBOX::RANGE [(_20, 1)] []",
    "EXPR [ (1, _0, _1) (-1, _5) (-2, _6) (-4, _7) (-8, _8) (-16, _9) (-32, _10) (-64, _11) (-128, _12) (-256, _13) (-512, _14) (-1024, _15) (-2048, _16) (-4096, _17) (-8192, _18) (-16384, _19) (-32768, _20) 0 ]",
    "EXPR [ (1, _20, _20) (2, _20) (-1, _21) 1 ]",
    "EXPR [ (-1, _19) (-1, _22) 1 ]",
    "EXPR [ (2, _19, _21) (1, _21, _22) (-1, _23) 0 ]",
    "EXPR [ (1, _23, _23) (-1, _24) 0 ]",
    "EXPR [ (-1, _18) (-1, _25) 1 ]",
    "EXPR [ (2, _18, _24) (1, _24, _25) (-1, _26) 0 ]",
    "EXPR [ (1, _26, _26) (-1, _27) 0 ]",
    "EXPR [ (-1, _17) (-1, _28) 1 ]",
    "EXPR [ (2, _17, _27) (1, _27, _28) (-1, _29) 0 ]",
    "EXPR [ (1, _29, _29) (-1, _30) 0 ]",
    "EXPR [ (-1, _16) (-1, _31) 1 ]",
    "EXPR [ (2, _16, _30) (1, _30, _31) (-1, _32) 0 ]",
    "EXPR [ (1, _32, _32) (-1, _33) 0 ]",
    "EXPR [ (-1, _15) (-1, _34) 1 ]",
    "EXPR [ (2, _15, _33) (1, _33, _34) (-1, _35) 0 ]",
    "EXPR [ (1, _35, _35) (-1, _36) 0 ]",
    "EXPR [ (-1, _14) (-1, _37) 1 ]",
    "EXPR [ (2, _14, _36) (1, _36, _37) (-1, _38) 0 ]",
    "EXPR [ (1, _38, _38) (-1, _39) 0 ]",
    "EXPR [ (-1, _13) (-1, _40) 1 ]",
    "EXPR [ (2, _13, _39) (1, _39, _40) (-1, _41) 0 ]",
    "EXPR [ (1, _41, _41) (-1, _42) 0 ]",
    "EXPR [ (-1, _12) (-1, _43) 1 ]",
    "EXPR [ (2, _12, _42) (1, _42, _43) (-1, _44) 0 ]",
    "EXPR [ (1, _44, _44) (-1, _45) 0 ]",
    "EXPR [ (-1, _11) (-1, _46) 1 ]",
    "EXPR [ (2, _11, _45) (1, _45, _46) (-1, _47) 0 ]",
    "EXPR [ (1, _47, _47) (-1, _48) 0 ]",
    "EXPR [ (-1, _10) (-1, _49) 1 ]",
    "EXPR [ (2, _10, _48) (1, _48, _49) (-1, _50) 0 ]",
    "EXPR [ (1, _50, _50) (-1, _51) 0 ]",
    "EXPR [ (-1, _9) (-1, _52) 1 ]",
    "EXPR [ (2, _9, _51) (1, _51, _52) (-1, _53) 0 ]",
    "EXPR [ (1, _53, _53) (-1, _54) 0 ]",
    "EXPR [ (-1, _8) (-1, _55) 1 ]",
    "EXPR [ (2, _8, _54) (1, _54, _55) (-1, _56) 0 ]",
    "EXPR [ (1, _56, _56) (-1, _57) 0 ]",
    "EXPR [ (-1, _7) (-1, _58) 1 ]",
    "EXPR [ (2, _7, _57) (1, _57, _58) (-1, _59) 0 ]",
    "EXPR [ (1, _59, _59) (-1, _60) 0 ]",
    "EXPR [ (-1, _6) (-1, _61) 1 ]",
    "EXPR [ (2, _6, _60) (1, _60, _61) (-1, _62) 0 ]",
    "EXPR [ (1, _62, _62) (-1, _63) 0 ]",
    "EXPR [ (-1, _5) (-1, _64) 1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 0 ], EXPR [ 32768 ]], outputs: [_65, _66]",
    "BLACKBOX::RANGE [(_65, 1)] []",
    "BLACKBOX::RANGE [(_66, 15)] []",
    "EXPR [ (1, _1) (-32768, _65) (-1, _66) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1) 131072 ], EXPR [ 131072 ]], outputs: [_67, _68]",
    "BLACKBOX::RANGE [(_67, 1)] []",
    "BLACKBOX::RANGE [(_68, 17)] []",
    "EXPR [ (1, _1) (-131072, _67) (-1, _68) 131072 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (2, _67, _65) (1, _1) (-1, _65) (-1, _67) 1 ], EXPR [ 65536 ]], outputs: [_69, _70]",
    "BLACKBOX::RANGE [(_69, 1)] []",
    "BLACKBOX::RANGE [(_70, 16)] []",
    "EXPR [ (2, _65, _67) (1, _1) (-1, _65) (-1, _67) (-65536, _69) (-1, _70) 1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (2, _63, _5) (1, _63, _64) 0 ], EXPR [ 32768 ]], outputs: [_71, _72]",
    "BLACKBOX::RANGE [(_71, 1)] []",
    "BLACKBOX::RANGE [(_72, 15)] []",
    "EXPR [ (2, _5, _63) (-1, _135) 0 ]",
    "EXPR [ (1, _63, _64) (-1, _136) 0 ]",
    "EXPR [ (-32768, _71) (-1, _72) (1, _135) (1, _136) 0 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _70) 0 ], EXPR [ 32768 ]], outputs: [_73, _74]",
    "BLACKBOX::RANGE [(_73, 1)] []",
    "BLACKBOX::RANGE [(_74, 15)] []",
    "EXPR [ (1, _70) (-32768, _73) (-1, _74) 0 ]",
    "EXPR [ (-1, _75) (-1, _135) (-1, _136) 32768 ]",
    "EXPR [ (2, _71, _75) (-1, _137) 0 ]",
    "EXPR [ (-1, _76) (1, _135) (1, _136) (1, _137) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _76) 0 ]], outputs: [_77]",
    "EXPR [ (1, _76, _77) (1, _78) -1 ]",
    "EXPR [ (1, _76, _78) 0 ]",
    "EXPR [ (1, _0, _78) 0 ]",
    "BRILLIG CALL func 0: PREDICATE: EXPR [ (1, _0) 0 ]",
    "inputs: [EXPR [ (-2, _70, _73) (1, _70) (65536, _73) 0 ], EXPR [ (2, _63, _5) (1, _63, _64) (2, _75, _71) 0 ]], outputs: [_79, _80]",
    "BLACKBOX::RANGE [(_79, 16)] []",
    "BLACKBOX::RANGE [(_80, 16)] []",
    "EXPR [ (-1, _0) (-1, _80) (-1, _81) (1, _135) (1, _136) (1, _137) 0 ]",
    "BLACKBOX::RANGE [(_81, 16)] []",
    "EXPR [ (-1, _82) (1, _135) (1, _136) (1, _137) 0 ]",
    "EXPR [ (1, _79, _82) (1, _80) (-1, _83) 0 ]",
    "EXPR [ (-2, _70, _73) (1, _70) (65536, _73) (-1, _84) 0 ]",
    "EXPR [ (-1, _0, _83) (1, _0, _84) 0 ]",
    "EXPR [ (-1, _79) (-1, _85) 32768 ]",
    "EXPR [ (-2, _71, _73) (1, _71) (1, _73) (-1, _86) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _79) 0 ]], outputs: [_87]",
    "EXPR [ (1, _79, _87) (1, _88) -1 ]",
    "EXPR [ (1, _79, _88) 0 ]",
    "EXPR [ (2, _85, _86) (1, _79) (-1, _89) 0 ]",
    "EXPR [ (-1, _88) (-1, _90) 1 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _80) 0 ]], outputs: [_91]",
    "EXPR [ (1, _80, _91) (1, _92) -1 ]",
    "EXPR [ (1, _80, _92) 0 ]",
    "EXPR [ (-2, _73, _80) (65536, _73) (1, _80) (-1, _93) 0 ]",
    "EXPR [ (-1, _92) (-1, _94) 1 ]",
    "BRILLIG CALL func 0: inputs: [EXPR [ (-2, _67, _65) (1, _89, _90) (1, _65) (1, _67) 131071 ], EXPR [ 65536 ]], outputs: [_95, _96]",
    "BLACKBOX::RANGE [(_95, 2)] []",
    "BLACKBOX::RANGE [(_96, 16)] []",
    "EXPR [ (-2, _65, _67) (1, _89, _90) (1, _65) (1, _67) (-65536, _95) (-1, _96) 131071 ]",
    "EXPR [ (-1, _0, _96) (1, _2) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "ddTJjqMwFIXhd/Gahechr9JqRSQhJSREIgpaakV59yL+r2tY1OYaMPcTw7Ef6jKctrfjOF9v7+rw56FOyzhN49txup37dbzN+9XHs1Pt9Lguw7BfUt/m9657vwzzqg7zNk2d+tdPW73p/d7PdVz7ZZ/VnRrmyz7u4HWchtfRs/vq1r+3Jiu9KX82h737737Wn8flx/Mqqw6mU65WX2uoNdaaas21llqNZjAMtBv6DYBBMBAGw4AYFItiUSyKRbEoFsWiWBSLYlEcikNx8iooDsWhOBSH4lAcikfxKB7FyxdB8SgexaN4FI8SUAJKQAkoQT4sSkAJKAEloESUiBJRIkpEifJ/UCJKRIkoCSWhJJSEklASSpLfjJJQEkpGySgZJaNklIySUbKkBSWjFJSCUlAKSkEpKAWloBQJXUudxE5L7rQET0vytERPS/a0hE9L+rTET4v3GWPxWpBbkluUW5ZbmFuaW5wlz0YCbWxbFy/v+Vqky9ifpkH2hus2n79tFev/e5tpm8l9uZ2Hy7YMr2Va5/aF+wE=",
  "file_map": {
    "50": {
      "source": "fn main(active: bool, a: pub i16) -> pub i16 {\n    if active {\n        (a >> a)\n    } else {\n        0\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_to_radix",
    "directive_invert"
  ]
}
