---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "active",
        "type": {
          "kind": "boolean"
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 16
        },
        "visibility": "public"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "integer",
        "sign": "signed",
        "width": 16
      },
      "visibility": "public"
    },
    "error_types": {
      "16061458491050355795": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 5 limbs"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _63",
    "private parameters indices : [_0]",
    "public parameters indices : [_1]",
    "return value indices : [_2]",
    "BLACKBOX::RANGE [(_0, 1)] []",
    "BLACKBOX::RANGE [(_1, 16)] []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _1, _0) 0 ], EXPR [ 5 ], EXPR [ 2 ]], outputs: [[_3, _4, _5, _6, _7]]",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 1)] []",
    "BLACKBOX::RANGE [(_5, 1)] []",
    "BLACKBOX::RANGE [(_6, 1)] []",
    "BLACKBOX::RANGE [(_7, 1)] []",
    "EXPR [ (1, _0, _1) (-1, _3) (-2, _4) (-4, _5) (-8, _6) (-16, _7) 0 ]",
    "EXPR [ (1, _7, _7) (2, _7) (-1, _8) 1 ]",
    "EXPR [ (-1, _6) (-1, _9) 1 ]",
    "EXPR [ (2, _6, _8) (1, _8, _9) (-1, _10) 0 ]",
    "EXPR [ (1, _10, _10) (-1, _11) 0 ]",
    "EXPR [ (-1, _5) (-1, _12) 1 ]",
    "EXPR [ (2, _5, _11) (1, _11, _12) (-1, _13) 0 ]",
    "EXPR [ (1, _13, _13) (-1, _14) 0 ]",
    "EXPR [ (-1, _4) (-1, _15) 1 ]",
    "EXPR [ (2, _4, _14) (1, _14, _15) (-1, _16) 0 ]",
    "EXPR [ (1, _16, _16) (-1, _17) 0 ]",
    "EXPR [ (-1, _3) (-1, _18) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _1) 0 ], EXPR [ 32768 ]], outputs: [_19, _20]",
    "BLACKBOX::RANGE [(_19, 1)] []",
    "BLACKBOX::RANGE [(_20, 15)] []",
    "EXPR [ (1, _1) (-32768, _19) (-1, _20) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _1) 131072 ], EXPR [ 131072 ]], outputs: [_21, _22]",
    "BLACKBOX::RANGE [(_21, 1)] []",
    "BLACKBOX::RANGE [(_22, 17)] []",
    "EXPR [ (1, _1) (-131072, _21) (-1, _22) 131072 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (2, _21, _19) (1, _1) (-1, _19) (-1, _21) 1 ], EXPR [ 65536 ]], outputs: [_23, _24]",
    "BLACKBOX::RANGE [(_23, 1)] []",
    "BLACKBOX::RANGE [(_24, 16)] []",
    "EXPR [ (2, _19, _21) (1, _1) (-1, _19) (-1, _21) (-65536, _23) (-1, _24) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (2, _17, _3) (1, _17, _18) 0 ], EXPR [ 32768 ]], outputs: [_25, _26]",
    "BLACKBOX::RANGE [(_25, 1)] []",
    "BLACKBOX::RANGE [(_26, 15)] []",
    "EXPR [ (2, _3, _17) (-1, _61) 0 ]",
    "EXPR [ (1, _17, _18) (-1, _62) 0 ]",
    "EXPR [ (-32768, _25) (-1, _26) (1, _61) (1, _62) 0 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (1, _24) 0 ], EXPR [ 32768 ]], outputs: [_27, _28]",
    "BLACKBOX::RANGE [(_27, 1)] []",
    "BLACKBOX::RANGE [(_28, 15)] []",
    "EXPR [ (1, _24) (-32768, _27) (-1, _28) 0 ]",
    "EXPR [ (-1, _29) (-1, _61) (-1, _62) 32768 ]",
    "EXPR [ (2, _25, _29) (-1, _63) 0 ]",
    "EXPR [ (-1, _30) (1, _61) (1, _62) (1, _63) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _30) 0 ]], outputs: [_31]",
    "EXPR [ (1, _30, _31) (1, _32) -1 ]",
    "EXPR [ (1, _30, _32) 0 ]",
    "EXPR [ (1, _0, _32) 0 ]",
    "BRILLIG CALL func 1: PREDICATE: EXPR [ (1, _0) 0 ]",
    "inputs: [EXPR [ (-2, _24, _27) (1, _24) (65536, _27) 0 ], EXPR [ (2, _17, _3) (1, _17, _18) (2, _29, _25) 0 ]], outputs: [_33, _34]",
    "BLACKBOX::RANGE [(_33, 16)] []",
    "BLACKBOX::RANGE [(_34, 16)] []",
    "EXPR [ (-1, _0) (-1, _34) (-1, _35) (1, _61) (1, _62) (1, _63) 0 ]",
    "BLACKBOX::RANGE [(_35, 16)] []",
    "EXPR [ (-1, _36) (1, _61) (1, _62) (1, _63) 0 ]",
    "EXPR [ (1, _33, _36) (1, _34) (-1, _37) 0 ]",
    "EXPR [ (-2, _24, _27) (1, _24) (65536, _27) (-1, _38) 0 ]",
    "EXPR [ (-1, _0, _37) (1, _0, _38) 0 ]",
    "EXPR [ (-1, _33) (-1, _39) 32768 ]",
    "EXPR [ (-2, _25, _27) (1, _25) (1, _27) (-1, _40) 0 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _33) 0 ]], outputs: [_41]",
    "EXPR [ (1, _33, _41) (1, _42) -1 ]",
    "EXPR [ (1, _33, _42) 0 ]",
    "EXPR [ (2, _39, _40) (1, _33) (-1, _43) 0 ]",
    "EXPR [ (-1, _42) (-1, _44) 1 ]",
    "BRILLIG CALL func 2: inputs: [EXPR [ (1, _34) 0 ]], outputs: [_45]",
    "EXPR [ (1, _34, _45) (1, _46) -1 ]",
    "EXPR [ (1, _34, _46) 0 ]",
    "EXPR [ (-2, _27, _34) (65536, _27) (1, _34) (-1, _47) 0 ]",
    "EXPR [ (-1, _46) (-1, _48) 1 ]",
    "BRILLIG CALL func 1: inputs: [EXPR [ (-2, _21, _19) (1, _43, _44) (1, _19) (1, _21) 131071 ], EXPR [ 65536 ]], outputs: [_49, _50]",
    "BLACKBOX::RANGE [(_49, 2)] []",
    "BLACKBOX::RANGE [(_50, 16)] []",
    "EXPR [ (-2, _19, _21) (1, _43, _44) (1, _19) (1, _21) (-65536, _49) (-1, _50) 131071 ]",
    "EXPR [ (-1, _0, _50) (1, _2) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 2",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "ddJNboMwEIbhu3jNIv4lzVWqKnKIE1myDHKgUhXl7jV+SZsuuhmDh+8RmLmLczgt12PMl/EmDu93cSoxpXg9pnHwcxxz3b0/OvG8Pc4lhLolXvo1NfkS8iwOeUmpE58+Le2h2+RzW2dfanfXiZDPda3gJaawXj263/Tu/2ivtmy//wnbmv6od36I5c/7CiUOshO6VdOqbdW12re6b/WtVbljkSzEJXkJIBEkhMSQIBJFoSgUhaJQFIpCUSgKRaEoFI2iUfT2KSgaRaNoFI2iUTSKQTEoBsVsJ4JiUAyKQTEoBsWiWBSLYlHsdrAoFsWiWBSL4lAcikNxKA7Fbf8HxaE4FIfSo/QoPUq/Ko91bEr0pxS2ab0seXgZ3vlrenae4z2VcQjnpYR1cFqvjtI3",
  "file_map": {
    "50": {
      "source": "fn main(active: bool, a: pub i16) -> pub i16 {\n    if active {\n        (a >> a)\n    } else {\n        0\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix",
    "directive_integer_quotient",
    "directive_invert"
  ]
}
