---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "works",
        "type": {
          "kind": "struct",
          "path": "Baz::Works",
          "fields": [
            {
              "name": "a",
              "type": {
                "kind": "field"
              }
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "fails",
        "type": {
          "kind": "struct",
          "path": "Foo::NewType",
          "fields": [
            {
              "name": "a",
              "type": {
                "kind": "field"
              }
            }
          ]
        },
        "visibility": "private"
      },
      {
        "name": "also_fails",
        "type": {
          "kind": "struct",
          "path": "Foo::NewType",
          "fields": [
            {
              "name": "a",
              "type": {
                "kind": "field"
              }
            }
          ]
        },
        "visibility": "private"
      }
    ],
    "return_type": {
      "abi_type": {
        "kind": "field"
      },
      "visibility": "public"
    },
    "error_types": {
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _3",
    "private parameters indices : [_0, _1, _2]",
    "public parameters indices : []",
    "return value indices : [_3]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 })], outputs: [Simple(Witness(3))]",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32840 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(4), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(4), offset_address: Relative(5) }, Mov { destination: Relative(1), source: Direct(32836) }, Mov { destination: Relative(2), source: Direct(32837) }, Mov { destination: Relative(3), source: Direct(32838) }, Call { location: 15 }, Call { location: 16 }, Mov { destination: Direct(32839), source: Relative(1) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 32839 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 1 }, Stop { return_data: HeapVector { pointer: Relative(2), size: Relative(3) } }, Return, Call { location: 20 }, BinaryFieldOp { destination: Relative(4), op: Add, lhs: Relative(1), rhs: Relative(2) }, BinaryFieldOp { destination: Relative(1), op: Add, lhs: Relative(4), rhs: Relative(3) }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 25 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "nZDBCoQgEIbfZc4esi0KXyUizKYQRMV0YQnffTVqtw572cuM4/zfP/BvMOEYlkHq2azAug1GJ5WSy6CM4F4anX43KHKhDTBKgLbAyhgJnIrBO8QsuCDJyHKH2gPTQSkCT67CLlot13v33KVtQQD1lHoynKXC/IrkSxe/0aqiB1zV7Qev/+Gbx43v08SFdLcQYnZyko8Kj3EOWly2/mXPzRmidUbgFBxmp0uSqXZlQcq6j/naGw==",
  "file_map": {
    "50": {
      "source": "mod Foo {\n    pub(crate) struct NewType {\n        pub(crate) a: Field,\n    }\n}\n\nmod Bar {\n    pub(crate) use crate::Foo::NewType;\n    pub(crate) use crate::Foo::NewType as BarStruct;\n}\n\nmod Baz {\n    pub(crate) struct Works {\n        pub(crate) a: Field,\n    }\n    pub(crate) use crate::Bar::BarStruct;\n    pub(crate) use crate::Bar::NewType;\n}\n\nfn main(works: Baz::Works, fails: Baz::BarStruct, also_fails: Bar::NewType) -> pub Field {\n    works.a + fails.a + also_fails.a\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
