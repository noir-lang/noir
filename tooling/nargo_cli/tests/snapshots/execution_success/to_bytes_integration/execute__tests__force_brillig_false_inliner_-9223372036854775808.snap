---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "",
  "debug_symbols": "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",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "fn main(x: Field, a: Field) {\n    let y: Field = 2040124;\n    let be_byte_array: [u8; 31] = y.to_be_bytes();\n    let le_byte_array: [u8; 31] = x.to_le_bytes();\n\n    assert(le_byte_array[0] == 60);\n    assert(le_byte_array[0] == be_byte_array[30]);\n    assert(le_byte_array[1] == be_byte_array[29]);\n    assert(le_byte_array[2] == be_byte_array[28]);\n\n    let z = 0 - 1;\n    let p_bytes = std::field::modulus_le_bytes();\n    let z_bytes: [u8; 32] = z.to_le_bytes();\n    assert(p_bytes[10] == z_bytes[10]);\n    assert(p_bytes[0] == z_bytes[0] as u8 + 1 as u8);\n\n    let p_bits = std::field::modulus_le_bits();\n    let z_bits: [u1; 254] = z.to_le_bits();\n    assert(z_bits[0] == 0);\n    assert(p_bits[100] == z_bits[100]);\n\n    let _: [u1; 254] = a.to_le_bits();\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix"
  ]
}
