---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "a",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _969",
    "private parameters indices : [_0, _1]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 31 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Array([Witness(2), Witness(3), Witness(4), Witness(5), Witness(6), Witness(7), Witness(8), Witness(9), Witness(10), Witness(11), Witness(12), Witness(13), Witness(14), Witness(15), Witness(16), Witness(17), Witness(18), Witness(19), Witness(20), Witness(21), Witness(22), Witness(23), Witness(24), Witness(25), Witness(26), Witness(27), Witness(28), Witness(29), Witness(30), Witness(31), Witness(32)])]",
    "BLACKBOX::RANGE [(_5, 8)] []",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "BLACKBOX::RANGE [(_9, 8)] []",
    "BLACKBOX::RANGE [(_10, 8)] []",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "BLACKBOX::RANGE [(_12, 8)] []",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "BLACKBOX::RANGE [(_14, 8)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "BLACKBOX::RANGE [(_16, 8)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "BLACKBOX::RANGE [(_18, 8)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "BLACKBOX::RANGE [(_20, 8)] []",
    "BLACKBOX::RANGE [(_21, 8)] []",
    "BLACKBOX::RANGE [(_22, 8)] []",
    "BLACKBOX::RANGE [(_23, 8)] []",
    "BLACKBOX::RANGE [(_24, 8)] []",
    "BLACKBOX::RANGE [(_25, 8)] []",
    "BLACKBOX::RANGE [(_26, 8)] []",
    "BLACKBOX::RANGE [(_27, 8)] []",
    "BLACKBOX::RANGE [(_28, 8)] []",
    "BLACKBOX::RANGE [(_29, 8)] []",
    "BLACKBOX::RANGE [(_30, 8)] []",
    "BLACKBOX::RANGE [(_31, 8)] []",
    "BLACKBOX::RANGE [(_32, 8)] []",
    "EXPR [ (1, _0) (-1, _2) (-256, _3) (-65536, _4) (-16777216, _5) (-4294967296, _6) (-1099511627776, _7) (-281474976710656, _8) (-72057594037927936, _9) (-18446744073709551616, _10) (-4722366482869645213696, _11) (-1208925819614629174706176, _12) (-309485009821345068724781056, _13) (-79228162514264337593543950336, _14) (-20282409603651670423947251286016, _15) (-5192296858534827628530496329220096, _16) (-1329227995784915872903807060280344576, _17) (-340282366920938463463374607431768211456, _18) (-87112285931760246646623899502532662132736, _19) (-22300745198530623141535718272648361505980416, _20) (-5708990770823839524233143877797980545530986496, _21) (-1461501637330902918203684832716283019655932542976, _22) (-374144419156711147060143317175368453031918731001856, _23) (-95780971304118053647396689196894323976171195136475136, _24) (-24519928653854221733733552434404946937899825954937634816, _25) (-6277101735386680763835789423207666416102355444464034512896, _26) (-1606938044258990275541962092341162602522202993782792835301376, _27) (-411376139330301510538742295639337626245683966408394965837152256, _28) (-105312291668557186697918027683670432318895095400549111254310977536, _29) (-26959946667150639794667015087019630673637144422540572481103610249216, _30) (-6901746346790563787434755862277025452451108972170386555162524223799296, _31) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _32) 0 ]",
    "EXPR [ (1, _2) -60 ]",
    "EXPR [ (1, _3) -33 ]",
    "EXPR [ (1, _4) -31 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 254 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 2 })], outputs: [Array([Witness(33), Witness(34), Witness(35), Witness(36), Witness(37), Witness(38), Witness(39), Witness(40), Witness(41), Witness(42), Witness(43), Witness(44), Witness(45), Witness(46), Witness(47), Witness(48), Witness(49), Witness(50), Witness(51), Witness(52), Witness(53), Witness(54), Witness(55), Witness(56), Witness(57), Witness(58), Witness(59), Witness(60), Witness(61), Witness(62), Witness(63), Witness(64), Witness(65), Witness(66), Witness(67), Witness(68), Witness(69), Witness(70), Witness(71), Witness(72), Witness(73), Witness(74), Witness(75), Witness(76), Witness(77), Witness(78), Witness(79), Witness(80), Witness(81), Witness(82), Witness(83), Witness(84), Witness(85), Witness(86), Witness(87), Witness(88), Witness(89), Witness(90), Witness(91), Witness(92), Witness(93), Witness(94), Witness(95), Witness(96), Witness(97), Witness(98), Witness(99), Witness(100), Witness(101), Witness(102), Witness(103), Witness(104), Witness(105), Witness(106), Witness(107), Witness(108), Witness(109), Witness(110), Witness(111), Witness(112), Witness(113), Witness(114), Witness(115), Witness(116), Witness(117), Witness(118), Witness(119), Witness(120), Witness(121), Witness(122), Witness(123), Witness(124), Witness(125), Witness(126), Witness(127), Witness(128), Witness(129), Witness(130), Witness(131), Witness(132), Witness(133), Witness(134), Witness(135), Witness(136), Witness(137), Witness(138), Witness(139), Witness(140), Witness(141), Witness(142), Witness(143), Witness(144), Witness(145), Witness(146), Witness(147), Witness(148), Witness(149), Witness(150), Witness(151), Witness(152), Witness(153), Witness(154), Witness(155), Witness(156), Witness(157), Witness(158), Witness(159), Witness(160), Witness(161), Witness(162), Witness(163), Witness(164), Witness(165), Witness(166), Witness(167), Witness(168), Witness(169), Witness(170), Witness(171), Witness(172), Witness(173), Witness(174), Witness(175), Witness(176), Witness(177), Witness(178), Witness(179), Witness(180), Witness(181), Witness(182), Witness(183), Witness(184), Witness(185), Witness(186), Witness(187), Witness(188), Witness(189), Witness(190), Witness(191), Witness(192), Witness(193), Witness(194), Witness(195), Witness(196), Witness(197), Witness(198), Witness(199), Witness(200), Witness(201), Witness(202), Witness(203), Witness(204), Witness(205), Witness(206), Witness(207), Witness(208), Witness(209), Witness(210), Witness(211), Witness(212), Witness(213), Witness(214), Witness(215), Witness(216), Witness(217), Witness(218), Witness(219), Witness(220), Witness(221), Witness(222), Witness(223), Witness(224), Witness(225), Witness(226), Witness(227), Witness(228), Witness(229), Witness(230), Witness(231), Witness(232), Witness(233), Witness(234), Witness(235), Witness(236), Witness(237), Witness(238), Witness(239), Witness(240), Witness(241), Witness(242), Witness(243), Witness(244), Witness(245), Witness(246), Witness(247), Witness(248), Witness(249), Witness(250), Witness(251), Witness(252), Witness(253), Witness(254), Witness(255), Witness(256), Witness(257), Witness(258), Witness(259), Witness(260), Witness(261), Witness(262), Witness(263), Witness(264), Witness(265), Witness(266), Witness(267), Witness(268), Witness(269), Witness(270), Witness(271), Witness(272), Witness(273), Witness(274), Witness(275), Witness(276), Witness(277), Witness(278), Witness(279), Witness(280), Witness(281), Witness(282), Witness(283), Witness(284), Witness(285), Witness(286)])]",
    "BLACKBOX::RANGE [(_33, 1)] []",
    "BLACKBOX::RANGE [(_34, 1)] []",
    "BLACKBOX::RANGE [(_35, 1)] []",
    "BLACKBOX::RANGE [(_36, 1)] []",
    "BLACKBOX::RANGE [(_37, 1)] []",
    "BLACKBOX::RANGE [(_38, 1)] []",
    "BLACKBOX::RANGE [(_39, 1)] []",
    "BLACKBOX::RANGE [(_40, 1)] []",
    "BLACKBOX::RANGE [(_41, 1)] []",
    "BLACKBOX::RANGE [(_42, 1)] []",
    "BLACKBOX::RANGE [(_43, 1)] []",
    "BLACKBOX::RANGE [(_44, 1)] []",
    "BLACKBOX::RANGE [(_45, 1)] []",
    "BLACKBOX::RANGE [(_46, 1)] []",
    "BLACKBOX::RANGE [(_47, 1)] []",
    "BLACKBOX::RANGE [(_48, 1)] []",
    "BLACKBOX::RANGE [(_49, 1)] []",
    "BLACKBOX::RANGE [(_50, 1)] []",
    "BLACKBOX::RANGE [(_51, 1)] []",
    "BLACKBOX::RANGE [(_52, 1)] []",
    "BLACKBOX::RANGE [(_53, 1)] []",
    "BLACKBOX::RANGE [(_54, 1)] []",
    "BLACKBOX::RANGE [(_55, 1)] []",
    "BLACKBOX::RANGE [(_56, 1)] []",
    "BLACKBOX::RANGE [(_57, 1)] []",
    "BLACKBOX::RANGE [(_58, 1)] []",
    "BLACKBOX::RANGE [(_59, 1)] []",
    "BLACKBOX::RANGE [(_60, 1)] []",
    "BLACKBOX::RANGE [(_61, 1)] []",
    "BLACKBOX::RANGE [(_62, 1)] []",
    "BLACKBOX::RANGE [(_63, 1)] []",
    "BLACKBOX::RANGE [(_64, 1)] []",
    "BLACKBOX::RANGE [(_65, 1)] []",
    "BLACKBOX::RANGE [(_66, 1)] []",
    "BLACKBOX::RANGE [(_67, 1)] []",
    "BLACKBOX::RANGE [(_68, 1)] []",
    "BLACKBOX::RANGE [(_69, 1)] []",
    "BLACKBOX::RANGE [(_70, 1)] []",
    "BLACKBOX::RANGE [(_71, 1)] []",
    "BLACKBOX::RANGE [(_72, 1)] []",
    "BLACKBOX::RANGE [(_73, 1)] []",
    "BLACKBOX::RANGE [(_74, 1)] []",
    "BLACKBOX::RANGE [(_75, 1)] []",
    "BLACKBOX::RANGE [(_76, 1)] []",
    "BLACKBOX::RANGE [(_77, 1)] []",
    "BLACKBOX::RANGE [(_78, 1)] []",
    "BLACKBOX::RANGE [(_79, 1)] []",
    "BLACKBOX::RANGE [(_80, 1)] []",
    "BLACKBOX::RANGE [(_81, 1)] []",
    "BLACKBOX::RANGE [(_82, 1)] []",
    "BLACKBOX::RANGE [(_83, 1)] []",
    "BLACKBOX::RANGE [(_84, 1)] []",
    "BLACKBOX::RANGE [(_85, 1)] []",
    "BLACKBOX::RANGE [(_86, 1)] []",
    "BLACKBOX::RANGE [(_87, 1)] []",
    "BLACKBOX::RANGE [(_88, 1)] []",
    "BLACKBOX::RANGE [(_89, 1)] []",
    "BLACKBOX::RANGE [(_90, 1)] []",
    "BLACKBOX::RANGE [(_91, 1)] []",
    "BLACKBOX::RANGE [(_92, 1)] []",
    "BLACKBOX::RANGE [(_93, 1)] []",
    "BLACKBOX::RANGE [(_94, 1)] []",
    "BLACKBOX::RANGE [(_95, 1)] []",
    "BLACKBOX::RANGE [(_96, 1)] []",
    "BLACKBOX::RANGE [(_97, 1)] []",
    "BLACKBOX::RANGE [(_98, 1)] []",
    "BLACKBOX::RANGE [(_99, 1)] []",
    "BLACKBOX::RANGE [(_100, 1)] []",
    "BLACKBOX::RANGE [(_101, 1)] []",
    "BLACKBOX::RANGE [(_102, 1)] []",
    "BLACKBOX::RANGE [(_103, 1)] []",
    "BLACKBOX::RANGE [(_104, 1)] []",
    "BLACKBOX::RANGE [(_105, 1)] []",
    "BLACKBOX::RANGE [(_106, 1)] []",
    "BLACKBOX::RANGE [(_107, 1)] []",
    "BLACKBOX::RANGE [(_108, 1)] []",
    "BLACKBOX::RANGE [(_109, 1)] []",
    "BLACKBOX::RANGE [(_110, 1)] []",
    "BLACKBOX::RANGE [(_111, 1)] []",
    "BLACKBOX::RANGE [(_112, 1)] []",
    "BLACKBOX::RANGE [(_113, 1)] []",
    "BLACKBOX::RANGE [(_114, 1)] []",
    "BLACKBOX::RANGE [(_115, 1)] []",
    "BLACKBOX::RANGE [(_116, 1)] []",
    "BLACKBOX::RANGE [(_117, 1)] []",
    "BLACKBOX::RANGE [(_118, 1)] []",
    "BLACKBOX::RANGE [(_119, 1)] []",
    "BLACKBOX::RANGE [(_120, 1)] []",
    "BLACKBOX::RANGE [(_121, 1)] []",
    "BLACKBOX::RANGE [(_122, 1)] []",
    "BLACKBOX::RANGE [(_123, 1)] []",
    "BLACKBOX::RANGE [(_124, 1)] []",
    "BLACKBOX::RANGE [(_125, 1)] []",
    "BLACKBOX::RANGE [(_126, 1)] []",
    "BLACKBOX::RANGE [(_127, 1)] []",
    "BLACKBOX::RANGE [(_128, 1)] []",
    "BLACKBOX::RANGE [(_129, 1)] []",
    "BLACKBOX::RANGE [(_130, 1)] []",
    "BLACKBOX::RANGE [(_131, 1)] []",
    "BLACKBOX::RANGE [(_132, 1)] []",
    "BLACKBOX::RANGE [(_133, 1)] []",
    "BLACKBOX::RANGE [(_134, 1)] []",
    "BLACKBOX::RANGE [(_135, 1)] []",
    "BLACKBOX::RANGE [(_136, 1)] []",
    "BLACKBOX::RANGE [(_137, 1)] []",
    "BLACKBOX::RANGE [(_138, 1)] []",
    "BLACKBOX::RANGE [(_139, 1)] []",
    "BLACKBOX::RANGE [(_140, 1)] []",
    "BLACKBOX::RANGE [(_141, 1)] []",
    "BLACKBOX::RANGE [(_142, 1)] []",
    "BLACKBOX::RANGE [(_143, 1)] []",
    "BLACKBOX::RANGE [(_144, 1)] []",
    "BLACKBOX::RANGE [(_145, 1)] []",
    "BLACKBOX::RANGE [(_146, 1)] []",
    "BLACKBOX::RANGE [(_147, 1)] []",
    "BLACKBOX::RANGE [(_148, 1)] []",
    "BLACKBOX::RANGE [(_149, 1)] []",
    "BLACKBOX::RANGE [(_150, 1)] []",
    "BLACKBOX::RANGE [(_151, 1)] []",
    "BLACKBOX::RANGE [(_152, 1)] []",
    "BLACKBOX::RANGE [(_153, 1)] []",
    "BLACKBOX::RANGE [(_154, 1)] []",
    "BLACKBOX::RANGE [(_155, 1)] []",
    "BLACKBOX::RANGE [(_156, 1)] []",
    "BLACKBOX::RANGE [(_157, 1)] []",
    "BLACKBOX::RANGE [(_158, 1)] []",
    "BLACKBOX::RANGE [(_159, 1)] []",
    "BLACKBOX::RANGE [(_160, 1)] []",
    "BLACKBOX::RANGE [(_161, 1)] []",
    "BLACKBOX::RANGE [(_162, 1)] []",
    "BLACKBOX::RANGE [(_163, 1)] []",
    "BLACKBOX::RANGE [(_164, 1)] []",
    "BLACKBOX::RANGE [(_165, 1)] []",
    "BLACKBOX::RANGE [(_166, 1)] []",
    "BLACKBOX::RANGE [(_167, 1)] []",
    "BLACKBOX::RANGE [(_168, 1)] []",
    "BLACKBOX::RANGE [(_169, 1)] []",
    "BLACKBOX::RANGE [(_170, 1)] []",
    "BLACKBOX::RANGE [(_171, 1)] []",
    "BLACKBOX::RANGE [(_172, 1)] []",
    "BLACKBOX::RANGE [(_173, 1)] []",
    "BLACKBOX::RANGE [(_174, 1)] []",
    "BLACKBOX::RANGE [(_175, 1)] []",
    "BLACKBOX::RANGE [(_176, 1)] []",
    "BLACKBOX::RANGE [(_177, 1)] []",
    "BLACKBOX::RANGE [(_178, 1)] []",
    "BLACKBOX::RANGE [(_179, 1)] []",
    "BLACKBOX::RANGE [(_180, 1)] []",
    "BLACKBOX::RANGE [(_181, 1)] []",
    "BLACKBOX::RANGE [(_182, 1)] []",
    "BLACKBOX::RANGE [(_183, 1)] []",
    "BLACKBOX::RANGE [(_184, 1)] []",
    "BLACKBOX::RANGE [(_185, 1)] []",
    "BLACKBOX::RANGE [(_186, 1)] []",
    "BLACKBOX::RANGE [(_187, 1)] []",
    "BLACKBOX::RANGE [(_188, 1)] []",
    "BLACKBOX::RANGE [(_189, 1)] []",
    "BLACKBOX::RANGE [(_190, 1)] []",
    "BLACKBOX::RANGE [(_191, 1)] []",
    "BLACKBOX::RANGE [(_192, 1)] []",
    "BLACKBOX::RANGE [(_193, 1)] []",
    "BLACKBOX::RANGE [(_194, 1)] []",
    "BLACKBOX::RANGE [(_195, 1)] []",
    "BLACKBOX::RANGE [(_196, 1)] []",
    "BLACKBOX::RANGE [(_197, 1)] []",
    "BLACKBOX::RANGE [(_198, 1)] []",
    "BLACKBOX::RANGE [(_199, 1)] []",
    "BLACKBOX::RANGE [(_200, 1)] []",
    "BLACKBOX::RANGE [(_201, 1)] []",
    "BLACKBOX::RANGE [(_202, 1)] []",
    "BLACKBOX::RANGE [(_203, 1)] []",
    "BLACKBOX::RANGE [(_204, 1)] []",
    "BLACKBOX::RANGE [(_205, 1)] []",
    "BLACKBOX::RANGE [(_206, 1)] []",
    "BLACKBOX::RANGE [(_207, 1)] []",
    "BLACKBOX::RANGE [(_208, 1)] []",
    "BLACKBOX::RANGE [(_209, 1)] []",
    "BLACKBOX::RANGE [(_210, 1)] []",
    "BLACKBOX::RANGE [(_211, 1)] []",
    "BLACKBOX::RANGE [(_212, 1)] []",
    "BLACKBOX::RANGE [(_213, 1)] []",
    "BLACKBOX::RANGE [(_214, 1)] []",
    "BLACKBOX::RANGE [(_215, 1)] []",
    "BLACKBOX::RANGE [(_216, 1)] []",
    "BLACKBOX::RANGE [(_217, 1)] []",
    "BLACKBOX::RANGE [(_218, 1)] []",
    "BLACKBOX::RANGE [(_219, 1)] []",
    "BLACKBOX::RANGE [(_220, 1)] []",
    "BLACKBOX::RANGE [(_221, 1)] []",
    "BLACKBOX::RANGE [(_222, 1)] []",
    "BLACKBOX::RANGE [(_223, 1)] []",
    "BLACKBOX::RANGE [(_224, 1)] []",
    "BLACKBOX::RANGE [(_225, 1)] []",
    "BLACKBOX::RANGE [(_226, 1)] []",
    "BLACKBOX::RANGE [(_227, 1)] []",
    "BLACKBOX::RANGE [(_228, 1)] []",
    "BLACKBOX::RANGE [(_229, 1)] []",
    "BLACKBOX::RANGE [(_230, 1)] []",
    "BLACKBOX::RANGE [(_231, 1)] []",
    "BLACKBOX::RANGE [(_232, 1)] []",
    "BLACKBOX::RANGE [(_233, 1)] []",
    "BLACKBOX::RANGE [(_234, 1)] []",
    "BLACKBOX::RANGE [(_235, 1)] []",
    "BLACKBOX::RANGE [(_236, 1)] []",
    "BLACKBOX::RANGE [(_237, 1)] []",
    "BLACKBOX::RANGE [(_238, 1)] []",
    "BLACKBOX::RANGE [(_239, 1)] []",
    "BLACKBOX::RANGE [(_240, 1)] []",
    "BLACKBOX::RANGE [(_241, 1)] []",
    "BLACKBOX::RANGE [(_242, 1)] []",
    "BLACKBOX::RANGE [(_243, 1)] []",
    "BLACKBOX::RANGE [(_244, 1)] []",
    "BLACKBOX::RANGE [(_245, 1)] []",
    "BLACKBOX::RANGE [(_246, 1)] []",
    "BLACKBOX::RANGE [(_247, 1)] []",
    "BLACKBOX::RANGE [(_248, 1)] []",
    "BLACKBOX::RANGE [(_249, 1)] []",
    "BLACKBOX::RANGE [(_250, 1)] []",
    "BLACKBOX::RANGE [(_251, 1)] []",
    "BLACKBOX::RANGE [(_252, 1)] []",
    "BLACKBOX::RANGE [(_253, 1)] []",
    "BLACKBOX::RANGE [(_254, 1)] []",
    "BLACKBOX::RANGE [(_255, 1)] []",
    "BLACKBOX::RANGE [(_256, 1)] []",
    "BLACKBOX::RANGE [(_257, 1)] []",
    "BLACKBOX::RANGE [(_258, 1)] []",
    "BLACKBOX::RANGE [(_259, 1)] []",
    "BLACKBOX::RANGE [(_260, 1)] []",
    "BLACKBOX::RANGE [(_261, 1)] []",
    "BLACKBOX::RANGE [(_262, 1)] []",
    "BLACKBOX::RANGE [(_263, 1)] []",
    "BLACKBOX::RANGE [(_264, 1)] []",
    "BLACKBOX::RANGE [(_265, 1)] []",
    "BLACKBOX::RANGE [(_266, 1)] []",
    "BLACKBOX::RANGE [(_267, 1)] []",
    "BLACKBOX::RANGE [(_268, 1)] []",
    "BLACKBOX::RANGE [(_269, 1)] []",
    "BLACKBOX::RANGE [(_270, 1)] []",
    "BLACKBOX::RANGE [(_271, 1)] []",
    "BLACKBOX::RANGE [(_272, 1)] []",
    "BLACKBOX::RANGE [(_273, 1)] []",
    "BLACKBOX::RANGE [(_274, 1)] []",
    "BLACKBOX::RANGE [(_275, 1)] []",
    "BLACKBOX::RANGE [(_276, 1)] []",
    "BLACKBOX::RANGE [(_277, 1)] []",
    "BLACKBOX::RANGE [(_278, 1)] []",
    "BLACKBOX::RANGE [(_279, 1)] []",
    "BLACKBOX::RANGE [(_280, 1)] []",
    "BLACKBOX::RANGE [(_281, 1)] []",
    "BLACKBOX::RANGE [(_282, 1)] []",
    "BLACKBOX::RANGE [(_283, 1)] []",
    "BLACKBOX::RANGE [(_284, 1)] []",
    "BLACKBOX::RANGE [(_285, 1)] []",
    "BLACKBOX::RANGE [(_286, 1)] []",

    "EXPR [ (1, _285, _286) (-1, _286) (-1, _287) 1 ]",
    "EXPR [ (-1, _286) (-1, _288) 1 ]",
    "EXPR [ (1, _285, _286) (-1, _772) 0 ]",
    "EXPR [ (-1, _287, _288) (-1, _773) 0 ]",
    "EXPR [ (-1, _286) (-1, _289) (1, _772) (1, _773) 1 ]",
    "EXPR [ (-1, _284, _289) 0 ]",
    "EXPR [ (-1, _283, _289) 0 ]",
    "EXPR [ (-1, _282, _289) 0 ]",
    "EXPR [ (-1, _281, _289) 0 ]",
    "EXPR [ (-1, _280, _289) 0 ]",
    "EXPR [ (1, _279, _289) (-1, _289) (-1, _290) 1 ]",
    "EXPR [ (1, _286) (-1, _291) (-1, _772) (-1, _773) 0 ]",
    "EXPR [ (1, _279, _289) (-1, _774) 0 ]",
    "EXPR [ (-1, _290, _291) (-1, _775) 0 ]",
    "EXPR [ (-1, _289) (-1, _292) (1, _774) (1, _775) 1 ]",
    "EXPR [ (-1, _278) (-1, _293) 1 ]",
    "EXPR [ (-1, _292, _293) (-1, _294) 1 ]",
    "EXPR [ (1, _289) (-1, _295) (-1, _774) (-1, _775) 0 ]",
    "EXPR [ (-1, _292, _293) (-1, _776) 0 ]",
    "EXPR [ (-1, _294, _295) (-1, _777) 0 ]",
    "EXPR [ (-1, _296) (1, _776) (1, _777) 1 ]",
    "EXPR [ (-1, _277, _296) 0 ]",
    "EXPR [ (-1, _276, _296) 0 ]",
    "EXPR [ (1, _275, _296) (-1, _296) (-1, _297) 1 ]",
    "EXPR [ (-1, _298) (-1, _776) (-1, _777) 0 ]",
    "EXPR [ (1, _275, _296) (-1, _778) 0 ]",
    "EXPR [ (-1, _297, _298) (-1, _779) 0 ]",
    "EXPR [ (-1, _296) (-1, _299) (1, _778) (1, _779) 1 ]",
    "EXPR [ (-1, _274, _299) 0 ]",
    "EXPR [ (-1, _273, _299) 0 ]",
    "EXPR [ (-1, _272, _299) 0 ]",
    "EXPR [ (1, _271, _299) (-1, _299) (-1, _300) 1 ]",
    "EXPR [ (1, _296) (-1, _301) (-1, _778) (-1, _779) 0 ]",
    "EXPR [ (1, _271, _299) (-1, _780) 0 ]",
    "EXPR [ (-1, _300, _301) (-1, _781) 0 ]",
    "EXPR [ (-1, _299) (-1, _302) (1, _780) (1, _781) 1 ]",
    "EXPR [ (-1, _270, _302) 0 ]",
    "EXPR [ (-1, _269, _302) 0 ]",
    "EXPR [ (1, _268, _302) (-1, _302) (-1, _303) 1 ]",
    "EXPR [ (1, _299) (-1, _304) (-1, _780) (-1, _781) 0 ]",
    "EXPR [ (1, _268, _302) (-1, _782) 0 ]",
    "EXPR [ (-1, _303, _304) (-1, _783) 0 ]",
    "EXPR [ (-1, _302) (-1, _305) (1, _782) (1, _783) 1 ]",
    "EXPR [ (-1, _267) (-1, _306) 1 ]",
    "EXPR [ (-1, _305, _306) (-1, _307) 1 ]",
    "EXPR [ (1, _302) (-1, _308) (-1, _782) (-1, _783) 0 ]",
    "EXPR [ (-1, _305, _306) (-1, _784) 0 ]",
    "EXPR [ (-1, _307, _308) (-1, _785) 0 ]",
    "EXPR [ (-1, _309) (1, _784) (1, _785) 1 ]",
    "EXPR [ (-1, _266) (-1, _310) 1 ]",
    "EXPR [ (-1, _309, _310) (-1, _311) 1 ]",
    "EXPR [ (-1, _312) (-1, _784) (-1, _785) 0 ]",
    "EXPR [ (-1, _309, _310) (-1, _786) 0 ]",
    "EXPR [ (-1, _311, _312) (-1, _787) 0 ]",
    "EXPR [ (-1, _313) (1, _786) (1, _787) 1 ]",
    "EXPR [ (-1, _265, _313) 0 ]",
    "EXPR [ (-1, _264, _313) 0 ]",
    "EXPR [ (1, _263, _313) (-1, _313) (-1, _314) 1 ]",
    "EXPR [ (-1, _315) (-1, _786) (-1, _787) 0 ]",
    "EXPR [ (1, _263, _313) (-1, _788) 0 ]",
    "EXPR [ (-1, _314, _315) (-1, _789) 0 ]",
    "EXPR [ (-1, _313) (-1, _316) (1, _788) (1, _789) 1 ]",
    "EXPR [ (-1, _262) (-1, _317) 1 ]",
    "EXPR [ (-1, _316, _317) (-1, _318) 1 ]",
    "EXPR [ (1, _313) (-1, _319) (-1, _788) (-1, _789) 0 ]",
    "EXPR [ (-1, _316, _317) (-1, _790) 0 ]",
    "EXPR [ (-1, _318, _319) (-1, _791) 0 ]",
    "EXPR [ (-1, _320) (1, _790) (1, _791) 1 ]",
    "EXPR [ (-1, _261) (-1, _321) 1 ]",
    "EXPR [ (-1, _320, _321) (-1, _322) 1 ]",
    "EXPR [ (-1, _323) (-1, _790) (-1, _791) 0 ]",
    "EXPR [ (-1, _320, _321) (-1, _792) 0 ]",
    "EXPR [ (-1, _322, _323) (-1, _793) 0 ]",
    "EXPR [ (-1, _324) (1, _792) (1, _793) 1 ]",
    "EXPR [ (-1, _260, _324) 0 ]",
    "EXPR [ (-1, _259, _324) 0 ]",
    "EXPR [ (1, _258, _324) (-1, _324) (-1, _325) 1 ]",
    "EXPR [ (-1, _326) (-1, _792) (-1, _793) 0 ]",
    "EXPR [ (1, _258, _324) (-1, _794) 0 ]",
    "EXPR [ (-1, _325, _326) (-1, _795) 0 ]",
    "EXPR [ (-1, _324) (-1, _327) (1, _794) (1, _795) 1 ]",
    "EXPR [ (-1, _257, _327) 0 ]",
    "EXPR [ (1, _256, _327) (-1, _327) (-1, _328) 1 ]",
    "EXPR [ (1, _324) (-1, _329) (-1, _794) (-1, _795) 0 ]",
    "EXPR [ (1, _256, _327) (-1, _796) 0 ]",
    "EXPR [ (-1, _328, _329) (-1, _797) 0 ]",
    "EXPR [ (-1, _327) (-1, _330) (1, _796) (1, _797) 1 ]",
    "EXPR [ (-1, _255) (-1, _331) 1 ]",
    "EXPR [ (-1, _330, _331) (-1, _332) 1 ]",
    "EXPR [ (1, _327) (-1, _333) (-1, _796) (-1, _797) 0 ]",
    "EXPR [ (-1, _330, _331) (-1, _798) 0 ]",
    "EXPR [ (-1, _332, _333) (-1, _799) 0 ]",
    "EXPR [ (-1, _334) (1, _798) (1, _799) 1 ]",
    "EXPR [ (-1, _254) (-1, _335) 1 ]",
    "EXPR [ (-1, _334, _335) (-1, _336) 1 ]",
    "EXPR [ (-1, _337) (-1, _798) (-1, _799) 0 ]",
    "EXPR [ (-1, _334, _335) (-1, _800) 0 ]",
    "EXPR [ (-1, _336, _337) (-1, _801) 0 ]",
    "EXPR [ (-1, _338) (1, _800) (1, _801) 1 ]",
    "EXPR [ (-1, _253, _338) 0 ]",
    "EXPR [ (-1, _252, _338) 0 ]",
    "EXPR [ (-1, _251, _338) 0 ]",
    "EXPR [ (-1, _250, _338) 0 ]",
    "EXPR [ (1, _249, _338) (-1, _338) (-1, _339) 1 ]",
    "EXPR [ (-1, _340) (-1, _800) (-1, _801) 0 ]",
    "EXPR [ (1, _249, _338) (-1, _802) 0 ]",
    "EXPR [ (-1, _339, _340) (-1, _803) 0 ]",
    "EXPR [ (-1, _338) (-1, _341) (1, _802) (1, _803) 1 ]",
    "EXPR [ (-1, _248, _341) 0 ]",
    "EXPR [ (-1, _247, _341) 0 ]",
    "EXPR [ (1, _246, _341) (-1, _341) (-1, _342) 1 ]",
    "EXPR [ (1, _338) (-1, _343) (-1, _802) (-1, _803) 0 ]",
    "EXPR [ (1, _246, _341) (-1, _804) 0 ]",
    "EXPR [ (-1, _342, _343) (-1, _805) 0 ]",
    "EXPR [ (-1, _341) (-1, _344) (1, _804) (1, _805) 1 ]",
    "EXPR [ (-1, _245) (-1, _345) 1 ]",
    "EXPR [ (-1, _344, _345) (-1, _346) 1 ]",
    "EXPR [ (1, _341) (-1, _347) (-1, _804) (-1, _805) 0 ]",
    "EXPR [ (-1, _344, _345) (-1, _806) 0 ]",
    "EXPR [ (-1, _346, _347) (-1, _807) 0 ]",
    "EXPR [ (-1, _348) (1, _806) (1, _807) 1 ]",
    "EXPR [ (-1, _244, _348) 0 ]",
    "EXPR [ (-1, _243, _348) 0 ]",
    "EXPR [ (-1, _242, _348) 0 ]",
    "EXPR [ (1, _241, _348) (-1, _348) (-1, _349) 1 ]",
    "EXPR [ (-1, _350) (-1, _806) (-1, _807) 0 ]",
    "EXPR [ (1, _241, _348) (-1, _808) 0 ]",
    "EXPR [ (-1, _349, _350) (-1, _809) 0 ]",
    "EXPR [ (-1, _348) (-1, _351) (1, _808) (1, _809) 1 ]",
    "EXPR [ (-1, _240) (-1, _352) 1 ]",
    "EXPR [ (-1, _351, _352) (-1, _353) 1 ]",
    "EXPR [ (1, _348) (-1, _354) (-1, _808) (-1, _809) 0 ]",
    "EXPR [ (-1, _351, _352) (-1, _810) 0 ]",
    "EXPR [ (-1, _353, _354) (-1, _811) 0 ]",
    "EXPR [ (-1, _355) (1, _810) (1, _811) 1 ]",
    "EXPR [ (-1, _239, _355) 0 ]",
    "EXPR [ (1, _238, _355) (-1, _355) (-1, _356) 1 ]",
    "EXPR [ (-1, _357) (-1, _810) (-1, _811) 0 ]",
    "EXPR [ (1, _238, _355) (-1, _812) 0 ]",
    "EXPR [ (-1, _356, _357) (-1, _813) 0 ]",
    "EXPR [ (-1, _355) (-1, _358) (1, _812) (1, _813) 1 ]",
    "EXPR [ (-1, _237, _358) 0 ]",
    "EXPR [ (-1, _236, _358) 0 ]",
    "EXPR [ (-1, _235, _358) 0 ]",
    "EXPR [ (-1, _234, _358) 0 ]",
    "EXPR [ (-1, _233, _358) 0 ]",
    "EXPR [ (-1, _232, _358) 0 ]",
    "EXPR [ (-1, _231, _358) 0 ]",
    "EXPR [ (1, _230, _358) (-1, _358) (-1, _359) 1 ]",
    "EXPR [ (1, _355) (-1, _360) (-1, _812) (-1, _813) 0 ]",
    "EXPR [ (1, _230, _358) (-1, _814) 0 ]",
    "EXPR [ (-1, _359, _360) (-1, _815) 0 ]",
    "EXPR [ (-1, _358) (-1, _361) (1, _814) (1, _815) 1 ]",
    "EXPR [ (-1, _229, _361) 0 ]",
    "EXPR [ (1, _228, _361) (-1, _361) (-1, _362) 1 ]",
    "EXPR [ (1, _358) (-1, _363) (-1, _814) (-1, _815) 0 ]",
    "EXPR [ (1, _228, _361) (-1, _816) 0 ]",
    "EXPR [ (-1, _362, _363) (-1, _817) 0 ]",
    "EXPR [ (-1, _361) (-1, _364) (1, _816) (1, _817) 1 ]",
    "EXPR [ (-1, _227, _364) 0 ]",
    "EXPR [ (-1, _226, _364) 0 ]",
    "EXPR [ (1, _225, _364) (-1, _364) (-1, _365) 1 ]",
    "EXPR [ (1, _361) (-1, _366) (-1, _816) (-1, _817) 0 ]",
    "EXPR [ (1, _225, _364) (-1, _818) 0 ]",
    "EXPR [ (-1, _365, _366) (-1, _819) 0 ]",
    "EXPR [ (-1, _364) (-1, _367) (1, _818) (1, _819) 1 ]",
    "EXPR [ (-1, _224) (-1, _368) 1 ]",
    "EXPR [ (-1, _367, _368) (-1, _369) 1 ]",
    "EXPR [ (1, _364) (-1, _370) (-1, _818) (-1, _819) 0 ]",
    "EXPR [ (-1, _367, _368) (-1, _820) 0 ]",
    "EXPR [ (-1, _369, _370) (-1, _821) 0 ]",
    "EXPR [ (-1, _371) (1, _820) (1, _821) 1 ]",
    "EXPR [ (-1, _223, _371) 0 ]",
    "EXPR [ (1, _222, _371) (-1, _371) (-1, _372) 1 ]",
    "EXPR [ (-1, _373) (-1, _820) (-1, _821) 0 ]",
    "EXPR [ (1, _222, _371) (-1, _822) 0 ]",
    "EXPR [ (-1, _372, _373) (-1, _823) 0 ]",
    "EXPR [ (-1, _371) (-1, _374) (1, _822) (1, _823) 1 ]",
    "EXPR [ (-1, _221) (-1, _375) 1 ]",
    "EXPR [ (-1, _374, _375) (-1, _376) 1 ]",
    "EXPR [ (1, _371) (-1, _377) (-1, _822) (-1, _823) 0 ]",
    "EXPR [ (-1, _374, _375) (-1, _824) 0 ]",
    "EXPR [ (-1, _376, _377) (-1, _825) 0 ]",
    "EXPR [ (-1, _378) (1, _824) (1, _825) 1 ]",
    "EXPR [ (-1, _220) (-1, _379) 1 ]",
    "EXPR [ (-1, _378, _379) (-1, _380) 1 ]",
    "EXPR [ (-1, _381) (-1, _824) (-1, _825) 0 ]",
    "EXPR [ (-1, _378, _379) (-1, _826) 0 ]",
    "EXPR [ (-1, _380, _381) (-1, _827) 0 ]",
    "EXPR [ (-1, _382) (1, _826) (1, _827) 1 ]",
    "EXPR [ (-1, _219, _382) 0 ]",
    "EXPR [ (-1, _218, _382) 0 ]",
    "EXPR [ (-1, _217, _382) 0 ]",
    "EXPR [ (-1, _216, _382) 0 ]",
    "EXPR [ (1, _215, _382) (-1, _382) (-1, _383) 1 ]",
    "EXPR [ (-1, _384) (-1, _826) (-1, _827) 0 ]",
    "EXPR [ (1, _215, _382) (-1, _828) 0 ]",
    "EXPR [ (-1, _383, _384) (-1, _829) 0 ]",
    "EXPR [ (-1, _382) (-1, _385) (1, _828) (1, _829) 1 ]",
    "EXPR [ (-1, _214, _385) 0 ]",
    "EXPR [ (1, _213, _385) (-1, _385) (-1, _386) 1 ]",
    "EXPR [ (1, _382) (-1, _387) (-1, _828) (-1, _829) 0 ]",
    "EXPR [ (1, _213, _385) (-1, _830) 0 ]",
    "EXPR [ (-1, _386, _387) (-1, _831) 0 ]",
    "EXPR [ (-1, _385) (-1, _388) (1, _830) (1, _831) 1 ]",
    "EXPR [ (-1, _212, _388) 0 ]",
    "EXPR [ (-1, _211, _388) 0 ]",
    "EXPR [ (-1, _210, _388) 0 ]",
    "EXPR [ (-1, _209, _388) 0 ]",
    "EXPR [ (-1, _208, _388) 0 ]",
    "EXPR [ (1, _207, _388) (-1, _388) (-1, _389) 1 ]",
    "EXPR [ (1, _385) (-1, _390) (-1, _830) (-1, _831) 0 ]",
    "EXPR [ (1, _207, _388) (-1, _832) 0 ]",
    "EXPR [ (-1, _389, _390) (-1, _833) 0 ]",
    "EXPR [ (-1, _388) (-1, _391) (1, _832) (1, _833) 1 ]",
    "EXPR [ (-1, _206, _391) 0 ]",
    "EXPR [ (-1, _205, _391) 0 ]",
    "EXPR [ (-1, _204, _391) 0 ]",
    "EXPR [ (1, _203, _391) (-1, _391) (-1, _392) 1 ]",
    "EXPR [ (1, _388) (-1, _393) (-1, _832) (-1, _833) 0 ]",
    "EXPR [ (1, _203, _391) (-1, _834) 0 ]",
    "EXPR [ (-1, _392, _393) (-1, _835) 0 ]",
    "EXPR [ (-1, _391) (-1, _394) (1, _834) (1, _835) 1 ]",
    "EXPR [ (-1, _202, _394) 0 ]",
    "EXPR [ (1, _201, _394) (-1, _394) (-1, _395) 1 ]",
    "EXPR [ (1, _391) (-1, _396) (-1, _834) (-1, _835) 0 ]",
    "EXPR [ (1, _201, _394) (-1, _836) 0 ]",
    "EXPR [ (-1, _395, _396) (-1, _837) 0 ]",
    "EXPR [ (-1, _394) (-1, _397) (1, _836) (1, _837) 1 ]",
    "EXPR [ (-1, _200) (-1, _398) 1 ]",
    "EXPR [ (-1, _397, _398) (-1, _399) 1 ]",
    "EXPR [ (1, _394) (-1, _400) (-1, _836) (-1, _837) 0 ]",
    "EXPR [ (-1, _397, _398) (-1, _838) 0 ]",
    "EXPR [ (-1, _399, _400) (-1, _839) 0 ]",
    "EXPR [ (-1, _401) (1, _838) (1, _839) 1 ]",
    "EXPR [ (-1, _199, _401) 0 ]",
    "EXPR [ (1, _198, _401) (-1, _401) (-1, _402) 1 ]",
    "EXPR [ (-1, _403) (-1, _838) (-1, _839) 0 ]",
    "EXPR [ (1, _198, _401) (-1, _840) 0 ]",
    "EXPR [ (-1, _402, _403) (-1, _841) 0 ]",
    "EXPR [ (-1, _401) (-1, _404) (1, _840) (1, _841) 1 ]",
    "EXPR [ (-1, _197) (-1, _405) 1 ]",
    "EXPR [ (-1, _404, _405) (-1, _406) 1 ]",
    "EXPR [ (1, _401) (-1, _407) (-1, _840) (-1, _841) 0 ]",
    "EXPR [ (-1, _404, _405) (-1, _842) 0 ]",
    "EXPR [ (-1, _406, _407) (-1, _843) 0 ]",
    "EXPR [ (-1, _408) (1, _842) (1, _843) 1 ]",
    "EXPR [ (-1, _196, _408) 0 ]",
    "EXPR [ (1, _195, _408) (-1, _408) (-1, _409) 1 ]",
    "EXPR [ (-1, _410) (-1, _842) (-1, _843) 0 ]",
    "EXPR [ (1, _195, _408) (-1, _844) 0 ]",
    "EXPR [ (-1, _409, _410) (-1, _845) 0 ]",
    "EXPR [ (-1, _408) (-1, _411) (1, _844) (1, _845) 1 ]",
    "EXPR [ (-1, _194) (-1, _412) 1 ]",
    "EXPR [ (-1, _411, _412) (-1, _413) 1 ]",
    "EXPR [ (1, _408) (-1, _414) (-1, _844) (-1, _845) 0 ]",
    "EXPR [ (-1, _411, _412) (-1, _846) 0 ]",
    "EXPR [ (-1, _413, _414) (-1, _847) 0 ]",
    "EXPR [ (-1, _415) (1, _846) (1, _847) 1 ]",
    "EXPR [ (-1, _193, _415) 0 ]",
    "EXPR [ (1, _192, _415) (-1, _415) (-1, _416) 1 ]",
    "EXPR [ (-1, _417) (-1, _846) (-1, _847) 0 ]",
    "EXPR [ (1, _192, _415) (-1, _848) 0 ]",
    "EXPR [ (-1, _416, _417) (-1, _849) 0 ]",
    "EXPR [ (-1, _415) (-1, _418) (1, _848) (1, _849) 1 ]",
    "EXPR [ (-1, _191, _418) 0 ]",
    "EXPR [ (-1, _190, _418) 0 ]",
    "EXPR [ (-1, _189, _418) 0 ]",
    "EXPR [ (-1, _188, _418) 0 ]",
    "EXPR [ (-1, _187, _418) 0 ]",
    "EXPR [ (-1, _186, _418) 0 ]",
    "EXPR [ (1, _185, _418) (-1, _418) (-1, _419) 1 ]",
    "EXPR [ (1, _415) (-1, _420) (-1, _848) (-1, _849) 0 ]",
    "EXPR [ (1, _185, _418) (-1, _850) 0 ]",
    "EXPR [ (-1, _419, _420) (-1, _851) 0 ]",
    "EXPR [ (-1, _418) (-1, _421) (1, _850) (1, _851) 1 ]",
    "EXPR [ (-1, _184) (-1, _422) 1 ]",
    "EXPR [ (-1, _421, _422) (-1, _423) 1 ]",
    "EXPR [ (1, _418) (-1, _424) (-1, _850) (-1, _851) 0 ]",
    "EXPR [ (-1, _421, _422) (-1, _852) 0 ]",
    "EXPR [ (-1, _423, _424) (-1, _853) 0 ]",
    "EXPR [ (-1, _425) (1, _852) (1, _853) 1 ]",
    "EXPR [ (-1, _183, _425) 0 ]",
    "EXPR [ (-1, _182, _425) 0 ]",
    "EXPR [ (-1, _181, _425) 0 ]",
    "EXPR [ (-1, _180, _425) 0 ]",
    "EXPR [ (-1, _179, _425) 0 ]",
    "EXPR [ (-1, _178, _425) 0 ]",
    "EXPR [ (1, _177, _425) (-1, _425) (-1, _426) 1 ]",
    "EXPR [ (-1, _427) (-1, _852) (-1, _853) 0 ]",
    "EXPR [ (1, _177, _425) (-1, _854) 0 ]",
    "EXPR [ (-1, _426, _427) (-1, _855) 0 ]",
    "EXPR [ (-1, _425) (-1, _428) (1, _854) (1, _855) 1 ]",
    "EXPR [ (-1, _176, _428) 0 ]",
    "EXPR [ (1, _175, _428) (-1, _428) (-1, _429) 1 ]",
    "EXPR [ (1, _425) (-1, _430) (-1, _854) (-1, _855) 0 ]",
    "EXPR [ (1, _175, _428) (-1, _856) 0 ]",
    "EXPR [ (-1, _429, _430) (-1, _857) 0 ]",
    "EXPR [ (-1, _428) (-1, _431) (1, _856) (1, _857) 1 ]",
    "EXPR [ (-1, _174, _431) 0 ]",
    "EXPR [ (1, _173, _431) (-1, _431) (-1, _432) 1 ]",
    "EXPR [ (1, _428) (-1, _433) (-1, _856) (-1, _857) 0 ]",
    "EXPR [ (1, _173, _431) (-1, _858) 0 ]",
    "EXPR [ (-1, _432, _433) (-1, _859) 0 ]",
    "EXPR [ (-1, _431) (-1, _434) (1, _858) (1, _859) 1 ]",
    "EXPR [ (-1, _172) (-1, _435) 1 ]",
    "EXPR [ (-1, _434, _435) (-1, _436) 1 ]",
    "EXPR [ (1, _431) (-1, _437) (-1, _858) (-1, _859) 0 ]",
    "EXPR [ (-1, _434, _435) (-1, _860) 0 ]",
    "EXPR [ (-1, _436, _437) (-1, _861) 0 ]",
    "EXPR [ (-1, _438) (1, _860) (1, _861) 1 ]",
    "EXPR [ (-1, _171, _438) 0 ]",
    "EXPR [ (-1, _170, _438) 0 ]",
    "EXPR [ (-1, _169, _438) 0 ]",
    "EXPR [ (-1, _168, _438) 0 ]",
    "EXPR [ (1, _167, _438) (-1, _438) (-1, _439) 1 ]",
    "EXPR [ (-1, _440) (-1, _860) (-1, _861) 0 ]",
    "EXPR [ (1, _167, _438) (-1, _862) 0 ]",
    "EXPR [ (-1, _439, _440) (-1, _863) 0 ]",
    "EXPR [ (-1, _438) (-1, _441) (1, _862) (1, _863) 1 ]",
    "EXPR [ (-1, _166, _441) 0 ]",
    "EXPR [ (1, _165, _441) (-1, _441) (-1, _442) 1 ]",
    "EXPR [ (1, _438) (-1, _443) (-1, _862) (-1, _863) 0 ]",
    "EXPR [ (1, _165, _441) (-1, _864) 0 ]",
    "EXPR [ (-1, _442, _443) (-1, _865) 0 ]",
    "EXPR [ (-1, _441) (-1, _444) (1, _864) (1, _865) 1 ]",
    "EXPR [ (-1, _164) (-1, _445) 1 ]",
    "EXPR [ (-1, _444, _445) (-1, _446) 1 ]",
    "EXPR [ (1, _441) (-1, _447) (-1, _864) (-1, _865) 0 ]",
    "EXPR [ (-1, _444, _445) (-1, _866) 0 ]",
    "EXPR [ (-1, _446, _447) (-1, _867) 0 ]",
    "EXPR [ (-1, _448) (1, _866) (1, _867) 1 ]",
    "EXPR [ (-1, _163) (-1, _449) 1 ]",
    "EXPR [ (-1, _448, _449) (-1, _450) 1 ]",
    "EXPR [ (-1, _451) (-1, _866) (-1, _867) 0 ]",
    "EXPR [ (-1, _448, _449) (-1, _868) 0 ]",
    "EXPR [ (-1, _450, _451) (-1, _869) 0 ]",
    "EXPR [ (-1, _452) (1, _868) (1, _869) 1 ]",
    "EXPR [ (-1, _162, _452) 0 ]",
    "EXPR [ (1, _161, _452) (-1, _452) (-1, _453) 1 ]",
    "EXPR [ (-1, _454) (-1, _868) (-1, _869) 0 ]",
    "EXPR [ (1, _161, _452) (-1, _870) 0 ]",
    "EXPR [ (-1, _453, _454) (-1, _871) 0 ]",
    "EXPR [ (-1, _452) (-1, _455) (1, _870) (1, _871) 1 ]",
    "EXPR [ (-1, _160, _455) 0 ]",
    "EXPR [ (-1, _159, _455) 0 ]",
    "EXPR [ (1, _158, _455) (-1, _455) (-1, _456) 1 ]",
    "EXPR [ (1, _452) (-1, _457) (-1, _870) (-1, _871) 0 ]",
    "EXPR [ (1, _158, _455) (-1, _872) 0 ]",
    "EXPR [ (-1, _456, _457) (-1, _873) 0 ]",
    "EXPR [ (-1, _455) (-1, _458) (1, _872) (1, _873) 1 ]",
    "EXPR [ (-1, _157, _458) 0 ]",
    "EXPR [ (1, _156, _458) (-1, _458) (-1, _459) 1 ]",
    "EXPR [ (1, _455) (-1, _460) (-1, _872) (-1, _873) 0 ]",
    "EXPR [ (1, _156, _458) (-1, _874) 0 ]",
    "EXPR [ (-1, _459, _460) (-1, _875) 0 ]",
    "EXPR [ (-1, _458) (-1, _461) (1, _874) (1, _875) 1 ]",
    "EXPR [ (-1, _155, _461) 0 ]",
    "EXPR [ (-1, _154, _461) 0 ]",
    "EXPR [ (-1, _153, _461) 0 ]",
    "EXPR [ (-1, _152, _461) 0 ]",
    "EXPR [ (-1, _151, _461) 0 ]",
    "EXPR [ (1, _150, _461) (-1, _461) (-1, _462) 1 ]",
    "EXPR [ (1, _458) (-1, _463) (-1, _874) (-1, _875) 0 ]",
    "EXPR [ (1, _150, _461) (-1, _876) 0 ]",
    "EXPR [ (-1, _462, _463) (-1, _877) 0 ]",
    "EXPR [ (-1, _461) (-1, _464) (1, _876) (1, _877) 1 ]",
    "EXPR [ (-1, _149) (-1, _465) 1 ]",
    "EXPR [ (-1, _464, _465) (-1, _466) 1 ]",
    "EXPR [ (1, _461) (-1, _467) (-1, _876) (-1, _877) 0 ]",
    "EXPR [ (-1, _464, _465) (-1, _878) 0 ]",
    "EXPR [ (-1, _466, _467) (-1, _879) 0 ]",
    "EXPR [ (-1, _468) (1, _878) (1, _879) 1 ]",
    "EXPR [ (-1, _148, _468) 0 ]",
    "EXPR [ (-1, _147, _468) 0 ]",
    "EXPR [ (1, _146, _468) (-1, _468) (-1, _469) 1 ]",
    "EXPR [ (-1, _470) (-1, _878) (-1, _879) 0 ]",
    "EXPR [ (1, _146, _468) (-1, _880) 0 ]",
    "EXPR [ (-1, _469, _470) (-1, _881) 0 ]",
    "EXPR [ (-1, _468) (-1, _471) (1, _880) (1, _881) 1 ]",
    "EXPR [ (-1, _145) (-1, _472) 1 ]",
    "EXPR [ (-1, _471, _472) (-1, _473) 1 ]",
    "EXPR [ (1, _468) (-1, _474) (-1, _880) (-1, _881) 0 ]",
    "EXPR [ (-1, _471, _472) (-1, _882) 0 ]",
    "EXPR [ (-1, _473, _474) (-1, _883) 0 ]",
    "EXPR [ (-1, _475) (1, _882) (1, _883) 1 ]",
    "EXPR [ (-1, _144) (-1, _476) 1 ]",
    "EXPR [ (-1, _475, _476) (-1, _477) 1 ]",
    "EXPR [ (-1, _478) (-1, _882) (-1, _883) 0 ]",
    "EXPR [ (-1, _475, _476) (-1, _884) 0 ]",
    "EXPR [ (-1, _477, _478) (-1, _885) 0 ]",
    "EXPR [ (-1, _479) (1, _884) (1, _885) 1 ]",
    "EXPR [ (-1, _143) (-1, _480) 1 ]",
    "EXPR [ (-1, _479, _480) (-1, _481) 1 ]",
    "EXPR [ (-1, _482) (-1, _884) (-1, _885) 0 ]",
    "EXPR [ (-1, _479, _480) (-1, _886) 0 ]",
    "EXPR [ (-1, _481, _482) (-1, _887) 0 ]",
    "EXPR [ (-1, _483) (1, _886) (1, _887) 1 ]",
    "EXPR [ (-1, _142) (-1, _484) 1 ]",
    "EXPR [ (-1, _483, _484) (-1, _485) 1 ]",
    "EXPR [ (-1, _486) (-1, _886) (-1, _887) 0 ]",
    "EXPR [ (-1, _483, _484) (-1, _888) 0 ]",
    "EXPR [ (-1, _485, _486) (-1, _889) 0 ]",
    "EXPR [ (-1, _487) (1, _888) (1, _889) 1 ]",
    "EXPR [ (-1, _141, _487) 0 ]",
    "EXPR [ (1, _140, _487) (-1, _487) (-1, _488) 1 ]",
    "EXPR [ (-1, _489) (-1, _888) (-1, _889) 0 ]",
    "EXPR [ (1, _140, _487) (-1, _890) 0 ]",
    "EXPR [ (-1, _488, _489) (-1, _891) 0 ]",
    "EXPR [ (-1, _487) (-1, _490) (1, _890) (1, _891) 1 ]",
    "EXPR [ (-1, _139, _490) 0 ]",
    "EXPR [ (-1, _138, _490) 0 ]",
    "EXPR [ (-1, _137, _490) 0 ]",
    "EXPR [ (-1, _136, _490) 0 ]",
    "EXPR [ (1, _135, _490) (-1, _490) (-1, _491) 1 ]",
    "EXPR [ (1, _487) (-1, _492) (-1, _890) (-1, _891) 0 ]",
    "EXPR [ (1, _135, _490) (-1, _892) 0 ]",
    "EXPR [ (-1, _491, _492) (-1, _893) 0 ]",
    "EXPR [ (-1, _490) (-1, _493) (1, _892) (1, _893) 1 ]",
    "EXPR [ (-1, _134, _493) 0 ]",
    "EXPR [ (-1, _133, _493) 0 ]",
    "EXPR [ (1, _132, _493) (-1, _493) (-1, _494) 1 ]",
    "EXPR [ (1, _490) (-1, _495) (-1, _892) (-1, _893) 0 ]",
    "EXPR [ (1, _132, _493) (-1, _894) 0 ]",
    "EXPR [ (-1, _494, _495) (-1, _895) 0 ]",
    "EXPR [ (-1, _493) (-1, _496) (1, _894) (1, _895) 1 ]",
    "EXPR [ (-1, _131, _496) 0 ]",
    "EXPR [ (-1, _130, _496) 0 ]",
    "EXPR [ (-1, _129, _496) 0 ]",
    "EXPR [ (-1, _128, _496) 0 ]",
    "EXPR [ (1, _127, _496) (-1, _496) (-1, _497) 1 ]",
    "EXPR [ (1, _493) (-1, _498) (-1, _894) (-1, _895) 0 ]",
    "EXPR [ (1, _127, _496) (-1, _896) 0 ]",
    "EXPR [ (-1, _497, _498) (-1, _897) 0 ]",
    "EXPR [ (-1, _496) (-1, _499) (1, _896) (1, _897) 1 ]",
    "EXPR [ (-1, _126) (-1, _500) 1 ]",
    "EXPR [ (-1, _499, _500) (-1, _501) 1 ]",
    "EXPR [ (1, _496) (-1, _502) (-1, _896) (-1, _897) 0 ]",
    "EXPR [ (-1, _499, _500) (-1, _898) 0 ]",
    "EXPR [ (-1, _501, _502) (-1, _899) 0 ]",
    "EXPR [ (-1, _503) (1, _898) (1, _899) 1 ]",
    "EXPR [ (-1, _125) (-1, _504) 1 ]",
    "EXPR [ (-1, _503, _504) (-1, _505) 1 ]",
    "EXPR [ (-1, _506) (-1, _898) (-1, _899) 0 ]",
    "EXPR [ (-1, _503, _504) (-1, _900) 0 ]",
    "EXPR [ (-1, _505, _506) (-1, _901) 0 ]",
    "EXPR [ (-1, _507) (1, _900) (1, _901) 1 ]",
    "EXPR [ (-1, _124) (-1, _508) 1 ]",
    "EXPR [ (-1, _507, _508) (-1, _509) 1 ]",
    "EXPR [ (-1, _510) (-1, _900) (-1, _901) 0 ]",
    "EXPR [ (-1, _507, _508) (-1, _902) 0 ]",
    "EXPR [ (-1, _509, _510) (-1, _903) 0 ]",
    "EXPR [ (-1, _511) (1, _902) (1, _903) 1 ]",
    "EXPR [ (-1, _123, _511) 0 ]",
    "EXPR [ (-1, _122, _511) 0 ]",
    "EXPR [ (1, _121, _511) (-1, _511) (-1, _512) 1 ]",
    "EXPR [ (-1, _513) (-1, _902) (-1, _903) 0 ]",
    "EXPR [ (1, _121, _511) (-1, _904) 0 ]",
    "EXPR [ (-1, _512, _513) (-1, _905) 0 ]",
    "EXPR [ (-1, _511) (-1, _514) (1, _904) (1, _905) 1 ]",
    "EXPR [ (-1, _120) (-1, _515) 1 ]",
    "EXPR [ (-1, _514, _515) (-1, _516) 1 ]",
    "EXPR [ (1, _511) (-1, _517) (-1, _904) (-1, _905) 0 ]",
    "EXPR [ (-1, _514, _515) (-1, _906) 0 ]",
    "EXPR [ (-1, _516, _517) (-1, _907) 0 ]",
    "EXPR [ (-1, _518) (1, _906) (1, _907) 1 ]",
    "EXPR [ (-1, _119, _518) 0 ]",
    "EXPR [ (1, _118, _518) (-1, _518) (-1, _519) 1 ]",
    "EXPR [ (-1, _520) (-1, _906) (-1, _907) 0 ]",
    "EXPR [ (1, _118, _518) (-1, _908) 0 ]",
    "EXPR [ (-1, _519, _520) (-1, _909) 0 ]",
    "EXPR [ (-1, _518) (-1, _521) (1, _908) (1, _909) 1 ]",
    "EXPR [ (-1, _117) (-1, _522) 1 ]",
    "EXPR [ (-1, _521, _522) (-1, _523) 1 ]",
    "EXPR [ (1, _518) (-1, _524) (-1, _908) (-1, _909) 0 ]",
    "EXPR [ (-1, _521, _522) (-1, _910) 0 ]",
    "EXPR [ (-1, _523, _524) (-1, _911) 0 ]",
    "EXPR [ (-1, _525) (1, _910) (1, _911) 1 ]",
    "EXPR [ (-1, _116) (-1, _526) 1 ]",
    "EXPR [ (-1, _525, _526) (-1, _527) 1 ]",
    "EXPR [ (-1, _528) (-1, _910) (-1, _911) 0 ]",
    "EXPR [ (-1, _525, _526) (-1, _912) 0 ]",
    "EXPR [ (-1, _527, _528) (-1, _913) 0 ]",
    "EXPR [ (-1, _529) (1, _912) (1, _913) 1 ]",
    "EXPR [ (-1, _115, _529) 0 ]",
    "EXPR [ (-1, _114, _529) 0 ]",
    "EXPR [ (1, _113, _529) (-1, _529) (-1, _530) 1 ]",
    "EXPR [ (-1, _531) (-1, _912) (-1, _913) 0 ]",
    "EXPR [ (1, _113, _529) (-1, _914) 0 ]",
    "EXPR [ (-1, _530, _531) (-1, _915) 0 ]",
    "EXPR [ (-1, _529) (-1, _532) (1, _914) (1, _915) 1 ]",
    "EXPR [ (-1, _112, _532) 0 ]",
    "EXPR [ (1, _111, _532) (-1, _532) (-1, _533) 1 ]",
    "EXPR [ (1, _529) (-1, _534) (-1, _914) (-1, _915) 0 ]",
    "EXPR [ (1, _111, _532) (-1, _916) 0 ]",
    "EXPR [ (-1, _533, _534) (-1, _917) 0 ]",
    "EXPR [ (-1, _532) (-1, _535) (1, _916) (1, _917) 1 ]",
    "EXPR [ (-1, _110) (-1, _536) 1 ]",
    "EXPR [ (-1, _535, _536) (-1, _537) 1 ]",
    "EXPR [ (1, _532) (-1, _538) (-1, _916) (-1, _917) 0 ]",
    "EXPR [ (-1, _535, _536) (-1, _918) 0 ]",
    "EXPR [ (-1, _537, _538) (-1, _919) 0 ]",
    "EXPR [ (-1, _539) (1, _918) (1, _919) 1 ]",
    "EXPR [ (-1, _109) (-1, _540) 1 ]",
    "EXPR [ (-1, _539, _540) (-1, _541) 1 ]",
    "EXPR [ (-1, _542) (-1, _918) (-1, _919) 0 ]",
    "EXPR [ (-1, _539, _540) (-1, _920) 0 ]",
    "EXPR [ (-1, _541, _542) (-1, _921) 0 ]",
    "EXPR [ (-1, _543) (1, _920) (1, _921) 1 ]",
    "EXPR [ (-1, _108, _543) 0 ]",
    "EXPR [ (-1, _107, _543) 0 ]",
    "EXPR [ (-1, _106, _543) 0 ]",
    "EXPR [ (-1, _105, _543) 0 ]",
    "EXPR [ (1, _104, _543) (-1, _543) (-1, _544) 1 ]",
    "EXPR [ (-1, _545) (-1, _920) (-1, _921) 0 ]",
    "EXPR [ (1, _104, _543) (-1, _922) 0 ]",
    "EXPR [ (-1, _544, _545) (-1, _923) 0 ]",
    "EXPR [ (-1, _543) (-1, _546) (1, _922) (1, _923) 1 ]",
    "EXPR [ (-1, _103, _546) 0 ]",
    "EXPR [ (-1, _102, _546) 0 ]",
    "EXPR [ (1, _101, _546) (-1, _546) (-1, _547) 1 ]",
    "EXPR [ (1, _543) (-1, _548) (-1, _922) (-1, _923) 0 ]",
    "EXPR [ (1, _101, _546) (-1, _924) 0 ]",
    "EXPR [ (-1, _547, _548) (-1, _925) 0 ]",
    "EXPR [ (-1, _546) (-1, _549) (1, _924) (1, _925) 1 ]",
    "EXPR [ (-1, _100, _549) 0 ]",
    "EXPR [ (-1, _99, _549) 0 ]",
    "EXPR [ (-1, _98, _549) 0 ]",
    "EXPR [ (1, _97, _549) (-1, _549) (-1, _550) 1 ]",
    "EXPR [ (1, _546) (-1, _551) (-1, _924) (-1, _925) 0 ]",
    "EXPR [ (1, _97, _549) (-1, _926) 0 ]",
    "EXPR [ (-1, _550, _551) (-1, _927) 0 ]",
    "EXPR [ (-1, _549) (-1, _552) (1, _926) (1, _927) 1 ]",
    "EXPR [ (-1, _96, _552) 0 ]",
    "EXPR [ (1, _95, _552) (-1, _552) (-1, _553) 1 ]",
    "EXPR [ (1, _549) (-1, _554) (-1, _926) (-1, _927) 0 ]",
    "EXPR [ (1, _95, _552) (-1, _928) 0 ]",
    "EXPR [ (-1, _553, _554) (-1, _929) 0 ]",
    "EXPR [ (-1, _552) (-1, _555) (1, _928) (1, _929) 1 ]",
    "EXPR [ (-1, _94, _555) 0 ]",
    "EXPR [ (-1, _93, _555) 0 ]",
    "EXPR [ (-1, _92, _555) 0 ]",
    "EXPR [ (-1, _91, _555) 0 ]",
    "EXPR [ (1, _90, _555) (-1, _555) (-1, _556) 1 ]",
    "EXPR [ (1, _552) (-1, _557) (-1, _928) (-1, _929) 0 ]",
    "EXPR [ (1, _90, _555) (-1, _930) 0 ]",
    "EXPR [ (-1, _556, _557) (-1, _931) 0 ]",
    "EXPR [ (-1, _555) (-1, _558) (1, _930) (1, _931) 1 ]",
    "EXPR [ (-1, _89) (-1, _559) 1 ]",
    "EXPR [ (-1, _558, _559) (-1, _560) 1 ]",
    "EXPR [ (1, _555) (-1, _561) (-1, _930) (-1, _931) 0 ]",
    "EXPR [ (-1, _558, _559) (-1, _932) 0 ]",
    "EXPR [ (-1, _560, _561) (-1, _933) 0 ]",
    "EXPR [ (-1, _562) (1, _932) (1, _933) 1 ]",
    "EXPR [ (-1, _88) (-1, _563) 1 ]",
    "EXPR [ (-1, _562, _563) (-1, _564) 1 ]",
    "EXPR [ (-1, _565) (-1, _932) (-1, _933) 0 ]",
    "EXPR [ (-1, _562, _563) (-1, _934) 0 ]",
    "EXPR [ (-1, _564, _565) (-1, _935) 0 ]",
    "EXPR [ (-1, _566) (1, _934) (1, _935) 1 ]",
    "EXPR [ (-1, _87) (-1, _567) 1 ]",
    "EXPR [ (-1, _566, _567) (-1, _568) 1 ]",
    "EXPR [ (-1, _569) (-1, _934) (-1, _935) 0 ]",
    "EXPR [ (-1, _566, _567) (-1, _936) 0 ]",
    "EXPR [ (-1, _568, _569) (-1, _937) 0 ]",
    "EXPR [ (-1, _570) (1, _936) (1, _937) 1 ]",
    "EXPR [ (-1, _86) (-1, _571) 1 ]",
    "EXPR [ (-1, _570, _571) (-1, _572) 1 ]",
    "EXPR [ (-1, _573) (-1, _936) (-1, _937) 0 ]",
    "EXPR [ (-1, _570, _571) (-1, _938) 0 ]",
    "EXPR [ (-1, _572, _573) (-1, _939) 0 ]",
    "EXPR [ (-1, _574) (1, _938) (1, _939) 1 ]",
    "EXPR [ (-1, _85, _574) 0 ]",
    "EXPR [ (-1, _84, _574) 0 ]",
    "EXPR [ (-1, _83, _574) 0 ]",
    "EXPR [ (-1, _82, _574) 0 ]",
    "EXPR [ (1, _81, _574) (-1, _574) (-1, _575) 1 ]",
    "EXPR [ (-1, _576) (-1, _938) (-1, _939) 0 ]",
    "EXPR [ (1, _81, _574) (-1, _940) 0 ]",
    "EXPR [ (-1, _575, _576) (-1, _941) 0 ]",
    "EXPR [ (-1, _574) (-1, _577) (1, _940) (1, _941) 1 ]",
    "EXPR [ (-1, _80) (-1, _578) 1 ]",
    "EXPR [ (-1, _577, _578) (-1, _579) 1 ]",
    "EXPR [ (1, _574) (-1, _580) (-1, _940) (-1, _941) 0 ]",
    "EXPR [ (-1, _577, _578) (-1, _942) 0 ]",
    "EXPR [ (-1, _579, _580) (-1, _943) 0 ]",
    "EXPR [ (-1, _581) (1, _942) (1, _943) 1 ]",
    "EXPR [ (-1, _79) (-1, _582) 1 ]",
    "EXPR [ (-1, _581, _582) (-1, _583) 1 ]",
    "EXPR [ (-1, _584) (-1, _942) (-1, _943) 0 ]",
    "EXPR [ (-1, _581, _582) (-1, _944) 0 ]",
    "EXPR [ (-1, _583, _584) (-1, _945) 0 ]",
    "EXPR [ (-1, _585) (1, _944) (1, _945) 1 ]",
    "EXPR [ (-1, _78) (-1, _586) 1 ]",
    "EXPR [ (-1, _585, _586) (-1, _587) 1 ]",
    "EXPR [ (-1, _588) (-1, _944) (-1, _945) 0 ]",
    "EXPR [ (-1, _585, _586) (-1, _946) 0 ]",
    "EXPR [ (-1, _587, _588) (-1, _947) 0 ]",
    "EXPR [ (-1, _589) (1, _946) (1, _947) 1 ]",
    "EXPR [ (-1, _77) (-1, _590) 1 ]",
    "EXPR [ (-1, _589, _590) (-1, _591) 1 ]",
    "EXPR [ (-1, _592) (-1, _946) (-1, _947) 0 ]",
    "EXPR [ (-1, _589, _590) (-1, _948) 0 ]",
    "EXPR [ (-1, _591, _592) (-1, _949) 0 ]",
    "EXPR [ (-1, _593) (1, _948) (1, _949) 1 ]",
    "EXPR [ (-1, _76, _593) 0 ]",
    "EXPR [ (1, _75, _593) (-1, _593) (-1, _594) 1 ]",
    "EXPR [ (-1, _595) (-1, _948) (-1, _949) 0 ]",
    "EXPR [ (1, _75, _593) (-1, _950) 0 ]",
    "EXPR [ (-1, _594, _595) (-1, _951) 0 ]",
    "EXPR [ (-1, _593) (-1, _596) (1, _950) (1, _951) 1 ]",
    "EXPR [ (-1, _74, _596) 0 ]",
    "EXPR [ (1, _73, _596) (-1, _596) (-1, _597) 1 ]",
    "EXPR [ (1, _593) (-1, _598) (-1, _950) (-1, _951) 0 ]",
    "EXPR [ (1, _73, _596) (-1, _952) 0 ]",
    "EXPR [ (-1, _597, _598) (-1, _953) 0 ]",
    "EXPR [ (-1, _596) (-1, _599) (1, _952) (1, _953) 1 ]",
    "EXPR [ (-1, _72) (-1, _600) 1 ]",
    "EXPR [ (-1, _599, _600) (-1, _601) 1 ]",
    "EXPR [ (1, _596) (-1, _602) (-1, _952) (-1, _953) 0 ]",
    "EXPR [ (-1, _599, _600) (-1, _954) 0 ]",
    "EXPR [ (-1, _601, _602) (-1, _955) 0 ]",
    "EXPR [ (-1, _603) (1, _954) (1, _955) 1 ]",
    "EXPR [ (-1, _71, _603) 0 ]",
    "EXPR [ (-1, _70, _603) 0 ]",
    "EXPR [ (1, _69, _603) (-1, _603) (-1, _604) 1 ]",
    "EXPR [ (-1, _605) (-1, _954) (-1, _955) 0 ]",
    "EXPR [ (1, _69, _603) (-1, _956) 0 ]",
    "EXPR [ (-1, _604, _605) (-1, _957) 0 ]",
    "EXPR [ (-1, _603) (-1, _606) (1, _956) (1, _957) 1 ]",
    "EXPR [ (-1, _68, _606) 0 ]",
    "EXPR [ (-1, _67, _606) 0 ]",
    "EXPR [ (1, _66, _606) (-1, _606) (-1, _607) 1 ]",
    "EXPR [ (1, _603) (-1, _608) (-1, _956) (-1, _957) 0 ]",
    "EXPR [ (1, _66, _606) (-1, _958) 0 ]",
    "EXPR [ (-1, _607, _608) (-1, _959) 0 ]",
    "EXPR [ (-1, _606) (-1, _609) (1, _958) (1, _959) 1 ]",
    "EXPR [ (-1, _65) (-1, _610) 1 ]",
    "EXPR [ (-1, _609, _610) (-1, _611) 1 ]",
    "EXPR [ (1, _606) (-1, _612) (-1, _958) (-1, _959) 0 ]",
    "EXPR [ (-1, _609, _610) (-1, _960) 0 ]",
    "EXPR [ (-1, _611, _612) (-1, _961) 0 ]",
    "EXPR [ (-1, _613) (1, _960) (1, _961) 1 ]",
    "EXPR [ (-1, _64) (-1, _614) 1 ]",
    "EXPR [ (-1, _613, _614) (-1, _615) 1 ]",
    "EXPR [ (-1, _616) (-1, _960) (-1, _961) 0 ]",
    "EXPR [ (-1, _613, _614) (-1, _962) 0 ]",
    "EXPR [ (-1, _615, _616) (-1, _963) 0 ]",
    "EXPR [ (-1, _617) (1, _962) (1, _963) 1 ]",
    "EXPR [ (-1, _63) (-1, _618) 1 ]",
    "EXPR [ (-1, _617, _618) (-1, _619) 1 ]",
    "EXPR [ (-1, _620) (-1, _962) (-1, _963) 0 ]",
    "EXPR [ (-1, _617, _618) (-1, _964) 0 ]",
    "EXPR [ (-1, _619, _620) (-1, _965) 0 ]",
    "EXPR [ (-1, _621) (1, _964) (1, _965) 1 ]",
    "EXPR [ (-1, _62) (-1, _622) 1 ]",
    "EXPR [ (-1, _621, _622) (-1, _623) 1 ]",
    "EXPR [ (-1, _624) (-1, _964) (-1, _965) 0 ]",
    "EXPR [ (-1, _621, _622) (-1, _966) 0 ]",
    "EXPR [ (-1, _623, _624) (-1, _967) 0 ]",
    "EXPR [ (-1, _625) (1, _966) (1, _967) 1 ]",
    "EXPR [ (-1, _61) (-1, _626) 1 ]",
    "EXPR [ (-1, _625, _626) (-1, _627) 1 ]",
    "EXPR [ (-1, _628) (-1, _966) (-1, _967) 0 ]",
    "EXPR [ (-1, _625, _626) (-1, _968) 0 ]",
    "EXPR [ (-1, _627, _628) (-1, _969) 0 ]",
    "EXPR [ (-1, _629) (1, _968) (1, _969) 1 ]",
    "EXPR [ (-1, _60, _629) 0 ]",
    "EXPR [ (-1, _59, _629) 0 ]",
    "EXPR [ (-1, _58, _629) 0 ]",
    "EXPR [ (-1, _57, _629) 0 ]",
    "EXPR [ (-1, _56, _629) 0 ]",
    "EXPR [ (-1, _55, _629) 0 ]",
    "EXPR [ (-1, _54, _629) 0 ]",
    "EXPR [ (-1, _53, _629) 0 ]",
    "EXPR [ (-1, _52, _629) 0 ]",
    "EXPR [ (-1, _51, _629) 0 ]",
    "EXPR [ (-1, _50, _629) 0 ]",
    "EXPR [ (-1, _49, _629) 0 ]",
    "EXPR [ (-1, _48, _629) 0 ]",
    "EXPR [ (-1, _47, _629) 0 ]",
    "EXPR [ (-1, _46, _629) 0 ]",
    "EXPR [ (-1, _45, _629) 0 ]",
    "EXPR [ (-1, _44, _629) 0 ]",
    "EXPR [ (-1, _43, _629) 0 ]",
    "EXPR [ (-1, _42, _629) 0 ]",
    "EXPR [ (-1, _41, _629) 0 ]",
    "EXPR [ (-1, _40, _629) 0 ]",
    "EXPR [ (-1, _39, _629) 0 ]",
    "EXPR [ (-1, _38, _629) 0 ]",
    "EXPR [ (-1, _37, _629) 0 ]",
    "EXPR [ (-1, _36, _629) 0 ]",
    "EXPR [ (-1, _35, _629) 0 ]",
    "EXPR [ (-1, _34, _629) 0 ]",
    "EXPR [ (1, _33, _629) (-1, _629) (-1, _630) 1 ]",
    "EXPR [ (-1, _631) (-1, _968) (-1, _969) 0 ]",
    "EXPR [ (-1, _33, _629) (1, _630, _631) (1, _629) -1 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "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",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "fn main(x: Field, a: Field) {\n    let y: Field = 2040124;\n    let be_byte_array: [u8; 31] = y.to_be_bytes();\n    let le_byte_array: [u8; 31] = x.to_le_bytes();\n\n    assert(le_byte_array[0] == 60);\n    assert(le_byte_array[0] == be_byte_array[30]);\n    assert(le_byte_array[1] == be_byte_array[29]);\n    assert(le_byte_array[2] == be_byte_array[28]);\n\n    let z = 0 - 1;\n    let p_bytes = std::field::modulus_le_bytes();\n    let z_bytes: [u8; 32] = z.to_le_bytes();\n    assert(p_bytes[10] == z_bytes[10]);\n    assert(p_bytes[0] == z_bytes[0] as u8 + 1 as u8);\n\n    let p_bits = std::field::modulus_le_bits();\n    let z_bits: [u1; 254] = z.to_le_bits();\n    assert(z_bits[0] == 0);\n    assert(p_bits[100] == z_bits[100]);\n\n    let _: [u1; 254] = a.to_le_bits();\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_to_radix"
  ]
}
