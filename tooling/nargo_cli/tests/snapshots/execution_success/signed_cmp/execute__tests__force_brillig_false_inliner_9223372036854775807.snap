---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "minus_one",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _30",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BLACKBOX::RANGE [(_0, 8)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(1)), Simple(Witness(2))]",
    "BLACKBOX::RANGE [(_1, 1)] []",
    "BLACKBOX::RANGE [(_2, 7)] []",
    "EXPR [ (1, _0) (-128, _1) (-1, _2) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(3)), Simple(Witness(4))]",
    "BLACKBOX::RANGE [(_3, 1)] []",
    "BLACKBOX::RANGE [(_4, 9)] []",
    "EXPR [ (1, _0) (-512, _3) (-1, _4) 512 ]",
    "EXPR [ (2, _1, _3) (-1, _1) (-1, _3) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(0))], q_c: 256 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(5)), Simple(Witness(6))]",
    "BLACKBOX::RANGE [(_6, 8)] []",
    "EXPR [ (-1, _0) (-256, _5) (-1, _6) 256 ]",
    "EXPR [ (-1, _5) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(127, Witness(0))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(7)), Simple(Witness(8))]",
    "BLACKBOX::RANGE [(_7, 8)] []",
    "BLACKBOX::RANGE [(_8, 8)] []",
    "EXPR [ (127, _0) (-256, _7) (-1, _8) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(9)), Simple(Witness(10))]",
    "BLACKBOX::RANGE [(_9, 1)] []",
    "BLACKBOX::RANGE [(_10, 8)] []",
    "EXPR [ (1, _0) (-256, _9) (-1, _10) 128 ]",
    "EXPR [ (-254, _0, _9) (127, _0) (32512, _9) (-1, _11) 0 ]",
    "BLACKBOX::RANGE [(_11, 8)] []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(-1, Witness(9)), (1, Witness(11))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(12)), Simple(Witness(13))]",
    "BLACKBOX::RANGE [(_13, 8)] []",
    "EXPR [ (-1, _9) (1, _11) (-256, _12) (-1, _13) 128 ]",
    "EXPR [ (-1, _12) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 511 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(14)), Simple(Witness(15))]",
    "BLACKBOX::RANGE [(_14, 2)] []",
    "BLACKBOX::RANGE [(_15, 8)] []",
    "EXPR [ (1, _8) (-256, _14) (-1, _15) 511 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(16)), Simple(Witness(17))]",
    "BLACKBOX::RANGE [(_16, 1)] []",
    "BLACKBOX::RANGE [(_17, 8)] []",
    "EXPR [ (1, _8) (-256, _16) (-1, _17) 128 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 128 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 256 })], outputs: [Simple(Witness(18)), Simple(Witness(19))]",
    "BLACKBOX::RANGE [(_18, 1)] []",
    "BLACKBOX::RANGE [(_19, 8)] []",
    "EXPR [ (1, _15) (-256, _18) (-1, _19) 128 ]",
    "EXPR [ (1, _16) (-1, _18) (-1, _20) 0 ]",
    "BRILLIG CALL func 1: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(20))], q_c: 0 })], outputs: [Simple(Witness(21))]",
    "EXPR [ (1, _20, _21) (1, _22) -1 ]",
    "EXPR [ (1, _20, _22) 0 ]",
    "EXPR [ (1, _16, _22) (-1, _16) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(23)), Simple(Witness(24))]",
    "BLACKBOX::RANGE [(_23, 1)] []",
    "BLACKBOX::RANGE [(_24, 7)] []",
    "EXPR [ (1, _15) (-128, _23) (-1, _24) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 512 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(25)), Simple(Witness(26))]",
    "BLACKBOX::RANGE [(_25, 1)] []",
    "BLACKBOX::RANGE [(_26, 9)] []",
    "EXPR [ (1, _15) (-512, _25) (-1, _26) 512 ]",
    "EXPR [ (2, _23, _25) (-1, _23) (-1, _25) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 0 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 128 })], outputs: [Simple(Witness(27)), Simple(Witness(28))]",
    "BLACKBOX::RANGE [(_27, 1)] []",
    "BLACKBOX::RANGE [(_28, 7)] []",
    "EXPR [ (1, _15) (-128, _27) (-1, _28) 0 ]",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(15))], q_c: 385 }), Single(Expression { mul_terms: [], linear_combinations: [], q_c: 512 })], outputs: [Simple(Witness(29)), Simple(Witness(30))]",
    "BLACKBOX::RANGE [(_29, 1)] []",
    "BLACKBOX::RANGE [(_30, 9)] []",
    "EXPR [ (1, _15) (-512, _29) (-1, _30) 385 ]",
    "EXPR [ (2, _27, _29) (-1, _27) (-1, _29) 0 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(10), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(11), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(10), offset_address: Direct(11) }, BinaryFieldOp { destination: Direct(2), op: IntegerDiv, lhs: Direct(0), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Mul, lhs: Direct(2), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(1), op: Sub, lhs: Direct(0), rhs: Direct(1) }, Mov { destination: Direct(0), source: Direct(2) }, Stop { return_data: HeapVector { pointer: Direct(11), size: Direct(10) } }]",
    "unconstrained func 1",
    "[Const { destination: Direct(21), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(20), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(21), offset_address: Direct(20) }, Const { destination: Direct(2), bit_size: Field, value: 0 }, BinaryFieldOp { destination: Direct(3), op: Equals, lhs: Direct(0), rhs: Direct(2) }, JumpIf { condition: Direct(3), location: 8 }, Const { destination: Direct(1), bit_size: Field, value: 1 }, BinaryFieldOp { destination: Direct(0), op: Div, lhs: Direct(1), rhs: Direct(0) }, Stop { return_data: HeapVector { pointer: Direct(20), size: Direct(21) } }]"
  ],
  "debug_symbols": "pdTNjoIwFAXgd+maBf0HX2UyMRWradIUUmGSifHd53qPzOhiEqOb+wn1HBIonMU+7pbjNpXDeBKbj7PY1ZRzOm7zOIQ5jYXOni+NWA+3c42RTom7dUpNocYyi01Zcm7EV8gL/+k0hcLOodJq24hY9iQVHlKO11+X5i/d/h/V7pY1/W/YPp12/pbu1Ctp/U5amjUubfde3r10fW/XfP/KvVNyvb7Sj/lPOgpDqg97RUi6UCMUT83T8LQ8HU/Ps+PZ85QtPWNCAgU0oAJDWOCABx3oGdUCCRTQAC0KLQotCi2KWuguqZ7RLZBAAQ0MsMABD9Ci0WLQYtBi0GLQYtBiqIX2tXHAgw70jG2BBApoQC20sa0FDnjQgZ5xLZCAWvzl+sRrCrscb6/4YSnD3Rs/f0/ryvpNmOo4xP1S4/WJ8xrtgR8=",
  "file_map": {
    "50": {
      "source": "fn main(minus_one: i8) {\n    assert(minus_one < 0);\n    assert(0 < minus_one as u8);\n    assert(0 > minus_one);\n    let most_negative_number = minus_one * 127 - 1;\n    assert(most_negative_number < 0);\n    assert(127 > most_negative_number);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "directive_integer_quotient",
    "directive_invert"
  ]
}
