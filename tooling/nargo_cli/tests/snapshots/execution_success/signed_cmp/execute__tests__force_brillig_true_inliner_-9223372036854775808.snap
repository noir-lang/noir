---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "minus_one",
        "type": {
          "kind": "integer",
          "sign": "signed",
          "width": 8
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _0",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Single(Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 })], outputs: []",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 1 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32836), size_address: Relative(2), offset_address: Relative(3) }, Cast { destination: Direct(32836), source: Direct(32836), bit_size: Integer(U8) }, Mov { destination: Relative(1), source: Direct(32836) }, Call { location: 13 }, Call { location: 14 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32837 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, Return, Call { location: 88 }, Const { destination: Relative(2), bit_size: Integer(U8), value: 0 }, Const { destination: Relative(6), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U8, lhs: Relative(1), rhs: Relative(6) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U8, lhs: Relative(2), rhs: Relative(6) }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U8, lhs: Relative(4), rhs: Relative(5) }, Const { destination: Relative(4), bit_size: Integer(U1), value: 1 }, JumpIf { condition: Relative(3), location: 24 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U8) }, Const { destination: Relative(5), bit_size: Integer(U8), value: 0 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U8, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(6), location: 30 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(5) } }, Const { destination: Relative(5), bit_size: Integer(U8), value: 127 }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U8, lhs: Relative(1), rhs: Relative(5) }, Cast { destination: Relative(7), source: Relative(6), bit_size: Integer(U16) }, Cast { destination: Relative(8), source: Relative(7), bit_size: Integer(U8) }, Cast { destination: Relative(6), source: Relative(8), bit_size: Integer(U16) }, Const { destination: Relative(7), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U8, lhs: Relative(3), rhs: Relative(7) }, Not { destination: Relative(3), source: Relative(8), bit_size: U1 }, Cast { destination: Relative(9), source: Relative(1), bit_size: Field }, Cast { destination: Relative(1), source: Relative(8), bit_size: Field }, BinaryFieldOp { destination: Relative(8), op: Mul, lhs: Relative(1), rhs: Relative(9) }, Const { destination: Relative(1), bit_size: Field, value: 256 }, BinaryFieldOp { destination: Relative(10), op: Sub, lhs: Relative(1), rhs: Relative(9) }, Cast { destination: Relative(1), source: Relative(3), bit_size: Field }, BinaryFieldOp { destination: Relative(9), op: Mul, lhs: Relative(1), rhs: Relative(10) }, BinaryFieldOp { destination: Relative(1), op: Add, lhs: Relative(8), rhs: Relative(9) }, Const { destination: Relative(8), bit_size: Field, value: 127 }, BinaryFieldOp { destination: Relative(9), op: Mul, lhs: Relative(1), rhs: Relative(8) }, Cast { destination: Relative(1), source: Relative(9), bit_size: Field }, Const { destination: Relative(8), bit_size: Field, value: 255 }, BinaryFieldOp { destination: Relative(10), op: LessThanEquals, lhs: Relative(1), rhs: Relative(8) }, JumpIf { condition: Relative(10), location: 53 }, Call { location: 94 }, Cast { destination: Relative(1), source: Relative(9), bit_size: Integer(U8) }, Cast { destination: Relative(8), source: Relative(3), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U8, lhs: Relative(7), rhs: Relative(8) }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U8, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(8), location: 59 }, Call { location: 97 }, Cast { destination: Relative(1), source: Relative(6), bit_size: Integer(U8) }, Const { destination: Relative(3), bit_size: Integer(U8), value: 1 }, BinaryIntOp { destination: Relative(8), op: Sub, bit_size: U8, lhs: Relative(1), rhs: Relative(3) }, Mov { destination: Relative(1), source: Relative(8) }, Cast { destination: Relative(3), source: Relative(1), bit_size: Integer(U8) }, Cast { destination: Relative(8), source: Relative(6), bit_size: Integer(U8) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U8, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(8), source: Relative(6), bit_size: U1 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U8, lhs: Relative(3), rhs: Relative(7) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(9), rhs: Relative(6) }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(3), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(6), rhs: Relative(8) }, JumpIf { condition: Relative(3), location: 73 }, Call { location: 100 }, Const { destination: Relative(8), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U8, lhs: Relative(1), rhs: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U8, lhs: Relative(2), rhs: Relative(8) }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U8, lhs: Relative(6), rhs: Relative(7) }, JumpIf { condition: Relative(3), location: 80 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Const { destination: Relative(7), bit_size: Integer(U8), value: 128 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U8, lhs: Relative(1), rhs: Relative(7) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U8, lhs: Relative(5), rhs: Relative(7) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U8, lhs: Relative(3), rhs: Relative(6) }, JumpIf { condition: Relative(2), location: 87 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(1) } }, Return, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 93 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]"
  ],
  "debug_symbols": "pdTBisIwEMbxd8m5hyaZSVJfRURqjUshtCW2C4v03Xfaz+7qYWHRS3/WOP+AhNzUOZ6mj2PbXfqr2u1v6pTblNqPY+qbemz7Tr69qXJ5aFY7XSjtgAcBVCumBBoYYAGpnRGkYgUHPAigWrFSIUEDAywgwMABDwKoVggVQoVQIVQIFUKFUCFUCBVChVFhVBgVRoVRYVQYFUaFUWFUnFRY0MAACwgwcMCDAKoVj4pHxaPipeIEAgwc8CCAaiVIxQsaGGABAQZS8fNcqO0sHMcc43IUHg6HHJmhzrEb1a6bUirUZ52m9UfXoe5WxzrLalmo2J1FCV7aFJdPc/E7Xf49at19lqqfYf73tPP36WBembbvTGvaxjWH9+bdS/t73uarV/47o7f9jX2eP8hb3bT56aKYl1Ju61OK99fL1DUPq+PXsK1sF82Q+yaepxyX0sNtI899CEVlD3K9yGHd67IsdGkO87L5Nw==",
  "file_map": {
    "50": {
      "source": "fn main(minus_one: i8) {\n    assert(minus_one < 0);\n    assert(0 < minus_one as u8);\n    assert(0 > minus_one);\n    let most_negative_number = minus_one * 127 - 1;\n    assert(most_negative_number < 0);\n    assert(127 > most_negative_number);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
