---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "verification_key",
        "type": {
          "kind": "array",
          "length": 114,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "proof",
        "type": {
          "kind": "array",
          "length": 93,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "public_inputs",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "public"
      },
      {
        "name": "key_hash",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "proof_b",
        "type": {
          "kind": "array",
          "length": 93,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": [
    "func 0",
    "current witness index : _301",
    "private parameters indices : [_0, _1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31, _32, _33, _34, _35, _36, _37, _38, _39, _40, _41, _42, _43, _44, _45, _46, _47, _48, _49, _50, _51, _52, _53, _54, _55, _56, _57, _58, _59, _60, _61, _62, _63, _64, _65, _66, _67, _68, _69, _70, _71, _72, _73, _74, _75, _76, _77, _78, _79, _80, _81, _82, _83, _84, _85, _86, _87, _88, _89, _90, _91, _92, _93, _94, _95, _96, _97, _98, _99, _100, _101, _102, _103, _104, _105, _106, _107, _108, _109, _110, _111, _112, _113, _114, _115, _116, _117, _118, _119, _120, _121, _122, _123, _124, _125, _126, _127, _128, _129, _130, _131, _132, _133, _134, _135, _136, _137, _138, _139, _140, _141, _142, _143, _144, _145, _146, _147, _148, _149, _150, _151, _152, _153, _154, _155, _156, _157, _158, _159, _160, _161, _162, _163, _164, _165, _166, _167, _168, _169, _170, _171, _172, _173, _174, _175, _176, _177, _178, _179, _180, _181, _182, _183, _184, _185, _186, _187, _188, _189, _190, _191, _192, _193, _194, _195, _196, _197, _198, _199, _200, _201, _202, _203, _204, _205, _206, _208, _209, _210, _211, _212, _213, _214, _215, _216, _217, _218, _219, _220, _221, _222, _223, _224, _225, _226, _227, _228, _229, _230, _231, _232, _233, _234, _235, _236, _237, _238, _239, _240, _241, _242, _243, _244, _245, _246, _247, _248, _249, _250, _251, _252, _253, _254, _255, _256, _257, _258, _259, _260, _261, _262, _263, _264, _265, _266, _267, _268, _269, _270, _271, _272, _273, _274, _275, _276, _277, _278, _279, _280, _281, _282, _283, _284, _285, _286, _287, _288, _289, _290, _291, _292, _293, _294, _295, _296, _297, _298, _299, _300, _301]",
    "public parameters indices : [_207]",
    "return value indices : []",
    "BLACKBOX::RECURSIVE_AGGREGATION [(_0, 254), (_1, 254), (_2, 254), (_3, 254), (_4, 254), (_5, 254), (_6, 254), (_7, 254), (_8, 254), (_9, 254), (_10, 254), (_11, 254), (_12, 254), (_13, 254), (_14, 254), (_15, 254), (_16, 254), (_17, 254), (_18, 254), (_19, 254), (_20, 254), (_21, 254), (_22, 254), (_23, 254), (_24, 254), (_25, 254), (_26, 254), (_27, 254), (_28, 254), (_29, 254), (_30, 254), (_31, 254), (_32, 254), (_33, 254), (_34, 254), (_35, 254), (_36, 254), (_37, 254), (_38, 254), (_39, 254), (_40, 254), (_41, 254), (_42, 254), (_43, 254), (_44, 254), (_45, 254), (_46, 254), (_47, 254), (_48, 254), (_49, 254), (_50, 254), (_51, 254), (_52, 254), (_53, 254), (_54, 254), (_55, 254), (_56, 254), (_57, 254), (_58, 254), (_59, 254), (_60, 254), (_61, 254), (_62, 254), (_63, 254), (_64, 254), (_65, 254), (_66, 254), (_67, 254), (_68, 254), (_69, 254), (_70, 254), (_71, 254), (_72, 254), (_73, 254), (_74, 254), (_75, 254), (_76, 254), (_77, 254), (_78, 254), (_79, 254), (_80, 254), (_81, 254), (_82, 254), (_83, 254), (_84, 254), (_85, 254), (_86, 254), (_87, 254), (_88, 254), (_89, 254), (_90, 254), (_91, 254), (_92, 254), (_93, 254), (_94, 254), (_95, 254), (_96, 254), (_97, 254), (_98, 254), (_99, 254), (_100, 254), (_101, 254), (_102, 254), (_103, 254), (_104, 254), (_105, 254), (_106, 254), (_107, 254), (_108, 254), (_109, 254), (_110, 254), (_111, 254), (_112, 254), (_113, 254), (_114, 254), (_115, 254), (_116, 254), (_117, 254), (_118, 254), (_119, 254), (_120, 254), (_121, 254), (_122, 254), (_123, 254), (_124, 254), (_125, 254), (_126, 254), (_127, 254), (_128, 254), (_129, 254), (_130, 254), (_131, 254), (_132, 254), (_133, 254), (_134, 254), (_135, 254), (_136, 254), (_137, 254), (_138, 254), (_139, 254), (_140, 254), (_141, 254), (_142, 254), (_143, 254), (_144, 254), (_145, 254), (_146, 254), (_147, 254), (_148, 254), (_149, 254), (_150, 254), (_151, 254), (_152, 254), (_153, 254), (_154, 254), (_155, 254), (_156, 254), (_157, 254), (_158, 254), (_159, 254), (_160, 254), (_161, 254), (_162, 254), (_163, 254), (_164, 254), (_165, 254), (_166, 254), (_167, 254), (_168, 254), (_169, 254), (_170, 254), (_171, 254), (_172, 254), (_173, 254), (_174, 254), (_175, 254), (_176, 254), (_177, 254), (_178, 254), (_179, 254), (_180, 254), (_181, 254), (_182, 254), (_183, 254), (_184, 254), (_185, 254), (_186, 254), (_187, 254), (_188, 254), (_189, 254), (_190, 254), (_191, 254), (_192, 254), (_193, 254), (_194, 254), (_195, 254), (_196, 254), (_197, 254), (_198, 254), (_199, 254), (_200, 254), (_201, 254), (_202, 254), (_203, 254), (_204, 254), (_205, 254), (_206, 254), (_207, 254), (_208, 254)] []",
    "BLACKBOX::RECURSIVE_AGGREGATION [(_0, 254), (_1, 254), (_2, 254), (_3, 254), (_4, 254), (_5, 254), (_6, 254), (_7, 254), (_8, 254), (_9, 254), (_10, 254), (_11, 254), (_12, 254), (_13, 254), (_14, 254), (_15, 254), (_16, 254), (_17, 254), (_18, 254), (_19, 254), (_20, 254), (_21, 254), (_22, 254), (_23, 254), (_24, 254), (_25, 254), (_26, 254), (_27, 254), (_28, 254), (_29, 254), (_30, 254), (_31, 254), (_32, 254), (_33, 254), (_34, 254), (_35, 254), (_36, 254), (_37, 254), (_38, 254), (_39, 254), (_40, 254), (_41, 254), (_42, 254), (_43, 254), (_44, 254), (_45, 254), (_46, 254), (_47, 254), (_48, 254), (_49, 254), (_50, 254), (_51, 254), (_52, 254), (_53, 254), (_54, 254), (_55, 254), (_56, 254), (_57, 254), (_58, 254), (_59, 254), (_60, 254), (_61, 254), (_62, 254), (_63, 254), (_64, 254), (_65, 254), (_66, 254), (_67, 254), (_68, 254), (_69, 254), (_70, 254), (_71, 254), (_72, 254), (_73, 254), (_74, 254), (_75, 254), (_76, 254), (_77, 254), (_78, 254), (_79, 254), (_80, 254), (_81, 254), (_82, 254), (_83, 254), (_84, 254), (_85, 254), (_86, 254), (_87, 254), (_88, 254), (_89, 254), (_90, 254), (_91, 254), (_92, 254), (_93, 254), (_94, 254), (_95, 254), (_96, 254), (_97, 254), (_98, 254), (_99, 254), (_100, 254), (_101, 254), (_102, 254), (_103, 254), (_104, 254), (_105, 254), (_106, 254), (_107, 254), (_108, 254), (_109, 254), (_110, 254), (_111, 254), (_112, 254), (_113, 254), (_209, 254), (_210, 254), (_211, 254), (_212, 254), (_213, 254), (_214, 254), (_215, 254), (_216, 254), (_217, 254), (_218, 254), (_219, 254), (_220, 254), (_221, 254), (_222, 254), (_223, 254), (_224, 254), (_225, 254), (_226, 254), (_227, 254), (_228, 254), (_229, 254), (_230, 254), (_231, 254), (_232, 254), (_233, 254), (_234, 254), (_235, 254), (_236, 254), (_237, 254), (_238, 254), (_239, 254), (_240, 254), (_241, 254), (_242, 254), (_243, 254), (_244, 254), (_245, 254), (_246, 254), (_247, 254), (_248, 254), (_249, 254), (_250, 254), (_251, 254), (_252, 254), (_253, 254), (_254, 254), (_255, 254), (_256, 254), (_257, 254), (_258, 254), (_259, 254), (_260, 254), (_261, 254), (_262, 254), (_263, 254), (_264, 254), (_265, 254), (_266, 254), (_267, 254), (_268, 254), (_269, 254), (_270, 254), (_271, 254), (_272, 254), (_273, 254), (_274, 254), (_275, 254), (_276, 254), (_277, 254), (_278, 254), (_279, 254), (_280, 254), (_281, 254), (_282, 254), (_283, 254), (_284, 254), (_285, 254), (_286, 254), (_287, 254), (_288, 254), (_289, 254), (_290, 254), (_291, 254), (_292, 254), (_293, 254), (_294, 254), (_295, 254), (_296, 254), (_297, 254), (_298, 254), (_299, 254), (_300, 254), (_301, 254), (_207, 254), (_208, 254)] []"
  ],
  "debug_symbols": "nZHBCoMwDIbfJecerE4RX2UMqRqlUNpSW2GI774odupBGDulyd8v+Ulm6LAJQy11b0aonjM0Tiolh1qZVnhpNFXnhUFMa+8QqQQnnSgrHGoPlQ5KMZiECtun0Qq9RS8cqQkD1B1FathLhetrYQed3KP5g+9wkZRfPL/y/J7naV7sDXiWHQbS9FcHBc+jg/Jx5yD7z8GLMtFKd9k6JCQy4FCt4ybhpGgU7vfog25P5/FvG5V4QOtMi11wuDbdNBrzAQ==",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// This circuit aggregates two proofs from `assert_statement`.\nfn main(\n    verification_key: [Field; 114],\n    // This is the proof without public inputs attached.\n    //\n    // This means: the size of this does not change with the number of public inputs.\n    proof: [Field; 93],\n    public_inputs: pub [Field; 1],\n    // This is currently not public. It is fine given that the vk is a part of the circuit definition.\n    // I believe we want to eventually make it public too though.\n    key_hash: Field,\n    proof_b: [Field; 93],\n) {\n    std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    std::verify_proof(verification_key, proof_b, public_inputs, key_hash);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
