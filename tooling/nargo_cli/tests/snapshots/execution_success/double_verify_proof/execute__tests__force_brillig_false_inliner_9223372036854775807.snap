---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "verification_key",
        "type": {
          "kind": "array",
          "length": 114,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "proof",
        "type": {
          "kind": "array",
          "length": 93,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "public_inputs",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "public"
      },
      {
        "name": "key_hash",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "proof_b",
        "type": {
          "kind": "array",
          "length": 93,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "H4sIAAAAAAAA/+3YVXCUZxyF8TchaHDXEFxTd6FQd3eh1N2oG6Xu7kap4+7u7u7u7q7PvLvDcwMXXO/OQH7JTi4yk/zPOV9aiK+ctBDSEz7MkHn4X1N9zutAwmlyupxLzpBzy3nkvHI+Ob9cQM6UC8qF5MJyEbmoXEwuLpeQS8ql5NJyGbmsXE4uL1eQK8qV5Cy5spwtV5GrytXk6nINuaZcS64t15HryvXk+nKOfIJ8onySfLJ8inyqfJp8unyGfKZ8lny2fI58rnyefL7cQL5Abig3ki+UL5Ivli+RL5Uvky+Xr5CvlK+Sr5avka+Vr5Ovl2+Qb5Rvkm+Wb5FvlW+Tb5fvkO+U75Lvlu+RG8v3yk3k++T75QfkB+WH5IflR+RH5cfkx+Un5Cflp+Sn5WfkZ+XnEubnDomvNdX7z8svyC/KL8kvy6/Ir8qvya/Lb8hvys3kt+Tm8tvyO/K78nvy+/IH8ofyR/LH8ifyp/Jn8ufyF/KX8lfy1/I38rfyd/L38g/yj/JP8s/yL/Kv8m/y73IL+Q+5pfyn/Jf8t/yP/K/8n/y/3EpuLbeR28rt5PZyB7mj3EnuLHeRu8rd5O5yD7mn3EvuLfeR+8r95P7yAHmgPEgeLA+Rh8rD5OHyCHmkPEoeLY+Rx8rj5PHyBDkkPk7U1yYlnHwv1feOONX3olN9L7qRnOp70am+F328fW+y3p8iT5WnydPlGfJMeZY8W54jz5XnyfPlBfJCeZG8WF4iL5WXycvlFfJKeZW8Wl4jr5XXyevlDfJGeZO8Wd4ib5W3ydvlHfJOeZe8W94j75X3yfvlA/JBmf+STpPT5VxyhpxbziPnlfPJ+eUCcqZcUC4kF5aLyEXlYnJxuYRcUi4ll5bLyGXlcnJ5uYJcUa4kZ8mV5Wy5ilxVriZXl2vINeVacm25jlxXrifXl3PkxK/KMfteRsI5yW9I/i6F2Ot4nx5Hf6O30dfoafQzehl9jB5G/6J30bfoWfQrehV9ih5Ff6I30ZfoSfQjehF9iB6UFWLvyQ6x59Bv6DX0GXoM/YXeQl+hp9BP6CX0EXoI/YPeQd+gZ9Av6BX0CXoE/YHeQF+gJ9AP6AX0AXpAgxBzv2GIOU++k+vkOTlOfpPb5DU5TT6Ty+QxOUz+krvkLTlLvpKr5Ck5Sn6Sm+QlOUk+kovkIXnQOMTcaxJizpFv5Bp5Ro6RX+QWeUVOkU/kEnlEDpE/5A55Q87Q4Xl+wHMDnhfwnIDnAzwX4HkAzwHY/+x+9n6zEPd98xD3PDue/c5uZ6+z09nn7HL2ODuc/c3uZm+zs9nX7Gr2NDua/cxuZi+zk9nH7GL2MDuY/cvuZe+2CHHftgxxz7Jj2a/sVvYqO5V9yi5lj7JD2Z/sTvYmO5N9ya5kT7Ij2Y/sRvYiO5F9yC5kD7ID2X/sPvbegBD33aAQ9xw7jv3GbmOvsdPYZ+wy9hg7jP3F7mJvsbP42yLPyXHym9wmr8lp8plcJo/JYfKX3CVvF4SYr4tCzFNylPwkN8lLcpJ8JBfJQ3KQ/CP3yDtyjnwj18gzcoz8IrfIK3KKfCKXyCNyiPwhd5J5Q77wh0+ekCPkB7lBXpAT5AO5QB6QA9x/7j73njvPfeeuc8+549xv7jb3mjvNfeYuc4+5w9xf7i73ljvLfeWuck+5o9xP7ib3kjvJfeQucg+5g9w/7h53K3m6Joajvw4B+3TZ4uAYAAA=",
  "debug_symbols": "nZHBCoMwDIbfJecerE4RX2UMqRqlUNpSW2GI774odupBGDulyd8v+Ulm6LAJQy11b0aonjM0Tiolh1qZVnhpNFXnhUFMa+8QqQQnnSgrHGoPlQ5KMZiECtun0Qq9RS8cqQkD1B1FathLhetrYQed3KP5g+9wkZRfPL/y/J7naV7sDXiWHQbS9FcHBc+jg/Jx5yD7z8GLMtFKd9k6JCQy4FCt4ybhpGgU7vfog25P5/FvG5V4QOtMi11wuDbdNBrzAQ==",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time.\n// The message can be a string, a format string, or any value, as long as it is known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32, T>(predicate: bool, message: T) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// This circuit aggregates two proofs from `assert_statement`.\nfn main(\n    verification_key: [Field; 114],\n    // This is the proof without public inputs attached.\n    //\n    // This means: the size of this does not change with the number of public inputs.\n    proof: [Field; 93],\n    public_inputs: pub [Field; 1],\n    // This is currently not public. It is fine given that the vk is a part of the circuit definition.\n    // I believe we want to eventually make it public too though.\n    key_hash: Field,\n    proof_b: [Field; 93],\n) {\n    std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    std::verify_proof(verification_key, proof_b, public_inputs, key_hash);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
