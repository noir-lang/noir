---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "verification_key",
        "type": {
          "kind": "array",
          "length": 114,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "proof",
        "type": {
          "kind": "array",
          "length": 93,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "public_inputs",
        "type": {
          "kind": "array",
          "length": 1,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "public"
      },
      {
        "name": "key_hash",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      },
      {
        "name": "proof_b",
        "type": {
          "kind": "array",
          "length": 93,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "ZY5BCoMwEEXvMussEm2j8SoiEnWUQEgkxkKR3L2TIq20m4H3+cN/B0w47Etv3Ow3aNoDrB91NN4RHYnBEIy1ZumvMfB8avXub6t2GbeoQ4TmfhMM0E3QSF7T/2wsUsoT+6uK4i7PrihL/ikXReoS0UMHoweLp8m8u/EiFp8r/jiuwY847QGz7Ve0JE/JWcU7BoKSVgmmZAaRoWJK0R5tvgA=",
  "file_map": {
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "50": {
      "source": "// This circuit aggregates two proofs from `assert_statement`.\nfn main(\n    verification_key: [Field; 114],\n    // This is the proof without public inputs attached.\n    //\n    // This means: the size of this does not change with the number of public inputs.\n    proof: [Field; 93],\n    public_inputs: pub [Field; 1],\n    // This is currently not public. It is fine given that the vk is a part of the circuit definition.\n    // I believe we want to eventually make it public too though.\n    key_hash: Field,\n    proof_b: [Field; 93],\n) {\n    std::verify_proof(verification_key, proof, public_inputs, key_hash);\n\n    std::verify_proof(verification_key, proof_b, public_inputs, key_hash);\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
