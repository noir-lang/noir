---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x",
        "type": {
          "kind": "field"
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "5899151545213940874": {
        "error_kind": "string",
        "string": "Field failed to decompose into specified 31 limbs"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : _31",
    "private parameters indices : [_0]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [EXPR [ (1, _0) 0 ], EXPR [ 31 ], EXPR [ 256 ]], outputs: [[_1, _2, _3, _4, _5, _6, _7, _8, _9, _10, _11, _12, _13, _14, _15, _16, _17, _18, _19, _20, _21, _22, _23, _24, _25, _26, _27, _28, _29, _30, _31]]",
    "EXPR [ (1, _0) (-1, _1) (-256, _2) (-65536, _3) (-16777216, _4) (-4294967296, _5) (-1099511627776, _6) (-281474976710656, _7) (-72057594037927936, _8) (-18446744073709551616, _9) (-4722366482869645213696, _10) (-1208925819614629174706176, _11) (-309485009821345068724781056, _12) (-79228162514264337593543950336, _13) (-20282409603651670423947251286016, _14) (-5192296858534827628530496329220096, _15) (-1329227995784915872903807060280344576, _16) (-340282366920938463463374607431768211456, _17) (-87112285931760246646623899502532662132736, _18) (-22300745198530623141535718272648361505980416, _19) (-5708990770823839524233143877797980545530986496, _20) (-1461501637330902918203684832716283019655932542976, _21) (-374144419156711147060143317175368453031918731001856, _22) (-95780971304118053647396689196894323976171195136475136, _23) (-24519928653854221733733552434404946937899825954937634816, _24) (-6277101735386680763835789423207666416102355444464034512896, _25) (-1606938044258990275541962092341162602522202993782792835301376, _26) (-411376139330301510538742295639337626245683966408394965837152256, _27) (-105312291668557186697918027683670432318895095400549111254310977536, _28) (-26959946667150639794667015087019630673637144422540572481103610249216, _29) (-6901746346790563787434755862277025452451108972170386555162524223799296, _30) (-1766847064778384329583297500742918515827483896875618958121606201292619776, _31) 0 ]",
    "EXPR [ (-1, _31) 0 ]",
    "EXPR [ (-1, _30) 0 ]",
    "EXPR [ (-1, _29) 0 ]",
    "EXPR [ (-1, _28) 0 ]",
    "EXPR [ (-1, _27) 0 ]",
    "EXPR [ (-1, _26) 0 ]",
    "EXPR [ (-1, _25) 0 ]",
    "EXPR [ (-1, _24) 0 ]",
    "EXPR [ (-1, _23) 0 ]",
    "EXPR [ (-1, _22) 0 ]",
    "EXPR [ (-1, _21) 0 ]",
    "EXPR [ (-1, _20) 0 ]",
    "EXPR [ (-1, _19) 0 ]",
    "EXPR [ (-1, _18) 0 ]",
    "EXPR [ (-1, _17) 0 ]",
    "EXPR [ (-1, _16) 0 ]",
    "EXPR [ (-1, _15) 0 ]",
    "EXPR [ (-1, _14) 0 ]",
    "EXPR [ (-1, _13) 0 ]",
    "EXPR [ (-1, _12) 0 ]",
    "EXPR [ (-1, _11) 0 ]",
    "EXPR [ (-1, _10) 0 ]",
    "EXPR [ (-1, _9) 0 ]",
    "EXPR [ (-1, _8) 0 ]",
    "EXPR [ (-1, _7) 0 ]",
    "EXPR [ (-1, _6) 0 ]",
    "EXPR [ (-1, _5) 0 ]",
    "EXPR [ (-1, _4) 0 ]",
    "EXPR [ (-1, _3) 31 ]",
    "EXPR [ (-1, _2) 33 ]",
    "EXPR [ (-1, _1) 60 ]",
    "unconstrained func 0",
    "[Const { destination: Direct(5), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(6), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(7), bit_size: Integer(U32), value: 3 }, CalldataCopy { destination_address: Direct(0), size_address: Direct(7), offset_address: Direct(5) }, Cast { destination: Direct(1), source: Direct(1), bit_size: Integer(U32) }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, BinaryIntOp { destination: Direct(7), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(1) }, BinaryFieldOp { destination: Direct(3), op: IntegerDiv, lhs: Direct(0), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Mul, lhs: Direct(3), rhs: Direct(2) }, BinaryFieldOp { destination: Direct(4), op: Sub, lhs: Direct(0), rhs: Direct(4) }, Store { destination_pointer: Direct(9), source: Direct(4) }, BinaryIntOp { destination: Direct(9), op: Add, bit_size: U32, lhs: Direct(9), rhs: Direct(6) }, Mov { destination: Direct(0), source: Direct(3) }, BinaryIntOp { destination: Direct(8), op: LessThan, bit_size: U32, lhs: Direct(9), rhs: Direct(7) }, JumpIf { condition: Direct(8), location: 7 }, Const { destination: Direct(9), bit_size: Integer(U32), value: 10 }, Stop { return_data: HeapVector { pointer: Direct(9), size: Direct(1) } }]"
  ],
  "debug_symbols": "[debug_symbols]",
  "file_map": "[file_map]",
  "expression_width": {
    "Bounded": {
      "width": 4
    }
  }
}
