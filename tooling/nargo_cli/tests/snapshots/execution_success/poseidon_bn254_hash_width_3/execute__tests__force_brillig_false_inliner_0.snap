---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "x1",
        "type": {
          "kind": "array",
          "length": 2,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "y1",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      },
      {
        "name": "x2",
        "type": {
          "kind": "array",
          "length": 4,
          "type": {
            "kind": "field"
          }
        },
        "visibility": "private"
      },
      {
        "name": "y2",
        "type": {
          "kind": "field"
        },
        "visibility": "public"
      }
    ],
    "return_type": null,
    "error_types": {}
  },
  "bytecode": "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",
  "debug_symbols": "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",
  "file_map": {
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "50": {
      "source": "use poseidon;\n\nfn main(x1: [Field; 2], y1: pub Field, x2: [Field; 4], y2: pub Field) {\n    let hash1 = poseidon::poseidon::bn254::hash_2(x1);\n    assert(hash1 == y1);\n\n    let hash2 = poseidon::poseidon::bn254::hash_4(x2);\n    assert(hash2 == y2);\n}\n",
      "path": ""
    },
    "54": {
      "source": "// Instantiations of Poseidon permutation for the prime field of the same order as BN254\nuse crate::poseidon::bn254::consts;\nuse crate::poseidon::permute;\n\n#[field(bn254)]\npub fn x5_2(mut state: [Field; 2]) -> [Field; 2] {\n    state = permute(consts::x5_2_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_3(mut state: [Field; 3]) -> [Field; 3] {\n    state = permute(consts::x5_3_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_4(mut state: [Field; 4]) -> [Field; 4] {\n    state = permute(consts::x5_4_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_5(mut state: [Field; 5]) -> [Field; 5] {\n    state = permute(consts::x5_5_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_6(mut state: [Field; 6]) -> [Field; 6] {\n    state = permute(consts::x5_6_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_7(mut state: [Field; 7]) -> [Field; 7] {\n    state = permute(consts::x5_7_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_8(mut state: [Field; 8]) -> [Field; 8] {\n    state = permute(consts::x5_8_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_9(mut state: [Field; 9]) -> [Field; 9] {\n    state = permute(consts::x5_9_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_10(mut state: [Field; 10]) -> [Field; 10] {\n    state = permute(consts::x5_10_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_11(mut state: [Field; 11]) -> [Field; 11] {\n    state = permute(consts::x5_11_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_12(mut state: [Field; 12]) -> [Field; 12] {\n    state = permute(consts::x5_12_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_13(mut state: [Field; 13]) -> [Field; 13] {\n    state = permute(consts::x5_13_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_14(mut state: [Field; 14]) -> [Field; 14] {\n    state = permute(consts::x5_14_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_15(mut state: [Field; 15]) -> [Field; 15] {\n    state = permute(consts::x5_15_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_16(mut state: [Field; 16]) -> [Field; 16] {\n    state = permute(consts::x5_16_config(), state);\n\n    state\n}\n\n#[field(bn254)]\npub fn x5_17(mut state: [Field; 17]) -> [Field; 17] {\n    state = permute(consts::x5_17_config(), state);\n\n    state\n}\n",
      "path": ""
    },
    "55": {
      "source": "// Instantiations of Poseidon constants, permutations and sponge for prime field of the same order as BN254\npub mod perm;\npub mod consts;\n\nuse crate::poseidon::absorb;\n\n// Variable-length Poseidon-128 sponge as suggested in second bullet point of section 3 of https://eprint.iacr.org/2019/458.pdf\n#[field(bn254)]\npub fn sponge<let N: u32>(msg: [Field; N]) -> Field {\n    absorb(consts::x5_5_config(), [0; 5], 4, 1, msg)[1]\n}\n\n// Various instances of the Poseidon hash function\n// Consistent with Circom's implementation\n#[no_predicates]\npub fn hash_1(input: [Field; 1]) -> Field {\n    let mut state = [0; 2];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_2(state)[0]\n}\n\n#[no_predicates]\npub fn hash_2(input: [Field; 2]) -> Field {\n    let mut state = [0; 3];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_3(state)[0]\n}\n\n#[no_predicates]\npub fn hash_3(input: [Field; 3]) -> Field {\n    let mut state = [0; 4];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_4(state)[0]\n}\n\n#[no_predicates]\npub fn hash_4(input: [Field; 4]) -> Field {\n    let mut state = [0; 5];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_5(state)[0]\n}\n\n#[no_predicates]\npub fn hash_5(input: [Field; 5]) -> Field {\n    let mut state = [0; 6];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_6(state)[0]\n}\n\n#[no_predicates]\npub fn hash_6(input: [Field; 6]) -> Field {\n    let mut state = [0; 7];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_7(state)[0]\n}\n\n#[no_predicates]\npub fn hash_7(input: [Field; 7]) -> Field {\n    let mut state = [0; 8];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_8(state)[0]\n}\n\n#[no_predicates]\npub fn hash_8(input: [Field; 8]) -> Field {\n    let mut state = [0; 9];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_9(state)[0]\n}\n\n#[no_predicates]\npub fn hash_9(input: [Field; 9]) -> Field {\n    let mut state = [0; 10];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_10(state)[0]\n}\n\n#[no_predicates]\npub fn hash_10(input: [Field; 10]) -> Field {\n    let mut state = [0; 11];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_11(state)[0]\n}\n\n#[no_predicates]\npub fn hash_11(input: [Field; 11]) -> Field {\n    let mut state = [0; 12];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_12(state)[0]\n}\n\n#[no_predicates]\npub fn hash_12(input: [Field; 12]) -> Field {\n    let mut state = [0; 13];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_13(state)[0]\n}\n\n#[no_predicates]\npub fn hash_13(input: [Field; 13]) -> Field {\n    let mut state = [0; 14];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_14(state)[0]\n}\n\n#[no_predicates]\npub fn hash_14(input: [Field; 14]) -> Field {\n    let mut state = [0; 15];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_15(state)[0]\n}\n\n#[no_predicates]\npub fn hash_15(input: [Field; 15]) -> Field {\n    let mut state = [0; 16];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_16(state)[0]\n}\n\n#[no_predicates]\npub fn hash_16(input: [Field; 16]) -> Field {\n    let mut state = [0; 17];\n    for i in 0..input.len() {\n        state[i + 1] = input[i];\n    }\n\n    perm::x5_17(state)[0]\n}\n",
      "path": ""
    },
    "56": {
      "source": "pub mod bn254; // Instantiations of Poseidon for prime field of the same order as BN254\nuse std::default::Default;\nuse std::hash::Hasher;\n\n// A config struct defining the parameters of the Poseidon instance to use.\n//\n// A thorough writeup of this method (along with an unoptimized method) can be found at: https://spec.filecoin.io/algorithms/crypto/poseidon/\npub struct PoseidonConfig<let T: u32, let N: u32, let X: u32> {\n    // State width, should be equal to `T`\n    t: Field,\n    // Number of full rounds. should be even\n    rf: u8,\n    // Number of partial rounds\n    rp: u8,\n    // S-box power; depends on the underlying field\n    alpha: Field,\n    // The round constants for the\n    round_constants: [Field; N],\n    // The MDS matrix for the Poseidon instance\n    mds: [[Field; T]; T],\n    // An MDS matrix which also applies a basis transformation which allows\n    // sparse matrices to be used for the partial rounds.\n    //\n    // This should be applied instead of `mds` in the final full round.\n    presparse_mds: [[Field; T]; T],\n    // A set of sparse matrices used for MDS mixing for the partial rounds.\n    sparse_mds: [Field; X],\n}\n\npub fn config<let T: u32, let N: u32, let X: u32>(\n    t: Field,\n    rf: u8,\n    rp: u8,\n    alpha: Field,\n    round_constants: [Field; N],\n    mds: [[Field; T]; T],\n    presparse_mds: [[Field; T]; T],\n    sparse_mds: [Field; X],\n) -> PoseidonConfig<T, N, X> {\n    // Input checks\n    assert_eq(rf & 1, 0);\n    assert_eq((t as u8) * rf + rp, N as u8);\n    assert_eq(t, T as Field);\n    assert(alpha != 0);\n\n    PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds }\n}\n\npub fn permute<let T: u32, let N: u32, let X: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    mut state: [Field; T],\n) -> [Field; T] {\n    let PoseidonConfig { t, rf, rp, alpha, round_constants, mds, presparse_mds, sparse_mds } =\n        pos_conf;\n\n    for i in 0..state.len() {\n        state[i] += round_constants[i];\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..T {\n            state[i] += round_constants[T * (_r + 1) as u32 + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    for i in 0..T {\n        state[i] += round_constants[T * (rf / 2) as u32 + i];\n    }\n    state = apply_matrix(presparse_mds, state);\n\n    for i in 0..T {\n        std::as_witness(state[i]);\n    }\n\n    for _r in 0..rp {\n        state[0] = state[0].pow_32(alpha);\n        state[0] += round_constants[(rf / 2 + 1) as u32 * T + _r as u32];\n        std::as_witness(state[0]);\n        {\n            let mut newState0 = 0;\n            for j in 0..T {\n                newState0 += sparse_mds[(T * 2 - 1) * _r as u32 + j as u32] * state[j];\n            }\n            for k in 1..T {\n                state[k] += state[0] * sparse_mds[(t * 2 - 1) as u32 * _r as u32 + T + k - 1];\n            }\n            state[0] = newState0;\n\n            if (_r & 1 == 0) {\n                for k in 1..T {\n                    std::as_witness(state[k]);\n                }\n            }\n        }\n    }\n\n    for _r in 0..rf / 2 - 1 {\n        state = sigma(state);\n        for i in 0..state.len() {\n            state[i] += round_constants[(rf / 2 + 1) as u32 * T + rp as u32 + (_r as u32) * T + i];\n        }\n        state = apply_matrix(mds, state);\n    }\n\n    state = sigma(state);\n    state = apply_matrix(mds, state);\n\n    state\n}\n\n// Performs matrix multiplication on a vector\nfn apply_matrix<let N: u32>(matrix: [[Field; N]; N], vec: [Field; N]) -> [Field; N] {\n    let mut out = [0; N];\n\n    for i in 0..N {\n        for j in 0..N {\n            out[i] += vec[j] * matrix[j][i];\n        }\n    }\n\n    out\n}\n\n// Corresponding absorption.\nfn absorb<let T: u32, let N: u32, let X: u32, let O: u32>(\n    pos_conf: PoseidonConfig<T, N, X>,\n    // Initial state; usually [0; O]\n    mut state: [Field; T],\n    rate: Field,\n    capacity: Field,\n    msg: [Field; O], // Arbitrary length message\n) -> [Field; T] {\n    assert_eq(pos_conf.t, rate + capacity);\n\n    let mut i = 0;\n\n    for k in 0..msg.len() {\n        // Add current block to state\n        state[capacity + i] += msg[k];\n        i = i + 1;\n        // Enough to absorb\n        if i == rate {\n            state = permute(pos_conf, state);\n            i = 0;\n        }\n    }\n    // If we have one more block to permute\n    if i != 0 {\n        state = permute(pos_conf, state);\n    }\n\n    state\n}\n\nfn sigma<let O: u32>(x: [Field; O]) -> [Field; O] {\n    let mut y = x;\n    for i in 0..O {\n        let t = y[i];\n        let tt = t * t;\n        let tttt = tt * tt;\n        y[i] *= tttt;\n    }\n    y\n}\n\npub struct PoseidonHasher {\n    _state: [Field],\n}\n\nimpl Hasher for PoseidonHasher {\n    #[field(bn254)]\n    fn finish(self) -> Field {\n        let mut result = 0;\n        let len = self._state.len();\n        assert(len < 16);\n        if len == 1 {\n            result = bn254::hash_1([self._state[0]]);\n        }\n        if len == 2 {\n            result = bn254::hash_2([self._state[0], self._state[1]]);\n        }\n        if len == 3 {\n            result = bn254::hash_3([self._state[0], self._state[1], self._state[2]]);\n        }\n        if len == 4 {\n            result = bn254::hash_4([self._state[0], self._state[1], self._state[2], self._state[3]]);\n        }\n        if len == 5 {\n            result = bn254::hash_5([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n            ]);\n        }\n        if len == 6 {\n            result = bn254::hash_6([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n            ]);\n        }\n        if len == 7 {\n            result = bn254::hash_7([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n            ]);\n        }\n        if len == 8 {\n            result = bn254::hash_8([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n            ]);\n        }\n        if len == 9 {\n            result = bn254::hash_9([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n            ]);\n        }\n        if len == 10 {\n            result = bn254::hash_10([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n            ]);\n        }\n        if len == 11 {\n            result = bn254::hash_11([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n            ]);\n        }\n        if len == 12 {\n            result = bn254::hash_12([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n            ]);\n        }\n        if len == 13 {\n            result = bn254::hash_13([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n            ]);\n        }\n        if len == 14 {\n            result = bn254::hash_14([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n            ]);\n        }\n        if len == 15 {\n            result = bn254::hash_15([\n                self._state[0],\n                self._state[1],\n                self._state[2],\n                self._state[3],\n                self._state[4],\n                self._state[5],\n                self._state[6],\n                self._state[7],\n                self._state[8],\n                self._state[9],\n                self._state[10],\n                self._state[11],\n                self._state[12],\n                self._state[13],\n                self._state[14],\n            ]);\n        }\n\n        result\n    }\n\n    #[inline_always]\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for PoseidonHasher {\n    fn default() -> Self {\n        PoseidonHasher { _state: &[] }\n    }\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": []
}
