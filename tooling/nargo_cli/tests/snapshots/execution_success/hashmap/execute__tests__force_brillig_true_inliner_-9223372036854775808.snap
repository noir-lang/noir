---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12389747999246339213": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12442740014039576758": {
        "error_kind": "string",
        "string": "New HashMap should be empty."
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "13848700712118281102": {
        "error_kind": "string",
        "string": "New hashmap should be empty."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15535192719431679058": {
        "error_kind": "string",
        "string": "HashMap after clear() should be empty."
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B, H> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B, H> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
