---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12389747999246339213": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12442740014039576758": {
        "error_kind": "string",
        "string": "New HashMap should be empty."
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "",
  "debug_symbols": "1b3druPKcqX7Lvt6X2T8ZPz0qzQODNvtbmzAsBu2+wAHDb/7Ua1ZouYqkpI1pMgK3RhzeevLESWNEZSCTPL//uV//NM//J//9Xd/+5f/+a///pf/9t//71/++V//8e//42//+i+X//q///nXv/zDv/3tn//5b//r777/v/8yfvyflD9e/+//++//5cd//vt//P2//cdf/lvY/Otf/ulf/sflL5cL/z//9s//9Jf/Nsd//j9//Uvq08R8mrCnCT8kNK9E6nfir7uXErv8fC1x0v0Xe2yVjF0l0aaS7FIJjdGnFOpTCvcpRfqUonWl/LH+LF7fitf34vWjeP2sXZ9G8fpUvD4Xry/F6xfnl4rzS8X5peL80sv5laHX9YV5t37Wrs+jeP2X8yvG2/puu/W5eH0pXl+L15/F61vx+l68fhSvn7Xryyhevzi/8nJ+ddB1faXcrS/F62vx+i/nd45xXX/S7vglVry+F68fxetn7fo6iten4vW5eH0pXl+L1389v5zb+rr7fqVWvP7L+TXavj8bz936Ubx+1q4/R/H6VLw+F68vxetr8fqzeH0rXr84v7M4v7M4v1acXyvOrxXn14rza8X5teL8WnF+rTi/VpxfK86vF+fXi/Prxfn14vx6cX69OL9enF8vzq8X59eL8xvF+Y3i/EZxfqM4v1Gc3yjObxTnN4rzG8X5jeL8ZnF+szi/WZzfLM5vFuc3i/ObxfnN4vxmcX6zNr88RvH6VLw+F68vxetr8fqzeH0rXt+L14/i9YvzS8X5peL8UnF+qTi/VJxfKs4vFeeXivNLxfml4vxycX65OL9cnF8uzi8X55eL88vF+eXi/HJxfrk4v1KcXynOrxTnV4rzK8X5leL8SnF+pTi/UpxfKc6vFudXi/OrxfnV4vxqcX61OL9anN/i66+4+PorLr7+iouvv+Li66+4+PorLr7+iouvv+Li66+4+PorLr7+iouvv+Li66+4+PorLr7+iouvv+Li66+4+PorLr7+iouvv+Li66+4+PorLr7+iouvv+Li66+4+PorfsP1V2HX9X2M3fpavP4sXt+K1/fi9aN4/axd/w3XX91fn4rX5+L1X86vs2/r664/vH791YP1Z/H6L+c3dFs/ZuzW9+L1o3j9rF3/9euvHqxPxetz8fpSvL4Wrz+L1389v771z4jcre/F60fx+of5za0n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",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B, H> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B, H> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
