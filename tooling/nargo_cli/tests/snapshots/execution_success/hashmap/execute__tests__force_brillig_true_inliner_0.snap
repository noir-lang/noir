---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12389747999246339213": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "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",
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        let sorted = unsafe { quicksort::quicksort(self, ordering) };\n\n        if !is_unconstrained() {\n            for i in 0..N - 1 {\n                assert(\n                    ordering(sorted[i], sorted[i + 1]),\n                    \"Array has not been sorted correctly according to `ordering`.\",\n                );\n            }\n            check_shuffle::check_shuffle(self, sorted);\n        }\n        sorted\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    global arr_with_100_values: [u32; 100] = [\n        42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2, 54,\n        89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41, 19, 98,\n        53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21, 43, 86, 35,\n        21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15, 127, 81, 30, 8,\n        125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n    ];\n    global expected_with_100_values: [u32; 100] = [\n        0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30, 32,\n        32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58, 61, 62,\n        62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82, 84, 84, 86,\n        86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114, 114, 116, 118,\n        119, 120, 121, 123, 123, 123, 125, 126, 127,\n    ];\n    fn sort_u32(a: u32, b: u32) -> bool {\n        a <= b\n    }\n\n    #[test]\n    fn test_sort() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort();\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_100_values_comptime() {\n        let sorted = arr_with_100_values.sort();\n        assert(sorted == expected_with_100_values);\n    }\n\n    #[test]\n    fn test_sort_via() {\n        let mut arr: [u32; 7] = [3, 6, 8, 10, 1, 2, 1];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 7] = [1, 1, 2, 3, 6, 8, 10];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn test_sort_via_100_values() {\n        let mut arr: [u32; 100] = [\n            42, 123, 87, 93, 48, 80, 50, 5, 104, 84, 70, 47, 119, 66, 71, 121, 3, 29, 42, 118, 2,\n            54, 89, 44, 81, 0, 26, 106, 68, 96, 84, 48, 95, 54, 45, 32, 89, 100, 109, 19, 37, 41,\n            19, 98, 53, 114, 107, 66, 6, 74, 13, 19, 105, 64, 123, 28, 44, 50, 89, 58, 123, 126, 21,\n            43, 86, 35, 21, 62, 82, 0, 108, 120, 72, 72, 62, 80, 12, 71, 70, 86, 116, 73, 38, 15,\n            127, 81, 30, 8, 125, 28, 26, 69, 114, 63, 27, 28, 61, 42, 13, 32,\n        ];\n\n        let sorted = arr.sort_via(sort_u32);\n\n        let expected: [u32; 100] = [\n            0, 0, 2, 3, 5, 6, 8, 12, 13, 13, 15, 19, 19, 19, 21, 21, 26, 26, 27, 28, 28, 28, 29, 30,\n            32, 32, 35, 37, 38, 41, 42, 42, 42, 43, 44, 44, 45, 47, 48, 48, 50, 50, 53, 54, 54, 58,\n            61, 62, 62, 63, 64, 66, 66, 68, 69, 70, 70, 71, 71, 72, 72, 73, 74, 80, 80, 81, 81, 82,\n            84, 84, 86, 86, 87, 89, 89, 89, 93, 95, 96, 98, 100, 104, 105, 106, 107, 108, 109, 114,\n            114, 116, 118, 119, 120, 121, 123, 123, 123, 125, 126, 127,\n        ];\n        assert(sorted == expected);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_loop<T, let N: u32, Env>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) {\n    let mut stack: [(u32, u32)] = &[(low, high)];\n    // TODO(https://github.com/noir-lang/noir_sort/issues/22): use 'loop' once it's stabilized\n    for _ in 0..2 * N {\n        if stack.len() == 0 {\n            break;\n        }\n\n        let (new_stack, (new_low, new_high)) = stack.pop_back();\n        stack = new_stack;\n\n        if new_high < new_low + 1 {\n            continue;\n        }\n\n        let pivot_index = partition(arr, new_low, new_high, sortfn);\n        stack = stack.push_back((pivot_index + 1, new_high));\n        if 0 < pivot_index {\n            stack = stack.push_back((new_low, pivot_index - 1));\n        }\n    }\n}\n\npub unconstrained fn quicksort<T, let N: u32, Env>(\n    arr: [T; N],\n    sortfn: unconstrained fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = arr;\n    if arr.len() > 1 {\n        quicksort_loop(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B, H> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B, H> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "19": {
      "source": "// Exposed only for usage in `std::meta`\npub(crate) mod poseidon2;\n\nuse crate::default::Default;\nuse crate::embedded_curve_ops::{\n    EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul, multi_scalar_mul_array_return,\n};\nuse crate::meta::derive_via;\n\n#[foreign(sha256_compression)]\n// docs:start:sha256_compression\npub fn sha256_compression(input: [u32; 16], state: [u32; 8]) -> [u32; 8] {}\n// docs:end:sha256_compression\n\n#[foreign(keccakf1600)]\n// docs:start:keccakf1600\npub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {}\n// docs:end:keccakf1600\n\npub mod keccak {\n    #[deprecated(\"This function has been moved to std::hash::keccakf1600\")]\n    pub fn keccakf1600(input: [u64; 25]) -> [u64; 25] {\n        super::keccakf1600(input)\n    }\n}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[inline_always]\npub fn pedersen_commitment_with_separator<let N: u32>(\n    input: [Field; N],\n    separator: u32,\n) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        // we use the unsafe version because the multi_scalar_mul will constrain the scalars.\n        points[i] = from_field_unsafe(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    multi_scalar_mul(generators, points)\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[no_predicates]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let mut scalars: [EmbeddedCurveScalar; N + 1] = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N + 1];\n    let mut generators: [EmbeddedCurvePoint; N + 1] =\n        [EmbeddedCurvePoint::point_at_infinity(); N + 1];\n    let domain_generators: [EmbeddedCurvePoint; N] =\n        derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n\n    for i in 0..N {\n        scalars[i] = from_field_unsafe(input[i]);\n        generators[i] = domain_generators[i];\n    }\n    scalars[N] = EmbeddedCurveScalar { lo: N as Field, hi: 0 as Field };\n\n    let length_generator: [EmbeddedCurvePoint; 1] =\n        derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    generators[N] = length_generator[0];\n    multi_scalar_mul_array_return(generators, scalars)[0].x\n}\n\n#[field(bn254)]\n#[inline_always]\npub fn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    // TODO(https://github.com/noir-lang/noir/issues/5672): Add back assert_constant on starting_index\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32,\n) -> [EmbeddedCurvePoint; N] {}\n\n#[field(bn254)]\n// Same as from_field but:\n// does not assert the limbs are 128 bits\n// does not assert the decomposition does not overflow the EmbeddedCurveScalar\nfn from_field_unsafe(scalar: Field) -> EmbeddedCurveScalar {\n    // Safety: xlo and xhi decomposition is checked below\n    let (xlo, xhi) = unsafe { crate::field::bn254::decompose_hint(scalar) };\n    // Check that the decomposition is correct\n    assert_eq(scalar, xlo + crate::field::bn254::TWO_POW_128 * xhi);\n    EmbeddedCurveScalar { lo: xlo, hi: xhi }\n}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n// Generic hashing support.\n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\n#[derive_via(derive_hash)]\npub trait Hash {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher;\n}\n\n// docs:start:derive_hash\ncomptime fn derive_hash(s: TypeDefinition) -> Quoted {\n    let name = quote { Hash };\n    let signature = quote { fn hash<H>(_self: Self, _state: &mut H) where H: std::hash::Hasher };\n    let for_each_field = |name| quote { _self.$name.hash(_state); };\n    crate::meta::make_trait_impl(\n        s,\n        name,\n        signature,\n        for_each_field,\n        quote {},\n        |fields| fields,\n    )\n}\n// docs:end:derive_hash\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\npub trait Hasher {\n    fn finish(self) -> Field;\n\n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\npub trait BuildHasher<H>\nwhere\n    H: Hasher,\n{\n    fn build_hasher(self) -> H;\n}\n\npub struct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn build_hasher(_self: Self) -> H {\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere\n    H: Hasher + Default,\n{\n    fn default() -> Self {\n        BuildHasherDefault {}\n    }\n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u1 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u128 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i16 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H)\n    where\n        H: Hasher,\n    {}\n}\n\nimpl<T, let N: u32> Hash for [T; N]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T]\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B)\nwhere\n    A: Hash,\n    B: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E)\nwhere\n    A: Hash,\n    B: Hash,\n    C: Hash,\n    D: Hash,\n    E: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n// Some test vectors for Pedersen hash and Pedersen Commitment.\n// They have been generated using the same functions so the tests are for now useless\n// but they will be useful when we switch to Noir implementation.\n#[test]\nfn assert_pedersen() {\n    assert_eq(\n        pedersen_hash_with_separator([1], 1),\n        0x1b3f4b1a83092a13d8d1a59f7acb62aba15e7002f4440f2275edb99ebbc2305f,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1], 1),\n        EmbeddedCurvePoint {\n            x: 0x054aa86a73cb8a34525e5bbed6e43ba1198e860f5f3950268f71df4591bde402,\n            y: 0x209dcfbf2cfb57f9f6046f44d71ac6faf87254afc7407c04eb621a6287cac126,\n            is_infinite: false,\n        },\n    );\n\n    assert_eq(\n        pedersen_hash_with_separator([1, 2], 2),\n        0x26691c129448e9ace0c66d11f0a16d9014a9e8498ee78f4d69f0083168188255,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2], 2),\n        EmbeddedCurvePoint {\n            x: 0x2e2b3b191e49541fe468ec6877721d445dcaffe41728df0a0eafeb15e87b0753,\n            y: 0x2ff4482400ad3a6228be17a2af33e2bcdf41be04795f9782bd96efe7e24f8778,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3], 3),\n        0x0bc694b7a1f8d10d2d8987d07433f26bd616a2d351bc79a3c540d85b6206dbe4,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3], 3),\n        EmbeddedCurvePoint {\n            x: 0x1fee4e8cf8d2f527caa2684236b07c4b1bad7342c01b0f75e9a877a71827dc85,\n            y: 0x2f9fedb9a090697ab69bf04c8bc15f7385b3e4b68c849c1536e5ae15ff138fd1,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4], 4),\n        0xdae10fb32a8408521803905981a2b300d6a35e40e798743e9322b223a5eddc,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4], 4),\n        EmbeddedCurvePoint {\n            x: 0x07ae3e202811e1fca39c2d81eabe6f79183978e6f12be0d3b8eda095b79bdbc9,\n            y: 0x0afc6f892593db6fbba60f2da558517e279e0ae04f95758587760ba193145014,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5], 5),\n        0xfc375b062c4f4f0150f7100dfb8d9b72a6d28582dd9512390b0497cdad9c22,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5], 5),\n        EmbeddedCurvePoint {\n            x: 0x1754b12bd475a6984a1094b5109eeca9838f4f81ac89c5f0a41dbce53189bb29,\n            y: 0x2da030e3cfcdc7ddad80eaf2599df6692cae0717d4e9f7bfbee8d073d5d278f7,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6], 6),\n        0x1696ed13dc2730062a98ac9d8f9de0661bb98829c7582f699d0273b18c86a572,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6], 6),\n        EmbeddedCurvePoint {\n            x: 0x190f6c0e97ad83e1e28da22a98aae156da083c5a4100e929b77e750d3106a697,\n            y: 0x1f4b60f34ef91221a0b49756fa0705da93311a61af73d37a0c458877706616fb,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        0x128c0ff144fc66b6cb60eeac8a38e23da52992fc427b92397a7dffd71c45ede3,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7], 7),\n        EmbeddedCurvePoint {\n            x: 0x015441e9d29491b06563fac16fc76abf7a9534c715421d0de85d20dbe2965939,\n            y: 0x1d2575b0276f4e9087e6e07c2cb75aa1baafad127af4be5918ef8a2ef2fea8fc,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        0x2f960e117482044dfc99d12fece2ef6862fba9242be4846c7c9a3e854325a55c,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8], 8),\n        EmbeddedCurvePoint {\n            x: 0x1657737676968887fceb6dd516382ea13b3a2c557f509811cd86d5d1199bc443,\n            y: 0x1f39f0cb569040105fa1e2f156521e8b8e08261e635a2b210bdc94e8d6d65f77,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        0x0c96db0790602dcb166cc4699e2d306c479a76926b81c2cb2aaa92d249ec7be7,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9], 9),\n        EmbeddedCurvePoint {\n            x: 0x0a3ceae42d14914a432aa60ec7fded4af7dad7dd4acdbf2908452675ec67e06d,\n            y: 0xfc19761eaaf621ad4aec9a8b2e84a4eceffdba78f60f8b9391b0bd9345a2f2,\n            is_infinite: false,\n        },\n    );\n    assert_eq(\n        pedersen_hash_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        0x2cd37505871bc460a62ea1e63c7fe51149df5d0801302cf1cbc48beb8dff7e94,\n    );\n    assert_eq(\n        pedersen_commitment_with_separator([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10),\n        EmbeddedCurvePoint {\n            x: 0x2fb3f8b3d41ddde007c8c3c62550f9a9380ee546fcc639ffbb3fd30c8d8de30c,\n            y: 0x300783be23c446b11a4c0fabf6c91af148937cea15fcf5fb054abf7f752ee245,\n            is_infinite: false,\n        },\n    );\n}\n",
      "path": "std/hash/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
