---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12389747999246339213": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": "H4sIAAAAAAAA/+z9CZxkW1Umip/IzMiqirpZFTXdugO3bkXNVVlDRE5VxWVIsBK8gOIsKg2vRluf2igqaqtEqy2iPhq1tREbpf/Yoi341AZUxIGfYuN4W1T+ONLQjgytr9sHDg/f49yKlfHFF99ZsU/EPhGRVef8qn5x8ux91lp77bXXXmvttfepJLevnR//X+ncz3V+K/B7T9J7Wdl657c52tWKCKtZFI2VLUDjzBagcXYL0Di3BWisbgEa57cAjdu2AI3btwCNO7YAjbUtQOPOAmh8/MJJPCU6nSxSZZwqu1SZpIM1HQypsKWdmTJrZ5J9WcO/7um3f3d0/p6B8ojKvrWD8MaEf6m5enOHaF9E+pd3AN8LgH99B8AsAH5zWwfOp7W78LktJgeVpLB+Wiq4ndcXqG0JtMVwzxWD+0aF8CXUzoTw15JCZapVIXxGD/PH7hesTrtLT4XK5tr97bCyaru3HemV6qODUI9lawbqHYH7pc59wfJ4s+Bx3dzntNmebWsnm5fxbRaeGV+Nz9uxPpXtgLK5di+eWufvOcCDsIyOKtVvdP7e3fmdh3fs/brAP0/4e+gWz5gvO0T9HaJ+Ovc90LlP5zybCz6h3YUXsU/XDP6VYuCvGPyNYuAvG/xnFAO/afCf2YGfFAD7E4H2iPA37ZRHi+HNJvxnFQN/yeA/ux2b98sXDfZzosO+eM1gf1J82DcM9idHh31pc6w+Nzrsq5cN9qfEh33VYH9qfNjXUh2czuG/2gHo2SFoK9mY253024hos6X/qwNgPYtg4fv27g76O7IuaZq9Mw90sS26DZ7H0wNLrVBb1PDXiNaibNFtRA/zB23RtGy7oLUuyrAPsQzxbBd46qLM5q1pghWzjSW/Sn6V/Cr5NU5YJb9KfpX8mk5+mY2MtqjZZDvEezFjBdYO80fmRDuQthmqj/dJp0347Bs7vymsx9a77yBM5N02h3fzgp4F8V4l49fw8DPGo/rB8yWGxYOwLBZk/Y08Xe/8NvNdLX5gbaiJNhjenfA8opythvAI8deI1sj0bPpDO4ke5g/7Q/cIWutUll6sJ+4ReO4ReLYKLJRR018oO8bDHeK9IvTX5vqIaAfSNkP18T69qvTsBzq/Sn8p2dnp8K4m6FkQ7w2rVxaS/vaMCmtXRFi7I8KqC1gma3vgecx1gVAdZvhrRGtROmwP0cP8Yd7tFbTWRRm2DcsQz16Bpy7KWO/EgGVlqHfq9B6O8xqVoWw/SjB3w3tmp6m1bZu307n8rfAO2k/VRK/7brS75Vj/R9e7MH+u82w31cF270769csClaEu3EXtmcBYCrYHpmEsKXvA+LO3GHpWjJ59gh41tlO6dyX9fYb0GSxcB7jSvv2rZGhzTTkpVBaarBNwDkecNWgztw31Q5We/VbnV83h2Ldef9eTfvljfYJ6aDuVoR5iHbULyu6hMpwzcc01i3aUDV7P2S5on3Vot35mvmB9hKHgGwzP9wjRBenl2VO8plSQH3Np0BzwXsCL/anmAKSzSvU/Yb0L8/2dZ6oft1EZ8mQ+gxYcX9gfJi9My190flO871q/fT+u/mS/KwYe5Q95trPJFI7TScyFhr+W9OuUIubCXUQP8yfLvsd3lR5jW3C3wLNb4NkqsNJ79o1RdjZzxcR7RcyrNifMiXYgbTNJ/xyH80mVn3WEU82rSnZ2ObxbEPQU4YPWI8LaExHW3oiw9glYJmv74fkkfGPDXyNai9Jh+4ke5g/z7oCgtS7K2Dc+IPAcEHjqooz1TgxYyrbcR+/hOF+gMpRt9o3R7g71jR+sdN9BfKG+sdU/vt6FeagDc3eSrUOsDPVdncpQBvdQe1B+eCyxPKx3/m6OdgXbA4a/lhQ6tlueXKr50PhzbzH0bPrGBwU9+wU96BtjnyF9BsvzjVGG9lNbC5KFzTn8XqBvVuDcDW3mtt0LbarSswvOHJ7X/tkv6FF6iHUN6iHWuej/s/7COZN9Y2V/oGywb6x0h7KV2OaeFe1TfFPwDUZMO0fxO1RHP5V0tLUj1He1+h96ahfm00lHqxiB8l3vIdj23jNAXn9v/fa9WiNP/3eKRxyDK5fVGlY8+Gube2AWCoF/cVn5rxHpX1V+TET6N/es1YuBv6LimxH5s6JixfHgLzUN/r5i+HNN+Q4R4a+pOTQi/1vKHokIf3Pv6MFi+LM5vu4rBv4Ng39/MfzZHL8PFAP/osF/sBj4twz+E4qBvyn/DxUD/5LBP1QM/E35ebgY+Jv653Ah8C9uzu+NQuAv3TS760jSvcx2M9xH4Xk8/2E5eB+K4a8RrXHp6fqSR4ke5g/HZY4JWuuijG3AYwLPMYFHwbonIqyFiLB2RYS1OyKs+pS2cU9EWHsjwtoXEdb+iLAORIR1b0RYByPCiilf90WEFVO+7o8IKybvY+qJmPx6ICKsByPCmlZ+xdRfdwPvp1VPPCEirJi8j2mbxORXTJl4KCKsmHNaTH7FtH1j2iaHIsKaVt4/PKVtPBwRVgPqpX9j3nX69xyU1ajM6v5B5fZvwf74CvuzhgNxHy8Id4XwGa/xGeJfEPQY3TVRNjcCrTdWV1orty6vXrtxa/nmjYu3KgTfaOVnuB6V/j8h6h8R9Y3XJ5NCeN1UZ7mdAL6m1xyUHaeyKpQZjXiW2w6CGZv+EP4j/rqoj2cs5enLeqJlKxas2pCw9ib9usf0xALRaeXpVfAe3uB8EcNfS/p5WkSMT+2NnhN85VxifJdzg9OL86Xy5vBPO6z0nvNHUXaMhzvEe0XknpiMz4l2IG0zSf/ciXHeKj37cEc4Ve5J3n31c4KeBfFeJePX8PAzltGjEWEdiwjreERYJwSsYufL8PxRw19Lipz/ujrsJNHD/GHenRK01kUZtg3LEM8pgacuyljvxIClzqvguR7H+RyVoWxz/ijOxaG5Sdtnuu8gvtD8Uav/W5CbtLPzgjqjztqtcpOOUhnK4DFqD8oPjyWWh/XO383RrmB7wPDXkkLHdsuTS29v5eli6NnMHz0j6Dkp6MH8UewzpM9goX1zpX37V8nQSWprQbKwOYefBvpmBU7eW3latDO9qvTsCR0mxdhbeVLQo/QQ6xrUQ6xz0Vb3fBXOH1X2B8oG548q3aFsJba5Z0X7FN8UfIMR085R/A7V0WdJR2OshXV0es/5o1b/RaCjLzg6mvc+qnN7KvQ3yv820Y4q1V8B+X7PetLDhyLOAlL8VmcbTatPWcx5qr5Pqc6MKn3K/vZ7PqXxcKv7lM9y5qO8PuU2QU/pUw4Hq/QpS58yr0/J503H9ilvkr1i+EJ9ys1v+oC98s/JXlE6pPQpS5+y9Cm7F/uUXz0Bn5J1zTT4lEp3KFuJbe5Qn1LBNxjT4lO+PJJPeQh09Lc7PqXnNyaifpXwWf1Xggz/4bqGmUAbkG82z4TQt20ArCsEK+8ZusX6meHfybgT/EyUl2H12VbwM2O1seRXya+SXyW/xgmr5FfJr5Jf08mvOzlu/d4tFLf2/GfPlxgWj1qn82LnJgvop08iFsa50keLoWfTZ1E59EcFX728bhXH4LE8bO7ttMJK721trFjZaQ08P/ijOeId6WXfWOZ4x+WndGH+A8U7lL4K0a2oVyrReLJySe25iAj/htpXEQ/+xabKxY8Hf7ml1sniwV+6zutMhgP7vpi4+VKwLjX8NaK1KF16muhh/rAuPSNorYsyHkNnBJ4zAo+CdSAirIWIsB6KCOtoRFgx+XU8Iqy9EWHdGxHWroiw7okI64GIsOoRYcWU+5gycSgirIMRYcXUOTH7MSbv748IK+Z4jNnGExFhnZzSNsbUOQ9GhDWtcr8vIqy7YU67LyKsBsEymxNjVhgH4u++WP0bHUO82D3xSxfNhkabu5L04j5TEO4K4TN+4zPE79n7NVE2yp74q9dutZavLl1evXX11sr1SzfyyobVXxT1lS9jvD6bFMLrFbUnfhH4ml5zUHaGyqpQZjSqPfGLBdEfwn/EXxf1H4U2jDrOMVaTB5btY0ef3sZ2kfHb9J7zfoqIR6eXxQZD4sTTljNZdJxY5Ux6ceLTgtZ60q+zOR6rYiinBZ6tAiu95z0UKDvGw4JzTZs83udEO5C2maRfd6BeqNKzr+sIqVqLypsHflTQ48Ub8459no9jwFqMCOtsRFjnBCyTtfPwPKKsBe+hMPw1orUoHXae6GH+MO8uCFrroozPmbkg8FwQeOqijPVODFhq38c5ek/FT60MZZv3UKDdF5qf+6rZ7juIL3QPhdV/ENarvq8Dc3eSrUOsTOXLWxnK4CK1B+WHxxLKwyTsAcNfSwod2y1PLtV8aPxpFkPPpn3dEvScF/TgHgrsM6TPYHl7KFCGzlNbC5KFzTm8CfTNCpynoc3ctia0qUrP3uDM4Xntn/OCHqWHWNegHmKdiz4a6y+cM3kPhbI/UDZ4D4XSHcpWYpt7VrRP8U3BNxgx7RzF71Ad/TbS0daO0D0UVv/9T+7C/AXS0aH78rcTbHvvl0Be7btOCdXhPRYIm+H9IcWuitm/0D3PsZb00oy4jxaEO3Q+Yd8e6TG6le9ZxHmOR4lWfsaxKzXej4j6xfpc+jxH9GfSaw7KjlJZFcqMRhW7KiYWsdwM4T/ir4v6fJ5jaF8qX5D3MY0Ca9uQsCwOVoP3TU9YfxR0RuJqhWhHWnHsGn5v/1aFaFew0styxTy9XEn69ZmiayfRpfYahujGI/A8Yqw2eF+Z4a8l/bJQhK19RPAV+cN+61FBqxoDnAc+7HhKL/ZbpwFWzDaW/Cr5VfKr5Nc4YZX8KvlV8ms6+WU2LNqiZpMV68N344Dmd80l2i87Au3B+nifJN04iD0713EgVBxQ2aJHHN7VBD3ety351/DwM8aj+sHzJYbFg7AsXja5vRDNu2ovRHrxWB42F2ZaYaX3nC+g1ueLzXHr6hiLuc8lOm+J1xowRo/rhlV69omOjsm71qDi7V5+YN6xvxXX+IeFNYE1zuCY9DSscZ53eNcUtNZFGccxmwJPU+CpizLWOzFgqRwmby2O478o25wvgOvroWtR1+e676CNkzdf4JdhLepWB6Za87N2q3ytRSpDXXiW2lPmC/hjycsnvtPyBVCGpi1fgHP+QvMFXuLM4Xlz/s4LepQeOkplqIdYR2Fu0hkqwzmzzBe4fY2SL/Ay0tHD5gs8H3T0t5KOxrUn9CuRRzOAD9fJrrRv/44rz1b55qcFPex7fxfx0eQb5eWogGP1VX4vjhHOfThDeNOx/CfrvTDVGccok8cIptX/HoD5vg7MkHMjC4qbBM+Nhr+W9MtdEXOjikd550Z6+VNFn8c9TbDSe/aVUXb4LJJJn22MOop1kHe28Y8482zeWOY2QU8R3xSI6XdvpTx9k7WCctmDfWXDXyNai9Jh54ge5k9WnAHfVbYg+8oqh1/Z7XVRxnonBiy1RnCW3sNxzmeGq31+yrYNtcN+meyHYb9P8BSww/6LY4dZu5Wfw360sscnuE8l2B6Yhn0qnq9cZFwu/a9iSmrfDPrK2GfKbw71lc9RWwuShc05/ALQNytwsq98QbQzvar07D0RfeVzgh4vx1HpIW//D+svnDPZV1b2B8qG932Coxlt5nrK98nim4JvMGLaOd7a8CAd/Zeko60dob6y1X/3k7owP+jo6CNJb5laK63Q3yj/Vj+9+NwHq/83IN9/up708KGI9VfF7yMR8SAsm+vLfeGbV7kvfERY6f3dsC98R2eQlvvCR4dV7gsfn70dY184+67lvnDfLjpW7b6D+PKu8/402EUnOzDLfeGFju1yX3jSL0N3yr7wS84cXu4L7+93trmVf7tV13k/kXT0sOu8LwUd/WzS0Thvmr/n+bW8x/u5IK+2L3xHoufkTvGo58Wv7iB648K/eEntfYwHf21Zrb1GpP+i8o/jwV+95a07FZsrG34eveGvJf06o4i5WOUgK93Mvgq+q3QsjyF1VuSiwKNg1SLCOh4R1q6IsI5EhFWPCCtmG/dEhLU3Iqx9EWHdExFWTN4fjQjrVERY+yPCOhAR1r0RYR2MCCumTNwXEdbJiLBiju37I8KK2Y8xdXRMfj0QEdaDEWFNK79izh13A+9j6pwG1Ev/NpuT81TS++1UZnV/puMHKt8sov1/KWRd8HhBuCuEz3iNzxC/+o6f0V0TZaOc57V08+OO39L1W0u3mrdWbq1drBB8o5WfYfwg/R/qxxivF4vhtTyLns+bn4Oy41RWhTKjUZ3nVZCfuhLCf8RfF/X5PK9Rvp/I50eNAmvbkLDsPC+0oXn/+Dy8x+O6mNzw8LOoDH+NaI1LTzemoM4emxd85bP68d26KOOzI7YLPNsFnroo47WyaYAVs40lv0p+lfwq+TVOWCW/Sn6V/JpOfqm1UbPJij3Lupt7oPKGle03Q/XxPkn684rnOg1RuQfKFt3m8E6dg+vtR+Vfw8PPGI/qB8+XGBYPwrI1evW9doMxrnPJzM/KOpesBu3B+nifXlV6tteRBXX2cM3hXUXQE3L2cDFxnPB8LsM/rrOHjwfyVeV3Hyee36353YNyao7O9+LEeOaseNfO5K5S/e98pAvzRAemOmub1+893a3wWf0zMB7/Yj0bH4+hgmS277x6bI86r30m6ddNGMPlvNKmo3/yzuMVQc+CeG9MunvosxEKsivcsxEUX724topj8jgfNvY4rbBQ/xSb27VyU82N8eCvXZ5gblfwnoU7JbeLZaRcI/ZhPSEirJj8ipnPEDPvaVrzxGLmDsbk10JEWDHzi3ZHhFXmNOaD9XBEWDH5dTgirGnN44nJr5h6IuYYijm2D0eEdSoirLthDBWRjzUolvEKimWY3x0ay7D6jz2xC/M75ntxe/5xQTlewfkY/G3Eov1jFff0/OPTglYVu+L1kzsxPherjSW/Sn6V/Cr5NU5YJb9KfpX8mk5+qTyA7VSm1u7LfON++7bMNx4OVsw2lvwq+VXyq+TXOGGV/Cr5VfJrOvl1J+cbH+28WOYbZ7cnvdhn8XJmi8mFCfdZDP+4cmaVD+nlzKrvqdZFGeuYO/Hbt7HaWPKr5FfJr5Jf44RV8qvkV8mv6eSXOp+51rkvNoe867NYPs2caAfSNkP18T5Juj6LPftKx2fJu55RE/TE/KafWjepEZ5aRDwIy3wWkwXkr8EwWSjoe3mbsmDnVKMsIM5FaA/Wx/v0qtKzb3JkIW/+V0XQ433XYoegNSLvgvco8bcPizkPyv/2oeJrnm8fphfrwWn79uGosNL7HZ177zsLO8R7RYzJQd9+Owftwfp4n15Veva9zphUsnPO4d2ioGdQTuZrtvXiHHZ/aXK5C/O1HZi7k35dYfGo3QS7knRjSGqf6Gkqw7mR5wilf4adI5CnbBOZTkaZwPacIbpmBF0F2xdDnz8+Uww97h415A/rxXOC1nrSPyZY/+QdQ9MOC/WijUGTw5/qDK50HP3Ott73cUzYty7Ut1fHNF83eX6YE3xA2maSfp2L80iVnv28o1fxux+z4pln61g977tbBc9JQ3+btujvPJ8P5Gueb2WlF4+daftW1qiwcExz3D+9cL5+jOZrGys4X+NcshPKsf6FS12Y7xJ6Q83BiwTLyt4NY+0D69nvW/unxafmsx5Cfeo/cnRL3jXUGUGPt5clZOwjnq34rcFhYU3gW2vBZwBMw7fWzju8awpa66IM24ZliKcp8NRFGevPGLBUboL3TTCGibLN3y1Eu8R8gQWg3y7U1x8lfW34UF/juxvtbjnW3wP6+h9IRysdovykRSpDGWS7BuWHxxLLw3rn7+ZoV7BdY/hrSaFju+XJpYoxG39axdCzeUb3kqBH2Rn43ULsM6TPYHnfLUQZukBtLUgWNudw/K7irMB5BtrMbcPvO1bp2c7OQFFzeN41hQuCHqWHvNgC61y01Vl/4ZzJ3y1U9gfKBn+3UOkOZStxPGBWtM/z6bluWh7TzvFy0gbp6Ae3d9/Bdigdnf6yTW31//PFLsxDHZijxsCwzRwDU99CLDqHLCuXMSsGxjlnXgysoP0iwfOK4R9XDGye6GH+sI1WE7SqtSy2q2oCT03g2Sqw0nuOgZkcrnZuUv48Z3vv+zgmOAaGeoPlEvEWMcfZuA49kxDXR3HdtUrPnuTMcXn91IqgJ8THLya/s8u7M4J3px3e4Zx2RvDOnl2JyDvPx1d5s49/S3e7xolzEupLnpOs/vvXujCfLcaGmmf4eymGZw6eY/0q4bb6nwI8/PB6b7vtfYORXsXOA+E5wTwPzBZCjz8PIH94HlA53SFzdd4cdSxj3T0NsGK2seRXya+SXyW/xgmr5FfJr5Jf08kvFWMxm6zY8za6vo2KrSjbb4bq432S9PsE3+f4NsoWnXd4NyvoKXJ/IeL0fIlh8SAs88dC/NytGiP4kTH5uTHXsmPkmqs8i1FhxVhj5xzz9Frv/DZHu1a9NfeCc5aC18k5Z6mg/DM3Z0nl4eXJWcL+q1AZ4plkzpJaL+F8c9QhDBPHDa+Tq5zZQWsw76B417Dr5L8M8a53UozLWyfHeZXXWVDPck7vBMbS0Pl/kxhLyu4aR05O+r8p6FFjG9fJsc+QPoPlrZOjDJ2jtk56f8I2aDO3zduf8PuOfZDXzj4n6AlZJ0c9xDpK7QNgPZRevE6uaEfZ8NbJt9F7inbrZ2W3K7tKwTcY41rT5fNZ0mu989sc7bo2SP9/gPS/9WXoGrzVfz7o/w87+h95xOOD+yS9rrR7eVT0upa1R61rIT3c/o8QH20MKFlEOFZfraepfDleL/sI6Ik/We+FqeZylL9jBNPq/z3AfF8HZkgeQUF+efC8a/jHlUegdFloHgHr4bs1j0DN4dPm4/McHurj39NpZIw5XM1TMeenu8nHR3tjvfPbHO1aKnPhN6/Cc+HRnsUyxDMNufCo0zhmMU4f/9SO7jtZdgG+u9HulmP9p4CNt9iB6dnpyo9nHx9lkH38Mhfez4VXc+2dmguPMjRtufA1aDO3zcuFf5JjH+S1rS4IepQe8nx81rno42ft5UmvEB8/NBd+W0abuV6Wj6/4Nk0+PtK33vltjnbdGKT/P4n0v/V5qI9v9d+92oX5KY7+H9XHL3p/qrL3zwh6uP2fQ3y0MRHq46t9sTj/sY+/SHhj+vjPB5ilj993De3jnxa0sq5NL7Y778Rvr+Tx8Sedr84+fmi++r/Ygj7+tPnlnu88LKwJ+A7Bfvg0+A4XHN61BK11UcZ7d1oCT0vgqYsy1jsxYCl7zLNxGSbKNvvhOG+H+uHfGskP/2mww/6PHH446rszVIYyyOcKovzwWCrIzwy2Bwx/LSl0bLc8uVTzofFnqRh6Nv3wZUGPilehH658b4Tl+eEoQ01qa0GysDmHY5xgVuDks1qXRDvTq0rPvt+Zw/PaP01BT4gfjnqIda63Xx3nzBA/HGUjjx+u4pXWz8rvUHybBj98kI7+sUi+8qeAjv6JHWG4/3OO+UHh3pzHAfdbnPmB97yrXN8K/Y1jD/OMn9XupcXq/yyMrb9Z79BHdQyP+k2SsL7GOtzX4/924/D+7LR9u7H0Z7vve/4sf2tpq/qzvx3Rny36W0ulP9s7p0eWtbvOn+V15a3uz/Ie9dj+7IfIXjF8of6s1f/rlS7MvyZ7RemQ0p8t/dnSn+1e7M/aIuM4/VnWNdPgzyrdoWwltrlD/VkF32BMiz9br3XfwXbk9Wd/FnT0vg7MkLVf9BsTUZ/PsLH6B0GG/9d6b1u99clZoqXz6tjOsLFn41qfnCV6mD9sCykfX9nrvOc87/5kLGNbaBpgxWxjya+SXyW/Sn6NE1bJr5JfJb+mk1/qbEf2owuK82/6luYrqPUapG2G6uN9knTtcnt2zfEtlS066/BO+Q1Frw2xPTwTEQ/CMh/M8wMLXisIjjkZ/lrSLwtF+CzKl1brCBzfx3c5zpBePJbznic/7bDSe16DUms+48qjLurbuV8XMX6lYjhF7HXcSutGw8JqCljj2G80iFbEP8m4edPh3ZKgtS7KeA1K7bNaEnjqooz1TgxYal3ci+9yzgDKNq9B4ZpNaHzzVRTfHHYN6jUQ3/w+im+i3cT7F1G/8Hd+1P6pcg0qbCx55xfdaWtQKEPTtgbFeSSha1BvcObwvHkkTUGP0kNZ691KR6l9x6yH0qtcg7p9eWtQ7Mek13rntznatTxI//8c6f9hvyG0Cvr/Fx39jz4rjw8VL7jS7uVRQd+9d/PCFgU93P5fJT7aGFCyiHCsvvqeMM7nOC9j/V8FPcF7G9Vc7u1ttPq/ATDf14FZ5oJuXkPngp4RtJZ+eL/sGA+nxQ/nOTzUD39vxDlczVNF5IKWfnj3eemHD++H8znC0+qHK99B2b9sG8f2w/8hkh9+EOywjzl2GOeCor5jPxxlkP1wlB8eSwX5mcH2gOGvJYWO7ZYnl2o+NP4sF0PPph++IuhROdPohyvfG2GFfm+3RW0tSBY253CME8wKnGegzdw2jFdU6dmujsMT43u7LUFPSC4o6iHWueiHs/7K64ejbOTxw1XOvPWz8jsU36bJD0f61ju/zdGui4P0/8M7u/Rgn4f64Vb//1zuwjzSqVSEH170ueDeWT9ID7d/kfhoYyLUD1fnkeP8x374BcIb0w8/DzBLP7zvGtoP99ZX0P9hu3NR4FkUeLYKrPQ+jx9edOxNxcBUX80k/ToIdQPHyJ7mzOHT6odvJd95WFgT8B2C/fBp8B1aDu+WBa11UcZnDKm1uWWBpy7KWO/EgKXsMc/GZdtYnYup1r1C/fDnk/0wrB/+HWCHvdCxw9gPR313nspQBi9Qe1B+eCwV5GcG2wOGv5YUOrZbnlyq+dD4s1IMPZt++KqgR8Wr0A9XvjfC8vxwlKElamtBsrA5h2OcYFbgXIQ2c9swXlGlZy9y5vC89s+SoCfED0c9xDoXY36sv3DODPHDUTby+OEqXmn9rPwOxbdp8MMH6eh2JF/5NOjob3R0tLXDO4fTWz8p2Ge+HKqH+btqBdnz7nfV1LhkOxXfVfM82yHT9o3CEtbkYNkYxbFmMrcj6ZezIuZA0/dZuRznoT1YH+/Tq0rPXuvMgWqsnXd4p+zMmL6nmjP5HJEYa80qPmJzhVq/4pjGpPMDm9AerI/36cX5gT/myALKkLemq2IaVm/QHPyTNAdfADpD5uDN/CiYg9/szMHsC3njG2U7/b/e+bs50rXSmtxZUqvN0Dne8G/1s6S4D4c9/ym9PxQR1oMRYR2MCOueiLDqEWHtjQgrJu+fEBFWzDbujwjrQERY90aEdTwirD0RYcXsx10RYcXkfUy6YurVmHRNqy5ciAgrpqzGpOuhiLCmda6NOR73RIQVUyZi9mPMeSjm/BhT58Tk/f0RYcVs47Tq6Ji83xcRVky9Oq32REw7+lREWNNqM8WU+/siwoo5hmLaTDF9hWm1V2PqiZMRYU3rnBbTlpvWWMcDEWHFtKOnlV8x5+2HI8KKqScOR4QVU+eU83Y+WDHn7QbBanb+zvpGruUu8NriizsNLHZdbHV5cvlqq8sVwmf8xmeI38u1rImyuRFoXb1+c3Xt5uVb15aX1m40V29UCL7Rys9mAH/6X+35UusxxuvVpAher9wy/TLb7sJfAb6m1xyULVNZFcqMxnSt8yDRX0zu3sqtEP4j/rqo/yxoQ56+rAs8mHM0KqzzQ8Lam/SOAdQTIec0FrM2Ovx3doo+p1GtjXrnNLYErazz04vzZoadP4qCpfIu+GzFYuaX4vMuvqkzT8bIu1B7z2Pus6gn2f1QZC5nelmuCPdHFWChfjwP5Vj/3wC/P7LeS3tF4EtzRr7jnl7c5wk3v7vR7sVt9T+41IX5bzswVW6K8TdkD1XR+yZD7b+8uWff58j9tO2hUuOL+6GYPYnLTTV+E2pjy2k/6h6TabZD0+tZVIZ233PbXfh8zdLfyIu0b/9+vQuX69kVso/F431BdkCT57CsPbw8BrA/cD6r0rMfL3gMKN7NUhnSyvbDBPYABeeeT8MeILXnhscPvltP+scW20vK31oReEpYdz4sG6MqXlDwXrNN3Yf7w2aTbNmeofp4n15VevaYo/vy+qLqjBk1x406/6t+8HTlsHjUnG2ygPxlH2gNyoqQhYsdeCgLiHMV2oP18T69qvTsjx1ZUHsdVx3ebRP0DLLv35fDvk9/Offc6r8D7Ps/Jfse6TI5UrnnLFfKbyt2T/vqUugczLHLguwwd0+78ofz7mnn3PBRYmGHIsJ6MCKsgxFh3RMRVj0irL0RYcXk/ROmtI37I8I6EBHWvRFhHY8Ia09EWDH7cVdEWDF5H5OumHo1Jl3TqgsXIsKKKasx6XooIqxpnWtjjsdp1V8x+zHmPBRzfoypc2Ly/v4pbeO06uiYvN8XEVZMvTqt9kRMO/rUlLZxWuX+voiwYo6hmDZTTF9hWu3VmHriZERY0zqnxbTlpjXW8UBEWDHt6Gnl176IsO6GGEzMMTSturC0J/LBimlPNAiWytXDNRbLeeDcsP/YEYiC88ZXVY5NJenFvVoQ7grhM37jM8S/IOgxumuibJSc9UtXV26utJo3bl29dW1l9cZqheAbrfxsBvCn/9dE/aaob7y+WAyvWypnfQ34ml5zULZKZVUoMxpVznox676rrRD+I/66qM8563nXcxEP5iqNCuv8kLAsZ13lQJTnkG9ehZ5Dnl6cbzPs/FEUrN1Jf39bu6fl7OQlaA/LtHd28ls6Ckrla+T9llpL0FNkTg3i9MbrsHgQluWYcH+E5qxb/bcDv0Nz1n9poRf3sDnrb4Scll/pwFQ5LcZfldMybXs1+LzU0L0av+nIfd7zUrcJeoo+L5X7oZj9SstLavwm1MZlp/2oe0ym2Q5NL85ZR7vvU9pd+HzN0t/Ii7w566ofQ8bApL9fx2MA+wPnM/5+3fsLHgOKd7NUhnLP9sMM4GPbq5j5ttUKGZuIv0a0RpYBN2cd+cO8K3PWS1glrBLWNMNSeyI4nrNV90Ts6QRrY+yJmBH0FL0nImQuHhYPwjKbUO2JMLthq++JeNiRhbxxr/OCnkH+49FdvTgxZs7+Y/rLeyKs/teA/3iiA1PZeCZHIfsSPRuvoD0RwWe9cHytaBtPxVs8Gy8kvpbel3si8sEq90Tkg1XuicgHq9wTkQ9WuSdicnSVeyImR1e5J+LO0F/lnojJ8b7cEzE53u+LCKvcE5EPVpnDmA9WuSciH6xyT8SdMaeVeyLywSr3RNwZ+j4m73dHhBVTR5f7K+4MWS1yf4XNJVn5dbYuUqX6f9Vhlq3VHKJ31jt/N0e6VtcWiG7DgbhPFYS7QviM3/gM8S8IeozumigbaX/Fys21tRs3b63eat5sXb68uYZ5imjlZ7iGlf5fFPXVmlPR55Sp/RX4Tfj0moOyU1RWhTKjUe2vWCyI/hD+I/66qM/7K0L7sp7ocRALVmtIWLa/AnWO6YkFotPK08v66n5qz3rn7+Zo18XQcW34a0k/T4tY/70/6efrrODrQtKvc+3dOpWlF+fuHBJ4Dgk8Jax4sCwXgmU6vYqdQ7v5LY0OvDnRDqRtJukftw1oU5WfdQxgld+iZPp+h3ezgp4F8V4l4zdJ+seywqP6wdNJw+JBWJaTw/2RtYeE97Za/Z3A79A9JAu7e3EfItz87ka7F7fV/wzIAap3YKpcbuPvnSz3B+8Qud+RFDm/LbfU3qyE2rjktB99G5Nptb+E95BgHt2ntrvw+Zqlv5EXad/++6d14XI9u0YdAw0qW+/83RzxMnk0+wzHQEPQOkP18T69qvTs7ATHQLH+X/g+XMNfS3Q/r8ehp8V9OYivxrtFQWtdlJ2DeyxDPIsCj4J1NiKs7dQebP+o+hBhfWK7F0/WXPqUSHPpM2EufRrNpfgNkFNJ7/tWdgXG3qc9vZf2ecDP46Ug+QweL+xXFfO9Hd+vQv4M41el96fhHssQT4ifkN6fiQirRu0pwn5Ir9Dx8hmRxssTYbx8tjNe7k9637eyz4Xx8pk5xktB3wIMjkMY/nGNF/W9Im+83C9oVfYmzy957QOEdToirLMRYZ2JCGt7RFisE4r6tl+oTnjRbt22UJ1g9Y+CTnix44/yt42t7CtBJzyPdIIXmyxmDC4F7z82/OOKTc4TPcwf1gnqG291UVaF+yzd430rDcs4bjcNsGK2seRXya+SXyW/xgmr5FfJr5Jf08kv5ftyXLkg33Uzrqzyh5TtN0P18T5J+u36tztxZWWLzju8mxX0eH4//yZJmB+k+mFca4ohcfKC1tmCz6E1/OOKk6sYmhcnbwha61SWXjyWGwJPQ+DZKrDS+x2de9MxKiY6LWtXh6A9WB/v04vXrv7I0TF546/3C3oWxHvDjv2Yax+8LhQDVoxzDsszdzevQs/cTe85FjtsTnF6sd6JAUuta7ToPRznvE6Dsv0owcSzasyWGhSv/CjFKzGeOCve3Wh3y3vqQ7zyHyheiXaTtVvlDpyisgaULVJ7JjCWgu2BaRhLyh4o+EznFaNHnaGmxna6r31X0t9nSB+eD23XlfbtXyVDfH71pM8w5fyTZdHO9OIzTHd2NvLEyD9pCXqUHuI1LpUrrfIYGlSGc6atm3i0o2yYTlO64356T9Fu/cx8wfoIQ8E3GEXnqYXq6Afr3XewHaHnnFn917S6MA91YCo+YztYhpVPf6V9+3dcdrO1R9nNSA+3/yTx0WRYyQvCsfrKXsdxwGtxpwhvOpb/ZL0XpppvUUaOEUyrfwZgvq8D01sDLThHJnhu5ByZguI4bo6MikeVew/628++ssqH2Oq5zk+OOM+quSTmHOLtGRwW1lbyuwv+NkOwr2z4a0RrUTqsRfQwf5h36jsidVHG+UF5v4uCZax3YsBSNtN5eq8BZVn2a3qxr4zzdqgd9jyyH4b1lV8KdtjnOXYY59mjvmtQGcog79stfWXfV1bz4Z3qK6u407T4yhzvDvWVv8iZw/PaPy1Bj9JDrGsaUObF81h/4ZxZ+sq3r1F85a+N5CsfBB390rvQV/6WCfnK31KAr/xtpa/sXaWvPCKs9P5u8JW/v/SVo8EqfeWt5SvznpXSV+7SbxfaYT8TyVf++2YX5ttKX/nxq/SVS195WF/5N0tfOVN33G2+8h9H8pW/A3T0f3N0tOURWxnOqbNEs+3rTJJ+PVyMXxb+jVT2y2qF0OP7Zcif0i8rYZWwSlhbCZaKk5hO2+pxkoXOB3tixElqgp6i7Qc+U6EWEQ/CMltE5ftyzKygs7A2ZcFsS5QFdd7xDNXH+/Sq0rMHHVlAGVKxeS9mtilrAM8utPEe3tOLc1gb7wVg4x3pwAzxw5VcVehv5Lk6J6RK9Z/UwV+e0X13ndFdTOww7hndRuPdfEY3x0pHgXX/kLD2Jv1zCu89QTp5vinIp3P3F9cED2cEH7z9xU935pvtST/vtgveqfmGzyrE9yoZv4aHnzEe1Q+TW59dGjoOsBXXZ9N7PlvgTlyfjdXGkl8lv0p+lfwaJ6ySXyW/Sn5NJ7/u5Hyv74wYxyw638tbdy76bFiLt00uXhSeQ8Jn+jeKocc9078h+JrnTP/04rE87Dn80worvbec0kEx3h+hGK/FEUJjvFb/Cy90Yb7BifGaXKk4Csd/VUyj4PxqN/ddxaNnkn6difMAx8Lf5OhFXN+YFc+82EeNyuYF7+pJbx8oPZclJ28lOfFy8pScWP3zICc/58jJdOd7NC+H6swy36OEdafDupPX4/+gXI8f2J70uhvW4/9ywuvxH4q0Hr8d5uC/nvB6/I69nd+kSD2xujzB9fjlkPGF+Me5Hr96/ebq2s3Lt64tL63daK7eqBB8o5WfhazHXxD1i12PX7m1tdfjV26F8B/x3+3r8d6acsHr8cH72Ax/LennaRE+gPIj1Vq98gHYj9yKdqgXN5i0HcpxA5TpBrSJ7dAHOvNkUXGDIu1DxFlkDkh6mb3E/ZH1PWn8xhbWPw78Dv2e9Mm9vbjvJ9z87ka7F7fV/5vzXZhnOjCVfWb8vZNzklqO3G+lnKRivz2R/3vS3P4Y35N+TrsLn69Z+ht5kdLy9+tduFzPLjUGtlOZx/tJx4x5DITGjJ9R8BhQvOP4K8+b6TXBNavg+Gu5ZlXCutNh2RhV8YJi/dWu7jNfOevMplPQHqyP9+lVpWc3Hd2X1xdtCHpins+ifN4G4WlExIOwOP6K/GUfqKCzHzZlwewMlAXEeR7ag/XxPr2q9OzFjiygDM2KZ56NZvUG2fcvIft+2LXyXwP7/mvIvke6TI6UX4uyjHZGlv19iGix+v+W4q/FzI+rq944K3iPS3B+C38nROmvmigbaT/U1ZWbK63mjVtXb11bWb2xmnde8OS/KeoXqwNWWyr+iuMrveagjGOzVSgzGlX8taD9XK0Q/iN+NS9z/HWUPB60u0eFVRsSlsVfvXlNrV8WHHMLjr8a/vIbe8XCupO/i/cfHdsjb+xanf+zIN6rZPwaHn7m5RyPI98gvTj+avzLir+iDYX1f3yI+OtP5rDP0muj3Yvb6v8k2Gdvduwz4++dnK/4tjtk3WGHoGGS8Vduf4z46ye1u/D5UvFX40Xe+Kvqxzt57e23Cx4DO8R763F4s8bzbkTYtzjGGw/2Uot9MOMZ8qug82CD7UrDr3zCIuxK5eMpe511Eb6rzl9kv0Cdg6vOylSwGhFhjSNGl152HuQg++LPI63v/kewL/6K7Aucs41GpT/T/+udv5sjXSsX1VpNPPjLVyc3lpcu3W1jmWVklPH3YERY9Yiw9kaEdTwirHsiwjoSEVbMftw9pbB2RYQVk/d3g9zHbGPMfowpXwciworJr5j9GFNPxNSFMeU+ZhufEBFWzDY+HBFWzPF4OCKshYiwTkWEFbMf90WEVcpEPlj3de7Zd/vcTqcUG9Naum52/xGgt5L04i7IZ7peIXzGP3yG+BcEPUa3+nbPKOvlS62l5mrz5rWrN28uL6+tXa0QfKOVn/F6uZIN5X8V+82OpYtqvbwFfE2vOSjjtfQqlBmNar28VRD9IfxH/HVR/1FoQ6y+VGcbFvz9leWt3ZfN5bx9aXkB6C8dIlqxH9aj0Lm0zGtq8WCvtLx12B2ivZOIO7NuLWhdZTNWdYToYf5wrGpR0KryURpwz/rX08kK1raIsHitvKizn0Ljzl+0rwsX6csbd34VxJ3/RQemt2+iSmVf1nkn/fszn977/rBnt4w/byj8Wz1l3lAJq4RVwiphbe2cQLNBQnMC0b5D26dKz34A5sMyJ1C3J73MljFZQP7yHs1J71M6Au3B+nifXrxP6Y2OLCj7+YjDu22CnkE24k+QjdgAOtlGTH95b4rVvwk24pvIRkS6OPdRyVWF/s7Ky+Kzgaz+b1GsrRg90f1WjxdrK2hvSvC3ery9KewPRtubkvGtnhh7U2ZE/YL3pixt8b0pSyH8R/xF701Bv25UWMPuc1ExqEbn/k4+E+B3nflmK52LEfKtnoLWWIaOAxT9rR5lO3rf6mkIWuuijM/Wbwg8DYFnq/gdMdtY8qvkV8mvkl/jhFXyq+RXya/p5JeKc7Avge9tpTjmsf23f2PEMVWMqOg45qS+1XNE4Ck4jpn7LJNa0i8LRfgsyl9XMU6VK8ZnGWO8iMdy3nN+ph1Weh/6rZ5H9vfi9PIA0l+O8Vr9F53rwnxKB2beb/Vw/FfFNLb6tx+e4ejFvN9+2C7osbJhv9UzC/hY/yDMeDwPz50w/DXRjiL0zzzRw/xh/XO/oFWtXfE4z9vvJawSVgmrhDUMLJtbWZen17jWLxodeFnrF/PQnjxz61c4c6vS5fMO72YFPQvivUrGb5KE+QKqH7y5eFg8CItzJ5C/bGcVZONvysKxDjyUBbXuNkP18T69qvTsGx1ZQBkK8d23C3oG2dUvi2RXPxns6m8lu9o7W1vJVYX+Rp5jfc7Vtfo/2MG/g2iOKxvd3Inx5/GG505kxSGQbpVLX0TuRGg8xZP/GVG/WB2gcydwfKXXHJQdorIqlBmNKneiURD9IfxH/HVRn3Mnhv1mDY7bGLDmh4RluRM4n5ueCPExC1oHvxg6rg3/uHzMbYKvno+5U9Bap7L0Yttxp8CzU+ApYcWD5cW/ip1D/W/oKBmaSfrHrfcNnZ917Csl09sc3nnxqCLi7ohzXLY290fW2aXzUI71fwX4HXp26TvJBp0n3PzuRrsXt9U/CDbor5MNqvouxMcsSM9vyr3Zxij3aj/ZDNXHe+SFPXvXHeJj7kiKnN/yn13K7Y9xduknt7vw+Zqlv5EXad/++6d14XI9u9QYCPHDij03tjsGTM/jGFA+40zSPy/gfFalZ39R8BjYId5bj8Ob6zzvxoPdulngHvI19nsjwl4q7jzXS0sh69oY05mEzW/4x7WufYzoYf6wzb8oaFX57uyzjZI7v3NKYd0fEVbM72DY2GE/zcrVr+HhZ55vEbq/f+5AFy7aPqG236bdDbbftg5MNe9x/NLKap130rnieU/vpX38cYBWcK7LtMcB1L4HFa/mfLq8+ziwjH3kaYAVs40lv0p+lfwq+TVOWNjGkHjhpH1GjheG+oxPBjugjBfq9qQXxzqUHVlwnkawjcTrnAXFsjdtJJX/omLy3pqsWoPjsTzsutm0wkrvLR9Y5dYaD7d6bu3zHB2TN3dqp6An5pkmvM82BqwjEWEdiwhrUcAqv7fjxxjyfqODYz/DnlOcXqx3YsDinERst9ojtZPKULYfJZgYPzRbalB85MUUH8HzYkLiI1b//We7ML+S4iMqP3930q9fGlSGuvAItWcCYynYHpiGsaTsgYLPuF0xepYEPWps70lun3fOfYb04ffO7brSvv2rZGiR2lqQLDRZJ+Acjjh3Qpu5bagfqvTsZc4cnjcnQ8WglR7i/TENKGMdhWsDfC4GzpkWp/VoR9kwnaZ0x056T9Fu/cx8wfoIQ8E3GEXGsFFHF7detnR1kP5/Fel//JY96//0dw7Ksf6/BP3/fY7+59wI5rmiReXspJfJCtPyHzr4i947jN+jSAjXuGSnyP2/6WV2i2enF5wjHzzvGv5aUmi/u2d3NwRf2ZfAd5XOZLtTrZMeE3i2Cqz0nv1wlB3jYcHr4n1n7s2JdiBtM0n/fIpzV5WevdWZw5XsHHF41xD0FOHvLkaEdT4irFZEWEsClsnaMjyfhB9u+GtEa1E6bJnoYf4w71YErXVRxn74isCzIvDURRnrnRiwlB27RO+pvAZ1XgH74Wjjh/rhv0d2mOEL9cOt/j8DO+w9ZIcpHWJlqO8WqQxlkL9LhPLDYwnlYRL2gOGvJYWO7ZYnl2o+NP6sFkPPph++JuhZFvSgH459hvQZLM8PRxlaprYWJAubc/gq0DcrcB6DNnPbMFe2Ss/+ypnD89o/y4IepYcaVIZ6iHUuxhpYf+GcyX64sj9QNtgPV7pD2UpYD/3wI6LtCEPBNxgx7RzF71Ad/feko60dob6y1T8OOvr/IR2N75u/550RU6X3knu7sLffq+vMdp4XvfdG+cfsD1eoHSpWzPRvmwL6kb/eeb4F0xg8Fxr+WtLP5yLmQhXnU3kg6syYrBhlerEteKedUZHes2+MssPnEkz6jG2Ob4eesf1gZ+zEiG+rGG7M+FvMGNtWXO8u+Ny9YN+Yz90rKC7knrt3zOFdyLl76T37xtN27p6KN7O9qr4xwrGq9GLfeBi7a+3e7juIL+8a9Tawuy53YHrrTCpHiM/mU7ZvuUbdP5aUXKr58E5do1b5HtOyRs15ZqFr1M9y5vC89o/a26T0EOsa1ENeHk2Wv51e5Rr17StknTFLR38u6ehB5zyxb2z1/9NiF+Y/c3Q0rxV7+dpIK+djXyNfsih7WvmSnE9Z+o+l/zgqrPT+bvAfv6L0H6PBKv3H0n+MCWva/MdXRvIfvx1sk+8q/cfHr9J/LP3HYf3HHyz9x0zdcbf5j2+K5D9eAB39U6SjvbOA1Tlp84JWnhPeNgVrkd5ZaQXvlw6eLwx/LdF9sR6Hnhb3p9HD/GHby9MRODbYXsrra0w7rPSe/Ud1Vtq0nNu5HdrD+tI7t/MxZ+7Je4aB+saMF9PJq1eL2G87bb4o7yFIr/XOb3O0q1X6pl1eVAif0cP8GdY3Rf8MyxDPNPimqNPYtlPf4FB7Y9g3bcB7oXbPB8nuGfZs2j1g9/wPx+6xdqvYIO/NRRnkc/5L37Tcf3sn77/9fyPGlxcFPUoPZX0rTelc9FtZfzWAFvZNlW3j+aZKdyg7jO15z/dEGAq+wYhpQ3nnTQ3S0bsPdt/BdoT6plb/P53pwtzbgRnTN+U5ZA7gqHbzHHJfh6bSl+1epS/bj6f0ZfNd1o6ifNnFzrgtfdnRYTUiwir9zdLfnDZ/8xlkywzrb3472DKPOrZM6W+W/mbpb/bepxf7m5/rzOGlv9nf73eyv/mFkfzNC6Cjv7gAf5PXQr+s9B978CVJ6T+W/uP0+4//uvQfo8FqRIRV+o+l/zht/uNrI/mPe8A2eV3pPz5+lf5j6T8O6z++qfQfM3XH3eY//nKs9crTXZj/ZQj/cSbR/saV9u3fce1Bs/aoPWhID7f/vxIfTU6VvCAcq6/2vuGci3Mn1v+vMJb/ZL2XVwX5irc8Wdnu0Gz1fxdofl+HqHJf6+ZV7msdEVZ6fzfsa/2LiPP43b6v9VhEWBPwH+66b/echnssQzzT8O0e5T+Muq91mG/3zNzXfQfx5d7XCnZetQNz1H2tKIMNao86F7xgXzPYHjD8taTQsd3y5NLb11rQeeCbvrg6D1zFrNAXV/43wgrd13qe2lqQLGzO4RgrmBU4eV/rkmhnelXp2b2dMRRjX6vaZ5t3Xyvr3AaUsf7K++0edQ56+e2e21dztGtlkP4/Sfp/2G/3HAf9f8bR/+zno43r+cPj+p6mWh87JOjh9a9l4qONASWLCMfqNwRenM9xXsb6y6AnzM/35nIVv+K5fA1gln5431X64SPCSu/vBj/8UWcOL/3wfLBKP3xr+eFn4R7LEE/ph9/+TefhG5H88G1gh31+6Yc/fpV+eOmHD+uHf1Xph2fqjjvNDx+ko7+FdPSw50u99lQX5rfl8JVrnb+zzifmOcHqv7KDYxpyqj3/sVYMXcHzheEfl/9YI3qYP15Otb1b5lT3yw77j5POqa5Be1hfejnVr3PmHiU7NYd32wU9C+K9YfVqmVPdOwdHlrU7Jqf6rKC1Lsp4HfeswHNW4KmLMtY7MWBZGeodL6c6y6ZLrxg51T8fyX/8BrBN3u7YJtbuInOqUR4mYQ8Y/nHFYpRcejnVRcaq0v/Knx2UU419pvKrh82pLkgWNufw80DfrMDJMeDzop3pVaVn74oYA/ZyqpX9U2ROtbI/vJxqpTuUrZTlP9ZE2xGGgm8wYto5it+hOvr9pKOHzal+EHT0n43Bf/xA6T/24EuS0n8s/cfp9x8/VvqP0WA1IsIq/cfi/ccjcI9liKf0H2//pnbEffd330F8ef3Hj53swnywA7P0Hwsd26X/mPTL0J3iP57tDIbSf+y+f7f6j08iHT2s//ha0NFPdXR0Xv/xWe1efFb/SgfH3ek/tu4q/xHleVg9tRX8x1htLPlV8qvkV8mvccLCNlrZNihj+28WYJo9Mm6baKfAU/D+gOB52/DXkn4+FzFvq/w51e8cB8N3VRyB5euQwHNI4NkqsNJ7jvuqfR7j2mvW6MBTe82Qthmqj/fpxXvCXu74jHlzVlVcpohYbSMirKL3igwL66yANa37TgqKl7j7Ts46vAvdd3IG7rEM8UzDvhPUO2fpvQaUcZwGZZvjvhjfCY0p/GCOmEJ6bbS75Vj/GyCm8HqKKXixXdR3DSpDGTxG7Sn3nfj7TtR8eKfuO1H7I6Zl38khaDO3zdt38tPOHJ7X/jkv6FF6iHVNA8pY5+KaDOsvnDM57qvsD2/fidIdylZim3tWtE/xTcE3GDHtHMXvUB39TtLRw57R8FzQ0b9OOhrfNz9MnXWf/l/v/N0c6VpaqhLu9Qe69D1GMeNKITQsX1Sx34htbE3Of20F2353gv+a3h+F+2H0JMJ6MCKsvRFh7Y8I60BEWPdGhHUwIqxdEWHF7McnRIQVU1Z3R4QVk18PR4QVUyYOR4QVk1+ViLDYHihoLr7sxZQLnitvVgif8SlJ/LmyoJxjd65UeZp558p9cD+qfGyPCCvmOD8eEdY9EWHtiQgrJu9PTSldCxFh1SPCijlXTqusPhARVkyZODmldMW0g2PaKdMqEzHH40MRYU2rXj0REVYlIqz7CFZFwFI+vtVdEPWVnZPKscXNXvRlX/AlX57QNUd/cwDSCNuXQcBD8G4FkM3R8yTpb6j9vW9A+UMCVhr0+v7OyFKbkixBY9yH4SwIPGaM4wQ4iYUWw18jWiPTs2mM7yZ6mD9sjNcFrXUqSy9eaKwLPHWBZ6vASu858QJlx3i4Q7xXxKKN2nCn+mqG6uN9evGGu8/ujF+1aKNkZ7fDuwVBz4J4b9ixX0QSxwMRYT0UEdYhActkrQHPJ5F4YfhrSf+kWoQOaxA9zB/m3VFBa12UceLFUYHnqMBTF2Wsd2LAsjLUO4foPRznC1SGss2JF2h4hi7qfdkD3XcQX2jihdVvwaLeV5D9oHSIlaG+85IyHqD2oPzwWEJ5mIQ9YPhrSaFju+XJpZoPjT8FbabdTLw4IehpCHow8QL7DOkzWF7iBcpQg9pakCxszuHHgL5ZgbMObea2YRJVlZ59szOH57V/GoIepYdY16AeYp2LzjfrL5wz2e9R9gfKBideKN2hbCW2uWdF+xTfFHyDEdPOUfwO1dHfQzra2hGaeGH1/+lEF+b3ko7G93fS+1b2ms47BR90IjfQGa5Q/1Ql7lj/TNCnvBY6h5Q+ZQmrhDUZWHdybOAXtlBswLNRPB0+LB6EZfOv2qDDiQhoCxUhC2ZPoSwgTt6gg34g2mJVevabjizk3aBTE/QMsmt+O5Jd8+tg1/wu2QZqzHjju0J/I8+xPttIVv9/kI1UTKLI6poX6zLcDxWEO2R8If4FQY/RXRNlcyPQemnl5trajZu3Vm81b7YuX+4bQ0YrP+OFILUINSPqFxu/W10yuZptd+EfAr6m1xyUPURlVSgzGtPxfpDoLybet7oUwn/Er3zIZ0Eb8vSliouhPzAqrN1DwtqbZOtw5feaDhvXh8iMrqwPkS1Ae7gdqI+q9OxvnflGLbwq/0Ot6bBtxrp8PQp/lm6o+T4e/OWb3ppDseO01QrV6YZf6e0i/FKlh9WY4riw0ilYxmvjDYGnIfAoWA9HhLUrIqzDEWHdFxHW3oiwFiLCemBK2xhTVvdHhHUgIqx7I8I6GBFWzPFoYygk/liMTxmu59k+Lzr++IDgqxd/VGuDKiGsTDDPB6tMMJ8cXTE3Y8WUiZgJwDETk6dVvkzPq8Ms2VcpOnZoMpUVO9wO7WEZtPv0qtKzT+zs9lO+3HbBu+0O7xYEPYNih895UOMMjR1a/R+C2OFzH+zF7R3SWdD6YHBsjdcHiz6kU60NeId0luuDxcJSMWz+YMRWXaO64eiWvGtU2wU9Ra9RsQ7bHhEPwpqmNapB8wyvUYXOM1/myMI41qi+kuaZYdeo2jDPfHUHZt41KrZR7O/QNSqr/10d/AWvUS2HrFE9oSDcofOo4V8Q9LAPjGWjrFGtXr+5unbz8q1ry0trN5qrN3gMGa38LGSN6oKob7x+uBBer9zKu0b1BCqrQpnROL41qpVbIfxH/HVRn9eoQvuyLvDwGtUosHYPCStkjQr10bStUbFfE7pG9b0R/Zq6oCfEtyhorg7OX2e9V7Rv8UAgXz0drcYk293DjqNphZXe8342lB1bJyt2ru2OSdOPc4nWnw9Ae1if41zGB8b9mDMmlew84PBO5aAo3nGcpqD9UJu8e1jw7pDDO5zL7R55Z8/eEpF3C4KeQfbzW8l+vh/oDLGfrf7PHO/C/LkyTsNXGaeZUlh3cpzmXWWcZmB70utuiNP8twnHaf40Upzmu2Ce+QuK0yBd44jTVDrMLVZPrK56e/CLlcvV3D7JQpItszVRNlIu8dWVmyut5o1bV29dW1m9sZrXbuIxh/Wbon7BedstFafhWMwclD1AZVUoMxpVnKagmF4rhP+Ivy7qc5wmrw2MeDhOMwqs3UPCsjgNzimmJ7yPVo7ro+JGS9ZHxTlOUxftSC/W09s6nRwjTuN9dL2YQ8dX1tj+NhyIe9oO5C7ITnUPGVX2tjcHqLHFfTjKOH0wIqyDEWHdExHWnoiw9kaEtT8irAMRYd0bEVZMmdgVEVbMftwXEVYpE5OTiTx5bqifirAzrF1oZyBOtjN2CZ6kV5WePRLRzhgmz+2pT9A48+a5fSX4tU/vwFT9xudn8BkfSHNRZz8yb+6JiAdlokZ4vHx8lJeI8ht8HojhH1c+/i6ih/nDtthuQSvH3NKLY6x544QlrBLWuGGZLkQdwPNbQetMrh+txlxeP/oLnPlN6YBdDu8WBD0L4r1Rdbjqh3GfB6JyO0wW0H8qQhbMFkdZQJx1aA/Wx/v0qtKzlziykHctTOUGDbJ1/iXZOruBzhBbx+p/Atg6X+/YOiZH3viu0N/Ic6xfI1qs/qsohl+MnlgNiiftKQh3yPhC/AtJtszWRFkR54HsIVr5Gcfw94r6M6K+8XpfMbyW54HsBb6m1xyU7aGyKpQZjSqGv7cg+kP4j/jroj7H8EP7si7w8AcXR4G1a0hYFsP38sC9GHVBvoDrWy8IHub1rb/fmW9qgnfqQwxqvmG/Tn3IK0RnKTyqH0LykIrxH1vB66fsPxadh6RsRy8PKcR/TO+rcI9liGcr+x0x21jyq+RXya+SX+OEhW1UfhXbLls1bvLuiHET5ZMWHTcZd+7j5PzT8H0vhn9c+Q7KP/DyHfYKWutUll48lpXvulfg2Sqw0nvb9zIopvRhiilt+sFJWEzJ6j/3WBfm3zgxJVtfUn4bx5uUD1XwelOT9XtWPIvPeESdifMAx97+ztGLec94rAl61HphjcrUum/IGl9Bc1F55r/Ak3cfRQmrhFUkLJXHz2t8BdkDfTHp0H06aC+hLVGlZw92krXLM//zrfGpOHGx8fGuLFhsHmVB2X8zVB/v06tKz047spA39l0T9Ayyx8491ItzF9AZYo9Z/SeAPdbswFQ2F8fRR1nj2060WP1ndfCXa3zlGt8w9BOvyzW+JO4aH+f/T+saH8ojzzcFrdc0Pd2HOGegPaw7cQ5l3fgpznwzI3inxpuab9g3wfdGtQlUP3hricWuw4av8Rn+WtLPryL8R+XPqzVajmXiuyo2yTHyvPFULGNfYRpgxWxjya+SXyW/Sn6NExa28U6OZX+LY7vEiGUXGc9AnEXmQaUXr/GpOFDBMbRgG4l90IJi/ps2kopNqvia5y8r/4jH8rA+zbTCSu9D1/h+gGJKw+6RO320C/P/RzEl9Al4jW8eyhaoDH0oq1f097NZR6FeVPmLeX26/+Toxbx7IucFPWqNb57KcI2P4zLoC653fluXlpeWLi5fvti8fOlGs7Vy4/rSpaWlG9dWmtebV68v3by80rp8a2VpZfn6jevXLq1cutq61bx19frlW5duj+dBMvgTJIPzwLsQGbT6Hz7ShfmmDsxBuN9CuGdy4rb6rwfcP0MxzRl6f73zd3PEy9o2C23jOWMOnkf0q4O/hWT4a0RrUXPGHNHD/OE5Y17QqsYX26XzAs+8wFMXZaznh4XFsjUqrFhtLPlV8qvkV7w2mj3Eujy9doj3irCH7GyDOdEOpG2G6uN9knTnTXv2Z449pHT5nMO7WUHPgnivkvGbJGH+m+oHby4eFg/CYj9xm8BT7HpH+Jxv+GtJvywUMecru3mb4Cv78viuijWwjsm7rwrLWMcMC0vpmFFgxWpjya+SXyW/4rVRxUBMp40rBmIxhNAYCMYc8HyjKj27r3M4f4wYyDZBT5H7MhCnNxcPiwdh8Zyvzowq+Iyw4Niw4a8l/bJQxJx/D9HD/OE5f0HQqvIYWS/kXauYdljpPX/3BGXHeDgt++PvgfZgfbxPL85xXHZ0jJKdexze7RT0xDxfLeZ+tZj5xF7O5LCw9ghYBecFB5/Za/hVjmUROkzlTO5xeLdP0FoXZUfgHssQzz6Bpy7KWO/EgKXWIXhPHo7znVSGsv0owcQ1UrOlBq0BfPKh7juVxF9/SK+Ndrcc678c1gA+tQNTrXPl2eeGuof3DHj7saZtP2jR+7HUWqmyuceha7LGiZqfU7p3Jf19hvThfga7rrRv/yoZ4r03kz5Tjc+4CT1T7Zozh+f1sVRuh9JDvFbq5V1i/gPrKJwzP7E9mHaUDdNpSnfU6D21zmv9rHy2nQK3gm8wisx/QR2tvqkQca10adAc8GKaA0wmsuaAK+1uOdZvwBzwlc4cgHziMcL9gvjGZZdbe5Rd7rX/pcRHGyNKHhGO1Vf+AI4znJux/ktBV/zJei+vClobue7JSs2h2ep/I9D8vg5RIbny0+brF50rr/w1L1e+9PW773u+PueablVf/3si+vo1QU/p6w8Hq/T1i/f1T8M9liGereTrs20e29f/CbJP8OzhEF9/0/4GO+9NZOcpHaJy/dnXRxlkXx/lh8dSMXtpw+0Bw19LCh3bLU8u1Xxo/NlfDD2bvv4BQY86iwl9fewzpM9geb4+ytBeamtBsrA5h+8H+mYFTt4vsl+0M72q9Owdzhye1/7ZK+hReoh1Deoh1rnog7D+8nx9ZX+gbLCvr3SHspXY5p4V7fP2mHJd9PWL+mYM+/rYnoi+/sqgOeDdNAd452ik15V2txzrf1+jC/P3nTkA16iRJ+jrK594XOc8ej631/73Ex9tXCh5RDhWvy7wqrghnx/5fuHre/O5iu/xfP5npS/uXUP74rsEraxv04ttzztx32ceX3zS+z7ZFw8+w3AL+uJbyX8eFtYE/IdgX3wa/Ie9Du/2C1rroox98f0Cz36Bpy7KWO/EgKVsMs/OZfsYZZt9cZy3Q33xfQ9338mau/HdjXa3HOt/XaML894OzBBfHPUdnyeEMlin9qD88FgqyNcMtgcMfy0pdGy3PLlU86Hx50Ax9Gz64vcKelTMCn1x5X8jLM8XRxnaR20tSBY253CMFcwKnHw++wHRzvSq0rOTnTEU43z2fYKeEF8c9RDrXIz7eeeghfjiKBt5fHEVs7R+Vn6H4ts0+OKDdPRF0tHD+soHGl2YT3R09Ki+ctF2szoXYJfTfqv/CcRHk+FQX1nZ6zgO2FfeTXhj+srPAJjsK2POAs+NBfmmwXOj4a8RrUXNjSrPR+395LGu9CHKBtuGef2qaYeV3rOvrPIpxvV9dDXmVV/NUH28Ty/WCZ/jzLN589tUDlfM3C0v53RYWFtpDbzgXMpgX/lO+M5Ken8E7rEM8UzyOysqBlWn93CcZ+WNphf7yup7T4PssC8n+2HYHPWPHu7CfAnZYUqHqFjlApWhDPI3mCaQAxJsD0xDDoiaD8cRl0v/K99d5aSgr6zy0hGW5yurHJBp+SYAx7tDvwnwLc4cntf+2SPoUXqIdQ3qIS+3hvUXzpkhOeooG3ly1JVPYf3s+cIIYxpy1Afp6FeRjh42h/zfHO7C/D7S0dgeG2ve+TC76e/0fjuVIW/HsbcZeVohmnB8YnvYF7X6/7HDn7T87Q9rfOll8q3azPNS0efF10Rb1VmHM0m/LKKMs1/+BkcX5T2HqCLoKX38zWtoH9/79hruzWGbVu3bUfvdtwqs9J7PKEXbAfXqz5FeVWeUKruDdcWvgK74RaE3lI7dlvTCsrJ3dN5RZzzG1BlooySEa6fgycwAnnhyq3S318/qLBDj4Q4o25kMxo1ndTxKtN6Tk1aV96biNWqP7UJOWvlbKws5aVXrAgsOrWpNIZTWjfZ4aVXf5vVi/ip+xme4sKwn4p0dVH+HqK9kt0r1/wh0xOrh2/cLVMdgqN/0CrGLkF62NYuyaa1M5RRzfHWrnkH/l449lDenWJ1TXURMtMxF6j4vc5GGz0XiOXdac5HUXgYVJ+WYx7C5SOr76ins2cPdd1D/oI2p5lJe5/7Sw12Y85177/uJKt+Ic5FwTHAuEvKWx1JBuTbBvpjhryX98lnEWArdh2P8ubcYejbjqwcFPWqcYHxV5R8hLC++ijK0n9pakCxszuGYKzUrcO6FNnPbMGerSs8OHr79q+bwvOs8+wU9Sg9xnhLqof1UhmsfrI+9XCRlS6NscHxV0Tcr6OM93Mqe8r5dznUxvhpjvVbFpUN19MnD3XewHVk6+kq7W471Lx3uwjzTuVc+C+cgoJ3O+Tb2XhNgnz/c22YV/0TfokKw5jr/02cqN4JxrwLu5RFxp5eKI5hccswG38WYjfo2+C6i38q+5HD3/UeILvx+t4qZ2v24zjwatHeJfUqr/wmHe9tlOgPH6m4Bh3Ve1v5LxruX8Ko8MLSlFG93Ew3WzvmM+nWiweo/83CXhs97ei9MdU4M0sVxFkXzQk6aFwJofs7hfprHkQuCfad4wvhRDnCM7HXq877CrPmsInjEsppeV9pJDw+t/qcfTjZ5+IKna5gzA2ByPyZQfxaecczKO3cB8Ss9tTcZjFv5IdwfobQqvwr7YA/Rquy9UFp5PO3PSauytfc7tGI7DuSkdaM9XlrrgtaZJFt2EFdd0KDOdeAx8vmHb/+m+snmwax3sN93UpnV/UIBj+ON6WV2qYoRsj27S7yH8FmvpJcX32d7D99Fe0/5z9hHyBNlC+K7zMOvONzF9+0OvlH9dStTcmdtUHtXlD9j9ZV/iX4Vr8nguDsYAGuXg/s+Uf+ggxvpwncZN9Np7xn/Z9vdMjz7Ir3moCxmvCNty9Wnd+lgnVJt9/JG9SPWD+Gl6sc61Ufe5fVjD1BZiB+L8ovjpZL0y0vecb8L4FosztsnzTkzf3u4+/53Ou+zPY1rC7wGhvfTcBYD0tN3FsXh3jrqLIYFAYfnrSx/hvHWCa/yK5Q8IF6mB3W/qp/lN/7A4S4N7FcsJP18QLrYDlI0z+ekeT6A5h883E9zwTK2wn09KD7EsoRjpO7U5xgUw2e5UrF2XFO70k56eGj1f/RwsslD9it2CZoVTO7HJOnPGTA4WF/5nyrGoeJ3bLso3Cp/nPsjlNZBPhDbL2p/pYcbad1o99bfl5PWGD7QuPZOKp+A14LxGc49yi/n/UG/dPj2b6pPfv5wL9wFegf77EgGvLcDvN88rNuXXmjbh9RTMs72H9LHezzz+tXGu/nEj4uwrf9rh2//os6tE73YDhU7xTiS8Ua1/x6iwcr+6+Hu+39L7ys7RcHGHN30QpvYYBRrE7dayibGPqsC3pA+zquz2LbF+iaXij/1CfLnHoc/yu7w9KSnh1GnKxv+SDIYtzp3c9rkrSf3p93bJm9+Tq8Qfqp9TYqfnGuh8hXVfK74aTROgp89Zyy3e9tUH9CmvPzk/S0qZ0PpZu4H1M2stzF3Duc007tef6EtwH5rRbQD93+oPQacq+ntDcF32c/9x8NdfHsb2fhG3b9nZcpONFpj23YVwu3FtxWseQf3oBgw41bxaqYlEXTae5PTlTpe1fOdlXZvu0Nz0Dxeqn6sU33knYo3e/vaOF8jZF8byi+Ol0rSLy95x/08wP1yGvfqHD32Xb+m0X3/vkb2+xyvUuvgFaqTXtOyDl6h9lv9BvXFoHVwbuOgdXDGu5fwhq6DI96QNWWsn7WmfBxoKGIdvJaT5loAzWcEzeU6eL518BbwsIh1cM8em7Z1cI/WmOvg+wbQutHurX8gJ63eWg/iV+t/uLbFeCoZv4aHn4Xk180k/bzk/Qb4DOcelXfOMe1HG7d/U91ypdEL11vDPp0B75kA79Mbun3phbZ9SD0l4xxvQfo4XjXIXmL5xzUzpY+Yn1b/U4TOVT4R+/rbBGzkTZ6cvM+CPvgael/ZKQq2F68yGJPwd2PaxIN0FtuoWN+LV41njbv4eICnh1Gn15N+3vG5ugq3Opti2uQNaWR+hn4fKEQ+lbypb3RUkv5+8+ZzxU88xyW95qBskvHmvQPalJefHHdCfnrxKu4H1M2st7PWYEzvev1VgWee34p5Fhedczh5jdI79xPfZT/3X8H88apGNr5Rz2ZWcRu282PbdhXCrWw7D1bNwT0ot4txq9wupiURdNp7k9OVOl7V862gdm+7vVheeoXwUvVjneoj79Q6sHdmsbdPKOvMYpRfHC+VpF9e8o77GsDdN0S8yhaN0ve/v5H9Pu4HQZ5s9XjV66kvxhWvMryTjFf9KNCwVeJVPy5oLuNV+eJVPwU8LONV2bSW8apePYK/hoefTUO86rHG7d9Ut/xaoxfuMPGq3wR4v9/Q7UsvtO1D6ikZ57P/+JwKu8+SqSLiVe8WOrdO9GI76oJetH+MN3niVX8EfWA2i2enKNhGTxmvKuNVWL+MV4XNz+lVxqu2TrwKdTP3A+rm0HiV6V2vvyrwLDRe9W7nG6tZexBC41VWfxv4uYeOZOMb9bveXizL09HqjDKrHyPHyYPlxatixMqYlkTQiTn+j+Nqd8vs2STiVT1nhLd72+3NtekVwkvVj3Wqj7wLiVepb5d5OVReLAvHSyXpl5dR4lU/QeM+ZD/gN8M4PnYk+32OV90p+wHPUV+Maz+g4Z3kfsAW0LBV9gOuCZrL/YB63rvSTnp4aPWfDDws9wNm01ruB+zVI/hrePjZNOwH/EyY0z7lSC/cYfYDfjrAe+ER3b70Qts+pJ6ScY63IH0crxrXfsDnC52rfCLeVzIrYCNv8uwHvAZ98M0BdoqC7cWryv2A5X5A1OnlfkDdpnI/4NbZD4i6mfsBdXPofsBvJl8p1n7AF5Pfin4A28jet+/xXf7mz/8B88cPHsnGx/EqjGWxbbpT0Blityod7cWMBsUwK4Rb5cl4sLz9gDH2IjItiaDT3lNj23gziXhVzNi+4qXqR15LQt4puzrrm5pIj4pX7aQylFPrBxwvlaRfXvKOe9wP+Mk07pFfvJcAv/WlcF5p99ZXMbUZeMZ9M+i7PYbfaEWfJOS7PcgztsvvyUnrgqg/7Hd7vG8IpldInMej1fPRlb5F+nbnpHWjPRi3R+ug2ISXe4t5PizLnP+BsLAe3vP5xFb/bTCPfYB82xl6R32PbCbplxfkSRasBQfWrgxYFXqG7VPfZ6pS/Q9AW3+J5mylK5Q/yD7zLipjueKxyXFKrsP+qtX/VfCZXwJzSnrh3GbtKNhuXc3rV8WO62V9lwRlfYJ+kuTPjMMfNQd6umW7qK/OoVB7I3h+UbhxzvH8pEnKG/KA+Tnom2zDztf1ZPAcOCNgqfla8RPP00+vOSgrmp9IYwg/PTt/ED85rov1+WxktN24H1AfY87CB8jGVH1SgWeejTkDcN/y0O175evxuFLfhkScV9q99ZUd5vFY2U4oi7w3VPmeHm7v25C7c9I6SJ/z2TjKFvJwe9+G3JOT1pjrNINo3WgPxu3ROsiXZ1qVLz+T9Msy8ozbgjSoOYdtl5mjt3/TuieO9sKdJxqQlzNEO8rvTipTdvXkfH+tX8cZl+ezq6csLl/4fK74ifLDMUq1puHhRn05rfM50sj89OaO9ArR38gntjdxHM8TrFHszfHkmhUvn7scHiCPvH0ayhblcY++K/qepoe9PqnAs9AY3E+QfYR+B9KCbcqKvXPMYjPHCuaTf3u0F5+KHbAMZ9ljbDcoHZs3d93bM+3F1QflJRe9d2ov0YrjmePwmOPD7TqXZLe5lug2Y/+gHr/Svv27g+iIO/a7OYDGD8zF2y/oqVL9dRpblieKeV57BRyrf0DgxVxTzqs4QHhVDiC+o2ST17ms/icAzPd1YHr51TsE7HH1jcrlmUn6ZbsnZ5iePQrtfWw9kTxMEn99xsvlDeHdvoJ5t1/wbp/DOxxnPecD0LNPLZh3ag2tkvFrePjZDMHaHxHWgYiw7o0I66CAZbKG37SJKGvB3/02/DWiNTI9m98q9r6fpHh3v6C1LsrYZ7hf4Llf4KmLMlsPiQlL+Tn8DSMc55y3hLL9KMHEuSn0m7JfRHOk9x2x9Npod8ux/j+BLfgvyBZU84Hag7OfylAGD1B7+Bta6WVjCeUhZh5B6Fgy/LWk0LHd8uRS7a8x/jxQDD2b+fQPCnruE/SksrAr6e8zpM9ged/9Rhm6j9pakCxszuEPAH2zAifH9h4Q7UyvKj1rO3O48jFUf9eTfvnzvm3G5/KgHmKdq85bYj2UXvzdb+VPoWyYTtvt0OfZStbPyhZVfFPwDYbadz6sDVAXOEJ19CtJR+P5A6yj0/s5KMf6/w509HcJ370i6Mgbg8BvYP8AxSCUX8s0/iPQ9eqj2e/zWp/JKvqs3vexca4sQi8M8h05pmL1X0d9YWMDZXq/gGP1Dwq89zl4DxJe5bOqvbBZZ41gO+cz6h8gGqz+64EG3re2X/AB6eKYkaJ5T06a9wTQ/AaH5nsdmnGcct+hDN/r1Oe4S5Zerog2KFlivWH1fxLayPvKDgiaVWyGeZIk/tzFPMH6ar+v2lfN7R/0XVKO5d2Xk1Zlh+HYu5doRfruTwbjRlo32r31H8hJq7LR0Da5j2hF+uxdtfe7kvFrePgZz4/qnIaZpJ+XHC/AZ6hrlN/I8ZJfgznnHUd74e6nd7DPdmXAeyfA+92jun3phTn4IfWUjPN6PdLHcd1BPjfLv/FuXtRX/LT6vy10Yp3oxXbUBb33Ae7fPZrd/qyzmP7/0Af/GGBHKNhGj1r/MhiTWP/CPqsC3pA+zquz+DwFrO+tXx+cIH+8syi8b/co/nh6GHW68rU4FqVw45zkrbdOUt6QRuanNz+nVwg/VZxH8ZPzj5Q/p+ZzxU+jcRL89L6d7p3Vm155+cn+PvKT169RN3M/oG5mva1yWlDvev2lctvYH8Z30R9W8UU+c2eQr5zlh84c6+K7/1g2vlHjmVam7ERrQ2zbjvMRlW3nwfLO1XuCqP+ggxvpwncZN9Np701OV+p9ZTg/8thW/ajWDzxeqn6sU33kXd443/1UFhLnQ/nF8VJJ+uUl77jHsw14rUKdaVIBuFfavfW9XDSDM4hulZ8W45yQkDwSj9aYZ/AOopVjLftz0jronDZPpx7ISetGe7y07hK0qnwctXdsl6BBnfnMeVhNmKuecyybHi9fmuOpKk8F63OsyOqvdvCnY/hrnq5hzgiY6WVypXT6mL7FcK3obzEMOieQ9/WijmWdonIXQ89VNRonwc+Ye68V/71zQNVZ3x4/Rzl3h+NDVv9RGCMcH/HOHVwQsHHMe+2oiHao9RuEe47Wb9R5PhWiOyuHlM9nsvqfDrrrZ0l3IS84lqV0CbaR5yg1n3rnnxR9pr0apx5uj9ZBcxSfaa/WNRKBh9t1JKMsb74pr1mp7z94+aY4hotYu1N5eQcEPRxz/Hwah2Yv4/rPPgGH5wbEiz4j55veS3hD801RjrPyTb8QYL6vA1P1Je5TYdjj6psYOZMvgvaOmjOpzl4L4V3RedRqTXq/wzscZz0xK3r2VQXzroh8062UIzosrAnkyAXnm05Djtx9Du8eELTWRRmfZaJiPA8IPHVR9sx2fFgq/uPlctWpTK1PWBnOTZzLhHvYMJfpu2iOVPFZfHej3S3H+sePd2F+D9mNnp2mvv3nxWBVXI/HUkH5lMH5poa/lhQ6tlueXCqf1/jzYDH0bOabqjipiqtivqnKMUVYXr6pipcWLAubczjmw6qYMObBcdswnl6lZ6935nDlj6j+Vvn4vFak9topPcQ6V8WaWQ+lF+ebKt8LZcPLN92X6DZzPWXfZ/Eta69hWj6ufJpBOvqnSEdjDgzr6PSeY4FW/+fBt3+r8PMrgo688Qp7N4X74c7gzZMncgTmkbcfy34/ay0ffdYFQZfphYL202zqhUG+I8dfrP6vUV/Y2ECZPiDgWP37BN77Hbz3EV7ls6oYqVqbrlA75zPq30s0WP3fEnE47l/kA9LF8SVF856cNO8JoPl3HJoPOjTjOOW+Qxk+6NTnuEuWXq6INihZYr1h9X8f2viCjJzamcSPzTBPkiQsPj8on4JzOA847R+UG5OVbxdKq7eejPiVfftAMhg30rrR7q3/YE5aB+UF3E+0qryAmHtF1do355siLzlegM8wnqn8Ro6X/F8wF37oWC9czjPHPtudAe+vAd4/HtPtS6+e3JyAekrGec1b7S3wZErt9WF5nhf1FT+t/t856ylqPVadxYe5rv94LLv9nA9sZf8EfWA2hWdHKNjeeYnjWa/T+WrYZ1XAG9LHeXUW51NifS/fFPf9jZs/3vqw9y0zxR9PD6NOV74Wx6IUbpXvPW3yNs78ZpY35Cevtyt/LjR/d5L50F7+7n0D2pSXn+zvIz853xR1M/eD2i82aA+F6V2vv7LOC8MyfBf9YRVf5FzNQb5ylh96GvzQ9ePZ+EaNZ6qcT94nFdu24z0WyrbzYHm5rg+J+k9wcCNd+C7jZjpxz9PjuNrdsjHl0six3bOHvN3LGy8POL1CeKn6sU71kXd543wPUFlInA/lF8dLJemXl7zjHvPMea0Cz91Ucaor7d76au3TO4uu6O/SYW5HSL6pR2vR+aZIa0i+qUdr0fmmSOtGe7y07ha0qnwczutheU7EO5xvavU/G+aqFx/PpsfLj46Vb/r8Dv7Y+aZ4Flh6zUFZ0fmR05pvqs5QLvNN9TnPIfmmip+j5JtyfMjqvwjGiBcf8fJN8czSFx8f3I6KaIdav0G4//IJvXDxrIpZ590q1f9q0E+vJFq98/DTi/tbfZuGz5dPEv+c1d3iPc794m+brHf+bo54GY3qO9qIcye0n+Wi5zt49OwbQLZ43XinwzvDlSQ692unwzteW9tVMO/2CN7tcniHc2iP7qFn3xqRdwuCHg+Wd6a5snEWRP17kq5P/6Iv+4Iv+fKErnn6mxfnjbB9VM8UhtXdnkFgPQM+4q3Quwn9zYvts6IO/10X8JWyiXWQ0lOfoPGHOiIq6OopvUEbD/kAZQwmsEOvcCsjzOo/lJPWQ6I+OqYPEK1I36GctG60x0trXdA6k2T3B+KqCxq8xSmr/zqYPN9yPJsedkZRBni8PgC4VNCfjXur/8PCuFfGJU6m6TUHZREnhLW8ARglH14AZpB8cFIUyi+PO/WhAJX4xGN+PtF9xM6g1f/PjnGJziAHerYL2ChzXjtCdSjC/dMHe+Gi/IcYl1b/bTA+Tp3ohan0pjfRqv7mfkwSHTi1dxcE7krGr+HhZ2xMIKxntntpQJnjQ/UehrIiDLHDHXhoiD0seDJD9fE+var07J2OIab6CJ8x77YLekJ4dxjKiuBdI+nn3eEkm3cNKLN75J09+68F825BvDesfC+I9owK62hEWMciwjouYJmsnYDnEWUtePOH4a8RrZHp2UxYP0H0MH+YdycFrXVRxklUJwWekwJPXZSZno0JS9kJx+m9BpTxgSIo27z54xi8x4nFaGdgYvEHaW433a3swvTaaHfLsf61E12Y/4NsVDUfWNlhKGtQGcrgUWoPyg+PJZSHmIt9oWPJ8NeSQsd2y5PLw/CMN3+cKoaezc0fZwQ9JwQ9uPkD+wzpM1je5o/DUP8EtbUgWdicw08BfbMC52FoM7ftFLSpSs/+X2cOPwzvef1dT/rl7zCVoR56mMoaUMY69yiUsf7COZPjSw8L2lE2ePOHos+zlayflS16WOBW8A3GQtJPcyXj12DyM+4LxBGqo3eTT3O4UyfUd7f6i6Cj93buvXiRis+Y72vji/m+3vm7OeLF8oLjS/nYM0k/f7HfeL66v9N+Nb6Uz4jPuE8fCuQdB8kn7Zsx7w5Dmd0j7+xZIyLvFgQ9HqyHBCxPLy449RuB9QcG1bfT36z0MBMHLwu0Wl0MRPGgZOWtGpIVfN9OcPHdhP7mwOVs0n8NejcUdnqpoI3KaER4XoAJs5De2gkwKUMBDV0seyEoyfMZiheD/PcL3DbAcZIcVwDhqKCHAwRr1C6bwHHiPCzgWP1jAu9xB+8xwqt2mBltSaJ5e5hosHZmBUcbRIPVfyLQwLu1Dif9fEC6eGFE0XwoJ82HAmh+qkPzUYfm9J53jFlfoAwfdeofhr8V/GOJ5gkaJ4cFfJbJDWgj7zBrCJoNZnpdaSeSJ0kStgh0TNRHnhh+pUe4/Qo3ygkH+Y/npNULnCD+3YK+EzlpZXk/kZNW5ZiecGjFdpzMSetGe7y0NgStM0m27CCuhqAB3zncuecx8jkwN73wRC9cfgf7/QEqs7rPF/B4wQH7hZ2Y9MIF/hdmzJfppYJJPI8rfY8OkAooId+YD2peyJr3bwEvvs7BN2oAy8pQtliHYGBgNunnJcuuCrhgoIF3cuLYOhMA62EH96Kof8bBjXThu4yb6bT31GLz4c6zSWT7o96oAt6sflQBY4+Xqh/rVB95lzewc5LKjkJZVmAH5RfHSyXpl5fZJN+4fxjgfjBj4flOSLJhO+BQTloVj7HPvSSbh3PSutEeL611QWvRSTavBP3/uhPZ9Iwjyea7wRbeikk2Sj68JJtB8sF6TwWxuP8RVhFJNq8VPtkoSTavOzG4HRXRjkFJNl9JSTbDZnD/CIyPd57QdX4UePKRdY03S3ezrzFIJ+XV3d4XNkJ0t/o6god7lCQj1odeAgu2kYPzCDOiPmhyO+YGtGMm6R/TyIMqPfsZJ8Cc9wRGL5kTecfB+UkvbDDvQhc23h6RdwuCHg+WF5xXOt4Lzh8OrD9ycB4VNF4cnOfjJnmyf5jgcEO2anD+nTQxxcqgf86DGn9Rxr2X+Yv41QTxUDIYd0zjviHqewYz0tfISWtIUNuj9aio33BoxXYczUnrRnu8tNYFrUU7Iu8FQ+sfh3REeCvvsI7InwpHhGGqxbD08rbyjslxkVtPUWaq7d42efJhbcX6gxYO2PjHAArrFGXw43jwtvIajZPgZ8zdFor/yCfjkQpW8c6hvI6g4Ql1BK3+3w3pCC4I2DjmvXZURDsGOYK/3SHA0yWsi86f7L5fOanpUvM13o/rGGbrq6xjmCvUxs3FemqXydFs0j8HqTY+JPAecvA+RHjVYriXAKHoUcf0Yf2sY/oWgAZeWK4LPij97tG8kJPmhQCa9zo0P+DQjPMc9x3K8ANOfWyDgs86Xe1o8o7QsPr3QRt5Mfx+QTPqiCvtRPIkSeLYybygU3faP+jzmtNuJ6vM93HRqpJZlO3JfinLSCLe4bnM6p8CfX/+ZC/crPkvvT9DZVZ3UcCz+Q+3wJsvzPMmliEMHo/pNcrc+D00N3qBD+SD0rV8vLbVXwVePOdkNj7vSCkee578oHzzuFR2qxewVMkUvGiNuNEuOxEAywsEDUrMYNxIF77LuJlOe2+C/opcYEabuNrubbfnf6RXCC9VP6qdVbwDAG1bPoYOdddRKlM7ZlWwttG5x/FSSfrlJe+4XwC4X0bjXi06cXD6pTCOPy3Ddgy1iZH3RdjExkO0TVV/c6LR51K7znaeo12lbFy7XxR4zzp4FwlvaIIo4mV6rJ1ZNnGDaLD6L3DsS+UbIF0hsbSdOWneGUDzdYfmYw7N6T3buNYXKMPHnPq8UMLwFxPNE5w/Dwn4LJNf4NjEDUEz2mdX2onkSZLoBb6QxBzkieFXeoTbr3CjnLBNfDYnredFfRx7x4hWpO98Tlo32uOltSFonUmy+wNxNQQN+I71GcvdV4O+fynZxPyOSsji+eNrBTyb/9B/YJv4flGGMHg8plfeudHefXzdp4NQHffFcwjyQenanVCO9b8ZePGak9n4PLuXx54nPyjfPC6Xku6ldAjL7rKov0R1EHcLypYDYO10cK+I+ssObqQL32XcTKe9p2xi480kbOIW0Fxt97Zb9SPWD+Gl6sc61UfeKbt3J5U1oKxFZTiezlKZ0s84XipJv7zkHfc7Ae4POuPe9FOVyv4BxvHrnHG8LemlWcWyKlQnvcxeRh6OK6GlIehhPfYG6gvrs6w4JLdRbahadPAeI7zKXvbmAUWPtTPLXs6aH3/csT3Vp8uQLraXFc3bc9K8PYDmNzs0Nxya0/uQDVUNpz5/CpThh8yt3tqt1f9Zx15WfiraF1faieRJkoTNT57diPhVrDNrQxnCQjlhe3kxJ63KZsWx1yBala72cHvyfj4nrS1RX9k0yhZq5aR1oz0Yt0erNw8rWrEdSwAT8TDPuC1Ig7If2U5/DOatfyDbnm1W7PcjVGZ13yXgefOg8sFmO/fK5jIYk/hkDfK9CngHyWV65ZUNjguiPXa/w5/zE+TPToc/am3UGztqHlTrQWqzD+tPhbsBz7y8kknKW0+CcLu3TYPmhLzzEW8w8HS8srOzNjc9XqfdfX88PpPmJ9IYwk/1ue5QfrLv450IhHqR59/0ylojNpuP69i7bA99BOyhl1CeDvolLAuzTrtUvAZ1vyczFdHGQb7Zk8g3U7Yu48yKyeBGkJ5+ONXFd9+pbHzW9pB4jYqzqbmvQW2IbR9VCLdnHylYXixz0JzGuJW9w7Qkgk57b3L6Wsdk0I5m/eLFedMrhJeqH5V9wLGVGpTxaYo4p3LcRc2pKpZj8ovjpZL0y0vecY+58vcNEZN5KYzjQ6ey379TYzInqS/GFZMxvJOMySwCDVslJtN0aG44NKf3WyUmswZtLGMy2bSOMyaz0e6tP4mYjPIhKxm/hoef8eY91PFVqMO89PIHcdyeFW3i/MFPhjnn0VO9cLMOBUvvT2fAew7Ae94p3b70Qts7pJ6ScY7JcG6O3WfJFI6vrDX8eVFf8dPqf6bQiXl9FrRPnncqu/0c77Kyz4M+eGmAHaFgT2tMC/usCnhD+jivzuKYFtb3PqN+bIL88WJayi7w9KSnh1Gnq3XP08lg3A14Nq0xLaSR+Tko1yZvThLLm8pNqST9/ebN55Pbe5Y/RnhsQJvy8pNjP8jPKpWhbuZ+QN3MejsrnvRS8mVixZPe3/mec5HxpG+G+eM1ZTypB1YZT3r8KuNJUIb22msKiif9PI37EDtw7nT3/dc5diTHk+6UnPg3UF+Y/GTFJLiNKif+vIN3kfBOMif+x53YTIyc+O05ad4eQPObHZrvlJz4n3XiSQ1Bc96ceG8NcJI58edz0jpoHvdy4nnOPT+A1o12b/2lnLQOyis+T7SqvGK15lvJ+DU8/IzjSajjOZ6EvDxEOPEZjtuWaBPHS38HbMffoniSl3t/NgPebwO8Pz6l25deaHuH1FMyHpLj48mUtwZuvJtPdKyB+Wn1/yAwnuT5LJiD/MenstuftX/uv0EfmE0REo9jnZpeymbFjzCk11y79731zvPmSJf2R7HPqoA3pI/z6qxG574u6nvxpMUJ8idmDoqnh1Gn15N+3vEagcKt4rnTJm8x45eefCp5Q37WCNYoOWeTjHcijSH8xPp5+cmxH+SnF0/ifkDdzHo7a43E9K7XX2gLhH5w51uceBKOTZ4fQuJJVn8n+KFHTmfjs7aruSUkZqTiKuwnxrbtKoQ7754xL540DXvGxqMrt9aeMYxzcjwJbR6OQzWgbJHKUE7RXjtC4z5WPOkGjXukO2vv58thHJ86nf0+x5Os3aHxJLa71zt/N0e8DNeweUIt6gvr36yYBLfxvMDbcvCeJ7wqnqT8cMTL9GCsUtU/RjRY/VWgISTXB+nieJK3lz+U5u0BND/RoXnRoTm95/gQ7l1XMsP1sQ0Kfta+fZxbGwI+y+Q6tPEFGTEzlVOVXlfaieRJkoStvw2yl0LOAvBwe/kZrZy0xtjb5OFGWjfavfWXc9I6aN5vEa1q3lfrrZWMX8PDzziehDqe40nIywbhxGc4btWaDcdLnwdzzqef7oXboHewz05nwPssgHfttG5feqHtHVJPyTjHQ5A+jicN2o/F8m+8m090rIH5afVfKHRiXp8FY1nXTme3Pytv9Cb0wcsD7AgF24snTXLPzjj33HG8BOt78aRJ7rmLmf/h6WHU6RxvQ/3g4Vbx3GmTt3HGL1nekJ+cU67yvULjc5OMd3rxufMD2pSXnxz7QX568STuB9TNDSrLiie9nHwZb59DeoWeQXRyDPGkV8L88foyntQDq4wnPX6V8SQow3jS6wuKJ83QuFdt4jzDXWe677/xdPb7d+p+t7dQX4xrv9tbnHjSuPa7vdWJzcTY7zafk+b5AJp/IWcMbCvud3uHE08q97t164euvar855DY17Sd67MV9rupPXxsO/4x2I7voXiSt9/tSAa8PwR4f3Faty+90PYOqTfu/W5oI3i+NMfa/jQwnhS63+0vnPyirDznD0AfmE1R7nfLr7PYH8X65X43f7/bkWQw7gY8K/e7+fvdzhGscr/bdOx3Q38R5zTTu15/oS0Qut/tlw/evjedrex0xpkVT5qHcqx/APzQs2ey8Vnbi9zvFtu2qxBub11TwZp3cMeIZTEtiaATz1x4HFe7WzbJ/W4x13oUL1U/1qk+8o7HKPaf2hNwnsqG2e92lsb9vGhHBZ55434e4L6Wxn1IPOnlMI6XAuxAw3+nxJMeob4YVzzJ8E4ynvRUoGGrxJOuODQ3HJrT+60ST3oWtLGMJ2XTOs54Esv7JOJJobRutAfj9mgdZKMwrcpGmSE8zDNuC9KgbETOU3wBzFs2h/H7ec60virg3SlnWsdcwxskG+wXoc3lnWndmiB/vHhIeaZ1fn56/vugOSHvfOSdac06XvnX5ZnW03+m9b8GeyjWmdZZMZmXFxST+cIxxGReCXPY68uYTA+sMibz+FXGZKAMYzKvLygm84whYjK7Frvvv/EujMm8ZUIxmbdMQUzmrVswJvMLd0FM5h1lTKbM8YGyOy7HB2zH91A8ZagcH4D3F2d0+9KrJ8cnoN6WyfEROnGkHJ8z2e3PzPGBPjCboszxKXN8yhyf/PxEGpmfZY5Pfn7eNTk+i720xoon7R5Hjg/4oWcXs/GV8aTe+mU8qXvx2L5rcnxo3MeKJ33w3tv3eezAl8M4XlrMfn/UM61xri8inmS8xrjOEUEPxyceob5Q8aRDAg7PR7lzfDqVYpxpbe0MPdPa6j8VaBj3mdaK5u0BNF9xaD7i0Jzeh8STjjj1sQ0KflY8Je+Z1s+CNo56pvURKBt2DRB5YvjV+SLcfoUb5SQknpT3/FPlXwwbT/LkvZWT1qJzfJDWjfZg3KPsqc+T44NzSGiOjzpXoC/HB+atly/2wvViUmzPWt2rAl5IPCk0x2eSZ+SOM8fH5FDZXIcc/kwyx8fLofBydhR/GqI+6sgjxB9v/lC4UadO65nMyAPm56A5Ie98xH64p+NVztRWj4ccGdCmvPzMyplKL87xUetrXo6P8TA0x8fq/2uwh7wcnzwxmax1hpcv6jYmSX7fDM+FfhP5ZoWc4wNz2OsXs/FZ20PO8Tkm6FRzH/tase2jCuHOG5PxzvGZhpjMJM/xmdaYjMqHUXEXjsk0oIxjMiinPTk+NO5jnePzyiFiMnNnu++/8S6MybxlQjGZt0xBTOatWzAm8wt3QUzmHWVMpozJQFkZk+mPyfw+2J9zZ3vhDhOT+SMBr4zJlDGZMiaTn5/IA+ZnGZPJz8+7PSZjH5AbR0zGdL8nMxXRxkExmc8dQ0xmJ/hyR85m4ytjMr31y5hM92L9crfEZI7QuI8Vk1mjce/lrFvZ58I4PkV0KZ8Vcdu9xV34uyXrnb+bI14V4iHGP84Leth+b1K7rO/Rdz8m4LBcIt4lB2+L8Kq4i/KrEC/To3LysX5WTv4K0BDyrXSki/1QzxcMpbkRQPNlh+bzDs3pPcdRrC9Qhs879XkfBcNn/YJtULLEcRer/1RoI8ddFgXNaBtdaSeSJ0kSNgcN+t4E+9zHnPbn/b517Pky5JvpobSyvMf+bgLTqr6bEErrRnu8tC4KWmeSbNlBXCruor6VwWPk02Fu+lyKu/A72O8cd7G6nyXgeTa6mv/Zbjgi3kP4rFfSK+8cb++mcP/+wO37kG/lIY9CYvVW/yrw6avOZuPzYp6sQ7wxq75ZZ7SuJt1L6UKW6zVRf5XqIG4cd2sBsBoO7oui/pqDG+nCdxk302nvTW7/lbbtUadU273tVv2I9UN4qfqxTvWRd8oOb1CZ0mu8502NezXP4HipJP3yknfcNwDu79G4R53E661W9l4Yx19/Nvv9Ub/DyzbTeufv5oiX4bL+Q/tb2eu8fvcy6gtlOzYEHJ638vobL3PsfhVDU33OOjzL7s/y677NsaEbgg9IF9tBiubtOWneHkDzK3P6Kt76qWdDq/rYBgWf19mxDd76L8vk9zh2/xFBs8FMryvtRPIkScLisYP2DPJ83nDa78V20ytrT3koraHfGFT2aYiPgrRutHvrL+WkNYaPMu7v8CIvG4QTn+G4bYk2cfz8x2DO+RGy2Rv0DvbZfAa8NwC8nz6r25deaHuH1FMyHrLe6smU5/fit3BVXIH5afXfLHRi3u/wYhzmpx17Puusm5+FPnhvgB2xlb7Di31WBbwhfZxXZ/F6LNb3zlRYnCB/Yq4HenoYdbqyv+eTwbjVmSbTJm/jPMOD5Q35yedgjbL+P8kzP5DGEH5i/bz8zDoTBedXpZu5H1A3N6gsa634veTLqP6qwDPPr8QzSV9FfqWy0ytEW+hasdX/c5g/PuasFfO5Cbgm16Ayleei5m32E6ftTIVpXysuz1Toj/2g7uS14gaU8VpxaC4RrhV/rKC14hfTuEd9heMO35vJwBlyBuMsPMubx8ZnraizxT3cyDO2y4/lpHWQD805LUjfYgCsUeYn5lPeHOQYc6PS6/gu1uWcIu4PLGOfhHGwnDIuxoN/Y/1tAr7KEWFY9l565R2X9u7jOWEHeuHOA40hY0/lkHlzzKCz+w2/mpN5n4XCjWfAZJ2NHkprQ9RX/avOa2pQmZdnzXsvFA1qn0V6bbS75Vj/2Lnbv2n7viYjHjuTAdP6eIK5XBfz2t6D4oN59arxSK3b8Hy1U8BC2fF8GaNxEvychm8e8LjhMazkk8e1wZ5P9DjNOnvtEoyRYc8PDaE9VC/jGVTv3N8L1zt3PL2utHvrq/7zdJ2Kb2D/sa5T/lCo7ITYRB6toWN3t6BvMSetITlpHq0xz2oeROvGmGlV57nNJNmyg7iULYTvZNlsn9oZs+kY+eJz2fSwHTHsHIv6gufYz9rSc2yrNen4tPFI5TiwThnlO01jime3it4vNCiezfOUWr/0+OnNsYYna45lv8nqf6Ezxyp72dvfgmPea0dFtGPQHpaXdeZb73xuT19UHF5Y/S8H3fVHpLtQ97GfqXILsI0h+3c9uYq5f1fhzpuf69E6KEbZIlpx/uIYJepobtc5qsvz26Koq3ByrpPKD0f+XGnf/t1BNMfVVd1cJ+Md5hwhn660b/9Wqf630Di0XDnMl2kJOFZ/ReDFfDvO1V8hvN4eh2qi5Tgr7/fbAOb7OjC9fWA7BOxx9Y0alzNJ/zjAccV99x3Q3sfWE8nDJPHneG/PUQjvlgrm3bLg3ZLDOxxny4J39ux7C+adssMqGb+Gh5/NEKzliLBWIsJajQhrTcAyWcNc3YiythJCK+KvEa2R6WlVCJ/Rw/xh3l0StNZFWQPusQzxXBJ46qLsme34sFSsjnOzcZzzOjnK9qMEE+cmW3tXcbRndN57/Kw6miNNd6vvYqXXRrtbjvWfeb4L86fIbvTsNNR3y1SGMrhC7eG9AellYwnlIeZ6bOhYMvy1pNCx3fLkEufWGeLP5WLoWTF6nijouSjo2fPx/7uS/j5D+gzWHLx/pX37V8nQRWprQbKwOYdfBvpmBc4laDO37TK0qUrP3unM4cofUf2t9oHwur3KEVZ6iHWu2iPEeii9+MwK5XuhbJhO83KYPVvJ+lnZoopvWTnSabk6v2dYG0DFj0J19HtIR1s7sr5dyLFAq/9e8O3/UPj5FUHHKPGKRyheoXxgpvEKzCPvP5f9Pq+z4rlXiicYr+S5sgi9MMh35PiL1f8g9YWNDZTpZQHH6q8JvBcdvGuEV/msal8s4uU9xdbO+Yz6K0SD1f9rEYfj/kU+IF0cX1I0L+akeTGA5r8VNBcsY5e4rxVPGD/KAY6RNac+x3UY/kWqjzxSssp6yer/I/CQ9/+sCJpV7If7MUn8uZF5iPWRD4Zf7cvlfayD9nNyXPFiTlqVnYd9sEq0In2XksG4kdaNdm/9yzlpVTYg2j4XiVakz95dEHgqGb+Gh5/x/ItzCO//QV5yPAKfYexb+aUcj9kHc9qu871wl+kd7LNGBrw9AO+h87p96YW50iH1lIxzDhvSx3HjQT49y7/xbj7R+oj5afUf6LRFrdegXWDtUPkSFwG38Ua1f4losLLD0AdX6H1lpyjYRo9aDzQYxa4HLsn1QOyzKuAN6eO8Oov3l2N9b//P2gT50xO3bve2V9kdnp709DDqdOXLNZLBuHFO8tafJylvSCPz05uf0yuEnyqOpPjJuSzKX1TzueKn0TgJfnpnTqwNaFNefnI8AfnJ+39QN3M/oG5mva32BKLe9fpL5XSxv43vor+t4pd8JtEgXzzLz302zB/XzmfjGzVeamXKTrQ2xLbtOA9P2XYeLO/840dE/Sc6uJEufJdxM5323uR0pd7/g/Mjj23Vj2p9wuOl6sc61Ufe5Y0jXqKykDgiyi+Ol0rSLy95xz3uQee1kEanLDSfVa2t4h6IUXMZcS027/n5WXvvQ2kd5/n5HMtZyklrjPPzQ2ndaI+X1oagVeX7II1KnhPxjskX54R9NcxV330+mx72dVTeH/MV502sz7Eiq//14PtxPqvKQcP8RS+f1doxifxLz5/w5MPaivUHnWFoPFL6NySXW+XJTW6OLD4/WPHfyw/2zu1T/ET5zDofaD7RY8Tg8Vmx3xkYH2FZUHtIccx77aiIdgw6v+0n9t2+9/afVZJ+PhnOvPsvjlAdxI16LGRPat4zPRYd3GpeZ1rUXk9uj9Lv9wtY3lk5FXoP2xDax7gG+EVOH58inIpv3tw5KHef+Yyy3wqA5emFGGcgMC1VQSe355CgR9mz1sfI45C9qcP08Z/v7YXbEHC9sXpK1Gd5TC/jZQ3KTlFZQ7R3d9LPixB7BOnaaHfLsf5bhT0yOfuiuTLp/TLGM5XvUCNYNQELec7zofFwXtRHeH3fc4swH4bQHjp2atCOn9yr4Y7ic46yf87we/vnPNzIl5A9Hx6tRfucSOvGmGmtCVqVH4c0KhlJxDuc42H1/wD8uA+fz6aHdap3tojSm14uktV/b6DeNLoK1puX8+rN2PYCx9rUWZme7vH2Lis/Quk29iM+4OhN1LusNxsCNsqc145hdOhLSIeqMzQ8O7Ih6rOtlF7eeFA2JutS5AvvnzN+qrNz08v0U5Xq/13gOBrP+X7a/sA5nceR0stYf9iYacj5fqH7dVmusr7dwnp38xu+F27/qnGk9K6Vbc9Je+jYQdv9ZMbYCbU/lO3ujTWvvxF/iF+ucHv7g2P7lzxPZuUSh9C6MWZalS88k2T3B+JSPii+Y33G4+C+zjhI5W7xQjY9vIaHMsB2uKc303u2P6z+QzAmp0BvXs6rN5V8eHpzlHMOeNyp+bUBz3jc4dl9qo+yvjF8ytGbKo6kdCrqbJM5rx2hOhThfmjP7Xt1biCfvTPo3MAr7d76Ss97emDQ2WV8Hp7ilYfbOzewkZPWQXEf7zwfjh02BtAackZOzLVapC9kXQVpLXouYFrVvDWT9Msy7/dFWEgDvpMVk/kEmAs+/0Iv3G1EA/LyLNGO8svn6aAsWW7w5HxMnas1TtuYz27E+l6u5akJ8me7wx/lP+ZdE0L5YR9cneXp4c7KOXm8Trv7vtE4CX7G/Na6Z9Mij1TMgNf31FmhyGOPn+M5i6p4+Tzk8AB55H3LRJ1bxON+FsoanXvUw16fVOCZZx/h+a1vJfsI24S0YJuyzi3i+cTqfwnMJ7/n+BZZcZcse4zthtjf7MnjQw6y+UNyvDxaB8Uo+Zs9OJ55TRN9RG7X6SS7zdsy2oz9451FVPSZLd53j5EePh/hX9HYsryb2aRfLhCO1VdnxWDuDucJLBPe0LOI1Hls7Jd9E8B8Xwem6stG535c38JWfXNe8Ggm6ZdtHCvcd98K7R31PJ2GoCeEd1v1HKfvLJh3RZxFFGO/4VY818hkraCzf4LPIjL8NaI1Mj2b56eE7jHis2fwXbX/hX0GtZdGnYtSF2XPbMeHpfwc3m+G47xBZSjbfBYRzk18zgXaxc/ovJfabW+kORK//+at2fO65XqzC/PHyRZU84HKA1+iMpRB/j7hBM71Cj6LaBrO9VL7eQo+n2fzLCK1J0btV8WziLDP1J4g7ywilKE1amtBsrA5h18C+mYFTo7tXRLtTC/eb/12Zw5XPobq73rSL3+cq4h6iL8ThHrIOy+N9RfOmXwWkfKn1H713Q59nq1k/axsUS9/hOum5QtJP83D2gDet9oG6ejfJh2tzotD/57X36z+e8Bf/13hu1cEHaPkiPwIxSC877Za2ZNhHvnDC9nv89o85nMpnmC8mefKIvTCIN+RYypW/0+pL9R5M0sCjtVfFXjXHLyrhFf5rGo/hsqlq1A75zPq8/kbVv8vxdoj9y/yAenimJGieTEnzYsBNH9Y0FywjF3ivlY8YfwoBzhGVp36HNdh+HwWD/JIySrrJav/t8BDPotInTGmYj/cj0niz43MQ6yPfOD93tge3tPt7QNLL44VruWkNfScBWU/87lRawNo3Wj31r+Uk1ZvXzTiV3vlcR8446lk/BoefsbzrzoLcCbp5yXHI/AZxrOVX8rxmHtgTtvW7IXLZ91gnx3KgFcDePc2dfvSC89tCKmnZJzzAZA+jhsP8umzzuKaT7Q+Yn5a/X2dtgzKUeFzMrYJ2MibPGcm3g998GR6X9kpCrZ3FpHBuNPPhuFzR7C+tz4+ybNeeuLW7d72et93Vfzx9DDqdOXLZZ3HibBCz86ZpLx5Z+cMOt8vhJ8qjqT4yflNyl9U87nip9E4CX72fKeg3dum1QFtystPjicgP3l9XJ1fqnQz622VM4N61+uvrHwGLMN30d9W8Us+q2KQL57l516B+ePzmtn4Ro2XeucUWRti23a8B0PZdh4s7/vZg85BYtzqHCSmJRF02nuT05X6LCKcH3lse+f+pVcIL1U/1qk+8i5vHJHPNA+JI6L84nipJP3yknfc4z6tN2bkKpf7Msa7LyNkD+so5yYxrd4e1rx7SIqm9ZCgteg9JF8Gc9Urmtn0jGMPyUvA9+OziFRemcFML+8sovHsOWnl9ic8+bC2Yv1BZ1vxvg11ThHLC8JSuW+TmyNbhed3D/p+hfEoZA/xuPbwfFtgfCR0D88rmoPbURHtGLSH52FaH/K+G2plHwFd9G8dXcR7gIxvai7He4vd83rieufv5ogX6ypcp1HnFbH+e02Gz4NrAA0Bx+7PC7wtB+95wqvWh9QciXiZHiXXWP8U0WD1/4OQa+5f5APSxTaFZ6uF0rwtgOYfEjQXLGOXuK8VT5S8Ya6CsvG4foPoZ/hZdl/eOf+NwMMX5Jzzr7R768c+V4ztM2xPyNkt48wlz3N2S2sArRvt3vrLOWkddGYif68X6ePv0rGtq34NDz/j9SG1v0PlLjcIJz7D9SFvLcHqvwPmtF+k9aEGvYN9tj0D3i8BvMeaun3phbG0kHpKxnn/H+fQ2H2WTOH4YvnH88G9fB5em/kNx/4J/bY4xgMfa2a3n20wK3sX9MFHAuyUvPsnx+Ov6Pgy9lkV8Ib08bD+b13U99aHzk+QP4cc/gyKJ4TEXbxzgJB3WfuuEFbo2bKTlLdpPUtvFP/YaJy2/c+xz7hg/1jlXyjdzP2AurlBZbhfFue0jxTkt/5x/fa9OnuC1xAH7a3cBuVY/2Mwf+xvZePzzmtoUJkXr/XOHolt21UIt7LtPFhePHVQPhfjVusPTEsi6MT9CI/janfLxnR+jVwfinmuubdWjLxU347gvAV1zrTaY8Zrv+pMD+/7FzheKkm/vOQd97in+mdo3IfEq7621X3/gVb2+3dqvOoo9cW44lWGd5LxqpNAw1aJV50VNJfxqnzxqmXgYRmvyqa1jFf16hH8NTz8bBriVc+GOe0ZrV64DXoH++xsBrxHAd5ntnT70gtt+5B6WyVe9WlC544Sr/rMVnb7s+JVz4M++NoAO6WMV5XxKsWfUeJVZ5PBuMt4VXi86gzBKuNV0x2v+lrylWLFq752DPGqb4T549VlvKoHVhmvevwq41VQhvbaqwuKVz1viHjVzFL3/dfehfGqH5lQvOpHpiBe9cYtGK/6yTJe1cfzvPGqnynjVWW8CsrutHjVb4Nt+hs54lXnMuA9BvD+MDBeFVJvq8Sr3hM5XvWHQ8Sr/gT6wGyWMl5VxqvGGa86lwzGXcarwuNVpwlWGa+a7niV6V2vvyrwLDRe9aATr2IbGf3YkHjV5ncLwM89vJSNj/fgqv1T3v5c7+w7o1XZdt43IO72eNV4vj2xteJVaPNwvArnM45XhX7HEe21wzTuY8WrPrr79r0aa3zW1KC9+SHxiFl4Nu178z1aY+7NV7DmHdyD7EvmU16feBTc3G61d57rsp/B/YFlHItiHCynjIvx4N9Y/34BX52bw7Bifa/0RTQuD2XQliXro5yBwfOJN84ULE9+BsWeGLeK7TMtSn64PaqPDwlYai2C+ziWzfUZTh8z/UXzWY09D5ZnKw3SjYxb6UamRfVxVuw2q495bcjTCbH6+Cm7NdxR5lAv9jDJOXQxJ61KTrw4NPYlx1KxjbzezWsSioZqon3tjXa3HOtf7Uxmqb3KZ6KoNQeE6Z2JYu0o2M6+WLSdHRoLV+dONQhWQ8BC2fFiEkbjJPjpxSQGrUWEnDGjYvfqjJks+whhqZgZ8z/rnO6sePFXwBjJcybKbE7ah9HLC6SX1ZhFuFfavfWVfHu6bpAP760NhZx5rcaD1V/LSWvMM68H0crz3cWctHrn7ylasR2XctK6MWZaW4LWmSRbdhBXS9CA7/AZ2Fb/FRCj+09L2fR4Z7RnzQWhZ9Rb/e9y5tgVaJ+aj7w51toxiXOyYp4lOehMUI5X4ZmdrFPUfBR6jrHROAl+xjzHWPHfO3dXna3v8RPl89EMWucTPUZ4Xdjqv96ZY70zrWcEbBzzXjtC51uEe3RXL1xlz3gxi7zx9/Oi7So+zuf5Kr3KfYR6DOmy+YH76M1Cj6lxZHQVbKuuqHE0zvPnWRZxDgyJPSi9xHI1n2g7i+MJVv8XnXGkbDG19hdCe+jYwTNyf2lBwx3FVh1lvcnw25hpQlmIrYp8YftvLSetRduqSOvGmGk9L2hV9h/HRVlGEvGO9RnnYP0e2H9/uZRND9t/KANZ33lCvYn1s+y/PwjUm+PJi2lezmt/KPnw7I9B8mE8U3qTx53SPXDMWZD9gX3EetPq/9mQ9oc6sxVlzmvHMDr0fff0wo297mV4vTU35Uc1qUx9q4bnNuVHpZfpJ57b/lfgOBqPX6TtD+/7GYO+8ZV3/uL1eBw7IXO4Z8ejzavs+KxvU/yTM45wHHrf8CjK/vgOGjsXOmWh9kfssWb4Q+YehfsCPMuyH0NpjZHzHUrrxphpvSBoVXnjSKOSkSTJ1ntVqr+vQ1DajhPL2fR4NmjWHpBQ+8Pq39fBP0hvGl2TsD9QZlhv5v0u1iD5YPtD6VTuf4Tl2R8qLx77yOBxXvxR6CPWmyqXSuVgXQDcJnNeO0J1KML9yY6QqTVJzpe0slfAWDi7nP0+r2l6/iHe256tJsFa7/zdHPFiHuL+vKagh3XBKvWF+h6tyivgcY94lxy8LcKr9gV68qDosXZm7Qtkubb6l4Vcc/8iH5Au9qkVzfM5aZ4PoPkpguaCZewS97XiiZI3/I6LsjG4Pu8BYvhZ+g/nHITBc47V3wAe8r5AZXehjXel3Vsf9a1a5w3Jx1A6WPk47Asp3J7d5X3zQ9E66Jsr7FeptSsPt2d3reSkNdQf8fK31b6RSsav4eFnvC8Q5xDeF6h8FmyTPcN9gSquzvGlfwZz2vOWe+Fm+UaVpP/cdav7eQDv85d1+9IL91CE1PP2/imZyuPDpFdI3BrhMz+t/g3H/kEZ4Ny3GQEbeaPaz/mWVvaF0AevCLBTFGyjZ9r2FXn2dezvRJnOqYv63r7A8cRt8u9jU3aHpyc9PYw6XcUQtyeDcSv/Y9rkDWlkfnrzc3oNG0dR/ORz11Vup5rPFT+NxknwE2kM4SfWz8tPziFHfvK+QNTN3A+Il/U2ri/hnPYK8pVUf6Et4PmteC5Im/xW5Qcwzqx9gfNQjvW/G+aPNyxn47O2q7mF40FevFDZiUZrbNuuQriVbefB8uJ5g74TzbjVt12ZlkTQiWdTPI6r3S0bj67U+wJjrhl4a3XIyzrVR96pmPw8lak1VCvD8cTxKhXjxvFSSfrlJe+4nwe4zx8iXrV/pfv+T96F8aqfnVC86menIF71C1swXvXLZbyqj+d541W/XsaryngVlN1p8ar/Drbpn+SIV53NgPc+gPfhwHjVh++geNUHIserPjxEvOpvoA/MZinjVWW8apzxKj53vYxXjRav4nPXy3jVdMerTO96/YW2QGi86mEnXsV+g8lMaLzK6j8Ifu7SSjY+jledETSr/KWQWJano8/As1H30eQ9x8qLV03DOVbGm/Icq7B4FdpDnDeL44nnOhXLwvFSSfrlZZR41T90FizUWON4lZW9GsbxpZXs9zleZTwJjVddIFjrnb+bI16GS51/fkHQw3bw06gvVExCnRlj902Bt+XgbRJeFa/ycpYVPZhj58W3+vJsgAaOVy0KPnh7lhTN8zlpng+g+VmC5oJl7BL3dVYsk+VNnafQdOqz38XwWa6QR0pWOV5l9T8VePiCjDjlTKLt/yvt3vrKZvfmXi/GhPiVL8rxPYUb5TBrX0IorUXn4Hv76mLbNCE5+AsCTyXj1/DwM45X4RzinbvOMTJ8FnruutX/ApjTbqz0wuV4CPbZuQx4nw/wXryi25deaNuH1AuJtyB9eWK/6ZU3vzzr3PUXCZ2rfCL2pdS+B+SNav8ZosHKvhL64NUBdoqC7cWrxmMTTz5+wL5p6Lnrk4wHnHH4o+wOT096ehh1utrbfi4ZjDs0vjJJefPiK4PWgPKuP7G8eeeuY7958/nk9h/l/25Cc0Cb8vLTeKT46cWrvLUE1ttZ8apXk6+k+gttAc9vtXdTuD9HfqsXr0I/NiReZfX/A8wfP+3Eq0wmd9P7yCc173h78djOVzraOzNh0BpEhXB766ax90sybmVXMi2JoNPeU2PbeDOJeFXMtSTFS9WPam8h50mh7vTiVZxDheOJdYlat8HxUkn65WWUeNWraNxjmzheZWUfgnH880SX1QmNSRX0nbYm68fQbwFa/V+hdlm/YNzhtIBj98PGwn7FiUl5ul7Rg+sRqn6Wnf9rTkzqtOAD0sUxKUXzfE6a5wNofsyJSRUkY+63ANUaC8uSykdS9U8T/Qyf5UqtJyEMjklZ/Xc7MakzgmaDmV5X2r311TraDDxjvazseOWTKj3F9onCjXLIPvmFnLQOip+xjaLWJ0Jp3WiPl9YzgtaZJLs/ENcZQQO+Y33GcvfnMJ98iGJF/A7ykmNFVvevBDy2x9PL7OpBNveHMua4JMk/99q7Kdy6Y3Nn6YBQm9vq/y/gRW01Gx+vEeP44rHnyY/yO41WZashL0ubu9fmNt6UNnfYGjHqrpBzNrz1YxwvlaRfXkaxuT/U6VCTnRlRr0LtncnAeaXdW1/ZW9784M0/g/QC6yiFG3VqyLeOPFq9tSalp1Sfe7iRVrZjmzlpDY3JKZ2atcaYRetGezBuj9bQeLW3xjaT9Msy8ozbgvXwPmu+P9IZi+n4+KTVXrgzRIPqd25LNenny7PbGvcnAe4TNIeqsevlQLM8WRn386Dz3LhOVg742Q69qY5/Cej49MK5xtpxp3/zlr+Ph/OQyd7kzvbU/Jlx+KO+v+eNdWW74pzK8ShP3yvcys+aNnlDHjA/1Rzm2aih86dnh1SS/n7z5s/J2Yqan0hjCD/zfhMO+Zm1Fye92J9T/o1al0Gb75PI5lN9UoFnns03A3D/M9l8IXHWN8O88+mr2e+zzahiNRWqk14WH+N5ar3zd3PEi/sUY6Fq/ynH9J5PfaFyv84IOHY/7P7Z58OcyTFYLz9c0YPnl6r6WXuD/jeg4fMyYnHIB/VdL4/mmZw0zwTQfFPQXLCMXeK+VjxR8oaxLS8HriJ4pOBnxfUwXoMwOAZr9b8IePiCjHzQmUTPt1favfWV3+DNZYP8Ky9WGOJfoRyyfdvMSWtM/2rQft+Ndm/92HGskD23ynapZPwaHn7GcyfOIZwXqPIdsE32DPMCvXN1rf43wZz2UvLjeG0H+2x7BrxvAHivWNXtS6+eM2oC6ikZZ/+Oc53tPkumvH3c7N8xfOan1f82oXOV/cN2fZb984rV7PZnxe+/A/rgzQF2ipczOG227TjztDgHCOt7eYGTzLvyfClld3h60tPDqNPVWTR87prCHZrHNkl582Ihg3Lth137U/zkfcEqbqDm82mLncTcZz2In8YjxU/OC1RrfUo3s97OWqN8M/lKsdYof8xZq8i7RjkD5Vj/bTB//I4TX70b1yi9WF65Rtm9eGxPyxqltxcnxhrl7xQUr/rWIeJVj6x13//9uzBe9f4JxavePwXxqj/fgvGqD5bxqj6e541X/c8yXlXGq6DsTotX1WBOq671wvXiVecy4G0HePvXdPvSq+eMmoB6WyVetafTlljxKuNNnnjVQeiDR+j9Ml4VrrPKeFV//dB4Fe9jLeNVo8WragSrjFdNd7zK9K7XX2gLhMarPsmJV7HfYDITGq+y+k+H+eNz1rLxcbyqJmhWuYIhsSxPR9fgWd78uArhVrmeHiwvXhUjVsa0JIJOe0+NbePNJOJVMc+Y8L6pibysU33kXUi8Cu2hJpWpvddeLAvHSyXpl5dR4lWnaNzjWON4lZW9HcbxC9ey3+d41Z2yx/WfU1+ofYzeHtdzAq8XJztHeCe5x/WLhB/C/avidukVssd1JifNMwE0f6mgeVx7XM85PFHyps4wO+fUH7THNeTM1JA9rl8FPCxij6s3954T9UP3uIb4C94e1/M5ac0bW0P6QmJr3h7XZk5aY8TWFgSeSsav4eFnPHfiHMLxKuQlx8jwGcarVLyX12BeCXPat1G8iuMh2GdnM+C9AuC9ek23L716zqgJqBcSb0H6OF6lZArHV9Ye7/lE66Ossy7/XWC8in2pWQEbeaPaXyMarOw10AdvD7BTFGwvXjUem1j7u9hnVcAb0sd5dRb7pljfi1edmyB/ag5/lN3h6UlPD6NOV2vOnA+kcIfGVyYpb158xZuf0yuEn6hTWN6Qn5yvVhOwQvdSGY2T4CfSGMJPrJ+Xn8YjxU8vXuWtJbDezopXvZ18JdVfaAt4fqu9m8L9QEcQQuJVg85d43iV1X8nzB/vdeJVJpO76X3kk5p32G717Hylo739YINimBXC7Z21EnsPN+NWdiXTkgg67b1pO3ctZmzf+2YI8pLXkpB3Voa604tXcUwKxxPrEpRTk18cL5WkX15GiVe9Y3svXGsT+p7zAPdKu7f+oHg589/b16rGvhrfHu7t8Ixtby8HSdF6VtRX5wipddmQvGWklWM5Z3PSqua4sw6tSs5Cad1oj5fW7YJWLx9wRsBE+pWsJ+IdXsurifpKdjm++3e4TnPx9v24/Pwi81/S65nt27/WH8g/e89ig+xHr3f+bo54Wf+osw5VbEHFPnrmGIbX6bO0fx9b776TJftnHd4pWQvhXdG5pirn87zDO5wze3I96Nk9BfNuQbw3rHyr3JVRYTUjwmpFhLUkYJms4RpdRFlbCaEV8deI1sj0tCqEz+hh/jDvvJx7LGN7ReX2rwg8dVFmejYmLCtDvcNrsjjOGSbK9qMEU51FbvzDufgZnffSufHkxe47qLvRz1R2CMeRv/tiF+aZzr3yCVn/Kl9I7VlpUns4JyC9bCyhPMT0k0LHkuGvJYWO7ZYnl8ofM/6sFkPPitGzJuhZFvTs+fj/XUl/nyF9BmsO3r/Svv2rZGiZ2lqQLGzO4atA36zAiWuh3Db8fl6Vnj3izOEqVqb6W+V/sF+MeugclaEeYp2rcoO8XFDWL0g7yobptN0OfZ6tZP3srfMgDAXfYKh1imFtgLrAEaqjn006GterWEen97z+bfWfDzr6k0lH4/vm03i5a1V67zMA9qdd7G3zNtFm9MsSgsW5D0gD4/0cwPvZOfFWkn6+q/gLx3XmBc3ps0+keK53XrGVfSfQ/8KMfsa40HaB23Qdjslx+StqHz77I59P7TJ9gePUWx9pCbxLDt4W4VW5RiqGiXiz9mDNZ9S/QDRY/f8daOBcI5VzhXRxfErRfDYnzWcDaH6RoLlgGbvEfa14wvhRDnCMtJz67NMzfM5JRR4pWWVda/VfAjzkXKMLgmacm660e+urtYtZeJZ37YLtbGxPyH4zb2/QUk5aY+w3C6WVx9NyTloH7blnWr3vVg+idaM9XlovCFrV/jqO07A8J+KdrPyab4O57zvJFsg60za95xxJq/sKAc/LQ1LrRmzLnhPvIXzWK+nlrYuwrYfvoq2nfOcsXZZlB2bZHN8LfPrxAn11K1PfQbU2qG+Ie2uJyrdEn4rXsnDcrQXA8nKMLor6aw5upAvfZdxMp72n1oTHsz9JrwmjTqm2e3mj+lHFxjxeqn6sU33kXV4flr85H+LDovzieKkk/fKSd9zjWvNJGocYx8w6/27Xpe77b3Hez8pBR/ujQnXSa1xrSNZ/WWtIFWq/1f8F6otB5ypwG9Xa1QUH73nCq/wKb11W0YMyoOpzbq7V/yXHr1gUfEC6Qta9Z3LSPBNA8zsdv6IgGXO/05UV+0E5UDa6qs97MBg+yxXySMkq+xVW/zHHrzgraMb8iyvt3vqxc/TYXvDONPHyEdIrK4c7lNZBuWOc0+Dljnl+d3rxeJrkd+4H0brRHozbo3WQv8a0qnl0hvAwz9QYTMQ7fLaP1f/vYN/aHMnvq2+KzVKZ1f1zAc+bZ5VPZf6HsukMxiRyeGOeozZINkwO1brEosOf1gT54+U4D9qHlTe3jW1XL7ancKs9MNMmb8gD5uegOSHvfOTtaWAdP8qeBqPxbt3TkF68zsfn5fDcxPO78dBsSq7DsWqrX+voY/zGkYrrsCzUnHZtF+1C3e/JTEW0UeUDn4H2PujsA8jaexO6D8DqHwBf8eylbHwcw1DzrbKZ2PZTtpbRGts+qhDuO+3civHo6611boW3D0CddejNqWptHveMnqVxH2sfwEe39cI1/Oi/eWcmXhhAx7h9ImV/eLLi0Vq0T4S0sv+2lJPWGD5RKK0b7fHSek7QqnQ8xhQZJufPsKwn4h22d8+L+kp22a/bgHnvhzr3ao9TJeM3vULyetR+xJi5zWrf8jPbt3/VGgzapCxnRcRwLbaOsVSlv2eoPt6nV5WefSrYd5wHp2R/yeGdyrkN4d2kcwiZd6E5hJ9TMO+8vPa88r0g2jMqrLWIsC5GhHVJwDJZuwzPI8pa8D4Aw18jWiPTs5m7fJnoYf4w754oaK2LMrZXnijwPFHgqYsy07MxYVkZ6p1L9B6Oc46doWzzPgBcK+W5COdizDH9crJxTXejn6nskCrVfz/Mty8hP1PNB2qdfpXKUAbXqD0oPzyWUB5i+kmhY8nw15JCx3bLk0u1Bm/8eaQYejb3ATxJ0HNZ0IP7ALDPkD6D5e0DQBm6TG0tSBY25/BHgL5ZgZNzqh4R7UyvKj37FmcOz7sf6bKgR+khzvVHPcQ6F/NfWH/hnMnxQeWHoGzwPgBFn2crWT8rW3TQ917YVvb2HIXogvTy9mSE6uhXkY62digdnd7zGrLV/xHQ0d9HOlrtl/Dyv3iN/z8A7B+41NvmRdFm9MsSgqVy/85n4P0hwPuDOfFWkn6+q/gLx3XOCJpTuI914jpKLy0T/Vb2XqD/DRn9jHGhcwK36Tock+PyV9YEPeyPvInaZd2O43RFwLH6FwXeSw7ei4RX5euovDXEy3m71s6ss+RWiQar/9NAA+frrAg+IF0cn1I0L+WkeSmA5p8TNBcsY5e4rxVPGD/KAY6Ri0599ukZ/iWqjzxSssq61ur/MvCQ83VWBc04N11p99ZX+aq4VpU3X5XtbGzPxWQwbpRDjvdeykmr5wci/t2Cvss5aeXxdDknrcrOvuzQiu14Yk5aN9rjpXVV0DqTZMsO4loVNOA7aK9g/ffA3PdesgX4Hez3JpVZ3T8U8Lw1a5UrzLbssngP4bNeSa9BeRlYhu+irad85yxdlmUHZtkcfw58+liBvrqVodyxfkEfyPNlrL7yLdGn4rUsHHdPCoC17OB+sqj/JAc30oXvMm6m095bMFztbpnxZhJrwqhTqu1e3qh+VLExj5eqH+tUH3mX14d9IpWF+LAovzheKkm/vOQd97i/4MszckzQRsD1Z57LlA9TgWfD5vyo/fghOb15zyX3aFVroyonW+WueOua/I0H7/z69LrSvv07DfuukR7Og91zubdd3r5rhGP1B+27zvLTDa/yt/Ad1YfHCKbV3w8w39eBqfoSz8Nl2OPqGyWTM1Sf5Zn77gFo72MZPEwSLZ9ePgyPEY93FwrmXVPw7oLDOxxnPXlJ9OxIwbxTcbpKxq/h4We8rtWMCKvoM8uGhTWBM5uC1z2n4cymZYd3q4JWb52wQmWIZ1XgqYsyXveMAUvl2nlnC3nfmeR1T5ybQs/WeTLNkd6e6vTaaHfLsf5PPLELc70DU8XNWf+qsy28fdPWHpQfHksFne8VvO5p+GtJoWO75cklzq287llQ7HJz3VPF3ZQvi+ueWbFNjHnbdaV9+9c7u6FgWdicw/F8NhVHxT1c3DaMfXHs+VOdOVz5Aaq/1fmQF6hMrXcpPcQ6V+Vwsh5KL173VD4Pygaveyr6PFvJ+lnZol5uKdfFdc9x5Ulm6eirpKNx7ZF1dHqfdSbPo6Cjb5CORj7wGdR3ij/4xRPyB7+4AH/wRXeZP/iVpT84tD/49aU/GA1W6Q+W/mBMWNPmD35vJH9wEWyNf1/6g49fpT9Y+oPD+oNvLP3BTPruNn/w5yL5g790uQvzFwmmOhMa1115PRfXKvFM6NdQLij2Uda5mKdg7viVy9nv87luJp8zGXzg86IL+sbHpi4Y9tzmx6gvVH5kU8Cx+ssC74qDd5nwKj9V7V9GvLzfyNqZdV50i2iw+r8DNHCeaFPwAekKOYfqXE6azwXQ/B5Bc8Eydon7WvGE8aMc4BhZdupzLIfhc64t8kjJKusiq/9e4CHnibYEzSrew/2YJP58yDzE+sgHw6/22vP+9UFnRnEOyEpOWr1zRhG/splXk8G4kdaNdm/9tZy0Dsq/XSFa1XmxCwLPqHMuziH8bXrkJccg8BnqMuWLcgzmozDX/s/LvXA5jxP77GwGvP8b4FWeqNuXXpirGVJPyTif64b0cax4kB/P8m+8m0+0PsrKmf0noXPVuUd8/klNwEbeqPbzXp/NOB3YKafofWWnKNjeuXgGYxLnamGfVQFvSB/n1Vmmc1ScxPs2PX7raNz86YlVt3vb633vV/HH08Oo05X/xvEthRvnJLTbH6/T7r4/SXlDGpmfod/KC5FPJW/e9/OUj6jmc8VPo3HazrX0zqFKr7z85BgC8pO/TY+6mfsBdTPrbbVvAfWu11+h55Hbu+hjq5gln9k1yP/O8nMvwPzxjCdm4xs1Rqr2LbCdH9u2C/kWgAfL+waC2lt10cGt8tuZlkTQiWctPI6r3S0bj67U+w96zrxp9/Jm0H6qEF6qfqxTfeRd3tjhKpWFxA5RfnG8VJJ+eck77vH7I9/rxJuyxvGPwTh+jmMH4vfYkCdbPV71mdQX44pXGd5Jxqs+B2jYKvGqFwiay3hVvnjVTeBhGa/KprWMV93+W/0aHn42DfGqr4M57aue2At3mHjVvwR4LwuMV71syHiVzbNKpniv27jiVd8kdG6d6MV21AW9aP+8bIh41bdCH/xYgJ2iYBs9ZbyqjFdh/TJeFTY/p1cZr9o68SrUzdwPqJtD41U/VlC86uoY4lVvhvnjN8p4VQ+sMl71+FXGq6AM7bXfKChexfs3856X4X2vMUn6+a/2C+CczudleHstcO4yPbsg6Kpk/BoNSQbNdUFflWhAGeB421bdK/PH4GuMut9Dfa81hHdbda/MnxXMu3KvzHCwyr0yxe+V4e/cbvW9MmwLDLtXpgbvYR62HdTFczra1fjuRrtbjvW//JEuzNnOfblXptCxXe6VSfpl6E7ZK7O/M4bKvTL99Hm2kvWzskWnfa9Mlo4+RjpaxT4w7yhrr8w66OiTpKPxfV7/sLInd96xscXfB13v/N0c6Vpa8/ynYr81v7QWquOzbGGkuybK5kag9dKlG7du3byx2lq9vrx0rXW5QvCNVn7G/q8ag6dF/WL9oKVlFeM5D3xNrzkoO0dlVSgzGlN9eZDoL8YHXloO4b/Sq1if1+by+meIh23fUFh7k1655bHNuknFZLy9dPZuqnde0Qk458lN+lLQW5+QoQsxVlQTuE0WcN4al0/fEvSwz/5sapfKMbkg4Fj9JYF32cG7RHhV/hH65Iq3F4gGa+d8Rn1ec7f6zwUaOP/oguAD0sWxQEXzuZw0nwug+TMEzQXL2CXu66zcNF4rMTnAMbLk1Gd9z/A5/wZ5pGSV7RGr/3nAwxdk5J3NJNrGvdLurR/7e9Tsi2J7eB1n0DeUWccv56Q1dG11t6AvK1csi9aN9nhpVT7GTJLdH4irKWhQ3xdmufvfYT750kd64fI7yMtFKrO6XyLgcdw+vfhbBVnrq1+aMcell4rJ8NyrdDT6EcOuryLcrLn6q4AX/6bAONAk1ldrhHuc66uMu1xf7V5511eNl9O2vvpvMmKx2I7QcY/rqxzjPdopC11fPS3oqMAz5v8ZUR/3TBl+k+XjUMZ+h8J9FJ7x3HomJ62Loj7SwPtej0LZIpVhGzlHU61pY9uutG//mg2JvlgRforRjv7CWUFPleq/LkNGZxNtHxgcq39O4MV5wXjCZ0W+zvFT8B3Vh3z+pNX/IYD5vg5M1ZfsQxYT9/L7RsnkDNVneea+e4MTU1bjTMWE1D5HHiMe7xYL5t1ZwbtFh3c4zs4K3tmzNxXMuwXxXiXj1/DwM14zjZF/UsRaf4x4urdHoeAzfIPX1A1/jWiNTM/mOqCKfVxweKf8K2W/4PyMZYhH5bKqNWteU48BS+3L5nUuHOds/6l4bMh6TdbZZo/RHGm6O/T8Sat/9UldmO8iX8qzUVDfnaUytWbm5eAUHNMKXlM3/LWk0LHd8uQS51ZeIyloz+HmmrqKwzQFPbimnrUnEfeq2nWlfftXyVCT2lp0DF3FshHnIrSZ29azp4Ge/XdnDld+gOpv5fvxebaoh85QGeoh1rkqTu3Fili/IO0q/rjboc+zlayflS2q+KbgG4yFpJ/mYW2AusARqqP/F+lojO2xjk7vOYZt9f8e4l0fIZixzp88Smtm2EdnMuh6Acwd/88j2e/zfn6Tz5kMPow7v3iQv8j76q1+9Um97VL72M8KOFZf5TU3HbwXCK/3nYQk0bzlfWUYw1H1zxENVn8H0MDraWcFH5CukG9Rns5J8+kAmncJmguWsUvc14onjB/lQK1Nqfocy2H4TaqPPFKyyrrI6h8AHvJ62jlBs4r3cD8miT8fMg+xvhfvx/bwmqz3PdP04phfMyet3hoY4lc2M6+TeOvN6bXR7q2/lJPWQeck8FqJijsvCDyjzrk4h/B+fuQlxyDwmTqbBN/nGMw5mNNOPakXLuesYZ8dz4C3CPAuPkm3L71wbS6knpJx3o+O9HGseJAfz/KvchjUehrnMKwInav2jFo7vD2jyBvVfl47tbInQh+8gN5XdoqC7e3nx+/fpNcclMWbS/LvVw+N1YTqLNM5Kk7i7eef5P7znlh1u7e9yu7w9OSgvB9v7Y7jWwo3zklotz9ep919f5LyhjQyP735Ob1C+KliR4qfRwmW8hHVfO7lg06Cn0hjCD+9nNtB/OQYAvLT28/P/YC6mfU2+tw4p72AfCXVX6H7eu1d9LFVzBLHJs8PytfJ8nNvwvzxtU/KxjdqjFTlK7GdH9u24z31yrbzYI2Sp8W4Vc4C05IIOu29yelKnW/indUx6DyxEF6qflT7cTg3JDR2yOd4hMQOUX5xvFSSfnnJO+7PANzHaNxjm0517nkt/s0wjr+B6MI1W46j4f241pitrVlrzDPURqv/rdQu6zOMO5wWcKy+Wts+5+A9S3hVTEr1OeLl79Ogflf1s/T0K5yY1GnBB6SLY1KK5qM5aT4aQPN3OTGpgmTsEvf1oLg7y5KK76j6HNsfND+rNUyEwTEpq/9qJyYVmhPF/ZhA/W3wLGu8YH0VO1d6iuOaXp5YeoXs4/Fo9WJeiF/5v+dz0srj6XxOWgfF+phWb//FIFo32uOl9YygVeVZ8foVy3Mi3uHcNqv/YzD3vZniWvyOinvwXPoTAh7nHqUX56MfAdjsV5wS7yF81ivplXfNy95N4X5ix+nx8i4ZZzXRc9JRKMf6bwM+/c6TsvFZ2731UyXrLFsod6xflH+ocsis/qB40Azh9mLYCtZRB/egvTOMG+ni81T4rBYVt1S+g/FmEr5DzLie4qXqR5U7zj7AKSg7SmVKr6lYPo97Nc/geKkk/fKSd9wfBbjHaNyrNlWp7JEnd9///Sdlv4/6DWVoq/sV75+QX/H+KfAr/rxgv2JbTpq3BdD8wdKv6ON5Xr/ifxbsV6C9M+1+hUdrTL/i3ABaN9q99S/kpDV0zUHZU2grMJ5Kxq/h4Wc85+IcwmvdyEvO3cdn6uxLfJ9t0xrMadUn98IdxifYDvD2P1m3L73Qtg+pp2Tc5lklU7j3IUumcHyx/Kv8IoSflV+0p9MWtdaNdoG1Q+3VOAe4jTd5YpwHoQ8eofeVneLtp1E2scGYxFpZz94ZwBvSx3l1FsfFVW6s4s/ZCfLnlMMfZXd4etLTw6jT1dpA1r5EhIVzkrc2O0l583IHvPk5vUL4qc7CUfzkvNFTApaaz6ctdwBpDOGnt7Y4iJ/GI8VPXutG3cz9oPbRWdlRoAHnNNO7Xn+F+q32bgr3LzubKUxnKz+AcWbFq7ZBOdZ/Oswfn/PkbHzWdjW38Dq4d+61shOtDbFtO44ZKdvOg+XFgGPEypiWRNBp701OV+p4Vcy8IO87K8hLtY+Q97tgjHUblaHNw7lbOJ44x0XFsnC8VJJ+eck77rcB3F+mcR9iB74dxvELHTuS41XKr/XiVZM8QwDp4fjHP6e+8M4Q4DZiv2btCWG85wivilcpP1zFn3hOzIpXZeW7fpHwQ7h/kQ9IF8erFM1Hc9J8NIDmLxU0Fyxjl7ivFU8YP8oBjpFzTn3en8bws9ZWs86ayNon9lXAQ45XLQqavTM0lD3mrRUNsse8NVCO1w2yrbP89VBaB63Xcq6et7Y8aA/LRru3fuw1uJB9JAsCTyXj1/DwM55zcQ7heBXy0lvDRr9G7W3ieOwrYU77NopXcRxc+aMM7xUA79VP1u1LL7TtQ+opGed4C9LH8aq8e5Pw/DWlj7LOUft3gfEqzyfCWNmrn5zd/qy8hNdAH7w9wE5RsL141XjWcPPndg/q42FzTOqivhevOjdB/px2+OPt+Vb88fQw6nSVr8rxKoVbxYunTd7GGR9leUN+8n5vla8TGv+bZDw15t6hQfzk2JI6E0bpZu4H1M2st7PWYN5OvlKs/KqXkd+KfgDbyIPiVVl5Ge+E+eO9T87GxzEpjFd5tinbgmpdzdqgbDsvXnW351dNMl41rflVaPMcpTKcz7yzp7y1BLTX3kvjPlZ+1fUh4lX3PaX7/p9l6KOtnkP1YWrXuHKoPuzEpMaVQ/V/OTGpad2b8REnJlXmUIXlUH3MiUnFyKHCXPOs8YL1J5lD5dE6bXszPFqnbW9GTFonsTdjD8x9Ng9mvYP9PkdlVne/gMf7utOL92aoc58G+Q4Gn/VKeo3iO7ytE4Qscm/Gw8Cntadk4yv3ZvTWL/dmdK9qu5c3d8vejDUa97F8h1fRuD8O9TiudKLzN9oPxwHnlfbtX7PZkD9F+AUnO/DQPj8l6KlS/acTL9Ua7QkBh/Vf1lnufDbVacKr/AJ8h2lI7/m8e6u/ATDf14Gp+tL6fIeAPa6+OSF4NEP18R7ba8+eDe19bD2RPEwSLZ88to8KekJ4d7Jg3p0SvDvp8A7HWU9OKj379IJ5tyDeq2T8Gh5+NkOwYuT8x1yPVbmVo8JaFLAKzsUIPu+ev3takB++eUZ3aJ4vr/nhuyoONwf3WIZ41HpgXZQ9sx0flpWh3uG1Bs/eQNl+lGB6ZymjL/eMznupXfAlNEea7lbfDkuvjXa3HOsnT+3C/FKy+dV8YGWo79gfUD6eWpPjsYTyENNmDR1Lhr+WFDq2W55c4tzKcdyCzuTdPO9exQbUmiied69i6QjLO+8eZegstbUgWdicw88DfSq+dBLazG3rye2lZ9/gzOHYt15/K1/jJJWhHjpBZaiHWOeir876C+dMi2mwfkHaVQ7Aboc+z1ayfla2qOKbgm8wFpJ+moe1AeoCR6iO/k7S0dYOpaPTe44ZW/1XQVzmuwlmjdpRScL9THs3hfvRToEamycy6PoY0PV9T8l+P2u/zkwGH+zedAHni653/m6OeBk9g/zFGrXf6v8g9YVaozgl4Fj9QbncjHeR8Co/VcUbEe8posHamfX96KwY7Q8DDbx+dUrwAekK+dbh8Zw0Hw+g+Y2C5oJl7BL3ddbaZlbeOI6RRac+x3IYPsdXVYwYYbAusvpvAh6+IGPdcibx4z3cj0niz4fMQ6yvciq9nBYPt7LRuT9CaQ3d36hs5pD8b6R1o91b/3xOWmPkfy8IPKPOuTiHcE612tuIbbJnag0H3+cYzG/AnPZfaO2JczWwz+Yy4P0awHv3U3T70gvXkELqKRnn82PVWe6eTHl7CnBfl9JHzE+r/ztC56r1Nd6fqs7CR96o9p8kGqzs96EPPhZgpyjYRo9aezEY05aTGXtPNudkYn0vp3qSe6x7YtXt3vYqu8PTk54eRp2u/DeObyncoXvWJylv3p71QbkLefNRWN7UmSuVpL/fvPlc8dNo3Oo5/4P4yTEE5CfnVKNu5n5A3cx6G31unNM+luELI63oy7LfWhPtQB9bxSw5722Q/53l585BjPTBp2bjGzVG6p0PYG2IbdvVCLeXm6RgnXBwe2v/Crc6f4BpSQSd9t7kdKXOi4i530nxUvWj+pYF5zeExg459yEkdojyi+OlkvTLS95xfwLgfgmNe6xnuqtKZc+FcdwguqxOaE71MSgrIiZ1tAMPY0PHBD1Vqn86g98Yd6gJOFb/uMB7wsF7nPCqmJTRliSatxwXs3Zm5VQfJRqs/jmggWNSNcEHpItjUormbTlp3hZA85KguWAZu8R9rXjC+FEOVH6Rql8j+hn+CaqPPAqJj1v9y8BDjkkdFTSjvrnS7q1/DMqsPq5hZY0XrI98MPxKTx1PBuNGOWSf/EROWpXNpXKY1BrOyZy0brTHS+tRQetMkt0fiOuooAHf4Ti81X8U5hObW7Le4XUuLLO6zxHw+BtT6ZWVp4xlCIPHY5IkI60VvZzWilDPZemA0HO3rP5nAS+++KnZ+Dhmg+OLx54nP1lrkul/b00lSfpl14stY/tVnOlMACzv3K1BMXLGrWw6piURdGJex+O42t0yXL9LrzkoK9rm7smva/fyRvWjtx/V87+RlypvmGNB6E/zuVuou9ifxvHEtrrSzzheKkm/vOQd93ju1k0a9yE296/DOH7xU7Pf5/i0mrc9e5z163rn7+aIF893aBcfF/Swffe11BfWT1k2F8vgCYH3pIP3BOFV9riau5V9XaF2ZtnjWbnPbccePyr4gHSxPe7ZZaE0zwXQ/K8de7wgGbvEfa14ouYltHOUjcT1jxL9DD/LxsO5G2GwPW71v92xx48JmtEmu9Lura/sa2/uVXam8lGU3cj+iGfbpxfb44NimkyrOgdV2SHKfuGciJMDaA3JuRjFpjlJtHo2zSBaN9qDcXu0DrKBmFZlA80QHuaZGoOJeIf9fqv/WpgXf32A78D5bVhmdV8n4HnzrLJ7zceYnE2Xf41kUB5HXtkwOVQ23VGHP5M856jm8EfFsbyx4/n1qJM8+9TDjTrVW5ObpLwhD5ifg+aEvPOR8UjlmbKOV/67ig8pfhqNk+An0hjCT6yfl5+8DqLWI5mflaR//k0vnt85xst1OP/E6v8XsIdeQjkwKkbMMR/VrqyYz68XFPM5S76fsqUZZ1bMh3OlrP67YA77q6dm47sbYz5erLSM+XQv1i/TEvOZo7LYMZ+/onE/J9oROu7nAO52Gve7od6uzn2Vyo6sd9//a6LL6oTGdfZAWRFxnXoHHsZX9gh6qlT/o9SufZ3n6LvvFnCs/l6Bd5+Ddy/hVXEdoy1JNG93Ew3Wzqy4Tp1osPr/6MR1dgs+IF3shyqaF3LSvBBAswmOiusUJGOXuK8VTxg/ygGOkb1O/d1EP8PfR/WRR0pWOa5j9betd3nIcZ26oNlgpteVdm/9PVBm9dGmyRovWB/5YPiVntqbDMaNcsh2376ctO4X9bEP9hCtSN/+nLTyeNqfk9YDov5+h1Zsx4GctG60x0trXdA6k2TLDuKqCxrwHZMvHiMPrt/+TfXTkfVeuPwO9jvHdazuIQGPz7ZNL14TvgdgW59Z2S7xHsJnvZIk+W0IezeF+9TK7XvrF9TXWbosy3dYgHKsf3q9i299PRuftV3pCdYh3phFuWP9cm/SvZQuZLk+KOrfC3XYfsdxdzAA1oKD+z5R/6CDG+nCdxk302nvKd/BeDMJ3wF1SrXdyxvVj1g/hJeqH+tUH3nHYxT7z8qUXrMyHE887tU8g+OlkvTLS95xvwBwH6RxjzqJY9xW9sPr3fefsZ79Pq8XG95Qv4JtpvXO380RL6PH+g/te+UPVKn+c9d722X9ibbjgoDD81Zef8bwKr8C5wtPJ7MOz/IrsvzGT1/v0sB+xULSzweki+0gRfP2nDRvD6D5eev9NBcsY5e4rxVPGD/KAY6RulN/gehn+Dx3I4+UrLJfYfVfuN7lIfsVuwTNqJ+utHvrK5vlHniWNV6wvopxKFuingzGjXLIfsWenLQO8oF2E61IX4gPhLRutHvr78tJawwfaEHgqWT8Gh5+xnMuziFVqMO8XCCc+Az1gvLLq1T/Jeu3f1Pd8mXrvXDZnsU+m82A9xUA71+t6/alF9r2IfWUjPN6MdLHe/Dy+tXGu/nEj4uwv/T167d/1Z5itAvYbpoXsJE3qv33EA1W9k3r3fd/mN5XdoqC7a23G4xJrNdhn1UBb0gf59VZpnPqor63p7g+Qf7c4/BH2R2envT0MOp0Zd/PJoNx45zkrQ9PUt6QRuanNz+nVwg/UaewvCE/eY/2PQKWms8n59NqfiKNIfzE+nn5aTxS/OQ9xaibuR9QN7PeVnEu1Ltef4X6rfZuCve9nXvT2coPqBBtWfGqrLzo/3O9i+9X1rPx7SRacK17gcruEXSqeZvtfKWjvbVuZQuiHcQxIxWT8GCNEltn3MquZFoSQae9N21r3TgeeWx7c22ShPFS9WOd6iPvrGwnlG2nMhXvVXEu1iUqNovjpZL0y0vecb8d4L61c19kv168dDtG9DitHfimO/iag3Ks/1vrt39RF9jv3Ah03rp4tXVr+eqtq6tXb9xYuX51L8FPgHc7C8B/9eLypetLK9cvXltdvrq8Nnb8l5auNW/dWrnavNW62bxxsTn29t9auXlx6fLV5Ru3bl1funx53PivX7q1tLZ8/fLFyxeXri5PoP2tm8uXr99qtT6O/ca1iyvjxr+2sta6dOnqpetr129dXrl+bdz4b16+cXH5+qWL15ZuXr+4crE1bvy3VleXL621bq0sXVpauXHtxrjxt5ZuXL96rbWycn3lxtK15etj5//qzatrl662rt26duPi2vWxj7/VW9eaF5eW1i7evHXr2scHw7jxN2+stC5funn94/9uri4vjV3+blxaWWlevbF6/eMC+PG+WBt7/19buXzx2uXrq80bzcuty8uD8Ke2w6+ud+ugz5PlD3BMz+p/rAMntUM+8Wm3781ewb3flYzfJAmLf6KfxfbgNkE72iUb7du/tr6Bdtd657c50tW6ZfTsAFqsXxOBF//muun1nHZv3ZpT95Oo7k6n7nOp7j1O3U/p1DW+YWx5vfPbHOm6etNkpQo0Wf+mfV57Wvc52t3Y1/guy6nVf/RpXZgLnfvd4n2TQeXTctx4XtCCfWxyV6X6ezv41brRDnif25deLPsqT34H1OGcc5Wbb/TZODo4RvpmiT51Vo3yZQ1nwb7sivJlkQfVdnh7FX92ivpqf7ryV72zPXdMkD9Vhz9qT39e+UEZmSX+IO/mqQznHh7zPP+l1zPa3Tqsq63+2c5YSXE98WkaZiXR+oHXlYzerH06TIPVb8J4fQmt5c8TDev2zmjXZTUW7FJnoFWoDOV4hsrUWqeVYUwG51a+OC6BvEj59PfrXbhczy7VpzOEY1CfVgGWys/gvBar/xToU87PYLla7/zdHO1aU3abXVbG+UtYptrFcoJjVslJ3j41XuTpU7NTUxlU+ZQVuld556izeJ63+p/kzKNqfcJbHxq0Hmn0eDkUPM9/mkPf3pz0DYqt8zyvYutGn8nKi0C3fvbTuvCRlnnRXl5/N7n8EoD3uU/rrWMy+EVQ5/lUx3TWF0KdF1Ad013/HOr8bxm0Kx8hK0/4RgeG6QDm7Xrn7+aIF/uOLAtIk+WfKN4nSf/YYRl6dvv2L6//4Xsp/17ytOx6u6eoHpexPkivZ7Zv/yreIW+yYO1xYO3JgFVJ+vstSbL7LrS97GN9Ncj893budwtYJltK97KP5e35Sa8s3fv1OXWvt5YcM39tb07cg/Qq632lV5V/YDgn4R8gD6rt8PYq/gxaV+U8FLXvRvFn7wT54+VB5JVdxU8v1wF5V6cynBN4PIfm8PC4nk/8/FUe1//uabd/VQ7dvHgfdZFHa1XQqmJTCLcGtMSKp74WdOjHaP6Ztniq1d8OOFR9y3G3d7JipOn1yZ26g+KCP0x9qvJZvLig1f8n4PeP0pzlxQXRnwmJC6KfzHOW1f9xZ86yOjMZMHkfgYoreXEWlYO0U7Tx/2vnCpbbhIGo3TTUbeImk/F0euk/GAzGHO1bD51MP0E20EtvnemZD+mX9G966Bf0Bxocy35eP1YwwZBDuNjAol2tVivpaVcsnud64OaNtit9wbihrKz/snh9Lb5IroV+K7pvWz6JybL4Mo23hjfcNJTVlUcgY7XYHL1HfDbuOy5TYow4tmr4bEe5g3FTfNYj9dXsh+G56A+vhH6YrT83+/EU/Wj1ZfphvpCdA83wfW3/w+tRP23i+yOHfmRMLWKMMu5uCO+a4vtyTmLp/ywff7dnwix5mcMBH5Ob4vtSBkv/F8amjvB9I7FZvBiGPxTvcMyVWDCOhRLfx/HlKfj+r+WhXElnL9amDN/X2pTh+zg3rML3/0GbvuD7j5cL36/bpnbdhPg+s1X7H2Mg6uD7lv7V6iCbnDPuaSrKrJP3i2OH9JtazibyZ/lbElO0bT5S6nPTUD7XvFLOgdm8ciD4eKQucj5v7XCyOnzzfnVcnsTYcf35tTh+Z2nvRB9Fec+Nv+M8SfYn1M2HVTM6uRb+CDq73/1n6z0rG+tbci2MumZ2I/uWpf+k2CI7MwHLlH2L2a6WJ9LGmkjjjf6rTm61Juu5semn5NNIH6Tl0zDeiElIPU0ayuo6g+lOyMrOi+oxp4bOw1EHl0X9+jL9aGfGoM3eCnpsV6afSY/60c6XZriKZj+sX7IxVTvP5rnZz1jRj8tv1dEP+kwt31LDAcY96kezH4aXavaj5Vej/2H5Zdo+jByXWbwcjo2fK+rhDTjuW3Xe0RcYn7V9GDyL+X7llrXuPgyWa/cCWo+rD/zFdB5Efphmfh7Ouo7rD8w6NsHaJGky8xdR5/yTON+YNEnzeJab3HSe1xZGJt6Y2PeT0M9CP+o8ryyarzcPQkwzv7wNXPz3MRLF4T36svJ6s7u351xJesQLkD6Dufk38FNbWsKvpPup0A0rfrdlkGevi+Nnb4tT+ovilN7yflecymjfXcE79LPldb27R31hWVaOS0H/A9Yv5TWCb+z3t4T/SPA/kps8Qz8vy7ogz3AP8/tOxr2PBd4tjm2+lc0T5eMzKZu1nbP4tcVingTraRinmzzt3q+GeWzmeTyNgjTMgtTp1/4DVCTprXH9CQA=",
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B, H> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B, H> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::wrapping_mul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test(should_fail)]\n    fn test_wrapping_mul() {\n        // This currently fails.\n        // See: https://github.com/noir-lang/noir/issues/7528\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, wrapping_mul(zero, one));\n\n        // 0*1==0\n        assert_eq(zero, wrapping_mul(one, zero));\n\n        // 1*1==1\n        assert_eq(one, wrapping_mul(one, one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, wrapping_mul(zero, two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, wrapping_mul(two_pow_64, zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(two_pow_64, one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, wrapping_mul(one, two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, wrapping_mul(two_pow_64, two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, wrapping_mul(u128_max, u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
