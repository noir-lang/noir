---
source: tooling/nargo_cli/tests/execute.rs
expression: artifact
---
{
  "noir_version": "[noir_version]",
  "hash": "[hash]",
  "abi": {
    "parameters": [
      {
        "name": "input",
        "type": {
          "kind": "array",
          "length": 6,
          "type": {
            "kind": "struct",
            "path": "Entry",
            "fields": [
              {
                "name": "key",
                "type": {
                  "kind": "field"
                }
              },
              {
                "name": "value",
                "type": {
                  "kind": "field"
                }
              }
            ]
          }
        },
        "visibility": "private"
      }
    ],
    "return_type": null,
    "error_types": {
      "955212737754845985": {
        "error_kind": "string",
        "string": "HashMap should have retained 2 elements."
      },
      "1359149291226868540": {
        "error_kind": "string",
        "string": "hashmap.len() does not match input length."
      },
      "2386996775688025706": {
        "error_kind": "fmtstring",
        "length": 39,
        "item_types": [
          {
            "kind": "array",
            "length": 3,
            "type": {
              "kind": "field"
            }
          }
        ]
      },
      "2920182694213909827": {
        "error_kind": "string",
        "string": "attempt to subtract with overflow"
      },
      "3078107792722303059": {
        "error_kind": "string",
        "string": "Got incorrect iteration of values."
      },
      "3316745884754988903": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "5019202896831570965": {
        "error_kind": "string",
        "string": "attempt to add with overflow"
      },
      "5727012404371710682": {
        "error_kind": "string",
        "string": "push out of bounds"
      },
      "6693878053340631133": {
        "error_kind": "fmtstring",
        "length": 79,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "6895136539169241630": {
        "error_kind": "string",
        "string": "HashMaps should not be equal."
      },
      "7233212735005103307": {
        "error_kind": "string",
        "string": "attempt to multiply with overflow"
      },
      "9417307514377997680": {
        "error_kind": "string",
        "string": "HashMap after one insert should have a length of 1 element."
      },
      "9576462532509309328": {
        "error_kind": "fmtstring",
        "length": 82,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "9862881900111276825": {
        "error_kind": "fmtstring",
        "length": 35,
        "item_types": [
          {
            "kind": "field"
          }
        ]
      },
      "9965974553718638037": {
        "error_kind": "fmtstring",
        "length": 81,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          },
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "10951819287827820458": {
        "error_kind": "string",
        "string": "Got incorrect iteration of entries."
      },
      "11665340019033496436": {
        "error_kind": "string",
        "string": "Value has been removed, but is still available (not none)."
      },
      "12049594436772143978": {
        "error_kind": "string",
        "string": "array ref-count underflow detected"
      },
      "12389747999246339213": {
        "error_kind": "fmtstring",
        "length": 36,
        "item_types": [
          {
            "kind": "integer",
            "sign": "unsigned",
            "width": 32
          }
        ]
      },
      "12632160011611521689": {
        "error_kind": "string",
        "string": "Got none value."
      },
      "14225679739041873922": {
        "error_kind": "string",
        "string": "Index out of bounds"
      },
      "14479745468926698352": {
        "error_kind": "string",
        "string": "HashMap after one insert and corresponding removal should be empty."
      },
      "15366650908120444287": {
        "error_kind": "fmtstring",
        "length": 48,
        "item_types": [
          {
            "kind": "field"
          },
          {
            "kind": "field"
          }
        ]
      },
      "15583592523844085222": {
        "error_kind": "string",
        "string": "Pair should have been removed, since it does not match predicate."
      },
      "16291778408346427203": {
        "error_kind": "string",
        "string": "Got incorrect iteration of keys."
      },
      "16567169223151679177": {
        "error_kind": "string",
        "string": "HashMaps should be equal."
      },
      "16850003084350092401": {
        "error_kind": "string",
        "string": "Load factor is exceeded, consider increasing the capacity."
      },
      "16954218183513903507": {
        "error_kind": "string",
        "string": "Attempted to read past end of BoundedVec"
      },
      "17677620431177272765": {
        "error_kind": "string",
        "string": "HashMap length is invalid."
      },
      "17843811134343075018": {
        "error_kind": "string",
        "string": "Stack too deep"
      }
    }
  },
  "bytecode": [
    "func 0",
    "current witness index : 11",
    "private parameters indices : [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]",
    "public parameters indices : []",
    "return value indices : []",
    "BRILLIG CALL func 0: inputs: [Array([Expression { mul_terms: [], linear_combinations: [(1, Witness(0))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(1))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(2))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(3))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(4))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(5))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(6))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(7))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(8))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(9))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(10))], q_c: 0 }, Expression { mul_terms: [], linear_combinations: [(1, Witness(11))], q_c: 0 }])], outputs: []",
    "",
    "unconstrained func 0",
    "[Const { destination: Direct(2), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(1), bit_size: Integer(U32), value: 32862 }, Const { destination: Direct(0), bit_size: Integer(U32), value: 3 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 12 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 0 }, CalldataCopy { destination_address: Direct(32850), size_address: Relative(2), offset_address: Relative(3) }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32850 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 12 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 13 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Direct(32771), source: Relative(1) }, Mov { destination: Direct(32772), source: Relative(4) }, Mov { destination: Direct(32773), source: Relative(3) }, Call { location: 23 }, Mov { destination: Relative(1), source: Relative(2) }, Call { location: 34 }, Call { location: 50 }, Const { destination: Relative(1), bit_size: Integer(U32), value: 32862 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Stop { return_data: HeapVector { pointer: Relative(1), size: Relative(2) } }, BinaryIntOp { destination: Direct(32775), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32773) }, Mov { destination: Direct(32776), source: Direct(32771) }, Mov { destination: Direct(32777), source: Direct(32772) }, BinaryIntOp { destination: Direct(32778), op: Equals, bit_size: U32, lhs: Direct(32776), rhs: Direct(32775) }, JumpIf { condition: Direct(32778), location: 33 }, Load { destination: Direct(32774), source_pointer: Direct(32776) }, Store { destination_pointer: Direct(32777), source: Direct(32774) }, BinaryIntOp { destination: Direct(32776), op: Add, bit_size: U32, lhs: Direct(32776), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32777), rhs: Direct(2) }, Jump { location: 26 }, Return, Const { destination: Direct(32835), bit_size: Integer(U32), value: 6 }, Const { destination: Direct(32836), bit_size: Integer(U32), value: 4 }, Const { destination: Direct(32837), bit_size: Integer(U32), value: 3 }, Const { destination: Direct(32838), bit_size: Integer(U32), value: 0 }, Const { destination: Direct(32839), bit_size: Field, value: 0 }, Const { destination: Direct(32840), bit_size: Integer(U1), value: 1 }, Const { destination: Direct(32841), bit_size: Integer(U32), value: 1 }, Const { destination: Direct(32842), bit_size: Integer(U32), value: 2 }, Const { destination: Direct(32843), bit_size: Field, value: 55 }, Const { destination: Direct(32844), bit_size: Field, value: 123 }, Const { destination: Direct(32845), bit_size: Field, value: 125 }, Const { destination: Direct(32846), bit_size: Field, value: 132 }, Const { destination: Direct(32847), bit_size: Field, value: 169 }, Const { destination: Direct(32848), bit_size: Field, value: 170 }, Const { destination: Direct(32849), bit_size: Field, value: 171 }, Return, Call { location: 17452 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Load { destination: Relative(3), source_pointer: Relative(4) }, BinaryIntOp { destination: Relative(5), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, Load { destination: Relative(4), source_pointer: Relative(5) }, Const { destination: Relative(5), bit_size: Integer(U1), value: 0 }, Mov { destination: Relative(6), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(6), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(6) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32838) }, Load { destination: Relative(9), source_pointer: Relative(6) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 137 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(9) }, Const { destination: Relative(6), bit_size: Field, value: 18446744073709551616 }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(11) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(6) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(15), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(15), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Mov { destination: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(17), source: Relative(3) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, Store { destination_pointer: Relative(11), source: Relative(15) }, Store { destination_pointer: Relative(12), source: Relative(9) }, Store { destination_pointer: Relative(13), source: Direct(32841) }, Store { destination_pointer: Relative(14), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 178 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(9), location: 17422 }, Jump { location: 181 }, Load { destination: Relative(9), source_pointer: Relative(11) }, Load { destination: Relative(10), source_pointer: Relative(12) }, Load { destination: Relative(15), source_pointer: Relative(13) }, Load { destination: Relative(16), source_pointer: Relative(10) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 190 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(18), size: Relative(19) }, output: HeapArray { pointer: Relative(20), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(11), source: Relative(9) }, Store { destination_pointer: Relative(12), source: Relative(16) }, Store { destination_pointer: Relative(13), source: Relative(15) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Cast { destination: Relative(11), source: Relative(9), bit_size: Integer(U32) }, Cast { destination: Relative(10), source: Relative(11), bit_size: Field }, Cast { destination: Relative(9), source: Relative(10), bit_size: Integer(U32) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 8 }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 215 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, JumpIf { condition: Relative(12), location: 17310 }, Jump { location: 218 }, Load { destination: Relative(9), source_pointer: Relative(7) }, Load { destination: Relative(10), source_pointer: Relative(8) }, Load { destination: Relative(12), source_pointer: Relative(9) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 226 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Direct(32841) }, JumpIf { condition: Relative(12), location: 231 }, Call { location: 17461 }, Load { destination: Relative(10), source_pointer: Relative(9) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 237 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, Load { destination: Relative(15), source_pointer: Relative(9) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 251 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(15) }, Mov { destination: Relative(15), source: Direct(1) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(17) }, IndirectConst { destination_pointer: Relative(15), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Mov { destination: Relative(18), source: Relative(17) }, Store { destination_pointer: Relative(18), source: Direct(32839) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Direct(32839) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Direct(32839) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(6) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Mov { destination: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(23), source: Relative(3) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32839) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, Store { destination_pointer: Relative(23), source: Direct(32839) }, Store { destination_pointer: Relative(17), source: Relative(21) }, Store { destination_pointer: Relative(18), source: Relative(15) }, Store { destination_pointer: Relative(19), source: Direct(32841) }, Store { destination_pointer: Relative(20), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 291 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(12), location: 17280 }, Jump { location: 294 }, Load { destination: Relative(12), source_pointer: Relative(17) }, Load { destination: Relative(13), source_pointer: Relative(18) }, Load { destination: Relative(15), source_pointer: Relative(19) }, Load { destination: Relative(16), source_pointer: Relative(13) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(16) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 303 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(22), size: Relative(23) }, output: HeapArray { pointer: Relative(24), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(17), source: Relative(12) }, Store { destination_pointer: Relative(18), source: Relative(16) }, Store { destination_pointer: Relative(19), source: Relative(15) }, Store { destination_pointer: Relative(20), source: Direct(32840) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Cast { destination: Relative(15), source: Relative(12), bit_size: Integer(U32) }, Cast { destination: Relative(13), source: Relative(15), bit_size: Field }, Cast { destination: Relative(12), source: Relative(13), bit_size: Integer(U32) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 327 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, JumpIf { condition: Relative(15), location: 17215 }, Jump { location: 330 }, Load { destination: Relative(9), source_pointer: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(14) }, JumpIf { condition: Relative(9), location: 334 }, Call { location: 17464 }, Const { destination: Relative(9), bit_size: Integer(U8), value: 73 }, Const { destination: Relative(12), bit_size: Integer(U8), value: 110 }, Const { destination: Relative(13), bit_size: Integer(U8), value: 115 }, Const { destination: Relative(14), bit_size: Integer(U8), value: 101 }, Const { destination: Relative(15), bit_size: Integer(U8), value: 114 }, Const { destination: Relative(16), bit_size: Integer(U8), value: 116 }, Const { destination: Relative(17), bit_size: Integer(U8), value: 100 }, Const { destination: Relative(18), bit_size: Integer(U8), value: 32 }, Const { destination: Relative(19), bit_size: Integer(U8), value: 123 }, Const { destination: Relative(20), bit_size: Integer(U8), value: 118 }, Const { destination: Relative(21), bit_size: Integer(U8), value: 97 }, Const { destination: Relative(22), bit_size: Integer(U8), value: 108 }, Const { destination: Relative(23), bit_size: Integer(U8), value: 117 }, Const { destination: Relative(24), bit_size: Integer(U8), value: 125 }, Const { destination: Relative(25), bit_size: Integer(U8), value: 98 }, Const { destination: Relative(26), bit_size: Integer(U8), value: 103 }, Const { destination: Relative(27), bit_size: Integer(U8), value: 111 }, Const { destination: Relative(28), bit_size: Integer(U8), value: 102 }, Const { destination: Relative(29), bit_size: Integer(U8), value: 104 }, Const { destination: Relative(30), bit_size: Integer(U8), value: 109 }, Const { destination: Relative(31), bit_size: Integer(U8), value: 107 }, Const { destination: Relative(32), bit_size: Integer(U8), value: 121 }, Const { destination: Relative(33), bit_size: Integer(U8), value: 46 }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 49 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(35) }, Store { destination_pointer: Relative(36), source: Relative(9) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(12) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(13) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(15) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(16) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(17) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(19) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(20) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(21) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(22) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(23) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(24) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(25) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(23) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(16) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(26) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(27) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(16) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(19) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(26) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(27) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(16) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(24) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(28) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(27) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(15) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(16) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(29) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(13) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(21) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(30) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(18) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(31) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(14) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(32) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(33) }, BinaryFieldOp { destination: Relative(9), op: Equals, lhs: Relative(4), rhs: Relative(10) }, JumpIf { condition: Relative(9), location: 482 }, Const { destination: Relative(35), bit_size: Integer(U32), value: 52 }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 52 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(37) }, Mov { destination: Relative(37), source: Relative(36) }, IndirectConst { destination_pointer: Relative(37), bit_size: Integer(U64), value: 15366650908120444287 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 48 }, Mov { destination: Direct(32771), source: Relative(38) }, Mov { destination: Direct(32772), source: Relative(37) }, Mov { destination: Direct(32773), source: Relative(39) }, Call { location: 23 }, Const { destination: Relative(38), bit_size: Integer(U32), value: 48 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(38) }, Store { destination_pointer: Relative(37), source: Direct(32842) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(10) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(36), size: Relative(35) } }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(9), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 489 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Mov { destination: Relative(4), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(4), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, Mov { destination: Relative(35), source: Relative(9) }, Store { destination_pointer: Relative(35), source: Direct(32839) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Direct(32839) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Direct(32839) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(6) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(38), source: Direct(1) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(39) }, IndirectConst { destination_pointer: Relative(38), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Mov { destination: Relative(40), source: Relative(39) }, Store { destination_pointer: Relative(40), source: Relative(3) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Direct(32839) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(40), source: Direct(32839) }, Store { destination_pointer: Relative(9), source: Relative(38) }, Store { destination_pointer: Relative(35), source: Relative(4) }, Store { destination_pointer: Relative(36), source: Direct(32841) }, Store { destination_pointer: Relative(37), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 529 }, BinaryIntOp { destination: Relative(4), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(4), location: 17185 }, Jump { location: 532 }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(10), source_pointer: Relative(35) }, Load { destination: Relative(38), source_pointer: Relative(36) }, Load { destination: Relative(39), source_pointer: Relative(10) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(39) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 541 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(41) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(41), size: Relative(42) }, output: HeapArray { pointer: Relative(43), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(9), source: Relative(4) }, Store { destination_pointer: Relative(35), source: Relative(39) }, Store { destination_pointer: Relative(36), source: Relative(38) }, Store { destination_pointer: Relative(37), source: Direct(32840) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(32841) }, Load { destination: Relative(4), source_pointer: Relative(9) }, Cast { destination: Relative(10), source: Relative(4), bit_size: Integer(U32) }, Cast { destination: Relative(9), source: Relative(10), bit_size: Field }, Cast { destination: Relative(4), source: Relative(9), bit_size: Integer(U32) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 565 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, JumpIf { condition: Relative(10), location: 17083 }, Jump { location: 568 }, Load { destination: Relative(4), source_pointer: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 576 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Equals, bit_size: U32, lhs: Relative(7), rhs: Direct(32838) }, JumpIf { condition: Relative(8), location: 581 }, Call { location: 17467 }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, Load { destination: Relative(8), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 590 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(35) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(6) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(38), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(40) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Mov { destination: Relative(41), source: Relative(40) }, Store { destination_pointer: Relative(41), source: Relative(3) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Direct(32839) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Direct(32839) }, Store { destination_pointer: Relative(35), source: Relative(39) }, Store { destination_pointer: Relative(36), source: Relative(8) }, Store { destination_pointer: Relative(37), source: Direct(32841) }, Store { destination_pointer: Relative(38), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 630 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(8), location: 17053 }, Jump { location: 633 }, Load { destination: Relative(8), source_pointer: Relative(35) }, Load { destination: Relative(9), source_pointer: Relative(36) }, Load { destination: Relative(10), source_pointer: Relative(37) }, Load { destination: Relative(39), source_pointer: Relative(9) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(39) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 642 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(39) }, Mov { destination: Relative(39), source: Direct(1) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(41) }, IndirectConst { destination_pointer: Relative(39), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(41), size: Relative(42) }, output: HeapArray { pointer: Relative(43), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(35), source: Relative(8) }, Store { destination_pointer: Relative(36), source: Relative(39) }, Store { destination_pointer: Relative(37), source: Relative(10) }, Store { destination_pointer: Relative(38), source: Direct(32840) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(32841) }, Load { destination: Relative(8), source_pointer: Relative(9) }, Cast { destination: Relative(10), source: Relative(8), bit_size: Integer(U32) }, Cast { destination: Relative(9), source: Relative(10), bit_size: Field }, Cast { destination: Relative(8), source: Relative(9), bit_size: Integer(U32) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 666 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, JumpIf { condition: Relative(10), location: 16993 }, Jump { location: 669 }, Load { destination: Relative(4), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(4), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 673 }, Call { location: 17470 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, Load { destination: Relative(4), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(9) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32838) }, Load { destination: Relative(35), source_pointer: Relative(8) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(35) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 758 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(35) }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(35) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(6) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 24 }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 776 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(36), location: 16750 }, Jump { location: 779 }, Load { destination: Relative(8), source_pointer: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(8) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(10) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 787 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(10) }, Const { destination: Relative(10), bit_size: Integer(U8), value: 72 }, Const { destination: Relative(37), bit_size: Integer(U8), value: 77 }, Const { destination: Relative(38), bit_size: Integer(U8), value: 112 }, Const { destination: Relative(39), bit_size: Integer(U8), value: 49 }, Const { destination: Relative(40), bit_size: Integer(U8), value: 44 }, Mov { destination: Relative(41), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 37 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(41), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Relative(10) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(21) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(13) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(29) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(37) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(21) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(38) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(22) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(14) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(12) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(26) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(16) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(29) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(30) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(23) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(13) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(16) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(25) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(14) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(39) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(40) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(26) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(27) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(16) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(19) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(22) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(14) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(12) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(24) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(33) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Direct(32841) }, JumpIf { condition: Relative(10), location: 893 }, Const { destination: Relative(37), bit_size: Integer(U32), value: 39 }, Mov { destination: Relative(42), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 39 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, Mov { destination: Relative(43), source: Relative(42) }, IndirectConst { destination_pointer: Relative(43), bit_size: Integer(U64), value: 12389747999246339213 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 36 }, Mov { destination: Direct(32771), source: Relative(44) }, Mov { destination: Direct(32772), source: Relative(43) }, Mov { destination: Direct(32773), source: Relative(45) }, Call { location: 23 }, Const { destination: Relative(44), bit_size: Integer(U32), value: 36 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(44) }, Store { destination_pointer: Relative(43), source: Direct(32841) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(9) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(42), size: Relative(37) } }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, Load { destination: Relative(37), source_pointer: Relative(8) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(37) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 905 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(37) }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(37), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Direct(32839) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Direct(32839) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Direct(32839) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(6) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(47) }, Store { destination_pointer: Relative(48), source: Relative(4) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, Store { destination_pointer: Relative(42), source: Relative(46) }, Store { destination_pointer: Relative(43), source: Relative(37) }, Store { destination_pointer: Relative(44), source: Direct(32841) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 945 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(36), location: 16720 }, Jump { location: 948 }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(37), source_pointer: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(44) }, Load { destination: Relative(46), source_pointer: Relative(37) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 957 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(46) }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(48), size: Relative(49) }, output: HeapArray { pointer: Relative(50), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(43), source: Relative(46) }, Store { destination_pointer: Relative(44), source: Relative(41) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(32841) }, Load { destination: Relative(36), source_pointer: Relative(37) }, Cast { destination: Relative(41), source: Relative(36), bit_size: Integer(U32) }, Cast { destination: Relative(37), source: Relative(41), bit_size: Field }, Cast { destination: Relative(36), source: Relative(37), bit_size: Integer(U32) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 981 }, BinaryIntOp { destination: Relative(41), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, JumpIf { condition: Relative(41), location: 16655 }, Jump { location: 984 }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(8), source_pointer: Relative(10) }, JumpIf { condition: Relative(4), location: 988 }, Call { location: 17464 }, BinaryFieldOp { destination: Relative(4), op: Equals, lhs: Relative(7), rhs: Relative(8) }, JumpIf { condition: Relative(4), location: 1012 }, Const { destination: Relative(9), bit_size: Integer(U32), value: 52 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 52 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, Mov { destination: Relative(36), source: Relative(10) }, IndirectConst { destination_pointer: Relative(36), bit_size: Integer(U64), value: 15366650908120444287 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 48 }, Mov { destination: Direct(32771), source: Relative(37) }, Mov { destination: Direct(32772), source: Relative(36) }, Mov { destination: Direct(32773), source: Relative(41) }, Call { location: 23 }, Const { destination: Relative(37), bit_size: Integer(U32), value: 48 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(37) }, Store { destination_pointer: Relative(36), source: Direct(32842) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(7) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(8) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(10), size: Relative(9) } }, Const { destination: Relative(4), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, Load { destination: Relative(7), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32835) }, Load { destination: Relative(8), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(34) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(34) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Relative(5) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(10) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32838) }, Load { destination: Relative(37), source_pointer: Relative(10) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(37) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 1100 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(37) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(37) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(37) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(6) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(46) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(46) }, Store { destination_pointer: Relative(47), source: Relative(7) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, Store { destination_pointer: Relative(37), source: Relative(45) }, Store { destination_pointer: Relative(42), source: Relative(10) }, Store { destination_pointer: Relative(43), source: Direct(32841) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1140 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(10), location: 16625 }, Jump { location: 1143 }, Load { destination: Relative(10), source_pointer: Relative(37) }, Load { destination: Relative(41), source_pointer: Relative(42) }, Load { destination: Relative(45), source_pointer: Relative(43) }, Load { destination: Relative(46), source_pointer: Relative(41) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 1152 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(46) }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(48), size: Relative(49) }, output: HeapArray { pointer: Relative(50), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(37), source: Relative(10) }, Store { destination_pointer: Relative(42), source: Relative(46) }, Store { destination_pointer: Relative(43), source: Relative(45) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(32841) }, Load { destination: Relative(10), source_pointer: Relative(37) }, Cast { destination: Relative(41), source: Relative(10), bit_size: Integer(U32) }, Cast { destination: Relative(37), source: Relative(41), bit_size: Field }, Cast { destination: Relative(10), source: Relative(37), bit_size: Integer(U32) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1176 }, BinaryIntOp { destination: Relative(41), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, JumpIf { condition: Relative(41), location: 16513 }, Jump { location: 1179 }, Load { destination: Relative(8), source_pointer: Relative(34) }, Load { destination: Relative(10), source_pointer: Relative(36) }, Load { destination: Relative(37), source_pointer: Relative(8) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(37) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 1187 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(37) }, BinaryIntOp { destination: Relative(37), op: Mul, bit_size: U32, lhs: Relative(10), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(43), op: Div, bit_size: U32, lhs: Relative(37), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(10) }, JumpIf { condition: Relative(42), location: 1194 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(37), rhs: Relative(35) }, JumpIf { condition: Relative(10), location: 1197 }, Call { location: 17476 }, Load { destination: Relative(10), source_pointer: Relative(8) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(10) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 1203 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(10) }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(10) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(6) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(46) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(46) }, Store { destination_pointer: Relative(47), source: Relative(7) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, Store { destination_pointer: Relative(10), source: Relative(45) }, Store { destination_pointer: Relative(42), source: Relative(8) }, Store { destination_pointer: Relative(43), source: Direct(32841) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1243 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(8), location: 16483 }, Jump { location: 1246 }, Load { destination: Relative(8), source_pointer: Relative(10) }, Load { destination: Relative(37), source_pointer: Relative(42) }, Load { destination: Relative(41), source_pointer: Relative(43) }, Load { destination: Relative(45), source_pointer: Relative(37) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 1255 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(47), size: Relative(48) }, output: HeapArray { pointer: Relative(49), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(10), source: Relative(8) }, Store { destination_pointer: Relative(42), source: Relative(45) }, Store { destination_pointer: Relative(43), source: Relative(41) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Load { destination: Relative(8), source_pointer: Relative(10) }, Cast { destination: Relative(37), source: Relative(8), bit_size: Integer(U32) }, Cast { destination: Relative(10), source: Relative(37), bit_size: Field }, Cast { destination: Relative(8), source: Relative(10), bit_size: Integer(U32) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1279 }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, JumpIf { condition: Relative(37), location: 16371 }, Jump { location: 1282 }, Load { destination: Relative(8), source_pointer: Relative(34) }, Load { destination: Relative(10), source_pointer: Relative(36) }, Load { destination: Relative(34), source_pointer: Relative(8) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(34) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 1290 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Direct(32841) }, JumpIf { condition: Relative(34), location: 1295 }, Call { location: 17479 }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, Load { destination: Relative(37), source_pointer: Relative(8) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(37) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 1307 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(37) }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(37), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Direct(32839) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Direct(32839) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Direct(32839) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(6) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(47) }, Store { destination_pointer: Relative(48), source: Relative(7) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, Store { destination_pointer: Relative(42), source: Relative(46) }, Store { destination_pointer: Relative(43), source: Relative(37) }, Store { destination_pointer: Relative(44), source: Direct(32841) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1347 }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32837) }, JumpIf { condition: Relative(36), location: 16341 }, Jump { location: 1350 }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(37), source_pointer: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(44) }, Load { destination: Relative(46), source_pointer: Relative(37) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 1359 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(46) }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(48), size: Relative(49) }, output: HeapArray { pointer: Relative(50), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(43), source: Relative(46) }, Store { destination_pointer: Relative(44), source: Relative(41) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(32841) }, Load { destination: Relative(36), source_pointer: Relative(37) }, Cast { destination: Relative(41), source: Relative(36), bit_size: Integer(U32) }, Cast { destination: Relative(37), source: Relative(41), bit_size: Field }, Cast { destination: Relative(36), source: Relative(37), bit_size: Integer(U32) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(5) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1383 }, BinaryIntOp { destination: Relative(41), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(11) }, JumpIf { condition: Relative(41), location: 16276 }, Jump { location: 1386 }, Load { destination: Relative(7), source_pointer: Relative(10) }, Load { destination: Relative(8), source_pointer: Relative(34) }, JumpIf { condition: Relative(7), location: 1390 }, Call { location: 17464 }, Const { destination: Relative(7), bit_size: Integer(U8), value: 69 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 120 }, Const { destination: Relative(34), bit_size: Integer(U8), value: 99 }, Const { destination: Relative(36), bit_size: Integer(U8), value: 119 }, Const { destination: Relative(37), bit_size: Integer(U8), value: 95 }, Mov { destination: Relative(41), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 37 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(41), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Mov { destination: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(43), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(10) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(38) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(14) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(34) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(16) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(14) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(17) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(19) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(12) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(14) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(36) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(37) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(20) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(21) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(22) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(23) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(14) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(24) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(40) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(25) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(23) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(16) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(26) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(27) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(16) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(18) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(19) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(26) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(27) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(16) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(24) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(33) }, BinaryFieldOp { destination: Relative(7), op: Equals, lhs: Relative(8), rhs: Relative(9) }, JumpIf { condition: Relative(7), location: 1496 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 40 }, Mov { destination: Relative(36), source: Direct(1) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(38) }, Mov { destination: Relative(38), source: Relative(36) }, IndirectConst { destination_pointer: Relative(38), bit_size: Integer(U64), value: 3316745884754988903 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 36 }, Mov { destination: Direct(32771), source: Relative(42) }, Mov { destination: Direct(32772), source: Relative(38) }, Mov { destination: Direct(32773), source: Relative(43) }, Call { location: 23 }, Const { destination: Relative(42), bit_size: Integer(U32), value: 36 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(42) }, Store { destination_pointer: Relative(38), source: Direct(32842) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(9) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(8) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(36), size: Relative(10) } }, Load { destination: Relative(7), source_pointer: Relative(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 1502 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(9) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32838) }, Load { destination: Relative(36), source_pointer: Relative(7) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(36) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 1585 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(36) }, Load { destination: Relative(7), source_pointer: Relative(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(7) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 1593 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(41) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(41) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(6) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1610 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(8), location: 16025 }, Jump { location: 1613 }, Load { destination: Relative(7), source_pointer: Relative(9) }, Load { destination: Relative(8), source_pointer: Relative(10) }, Load { destination: Relative(36), source_pointer: Relative(7) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(36) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 1621 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(36) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Direct(32835) }, JumpIf { condition: Relative(7), location: 1626 }, Call { location: 17482 }, Load { destination: Relative(7), source_pointer: Relative(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 1632 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(41), source: Relative(36) }, Store { destination_pointer: Relative(41), source: Direct(32839) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Direct(32839) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Direct(32839) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(6) }, Const { destination: Relative(36), bit_size: Integer(U8), value: 78 }, Const { destination: Relative(41), bit_size: Integer(U8), value: 105 }, Mov { destination: Relative(42), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 36 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(42), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(43) }, Store { destination_pointer: Relative(44), source: Relative(36) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(27) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(16) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(18) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(28) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(27) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(23) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(12) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(17) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(18) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(41) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(12) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(13) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(15) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(16) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(17) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(18) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(31) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(32) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(18) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(19) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(12) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(16) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(15) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(32) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(37) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(31) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(14) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(32) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(24) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(33) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1726 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(8), location: 15814 }, Jump { location: 1729 }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(38), source: Relative(8) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, Store { destination_pointer: Relative(9), source: Relative(7) }, Store { destination_pointer: Relative(10), source: Direct(32838) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(9), source: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32838) }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(38), source: Relative(10) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Direct(32839) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32838) }, Load { destination: Relative(38), source_pointer: Relative(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(38) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 1956 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(38) }, Mov { destination: Relative(38), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(38), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(43) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(6) }, Load { destination: Relative(43), source_pointer: Relative(38) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 1977 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(43) }, Mov { destination: Relative(2), source: Direct(32838) }, Jump { location: 1981 }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Direct(32835) }, JumpIf { condition: Relative(42), location: 15323 }, Jump { location: 1984 }, Load { destination: Relative(1), source_pointer: Relative(8) }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(38), source_pointer: Relative(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(38) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 1992 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(38) }, Load { destination: Relative(38), source_pointer: Relative(10) }, Load { destination: Relative(43), source_pointer: Relative(9) }, Load { destination: Relative(44), source_pointer: Relative(38) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(46), source: Relative(46), bit_size: U1 }, JumpIf { condition: Relative(46), location: 2002 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Load { destination: Relative(46), source_pointer: Relative(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 2013 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(46) }, Load { destination: Relative(46), source_pointer: Relative(38) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(46) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 2021 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(46) }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(43) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(49), source: Relative(43) }, Store { destination_pointer: Relative(49), source: Direct(32839) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Direct(32839) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Direct(32839) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(6) }, JumpIf { condition: Relative(46), location: 2039 }, Jump { location: 2067 }, Store { destination_pointer: Relative(44), source: Direct(32840) }, Load { destination: Relative(43), source_pointer: Relative(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Not { destination: Relative(46), source: Relative(46), bit_size: U1 }, JumpIf { condition: Relative(46), location: 2046 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(43) }, Mov { destination: Relative(43), source: Direct(1) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(46) }, IndirectConst { destination_pointer: Relative(43), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(46) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(6) }, Mov { destination: Relative(42), source: Direct(32838) }, Jump { location: 2063 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(11) }, JumpIf { condition: Relative(45), location: 15098 }, Jump { location: 2066 }, Jump { location: 2067 }, Load { destination: Relative(38), source_pointer: Relative(44) }, JumpIf { condition: Relative(38), location: 2070 }, Call { location: 17485 }, Load { destination: Relative(38), source_pointer: Relative(10) }, Load { destination: Relative(42), source_pointer: Relative(38) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(42) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 2077 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(42) }, Mov { destination: Relative(38), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(46), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(46), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(47) }, Store { destination_pointer: Relative(48), source: Relative(3) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, Store { destination_pointer: Relative(38), source: Relative(46) }, Store { destination_pointer: Relative(42), source: Relative(2) }, Store { destination_pointer: Relative(44), source: Direct(32841) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2104 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 15068 }, Jump { location: 2107 }, Load { destination: Relative(2), source_pointer: Relative(38) }, Load { destination: Relative(43), source_pointer: Relative(42) }, Load { destination: Relative(46), source_pointer: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(43) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(47) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 2116 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(47) }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(49) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(49), size: Relative(50) }, output: HeapArray { pointer: Relative(51), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(38), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(47) }, Store { destination_pointer: Relative(44), source: Relative(46) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(38) }, Cast { destination: Relative(42), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(38), source: Relative(42), bit_size: Field }, Cast { destination: Relative(2), source: Relative(38), bit_size: Integer(U32) }, Mov { destination: Relative(38), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2140 }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(42), location: 14966 }, Jump { location: 2143 }, Load { destination: Relative(1), source_pointer: Relative(8) }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(3), source_pointer: Relative(10) }, Load { destination: Relative(7), source_pointer: Relative(9) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Load { destination: Relative(9), source_pointer: Relative(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 2156 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(3) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(9) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 2164 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(2), rhs: Relative(7) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(7) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(6) }, JumpIf { condition: Relative(9), location: 2182 }, Jump { location: 2205 }, Store { destination_pointer: Relative(8), source: Direct(32840) }, Load { destination: Relative(9), source_pointer: Relative(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 2189 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(9) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 2197 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(9) }, Mov { destination: Relative(7), source: Direct(32838) }, Jump { location: 2201 }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(7), rhs: Relative(11) }, JumpIf { condition: Relative(9), location: 14741 }, Jump { location: 2204 }, Jump { location: 2205 }, Load { destination: Relative(3), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U1, lhs: Relative(3), rhs: Relative(5) }, JumpIf { condition: Relative(7), location: 2209 }, Call { location: 17488 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(7), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(7) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(7) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(3) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32838) }, Load { destination: Relative(9), source_pointer: Relative(3) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 2290 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(9) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(38), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(43), bit_size: Field, value: 5 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(46), source: Relative(45) }, Store { destination_pointer: Relative(46), source: Relative(43) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Direct(32839) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Direct(32839) }, Store { destination_pointer: Relative(3), source: Relative(44) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Store { destination_pointer: Relative(38), source: Direct(32841) }, Store { destination_pointer: Relative(42), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2318 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 14711 }, Jump { location: 2321 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Load { destination: Relative(44), source_pointer: Relative(38) }, Load { destination: Relative(45), source_pointer: Relative(10) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 2330 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(47), size: Relative(48) }, output: HeapArray { pointer: Relative(49), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(9), source: Relative(45) }, Store { destination_pointer: Relative(38), source: Relative(44) }, Store { destination_pointer: Relative(42), source: Direct(32840) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Cast { destination: Relative(9), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(9), bit_size: Field }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Const { destination: Relative(9), bit_size: Field, value: 11 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2355 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(10), location: 14599 }, Jump { location: 2358 }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(3), source_pointer: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(10) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 2366 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(10), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(3) }, JumpIf { condition: Relative(42), location: 2373 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(35) }, JumpIf { condition: Relative(3), location: 2376 }, Call { location: 17476 }, Load { destination: Relative(3), source_pointer: Relative(2) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 2382 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(3) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(6) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(46), bit_size: Field, value: 2 }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Mov { destination: Relative(49), source: Relative(48) }, Store { destination_pointer: Relative(49), source: Relative(46) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Direct(32839) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Direct(32839) }, Store { destination_pointer: Relative(3), source: Relative(47) }, Store { destination_pointer: Relative(42), source: Relative(2) }, Store { destination_pointer: Relative(44), source: Direct(32841) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2423 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 14569 }, Jump { location: 2426 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(10), source_pointer: Relative(42) }, Load { destination: Relative(38), source_pointer: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(10) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(47) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 2435 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(47) }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(49) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(49), size: Relative(50) }, output: HeapArray { pointer: Relative(51), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(47) }, Store { destination_pointer: Relative(44), source: Relative(38) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Cast { destination: Relative(10), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(10), bit_size: Field }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Const { destination: Relative(10), bit_size: Field, value: 13 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2460 }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(38), location: 14457 }, Jump { location: 2463 }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(3), source_pointer: Relative(8) }, Load { destination: Relative(38), source_pointer: Relative(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(38) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 2471 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(38), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(3) }, JumpIf { condition: Relative(44), location: 2478 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(38), rhs: Relative(35) }, JumpIf { condition: Relative(3), location: 2481 }, Call { location: 17476 }, Load { destination: Relative(3), source_pointer: Relative(2) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(3) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 2487 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(3) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(6) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(49) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(50), source: Relative(9) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, Store { destination_pointer: Relative(3), source: Relative(48) }, Store { destination_pointer: Relative(44), source: Relative(2) }, Store { destination_pointer: Relative(45), source: Direct(32841) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2527 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 14427 }, Jump { location: 2530 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(38), source_pointer: Relative(44) }, Load { destination: Relative(42), source_pointer: Relative(45) }, Load { destination: Relative(48), source_pointer: Relative(38) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2539 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(50), size: Relative(51) }, output: HeapArray { pointer: Relative(52), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(44), source: Relative(48) }, Store { destination_pointer: Relative(45), source: Relative(42) }, Store { destination_pointer: Relative(47), source: Direct(32840) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Cast { destination: Relative(38), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(38), bit_size: Field }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2563 }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(38), location: 14315 }, Jump { location: 2566 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2568 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(2), location: 14248 }, Jump { location: 2571 }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(3), source_pointer: Relative(8) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(7) }, Not { destination: Relative(38), source: Relative(38), bit_size: U1 }, JumpIf { condition: Relative(38), location: 2579 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(7) }, BinaryIntOp { destination: Relative(7), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, JumpIf { condition: Relative(7), location: 2584 }, Call { location: 17491 }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Load { destination: Relative(7), source_pointer: Relative(2) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(7) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 2593 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(42) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(42) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(6) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(49) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(50), source: Relative(46) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, Store { destination_pointer: Relative(42), source: Relative(48) }, Store { destination_pointer: Relative(44), source: Relative(7) }, Store { destination_pointer: Relative(45), source: Direct(32841) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2633 }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(7), location: 14218 }, Jump { location: 2636 }, Load { destination: Relative(7), source_pointer: Relative(42) }, Load { destination: Relative(8), source_pointer: Relative(44) }, Load { destination: Relative(38), source_pointer: Relative(45) }, Load { destination: Relative(48), source_pointer: Relative(8) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2645 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(50), size: Relative(51) }, output: HeapArray { pointer: Relative(52), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(42), source: Relative(7) }, Store { destination_pointer: Relative(44), source: Relative(48) }, Store { destination_pointer: Relative(45), source: Relative(38) }, Store { destination_pointer: Relative(47), source: Direct(32840) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32841) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Cast { destination: Relative(38), source: Relative(7), bit_size: Integer(U32) }, Cast { destination: Relative(8), source: Relative(38), bit_size: Field }, Cast { destination: Relative(7), source: Relative(8), bit_size: Integer(U32) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2669 }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(38), location: 14158 }, Jump { location: 2672 }, Load { destination: Relative(2), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(2), rhs: Relative(5) }, JumpIf { condition: Relative(3), location: 2676 }, Call { location: 17494 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(7), source: Relative(3) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32838) }, Load { destination: Relative(8), source_pointer: Relative(2) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(8) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 2757 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(8) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(8) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(6) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(48) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Mov { destination: Relative(49), source: Relative(48) }, Store { destination_pointer: Relative(49), source: Relative(46) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Direct(32839) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Direct(32839) }, Store { destination_pointer: Relative(8), source: Relative(47) }, Store { destination_pointer: Relative(42), source: Relative(2) }, Store { destination_pointer: Relative(44), source: Direct(32841) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2797 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 14128 }, Jump { location: 2800 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(38), source_pointer: Relative(42) }, Load { destination: Relative(47), source_pointer: Relative(44) }, Load { destination: Relative(48), source_pointer: Relative(38) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 2809 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(50), size: Relative(51) }, output: HeapArray { pointer: Relative(52), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(8), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(48) }, Store { destination_pointer: Relative(44), source: Relative(47) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(8) }, Cast { destination: Relative(38), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(8), source: Relative(38), bit_size: Field }, Cast { destination: Relative(2), source: Relative(8), bit_size: Integer(U32) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Const { destination: Relative(38), bit_size: Field, value: 3 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2834 }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(42), location: 14016 }, Jump { location: 2837 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(8), source_pointer: Relative(7) }, Load { destination: Relative(42), source_pointer: Relative(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 2845 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(8), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(8) }, JumpIf { condition: Relative(45), location: 2852 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(35) }, JumpIf { condition: Relative(8), location: 2855 }, Call { location: 17476 }, Load { destination: Relative(8), source_pointer: Relative(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(8) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 2861 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(8) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(8) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(6) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(49), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(49), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(51), source: Relative(43) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Direct(32839) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Direct(32839) }, Store { destination_pointer: Relative(8), source: Relative(49) }, Store { destination_pointer: Relative(45), source: Relative(2) }, Store { destination_pointer: Relative(47), source: Direct(32841) }, Store { destination_pointer: Relative(48), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2901 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13986 }, Jump { location: 2904 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(42), source_pointer: Relative(45) }, Load { destination: Relative(44), source_pointer: Relative(47) }, Load { destination: Relative(49), source_pointer: Relative(42) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 2913 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(49) }, Mov { destination: Relative(49), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(49), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(51), size: Relative(52) }, output: HeapArray { pointer: Relative(53), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(8), source: Relative(2) }, Store { destination_pointer: Relative(45), source: Relative(49) }, Store { destination_pointer: Relative(47), source: Relative(44) }, Store { destination_pointer: Relative(48), source: Direct(32840) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(8) }, Cast { destination: Relative(42), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(8), source: Relative(42), bit_size: Field }, Cast { destination: Relative(2), source: Relative(8), bit_size: Integer(U32) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Const { destination: Relative(42), bit_size: Field, value: 7 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 2938 }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(44), location: 13874 }, Jump { location: 2941 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(8), source_pointer: Relative(7) }, Load { destination: Relative(44), source_pointer: Relative(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 2949 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(8), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(44), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(8) }, JumpIf { condition: Relative(47), location: 2956 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(44), rhs: Relative(35) }, JumpIf { condition: Relative(8), location: 2959 }, Call { location: 17476 }, Load { destination: Relative(8), source_pointer: Relative(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(8) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 2965 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(8) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(8) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(6) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(49), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(9) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, Store { destination_pointer: Relative(8), source: Relative(50) }, Store { destination_pointer: Relative(47), source: Relative(2) }, Store { destination_pointer: Relative(48), source: Direct(32841) }, Store { destination_pointer: Relative(49), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3005 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13844 }, Jump { location: 3008 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(44), source_pointer: Relative(47) }, Load { destination: Relative(45), source_pointer: Relative(48) }, Load { destination: Relative(50), source_pointer: Relative(44) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 3017 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(50) }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(52) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(52), size: Relative(53) }, output: HeapArray { pointer: Relative(54), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(8), source: Relative(2) }, Store { destination_pointer: Relative(47), source: Relative(50) }, Store { destination_pointer: Relative(48), source: Relative(45) }, Store { destination_pointer: Relative(49), source: Direct(32840) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(8) }, Cast { destination: Relative(44), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(8), source: Relative(44), bit_size: Field }, Cast { destination: Relative(2), source: Relative(8), bit_size: Integer(U32) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3041 }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(44), location: 13732 }, Jump { location: 3044 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(8), source_pointer: Relative(7) }, Load { destination: Relative(44), source_pointer: Relative(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 3052 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(48), source: Relative(47) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(48), source: Direct(32839) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32838) }, Load { destination: Relative(48), source_pointer: Relative(2) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 3087 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(48) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3091 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(45), location: 13694 }, Jump { location: 3094 }, Load { destination: Relative(2), source_pointer: Relative(47) }, Load { destination: Relative(45), source_pointer: Relative(44) }, Load { destination: Relative(44), source_pointer: Relative(2) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 3102 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(44) }, Const { destination: Relative(44), bit_size: Integer(U8), value: 65 }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 80 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(49) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(50), source: Relative(44) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(30) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(27) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(23) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(12) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(16) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(27) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(28) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(20) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(21) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(22) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(41) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(17) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(22) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(30) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(12) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(16) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(13) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(13) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(29) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(27) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(23) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(22) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(17) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(29) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(21) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(20) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(25) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(12) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(19) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(13) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(22) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(28) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(37) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(22) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(12) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(24) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(16) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(41) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(30) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(13) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(40) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(25) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(23) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(16) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(26) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(27) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(16) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(18) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(19) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(31) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(32) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(13) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(37) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(22) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(14) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(12) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(24) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(33) }, Load { destination: Relative(49), source_pointer: Relative(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 3274 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(49) }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(8) }, JumpIf { condition: Relative(49), location: 3300 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, Mov { destination: Relative(53), source: Relative(52) }, IndirectConst { destination_pointer: Relative(53), bit_size: Integer(U64), value: 6693878053340631133 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(54) }, Mov { destination: Direct(32772), source: Relative(53) }, Mov { destination: Direct(32773), source: Relative(55) }, Call { location: 23 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, Store { destination_pointer: Relative(53), source: Direct(32842) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(8) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Relative(45) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(52), size: Relative(51) } }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(49) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(49) }, Store { destination_pointer: Relative(51), source: Direct(32839) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Direct(32839) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Direct(32839) }, Mov { destination: Relative(49), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(49), source: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32838) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Direct(32842), rhs: Relative(45) }, JumpIf { condition: Relative(51), location: 3320 }, Call { location: 17497 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3322 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(45), location: 13662 }, Jump { location: 3325 }, Load { destination: Relative(2), source_pointer: Relative(49) }, Load { destination: Relative(8), source_pointer: Relative(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(8) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 3332 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Load { destination: Relative(47), source_pointer: Relative(2) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 3343 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(47) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 50 }, Mov { destination: Relative(50), source: Direct(0) }, Mov { destination: Relative(51), source: Relative(8) }, Mov { destination: Relative(52), source: Direct(32838) }, Mov { destination: Relative(53), source: Direct(32842) }, Mov { destination: Relative(54), source: Direct(32847) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 17500 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(3) }, Load { destination: Relative(47), source_pointer: Relative(7) }, Load { destination: Relative(50), source_pointer: Relative(8) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 3363 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(50) }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(52) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Mov { destination: Relative(53), source: Relative(52) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(50) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32838) }, Load { destination: Relative(53), source_pointer: Relative(8) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Not { destination: Relative(55), source: Relative(55), bit_size: U1 }, JumpIf { condition: Relative(55), location: 3398 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(53) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3402 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(45), location: 13624 }, Jump { location: 3405 }, Load { destination: Relative(8), source_pointer: Relative(52) }, Load { destination: Relative(45), source_pointer: Relative(50) }, Load { destination: Relative(49), source_pointer: Relative(8) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 3413 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(49) }, Mov { destination: Relative(49), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(49), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(44) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(30) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(27) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(23) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(27) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(28) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(21) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(41) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(17) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(30) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(29) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(27) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(23) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(17) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(29) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(21) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(25) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(19) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(28) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(37) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(24) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(41) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(30) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(40) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(25) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(23) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(26) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(27) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(19) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(21) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(23) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(37) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(24) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(33) }, Load { destination: Relative(51), source_pointer: Relative(8) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 3588 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, JumpIf { condition: Relative(51), location: 3614 }, Const { destination: Relative(53), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(54), source: Direct(1) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(55) }, Mov { destination: Relative(55), source: Relative(54) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U64), value: 9965974553718638037 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(56) }, Mov { destination: Direct(32772), source: Relative(55) }, Mov { destination: Direct(32773), source: Relative(57) }, Call { location: 23 }, Const { destination: Relative(56), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(56) }, Store { destination_pointer: Relative(55), source: Direct(32842) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(47) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Store { destination_pointer: Relative(55), source: Relative(45) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(54), size: Relative(53) } }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Mov { destination: Relative(53), source: Relative(51) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(47) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32838) }, BinaryIntOp { destination: Relative(53), op: LessThan, bit_size: U32, lhs: Direct(32842), rhs: Relative(45) }, JumpIf { condition: Relative(53), location: 3634 }, Call { location: 17497 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3636 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(45), location: 13592 }, Jump { location: 3639 }, Load { destination: Relative(8), source_pointer: Relative(51) }, Load { destination: Relative(45), source_pointer: Relative(8) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 3646 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(8) }, Load { destination: Relative(50), source_pointer: Relative(8) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 3657 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(50) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 52 }, Mov { destination: Relative(52), source: Direct(0) }, Mov { destination: Relative(53), source: Relative(45) }, Mov { destination: Relative(54), source: Direct(32838) }, Mov { destination: Relative(55), source: Direct(32842) }, Mov { destination: Relative(56), source: Direct(32848) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(8) }, Call { location: 17500 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(8), source_pointer: Relative(45) }, Load { destination: Relative(45), source_pointer: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(50) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32838) }, Load { destination: Relative(52), source_pointer: Relative(45) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 3720 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(52) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3724 }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(47), location: 13541 }, Jump { location: 3727 }, Load { destination: Relative(45), source_pointer: Relative(50) }, Load { destination: Relative(47), source_pointer: Relative(7) }, Load { destination: Relative(7), source_pointer: Relative(45) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(7) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 3735 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(44) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(30) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(27) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(23) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(27) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(28) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(21) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(41) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(17) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(30) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(29) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(27) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(23) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(17) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(29) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(21) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(20) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(25) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(19) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(28) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(37) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(24) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(41) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(30) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(40) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(25) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(23) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(26) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(27) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(18) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(19) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(16) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(15) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(41) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(13) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(37) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(22) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(14) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(12) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(24) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(33) }, Load { destination: Relative(25), source_pointer: Relative(45) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 3912 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(3) }, JumpIf { condition: Relative(25), location: 3938 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, Mov { destination: Relative(44), source: Relative(37) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(51) }, Mov { destination: Direct(32772), source: Relative(44) }, Mov { destination: Direct(32773), source: Relative(52) }, Call { location: 23 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(51) }, Store { destination_pointer: Relative(44), source: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(3) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(47) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(37), size: Relative(33) } }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(33), source: Relative(25) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32838) }, BinaryIntOp { destination: Relative(33), op: LessThan, bit_size: U32, lhs: Direct(32842), rhs: Relative(47) }, JumpIf { condition: Relative(33), location: 3964 }, Call { location: 17497 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 3966 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(30), location: 13495 }, Jump { location: 3969 }, Load { destination: Relative(3), source_pointer: Relative(25) }, Load { destination: Relative(25), source_pointer: Relative(3) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 3976 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(25) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(3) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 3987 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(33) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 50 }, Mov { destination: Relative(50), source: Direct(0) }, Mov { destination: Relative(51), source: Relative(25) }, Mov { destination: Relative(52), source: Direct(32838) }, Mov { destination: Relative(53), source: Direct(32842) }, Mov { destination: Relative(54), source: Direct(32849) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(3) }, Call { location: 17663 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(3), source_pointer: Relative(25) }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(33) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(33) }, Store { destination_pointer: Relative(44), source: Relative(46) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(43) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(9) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32840) }, Load { destination: Relative(44), source_pointer: Relative(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 4019 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(44) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4023 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(30), location: 13482 }, Jump { location: 4026 }, Load { destination: Relative(2), source_pointer: Relative(33) }, JumpIf { condition: Relative(2), location: 4029 }, Call { location: 17845 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(25) }, Store { destination_pointer: Relative(30), source: Relative(38) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(42) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(10) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32840) }, Load { destination: Relative(30), source_pointer: Relative(8) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 4049 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(30) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4053 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(30), location: 13469 }, Jump { location: 4056 }, Load { destination: Relative(2), source_pointer: Relative(25) }, JumpIf { condition: Relative(2), location: 4059 }, Call { location: 17848 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(8) }, Store { destination_pointer: Relative(25), source: Relative(46) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(38) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(43) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(42) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(9) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(10) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32840) }, Load { destination: Relative(25), source_pointer: Relative(3) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 4085 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(25) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4089 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(25), location: 13446 }, Jump { location: 4092 }, Load { destination: Relative(2), source_pointer: Relative(8) }, JumpIf { condition: Relative(2), location: 4095 }, Call { location: 17851 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(8), source: Relative(3) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32839) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32838) }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 4176 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(33), source: Relative(25) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(6) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(47) }, Store { destination_pointer: Relative(50), source: Relative(46) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, Store { destination_pointer: Relative(25), source: Relative(45) }, Store { destination_pointer: Relative(33), source: Relative(2) }, Store { destination_pointer: Relative(37), source: Direct(32841) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4216 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13416 }, Jump { location: 4219 }, Load { destination: Relative(2), source_pointer: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(33) }, Load { destination: Relative(45), source_pointer: Relative(37) }, Load { destination: Relative(47), source_pointer: Relative(30) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(47) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 4228 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(47) }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(51), size: Relative(52) }, output: HeapArray { pointer: Relative(53), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(25), source: Relative(2) }, Store { destination_pointer: Relative(33), source: Relative(47) }, Store { destination_pointer: Relative(37), source: Relative(45) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(25) }, Cast { destination: Relative(30), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(25), source: Relative(30), bit_size: Field }, Cast { destination: Relative(2), source: Relative(25), bit_size: Integer(U32) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4252 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(30), location: 13304 }, Jump { location: 4255 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(2) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 4263 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(25) }, JumpIf { condition: Relative(37), location: 4270 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(35) }, JumpIf { condition: Relative(25), location: 4273 }, Call { location: 17476 }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 4279 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(25) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(6) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(51), source: Relative(43) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Direct(32839) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Direct(32839) }, Store { destination_pointer: Relative(25), source: Relative(47) }, Store { destination_pointer: Relative(37), source: Relative(2) }, Store { destination_pointer: Relative(44), source: Direct(32841) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4319 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13274 }, Jump { location: 4322 }, Load { destination: Relative(2), source_pointer: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(37) }, Load { destination: Relative(33), source_pointer: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(30) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(47) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 4331 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(47) }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(51), size: Relative(52) }, output: HeapArray { pointer: Relative(53), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(25), source: Relative(2) }, Store { destination_pointer: Relative(37), source: Relative(47) }, Store { destination_pointer: Relative(44), source: Relative(33) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(25) }, Cast { destination: Relative(30), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(25), source: Relative(30), bit_size: Field }, Cast { destination: Relative(2), source: Relative(25), bit_size: Integer(U32) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4355 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(30), location: 13162 }, Jump { location: 4358 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(2) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 4366 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(25) }, JumpIf { condition: Relative(37), location: 4373 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(35) }, JumpIf { condition: Relative(25), location: 4376 }, Call { location: 17476 }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 4382 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(25) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(6) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Mov { destination: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(51), source: Relative(9) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Direct(32839) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Direct(32839) }, Store { destination_pointer: Relative(25), source: Relative(47) }, Store { destination_pointer: Relative(37), source: Relative(2) }, Store { destination_pointer: Relative(44), source: Direct(32841) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4422 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 13132 }, Jump { location: 4425 }, Load { destination: Relative(2), source_pointer: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(37) }, Load { destination: Relative(33), source_pointer: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(30) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(47) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 4434 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(47) }, Mov { destination: Relative(47), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(47), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(51), size: Relative(52) }, output: HeapArray { pointer: Relative(53), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(25), source: Relative(2) }, Store { destination_pointer: Relative(37), source: Relative(47) }, Store { destination_pointer: Relative(44), source: Relative(33) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(25) }, Cast { destination: Relative(30), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(25), source: Relative(30), bit_size: Field }, Cast { destination: Relative(2), source: Relative(25), bit_size: Integer(U32) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4458 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(30), location: 13020 }, Jump { location: 4461 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(9), source_pointer: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(10) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 4469 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(33), source: Relative(30) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32838) }, Load { destination: Relative(33), source_pointer: Relative(2) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 4520 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(33) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4524 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(25), location: 12969 }, Jump { location: 4527 }, Load { destination: Relative(2), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(10) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 4535 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 4561 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, Mov { destination: Relative(44), source: Relative(37) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(45) }, Mov { destination: Direct(32772), source: Relative(44) }, Mov { destination: Direct(32773), source: Relative(47) }, Call { location: 23 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, Store { destination_pointer: Relative(44), source: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(9) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(25) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(37), size: Relative(33) } }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(10) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32838) }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(33) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(33) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(6) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4654 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(30), location: 12703 }, Jump { location: 4657 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Store { destination_pointer: Relative(3), source: Relative(9) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4663 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(2), location: 12643 }, Jump { location: 4666 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(9), source_pointer: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(10) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 4674 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(33), source: Relative(30) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32838) }, Load { destination: Relative(33), source_pointer: Relative(2) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 4709 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(33) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4713 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(25), location: 12605 }, Jump { location: 4716 }, Load { destination: Relative(2), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(10) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 4724 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 4750 }, Const { destination: Relative(33), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, Mov { destination: Relative(44), source: Relative(37) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U64), value: 6693878053340631133 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(45) }, Mov { destination: Direct(32772), source: Relative(44) }, Mov { destination: Direct(32773), source: Relative(47) }, Call { location: 23 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, Store { destination_pointer: Relative(44), source: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(9) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(25) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(37), size: Relative(33) } }, Mov { destination: Relative(9), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(9), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Mov { destination: Relative(33), source: Relative(10) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32839) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32838) }, BinaryIntOp { destination: Relative(33), op: LessThan, bit_size: U32, lhs: Direct(32842), rhs: Relative(25) }, JumpIf { condition: Relative(33), location: 4770 }, Call { location: 17497 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4772 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(25), location: 12573 }, Jump { location: 4775 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 4782 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 4793 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 50 }, Mov { destination: Relative(50), source: Direct(0) }, Mov { destination: Relative(51), source: Relative(9) }, Mov { destination: Relative(52), source: Direct(32838) }, Mov { destination: Relative(53), source: Direct(32842) }, Mov { destination: Relative(54), source: Direct(32844) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 17500 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(2), source_pointer: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(3) }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(33), source_pointer: Relative(9) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 4813 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(33) }, Mov { destination: Relative(33), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 9 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(33), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(44) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(33) }, Mov { destination: Relative(33), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Direct(32838) }, Load { destination: Relative(45), source_pointer: Relative(9) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 4848 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(45) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4852 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(10), location: 12535 }, Jump { location: 4855 }, Load { destination: Relative(9), source_pointer: Relative(44) }, Load { destination: Relative(10), source_pointer: Relative(33) }, Load { destination: Relative(30), source_pointer: Relative(9) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 4863 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(25) }, JumpIf { condition: Relative(30), location: 4889 }, Const { destination: Relative(37), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, Mov { destination: Relative(45), source: Relative(44) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U64), value: 9965974553718638037 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(47) }, Mov { destination: Direct(32772), source: Relative(45) }, Mov { destination: Direct(32773), source: Relative(50) }, Call { location: 23 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, Store { destination_pointer: Relative(45), source: Direct(32842) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(25) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(10) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(44), size: Relative(37) } }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(30) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(25) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32838) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Direct(32842), rhs: Relative(10) }, JumpIf { condition: Relative(37), location: 4909 }, Call { location: 17497 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4911 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(10), location: 12503 }, Jump { location: 4914 }, Load { destination: Relative(9), source_pointer: Relative(30) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(10) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 4921 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(9) }, Load { destination: Relative(30), source_pointer: Relative(9) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 4932 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(30) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 50 }, Mov { destination: Relative(50), source: Direct(0) }, Mov { destination: Relative(51), source: Relative(10) }, Mov { destination: Relative(52), source: Direct(32838) }, Mov { destination: Relative(53), source: Direct(32842) }, Mov { destination: Relative(54), source: Direct(32845) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(9) }, Call { location: 17500 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(9), source_pointer: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(10) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 4950 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Const { destination: Relative(10), bit_size: Field, value: 6 }, Const { destination: Relative(37), bit_size: Field, value: 15 }, Const { destination: Relative(44), bit_size: Field, value: 33 }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(47) }, Store { destination_pointer: Relative(50), source: Relative(10) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(37) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, Load { destination: Relative(47), source_pointer: Relative(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(47) }, Not { destination: Relative(51), source: Relative(51), bit_size: U1 }, JumpIf { condition: Relative(51), location: 4975 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(47) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 4979 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(25), location: 12490 }, Jump { location: 4982 }, Load { destination: Relative(25), source_pointer: Relative(44) }, Const { destination: Relative(30), bit_size: Integer(U8), value: 71 }, Const { destination: Relative(33), bit_size: Integer(U8), value: 58 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 40 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(45) }, Store { destination_pointer: Relative(47), source: Relative(30) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(27) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(16) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(18) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(41) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(12) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(34) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(27) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(15) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(15) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(14) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(34) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(16) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(18) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(41) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(16) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(14) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(15) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(21) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(16) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(41) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(27) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(12) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(18) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(27) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(28) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(18) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(31) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(14) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(32) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(13) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(33) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(18) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(19) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(31) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(14) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(32) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(13) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(24) }, JumpIf { condition: Relative(25), location: 5095 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 44 }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 44 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, Mov { destination: Relative(45), source: Relative(34) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U64), value: 2386996775688025706 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 39 }, Mov { destination: Direct(32771), source: Relative(47) }, Mov { destination: Direct(32772), source: Relative(45) }, Mov { destination: Direct(32773), source: Relative(50) }, Call { location: 23 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 39 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, Store { destination_pointer: Relative(45), source: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 3 }, Mov { destination: Direct(32771), source: Relative(47) }, Mov { destination: Direct(32772), source: Relative(45) }, Mov { destination: Direct(32773), source: Relative(50) }, Call { location: 23 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 3 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, Trap { revert_data: HeapVector { pointer: Relative(34), size: Relative(30) } }, Const { destination: Relative(2), bit_size: Field, value: 35 }, Const { destination: Relative(25), bit_size: Field, value: 65 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(34) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(34) }, Store { destination_pointer: Relative(44), source: Relative(37) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(25) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32840) }, Load { destination: Relative(25), source_pointer: Relative(9) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(25) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 5117 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(25) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5121 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(25), location: 12477 }, Jump { location: 5124 }, Load { destination: Relative(9), source_pointer: Relative(2) }, JumpIf { condition: Relative(9), location: 5127 }, Call { location: 17848 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(9), source_pointer: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 5135 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(34) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(37), source: Relative(34) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Direct(32839) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32838) }, Load { destination: Relative(37), source_pointer: Relative(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(37) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 5186 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(37) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5190 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(30), location: 12426 }, Jump { location: 5193 }, Load { destination: Relative(2), source_pointer: Relative(34) }, Load { destination: Relative(30), source_pointer: Relative(25) }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(25) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 5201 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(9) }, JumpIf { condition: Relative(25), location: 5227 }, Const { destination: Relative(37), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, Mov { destination: Relative(45), source: Relative(44) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(47) }, Mov { destination: Direct(32772), source: Relative(45) }, Mov { destination: Direct(32773), source: Relative(50) }, Call { location: 23 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, Store { destination_pointer: Relative(45), source: Direct(32842) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(9) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(30) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(44), size: Relative(37) } }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 33 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(25) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32838) }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(37) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(37) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(6) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5320 }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(34), location: 12159 }, Jump { location: 5323 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(9), source_pointer: Relative(25) }, Store { destination_pointer: Relative(3), source: Relative(9) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(8) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Direct(32838) }, Load { destination: Relative(25), source_pointer: Relative(9) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 5376 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(25) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5380 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(25), location: 12108 }, Jump { location: 5383 }, Load { destination: Relative(9), source_pointer: Relative(8) }, Load { destination: Relative(8), source_pointer: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 5391 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, JumpIf { condition: Relative(3), location: 5417 }, Const { destination: Relative(25), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(34) }, Mov { destination: Relative(34), source: Relative(30) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(35) }, Mov { destination: Direct(32772), source: Relative(34) }, Mov { destination: Direct(32773), source: Relative(37) }, Call { location: 23 }, Const { destination: Relative(35), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(35) }, Store { destination_pointer: Relative(34), source: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(8) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(30), size: Relative(25) } }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(3) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32838) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Direct(32842), rhs: Relative(8) }, JumpIf { condition: Relative(25), location: 5443 }, Call { location: 17497 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5445 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(8), location: 12062 }, Jump { location: 5448 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(3), source_pointer: Relative(2) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(8), rhs: Relative(3) }, Not { destination: Relative(9), source: Relative(9), bit_size: U1 }, JumpIf { condition: Relative(9), location: 5455 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Load { destination: Relative(9), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 5466 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(9) }, Const { destination: Relative(2), bit_size: Integer(U32), value: 50 }, Mov { destination: Relative(50), source: Direct(0) }, Mov { destination: Relative(51), source: Relative(3) }, Mov { destination: Relative(52), source: Direct(32838) }, Mov { destination: Relative(53), source: Direct(32842) }, Mov { destination: Relative(54), source: Direct(32846) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(2) }, Call { location: 17663 }, Mov { destination: Direct(0), source: Relative(0) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Const { destination: Relative(3), bit_size: Field, value: 12 }, Const { destination: Relative(9), bit_size: Field, value: 30 }, Const { destination: Relative(25), bit_size: Field, value: 70 }, Const { destination: Relative(30), bit_size: Field, value: 66 }, Const { destination: Relative(34), bit_size: Field, value: 130 }, Mov { destination: Relative(35), source: Direct(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 7 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(37) }, IndirectConst { destination_pointer: Relative(35), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(37) }, Store { destination_pointer: Relative(44), source: Relative(3) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(9) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(9) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(25) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(30) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(34) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 5509 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5513 }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(8), location: 12039 }, Jump { location: 5516 }, Load { destination: Relative(2), source_pointer: Relative(9) }, JumpIf { condition: Relative(2), location: 5519 }, Call { location: 17851 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(8), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(8) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(9), source: Relative(8) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32839) }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Direct(32838) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 5576 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(11) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(6) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(37), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(44) }, Store { destination_pointer: Relative(45), source: Relative(3) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, Store { destination_pointer: Relative(11), source: Relative(37) }, Store { destination_pointer: Relative(30), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Direct(32841) }, Store { destination_pointer: Relative(35), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5616 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 12009 }, Jump { location: 5619 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(30) }, Load { destination: Relative(37), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(25) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 5628 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(47), size: Relative(50) }, output: HeapArray { pointer: Relative(51), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(44) }, Store { destination_pointer: Relative(34), source: Relative(37) }, Store { destination_pointer: Relative(35), source: Direct(32840) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(11) }, Cast { destination: Relative(25), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(25), bit_size: Field }, Cast { destination: Relative(2), source: Relative(11), bit_size: Integer(U32) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Const { destination: Relative(25), bit_size: Field, value: 42 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5653 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(30), location: 11898 }, Jump { location: 5656 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Load { destination: Relative(30), source_pointer: Relative(2) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(30) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 5664 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Direct(32841) }, JumpIf { condition: Relative(30), location: 5670 }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(35) } }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(11) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 5676 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Direct(32839) }, Load { destination: Relative(37), source_pointer: Relative(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(37) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 5690 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(37) }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(37), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(45) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(6) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, IndirectConst { destination_pointer: Relative(52), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(54), source: Relative(3) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Direct(32839) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Direct(32839) }, Store { destination_pointer: Relative(45), source: Relative(52) }, Store { destination_pointer: Relative(47), source: Relative(37) }, Store { destination_pointer: Relative(50), source: Direct(32841) }, Store { destination_pointer: Relative(51), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5730 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(30), location: 11868 }, Jump { location: 5733 }, Load { destination: Relative(30), source_pointer: Relative(45) }, Load { destination: Relative(34), source_pointer: Relative(47) }, Load { destination: Relative(37), source_pointer: Relative(50) }, Load { destination: Relative(44), source_pointer: Relative(34) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(44) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 5742 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(53), size: Relative(54) }, output: HeapArray { pointer: Relative(55), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(45), source: Relative(30) }, Store { destination_pointer: Relative(47), source: Relative(44) }, Store { destination_pointer: Relative(50), source: Relative(37) }, Store { destination_pointer: Relative(51), source: Direct(32840) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Load { destination: Relative(30), source_pointer: Relative(34) }, Cast { destination: Relative(37), source: Relative(30), bit_size: Integer(U32) }, Cast { destination: Relative(34), source: Relative(37), bit_size: Field }, Cast { destination: Relative(30), source: Relative(34), bit_size: Integer(U32) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5766 }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(37), location: 11804 }, Jump { location: 5769 }, Load { destination: Relative(1), source_pointer: Relative(11) }, Load { destination: Relative(2), source_pointer: Relative(35) }, JumpIf { condition: Relative(1), location: 5773 }, Jump { location: 5781 }, JumpIf { condition: Relative(1), location: 5776 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, BinaryFieldOp { destination: Relative(1), op: Equals, lhs: Relative(2), rhs: Relative(25) }, JumpIf { condition: Relative(1), location: 5780 }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(11) } }, Jump { location: 5781 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 5788 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(11) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(6) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(37), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(37), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(44) }, Store { destination_pointer: Relative(45), source: Relative(3) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, Store { destination_pointer: Relative(11), source: Relative(37) }, Store { destination_pointer: Relative(30), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Direct(32841) }, Store { destination_pointer: Relative(35), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5828 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 11774 }, Jump { location: 5831 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(30) }, Load { destination: Relative(37), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(25) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 5840 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(47), size: Relative(50) }, output: HeapArray { pointer: Relative(51), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(44) }, Store { destination_pointer: Relative(34), source: Relative(37) }, Store { destination_pointer: Relative(35), source: Direct(32840) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(11) }, Cast { destination: Relative(25), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(25), bit_size: Field }, Cast { destination: Relative(2), source: Relative(11), bit_size: Integer(U32) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5864 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(25), location: 11673 }, Jump { location: 5867 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 5875 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Direct(32838) }, JumpIf { condition: Relative(25), location: 5881 }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(34) } }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 5887 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(34), source: Relative(11) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(6) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(45) }, Store { destination_pointer: Relative(47), source: Relative(3) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, Store { destination_pointer: Relative(11), source: Relative(44) }, Store { destination_pointer: Relative(34), source: Relative(2) }, Store { destination_pointer: Relative(35), source: Direct(32841) }, Store { destination_pointer: Relative(37), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5927 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 11643 }, Jump { location: 5930 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(30), source_pointer: Relative(35) }, Load { destination: Relative(44), source_pointer: Relative(25) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 5939 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(47), size: Relative(50) }, output: HeapArray { pointer: Relative(51), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Relative(44) }, Store { destination_pointer: Relative(35), source: Relative(30) }, Store { destination_pointer: Relative(37), source: Direct(32840) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(11) }, Cast { destination: Relative(25), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(25), bit_size: Field }, Cast { destination: Relative(2), source: Relative(11), bit_size: Integer(U32) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 5963 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(25), location: 11542 }, Jump { location: 5966 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(3), source_pointer: Relative(9) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 5974 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32838) }, JumpIf { condition: Relative(11), location: 5980 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(30) } }, Load { destination: Relative(3), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 5986 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(3) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(6) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Const { destination: Relative(37), bit_size: Field, value: 1 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(45) }, Store { destination_pointer: Relative(47), source: Relative(37) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, Store { destination_pointer: Relative(3), source: Relative(44) }, Store { destination_pointer: Relative(30), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Direct(32841) }, Store { destination_pointer: Relative(35), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6027 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 11512 }, Jump { location: 6030 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(11) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 6039 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(47), size: Relative(50) }, output: HeapArray { pointer: Relative(51), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(44) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Direct(32840) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Cast { destination: Relative(11), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(11), bit_size: Field }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6063 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 11401 }, Jump { location: 6066 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(3), source_pointer: Relative(9) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6074 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32838) }, BinaryIntOp { destination: Relative(3), op: Equals, bit_size: U1, lhs: Relative(11), rhs: Relative(5) }, JumpIf { condition: Relative(3), location: 6081 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(30) } }, Load { destination: Relative(3), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6087 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(3) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(6) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(45) }, Store { destination_pointer: Relative(47), source: Relative(37) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, Store { destination_pointer: Relative(3), source: Relative(44) }, Store { destination_pointer: Relative(30), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Direct(32841) }, Store { destination_pointer: Relative(35), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6127 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 11371 }, Jump { location: 6130 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(11) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 6139 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(47), size: Relative(50) }, output: HeapArray { pointer: Relative(51), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(44) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Direct(32840) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Cast { destination: Relative(11), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(11), bit_size: Field }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6163 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 11270 }, Jump { location: 6166 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(3), source_pointer: Relative(9) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6174 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Direct(32838) }, JumpIf { condition: Relative(11), location: 6180 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(30) } }, Load { destination: Relative(3), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6186 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(3) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(3), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(3) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(3) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(6) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(47), source: Relative(45) }, Store { destination_pointer: Relative(47), source: Relative(37) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Direct(32839) }, Store { destination_pointer: Relative(3), source: Relative(44) }, Store { destination_pointer: Relative(30), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Direct(32841) }, Store { destination_pointer: Relative(35), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6226 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 11240 }, Jump { location: 6229 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(11) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 6238 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(47), size: Relative(50) }, output: HeapArray { pointer: Relative(51), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(44) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Direct(32840) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(3) }, Cast { destination: Relative(11), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(3), source: Relative(11), bit_size: Field }, Cast { destination: Relative(2), source: Relative(3), bit_size: Integer(U32) }, Mov { destination: Relative(3), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6262 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 11129 }, Jump { location: 6265 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(3), source_pointer: Relative(9) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6273 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(34), op: Div, bit_size: U32, lhs: Relative(11), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(3) }, JumpIf { condition: Relative(30), location: 6280 }, Call { location: 17473 }, Const { destination: Relative(3), bit_size: Integer(U32), value: 15 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Relative(3) }, JumpIf { condition: Relative(30), location: 6284 }, Call { location: 17476 }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(11) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 6290 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(34), source: Relative(11) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(6) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(47) }, Store { destination_pointer: Relative(50), source: Relative(38) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, Store { destination_pointer: Relative(11), source: Relative(45) }, Store { destination_pointer: Relative(34), source: Relative(2) }, Store { destination_pointer: Relative(35), source: Direct(32841) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6330 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 11099 }, Jump { location: 6333 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(30), source_pointer: Relative(35) }, Load { destination: Relative(45), source_pointer: Relative(25) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 6342 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(50), size: Relative(51) }, output: HeapArray { pointer: Relative(52), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Relative(45) }, Store { destination_pointer: Relative(35), source: Relative(30) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(11) }, Cast { destination: Relative(25), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(25), bit_size: Field }, Cast { destination: Relative(2), source: Relative(11), bit_size: Integer(U32) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Const { destination: Relative(25), bit_size: Field, value: 4 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6367 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(30), location: 10988 }, Jump { location: 6370 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 6378 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, JumpIf { condition: Relative(34), location: 6385 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(3) }, JumpIf { condition: Relative(11), location: 6388 }, Call { location: 17476 }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 6394 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(11) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(34), source: Relative(11) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Direct(32839) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(34), source: Relative(6) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(47) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(47) }, Store { destination_pointer: Relative(50), source: Relative(43) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, Store { destination_pointer: Relative(11), source: Relative(45) }, Store { destination_pointer: Relative(34), source: Relative(2) }, Store { destination_pointer: Relative(35), source: Direct(32841) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6434 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 10958 }, Jump { location: 6437 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(30), source_pointer: Relative(35) }, Load { destination: Relative(45), source_pointer: Relative(25) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 6446 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(50), size: Relative(51) }, output: HeapArray { pointer: Relative(52), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Relative(45) }, Store { destination_pointer: Relative(35), source: Relative(30) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(11) }, Cast { destination: Relative(25), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(11), source: Relative(25), bit_size: Field }, Cast { destination: Relative(2), source: Relative(11), bit_size: Integer(U32) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6470 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(25), location: 10847 }, Jump { location: 6473 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6481 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Direct(32837) }, JumpIf { condition: Relative(11), location: 6487 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(30) } }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6493 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(10) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(6) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(43), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(43), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(44) }, Store { destination_pointer: Relative(45), source: Relative(38) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, Store { destination_pointer: Relative(10), source: Relative(43) }, Store { destination_pointer: Relative(30), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Direct(32841) }, Store { destination_pointer: Relative(35), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6533 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 10817 }, Jump { location: 6536 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(43), source_pointer: Relative(11) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 6545 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(43) }, Mov { destination: Relative(43), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(43), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(45), size: Relative(47) }, output: HeapArray { pointer: Relative(50), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(10), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(43) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(10) }, Cast { destination: Relative(11), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(10), source: Relative(11), bit_size: Field }, Cast { destination: Relative(2), source: Relative(10), bit_size: Integer(U32) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6569 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 10706 }, Jump { location: 6572 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6580 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Direct(32837) }, JumpIf { condition: Relative(11), location: 6586 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(30) } }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6592 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(10) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(6) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(43), source: Direct(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(44) }, IndirectConst { destination_pointer: Relative(43), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Mov { destination: Relative(45), source: Relative(44) }, Store { destination_pointer: Relative(45), source: Relative(37) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Direct(32839) }, Store { destination_pointer: Relative(10), source: Relative(43) }, Store { destination_pointer: Relative(30), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Direct(32841) }, Store { destination_pointer: Relative(35), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6632 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(2), location: 10676 }, Jump { location: 6635 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(43), source_pointer: Relative(11) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 6644 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(43) }, Mov { destination: Relative(43), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(43), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(45), size: Relative(47) }, output: HeapArray { pointer: Relative(50), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(10), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(43) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, Load { destination: Relative(2), source_pointer: Relative(10) }, Cast { destination: Relative(11), source: Relative(2), bit_size: Integer(U32) }, Cast { destination: Relative(10), source: Relative(11), bit_size: Field }, Cast { destination: Relative(2), source: Relative(10), bit_size: Integer(U32) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6668 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(11), location: 10575 }, Jump { location: 6671 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(11) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6679 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Direct(32842) }, JumpIf { condition: Relative(11), location: 6685 }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(30) } }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(30), source: Relative(30), bit_size: U1 }, JumpIf { condition: Relative(30), location: 6691 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(10) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Direct(32839) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Store { destination_pointer: Relative(9), source: Direct(32838) }, Load { destination: Relative(10), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(10) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 6746 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Load { destination: Relative(34), source_pointer: Relative(2) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 6757 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(34) }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(43) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Mov { destination: Relative(44), source: Relative(43) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(6) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(50), source: Direct(1) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(51) }, IndirectConst { destination_pointer: Relative(50), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Mov { destination: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(42) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Direct(32839) }, Store { destination_pointer: Relative(43), source: Relative(50) }, Store { destination_pointer: Relative(44), source: Relative(34) }, Store { destination_pointer: Relative(45), source: Direct(32841) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6797 }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(11), location: 10545 }, Jump { location: 6800 }, Load { destination: Relative(11), source_pointer: Relative(43) }, Load { destination: Relative(25), source_pointer: Relative(44) }, Load { destination: Relative(30), source_pointer: Relative(45) }, Load { destination: Relative(34), source_pointer: Relative(25) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 6809 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(34) }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(50), size: Relative(51) }, output: HeapArray { pointer: Relative(52), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(43), source: Relative(11) }, Store { destination_pointer: Relative(44), source: Relative(34) }, Store { destination_pointer: Relative(45), source: Relative(30) }, Store { destination_pointer: Relative(47), source: Direct(32840) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, Load { destination: Relative(11), source_pointer: Relative(25) }, Cast { destination: Relative(30), source: Relative(11), bit_size: Integer(U32) }, Cast { destination: Relative(25), source: Relative(30), bit_size: Field }, Cast { destination: Relative(11), source: Relative(25), bit_size: Integer(U32) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 6833 }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(30), location: 10486 }, Jump { location: 6836 }, Load { destination: Relative(1), source_pointer: Relative(10) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 34 }, JumpIf { condition: Relative(1), location: 6953 }, Jump { location: 6840 }, Const { destination: Relative(1), bit_size: Integer(U8), value: 55 }, Const { destination: Relative(10), bit_size: Integer(U8), value: 33 }, Mov { destination: Relative(11), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 20 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(11), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(25) }, Store { destination_pointer: Relative(30), source: Relative(36) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(27) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(18) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(20) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(21) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(22) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(23) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(14) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(18) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(28) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(27) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(15) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(18) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(31) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(14) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(32) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(18) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(1) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(10) }, Const { destination: Relative(1), bit_size: Integer(U8), value: 57 }, Mov { destination: Relative(10), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 30 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(10), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Mov { destination: Relative(30), source: Relative(25) }, Store { destination_pointer: Relative(30), source: Relative(19) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(31) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(41) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(12) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(17) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(33) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(13) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(16) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(15) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(41) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(12) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(26) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(40) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(22) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(14) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(12) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(26) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(16) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(29) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(33) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(39) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(1) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(24) }, BinaryIntOp { destination: Relative(1), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32840)), HeapArray(HeapArray { pointer: Relative(1), size: 19 }), HeapArray(HeapArray { pointer: Relative(13), size: 29 }), MemoryAddress(Relative(5))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 19 }, Array { value_types: [Simple(Integer(U8))], size: 29 }, Simple(Integer(U1))] }, Jump { location: 7055 }, Load { destination: Relative(10), source_pointer: Relative(8) }, Load { destination: Relative(11), source_pointer: Relative(10) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(11) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 6960 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Load { destination: Relative(15), source_pointer: Relative(10) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 6971 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(15) }, Mov { destination: Relative(15), source: Direct(1) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(25) }, IndirectConst { destination_pointer: Relative(15), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Mov { destination: Relative(26), source: Relative(25) }, Store { destination_pointer: Relative(26), source: Direct(32839) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32839) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Direct(32839) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(26), source: Relative(6) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(29), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(35) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Mov { destination: Relative(36), source: Relative(35) }, Store { destination_pointer: Relative(36), source: Relative(42) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, Store { destination_pointer: Relative(36), source: Direct(32839) }, Store { destination_pointer: Relative(25), source: Relative(34) }, Store { destination_pointer: Relative(26), source: Relative(15) }, Store { destination_pointer: Relative(29), source: Direct(32841) }, Store { destination_pointer: Relative(30), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7011 }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(13), location: 10456 }, Jump { location: 7014 }, Load { destination: Relative(13), source_pointer: Relative(25) }, Load { destination: Relative(15), source_pointer: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(29) }, Load { destination: Relative(34), source_pointer: Relative(15) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 7023 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(34) }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(36) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(36), size: Relative(39) }, output: HeapArray { pointer: Relative(40), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(25), source: Relative(13) }, Store { destination_pointer: Relative(26), source: Relative(34) }, Store { destination_pointer: Relative(29), source: Relative(16) }, Store { destination_pointer: Relative(30), source: Direct(32840) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, Load { destination: Relative(13), source_pointer: Relative(15) }, Cast { destination: Relative(16), source: Relative(13), bit_size: Integer(U32) }, Cast { destination: Relative(15), source: Relative(16), bit_size: Field }, Cast { destination: Relative(13), source: Relative(15), bit_size: Integer(U32) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7047 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(16), location: 10397 }, Jump { location: 7050 }, Load { destination: Relative(1), source_pointer: Relative(11) }, JumpIf { condition: Relative(1), location: 7054 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(10) } }, Jump { location: 7055 }, Load { destination: Relative(10), source_pointer: Relative(8) }, Load { destination: Relative(11), source_pointer: Relative(9) }, Load { destination: Relative(13), source_pointer: Relative(10) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 7063 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(13) }, Mov { destination: Relative(13), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(13), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(16) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(13) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32838) }, Load { destination: Relative(25), source_pointer: Relative(10) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 7102 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(25) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7106 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(15), location: 10346 }, Jump { location: 7109 }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(13) }, Load { destination: Relative(13), source_pointer: Relative(15) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(13) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 7117 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(11) }, JumpIf { condition: Relative(13), location: 7143 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(29), source: Direct(1) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(30) }, Mov { destination: Relative(30), source: Relative(29) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(34) }, Mov { destination: Direct(32772), source: Relative(30) }, Mov { destination: Direct(32773), source: Relative(35) }, Call { location: 23 }, Const { destination: Relative(34), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(34) }, Store { destination_pointer: Relative(30), source: Direct(32842) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(11) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(16) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(29), size: Relative(26) } }, Load { destination: Relative(13), source_pointer: Relative(10) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(13) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 7149 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(13) }, Const { destination: Relative(13), bit_size: Integer(U8), value: 45 }, Const { destination: Relative(29), bit_size: Integer(U8), value: 62 }, Mov { destination: Relative(30), source: Direct(1) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(34) }, IndirectConst { destination_pointer: Relative(30), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Mov { destination: Relative(35), source: Relative(34) }, Store { destination_pointer: Relative(35), source: Relative(19) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(31) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(14) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(32) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(24) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(18) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(13) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(29) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(18) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(19) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(20) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(21) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(22) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(23) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(14) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(35), source: Relative(24) }, Mov { destination: Relative(13), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, IndirectConst { destination_pointer: Relative(13), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Mov { destination: Relative(32), source: Relative(29) }, Store { destination_pointer: Relative(32), source: Relative(19) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(31) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(41) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(12) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(17) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(33) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(28) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(41) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(14) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(22) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(17) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(32), source: Relative(24) }, Load { destination: Relative(2), source_pointer: Relative(13) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(2) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 7233 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(2) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7237 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 10293 }, Jump { location: 7240 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 7246 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(25), source: Relative(16) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Direct(32839) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32838) }, Load { destination: Relative(25), source_pointer: Relative(10) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 7275 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(25) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7279 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(15), location: 10255 }, Jump { location: 7282 }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(16), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(15) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(2) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 7290 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(11) }, JumpIf { condition: Relative(2), location: 7316 }, Const { destination: Relative(26), bit_size: Integer(U32), value: 83 }, Mov { destination: Relative(28), source: Direct(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 83 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(29) }, Mov { destination: Relative(29), source: Relative(28) }, IndirectConst { destination_pointer: Relative(29), bit_size: Integer(U64), value: 6693878053340631133 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Const { destination: Relative(32), bit_size: Integer(U32), value: 79 }, Mov { destination: Direct(32771), source: Relative(31) }, Mov { destination: Direct(32772), source: Relative(29) }, Mov { destination: Direct(32773), source: Relative(32) }, Call { location: 23 }, Const { destination: Relative(31), bit_size: Integer(U32), value: 79 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(31) }, Store { destination_pointer: Relative(29), source: Direct(32842) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(11) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(16) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(28), size: Relative(26) } }, Load { destination: Relative(2), source_pointer: Relative(15) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(2) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 7322 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(29), source: Relative(28) }, Store { destination_pointer: Relative(29), source: Direct(32839) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Direct(32839) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Direct(32839) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Relative(6) }, Load { destination: Relative(28), source_pointer: Relative(30) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 7343 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(28) }, Load { destination: Relative(28), source_pointer: Relative(13) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 7351 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(28) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7355 }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(25), location: 10024 }, Jump { location: 7358 }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 6 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32838) }, Load { destination: Relative(16), source_pointer: Relative(10) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(16) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 7385 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(16) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7389 }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(16), location: 9986 }, Jump { location: 7392 }, Load { destination: Relative(10), source_pointer: Relative(15) }, Load { destination: Relative(15), source_pointer: Relative(2) }, Load { destination: Relative(2), source_pointer: Relative(10) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 7400 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, JumpIf { condition: Relative(2), location: 7426 }, Const { destination: Relative(25), bit_size: Integer(U32), value: 85 }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 85 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(28) }, Mov { destination: Relative(28), source: Relative(26) }, IndirectConst { destination_pointer: Relative(28), bit_size: Integer(U64), value: 9965974553718638037 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 81 }, Mov { destination: Direct(32771), source: Relative(29) }, Mov { destination: Direct(32772), source: Relative(28) }, Mov { destination: Direct(32773), source: Relative(30) }, Call { location: 23 }, Const { destination: Relative(29), bit_size: Integer(U32), value: 81 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(29) }, Store { destination_pointer: Relative(28), source: Direct(32842) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(11) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(15) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(26), size: Relative(25) } }, Load { destination: Relative(2), source_pointer: Relative(10) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 7432 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, Const { destination: Relative(2), bit_size: Integer(U8), value: 70 }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 20 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(26) }, Store { destination_pointer: Relative(28), source: Relative(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(27) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(23) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(12) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(17) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(18) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(20) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(21) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(23) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(18) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(19) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(20) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(21) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(22) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(23) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(14) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Relative(24) }, Load { destination: Relative(2), source_pointer: Relative(13) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(2) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 7484 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(2) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7488 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 9941 }, Jump { location: 7491 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Load { destination: Relative(11), source_pointer: Relative(2) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(11) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 7499 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(11) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(10) }, Load { destination: Relative(14), source_pointer: Relative(2) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 7513 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32838) }, Load { destination: Relative(17), source_pointer: Relative(2) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 7552 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(17) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7556 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(12), location: 9890 }, Jump { location: 7559 }, Load { destination: Relative(2), source_pointer: Relative(16) }, Load { destination: Relative(12), source_pointer: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(2) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 7567 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, JumpIf { condition: Relative(14), location: 7593 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, Mov { destination: Relative(18), source: Relative(17) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(19) }, Mov { destination: Direct(32772), source: Relative(18) }, Mov { destination: Direct(32773), source: Relative(20) }, Call { location: 23 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(19) }, Store { destination_pointer: Relative(18), source: Direct(32842) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(10) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(12) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(17), size: Relative(16) } }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(2), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Mov { destination: Relative(14), source: Relative(12) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Direct(32839) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(2) }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Direct(32838) }, Mov { destination: Relative(14), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(14), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Mov { destination: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(6) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7662 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(15), location: 9624 }, Jump { location: 7665 }, Load { destination: Relative(2), source_pointer: Relative(13) }, Load { destination: Relative(10), source_pointer: Relative(12) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Store { destination_pointer: Relative(13), source: Relative(2) }, Load { destination: Relative(12), source_pointer: Relative(10) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 7675 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(12) }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 11 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(15) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(15) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(12) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32838) }, Load { destination: Relative(16), source_pointer: Relative(10) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 7714 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(16) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7718 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(14), location: 9573 }, Jump { location: 7721 }, Load { destination: Relative(10), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(12) }, Load { destination: Relative(12), source_pointer: Relative(10) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 7729 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(2) }, JumpIf { condition: Relative(12), location: 7755 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 86 }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 86 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, Mov { destination: Relative(18), source: Relative(17) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U64), value: 9576462532509309328 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 82 }, Mov { destination: Direct(32771), source: Relative(19) }, Mov { destination: Direct(32772), source: Relative(18) }, Mov { destination: Direct(32773), source: Relative(20) }, Call { location: 23 }, Const { destination: Relative(19), bit_size: Integer(U32), value: 82 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(19) }, Store { destination_pointer: Relative(18), source: Direct(32842) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(14) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(17), size: Relative(16) } }, Mov { destination: Relative(2), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(10) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 21 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(10) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32838) }, Mov { destination: Relative(12), source: Direct(1) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(14) }, IndirectConst { destination_pointer: Relative(12), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(14) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(6) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7824 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(14), location: 9308 }, Jump { location: 7827 }, Load { destination: Relative(2), source_pointer: Relative(13) }, Load { destination: Relative(3), source_pointer: Relative(10) }, Store { destination_pointer: Relative(11), source: Relative(3) }, Store { destination_pointer: Relative(13), source: Relative(2) }, Const { destination: Relative(2), bit_size: Field, value: 10944121435919637611123202872628637544274182200208017171849102093287904247809 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7834 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(3), location: 9248 }, Jump { location: 7837 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7839 }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(4) }, JumpIf { condition: Relative(2), location: 9178 }, Jump { location: 7842 }, Const { destination: Relative(2), bit_size: Integer(U64), value: 0 }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(4), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(4) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(7), source: Relative(4) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32839) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(5) }, Mov { destination: Relative(4), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(3) }, Mov { destination: Relative(7), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Direct(32838) }, Mov { destination: Relative(8), source: Direct(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 17 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(9) }, IndirectConst { destination_pointer: Relative(8), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Mov { destination: Relative(10), source: Relative(9) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Direct(32839) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Direct(32838) }, Load { destination: Relative(10), source_pointer: Relative(3) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 7935 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(10) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(12), source: Relative(10) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Direct(32839) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(6) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(15), source: Direct(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(16) }, IndirectConst { destination_pointer: Relative(15), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Mov { destination: Relative(17), source: Relative(16) }, Store { destination_pointer: Relative(17), source: Relative(37) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Direct(32839) }, Store { destination_pointer: Relative(10), source: Relative(15) }, Store { destination_pointer: Relative(12), source: Relative(3) }, Store { destination_pointer: Relative(13), source: Direct(32841) }, Store { destination_pointer: Relative(14), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 7975 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(3), location: 9148 }, Jump { location: 7978 }, Load { destination: Relative(3), source_pointer: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(12) }, Load { destination: Relative(15), source_pointer: Relative(13) }, Load { destination: Relative(16), source_pointer: Relative(11) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 7987 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(16) }, Mov { destination: Relative(16), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, IndirectConst { destination_pointer: Relative(16), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(18), size: Relative(19) }, output: HeapArray { pointer: Relative(20), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(10), source: Relative(3) }, Store { destination_pointer: Relative(12), source: Relative(16) }, Store { destination_pointer: Relative(13), source: Relative(15) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, Load { destination: Relative(3), source_pointer: Relative(10) }, Cast { destination: Relative(11), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(10), source: Relative(11), bit_size: Field }, Cast { destination: Relative(3), source: Relative(10), bit_size: Integer(U32) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Const { destination: Relative(11), bit_size: Integer(U64), value: 2 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8012 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(12), location: 9036 }, Jump { location: 8015 }, Load { destination: Relative(3), source_pointer: Relative(4) }, Load { destination: Relative(10), source_pointer: Relative(7) }, Load { destination: Relative(12), source_pointer: Relative(3) }, Const { destination: Relative(13), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(13), rhs: Relative(12) }, Not { destination: Relative(14), source: Relative(14), bit_size: U1 }, JumpIf { condition: Relative(14), location: 8023 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(10), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(15), op: Div, bit_size: U32, lhs: Relative(12), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(14), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(10) }, JumpIf { condition: Relative(14), location: 8030 }, Call { location: 17473 }, Const { destination: Relative(10), bit_size: Integer(U32), value: 12 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, JumpIf { condition: Relative(14), location: 8034 }, Call { location: 17476 }, Load { destination: Relative(12), source_pointer: Relative(3) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 8040 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(12) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(15), source: Relative(12) }, Store { destination_pointer: Relative(15), source: Direct(32839) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32839) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Direct(32839) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(6) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Mov { destination: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(20), source: Relative(38) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Direct(32839) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Direct(32839) }, Store { destination_pointer: Relative(12), source: Relative(18) }, Store { destination_pointer: Relative(15), source: Relative(3) }, Store { destination_pointer: Relative(16), source: Direct(32841) }, Store { destination_pointer: Relative(17), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8080 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(3), location: 9006 }, Jump { location: 8083 }, Load { destination: Relative(3), source_pointer: Relative(12) }, Load { destination: Relative(13), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(18), source_pointer: Relative(13) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(20), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(20), source: Relative(20), bit_size: U1 }, JumpIf { condition: Relative(20), location: 8092 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(18) }, Mov { destination: Relative(18), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(18), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(20), size: Relative(21) }, output: HeapArray { pointer: Relative(22), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(12), source: Relative(3) }, Store { destination_pointer: Relative(15), source: Relative(18) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Store { destination_pointer: Relative(17), source: Direct(32840) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(32841) }, Load { destination: Relative(3), source_pointer: Relative(12) }, Cast { destination: Relative(13), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(12), source: Relative(13), bit_size: Field }, Cast { destination: Relative(3), source: Relative(12), bit_size: Integer(U32) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Const { destination: Relative(13), bit_size: Integer(U64), value: 4 }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8117 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(14), location: 8894 }, Jump { location: 8120 }, Load { destination: Relative(3), source_pointer: Relative(9) }, Load { destination: Relative(12), source_pointer: Relative(8) }, Load { destination: Relative(14), source_pointer: Relative(3) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 8128 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U32, lhs: Relative(12), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(17), op: Div, bit_size: U32, lhs: Relative(14), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(12) }, JumpIf { condition: Relative(16), location: 8135 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 8138 }, Call { location: 17476 }, Load { destination: Relative(12), source_pointer: Relative(3) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 8144 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(12) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(12) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(16), source: Relative(12) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Direct(32839) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(6) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(20) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Mov { destination: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(21), source: Relative(38) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32839) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(21), source: Direct(32839) }, Store { destination_pointer: Relative(12), source: Relative(19) }, Store { destination_pointer: Relative(16), source: Relative(3) }, Store { destination_pointer: Relative(17), source: Direct(32841) }, Store { destination_pointer: Relative(18), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8184 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(3), location: 8864 }, Jump { location: 8187 }, Load { destination: Relative(3), source_pointer: Relative(12) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(14) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(21), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(21), source: Relative(21), bit_size: U1 }, JumpIf { condition: Relative(21), location: 8196 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(19) }, Mov { destination: Relative(19), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(19), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(21), size: Relative(22) }, output: HeapArray { pointer: Relative(23), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(12), source: Relative(3) }, Store { destination_pointer: Relative(16), source: Relative(19) }, Store { destination_pointer: Relative(17), source: Relative(15) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(32841) }, Load { destination: Relative(3), source_pointer: Relative(12) }, Cast { destination: Relative(14), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(12), source: Relative(14), bit_size: Field }, Cast { destination: Relative(3), source: Relative(12), bit_size: Integer(U32) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8220 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(14), location: 8752 }, Jump { location: 8223 }, Load { destination: Relative(3), source_pointer: Relative(9) }, Load { destination: Relative(12), source_pointer: Relative(8) }, Load { destination: Relative(13), source_pointer: Relative(3) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 8231 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U32, lhs: Relative(12), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 8238 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 8241 }, Call { location: 17476 }, Load { destination: Relative(10), source_pointer: Relative(3) }, Const { destination: Relative(12), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 8247 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(10) }, Mov { destination: Relative(3), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(3), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, Mov { destination: Relative(13), source: Relative(10) }, Store { destination_pointer: Relative(13), source: Direct(32839) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32839) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Direct(32839) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(6) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(15), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(16), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(18) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Mov { destination: Relative(19), source: Relative(18) }, Store { destination_pointer: Relative(19), source: Relative(37) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32839) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Direct(32839) }, Store { destination_pointer: Relative(10), source: Relative(17) }, Store { destination_pointer: Relative(13), source: Relative(3) }, Store { destination_pointer: Relative(15), source: Direct(32841) }, Store { destination_pointer: Relative(16), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8287 }, BinaryIntOp { destination: Relative(3), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32837) }, JumpIf { condition: Relative(3), location: 8722 }, Jump { location: 8290 }, Load { destination: Relative(3), source_pointer: Relative(10) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Load { destination: Relative(14), source_pointer: Relative(15) }, Load { destination: Relative(17), source_pointer: Relative(12) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 8299 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(19) }, IndirectConst { destination_pointer: Relative(17), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(19), size: Relative(20) }, output: HeapArray { pointer: Relative(21), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(10), source: Relative(3) }, Store { destination_pointer: Relative(13), source: Relative(17) }, Store { destination_pointer: Relative(15), source: Relative(14) }, Store { destination_pointer: Relative(16), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32841) }, Load { destination: Relative(3), source_pointer: Relative(10) }, Cast { destination: Relative(12), source: Relative(3), bit_size: Integer(U32) }, Cast { destination: Relative(10), source: Relative(12), bit_size: Field }, Cast { destination: Relative(3), source: Relative(10), bit_size: Integer(U32) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(1), source: Direct(32838) }, Jump { location: 8323 }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, JumpIf { condition: Relative(12), location: 8610 }, Jump { location: 8326 }, Load { destination: Relative(1), source_pointer: Relative(4) }, Load { destination: Relative(3), source_pointer: Relative(7) }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(7), source_pointer: Relative(8) }, Mov { destination: Relative(8), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(5) }, Load { destination: Relative(9), source_pointer: Relative(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(11), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(11), source: Relative(11), bit_size: U1 }, JumpIf { condition: Relative(11), location: 8339 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(4) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(9) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 8347 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Equals, bit_size: U32, lhs: Relative(3), rhs: Relative(7) }, JumpIf { condition: Relative(9), location: 8352 }, Jump { location: 8380 }, Store { destination_pointer: Relative(8), source: Direct(32840) }, Load { destination: Relative(7), source_pointer: Relative(1) }, Const { destination: Relative(9), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(10), op: Equals, bit_size: U32, lhs: Relative(9), rhs: Relative(7) }, Not { destination: Relative(10), source: Relative(10), bit_size: U1 }, JumpIf { condition: Relative(10), location: 8359 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Store { destination_pointer: Relative(1), source: Relative(7) }, Mov { destination: Relative(7), source: Direct(1) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(10) }, IndirectConst { destination_pointer: Relative(7), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, Mov { destination: Relative(11), source: Relative(10) }, Store { destination_pointer: Relative(11), source: Direct(32839) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Direct(32839) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Direct(32839) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(6) }, Mov { destination: Relative(3), source: Direct(32838) }, Jump { location: 8376 }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, JumpIf { condition: Relative(6), location: 8385 }, Jump { location: 8379 }, Jump { location: 8380 }, Load { destination: Relative(1), source_pointer: Relative(8) }, JumpIf { condition: Relative(1), location: 8384 }, Const { destination: Relative(2), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(2) } }, Return, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(6) }, Load { destination: Relative(9), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(10) }, Load { destination: Relative(12), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(10) }, Load { destination: Relative(6), source_pointer: Relative(14) }, Load { destination: Relative(10), source_pointer: Relative(8) }, Not { destination: Relative(13), source: Relative(6), bit_size: U1 }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U1, lhs: Relative(13), rhs: Relative(9) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(6) }, JumpIf { condition: Relative(9), location: 8407 }, Jump { location: 8512 }, Load { destination: Relative(9), source_pointer: Relative(4) }, Const { destination: Relative(10), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(13), op: Equals, bit_size: U32, lhs: Relative(10), rhs: Relative(9) }, Not { destination: Relative(13), source: Relative(13), bit_size: U1 }, JumpIf { condition: Relative(13), location: 8413 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(9) }, Mov { destination: Relative(9), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(5) }, Mov { destination: Relative(13), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(2) }, Load { destination: Relative(14), source_pointer: Relative(4) }, Const { destination: Relative(15), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 8427 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Load { destination: Relative(14), source_pointer: Relative(7) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 8435 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(14) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(21) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Mov { destination: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(22), source: Relative(11) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32839) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(22), source: Direct(32839) }, Store { destination_pointer: Relative(14), source: Relative(20) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Store { destination_pointer: Relative(18), source: Direct(32841) }, Store { destination_pointer: Relative(19), source: Relative(5) }, Mov { destination: Relative(6), source: Direct(32838) }, Jump { location: 8462 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Direct(32837) }, JumpIf { condition: Relative(10), location: 8580 }, Jump { location: 8465 }, Load { destination: Relative(10), source_pointer: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Load { destination: Relative(16), source_pointer: Relative(18) }, Load { destination: Relative(20), source_pointer: Relative(15) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 8474 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(20) }, Mov { destination: Relative(20), source: Direct(1) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(22) }, IndirectConst { destination_pointer: Relative(20), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(22), size: Relative(23) }, output: HeapArray { pointer: Relative(24), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(14), source: Relative(10) }, Store { destination_pointer: Relative(17), source: Relative(20) }, Store { destination_pointer: Relative(18), source: Relative(16) }, Store { destination_pointer: Relative(19), source: Direct(32840) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(32841) }, Load { destination: Relative(10), source_pointer: Relative(14) }, Cast { destination: Relative(15), source: Relative(10), bit_size: Integer(U32) }, Cast { destination: Relative(14), source: Relative(15), bit_size: Field }, Cast { destination: Relative(10), source: Relative(14), bit_size: Integer(U32) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, Mov { destination: Relative(6), source: Direct(32838) }, Jump { location: 8498 }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Direct(32836) }, JumpIf { condition: Relative(15), location: 8515 }, Jump { location: 8501 }, Load { destination: Relative(6), source_pointer: Relative(9) }, Load { destination: Relative(9), source_pointer: Relative(13) }, JumpIf { condition: Relative(6), location: 8507 }, Jump { location: 8505 }, Store { destination_pointer: Relative(8), source: Relative(5) }, Jump { location: 8512 }, BinaryIntOp { destination: Relative(6), op: Equals, bit_size: U64, lhs: Relative(12), rhs: Relative(9) }, JumpIf { condition: Relative(6), location: 8512 }, Jump { location: 8510 }, Store { destination_pointer: Relative(8), source: Relative(5) }, Jump { location: 8512 }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32841) }, Mov { destination: Relative(3), source: Relative(6) }, Jump { location: 8376 }, Load { destination: Relative(15), source_pointer: Relative(14) }, JumpIf { condition: Relative(15), location: 8577 }, Jump { location: 8518 }, Load { destination: Relative(15), source_pointer: Relative(4) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 8524 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(6), rhs: Relative(6) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(6) }, JumpIf { condition: Relative(17), location: 8534 }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(6) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(6) }, JumpIf { condition: Relative(19), location: 8534 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(6), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 8538 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(15), op: Div, bit_size: U32, lhs: Relative(17), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 8543 }, Call { location: 17854 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(19), op: Div, bit_size: U32, lhs: Relative(17), rhs: Relative(18) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U32, lhs: Relative(17), rhs: Relative(20) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, JumpIf { condition: Relative(17), location: 8550 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Load { destination: Relative(15), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, Load { destination: Relative(17), source_pointer: Relative(22) }, Not { destination: Relative(18), source: Relative(17), bit_size: U1 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U1, lhs: Relative(18), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 8570 }, Jump { location: 8577 }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(19), rhs: Relative(11) }, JumpIf { condition: Relative(15), location: 8573 }, Jump { location: 8577 }, Store { destination_pointer: Relative(9), source: Direct(32840) }, Store { destination_pointer: Relative(13), source: Relative(20) }, Store { destination_pointer: Relative(14), source: Direct(32840) }, Jump { location: 8577 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32841) }, Mov { destination: Relative(6), source: Relative(15) }, Jump { location: 8498 }, Load { destination: Relative(10), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(6), rhs: Relative(10) }, JumpIf { condition: Relative(15), location: 8584 }, Jump { location: 8607 }, Load { destination: Relative(10), source_pointer: Relative(14) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Load { destination: Relative(16), source_pointer: Relative(18) }, Load { destination: Relative(20), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(6) }, Load { destination: Relative(21), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(6) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryFieldOp { destination: Relative(23), op: Add, lhs: Relative(21), rhs: Relative(22) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(6) }, Store { destination_pointer: Relative(24), source: Relative(23) }, Store { destination_pointer: Relative(14), source: Relative(10) }, Store { destination_pointer: Relative(17), source: Relative(21) }, Store { destination_pointer: Relative(18), source: Relative(16) }, Store { destination_pointer: Relative(19), source: Relative(20) }, Jump { location: 8607 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32841) }, Mov { destination: Relative(6), source: Relative(10) }, Jump { location: 8462 }, Load { destination: Relative(12), source_pointer: Relative(10) }, JumpIf { condition: Relative(12), location: 8719 }, Jump { location: 8613 }, Load { destination: Relative(12), source_pointer: Relative(9) }, Load { destination: Relative(13), source_pointer: Relative(12) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 8620 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, JumpIf { condition: Relative(15), location: 8630 }, BinaryIntOp { destination: Relative(18), op: Div, bit_size: U32, lhs: Relative(13), rhs: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, JumpIf { condition: Relative(17), location: 8630 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(13) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 8634 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(13) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 8639 }, Call { location: 17854 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(17), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(16) }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, BinaryIntOp { destination: Relative(13), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, JumpIf { condition: Relative(15), location: 8646 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Load { destination: Relative(13), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Not { destination: Relative(18), source: Relative(13), bit_size: U1 }, BinaryIntOp { destination: Relative(13), op: Or, bit_size: U1, lhs: Relative(19), rhs: Relative(18) }, JumpIf { condition: Relative(13), location: 8670 }, Jump { location: 8665 }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(17), rhs: Relative(37) }, JumpIf { condition: Relative(13), location: 8668 }, Jump { location: 8680 }, Store { destination_pointer: Relative(12), source: Direct(32840) }, Jump { location: 8680 }, Store { destination_pointer: Relative(12), source: Direct(32840) }, Load { destination: Relative(13), source_pointer: Relative(9) }, Load { destination: Relative(14), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(14), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 8677 }, Call { location: 17854 }, Store { destination_pointer: Relative(9), source: Relative(13) }, Store { destination_pointer: Relative(8), source: Relative(17) }, Jump { location: 8680 }, Load { destination: Relative(13), source_pointer: Relative(12) }, JumpIf { condition: Relative(13), location: 8683 }, Jump { location: 8719 }, Load { destination: Relative(12), source_pointer: Relative(9) }, Load { destination: Relative(13), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(16) }, Store { destination_pointer: Relative(17), source: Relative(37) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, Store { destination_pointer: Relative(17), source: Relative(11) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Store { destination_pointer: Relative(17), source: Relative(5) }, Store { destination_pointer: Relative(9), source: Relative(14) }, Store { destination_pointer: Relative(8), source: Relative(13) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Jump { location: 8719 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8323 }, Load { destination: Relative(3), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(12), location: 8726 }, Jump { location: 8749 }, Load { destination: Relative(3), source_pointer: Relative(10) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Load { destination: Relative(14), source_pointer: Relative(15) }, Load { destination: Relative(17), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(1) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(1) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryFieldOp { destination: Relative(20), op: Add, lhs: Relative(18), rhs: Relative(19) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(1) }, Store { destination_pointer: Relative(21), source: Relative(20) }, Store { destination_pointer: Relative(10), source: Relative(3) }, Store { destination_pointer: Relative(13), source: Relative(18) }, Store { destination_pointer: Relative(15), source: Relative(14) }, Store { destination_pointer: Relative(16), source: Relative(17) }, Jump { location: 8749 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 8287 }, Load { destination: Relative(14), source_pointer: Relative(12) }, JumpIf { condition: Relative(14), location: 8861 }, Jump { location: 8755 }, Load { destination: Relative(14), source_pointer: Relative(9) }, Load { destination: Relative(15), source_pointer: Relative(14) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 8762 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, JumpIf { condition: Relative(17), location: 8772 }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(1) }, JumpIf { condition: Relative(19), location: 8772 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 8776 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(15), op: Div, bit_size: U32, lhs: Relative(17), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 8781 }, Call { location: 17854 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(19), op: Div, bit_size: U32, lhs: Relative(17), rhs: Relative(18) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U32, lhs: Relative(17), rhs: Relative(20) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, JumpIf { condition: Relative(17), location: 8788 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Load { destination: Relative(15), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(20) }, Load { destination: Relative(21), source_pointer: Relative(23) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, Not { destination: Relative(20), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Or, bit_size: U1, lhs: Relative(21), rhs: Relative(20) }, JumpIf { condition: Relative(15), location: 8812 }, Jump { location: 8807 }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(19), rhs: Relative(38) }, JumpIf { condition: Relative(15), location: 8810 }, Jump { location: 8822 }, Store { destination_pointer: Relative(14), source: Direct(32840) }, Jump { location: 8822 }, Store { destination_pointer: Relative(14), source: Direct(32840) }, Load { destination: Relative(15), source_pointer: Relative(9) }, Load { destination: Relative(16), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(20), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(19) }, JumpIf { condition: Relative(20), location: 8819 }, Call { location: 17854 }, Store { destination_pointer: Relative(9), source: Relative(15) }, Store { destination_pointer: Relative(8), source: Relative(19) }, Jump { location: 8822 }, Load { destination: Relative(15), source_pointer: Relative(14) }, JumpIf { condition: Relative(15), location: 8825 }, Jump { location: 8861 }, Load { destination: Relative(14), source_pointer: Relative(9) }, Load { destination: Relative(15), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Store { destination_pointer: Relative(20), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(18) }, Store { destination_pointer: Relative(19), source: Relative(38) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Store { destination_pointer: Relative(19), source: Relative(13) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(14) }, Store { destination_pointer: Relative(19), source: Relative(5) }, Store { destination_pointer: Relative(9), source: Relative(16) }, Store { destination_pointer: Relative(8), source: Relative(15) }, Store { destination_pointer: Relative(12), source: Direct(32840) }, Jump { location: 8861 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(14) }, Jump { location: 8220 }, Load { destination: Relative(3), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(14), location: 8868 }, Jump { location: 8891 }, Load { destination: Relative(3), source_pointer: Relative(12) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(1) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(1) }, Load { destination: Relative(21), source_pointer: Relative(23) }, BinaryFieldOp { destination: Relative(22), op: Add, lhs: Relative(20), rhs: Relative(21) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(1) }, Store { destination_pointer: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(12), source: Relative(3) }, Store { destination_pointer: Relative(16), source: Relative(20) }, Store { destination_pointer: Relative(17), source: Relative(15) }, Store { destination_pointer: Relative(18), source: Relative(19) }, Jump { location: 8891 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 8184 }, Load { destination: Relative(14), source_pointer: Relative(12) }, JumpIf { condition: Relative(14), location: 9003 }, Jump { location: 8897 }, Load { destination: Relative(14), source_pointer: Relative(4) }, Load { destination: Relative(15), source_pointer: Relative(14) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 8904 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, JumpIf { condition: Relative(17), location: 8914 }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(1) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(1) }, JumpIf { condition: Relative(19), location: 8914 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 8918 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(15), op: Div, bit_size: U32, lhs: Relative(17), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 8923 }, Call { location: 17854 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(19), op: Div, bit_size: U32, lhs: Relative(17), rhs: Relative(18) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U32, lhs: Relative(17), rhs: Relative(20) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, JumpIf { condition: Relative(17), location: 8930 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Load { destination: Relative(15), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(20) }, Load { destination: Relative(21), source_pointer: Relative(23) }, Mov { destination: Relative(14), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(5) }, Not { destination: Relative(20), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Or, bit_size: U1, lhs: Relative(21), rhs: Relative(20) }, JumpIf { condition: Relative(15), location: 8954 }, Jump { location: 8949 }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(19), rhs: Relative(38) }, JumpIf { condition: Relative(15), location: 8952 }, Jump { location: 8964 }, Store { destination_pointer: Relative(14), source: Direct(32840) }, Jump { location: 8964 }, Store { destination_pointer: Relative(14), source: Direct(32840) }, Load { destination: Relative(15), source_pointer: Relative(4) }, Load { destination: Relative(16), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(20), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(19) }, JumpIf { condition: Relative(20), location: 8961 }, Call { location: 17854 }, Store { destination_pointer: Relative(4), source: Relative(15) }, Store { destination_pointer: Relative(7), source: Relative(19) }, Jump { location: 8964 }, Load { destination: Relative(15), source_pointer: Relative(14) }, JumpIf { condition: Relative(15), location: 8967 }, Jump { location: 9003 }, Load { destination: Relative(14), source_pointer: Relative(4) }, Load { destination: Relative(15), source_pointer: Relative(7) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Store { destination_pointer: Relative(20), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(18) }, Store { destination_pointer: Relative(19), source: Relative(38) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Store { destination_pointer: Relative(19), source: Relative(13) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(17) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(14) }, Store { destination_pointer: Relative(19), source: Relative(5) }, Store { destination_pointer: Relative(4), source: Relative(16) }, Store { destination_pointer: Relative(7), source: Relative(15) }, Store { destination_pointer: Relative(12), source: Direct(32840) }, Jump { location: 9003 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(14) }, Jump { location: 8117 }, Load { destination: Relative(3), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(13), location: 9010 }, Jump { location: 9033 }, Load { destination: Relative(3), source_pointer: Relative(12) }, Load { destination: Relative(13), source_pointer: Relative(15) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Load { destination: Relative(18), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(1) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(1) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryFieldOp { destination: Relative(21), op: Add, lhs: Relative(19), rhs: Relative(20) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(1) }, Store { destination_pointer: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(12), source: Relative(3) }, Store { destination_pointer: Relative(15), source: Relative(19) }, Store { destination_pointer: Relative(16), source: Relative(14) }, Store { destination_pointer: Relative(17), source: Relative(18) }, Jump { location: 9033 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 8080 }, Load { destination: Relative(12), source_pointer: Relative(10) }, JumpIf { condition: Relative(12), location: 9145 }, Jump { location: 9039 }, Load { destination: Relative(12), source_pointer: Relative(4) }, Load { destination: Relative(13), source_pointer: Relative(12) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 9046 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, JumpIf { condition: Relative(15), location: 9056 }, BinaryIntOp { destination: Relative(18), op: Div, bit_size: U32, lhs: Relative(13), rhs: Relative(1) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, JumpIf { condition: Relative(17), location: 9056 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(13) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 9060 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(13) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(3), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 9065 }, Call { location: 17854 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(17), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(16) }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, BinaryIntOp { destination: Relative(13), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, JumpIf { condition: Relative(15), location: 9072 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Load { destination: Relative(13), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Not { destination: Relative(18), source: Relative(13), bit_size: U1 }, BinaryIntOp { destination: Relative(13), op: Or, bit_size: U1, lhs: Relative(19), rhs: Relative(18) }, JumpIf { condition: Relative(13), location: 9096 }, Jump { location: 9091 }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(17), rhs: Relative(37) }, JumpIf { condition: Relative(13), location: 9094 }, Jump { location: 9106 }, Store { destination_pointer: Relative(12), source: Direct(32840) }, Jump { location: 9106 }, Store { destination_pointer: Relative(12), source: Direct(32840) }, Load { destination: Relative(13), source_pointer: Relative(4) }, Load { destination: Relative(14), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(14), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 9103 }, Call { location: 17854 }, Store { destination_pointer: Relative(4), source: Relative(13) }, Store { destination_pointer: Relative(7), source: Relative(17) }, Jump { location: 9106 }, Load { destination: Relative(13), source_pointer: Relative(12) }, JumpIf { condition: Relative(13), location: 9109 }, Jump { location: 9145 }, Load { destination: Relative(12), source_pointer: Relative(4) }, Load { destination: Relative(13), source_pointer: Relative(7) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(16) }, Store { destination_pointer: Relative(17), source: Relative(37) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, Store { destination_pointer: Relative(17), source: Relative(11) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Store { destination_pointer: Relative(17), source: Relative(5) }, Store { destination_pointer: Relative(4), source: Relative(14) }, Store { destination_pointer: Relative(7), source: Relative(13) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Jump { location: 9145 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 8012 }, Load { destination: Relative(3), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(3) }, JumpIf { condition: Relative(11), location: 9152 }, Jump { location: 9175 }, Load { destination: Relative(3), source_pointer: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(12) }, Load { destination: Relative(15), source_pointer: Relative(13) }, Load { destination: Relative(16), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(1) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryFieldOp { destination: Relative(19), op: Add, lhs: Relative(17), rhs: Relative(18) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(1) }, Store { destination_pointer: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(10), source: Relative(3) }, Store { destination_pointer: Relative(12), source: Relative(17) }, Store { destination_pointer: Relative(13), source: Relative(15) }, Store { destination_pointer: Relative(14), source: Relative(16) }, Jump { location: 9175 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 7975 }, Load { destination: Relative(2), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Load { destination: Relative(13), source_pointer: Relative(15) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Not { destination: Relative(2), source: Relative(14), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U1, lhs: Relative(2), rhs: Relative(7) }, JumpIf { condition: Relative(12), location: 9199 }, Jump { location: 9245 }, BinaryFieldOp { destination: Relative(2), op: Equals, lhs: Relative(11), rhs: Direct(32839) }, Not { destination: Relative(12), source: Relative(2), bit_size: U1 }, BinaryFieldOp { destination: Relative(2), op: Equals, lhs: Relative(13), rhs: Direct(32839) }, Not { destination: Relative(14), source: Relative(2), bit_size: U1 }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U1, lhs: Relative(12), rhs: Relative(14) }, JumpIf { condition: Relative(2), location: 9245 }, Jump { location: 9206 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(12), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(14), op: Sub, bit_size: U32, lhs: Relative(12), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(15), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(12) }, JumpIf { condition: Relative(15), location: 9212 }, Call { location: 17882 }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(3) }, Store { destination_pointer: Relative(16), source: Relative(7) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(10) }, Store { destination_pointer: Relative(7), source: Relative(11) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Store { destination_pointer: Relative(11), source: Relative(13) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(2) }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Store { destination_pointer: Relative(8), source: Relative(3) }, Store { destination_pointer: Relative(9), source: Relative(14) }, Jump { location: 9245 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 7839 }, Load { destination: Relative(3), source_pointer: Relative(11) }, BinaryIntOp { destination: Relative(7), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(7) }, Load { destination: Relative(10), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(15) }, Load { destination: Relative(17), source_pointer: Relative(19) }, Not { destination: Relative(3), source: Relative(17), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U1, lhs: Relative(3), rhs: Relative(10) }, JumpIf { condition: Relative(15), location: 9269 }, Jump { location: 9305 }, BinaryFieldOp { destination: Relative(3), op: Mul, lhs: Relative(16), rhs: Relative(2) }, Load { destination: Relative(10), source_pointer: Relative(11) }, Load { destination: Relative(15), source_pointer: Relative(13) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(16), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(7) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(12) }, Store { destination_pointer: Relative(17), source: Relative(14) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(7) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(10) }, Store { destination_pointer: Relative(16), source: Relative(3) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(7), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(3) }, Store { destination_pointer: Relative(14), source: Relative(5) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Store { destination_pointer: Relative(13), source: Relative(15) }, Jump { location: 9305 }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(3) }, Jump { location: 7834 }, Load { destination: Relative(14), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(14) }, JumpIf { condition: Relative(15), location: 9312 }, Jump { location: 9429 }, Load { destination: Relative(15), source_pointer: Relative(2) }, Load { destination: Relative(16), source_pointer: Relative(15) }, Const { destination: Relative(17), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(18), op: Equals, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, Not { destination: Relative(18), source: Relative(18), bit_size: U1 }, JumpIf { condition: Relative(18), location: 9319 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(16) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Load { destination: Relative(16), source_pointer: Relative(21) }, BinaryFieldOp { destination: Relative(15), op: Mul, lhs: Relative(18), rhs: Relative(46) }, Load { destination: Relative(18), source_pointer: Relative(10) }, Load { destination: Relative(19), source_pointer: Relative(7) }, Load { destination: Relative(20), source_pointer: Relative(18) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9338 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U32, lhs: Relative(20), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(19) }, JumpIf { condition: Relative(22), location: 9345 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(3) }, JumpIf { condition: Relative(19), location: 9348 }, Call { location: 17476 }, Load { destination: Relative(19), source_pointer: Relative(18) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(19) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9354 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(19) }, Load { destination: Relative(18), source_pointer: Relative(12) }, Const { destination: Relative(19), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9362 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(18) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(22), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(25), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(25), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Mov { destination: Relative(27), source: Relative(26) }, Store { destination_pointer: Relative(27), source: Relative(15) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32839) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(27), rhs: Direct(2) }, Store { destination_pointer: Relative(27), source: Direct(32839) }, Store { destination_pointer: Relative(18), source: Relative(25) }, Store { destination_pointer: Relative(22), source: Relative(12) }, Store { destination_pointer: Relative(23), source: Direct(32841) }, Store { destination_pointer: Relative(24), source: Relative(5) }, Mov { destination: Relative(14), source: Direct(32838) }, Jump { location: 9389 }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Direct(32837) }, JumpIf { condition: Relative(17), location: 9543 }, Jump { location: 9392 }, Load { destination: Relative(17), source_pointer: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Load { destination: Relative(20), source_pointer: Relative(23) }, Load { destination: Relative(21), source_pointer: Relative(19) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(21) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 9401 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(21) }, Mov { destination: Relative(21), source: Direct(1) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(26) }, IndirectConst { destination_pointer: Relative(21), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(26), size: Relative(27) }, output: HeapArray { pointer: Relative(28), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(18), source: Relative(17) }, Store { destination_pointer: Relative(22), source: Relative(21) }, Store { destination_pointer: Relative(23), source: Relative(20) }, Store { destination_pointer: Relative(24), source: Direct(32840) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32841) }, Load { destination: Relative(17), source_pointer: Relative(18) }, Cast { destination: Relative(19), source: Relative(17), bit_size: Integer(U32) }, Cast { destination: Relative(18), source: Relative(19), bit_size: Field }, Cast { destination: Relative(17), source: Relative(18), bit_size: Integer(U32) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(5) }, Mov { destination: Relative(14), source: Direct(32838) }, Jump { location: 9425 }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(4) }, JumpIf { condition: Relative(19), location: 9432 }, Jump { location: 9428 }, Jump { location: 9429 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(14) }, Jump { location: 7824 }, Load { destination: Relative(19), source_pointer: Relative(18) }, JumpIf { condition: Relative(19), location: 9540 }, Jump { location: 9435 }, Load { destination: Relative(19), source_pointer: Relative(10) }, Load { destination: Relative(20), source_pointer: Relative(19) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(22), source: Relative(22), bit_size: U1 }, JumpIf { condition: Relative(22), location: 9442 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(20) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(14), rhs: Relative(14) }, Const { destination: Relative(23), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(22), op: Equals, bit_size: U32, lhs: Relative(23), rhs: Relative(14) }, JumpIf { condition: Relative(22), location: 9452 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(20), rhs: Relative(14) }, BinaryIntOp { destination: Relative(24), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(14) }, JumpIf { condition: Relative(24), location: 9452 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(14), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 9456 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(22), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(20) }, BinaryIntOp { destination: Relative(23), op: LessThanEquals, bit_size: U32, lhs: Relative(17), rhs: Relative(22) }, JumpIf { condition: Relative(23), location: 9461 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(23), op: Div, bit_size: U32, lhs: Relative(22), rhs: Relative(4) }, BinaryIntOp { destination: Relative(24), op: Mul, bit_size: U32, lhs: Relative(23), rhs: Relative(4) }, BinaryIntOp { destination: Relative(20), op: Sub, bit_size: U32, lhs: Relative(22), rhs: Relative(24) }, BinaryIntOp { destination: Relative(22), op: LessThan, bit_size: U32, lhs: Relative(20), rhs: Relative(4) }, JumpIf { condition: Relative(22), location: 9467 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(22), op: Mul, bit_size: U32, lhs: Relative(20), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(22) }, Load { destination: Relative(20), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(23) }, Load { destination: Relative(24), source_pointer: Relative(26) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(25) }, Load { destination: Relative(26), source_pointer: Relative(28) }, Mov { destination: Relative(19), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(19), source: Relative(5) }, Not { destination: Relative(25), source: Relative(20), bit_size: U1 }, BinaryIntOp { destination: Relative(20), op: Or, bit_size: U1, lhs: Relative(26), rhs: Relative(25) }, JumpIf { condition: Relative(20), location: 9491 }, Jump { location: 9486 }, BinaryFieldOp { destination: Relative(20), op: Equals, lhs: Relative(24), rhs: Relative(15) }, JumpIf { condition: Relative(20), location: 9489 }, Jump { location: 9501 }, Store { destination_pointer: Relative(19), source: Direct(32840) }, Jump { location: 9501 }, Store { destination_pointer: Relative(19), source: Direct(32840) }, Load { destination: Relative(20), source_pointer: Relative(10) }, Load { destination: Relative(21), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(25), op: LessThanEquals, bit_size: U32, lhs: Relative(21), rhs: Relative(24) }, JumpIf { condition: Relative(25), location: 9498 }, Call { location: 17854 }, Store { destination_pointer: Relative(10), source: Relative(20) }, Store { destination_pointer: Relative(7), source: Relative(24) }, Jump { location: 9501 }, Load { destination: Relative(20), source_pointer: Relative(19) }, JumpIf { condition: Relative(20), location: 9504 }, Jump { location: 9540 }, Load { destination: Relative(19), source_pointer: Relative(10) }, Load { destination: Relative(20), source_pointer: Relative(7) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Store { destination_pointer: Relative(25), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(21) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(19), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(23) }, Store { destination_pointer: Relative(24), source: Relative(15) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(21) }, Store { destination_pointer: Relative(24), source: Relative(16) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(19) }, Store { destination_pointer: Relative(24), source: Relative(5) }, Store { destination_pointer: Relative(10), source: Relative(21) }, Store { destination_pointer: Relative(7), source: Relative(20) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, Jump { location: 9540 }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32841) }, Mov { destination: Relative(14), source: Relative(19) }, Jump { location: 9425 }, Load { destination: Relative(17), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(19), op: LessThan, bit_size: U32, lhs: Relative(14), rhs: Relative(17) }, JumpIf { condition: Relative(19), location: 9547 }, Jump { location: 9570 }, Load { destination: Relative(17), source_pointer: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(22) }, Load { destination: Relative(20), source_pointer: Relative(23) }, Load { destination: Relative(21), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(19), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(14) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(14) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryFieldOp { destination: Relative(27), op: Add, lhs: Relative(25), rhs: Relative(26) }, Mov { destination: Direct(32771), source: Relative(19) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(14) }, Store { destination_pointer: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(18), source: Relative(17) }, Store { destination_pointer: Relative(22), source: Relative(25) }, Store { destination_pointer: Relative(23), source: Relative(20) }, Store { destination_pointer: Relative(24), source: Relative(21) }, Jump { location: 9570 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32841) }, Mov { destination: Relative(14), source: Relative(17) }, Jump { location: 9389 }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(14) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Load { destination: Relative(14), source_pointer: Relative(21) }, Not { destination: Relative(17), source: Relative(14), bit_size: U1 }, BinaryIntOp { destination: Relative(14), op: Mul, bit_size: U1, lhs: Relative(17), rhs: Relative(16) }, JumpIf { condition: Relative(14), location: 9593 }, Jump { location: 9621 }, Load { destination: Relative(14), source_pointer: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, JumpIf { condition: Relative(17), location: 9598 }, Call { location: 17885 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 17860 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, Store { destination_pointer: Relative(22), source: Relative(18) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 17860 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(14) }, Store { destination_pointer: Relative(21), source: Relative(19) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, JumpIf { condition: Relative(18), location: 9618 }, Call { location: 17854 }, Store { destination_pointer: Relative(15), source: Relative(17) }, Store { destination_pointer: Relative(12), source: Relative(14) }, Jump { location: 9621 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(14) }, Jump { location: 7718 }, Load { destination: Relative(15), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 9628 }, Jump { location: 9746 }, Load { destination: Relative(16), source_pointer: Relative(10) }, Load { destination: Relative(17), source_pointer: Relative(16) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Not { destination: Relative(19), source: Relative(19), bit_size: U1 }, JumpIf { condition: Relative(19), location: 9635 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(16), source: Relative(17) }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Load { destination: Relative(17), source_pointer: Relative(22) }, BinaryFieldOp { destination: Relative(16), op: Add, lhs: Relative(19), rhs: Relative(37) }, BinaryFieldOp { destination: Relative(19), op: Mul, lhs: Relative(17), rhs: Relative(46) }, Load { destination: Relative(17), source_pointer: Relative(12) }, Load { destination: Relative(20), source_pointer: Relative(2) }, Load { destination: Relative(21), source_pointer: Relative(17) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 9655 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U32, lhs: Relative(20), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(20) }, JumpIf { condition: Relative(23), location: 9662 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(3) }, JumpIf { condition: Relative(20), location: 9665 }, Call { location: 17476 }, Load { destination: Relative(20), source_pointer: Relative(17) }, Const { destination: Relative(21), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(21), rhs: Relative(20) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 9671 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Store { destination_pointer: Relative(17), source: Relative(20) }, Load { destination: Relative(17), source_pointer: Relative(14) }, Const { destination: Relative(20), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 9679 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, Store { destination_pointer: Relative(14), source: Relative(17) }, Mov { destination: Relative(17), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(23), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(24), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(26), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(26), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Mov { destination: Relative(28), source: Relative(27) }, Store { destination_pointer: Relative(28), source: Relative(16) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32839) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(28), source: Direct(32839) }, Store { destination_pointer: Relative(17), source: Relative(26) }, Store { destination_pointer: Relative(23), source: Relative(14) }, Store { destination_pointer: Relative(24), source: Direct(32841) }, Store { destination_pointer: Relative(25), source: Relative(5) }, Mov { destination: Relative(15), source: Direct(32838) }, Jump { location: 9706 }, BinaryIntOp { destination: Relative(18), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Direct(32837) }, JumpIf { condition: Relative(18), location: 9860 }, Jump { location: 9709 }, Load { destination: Relative(18), source_pointer: Relative(17) }, Load { destination: Relative(20), source_pointer: Relative(23) }, Load { destination: Relative(21), source_pointer: Relative(24) }, Load { destination: Relative(22), source_pointer: Relative(20) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(27), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(22) }, Not { destination: Relative(27), source: Relative(27), bit_size: U1 }, JumpIf { condition: Relative(27), location: 9718 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(22) }, Mov { destination: Relative(22), source: Direct(1) }, Const { destination: Relative(27), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(27) }, IndirectConst { destination_pointer: Relative(22), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(27), size: Relative(28) }, output: HeapArray { pointer: Relative(29), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(17), source: Relative(18) }, Store { destination_pointer: Relative(23), source: Relative(22) }, Store { destination_pointer: Relative(24), source: Relative(21) }, Store { destination_pointer: Relative(25), source: Direct(32840) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32841) }, Load { destination: Relative(17), source_pointer: Relative(18) }, Cast { destination: Relative(20), source: Relative(17), bit_size: Integer(U32) }, Cast { destination: Relative(18), source: Relative(20), bit_size: Field }, Cast { destination: Relative(17), source: Relative(18), bit_size: Integer(U32) }, Mov { destination: Relative(18), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(18), source: Relative(5) }, Mov { destination: Relative(15), source: Direct(32838) }, Jump { location: 9742 }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(4) }, JumpIf { condition: Relative(20), location: 9749 }, Jump { location: 9745 }, Jump { location: 9746 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(15) }, Jump { location: 7662 }, Load { destination: Relative(20), source_pointer: Relative(18) }, JumpIf { condition: Relative(20), location: 9857 }, Jump { location: 9752 }, Load { destination: Relative(20), source_pointer: Relative(12) }, Load { destination: Relative(21), source_pointer: Relative(20) }, Const { destination: Relative(22), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(22), rhs: Relative(21) }, Not { destination: Relative(23), source: Relative(23), bit_size: U1 }, JumpIf { condition: Relative(23), location: 9759 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(21) }, BinaryIntOp { destination: Relative(21), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Relative(15) }, Const { destination: Relative(24), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(23), op: Equals, bit_size: U32, lhs: Relative(24), rhs: Relative(15) }, JumpIf { condition: Relative(23), location: 9769 }, BinaryIntOp { destination: Relative(26), op: Div, bit_size: U32, lhs: Relative(21), rhs: Relative(15) }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(15) }, JumpIf { condition: Relative(25), location: 9769 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 9773 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(21), op: Div, bit_size: U32, lhs: Relative(23), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(21) }, BinaryIntOp { destination: Relative(24), op: LessThanEquals, bit_size: U32, lhs: Relative(17), rhs: Relative(23) }, JumpIf { condition: Relative(24), location: 9778 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(24), op: Div, bit_size: U32, lhs: Relative(23), rhs: Relative(4) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(24), rhs: Relative(4) }, BinaryIntOp { destination: Relative(21), op: Sub, bit_size: U32, lhs: Relative(23), rhs: Relative(25) }, BinaryIntOp { destination: Relative(23), op: LessThan, bit_size: U32, lhs: Relative(21), rhs: Relative(4) }, JumpIf { condition: Relative(23), location: 9784 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(23), op: Mul, bit_size: U32, lhs: Relative(21), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(23) }, Load { destination: Relative(21), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(24) }, Load { destination: Relative(25), source_pointer: Relative(27) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Load { destination: Relative(27), source_pointer: Relative(29) }, Mov { destination: Relative(20), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(20), source: Relative(5) }, Not { destination: Relative(26), source: Relative(21), bit_size: U1 }, BinaryIntOp { destination: Relative(21), op: Or, bit_size: U1, lhs: Relative(27), rhs: Relative(26) }, JumpIf { condition: Relative(21), location: 9808 }, Jump { location: 9803 }, BinaryFieldOp { destination: Relative(21), op: Equals, lhs: Relative(25), rhs: Relative(16) }, JumpIf { condition: Relative(21), location: 9806 }, Jump { location: 9818 }, Store { destination_pointer: Relative(20), source: Direct(32840) }, Jump { location: 9818 }, Store { destination_pointer: Relative(20), source: Direct(32840) }, Load { destination: Relative(21), source_pointer: Relative(12) }, Load { destination: Relative(22), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(26), op: LessThanEquals, bit_size: U32, lhs: Relative(22), rhs: Relative(25) }, JumpIf { condition: Relative(26), location: 9815 }, Call { location: 17854 }, Store { destination_pointer: Relative(12), source: Relative(21) }, Store { destination_pointer: Relative(2), source: Relative(25) }, Jump { location: 9818 }, Load { destination: Relative(21), source_pointer: Relative(20) }, JumpIf { condition: Relative(21), location: 9821 }, Jump { location: 9857 }, Load { destination: Relative(20), source_pointer: Relative(12) }, Load { destination: Relative(21), source_pointer: Relative(2) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(23) }, Store { destination_pointer: Relative(26), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(22) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(24) }, Store { destination_pointer: Relative(25), source: Relative(16) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(24), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(23), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(22) }, Store { destination_pointer: Relative(25), source: Relative(19) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(23) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(22), source: Direct(32773) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Direct(2) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(24), rhs: Relative(20) }, Store { destination_pointer: Relative(25), source: Relative(5) }, Store { destination_pointer: Relative(12), source: Relative(22) }, Store { destination_pointer: Relative(2), source: Relative(21) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, Jump { location: 9857 }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32841) }, Mov { destination: Relative(15), source: Relative(20) }, Jump { location: 9742 }, Load { destination: Relative(18), source_pointer: Relative(24) }, BinaryIntOp { destination: Relative(20), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, JumpIf { condition: Relative(20), location: 9864 }, Jump { location: 9887 }, Load { destination: Relative(18), source_pointer: Relative(17) }, Load { destination: Relative(20), source_pointer: Relative(23) }, Load { destination: Relative(21), source_pointer: Relative(24) }, Load { destination: Relative(22), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(15) }, Load { destination: Relative(26), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(15) }, Load { destination: Relative(27), source_pointer: Relative(29) }, BinaryFieldOp { destination: Relative(28), op: Add, lhs: Relative(26), rhs: Relative(27) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(27), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(27), rhs: Relative(15) }, Store { destination_pointer: Relative(29), source: Relative(28) }, Store { destination_pointer: Relative(17), source: Relative(18) }, Store { destination_pointer: Relative(23), source: Relative(26) }, Store { destination_pointer: Relative(24), source: Relative(21) }, Store { destination_pointer: Relative(25), source: Relative(22) }, Jump { location: 9887 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32841) }, Mov { destination: Relative(15), source: Relative(18) }, Jump { location: 9706 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(12) }, Load { destination: Relative(15), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(17) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(17) }, Load { destination: Relative(12), source_pointer: Relative(21) }, Not { destination: Relative(17), source: Relative(12), bit_size: U1 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U1, lhs: Relative(17), rhs: Relative(15) }, JumpIf { condition: Relative(12), location: 9910 }, Jump { location: 9938 }, Load { destination: Relative(12), source_pointer: Relative(16) }, Load { destination: Relative(15), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(4) }, JumpIf { condition: Relative(17), location: 9915 }, Call { location: 17885 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 17860 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(17) }, Store { destination_pointer: Relative(22), source: Relative(18) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 17860 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(12) }, Store { destination_pointer: Relative(21), source: Relative(19) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, JumpIf { condition: Relative(18), location: 9935 }, Call { location: 17854 }, Store { destination_pointer: Relative(16), source: Relative(17) }, Store { destination_pointer: Relative(14), source: Relative(12) }, Jump { location: 9938 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(12) }, Jump { location: 7556 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 9947 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(15) }, JumpIf { condition: Relative(2), location: 9952 }, Jump { location: 9983 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(12), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(2) }, Not { destination: Relative(12), source: Relative(12), bit_size: U1 }, JumpIf { condition: Relative(12), location: 9958 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(1) }, Load { destination: Relative(2), source_pointer: Relative(14) }, Load { destination: Relative(12), source_pointer: Relative(25) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(16), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Not { destination: Relative(16), source: Relative(16), bit_size: U1 }, JumpIf { condition: Relative(16), location: 9969 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(12) }, Load { destination: Relative(12), source_pointer: Relative(13) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 9977 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(12) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32840)), HeapArray(HeapArray { pointer: Relative(12), size: 19 }), MemoryAddress(Direct(32841)), MemoryAddress(Relative(2)), HeapArray(HeapArray { pointer: Relative(17), size: 16 }), MemoryAddress(Direct(32840))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 19 }, Simple(Integer(U32)), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Jump { location: 9983 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 7488 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(16) }, Load { destination: Relative(25), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(26) }, Load { destination: Relative(28), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(30) }, Not { destination: Relative(26), source: Relative(16), bit_size: U1 }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U1, lhs: Relative(26), rhs: Relative(25) }, JumpIf { condition: Relative(16), location: 10002 }, Jump { location: 10021 }, Load { destination: Relative(16), source_pointer: Relative(15) }, Load { destination: Relative(25), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(26), location: 10007 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(16) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 6 }, Call { location: 17860 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(25) }, Store { destination_pointer: Relative(30), source: Relative(28) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(25), rhs: Relative(16) }, JumpIf { condition: Relative(28), location: 10018 }, Call { location: 17854 }, Store { destination_pointer: Relative(15), source: Relative(26) }, Store { destination_pointer: Relative(2), source: Relative(16) }, Jump { location: 10021 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(16) }, Jump { location: 7389 }, Load { destination: Relative(25), source_pointer: Relative(15) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 10030 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(16) }, JumpIf { condition: Relative(25), location: 10035 }, Jump { location: 10159 }, Load { destination: Relative(26), source_pointer: Relative(15) }, Const { destination: Relative(28), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(29), op: Equals, bit_size: U32, lhs: Relative(28), rhs: Relative(26) }, Not { destination: Relative(29), source: Relative(29), bit_size: U1 }, JumpIf { condition: Relative(29), location: 10041 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(26) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, Load { destination: Relative(26), source_pointer: Relative(31) }, Load { destination: Relative(29), source_pointer: Relative(10) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(29) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 10052 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(29), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(29) }, Mov { destination: Relative(29), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(29), source: Direct(32839) }, Load { destination: Relative(32), source_pointer: Relative(10) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(32) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 10063 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(32) }, Load { destination: Relative(32), source_pointer: Relative(2) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(32) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 10071 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(32) }, Mov { destination: Relative(32), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(35), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(36), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(40), source: Direct(1) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(41) }, IndirectConst { destination_pointer: Relative(40), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Mov { destination: Relative(42), source: Relative(41) }, Store { destination_pointer: Relative(42), source: Relative(26) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Direct(32839) }, Store { destination_pointer: Relative(32), source: Relative(40) }, Store { destination_pointer: Relative(35), source: Relative(2) }, Store { destination_pointer: Relative(36), source: Direct(32841) }, Store { destination_pointer: Relative(39), source: Relative(5) }, Mov { destination: Relative(25), source: Direct(32838) }, Jump { location: 10098 }, BinaryIntOp { destination: Relative(28), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Direct(32837) }, JumpIf { condition: Relative(28), location: 10225 }, Jump { location: 10101 }, Load { destination: Relative(28), source_pointer: Relative(32) }, Load { destination: Relative(31), source_pointer: Relative(35) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Load { destination: Relative(34), source_pointer: Relative(31) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(34) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 10110 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(34) }, Mov { destination: Relative(34), source: Direct(1) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(41) }, IndirectConst { destination_pointer: Relative(34), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(41), size: Relative(42) }, output: HeapArray { pointer: Relative(43), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(32), source: Relative(28) }, Store { destination_pointer: Relative(35), source: Relative(34) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Store { destination_pointer: Relative(39), source: Direct(32840) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, Load { destination: Relative(28), source_pointer: Relative(31) }, Cast { destination: Relative(32), source: Relative(28), bit_size: Integer(U32) }, Cast { destination: Relative(31), source: Relative(32), bit_size: Field }, Cast { destination: Relative(28), source: Relative(31), bit_size: Integer(U32) }, Mov { destination: Relative(31), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(31), source: Relative(5) }, Mov { destination: Relative(25), source: Direct(32838) }, Jump { location: 10134 }, BinaryIntOp { destination: Relative(32), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(32), location: 10162 }, Jump { location: 10137 }, Load { destination: Relative(25), source_pointer: Relative(29) }, Load { destination: Relative(28), source_pointer: Relative(30) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 10144 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(28) }, Load { destination: Relative(28), source_pointer: Relative(13) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 10152 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32840)), HeapArray(HeapArray { pointer: Relative(28), size: 16 }), MemoryAddress(Direct(32842)), MemoryAddress(Relative(26)), MemoryAddress(Relative(25)), HeapArray(HeapArray { pointer: Relative(32), size: 16 }), HeapArray(HeapArray { pointer: Relative(33), size: 16 }), MemoryAddress(Direct(32840))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U32)), Simple(Field), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Jump { location: 10159 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 7355 }, Load { destination: Relative(32), source_pointer: Relative(31) }, JumpIf { condition: Relative(32), location: 10222 }, Jump { location: 10165 }, Load { destination: Relative(32), source_pointer: Relative(10) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(32) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 10171 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(32), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(32) }, BinaryIntOp { destination: Relative(32), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Relative(25) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(25) }, JumpIf { condition: Relative(34), location: 10181 }, BinaryIntOp { destination: Relative(39), op: Div, bit_size: U32, lhs: Relative(32), rhs: Relative(25) }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(25) }, JumpIf { condition: Relative(36), location: 10181 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(32) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(25), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 10185 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(32), op: Div, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(32) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(28), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 10190 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(34), rhs: Relative(4) }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(32), op: Sub, bit_size: U32, lhs: Relative(34), rhs: Relative(36) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(32), rhs: Relative(4) }, JumpIf { condition: Relative(34), location: 10196 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(32), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Load { destination: Relative(32), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(35) }, Load { destination: Relative(36), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(35) }, Load { destination: Relative(39), source_pointer: Relative(41) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(35) }, Load { destination: Relative(34), source_pointer: Relative(41) }, Not { destination: Relative(35), source: Relative(34), bit_size: U1 }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U1, lhs: Relative(35), rhs: Relative(32) }, JumpIf { condition: Relative(34), location: 10216 }, Jump { location: 10222 }, BinaryFieldOp { destination: Relative(32), op: Equals, lhs: Relative(36), rhs: Relative(26) }, JumpIf { condition: Relative(32), location: 10219 }, Jump { location: 10222 }, Store { destination_pointer: Relative(29), source: Relative(39) }, Store { destination_pointer: Relative(31), source: Direct(32840) }, Jump { location: 10222 }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, Mov { destination: Relative(25), source: Relative(32) }, Jump { location: 10134 }, Load { destination: Relative(28), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(31), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(28) }, JumpIf { condition: Relative(31), location: 10229 }, Jump { location: 10252 }, Load { destination: Relative(28), source_pointer: Relative(32) }, Load { destination: Relative(31), source_pointer: Relative(35) }, Load { destination: Relative(33), source_pointer: Relative(36) }, Load { destination: Relative(34), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(31), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(25) }, Load { destination: Relative(40), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(25) }, Load { destination: Relative(41), source_pointer: Relative(43) }, BinaryFieldOp { destination: Relative(42), op: Add, lhs: Relative(40), rhs: Relative(41) }, Mov { destination: Direct(32771), source: Relative(31) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(25) }, Store { destination_pointer: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(32), source: Relative(28) }, Store { destination_pointer: Relative(35), source: Relative(40) }, Store { destination_pointer: Relative(36), source: Relative(33) }, Store { destination_pointer: Relative(39), source: Relative(34) }, Jump { location: 10252 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, Mov { destination: Relative(25), source: Relative(28) }, Jump { location: 10098 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(15) }, Load { destination: Relative(25), source_pointer: Relative(28) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(26) }, Load { destination: Relative(28), source_pointer: Relative(31) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(26) }, Load { destination: Relative(15), source_pointer: Relative(31) }, Not { destination: Relative(26), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U1, lhs: Relative(26), rhs: Relative(25) }, JumpIf { condition: Relative(15), location: 10271 }, Jump { location: 10290 }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(25), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(26), location: 10276 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 6 }, Call { location: 17860 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(25) }, Store { destination_pointer: Relative(31), source: Relative(28) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(28), op: LessThanEquals, bit_size: U32, lhs: Relative(25), rhs: Relative(15) }, JumpIf { condition: Relative(28), location: 10287 }, Call { location: 17854 }, Store { destination_pointer: Relative(16), source: Relative(26) }, Store { destination_pointer: Relative(2), source: Relative(15) }, Jump { location: 10290 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(15) }, Jump { location: 7279 }, Load { destination: Relative(2), source_pointer: Relative(15) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(2) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 10299 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(16) }, JumpIf { condition: Relative(2), location: 10304 }, Jump { location: 10343 }, Load { destination: Relative(25), source_pointer: Relative(15) }, Const { destination: Relative(26), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(28), op: Equals, bit_size: U32, lhs: Relative(26), rhs: Relative(25) }, Not { destination: Relative(28), source: Relative(28), bit_size: U1 }, JumpIf { condition: Relative(28), location: 10310 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(15), source: Relative(25) }, JumpIf { condition: Relative(2), location: 10314 }, Call { location: 17497 }, BinaryIntOp { destination: Relative(2), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(28), rhs: Relative(2) }, Load { destination: Relative(25), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(31), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Load { destination: Relative(2), source_pointer: Relative(31) }, Load { destination: Relative(28), source_pointer: Relative(30) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(31), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(28) }, Not { destination: Relative(31), source: Relative(31), bit_size: U1 }, JumpIf { condition: Relative(31), location: 10328 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(28) }, Load { destination: Relative(28), source_pointer: Relative(13) }, Const { destination: Relative(31), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(32), op: Equals, bit_size: U32, lhs: Relative(31), rhs: Relative(28) }, Not { destination: Relative(32), source: Relative(32), bit_size: U1 }, JumpIf { condition: Relative(32), location: 10336 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(28), rhs: Direct(2) }, Store { destination_pointer: Relative(13), source: Relative(28) }, BinaryIntOp { destination: Relative(28), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(32), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, ForeignCall { function: \"print\", destinations: [], destination_value_types: [], inputs: [MemoryAddress(Direct(32840)), HeapArray(HeapArray { pointer: Relative(28), size: 16 }), MemoryAddress(Direct(32842)), MemoryAddress(Relative(25)), MemoryAddress(Relative(2)), HeapArray(HeapArray { pointer: Relative(32), size: 16 }), HeapArray(HeapArray { pointer: Relative(33), size: 16 }), MemoryAddress(Direct(32840))], input_value_types: [Simple(Integer(U1)), Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U32)), Simple(Field), Simple(Field), Array { value_types: [Simple(Integer(U8))], size: 16 }, Array { value_types: [Simple(Integer(U8))], size: 16 }, Simple(Integer(U1))] }, Jump { location: 10343 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 7237 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(26), rhs: Relative(15) }, Load { destination: Relative(25), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(26) }, Load { destination: Relative(29), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(26) }, Load { destination: Relative(30), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(26) }, Load { destination: Relative(15), source_pointer: Relative(35) }, Not { destination: Relative(26), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U1, lhs: Relative(26), rhs: Relative(25) }, JumpIf { condition: Relative(15), location: 10366 }, Jump { location: 10394 }, Load { destination: Relative(15), source_pointer: Relative(16) }, Load { destination: Relative(25), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(26), location: 10371 }, Call { location: 17885 }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 17860 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(26) }, Store { destination_pointer: Relative(36), source: Relative(29) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 11 }, Call { location: 17860 }, Mov { destination: Relative(26), source: Direct(32773) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(15) }, Store { destination_pointer: Relative(35), source: Relative(30) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(29), op: LessThanEquals, bit_size: U32, lhs: Relative(25), rhs: Relative(15) }, JumpIf { condition: Relative(29), location: 10391 }, Call { location: 17854 }, Store { destination_pointer: Relative(16), source: Relative(26) }, Store { destination_pointer: Relative(13), source: Relative(15) }, Jump { location: 10394 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(15) }, Jump { location: 7106 }, Load { destination: Relative(16), source_pointer: Relative(15) }, JumpIf { condition: Relative(16), location: 10453 }, Jump { location: 10400 }, Load { destination: Relative(16), source_pointer: Relative(10) }, Const { destination: Relative(25), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(25), rhs: Relative(16) }, Not { destination: Relative(26), source: Relative(26), bit_size: U1 }, JumpIf { condition: Relative(26), location: 10406 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(16) }, BinaryIntOp { destination: Relative(16), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(29), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(26), op: Equals, bit_size: U32, lhs: Relative(29), rhs: Relative(1) }, JumpIf { condition: Relative(26), location: 10416 }, BinaryIntOp { destination: Relative(34), op: Div, bit_size: U32, lhs: Relative(16), rhs: Relative(1) }, BinaryIntOp { destination: Relative(30), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(1) }, JumpIf { condition: Relative(30), location: 10416 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(16) }, BinaryIntOp { destination: Relative(29), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(26) }, JumpIf { condition: Relative(29), location: 10420 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(16), op: Div, bit_size: U32, lhs: Relative(26), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(26), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(16) }, BinaryIntOp { destination: Relative(29), op: LessThanEquals, bit_size: U32, lhs: Relative(13), rhs: Relative(26) }, JumpIf { condition: Relative(29), location: 10425 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(29), op: Div, bit_size: U32, lhs: Relative(26), rhs: Relative(4) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(29), rhs: Relative(4) }, BinaryIntOp { destination: Relative(16), op: Sub, bit_size: U32, lhs: Relative(26), rhs: Relative(30) }, BinaryIntOp { destination: Relative(26), op: LessThan, bit_size: U32, lhs: Relative(16), rhs: Relative(4) }, JumpIf { condition: Relative(26), location: 10431 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U32, lhs: Relative(16), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(29), rhs: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(29) }, Load { destination: Relative(30), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(29), op: Add, bit_size: U32, lhs: Relative(26), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(29) }, Load { destination: Relative(26), source_pointer: Relative(35) }, Not { destination: Relative(29), source: Relative(26), bit_size: U1 }, BinaryIntOp { destination: Relative(26), op: Mul, bit_size: U1, lhs: Relative(29), rhs: Relative(16) }, JumpIf { condition: Relative(26), location: 10447 }, Jump { location: 10453 }, BinaryFieldOp { destination: Relative(16), op: Equals, lhs: Relative(30), rhs: Relative(42) }, JumpIf { condition: Relative(16), location: 10450 }, Jump { location: 10453 }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Store { destination_pointer: Relative(15), source: Direct(32840) }, Jump { location: 10453 }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(16) }, Jump { location: 7047 }, Load { destination: Relative(13), source_pointer: Relative(29) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(13) }, JumpIf { condition: Relative(15), location: 10460 }, Jump { location: 10483 }, Load { destination: Relative(13), source_pointer: Relative(25) }, Load { destination: Relative(15), source_pointer: Relative(26) }, Load { destination: Relative(16), source_pointer: Relative(29) }, Load { destination: Relative(34), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(1) }, Load { destination: Relative(35), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(1) }, Load { destination: Relative(36), source_pointer: Relative(40) }, BinaryFieldOp { destination: Relative(39), op: Add, lhs: Relative(35), rhs: Relative(36) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(1) }, Store { destination_pointer: Relative(40), source: Relative(39) }, Store { destination_pointer: Relative(25), source: Relative(13) }, Store { destination_pointer: Relative(26), source: Relative(35) }, Store { destination_pointer: Relative(29), source: Relative(16) }, Store { destination_pointer: Relative(30), source: Relative(34) }, Jump { location: 10483 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(13) }, Jump { location: 7011 }, Load { destination: Relative(30), source_pointer: Relative(25) }, JumpIf { condition: Relative(30), location: 10542 }, Jump { location: 10489 }, Load { destination: Relative(30), source_pointer: Relative(2) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(30) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 10495 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(1) }, JumpIf { condition: Relative(35), location: 10505 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 10505 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(30) }, BinaryIntOp { destination: Relative(43), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(35) }, JumpIf { condition: Relative(43), location: 10509 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(35), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(30) }, BinaryIntOp { destination: Relative(43), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(35) }, JumpIf { condition: Relative(43), location: 10514 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(43), op: Div, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(43), rhs: Relative(4) }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U32, lhs: Relative(35), rhs: Relative(44) }, BinaryIntOp { destination: Relative(35), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(4) }, JumpIf { condition: Relative(35), location: 10520 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(35), op: Mul, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(35) }, Load { destination: Relative(30), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Load { destination: Relative(35), source_pointer: Relative(47) }, Not { destination: Relative(43), source: Relative(35), bit_size: U1 }, BinaryIntOp { destination: Relative(35), op: Mul, bit_size: U1, lhs: Relative(43), rhs: Relative(30) }, JumpIf { condition: Relative(35), location: 10536 }, Jump { location: 10542 }, BinaryFieldOp { destination: Relative(30), op: Equals, lhs: Relative(44), rhs: Relative(42) }, JumpIf { condition: Relative(30), location: 10539 }, Jump { location: 10542 }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Store { destination_pointer: Relative(25), source: Direct(32840) }, Jump { location: 10542 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 6833 }, Load { destination: Relative(11), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(11) }, JumpIf { condition: Relative(25), location: 10549 }, Jump { location: 10572 }, Load { destination: Relative(11), source_pointer: Relative(43) }, Load { destination: Relative(25), source_pointer: Relative(44) }, Load { destination: Relative(30), source_pointer: Relative(45) }, Load { destination: Relative(34), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(35), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryFieldOp { destination: Relative(51), op: Add, lhs: Relative(35), rhs: Relative(50) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Store { destination_pointer: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(43), source: Relative(11) }, Store { destination_pointer: Relative(44), source: Relative(35) }, Store { destination_pointer: Relative(45), source: Relative(30) }, Store { destination_pointer: Relative(47), source: Relative(34) }, Jump { location: 10572 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 6797 }, Load { destination: Relative(11), source_pointer: Relative(10) }, JumpIf { condition: Relative(11), location: 10673 }, Jump { location: 10578 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(11) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 10585 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(1) }, JumpIf { condition: Relative(34), location: 10595 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(25), rhs: Relative(1) }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(43), location: 10595 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 10599 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 10604 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(34), rhs: Relative(4) }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U32, lhs: Relative(34), rhs: Relative(43) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(34), location: 10610 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Load { destination: Relative(25), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(35) }, Load { destination: Relative(43), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(51) }, Not { destination: Relative(11), source: Relative(47), bit_size: U1 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(25) }, JumpIf { condition: Relative(44), location: 10630 }, Jump { location: 10673 }, BinaryFieldOp { destination: Relative(11), op: Equals, lhs: Relative(43), rhs: Relative(37) }, JumpIf { condition: Relative(11), location: 10633 }, Jump { location: 10673 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(34) }, Store { destination_pointer: Relative(50), source: Relative(25) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(35) }, Store { destination_pointer: Relative(34), source: Relative(43) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(25) }, Store { destination_pointer: Relative(43), source: Relative(45) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, Store { destination_pointer: Relative(43), source: Direct(32840) }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(34), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(30) }, JumpIf { condition: Relative(34), location: 10669 }, Call { location: 17882 }, Store { destination_pointer: Relative(8), source: Relative(25) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Jump { location: 10673 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 6668 }, Load { destination: Relative(2), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(11), location: 10680 }, Jump { location: 10703 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(43), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryFieldOp { destination: Relative(47), op: Add, lhs: Relative(44), rhs: Relative(45) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, Store { destination_pointer: Relative(50), source: Relative(47) }, Store { destination_pointer: Relative(10), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(44) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Relative(43) }, Jump { location: 10703 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 6632 }, Load { destination: Relative(11), source_pointer: Relative(10) }, JumpIf { condition: Relative(11), location: 10814 }, Jump { location: 10709 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(11) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 10716 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(1) }, JumpIf { condition: Relative(34), location: 10726 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(25), rhs: Relative(1) }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(43), location: 10726 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 10730 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 10735 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(34), rhs: Relative(4) }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U32, lhs: Relative(34), rhs: Relative(43) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(34), location: 10741 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Load { destination: Relative(25), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(35) }, Load { destination: Relative(43), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(50) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Not { destination: Relative(44), source: Relative(25), bit_size: U1 }, BinaryIntOp { destination: Relative(25), op: Or, bit_size: U1, lhs: Relative(45), rhs: Relative(44) }, JumpIf { condition: Relative(25), location: 10765 }, Jump { location: 10760 }, BinaryFieldOp { destination: Relative(25), op: Equals, lhs: Relative(43), rhs: Relative(38) }, JumpIf { condition: Relative(25), location: 10763 }, Jump { location: 10775 }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Jump { location: 10775 }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(43) }, JumpIf { condition: Relative(44), location: 10772 }, Call { location: 17854 }, Store { destination_pointer: Relative(8), source: Relative(25) }, Store { destination_pointer: Relative(9), source: Relative(43) }, Jump { location: 10775 }, Load { destination: Relative(25), source_pointer: Relative(11) }, JumpIf { condition: Relative(25), location: 10778 }, Jump { location: 10814 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(34) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(35) }, Store { destination_pointer: Relative(43), source: Relative(38) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(30) }, Store { destination_pointer: Relative(43), source: Relative(42) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, Store { destination_pointer: Relative(43), source: Relative(5) }, Store { destination_pointer: Relative(8), source: Relative(30) }, Store { destination_pointer: Relative(9), source: Relative(25) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Jump { location: 10814 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 6569 }, Load { destination: Relative(2), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(11), location: 10821 }, Jump { location: 10844 }, Load { destination: Relative(2), source_pointer: Relative(10) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(43), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryFieldOp { destination: Relative(47), op: Add, lhs: Relative(44), rhs: Relative(45) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, Store { destination_pointer: Relative(50), source: Relative(47) }, Store { destination_pointer: Relative(10), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(44) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Relative(43) }, Jump { location: 10844 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 6533 }, Load { destination: Relative(25), source_pointer: Relative(11) }, JumpIf { condition: Relative(25), location: 10955 }, Jump { location: 10850 }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(25) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(30) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 10857 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(35), location: 10867 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, JumpIf { condition: Relative(45), location: 10867 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(30) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(35) }, JumpIf { condition: Relative(44), location: 10871 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(35), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(30) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(35) }, JumpIf { condition: Relative(44), location: 10876 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Relative(4) }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U32, lhs: Relative(35), rhs: Relative(45) }, BinaryIntOp { destination: Relative(35), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(4) }, JumpIf { condition: Relative(35), location: 10882 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(35), op: Mul, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(35) }, Load { destination: Relative(30), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(47) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Mov { destination: Relative(25), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(5) }, Not { destination: Relative(47), source: Relative(30), bit_size: U1 }, BinaryIntOp { destination: Relative(30), op: Or, bit_size: U1, lhs: Relative(50), rhs: Relative(47) }, JumpIf { condition: Relative(30), location: 10906 }, Jump { location: 10901 }, BinaryFieldOp { destination: Relative(30), op: Equals, lhs: Relative(45), rhs: Relative(43) }, JumpIf { condition: Relative(30), location: 10904 }, Jump { location: 10916 }, Store { destination_pointer: Relative(25), source: Direct(32840) }, Jump { location: 10916 }, Store { destination_pointer: Relative(25), source: Direct(32840) }, Load { destination: Relative(30), source_pointer: Relative(8) }, Load { destination: Relative(34), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(34), rhs: Relative(45) }, JumpIf { condition: Relative(47), location: 10913 }, Call { location: 17854 }, Store { destination_pointer: Relative(8), source: Relative(30) }, Store { destination_pointer: Relative(9), source: Relative(45) }, Jump { location: 10916 }, Load { destination: Relative(30), source_pointer: Relative(25) }, JumpIf { condition: Relative(30), location: 10919 }, Jump { location: 10955 }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(35) }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(44) }, Store { destination_pointer: Relative(45), source: Relative(43) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(34) }, Store { destination_pointer: Relative(45), source: Relative(10) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(35) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(25) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Store { destination_pointer: Relative(8), source: Relative(34) }, Store { destination_pointer: Relative(9), source: Relative(30) }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Jump { location: 10955 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 6470 }, Load { destination: Relative(2), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(25), location: 10962 }, Jump { location: 10985 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(30), source_pointer: Relative(35) }, Load { destination: Relative(45), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryFieldOp { destination: Relative(51), op: Add, lhs: Relative(47), rhs: Relative(50) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Store { destination_pointer: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Relative(47) }, Store { destination_pointer: Relative(35), source: Relative(30) }, Store { destination_pointer: Relative(44), source: Relative(45) }, Jump { location: 10985 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 6434 }, Load { destination: Relative(30), source_pointer: Relative(11) }, JumpIf { condition: Relative(30), location: 11096 }, Jump { location: 10991 }, Load { destination: Relative(30), source_pointer: Relative(8) }, Load { destination: Relative(34), source_pointer: Relative(30) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 10998 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 11008 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(34), rhs: Relative(1) }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, JumpIf { condition: Relative(47), location: 11008 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(34) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 11012 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(34), op: Div, bit_size: U32, lhs: Relative(44), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(34) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 11017 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(4) }, BinaryIntOp { destination: Relative(47), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Relative(4) }, BinaryIntOp { destination: Relative(34), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(47) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(34), rhs: Relative(4) }, JumpIf { condition: Relative(44), location: 11023 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(34), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Load { destination: Relative(34), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Load { destination: Relative(51), source_pointer: Relative(53) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, Not { destination: Relative(50), source: Relative(34), bit_size: U1 }, BinaryIntOp { destination: Relative(34), op: Or, bit_size: U1, lhs: Relative(51), rhs: Relative(50) }, JumpIf { condition: Relative(34), location: 11047 }, Jump { location: 11042 }, BinaryFieldOp { destination: Relative(34), op: Equals, lhs: Relative(47), rhs: Relative(38) }, JumpIf { condition: Relative(34), location: 11045 }, Jump { location: 11057 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Jump { location: 11057 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Load { destination: Relative(34), source_pointer: Relative(8) }, Load { destination: Relative(35), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: LessThanEquals, bit_size: U32, lhs: Relative(35), rhs: Relative(47) }, JumpIf { condition: Relative(50), location: 11054 }, Call { location: 17854 }, Store { destination_pointer: Relative(8), source: Relative(34) }, Store { destination_pointer: Relative(9), source: Relative(47) }, Jump { location: 11057 }, Load { destination: Relative(34), source_pointer: Relative(30) }, JumpIf { condition: Relative(34), location: 11060 }, Jump { location: 11096 }, Load { destination: Relative(30), source_pointer: Relative(8) }, Load { destination: Relative(34), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Store { destination_pointer: Relative(50), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(35) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, Store { destination_pointer: Relative(47), source: Relative(38) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(35) }, Store { destination_pointer: Relative(47), source: Relative(25) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(30) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Store { destination_pointer: Relative(8), source: Relative(35) }, Store { destination_pointer: Relative(9), source: Relative(34) }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Jump { location: 11096 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 6367 }, Load { destination: Relative(2), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(25), location: 11103 }, Jump { location: 11126 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(30), source_pointer: Relative(35) }, Load { destination: Relative(45), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryFieldOp { destination: Relative(51), op: Add, lhs: Relative(47), rhs: Relative(50) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Store { destination_pointer: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Relative(47) }, Store { destination_pointer: Relative(35), source: Relative(30) }, Store { destination_pointer: Relative(44), source: Relative(45) }, Jump { location: 11126 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 6330 }, Load { destination: Relative(11), source_pointer: Relative(3) }, JumpIf { condition: Relative(11), location: 11237 }, Jump { location: 11132 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(11) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 11139 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(1) }, JumpIf { condition: Relative(34), location: 11149 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(25), rhs: Relative(1) }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 11149 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 11153 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 11158 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(34), rhs: Relative(4) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U32, lhs: Relative(34), rhs: Relative(44) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(34), location: 11164 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Load { destination: Relative(25), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(35) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(51) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Not { destination: Relative(45), source: Relative(25), bit_size: U1 }, BinaryIntOp { destination: Relative(25), op: Or, bit_size: U1, lhs: Relative(47), rhs: Relative(45) }, JumpIf { condition: Relative(25), location: 11188 }, Jump { location: 11183 }, BinaryFieldOp { destination: Relative(25), op: Equals, lhs: Relative(44), rhs: Relative(37) }, JumpIf { condition: Relative(25), location: 11186 }, Jump { location: 11198 }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Jump { location: 11198 }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 11195 }, Call { location: 17854 }, Store { destination_pointer: Relative(8), source: Relative(25) }, Store { destination_pointer: Relative(9), source: Relative(44) }, Jump { location: 11198 }, Load { destination: Relative(25), source_pointer: Relative(11) }, JumpIf { condition: Relative(25), location: 11201 }, Jump { location: 11237 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(34) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(35) }, Store { destination_pointer: Relative(44), source: Relative(37) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(30) }, Store { destination_pointer: Relative(44), source: Relative(46) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Store { destination_pointer: Relative(8), source: Relative(30) }, Store { destination_pointer: Relative(9), source: Relative(25) }, Store { destination_pointer: Relative(3), source: Direct(32840) }, Jump { location: 11237 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 6262 }, Load { destination: Relative(2), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(11), location: 11244 }, Jump { location: 11267 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(50), op: Add, lhs: Relative(45), rhs: Relative(47) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Store { destination_pointer: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(45) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Relative(44) }, Jump { location: 11267 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 6226 }, Load { destination: Relative(11), source_pointer: Relative(3) }, JumpIf { condition: Relative(11), location: 11368 }, Jump { location: 11273 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(11) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 11280 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(1) }, JumpIf { condition: Relative(34), location: 11290 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(25), rhs: Relative(1) }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 11290 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 11294 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 11299 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(34), rhs: Relative(4) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U32, lhs: Relative(34), rhs: Relative(44) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(34), location: 11305 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Load { destination: Relative(25), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(35) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(45) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Not { destination: Relative(11), source: Relative(50), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U1, lhs: Relative(11), rhs: Relative(25) }, JumpIf { condition: Relative(45), location: 11325 }, Jump { location: 11368 }, BinaryFieldOp { destination: Relative(11), op: Equals, lhs: Relative(44), rhs: Relative(37) }, JumpIf { condition: Relative(11), location: 11328 }, Jump { location: 11368 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(34) }, Store { destination_pointer: Relative(51), source: Relative(25) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(35) }, Store { destination_pointer: Relative(34), source: Relative(44) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(25) }, Store { destination_pointer: Relative(44), source: Relative(47) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, BinaryIntOp { destination: Relative(11), op: Sub, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(34), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(30) }, JumpIf { condition: Relative(34), location: 11364 }, Call { location: 17882 }, Store { destination_pointer: Relative(8), source: Relative(25) }, Store { destination_pointer: Relative(9), source: Relative(11) }, Store { destination_pointer: Relative(3), source: Direct(32840) }, Jump { location: 11368 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 6163 }, Load { destination: Relative(2), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(11), location: 11375 }, Jump { location: 11398 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(50), op: Add, lhs: Relative(45), rhs: Relative(47) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Store { destination_pointer: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(45) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Relative(44) }, Jump { location: 11398 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 6127 }, Load { destination: Relative(11), source_pointer: Relative(3) }, JumpIf { condition: Relative(11), location: 11509 }, Jump { location: 11404 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(11) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(34), source: Relative(34), bit_size: U1 }, JumpIf { condition: Relative(34), location: 11411 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(34), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(1) }, JumpIf { condition: Relative(34), location: 11421 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(25), rhs: Relative(1) }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 11421 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 11425 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(25), op: Div, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(25) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 11430 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(34), rhs: Relative(4) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U32, lhs: Relative(34), rhs: Relative(44) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(25), rhs: Relative(4) }, JumpIf { condition: Relative(34), location: 11436 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(25), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Load { destination: Relative(25), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(35) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(51) }, Mov { destination: Relative(11), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(11), source: Relative(5) }, Not { destination: Relative(45), source: Relative(25), bit_size: U1 }, BinaryIntOp { destination: Relative(25), op: Or, bit_size: U1, lhs: Relative(47), rhs: Relative(45) }, JumpIf { condition: Relative(25), location: 11460 }, Jump { location: 11455 }, BinaryFieldOp { destination: Relative(25), op: Equals, lhs: Relative(44), rhs: Relative(37) }, JumpIf { condition: Relative(25), location: 11458 }, Jump { location: 11470 }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Jump { location: 11470 }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 11467 }, Call { location: 17854 }, Store { destination_pointer: Relative(8), source: Relative(25) }, Store { destination_pointer: Relative(9), source: Relative(44) }, Jump { location: 11470 }, Load { destination: Relative(25), source_pointer: Relative(11) }, JumpIf { condition: Relative(25), location: 11473 }, Jump { location: 11509 }, Load { destination: Relative(11), source_pointer: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(34) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(11), source: Direct(32773) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(35) }, Store { destination_pointer: Relative(44), source: Relative(37) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(30) }, Store { destination_pointer: Relative(44), source: Relative(46) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Store { destination_pointer: Relative(8), source: Relative(30) }, Store { destination_pointer: Relative(9), source: Relative(25) }, Store { destination_pointer: Relative(3), source: Direct(32840) }, Jump { location: 11509 }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(11) }, Jump { location: 6063 }, Load { destination: Relative(2), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(11), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(11), location: 11516 }, Jump { location: 11539 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(11), source_pointer: Relative(30) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(50), op: Add, lhs: Relative(45), rhs: Relative(47) }, Mov { destination: Direct(32771), source: Relative(11) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Store { destination_pointer: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(45) }, Store { destination_pointer: Relative(34), source: Relative(25) }, Store { destination_pointer: Relative(35), source: Relative(44) }, Jump { location: 11539 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 6027 }, Load { destination: Relative(25), source_pointer: Relative(11) }, JumpIf { condition: Relative(25), location: 11640 }, Jump { location: 11545 }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(25) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(30) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 11552 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(1) }, JumpIf { condition: Relative(35), location: 11562 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 11562 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(30) }, BinaryIntOp { destination: Relative(37), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(35) }, JumpIf { condition: Relative(37), location: 11566 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(35), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(30) }, BinaryIntOp { destination: Relative(37), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(35) }, JumpIf { condition: Relative(37), location: 11571 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(37), op: Div, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(37), rhs: Relative(4) }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U32, lhs: Relative(35), rhs: Relative(44) }, BinaryIntOp { destination: Relative(35), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(4) }, JumpIf { condition: Relative(35), location: 11577 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(35), op: Mul, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(35) }, Load { destination: Relative(30), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(45) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Not { destination: Relative(25), source: Relative(50), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U1, lhs: Relative(25), rhs: Relative(30) }, JumpIf { condition: Relative(45), location: 11597 }, Jump { location: 11640 }, BinaryFieldOp { destination: Relative(25), op: Equals, lhs: Relative(44), rhs: Relative(3) }, JumpIf { condition: Relative(25), location: 11600 }, Jump { location: 11640 }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(34), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(35) }, Store { destination_pointer: Relative(51), source: Relative(30) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(37) }, Store { destination_pointer: Relative(35), source: Relative(44) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(30) }, Store { destination_pointer: Relative(44), source: Relative(47) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(35) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(25) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 11636 }, Call { location: 17882 }, Store { destination_pointer: Relative(8), source: Relative(30) }, Store { destination_pointer: Relative(9), source: Relative(25) }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Jump { location: 11640 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 5963 }, Load { destination: Relative(2), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(25), location: 11647 }, Jump { location: 11670 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(34) }, Load { destination: Relative(30), source_pointer: Relative(35) }, Load { destination: Relative(44), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(50), op: Add, lhs: Relative(45), rhs: Relative(47) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Store { destination_pointer: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(34), source: Relative(45) }, Store { destination_pointer: Relative(35), source: Relative(30) }, Store { destination_pointer: Relative(37), source: Relative(44) }, Jump { location: 11670 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 5927 }, Load { destination: Relative(25), source_pointer: Relative(11) }, JumpIf { condition: Relative(25), location: 11771 }, Jump { location: 11676 }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(25) }, Const { destination: Relative(34), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(34), rhs: Relative(30) }, Not { destination: Relative(35), source: Relative(35), bit_size: U1 }, JumpIf { condition: Relative(35), location: 11683 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(35), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(1) }, JumpIf { condition: Relative(35), location: 11693 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(30), rhs: Relative(1) }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 11693 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(30) }, BinaryIntOp { destination: Relative(37), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(35) }, JumpIf { condition: Relative(37), location: 11697 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(30), op: Div, bit_size: U32, lhs: Relative(35), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(30) }, BinaryIntOp { destination: Relative(37), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(35) }, JumpIf { condition: Relative(37), location: 11702 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(37), op: Div, bit_size: U32, lhs: Relative(35), rhs: Relative(4) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(37), rhs: Relative(4) }, BinaryIntOp { destination: Relative(30), op: Sub, bit_size: U32, lhs: Relative(35), rhs: Relative(44) }, BinaryIntOp { destination: Relative(35), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(4) }, JumpIf { condition: Relative(35), location: 11708 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(35), op: Mul, bit_size: U32, lhs: Relative(30), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(35) }, Load { destination: Relative(30), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(45) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Not { destination: Relative(25), source: Relative(50), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U1, lhs: Relative(25), rhs: Relative(30) }, JumpIf { condition: Relative(45), location: 11728 }, Jump { location: 11771 }, BinaryFieldOp { destination: Relative(25), op: Equals, lhs: Relative(44), rhs: Relative(3) }, JumpIf { condition: Relative(25), location: 11731 }, Jump { location: 11771 }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(34), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(35) }, Store { destination_pointer: Relative(51), source: Relative(30) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(37) }, Store { destination_pointer: Relative(35), source: Relative(44) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(30) }, Store { destination_pointer: Relative(44), source: Relative(47) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(35) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(25) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, BinaryIntOp { destination: Relative(25), op: Sub, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(34) }, JumpIf { condition: Relative(35), location: 11767 }, Call { location: 17882 }, Store { destination_pointer: Relative(8), source: Relative(30) }, Store { destination_pointer: Relative(9), source: Relative(25) }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Jump { location: 11771 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 5864 }, Load { destination: Relative(2), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(25), location: 11778 }, Jump { location: 11801 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(30) }, Load { destination: Relative(37), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(50), op: Add, lhs: Relative(45), rhs: Relative(47) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Store { destination_pointer: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(45) }, Store { destination_pointer: Relative(34), source: Relative(37) }, Store { destination_pointer: Relative(35), source: Relative(44) }, Jump { location: 11801 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 5828 }, Load { destination: Relative(37), source_pointer: Relative(34) }, JumpIf { condition: Relative(37), location: 11865 }, Jump { location: 11807 }, Load { destination: Relative(37), source_pointer: Relative(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(37) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 11813 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(37) }, BinaryIntOp { destination: Relative(37), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, JumpIf { condition: Relative(45), location: 11823 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(37), rhs: Relative(1) }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(50), location: 11823 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(37) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, JumpIf { condition: Relative(47), location: 11827 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(37), op: Div, bit_size: U32, lhs: Relative(45), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(37) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(45) }, JumpIf { condition: Relative(47), location: 11832 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(45), rhs: Relative(4) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Relative(4) }, BinaryIntOp { destination: Relative(37), op: Sub, bit_size: U32, lhs: Relative(45), rhs: Relative(50) }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(37), rhs: Relative(4) }, JumpIf { condition: Relative(45), location: 11838 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(37), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Load { destination: Relative(37), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(47) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(47) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(47) }, Load { destination: Relative(45), source_pointer: Relative(53) }, Not { destination: Relative(47), source: Relative(45), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U1, lhs: Relative(47), rhs: Relative(37) }, JumpIf { condition: Relative(45), location: 11858 }, Jump { location: 11865 }, BinaryFieldOp { destination: Relative(37), op: Equals, lhs: Relative(50), rhs: Relative(3) }, JumpIf { condition: Relative(37), location: 11861 }, Jump { location: 11865 }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Store { destination_pointer: Relative(35), source: Relative(51) }, Store { destination_pointer: Relative(34), source: Direct(32840) }, Jump { location: 11865 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(37) }, Jump { location: 5766 }, Load { destination: Relative(30), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(30) }, JumpIf { condition: Relative(34), location: 11872 }, Jump { location: 11895 }, Load { destination: Relative(30), source_pointer: Relative(45) }, Load { destination: Relative(34), source_pointer: Relative(47) }, Load { destination: Relative(37), source_pointer: Relative(50) }, Load { destination: Relative(44), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(1) }, Load { destination: Relative(52), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(1) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryFieldOp { destination: Relative(54), op: Add, lhs: Relative(52), rhs: Relative(53) }, Mov { destination: Direct(32771), source: Relative(34) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(1) }, Store { destination_pointer: Relative(55), source: Relative(54) }, Store { destination_pointer: Relative(45), source: Relative(30) }, Store { destination_pointer: Relative(47), source: Relative(52) }, Store { destination_pointer: Relative(50), source: Relative(37) }, Store { destination_pointer: Relative(51), source: Relative(44) }, Jump { location: 11895 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 5730 }, Load { destination: Relative(30), source_pointer: Relative(11) }, JumpIf { condition: Relative(30), location: 12006 }, Jump { location: 11901 }, Load { destination: Relative(30), source_pointer: Relative(8) }, Load { destination: Relative(34), source_pointer: Relative(30) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(34) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 11908 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(34) }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, JumpIf { condition: Relative(37), location: 11918 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(34), rhs: Relative(1) }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, JumpIf { condition: Relative(45), location: 11918 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(34) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(37) }, JumpIf { condition: Relative(44), location: 11922 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(34), op: Div, bit_size: U32, lhs: Relative(37), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(34) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(37) }, JumpIf { condition: Relative(44), location: 11927 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(37), rhs: Relative(4) }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Relative(4) }, BinaryIntOp { destination: Relative(34), op: Sub, bit_size: U32, lhs: Relative(37), rhs: Relative(45) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(34), rhs: Relative(4) }, JumpIf { condition: Relative(37), location: 11933 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(37), op: Mul, bit_size: U32, lhs: Relative(34), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(37) }, Load { destination: Relative(34), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(47) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, Not { destination: Relative(47), source: Relative(34), bit_size: U1 }, BinaryIntOp { destination: Relative(34), op: Or, bit_size: U1, lhs: Relative(50), rhs: Relative(47) }, JumpIf { condition: Relative(34), location: 11957 }, Jump { location: 11952 }, BinaryFieldOp { destination: Relative(34), op: Equals, lhs: Relative(45), rhs: Relative(3) }, JumpIf { condition: Relative(34), location: 11955 }, Jump { location: 11967 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Jump { location: 11967 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Load { destination: Relative(34), source_pointer: Relative(8) }, Load { destination: Relative(35), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(35), rhs: Relative(45) }, JumpIf { condition: Relative(47), location: 11964 }, Call { location: 17854 }, Store { destination_pointer: Relative(8), source: Relative(34) }, Store { destination_pointer: Relative(9), source: Relative(45) }, Jump { location: 11967 }, Load { destination: Relative(34), source_pointer: Relative(30) }, JumpIf { condition: Relative(34), location: 11970 }, Jump { location: 12006 }, Load { destination: Relative(30), source_pointer: Relative(8) }, Load { destination: Relative(34), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(35) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(44) }, Store { destination_pointer: Relative(45), source: Relative(3) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(35) }, Store { destination_pointer: Relative(45), source: Relative(25) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 21 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(30) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Store { destination_pointer: Relative(8), source: Relative(35) }, Store { destination_pointer: Relative(9), source: Relative(34) }, Store { destination_pointer: Relative(11), source: Direct(32840) }, Jump { location: 12006 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 5653 }, Load { destination: Relative(2), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(25), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(25), location: 12013 }, Jump { location: 12036 }, Load { destination: Relative(2), source_pointer: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(30) }, Load { destination: Relative(37), source_pointer: Relative(34) }, Load { destination: Relative(44), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(50), op: Add, lhs: Relative(45), rhs: Relative(47) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Store { destination_pointer: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(11), source: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(45) }, Store { destination_pointer: Relative(34), source: Relative(37) }, Store { destination_pointer: Relative(35), source: Relative(44) }, Jump { location: 12036 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 5616 }, Load { destination: Relative(8), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(11) }, Load { destination: Relative(25), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(30) }, Load { destination: Relative(34), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(11) }, Load { destination: Relative(37), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(30) }, Load { destination: Relative(11), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(30), op: Equals, lhs: Relative(25), rhs: Relative(37) }, BinaryFieldOp { destination: Relative(25), op: Equals, lhs: Relative(34), rhs: Relative(11) }, BinaryIntOp { destination: Relative(11), op: Mul, bit_size: U1, lhs: Relative(30), rhs: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U1, lhs: Relative(8), rhs: Relative(11) }, Store { destination_pointer: Relative(9), source: Relative(25) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(8) }, Jump { location: 5513 }, Load { destination: Relative(8), source_pointer: Relative(9) }, Const { destination: Relative(11), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(25), op: Equals, bit_size: U32, lhs: Relative(11), rhs: Relative(8) }, Not { destination: Relative(25), source: Relative(25), bit_size: U1 }, JumpIf { condition: Relative(25), location: 12068 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(8) }, Load { destination: Relative(25), source_pointer: Relative(34) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(30) }, Load { destination: Relative(8), source_pointer: Relative(35) }, Load { destination: Relative(30), source_pointer: Relative(3) }, Load { destination: Relative(34), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(35), op: LessThan, bit_size: U32, lhs: Relative(34), rhs: Direct(32837) }, JumpIf { condition: Relative(35), location: 12083 }, Call { location: 17885 }, BinaryIntOp { destination: Relative(35), op: Mul, bit_size: U32, lhs: Relative(34), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(35) }, Store { destination_pointer: Relative(45), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(25) }, Store { destination_pointer: Relative(44), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(25), op: LessThanEquals, bit_size: U32, lhs: Relative(34), rhs: Relative(8) }, JumpIf { condition: Relative(25), location: 12103 }, Call { location: 17854 }, Store { destination_pointer: Relative(3), source: Relative(30) }, Store { destination_pointer: Relative(2), source: Relative(8) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(8) }, Jump { location: 5445 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(35) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(34) }, Load { destination: Relative(35), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(34) }, Load { destination: Relative(37), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(34) }, Load { destination: Relative(25), source_pointer: Relative(45) }, Not { destination: Relative(34), source: Relative(25), bit_size: U1 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U1, lhs: Relative(34), rhs: Relative(30) }, JumpIf { condition: Relative(25), location: 12128 }, Jump { location: 12156 }, Load { destination: Relative(25), source_pointer: Relative(8) }, Load { destination: Relative(30), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(34), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(11) }, JumpIf { condition: Relative(34), location: 12133 }, Call { location: 17885 }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U32, lhs: Relative(30), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(34) }, Store { destination_pointer: Relative(47), source: Relative(35) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(34), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(25) }, Store { destination_pointer: Relative(45), source: Relative(37) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(35), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, JumpIf { condition: Relative(35), location: 12153 }, Call { location: 17854 }, Store { destination_pointer: Relative(8), source: Relative(34) }, Store { destination_pointer: Relative(3), source: Relative(25) }, Jump { location: 12156 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 5380 }, Load { destination: Relative(34), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(34) }, JumpIf { condition: Relative(37), location: 12163 }, Jump { location: 12281 }, Load { destination: Relative(37), source_pointer: Relative(9) }, Load { destination: Relative(44), source_pointer: Relative(37) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 12170 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Load { destination: Relative(44), source_pointer: Relative(52) }, BinaryFieldOp { destination: Relative(37), op: Mul, lhs: Relative(47), rhs: Relative(46) }, BinaryFieldOp { destination: Relative(47), op: Mul, lhs: Relative(44), rhs: Relative(46) }, Load { destination: Relative(44), source_pointer: Relative(25) }, Load { destination: Relative(50), source_pointer: Relative(2) }, Load { destination: Relative(51), source_pointer: Relative(44) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 12190 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(51), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(50) }, JumpIf { condition: Relative(53), location: 12197 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(35) }, JumpIf { condition: Relative(50), location: 12200 }, Call { location: 17476 }, Load { destination: Relative(50), source_pointer: Relative(44) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 12206 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(50) }, Load { destination: Relative(44), source_pointer: Relative(30) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(44) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 12214 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(56), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, Mov { destination: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(58), source: Relative(37) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Direct(32839) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, Store { destination_pointer: Relative(58), source: Direct(32839) }, Store { destination_pointer: Relative(44), source: Relative(56) }, Store { destination_pointer: Relative(53), source: Relative(30) }, Store { destination_pointer: Relative(54), source: Direct(32841) }, Store { destination_pointer: Relative(55), source: Relative(5) }, Mov { destination: Relative(34), source: Direct(32838) }, Jump { location: 12241 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(34), rhs: Direct(32837) }, JumpIf { condition: Relative(45), location: 12396 }, Jump { location: 12244 }, Load { destination: Relative(45), source_pointer: Relative(44) }, Load { destination: Relative(50), source_pointer: Relative(53) }, Load { destination: Relative(51), source_pointer: Relative(54) }, Load { destination: Relative(52), source_pointer: Relative(50) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(57), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(52) }, Not { destination: Relative(57), source: Relative(57), bit_size: U1 }, JumpIf { condition: Relative(57), location: 12253 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(52) }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(57) }, IndirectConst { destination_pointer: Relative(52), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(57), size: Relative(58) }, output: HeapArray { pointer: Relative(59), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(44), source: Relative(45) }, Store { destination_pointer: Relative(53), source: Relative(52) }, Store { destination_pointer: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(55), source: Direct(32840) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32841) }, Load { destination: Relative(44), source_pointer: Relative(45) }, Cast { destination: Relative(50), source: Relative(44), bit_size: Integer(U32) }, Cast { destination: Relative(45), source: Relative(50), bit_size: Field }, Cast { destination: Relative(44), source: Relative(45), bit_size: Integer(U32) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(34), source: Direct(32838) }, Jump { location: 12277 }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(34), rhs: Relative(11) }, JumpIf { condition: Relative(50), location: 12284 }, Jump { location: 12280 }, Jump { location: 12281 }, BinaryIntOp { destination: Relative(34), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(34) }, Jump { location: 5320 }, Load { destination: Relative(50), source_pointer: Relative(45) }, JumpIf { condition: Relative(50), location: 12393 }, Jump { location: 12287 }, Load { destination: Relative(50), source_pointer: Relative(25) }, Load { destination: Relative(51), source_pointer: Relative(50) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 12294 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(34), rhs: Relative(34) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(54), rhs: Relative(34) }, JumpIf { condition: Relative(53), location: 12304 }, BinaryIntOp { destination: Relative(56), op: Div, bit_size: U32, lhs: Relative(51), rhs: Relative(34) }, BinaryIntOp { destination: Relative(55), op: Equals, bit_size: U32, lhs: Relative(56), rhs: Relative(34) }, JumpIf { condition: Relative(55), location: 12304 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(34), rhs: Relative(51) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(34), rhs: Relative(53) }, JumpIf { condition: Relative(54), location: 12308 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(53), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(51) }, BinaryIntOp { destination: Relative(54), op: LessThanEquals, bit_size: U32, lhs: Relative(44), rhs: Relative(53) }, JumpIf { condition: Relative(54), location: 12313 }, Call { location: 17854 }, Const { destination: Relative(54), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(55), op: Div, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, BinaryIntOp { destination: Relative(56), op: Mul, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, BinaryIntOp { destination: Relative(51), op: Sub, bit_size: U32, lhs: Relative(53), rhs: Relative(56) }, BinaryIntOp { destination: Relative(53), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(11) }, JumpIf { condition: Relative(53), location: 12320 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, Load { destination: Relative(51), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(54) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(56) }, Load { destination: Relative(57), source_pointer: Relative(59) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Relative(5) }, Not { destination: Relative(56), source: Relative(51), bit_size: U1 }, BinaryIntOp { destination: Relative(51), op: Or, bit_size: U1, lhs: Relative(57), rhs: Relative(56) }, JumpIf { condition: Relative(51), location: 12344 }, Jump { location: 12339 }, BinaryFieldOp { destination: Relative(51), op: Equals, lhs: Relative(55), rhs: Relative(37) }, JumpIf { condition: Relative(51), location: 12342 }, Jump { location: 12354 }, Store { destination_pointer: Relative(50), source: Direct(32840) }, Jump { location: 12354 }, Store { destination_pointer: Relative(50), source: Direct(32840) }, Load { destination: Relative(51), source_pointer: Relative(25) }, Load { destination: Relative(52), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(56), op: LessThanEquals, bit_size: U32, lhs: Relative(52), rhs: Relative(55) }, JumpIf { condition: Relative(56), location: 12351 }, Call { location: 17854 }, Store { destination_pointer: Relative(25), source: Relative(51) }, Store { destination_pointer: Relative(2), source: Relative(55) }, Jump { location: 12354 }, Load { destination: Relative(51), source_pointer: Relative(50) }, JumpIf { condition: Relative(51), location: 12357 }, Jump { location: 12393 }, Load { destination: Relative(50), source_pointer: Relative(25) }, Load { destination: Relative(51), source_pointer: Relative(2) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Store { destination_pointer: Relative(56), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(52) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(54) }, Store { destination_pointer: Relative(55), source: Relative(37) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(52) }, Store { destination_pointer: Relative(55), source: Relative(47) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(53) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(50) }, Store { destination_pointer: Relative(55), source: Relative(5) }, Store { destination_pointer: Relative(25), source: Relative(52) }, Store { destination_pointer: Relative(2), source: Relative(51) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, Jump { location: 12393 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, Mov { destination: Relative(34), source: Relative(50) }, Jump { location: 12277 }, Load { destination: Relative(45), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(34), rhs: Relative(45) }, JumpIf { condition: Relative(50), location: 12400 }, Jump { location: 12423 }, Load { destination: Relative(45), source_pointer: Relative(44) }, Load { destination: Relative(50), source_pointer: Relative(53) }, Load { destination: Relative(51), source_pointer: Relative(54) }, Load { destination: Relative(52), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(34) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(34) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryFieldOp { destination: Relative(58), op: Add, lhs: Relative(56), rhs: Relative(57) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(56), source: Direct(32773) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(34) }, Store { destination_pointer: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(44), source: Relative(45) }, Store { destination_pointer: Relative(53), source: Relative(56) }, Store { destination_pointer: Relative(54), source: Relative(51) }, Store { destination_pointer: Relative(55), source: Relative(52) }, Jump { location: 12423 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(34), rhs: Direct(32841) }, Mov { destination: Relative(34), source: Relative(45) }, Jump { location: 12241 }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(30) }, Load { destination: Relative(37), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(44) }, Load { destination: Relative(30), source_pointer: Relative(51) }, Not { destination: Relative(44), source: Relative(30), bit_size: U1 }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U1, lhs: Relative(44), rhs: Relative(37) }, JumpIf { condition: Relative(30), location: 12446 }, Jump { location: 12474 }, Load { destination: Relative(30), source_pointer: Relative(34) }, Load { destination: Relative(37), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(37), rhs: Relative(11) }, JumpIf { condition: Relative(44), location: 12451 }, Call { location: 17885 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(37), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(44) }, Store { destination_pointer: Relative(52), source: Relative(45) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(30) }, Store { destination_pointer: Relative(51), source: Relative(47) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(37), rhs: Relative(30) }, JumpIf { condition: Relative(45), location: 12471 }, Call { location: 17854 }, Store { destination_pointer: Relative(34), source: Relative(44) }, Store { destination_pointer: Relative(25), source: Relative(30) }, Jump { location: 12474 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 5190 }, Load { destination: Relative(25), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(1) }, Load { destination: Relative(34), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, Load { destination: Relative(37), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(44), op: Equals, lhs: Relative(34), rhs: Relative(37) }, BinaryIntOp { destination: Relative(34), op: Mul, bit_size: U1, lhs: Relative(25), rhs: Relative(44) }, Store { destination_pointer: Relative(2), source: Relative(34) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 5121 }, Load { destination: Relative(25), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(1) }, Load { destination: Relative(30), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(33), source_pointer: Relative(50) }, BinaryFieldOp { destination: Relative(47), op: Equals, lhs: Relative(30), rhs: Relative(33) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U1, lhs: Relative(25), rhs: Relative(47) }, Store { destination_pointer: Relative(44), source: Relative(30) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 4979 }, Load { destination: Relative(10), source_pointer: Relative(9) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(10) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 12509 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(10) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(1) }, Load { destination: Relative(10), source_pointer: Relative(44) }, Load { destination: Relative(37), source_pointer: Relative(30) }, Load { destination: Relative(44), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, JumpIf { condition: Relative(45), location: 12519 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Store { destination_pointer: Relative(50), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(37), op: LessThanEquals, bit_size: U32, lhs: Relative(44), rhs: Relative(10) }, JumpIf { condition: Relative(37), location: 12530 }, Call { location: 17854 }, Store { destination_pointer: Relative(30), source: Relative(45) }, Store { destination_pointer: Relative(25), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(10) }, Jump { location: 4911 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(10) }, Load { destination: Relative(30), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(37) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(37) }, Load { destination: Relative(10), source_pointer: Relative(50) }, Not { destination: Relative(37), source: Relative(10), bit_size: U1 }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(37), rhs: Relative(30) }, JumpIf { condition: Relative(10), location: 12551 }, Jump { location: 12570 }, Load { destination: Relative(10), source_pointer: Relative(44) }, Load { destination: Relative(30), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(11) }, JumpIf { condition: Relative(37), location: 12556 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(30) }, Store { destination_pointer: Relative(50), source: Relative(45) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(10) }, JumpIf { condition: Relative(45), location: 12567 }, Call { location: 17854 }, Store { destination_pointer: Relative(44), source: Relative(37) }, Store { destination_pointer: Relative(33), source: Relative(10) }, Jump { location: 12570 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(10) }, Jump { location: 4852 }, Load { destination: Relative(25), source_pointer: Relative(2) }, Const { destination: Relative(30), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(33), op: Equals, bit_size: U32, lhs: Relative(30), rhs: Relative(25) }, Not { destination: Relative(33), source: Relative(33), bit_size: U1 }, JumpIf { condition: Relative(33), location: 12579 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(25) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(1) }, Load { destination: Relative(25), source_pointer: Relative(37) }, Load { destination: Relative(33), source_pointer: Relative(10) }, Load { destination: Relative(37), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(37), rhs: Direct(32837) }, JumpIf { condition: Relative(44), location: 12589 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(33) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Store { destination_pointer: Relative(47), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(33), op: LessThanEquals, bit_size: U32, lhs: Relative(37), rhs: Relative(25) }, JumpIf { condition: Relative(33), location: 12600 }, Call { location: 17854 }, Store { destination_pointer: Relative(10), source: Relative(44) }, Store { destination_pointer: Relative(9), source: Relative(25) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 4772 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(25) }, Load { destination: Relative(33), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Load { destination: Relative(25), source_pointer: Relative(47) }, Not { destination: Relative(37), source: Relative(25), bit_size: U1 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U1, lhs: Relative(37), rhs: Relative(33) }, JumpIf { condition: Relative(25), location: 12621 }, Jump { location: 12640 }, Load { destination: Relative(25), source_pointer: Relative(30) }, Load { destination: Relative(33), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(33), rhs: Relative(11) }, JumpIf { condition: Relative(37), location: 12626 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(33) }, Store { destination_pointer: Relative(47), source: Relative(44) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(33), rhs: Relative(25) }, JumpIf { condition: Relative(44), location: 12637 }, Call { location: 17854 }, Store { destination_pointer: Relative(30), source: Relative(37) }, Store { destination_pointer: Relative(10), source: Relative(25) }, Jump { location: 12640 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 4713 }, Load { destination: Relative(2), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(25), rhs: Relative(9) }, Load { destination: Relative(10), source_pointer: Relative(30) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(33), rhs: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(33) }, Load { destination: Relative(37), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(33) }, Load { destination: Relative(44), source_pointer: Relative(47) }, Not { destination: Relative(2), source: Relative(44), bit_size: U1 }, BinaryIntOp { destination: Relative(33), op: Mul, bit_size: U1, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(33), location: 12664 }, Jump { location: 12700 }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(37), rhs: Relative(43) }, Load { destination: Relative(10), source_pointer: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(9) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(9), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(25) }, Store { destination_pointer: Relative(44), source: Relative(30) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(25), source: Direct(32773) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(10) }, Store { destination_pointer: Relative(37), source: Relative(2) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(9), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, Store { destination_pointer: Relative(3), source: Relative(9) }, Store { destination_pointer: Relative(8), source: Relative(33) }, Jump { location: 12700 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 4663 }, Load { destination: Relative(30), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(33), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(30) }, JumpIf { condition: Relative(33), location: 12707 }, Jump { location: 12824 }, Load { destination: Relative(33), source_pointer: Relative(9) }, Load { destination: Relative(37), source_pointer: Relative(33) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(37) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 12714 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(33), source: Relative(37) }, BinaryIntOp { destination: Relative(37), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(37) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(47) }, Load { destination: Relative(37), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(33), op: Mul, lhs: Relative(45), rhs: Relative(38) }, Load { destination: Relative(45), source_pointer: Relative(10) }, Load { destination: Relative(47), source_pointer: Relative(2) }, Load { destination: Relative(50), source_pointer: Relative(45) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 12733 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Div, bit_size: U32, lhs: Relative(50), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(47) }, JumpIf { condition: Relative(52), location: 12740 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(35) }, JumpIf { condition: Relative(47), location: 12743 }, Call { location: 17476 }, Load { destination: Relative(47), source_pointer: Relative(45) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(47) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 12749 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(47) }, Load { destination: Relative(45), source_pointer: Relative(25) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 12757 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(25), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(53), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(55), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, Mov { destination: Relative(57), source: Relative(56) }, Store { destination_pointer: Relative(57), source: Relative(33) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Direct(32839) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(57), source: Direct(32839) }, Store { destination_pointer: Relative(45), source: Relative(55) }, Store { destination_pointer: Relative(52), source: Relative(25) }, Store { destination_pointer: Relative(53), source: Direct(32841) }, Store { destination_pointer: Relative(54), source: Relative(5) }, Mov { destination: Relative(30), source: Direct(32838) }, Jump { location: 12784 }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Direct(32837) }, JumpIf { condition: Relative(44), location: 12939 }, Jump { location: 12787 }, Load { destination: Relative(44), source_pointer: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(52) }, Load { destination: Relative(50), source_pointer: Relative(53) }, Load { destination: Relative(51), source_pointer: Relative(47) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(51) }, Not { destination: Relative(56), source: Relative(56), bit_size: U1 }, JumpIf { condition: Relative(56), location: 12796 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(51) }, Mov { destination: Relative(51), source: Direct(1) }, Const { destination: Relative(56), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(56) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Const { destination: Relative(57), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(56), size: Relative(57) }, output: HeapArray { pointer: Relative(58), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(45), source: Relative(44) }, Store { destination_pointer: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(53), source: Relative(50) }, Store { destination_pointer: Relative(54), source: Direct(32840) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32841) }, Load { destination: Relative(44), source_pointer: Relative(45) }, Cast { destination: Relative(47), source: Relative(44), bit_size: Integer(U32) }, Cast { destination: Relative(45), source: Relative(47), bit_size: Field }, Cast { destination: Relative(44), source: Relative(45), bit_size: Integer(U32) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(30), source: Direct(32838) }, Jump { location: 12820 }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(11) }, JumpIf { condition: Relative(47), location: 12827 }, Jump { location: 12823 }, Jump { location: 12824 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 4654 }, Load { destination: Relative(47), source_pointer: Relative(45) }, JumpIf { condition: Relative(47), location: 12936 }, Jump { location: 12830 }, Load { destination: Relative(47), source_pointer: Relative(10) }, Load { destination: Relative(50), source_pointer: Relative(47) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 12837 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(30), rhs: Relative(30) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(30) }, JumpIf { condition: Relative(52), location: 12847 }, BinaryIntOp { destination: Relative(55), op: Div, bit_size: U32, lhs: Relative(50), rhs: Relative(30) }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(30) }, JumpIf { condition: Relative(54), location: 12847 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(30), rhs: Relative(50) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(30), rhs: Relative(52) }, JumpIf { condition: Relative(53), location: 12851 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(52), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(50) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(44), rhs: Relative(52) }, JumpIf { condition: Relative(53), location: 12856 }, Call { location: 17854 }, Const { destination: Relative(53), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(54), op: Div, bit_size: U32, lhs: Relative(52), rhs: Relative(53) }, BinaryIntOp { destination: Relative(55), op: Mul, bit_size: U32, lhs: Relative(54), rhs: Relative(53) }, BinaryIntOp { destination: Relative(50), op: Sub, bit_size: U32, lhs: Relative(52), rhs: Relative(55) }, BinaryIntOp { destination: Relative(52), op: LessThan, bit_size: U32, lhs: Relative(50), rhs: Relative(11) }, JumpIf { condition: Relative(52), location: 12863 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(52), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Load { destination: Relative(50), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(55) }, Load { destination: Relative(56), source_pointer: Relative(58) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Not { destination: Relative(55), source: Relative(50), bit_size: U1 }, BinaryIntOp { destination: Relative(50), op: Or, bit_size: U1, lhs: Relative(56), rhs: Relative(55) }, JumpIf { condition: Relative(50), location: 12887 }, Jump { location: 12882 }, BinaryFieldOp { destination: Relative(50), op: Equals, lhs: Relative(54), rhs: Relative(33) }, JumpIf { condition: Relative(50), location: 12885 }, Jump { location: 12897 }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Jump { location: 12897 }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Load { destination: Relative(50), source_pointer: Relative(10) }, Load { destination: Relative(51), source_pointer: Relative(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 12894 }, Call { location: 17854 }, Store { destination_pointer: Relative(10), source: Relative(50) }, Store { destination_pointer: Relative(2), source: Relative(54) }, Jump { location: 12897 }, Load { destination: Relative(50), source_pointer: Relative(47) }, JumpIf { condition: Relative(50), location: 12900 }, Jump { location: 12936 }, Load { destination: Relative(47), source_pointer: Relative(10) }, Load { destination: Relative(50), source_pointer: Relative(2) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(52) }, Store { destination_pointer: Relative(55), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(53) }, Store { destination_pointer: Relative(54), source: Relative(33) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(37) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(52) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(47) }, Store { destination_pointer: Relative(54), source: Relative(5) }, Store { destination_pointer: Relative(10), source: Relative(51) }, Store { destination_pointer: Relative(2), source: Relative(50) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, Jump { location: 12936 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, Mov { destination: Relative(30), source: Relative(47) }, Jump { location: 12820 }, Load { destination: Relative(44), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(30), rhs: Relative(44) }, JumpIf { condition: Relative(47), location: 12943 }, Jump { location: 12966 }, Load { destination: Relative(44), source_pointer: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(52) }, Load { destination: Relative(50), source_pointer: Relative(53) }, Load { destination: Relative(51), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(30) }, Load { destination: Relative(55), source_pointer: Relative(57) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(30) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryFieldOp { destination: Relative(57), op: Add, lhs: Relative(55), rhs: Relative(56) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(30) }, Store { destination_pointer: Relative(58), source: Relative(57) }, Store { destination_pointer: Relative(45), source: Relative(44) }, Store { destination_pointer: Relative(52), source: Relative(55) }, Store { destination_pointer: Relative(53), source: Relative(50) }, Store { destination_pointer: Relative(54), source: Relative(51) }, Jump { location: 12966 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, Mov { destination: Relative(30), source: Relative(44) }, Jump { location: 12784 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(25) }, Load { destination: Relative(33), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(37) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(37) }, Load { destination: Relative(25), source_pointer: Relative(50) }, Not { destination: Relative(37), source: Relative(25), bit_size: U1 }, BinaryIntOp { destination: Relative(25), op: Mul, bit_size: U1, lhs: Relative(37), rhs: Relative(33) }, JumpIf { condition: Relative(25), location: 12989 }, Jump { location: 13017 }, Load { destination: Relative(25), source_pointer: Relative(30) }, Load { destination: Relative(33), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(33), rhs: Relative(11) }, JumpIf { condition: Relative(37), location: 12994 }, Call { location: 17885 }, BinaryIntOp { destination: Relative(37), op: Mul, bit_size: U32, lhs: Relative(33), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(25) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(37) }, Store { destination_pointer: Relative(51), source: Relative(44) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(25) }, Store { destination_pointer: Relative(50), source: Relative(45) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(33), rhs: Relative(25) }, JumpIf { condition: Relative(44), location: 13014 }, Call { location: 17854 }, Store { destination_pointer: Relative(30), source: Relative(37) }, Store { destination_pointer: Relative(10), source: Relative(25) }, Jump { location: 13017 }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 4524 }, Load { destination: Relative(30), source_pointer: Relative(25) }, JumpIf { condition: Relative(30), location: 13129 }, Jump { location: 13023 }, Load { destination: Relative(30), source_pointer: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(30) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 13030 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 13040 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(33), rhs: Relative(1) }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, JumpIf { condition: Relative(47), location: 13040 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(33) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 13044 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(33), op: Div, bit_size: U32, lhs: Relative(44), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(33) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 13049 }, Call { location: 17854 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, BinaryIntOp { destination: Relative(33), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(50) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(33), rhs: Relative(11) }, JumpIf { condition: Relative(44), location: 13056 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(33), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Load { destination: Relative(33), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Load { destination: Relative(51), source_pointer: Relative(53) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, Not { destination: Relative(50), source: Relative(33), bit_size: U1 }, BinaryIntOp { destination: Relative(33), op: Or, bit_size: U1, lhs: Relative(51), rhs: Relative(50) }, JumpIf { condition: Relative(33), location: 13080 }, Jump { location: 13075 }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(47), rhs: Relative(9) }, JumpIf { condition: Relative(33), location: 13078 }, Jump { location: 13090 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Jump { location: 13090 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Load { destination: Relative(33), source_pointer: Relative(3) }, Load { destination: Relative(37), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: LessThanEquals, bit_size: U32, lhs: Relative(37), rhs: Relative(47) }, JumpIf { condition: Relative(50), location: 13087 }, Call { location: 17854 }, Store { destination_pointer: Relative(3), source: Relative(33) }, Store { destination_pointer: Relative(8), source: Relative(47) }, Jump { location: 13090 }, Load { destination: Relative(33), source_pointer: Relative(30) }, JumpIf { condition: Relative(33), location: 13093 }, Jump { location: 13129 }, Load { destination: Relative(30), source_pointer: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Store { destination_pointer: Relative(50), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, Store { destination_pointer: Relative(47), source: Relative(9) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Store { destination_pointer: Relative(47), source: Relative(10) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(30) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Store { destination_pointer: Relative(3), source: Relative(37) }, Store { destination_pointer: Relative(8), source: Relative(33) }, Store { destination_pointer: Relative(25), source: Direct(32840) }, Jump { location: 13129 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 4458 }, Load { destination: Relative(2), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(30), location: 13136 }, Jump { location: 13159 }, Load { destination: Relative(2), source_pointer: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(37) }, Load { destination: Relative(33), source_pointer: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryFieldOp { destination: Relative(52), op: Add, lhs: Relative(50), rhs: Relative(51) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Store { destination_pointer: Relative(53), source: Relative(52) }, Store { destination_pointer: Relative(25), source: Relative(2) }, Store { destination_pointer: Relative(37), source: Relative(50) }, Store { destination_pointer: Relative(44), source: Relative(33) }, Store { destination_pointer: Relative(45), source: Relative(47) }, Jump { location: 13159 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 4422 }, Load { destination: Relative(30), source_pointer: Relative(25) }, JumpIf { condition: Relative(30), location: 13271 }, Jump { location: 13165 }, Load { destination: Relative(30), source_pointer: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(30) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 13172 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 13182 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(33), rhs: Relative(1) }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, JumpIf { condition: Relative(47), location: 13182 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(33) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 13186 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(33), op: Div, bit_size: U32, lhs: Relative(44), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(33) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 13191 }, Call { location: 17854 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, BinaryIntOp { destination: Relative(33), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(50) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(33), rhs: Relative(11) }, JumpIf { condition: Relative(44), location: 13198 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(33), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Load { destination: Relative(33), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Load { destination: Relative(51), source_pointer: Relative(53) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, Not { destination: Relative(50), source: Relative(33), bit_size: U1 }, BinaryIntOp { destination: Relative(33), op: Or, bit_size: U1, lhs: Relative(51), rhs: Relative(50) }, JumpIf { condition: Relative(33), location: 13222 }, Jump { location: 13217 }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(47), rhs: Relative(43) }, JumpIf { condition: Relative(33), location: 13220 }, Jump { location: 13232 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Jump { location: 13232 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Load { destination: Relative(33), source_pointer: Relative(3) }, Load { destination: Relative(37), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: LessThanEquals, bit_size: U32, lhs: Relative(37), rhs: Relative(47) }, JumpIf { condition: Relative(50), location: 13229 }, Call { location: 17854 }, Store { destination_pointer: Relative(3), source: Relative(33) }, Store { destination_pointer: Relative(8), source: Relative(47) }, Jump { location: 13232 }, Load { destination: Relative(33), source_pointer: Relative(30) }, JumpIf { condition: Relative(33), location: 13235 }, Jump { location: 13271 }, Load { destination: Relative(30), source_pointer: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Store { destination_pointer: Relative(50), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, Store { destination_pointer: Relative(47), source: Relative(43) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Store { destination_pointer: Relative(47), source: Relative(42) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(30) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Store { destination_pointer: Relative(3), source: Relative(37) }, Store { destination_pointer: Relative(8), source: Relative(33) }, Store { destination_pointer: Relative(25), source: Direct(32840) }, Jump { location: 13271 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 4355 }, Load { destination: Relative(2), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(30), location: 13278 }, Jump { location: 13301 }, Load { destination: Relative(2), source_pointer: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(37) }, Load { destination: Relative(33), source_pointer: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryFieldOp { destination: Relative(52), op: Add, lhs: Relative(50), rhs: Relative(51) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Store { destination_pointer: Relative(53), source: Relative(52) }, Store { destination_pointer: Relative(25), source: Relative(2) }, Store { destination_pointer: Relative(37), source: Relative(50) }, Store { destination_pointer: Relative(44), source: Relative(33) }, Store { destination_pointer: Relative(45), source: Relative(47) }, Jump { location: 13301 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 4319 }, Load { destination: Relative(30), source_pointer: Relative(25) }, JumpIf { condition: Relative(30), location: 13413 }, Jump { location: 13307 }, Load { destination: Relative(30), source_pointer: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(30) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(33) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 13314 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(33), op: Add, bit_size: U32, lhs: Relative(33), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 13324 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(33), rhs: Relative(1) }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, JumpIf { condition: Relative(47), location: 13324 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(33) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 13328 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(33), op: Div, bit_size: U32, lhs: Relative(44), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(33) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 13333 }, Call { location: 17854 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, BinaryIntOp { destination: Relative(33), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(50) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(33), rhs: Relative(11) }, JumpIf { condition: Relative(44), location: 13340 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(33), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Load { destination: Relative(33), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Load { destination: Relative(51), source_pointer: Relative(53) }, Mov { destination: Relative(30), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(30), source: Relative(5) }, Not { destination: Relative(50), source: Relative(33), bit_size: U1 }, BinaryIntOp { destination: Relative(33), op: Or, bit_size: U1, lhs: Relative(51), rhs: Relative(50) }, JumpIf { condition: Relative(33), location: 13364 }, Jump { location: 13359 }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(47), rhs: Relative(46) }, JumpIf { condition: Relative(33), location: 13362 }, Jump { location: 13374 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Jump { location: 13374 }, Store { destination_pointer: Relative(30), source: Direct(32840) }, Load { destination: Relative(33), source_pointer: Relative(3) }, Load { destination: Relative(37), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: LessThanEquals, bit_size: U32, lhs: Relative(37), rhs: Relative(47) }, JumpIf { condition: Relative(50), location: 13371 }, Call { location: 17854 }, Store { destination_pointer: Relative(3), source: Relative(33) }, Store { destination_pointer: Relative(8), source: Relative(47) }, Jump { location: 13374 }, Load { destination: Relative(33), source_pointer: Relative(30) }, JumpIf { condition: Relative(33), location: 13377 }, Jump { location: 13413 }, Load { destination: Relative(30), source_pointer: Relative(3) }, Load { destination: Relative(33), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Store { destination_pointer: Relative(50), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(30), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, Store { destination_pointer: Relative(47), source: Relative(46) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Store { destination_pointer: Relative(47), source: Relative(38) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(30) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Store { destination_pointer: Relative(3), source: Relative(37) }, Store { destination_pointer: Relative(8), source: Relative(33) }, Store { destination_pointer: Relative(25), source: Direct(32840) }, Jump { location: 13413 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 4252 }, Load { destination: Relative(2), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(30), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(30), location: 13420 }, Jump { location: 13443 }, Load { destination: Relative(2), source_pointer: Relative(25) }, Load { destination: Relative(30), source_pointer: Relative(33) }, Load { destination: Relative(45), source_pointer: Relative(37) }, Load { destination: Relative(47), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryFieldOp { destination: Relative(52), op: Add, lhs: Relative(50), rhs: Relative(51) }, Mov { destination: Direct(32771), source: Relative(30) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Store { destination_pointer: Relative(53), source: Relative(52) }, Store { destination_pointer: Relative(25), source: Relative(2) }, Store { destination_pointer: Relative(33), source: Relative(50) }, Store { destination_pointer: Relative(37), source: Relative(45) }, Store { destination_pointer: Relative(44), source: Relative(47) }, Jump { location: 13443 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 4216 }, Load { destination: Relative(25), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(30) }, Load { destination: Relative(33), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(37) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(30) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(37) }, Load { destination: Relative(30), source_pointer: Relative(50) }, BinaryFieldOp { destination: Relative(37), op: Equals, lhs: Relative(33), rhs: Relative(45) }, BinaryFieldOp { destination: Relative(33), op: Equals, lhs: Relative(44), rhs: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U1, lhs: Relative(37), rhs: Relative(33) }, BinaryIntOp { destination: Relative(33), op: Mul, bit_size: U1, lhs: Relative(25), rhs: Relative(30) }, Store { destination_pointer: Relative(8), source: Relative(33) }, BinaryIntOp { destination: Relative(25), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(25) }, Jump { location: 4089 }, Load { destination: Relative(30), source_pointer: Relative(25) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(1) }, Load { destination: Relative(33), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, Load { destination: Relative(37), source_pointer: Relative(45) }, BinaryFieldOp { destination: Relative(44), op: Equals, lhs: Relative(33), rhs: Relative(37) }, BinaryIntOp { destination: Relative(33), op: Mul, bit_size: U1, lhs: Relative(30), rhs: Relative(44) }, Store { destination_pointer: Relative(25), source: Relative(33) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 4053 }, Load { destination: Relative(30), source_pointer: Relative(33) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, Load { destination: Relative(37), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(25), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryFieldOp { destination: Relative(45), op: Equals, lhs: Relative(37), rhs: Relative(44) }, BinaryIntOp { destination: Relative(37), op: Mul, bit_size: U1, lhs: Relative(30), rhs: Relative(45) }, Store { destination_pointer: Relative(33), source: Relative(37) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 4023 }, Load { destination: Relative(30), source_pointer: Relative(45) }, Const { destination: Relative(33), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(33), rhs: Relative(30) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 13501 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(30) }, Load { destination: Relative(37), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(30), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(30), source_pointer: Relative(50) }, Load { destination: Relative(44), source_pointer: Relative(25) }, Load { destination: Relative(47), source_pointer: Relative(3) }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(47), rhs: Direct(32837) }, JumpIf { condition: Relative(50), location: 13516 }, Call { location: 17885 }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Store { destination_pointer: Relative(53), source: Relative(37) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(51) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(37) }, Store { destination_pointer: Relative(52), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(37), op: LessThanEquals, bit_size: U32, lhs: Relative(47), rhs: Relative(30) }, JumpIf { condition: Relative(37), location: 13536 }, Call { location: 17854 }, Store { destination_pointer: Relative(25), source: Relative(44) }, Store { destination_pointer: Relative(3), source: Relative(30) }, BinaryIntOp { destination: Relative(30), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(30) }, Jump { location: 3966 }, BinaryIntOp { destination: Relative(47), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(47) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(52) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(52) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(52) }, Load { destination: Relative(47), source_pointer: Relative(56) }, Not { destination: Relative(52), source: Relative(47), bit_size: U1 }, BinaryIntOp { destination: Relative(47), op: Mul, bit_size: U1, lhs: Relative(52), rhs: Relative(51) }, JumpIf { condition: Relative(47), location: 13561 }, Jump { location: 13589 }, Load { destination: Relative(47), source_pointer: Relative(50) }, Load { destination: Relative(51), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(52), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Relative(11) }, JumpIf { condition: Relative(52), location: 13566 }, Call { location: 17885 }, BinaryIntOp { destination: Relative(52), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Direct(32842) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(55), source: Direct(32773) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Direct(2) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(56), rhs: Relative(52) }, Store { destination_pointer: Relative(57), source: Relative(53) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(55) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 17 }, Call { location: 17860 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(47) }, Store { destination_pointer: Relative(56), source: Relative(54) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(47) }, JumpIf { condition: Relative(53), location: 13586 }, Call { location: 17854 }, Store { destination_pointer: Relative(50), source: Relative(52) }, Store { destination_pointer: Relative(7), source: Relative(47) }, Jump { location: 13589 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(47) }, Jump { location: 3724 }, Load { destination: Relative(45), source_pointer: Relative(8) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Not { destination: Relative(52), source: Relative(52), bit_size: U1 }, JumpIf { condition: Relative(52), location: 13598 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(45) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(53) }, Load { destination: Relative(52), source_pointer: Relative(51) }, Load { destination: Relative(53), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(53), rhs: Direct(32837) }, JumpIf { condition: Relative(54), location: 13608 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(52) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 17860 }, Mov { destination: Relative(54), source: Direct(32773) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Store { destination_pointer: Relative(56), source: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(52), op: LessThanEquals, bit_size: U32, lhs: Relative(53), rhs: Relative(45) }, JumpIf { condition: Relative(52), location: 13619 }, Call { location: 17854 }, Store { destination_pointer: Relative(51), source: Relative(54) }, Store { destination_pointer: Relative(47), source: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(45) }, Jump { location: 3636 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(45) }, Load { destination: Relative(49), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(51) }, Load { destination: Relative(45), source_pointer: Relative(55) }, Not { destination: Relative(51), source: Relative(45), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U1, lhs: Relative(51), rhs: Relative(49) }, JumpIf { condition: Relative(45), location: 13640 }, Jump { location: 13659 }, Load { destination: Relative(45), source_pointer: Relative(52) }, Load { destination: Relative(49), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(51), op: LessThan, bit_size: U32, lhs: Relative(49), rhs: Relative(11) }, JumpIf { condition: Relative(51), location: 13645 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 17860 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(49) }, Store { destination_pointer: Relative(55), source: Relative(53) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(49), rhs: Relative(45) }, JumpIf { condition: Relative(53), location: 13656 }, Call { location: 17854 }, Store { destination_pointer: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(50), source: Relative(45) }, Jump { location: 13659 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(45) }, Jump { location: 3402 }, Load { destination: Relative(45), source_pointer: Relative(2) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 13668 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(45) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(45), source_pointer: Relative(51) }, Load { destination: Relative(50), source_pointer: Relative(49) }, Load { destination: Relative(51), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(52), op: LessThan, bit_size: U32, lhs: Relative(51), rhs: Direct(32837) }, JumpIf { condition: Relative(52), location: 13678 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 17860 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Store { destination_pointer: Relative(54), source: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: LessThanEquals, bit_size: U32, lhs: Relative(51), rhs: Relative(45) }, JumpIf { condition: Relative(50), location: 13689 }, Call { location: 17854 }, Store { destination_pointer: Relative(49), source: Relative(52) }, Store { destination_pointer: Relative(8), source: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(45) }, Jump { location: 3322 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(45) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Load { destination: Relative(45), source_pointer: Relative(52) }, Not { destination: Relative(49), source: Relative(45), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U1, lhs: Relative(49), rhs: Relative(48) }, JumpIf { condition: Relative(45), location: 13710 }, Jump { location: 13729 }, Load { destination: Relative(45), source_pointer: Relative(47) }, Load { destination: Relative(48), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(49), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(11) }, JumpIf { condition: Relative(49), location: 13715 }, Call { location: 17885 }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 9 }, Call { location: 17860 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Store { destination_pointer: Relative(52), source: Relative(50) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: LessThanEquals, bit_size: U32, lhs: Relative(48), rhs: Relative(45) }, JumpIf { condition: Relative(50), location: 13726 }, Call { location: 17854 }, Store { destination_pointer: Relative(47), source: Relative(49) }, Store { destination_pointer: Relative(44), source: Relative(45) }, Jump { location: 13729 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(45) }, Jump { location: 3091 }, Load { destination: Relative(44), source_pointer: Relative(8) }, JumpIf { condition: Relative(44), location: 13841 }, Jump { location: 13735 }, Load { destination: Relative(44), source_pointer: Relative(3) }, Load { destination: Relative(45), source_pointer: Relative(44) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 13742 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 13752 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(50), location: 13752 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 13756 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(48), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(45) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 13761 }, Call { location: 17854 }, Const { destination: Relative(49), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(49) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, BinaryIntOp { destination: Relative(45), op: Sub, bit_size: U32, lhs: Relative(48), rhs: Relative(51) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(45), rhs: Relative(11) }, JumpIf { condition: Relative(48), location: 13768 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(54) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Not { destination: Relative(51), source: Relative(45), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Or, bit_size: U1, lhs: Relative(52), rhs: Relative(51) }, JumpIf { condition: Relative(45), location: 13792 }, Jump { location: 13787 }, BinaryFieldOp { destination: Relative(45), op: Equals, lhs: Relative(50), rhs: Relative(9) }, JumpIf { condition: Relative(45), location: 13790 }, Jump { location: 13802 }, Store { destination_pointer: Relative(44), source: Direct(32840) }, Jump { location: 13802 }, Store { destination_pointer: Relative(44), source: Direct(32840) }, Load { destination: Relative(45), source_pointer: Relative(3) }, Load { destination: Relative(47), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(47), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 13799 }, Call { location: 17854 }, Store { destination_pointer: Relative(3), source: Relative(45) }, Store { destination_pointer: Relative(7), source: Relative(50) }, Jump { location: 13802 }, Load { destination: Relative(45), source_pointer: Relative(44) }, JumpIf { condition: Relative(45), location: 13805 }, Jump { location: 13841 }, Load { destination: Relative(44), source_pointer: Relative(3) }, Load { destination: Relative(45), source_pointer: Relative(7) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(48) }, Store { destination_pointer: Relative(51), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(49) }, Store { destination_pointer: Relative(50), source: Relative(9) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Store { destination_pointer: Relative(50), source: Relative(10) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(44) }, Store { destination_pointer: Relative(50), source: Relative(5) }, Store { destination_pointer: Relative(3), source: Relative(47) }, Store { destination_pointer: Relative(7), source: Relative(45) }, Store { destination_pointer: Relative(8), source: Direct(32840) }, Jump { location: 13841 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(44) }, Jump { location: 3041 }, Load { destination: Relative(2), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(44), location: 13848 }, Jump { location: 13871 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(44), source_pointer: Relative(47) }, Load { destination: Relative(45), source_pointer: Relative(48) }, Load { destination: Relative(50), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(1) }, Load { destination: Relative(52), source_pointer: Relative(54) }, BinaryFieldOp { destination: Relative(53), op: Add, lhs: Relative(51), rhs: Relative(52) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(51), source: Direct(32773) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, Store { destination_pointer: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Store { destination_pointer: Relative(47), source: Relative(51) }, Store { destination_pointer: Relative(48), source: Relative(45) }, Store { destination_pointer: Relative(49), source: Relative(50) }, Jump { location: 13871 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 3005 }, Load { destination: Relative(44), source_pointer: Relative(8) }, JumpIf { condition: Relative(44), location: 13983 }, Jump { location: 13877 }, Load { destination: Relative(44), source_pointer: Relative(3) }, Load { destination: Relative(45), source_pointer: Relative(44) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 13884 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(45) }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 13894 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, JumpIf { condition: Relative(50), location: 13894 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 13898 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(48), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(45) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 13903 }, Call { location: 17854 }, Const { destination: Relative(49), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(49) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, BinaryIntOp { destination: Relative(45), op: Sub, bit_size: U32, lhs: Relative(48), rhs: Relative(51) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(45), rhs: Relative(11) }, JumpIf { condition: Relative(48), location: 13910 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(54) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Not { destination: Relative(51), source: Relative(45), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Or, bit_size: U1, lhs: Relative(52), rhs: Relative(51) }, JumpIf { condition: Relative(45), location: 13934 }, Jump { location: 13929 }, BinaryFieldOp { destination: Relative(45), op: Equals, lhs: Relative(50), rhs: Relative(43) }, JumpIf { condition: Relative(45), location: 13932 }, Jump { location: 13944 }, Store { destination_pointer: Relative(44), source: Direct(32840) }, Jump { location: 13944 }, Store { destination_pointer: Relative(44), source: Direct(32840) }, Load { destination: Relative(45), source_pointer: Relative(3) }, Load { destination: Relative(47), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(47), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 13941 }, Call { location: 17854 }, Store { destination_pointer: Relative(3), source: Relative(45) }, Store { destination_pointer: Relative(7), source: Relative(50) }, Jump { location: 13944 }, Load { destination: Relative(45), source_pointer: Relative(44) }, JumpIf { condition: Relative(45), location: 13947 }, Jump { location: 13983 }, Load { destination: Relative(44), source_pointer: Relative(3) }, Load { destination: Relative(45), source_pointer: Relative(7) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(48) }, Store { destination_pointer: Relative(51), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(49) }, Store { destination_pointer: Relative(50), source: Relative(43) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Store { destination_pointer: Relative(50), source: Relative(42) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(44) }, Store { destination_pointer: Relative(50), source: Relative(5) }, Store { destination_pointer: Relative(3), source: Relative(47) }, Store { destination_pointer: Relative(7), source: Relative(45) }, Store { destination_pointer: Relative(8), source: Direct(32840) }, Jump { location: 13983 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(44) }, Jump { location: 2938 }, Load { destination: Relative(2), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(42), location: 13990 }, Jump { location: 14013 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(42), source_pointer: Relative(45) }, Load { destination: Relative(44), source_pointer: Relative(47) }, Load { destination: Relative(49), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(1) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryFieldOp { destination: Relative(52), op: Add, lhs: Relative(50), rhs: Relative(51) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Store { destination_pointer: Relative(53), source: Relative(52) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Store { destination_pointer: Relative(45), source: Relative(50) }, Store { destination_pointer: Relative(47), source: Relative(44) }, Store { destination_pointer: Relative(48), source: Relative(49) }, Jump { location: 14013 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2901 }, Load { destination: Relative(42), source_pointer: Relative(8) }, JumpIf { condition: Relative(42), location: 14125 }, Jump { location: 14019 }, Load { destination: Relative(42), source_pointer: Relative(3) }, Load { destination: Relative(44), source_pointer: Relative(42) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 14026 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, JumpIf { condition: Relative(47), location: 14036 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(1) }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, JumpIf { condition: Relative(49), location: 14036 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(47) }, JumpIf { condition: Relative(48), location: 14040 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(47), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, BinaryIntOp { destination: Relative(48), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(47) }, JumpIf { condition: Relative(48), location: 14045 }, Call { location: 17854 }, Const { destination: Relative(48), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(49), op: Div, bit_size: U32, lhs: Relative(47), rhs: Relative(48) }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, BinaryIntOp { destination: Relative(44), op: Sub, bit_size: U32, lhs: Relative(47), rhs: Relative(50) }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(44), rhs: Relative(11) }, JumpIf { condition: Relative(47), location: 14052 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(47), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(47) }, Load { destination: Relative(44), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(48) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Load { destination: Relative(51), source_pointer: Relative(53) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(5) }, Not { destination: Relative(50), source: Relative(44), bit_size: U1 }, BinaryIntOp { destination: Relative(44), op: Or, bit_size: U1, lhs: Relative(51), rhs: Relative(50) }, JumpIf { condition: Relative(44), location: 14076 }, Jump { location: 14071 }, BinaryFieldOp { destination: Relative(44), op: Equals, lhs: Relative(49), rhs: Relative(46) }, JumpIf { condition: Relative(44), location: 14074 }, Jump { location: 14086 }, Store { destination_pointer: Relative(42), source: Direct(32840) }, Jump { location: 14086 }, Store { destination_pointer: Relative(42), source: Direct(32840) }, Load { destination: Relative(44), source_pointer: Relative(3) }, Load { destination: Relative(45), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(50), op: LessThanEquals, bit_size: U32, lhs: Relative(45), rhs: Relative(49) }, JumpIf { condition: Relative(50), location: 14083 }, Call { location: 17854 }, Store { destination_pointer: Relative(3), source: Relative(44) }, Store { destination_pointer: Relative(7), source: Relative(49) }, Jump { location: 14086 }, Load { destination: Relative(44), source_pointer: Relative(42) }, JumpIf { condition: Relative(44), location: 14089 }, Jump { location: 14125 }, Load { destination: Relative(42), source_pointer: Relative(3) }, Load { destination: Relative(44), source_pointer: Relative(7) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Store { destination_pointer: Relative(50), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(48) }, Store { destination_pointer: Relative(49), source: Relative(46) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(45) }, Store { destination_pointer: Relative(49), source: Relative(38) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, Store { destination_pointer: Relative(49), source: Relative(5) }, Store { destination_pointer: Relative(3), source: Relative(45) }, Store { destination_pointer: Relative(7), source: Relative(44) }, Store { destination_pointer: Relative(8), source: Direct(32840) }, Jump { location: 14125 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(42) }, Jump { location: 2834 }, Load { destination: Relative(2), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(38), location: 14132 }, Jump { location: 14155 }, Load { destination: Relative(2), source_pointer: Relative(8) }, Load { destination: Relative(38), source_pointer: Relative(42) }, Load { destination: Relative(47), source_pointer: Relative(44) }, Load { destination: Relative(48), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryFieldOp { destination: Relative(51), op: Add, lhs: Relative(49), rhs: Relative(50) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Store { destination_pointer: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(8), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(49) }, Store { destination_pointer: Relative(44), source: Relative(47) }, Store { destination_pointer: Relative(45), source: Relative(48) }, Jump { location: 14155 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2797 }, Load { destination: Relative(38), source_pointer: Relative(8) }, JumpIf { condition: Relative(38), location: 14215 }, Jump { location: 14161 }, Load { destination: Relative(38), source_pointer: Relative(2) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(38) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 14167 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 14177 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(38), rhs: Relative(1) }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, JumpIf { condition: Relative(47), location: 14177 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(38) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 14181 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(38), op: Div, bit_size: U32, lhs: Relative(44), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(38) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(7), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 14186 }, Call { location: 17854 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, BinaryIntOp { destination: Relative(38), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(48) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(38), rhs: Relative(11) }, JumpIf { condition: Relative(44), location: 14193 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(38), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Load { destination: Relative(38), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(45) }, Load { destination: Relative(44), source_pointer: Relative(49) }, Not { destination: Relative(45), source: Relative(44), bit_size: U1 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U1, lhs: Relative(45), rhs: Relative(38) }, JumpIf { condition: Relative(44), location: 14209 }, Jump { location: 14215 }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(47), rhs: Relative(46) }, JumpIf { condition: Relative(38), location: 14212 }, Jump { location: 14215 }, Store { destination_pointer: Relative(3), source: Direct(32840) }, Store { destination_pointer: Relative(8), source: Direct(32840) }, Jump { location: 14215 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(38) }, Jump { location: 2669 }, Load { destination: Relative(7), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(8), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(7) }, JumpIf { condition: Relative(8), location: 14222 }, Jump { location: 14245 }, Load { destination: Relative(7), source_pointer: Relative(42) }, Load { destination: Relative(8), source_pointer: Relative(44) }, Load { destination: Relative(38), source_pointer: Relative(45) }, Load { destination: Relative(48), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryFieldOp { destination: Relative(51), op: Add, lhs: Relative(49), rhs: Relative(50) }, Mov { destination: Direct(32771), source: Relative(8) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Store { destination_pointer: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(42), source: Relative(7) }, Store { destination_pointer: Relative(44), source: Relative(49) }, Store { destination_pointer: Relative(45), source: Relative(38) }, Store { destination_pointer: Relative(47), source: Relative(48) }, Jump { location: 14245 }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(7) }, Jump { location: 2633 }, Load { destination: Relative(2), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(3), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, Load { destination: Relative(38), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(42) }, Load { destination: Relative(44), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(45) }, Load { destination: Relative(48), source_pointer: Relative(50) }, Not { destination: Relative(2), source: Relative(48), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U1, lhs: Relative(2), rhs: Relative(38) }, JumpIf { condition: Relative(45), location: 14269 }, Jump { location: 14312 }, BinaryFieldOp { destination: Relative(2), op: Mul, lhs: Relative(44), rhs: Relative(47) }, BinaryFieldOp { destination: Relative(45), op: Equals, lhs: Relative(2), rhs: Direct(32843) }, JumpIf { condition: Relative(45), location: 14312 }, Jump { location: 14273 }, Load { destination: Relative(2), source_pointer: Relative(7) }, Load { destination: Relative(45), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Sub, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(45) }, JumpIf { condition: Relative(49), location: 14279 }, Call { location: 17882 }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(3) }, Store { destination_pointer: Relative(50), source: Relative(38) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(2), source: Direct(32773) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(3), rhs: Relative(42) }, Store { destination_pointer: Relative(38), source: Relative(44) }, BinaryIntOp { destination: Relative(3), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(2) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(38), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(3) }, Store { destination_pointer: Relative(44), source: Relative(47) }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(3), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(2) }, Store { destination_pointer: Relative(44), source: Direct(32840) }, Store { destination_pointer: Relative(7), source: Relative(3) }, Store { destination_pointer: Relative(8), source: Relative(48) }, Jump { location: 14312 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2568 }, Load { destination: Relative(38), source_pointer: Relative(3) }, JumpIf { condition: Relative(38), location: 14424 }, Jump { location: 14318 }, Load { destination: Relative(38), source_pointer: Relative(7) }, Load { destination: Relative(42), source_pointer: Relative(38) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 14325 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, JumpIf { condition: Relative(45), location: 14335 }, BinaryIntOp { destination: Relative(49), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(1) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 14335 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, JumpIf { condition: Relative(47), location: 14339 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(42), op: Div, bit_size: U32, lhs: Relative(45), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(45) }, JumpIf { condition: Relative(47), location: 14344 }, Call { location: 17854 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, BinaryIntOp { destination: Relative(49), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Relative(47) }, BinaryIntOp { destination: Relative(42), op: Sub, bit_size: U32, lhs: Relative(45), rhs: Relative(49) }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(11) }, JumpIf { condition: Relative(45), location: 14351 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Load { destination: Relative(42), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Mov { destination: Relative(38), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, Not { destination: Relative(49), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(42), op: Or, bit_size: U1, lhs: Relative(50), rhs: Relative(49) }, JumpIf { condition: Relative(42), location: 14375 }, Jump { location: 14370 }, BinaryFieldOp { destination: Relative(42), op: Equals, lhs: Relative(48), rhs: Relative(9) }, JumpIf { condition: Relative(42), location: 14373 }, Jump { location: 14385 }, Store { destination_pointer: Relative(38), source: Direct(32840) }, Jump { location: 14385 }, Store { destination_pointer: Relative(38), source: Direct(32840) }, Load { destination: Relative(42), source_pointer: Relative(7) }, Load { destination: Relative(44), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(44), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 14382 }, Call { location: 17854 }, Store { destination_pointer: Relative(7), source: Relative(42) }, Store { destination_pointer: Relative(8), source: Relative(48) }, Jump { location: 14385 }, Load { destination: Relative(42), source_pointer: Relative(38) }, JumpIf { condition: Relative(42), location: 14388 }, Jump { location: 14424 }, Load { destination: Relative(38), source_pointer: Relative(7) }, Load { destination: Relative(42), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(45) }, Store { destination_pointer: Relative(49), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(38), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, Store { destination_pointer: Relative(48), source: Relative(9) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Store { destination_pointer: Relative(48), source: Relative(43) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(38) }, Store { destination_pointer: Relative(48), source: Relative(5) }, Store { destination_pointer: Relative(7), source: Relative(44) }, Store { destination_pointer: Relative(8), source: Relative(42) }, Store { destination_pointer: Relative(3), source: Direct(32840) }, Jump { location: 14424 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(38) }, Jump { location: 2563 }, Load { destination: Relative(2), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(38), location: 14431 }, Jump { location: 14454 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(38), source_pointer: Relative(44) }, Load { destination: Relative(42), source_pointer: Relative(45) }, Load { destination: Relative(48), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(1) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryFieldOp { destination: Relative(51), op: Add, lhs: Relative(49), rhs: Relative(50) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Store { destination_pointer: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(44), source: Relative(49) }, Store { destination_pointer: Relative(45), source: Relative(42) }, Store { destination_pointer: Relative(47), source: Relative(48) }, Jump { location: 14454 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2527 }, Load { destination: Relative(38), source_pointer: Relative(3) }, JumpIf { condition: Relative(38), location: 14566 }, Jump { location: 14460 }, Load { destination: Relative(38), source_pointer: Relative(7) }, Load { destination: Relative(42), source_pointer: Relative(38) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 14467 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, JumpIf { condition: Relative(45), location: 14477 }, BinaryIntOp { destination: Relative(49), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(1) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(1) }, JumpIf { condition: Relative(48), location: 14477 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(42) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, JumpIf { condition: Relative(47), location: 14481 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(42), op: Div, bit_size: U32, lhs: Relative(45), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(45) }, JumpIf { condition: Relative(47), location: 14486 }, Call { location: 17854 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, BinaryIntOp { destination: Relative(49), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Relative(47) }, BinaryIntOp { destination: Relative(42), op: Sub, bit_size: U32, lhs: Relative(45), rhs: Relative(49) }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(11) }, JumpIf { condition: Relative(45), location: 14493 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Load { destination: Relative(42), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Mov { destination: Relative(38), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, Not { destination: Relative(49), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(42), op: Or, bit_size: U1, lhs: Relative(50), rhs: Relative(49) }, JumpIf { condition: Relative(42), location: 14517 }, Jump { location: 14512 }, BinaryFieldOp { destination: Relative(42), op: Equals, lhs: Relative(48), rhs: Relative(46) }, JumpIf { condition: Relative(42), location: 14515 }, Jump { location: 14527 }, Store { destination_pointer: Relative(38), source: Direct(32840) }, Jump { location: 14527 }, Store { destination_pointer: Relative(38), source: Direct(32840) }, Load { destination: Relative(42), source_pointer: Relative(7) }, Load { destination: Relative(44), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(44), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 14524 }, Call { location: 17854 }, Store { destination_pointer: Relative(7), source: Relative(42) }, Store { destination_pointer: Relative(8), source: Relative(48) }, Jump { location: 14527 }, Load { destination: Relative(42), source_pointer: Relative(38) }, JumpIf { condition: Relative(42), location: 14530 }, Jump { location: 14566 }, Load { destination: Relative(38), source_pointer: Relative(7) }, Load { destination: Relative(42), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(45) }, Store { destination_pointer: Relative(49), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(38), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, Store { destination_pointer: Relative(48), source: Relative(46) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(38) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Store { destination_pointer: Relative(48), source: Relative(10) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(38) }, Store { destination_pointer: Relative(48), source: Relative(5) }, Store { destination_pointer: Relative(7), source: Relative(44) }, Store { destination_pointer: Relative(8), source: Relative(42) }, Store { destination_pointer: Relative(3), source: Direct(32840) }, Jump { location: 14566 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(38) }, Jump { location: 2460 }, Load { destination: Relative(2), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(10), location: 14573 }, Jump { location: 14596 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(10), source_pointer: Relative(42) }, Load { destination: Relative(38), source_pointer: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(1) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(50), op: Add, lhs: Relative(48), rhs: Relative(49) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(1) }, Store { destination_pointer: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(48) }, Store { destination_pointer: Relative(44), source: Relative(38) }, Store { destination_pointer: Relative(45), source: Relative(47) }, Jump { location: 14596 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2423 }, Load { destination: Relative(10), source_pointer: Relative(3) }, JumpIf { condition: Relative(10), location: 14708 }, Jump { location: 14602 }, Load { destination: Relative(10), source_pointer: Relative(7) }, Load { destination: Relative(38), source_pointer: Relative(10) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(38) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 14609 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(38) }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(1) }, JumpIf { condition: Relative(44), location: 14619 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(38), rhs: Relative(1) }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, JumpIf { condition: Relative(46), location: 14619 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(38) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 14623 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(38), op: Div, bit_size: U32, lhs: Relative(44), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(38) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 14628 }, Call { location: 17854 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(46), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, BinaryIntOp { destination: Relative(47), op: Mul, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, BinaryIntOp { destination: Relative(38), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(47) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(38), rhs: Relative(11) }, JumpIf { condition: Relative(44), location: 14635 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(38), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Load { destination: Relative(38), source_pointer: Relative(46) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Load { destination: Relative(46), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Load { destination: Relative(48), source_pointer: Relative(50) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Not { destination: Relative(47), source: Relative(38), bit_size: U1 }, BinaryIntOp { destination: Relative(38), op: Or, bit_size: U1, lhs: Relative(48), rhs: Relative(47) }, JumpIf { condition: Relative(38), location: 14659 }, Jump { location: 14654 }, BinaryFieldOp { destination: Relative(38), op: Equals, lhs: Relative(46), rhs: Relative(43) }, JumpIf { condition: Relative(38), location: 14657 }, Jump { location: 14669 }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Jump { location: 14669 }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Load { destination: Relative(38), source_pointer: Relative(7) }, Load { destination: Relative(42), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(42), rhs: Relative(46) }, JumpIf { condition: Relative(47), location: 14666 }, Call { location: 17854 }, Store { destination_pointer: Relative(7), source: Relative(38) }, Store { destination_pointer: Relative(8), source: Relative(46) }, Jump { location: 14669 }, Load { destination: Relative(38), source_pointer: Relative(10) }, JumpIf { condition: Relative(38), location: 14672 }, Jump { location: 14708 }, Load { destination: Relative(10), source_pointer: Relative(7) }, Load { destination: Relative(38), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(44) }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(10), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, Store { destination_pointer: Relative(46), source: Relative(43) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(42) }, Store { destination_pointer: Relative(46), source: Relative(9) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(10) }, Store { destination_pointer: Relative(46), source: Relative(5) }, Store { destination_pointer: Relative(7), source: Relative(42) }, Store { destination_pointer: Relative(8), source: Relative(38) }, Store { destination_pointer: Relative(3), source: Direct(32840) }, Jump { location: 14708 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(10) }, Jump { location: 2355 }, Load { destination: Relative(2), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(10), location: 14715 }, Jump { location: 14738 }, Load { destination: Relative(2), source_pointer: Relative(3) }, Load { destination: Relative(10), source_pointer: Relative(9) }, Load { destination: Relative(44), source_pointer: Relative(38) }, Load { destination: Relative(45), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Load { destination: Relative(46), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryFieldOp { destination: Relative(48), op: Add, lhs: Relative(46), rhs: Relative(47) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(46), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(1) }, Store { destination_pointer: Relative(49), source: Relative(48) }, Store { destination_pointer: Relative(3), source: Relative(2) }, Store { destination_pointer: Relative(9), source: Relative(46) }, Store { destination_pointer: Relative(38), source: Relative(44) }, Store { destination_pointer: Relative(42), source: Relative(45) }, Jump { location: 14738 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2318 }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U32, lhs: Relative(7), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(9) }, Load { destination: Relative(10), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(38) }, Load { destination: Relative(42), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(38) }, Load { destination: Relative(43), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(38) }, Load { destination: Relative(9), source_pointer: Relative(45) }, Load { destination: Relative(38), source_pointer: Relative(8) }, Not { destination: Relative(44), source: Relative(9), bit_size: U1 }, BinaryIntOp { destination: Relative(9), op: Mul, bit_size: U1, lhs: Relative(44), rhs: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U1, lhs: Relative(38), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 14763 }, Jump { location: 14868 }, Load { destination: Relative(10), source_pointer: Relative(3) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(10) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 14769 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(10) }, Mov { destination: Relative(10), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(5) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Direct(32839) }, Load { destination: Relative(45), source_pointer: Relative(3) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Not { destination: Relative(47), source: Relative(47), bit_size: U1 }, JumpIf { condition: Relative(47), location: 14783 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(45) }, Load { destination: Relative(45), source_pointer: Relative(2) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 14791 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(2), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(49), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(52) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Mov { destination: Relative(53), source: Relative(52) }, Store { destination_pointer: Relative(53), source: Relative(42) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, Store { destination_pointer: Relative(53), source: Direct(32839) }, Store { destination_pointer: Relative(45), source: Relative(51) }, Store { destination_pointer: Relative(48), source: Relative(2) }, Store { destination_pointer: Relative(49), source: Direct(32841) }, Store { destination_pointer: Relative(50), source: Relative(5) }, Mov { destination: Relative(9), source: Direct(32838) }, Jump { location: 14818 }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Direct(32837) }, JumpIf { condition: Relative(38), location: 14936 }, Jump { location: 14821 }, Load { destination: Relative(38), source_pointer: Relative(45) }, Load { destination: Relative(46), source_pointer: Relative(48) }, Load { destination: Relative(47), source_pointer: Relative(49) }, Load { destination: Relative(51), source_pointer: Relative(46) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 14830 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(51) }, Mov { destination: Relative(51), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, IndirectConst { destination_pointer: Relative(51), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(53), size: Relative(54) }, output: HeapArray { pointer: Relative(55), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(45), source: Relative(38) }, Store { destination_pointer: Relative(48), source: Relative(51) }, Store { destination_pointer: Relative(49), source: Relative(47) }, Store { destination_pointer: Relative(50), source: Direct(32840) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32841) }, Load { destination: Relative(38), source_pointer: Relative(45) }, Cast { destination: Relative(46), source: Relative(38), bit_size: Integer(U32) }, Cast { destination: Relative(45), source: Relative(46), bit_size: Field }, Cast { destination: Relative(38), source: Relative(45), bit_size: Integer(U32) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Mov { destination: Relative(9), source: Direct(32838) }, Jump { location: 14854 }, BinaryIntOp { destination: Relative(46), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(11) }, JumpIf { condition: Relative(46), location: 14871 }, Jump { location: 14857 }, Load { destination: Relative(9), source_pointer: Relative(10) }, Load { destination: Relative(10), source_pointer: Relative(44) }, JumpIf { condition: Relative(9), location: 14863 }, Jump { location: 14861 }, Store { destination_pointer: Relative(8), source: Relative(5) }, Jump { location: 14868 }, BinaryFieldOp { destination: Relative(9), op: Equals, lhs: Relative(43), rhs: Relative(10) }, JumpIf { condition: Relative(9), location: 14868 }, Jump { location: 14866 }, Store { destination_pointer: Relative(8), source: Relative(5) }, Jump { location: 14868 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(7), rhs: Direct(32841) }, Mov { destination: Relative(7), source: Relative(9) }, Jump { location: 2201 }, Load { destination: Relative(46), source_pointer: Relative(45) }, JumpIf { condition: Relative(46), location: 14933 }, Jump { location: 14874 }, Load { destination: Relative(46), source_pointer: Relative(3) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 14880 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(3), source: Relative(46) }, BinaryIntOp { destination: Relative(46), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Relative(9) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(9) }, JumpIf { condition: Relative(48), location: 14890 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(46), rhs: Relative(9) }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(9) }, JumpIf { condition: Relative(50), location: 14890 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(46) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(9), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 14894 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(46), op: Div, bit_size: U32, lhs: Relative(48), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(46) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(38), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 14899 }, Call { location: 17854 }, Const { destination: Relative(49), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(49) }, BinaryIntOp { destination: Relative(51), op: Mul, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, BinaryIntOp { destination: Relative(46), op: Sub, bit_size: U32, lhs: Relative(48), rhs: Relative(51) }, BinaryIntOp { destination: Relative(48), op: LessThan, bit_size: U32, lhs: Relative(46), rhs: Relative(11) }, JumpIf { condition: Relative(48), location: 14906 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(46), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Load { destination: Relative(46), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(49) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(3), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(49) }, Load { destination: Relative(48), source_pointer: Relative(53) }, Not { destination: Relative(49), source: Relative(48), bit_size: U1 }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U1, lhs: Relative(49), rhs: Relative(46) }, JumpIf { condition: Relative(48), location: 14926 }, Jump { location: 14933 }, BinaryFieldOp { destination: Relative(46), op: Equals, lhs: Relative(50), rhs: Relative(42) }, JumpIf { condition: Relative(46), location: 14929 }, Jump { location: 14933 }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Store { destination_pointer: Relative(44), source: Relative(51) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, Jump { location: 14933 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32841) }, Mov { destination: Relative(9), source: Relative(46) }, Jump { location: 14854 }, Load { destination: Relative(38), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(46), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Relative(38) }, JumpIf { condition: Relative(46), location: 14940 }, Jump { location: 14963 }, Load { destination: Relative(38), source_pointer: Relative(45) }, Load { destination: Relative(46), source_pointer: Relative(48) }, Load { destination: Relative(47), source_pointer: Relative(49) }, Load { destination: Relative(51), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(9) }, Load { destination: Relative(52), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(9) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryFieldOp { destination: Relative(54), op: Add, lhs: Relative(52), rhs: Relative(53) }, Mov { destination: Direct(32771), source: Relative(46) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(52), source: Direct(32773) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(9) }, Store { destination_pointer: Relative(55), source: Relative(54) }, Store { destination_pointer: Relative(45), source: Relative(38) }, Store { destination_pointer: Relative(48), source: Relative(52) }, Store { destination_pointer: Relative(49), source: Relative(47) }, Store { destination_pointer: Relative(50), source: Relative(51) }, Jump { location: 14963 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32841) }, Mov { destination: Relative(9), source: Relative(38) }, Jump { location: 14818 }, Load { destination: Relative(42), source_pointer: Relative(38) }, JumpIf { condition: Relative(42), location: 15065 }, Jump { location: 14969 }, Load { destination: Relative(42), source_pointer: Relative(10) }, Load { destination: Relative(43), source_pointer: Relative(42) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 14976 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(1), rhs: Relative(1) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(1) }, JumpIf { condition: Relative(45), location: 14986 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(43), rhs: Relative(1) }, BinaryIntOp { destination: Relative(47), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(1) }, JumpIf { condition: Relative(47), location: 14986 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Relative(43) }, BinaryIntOp { destination: Relative(46), op: LessThanEquals, bit_size: U32, lhs: Relative(1), rhs: Relative(45) }, JumpIf { condition: Relative(46), location: 14990 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(43), op: Div, bit_size: U32, lhs: Relative(45), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(43) }, BinaryIntOp { destination: Relative(46), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(45) }, JumpIf { condition: Relative(46), location: 14995 }, Call { location: 17854 }, Const { destination: Relative(46), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(45), rhs: Relative(46) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, BinaryIntOp { destination: Relative(43), op: Sub, bit_size: U32, lhs: Relative(45), rhs: Relative(48) }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(43), rhs: Relative(11) }, JumpIf { condition: Relative(45), location: 15002 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(43), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Load { destination: Relative(43), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(46) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(48) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(48) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Not { destination: Relative(42), source: Relative(50), bit_size: U1 }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U1, lhs: Relative(42), rhs: Relative(43) }, JumpIf { condition: Relative(48), location: 15022 }, Jump { location: 15065 }, BinaryFieldOp { destination: Relative(42), op: Equals, lhs: Relative(47), rhs: Relative(3) }, JumpIf { condition: Relative(42), location: 15025 }, Jump { location: 15065 }, Load { destination: Relative(42), source_pointer: Relative(10) }, Load { destination: Relative(44), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(45) }, Store { destination_pointer: Relative(51), source: Relative(43) }, Mov { destination: Direct(32771), source: Relative(48) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(46) }, Store { destination_pointer: Relative(45), source: Relative(47) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(43) }, Store { destination_pointer: Relative(47), source: Relative(49) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(43), source: Direct(32773) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(42) }, Store { destination_pointer: Relative(47), source: Direct(32840) }, BinaryIntOp { destination: Relative(42), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 15061 }, Call { location: 17882 }, Store { destination_pointer: Relative(10), source: Relative(43) }, Store { destination_pointer: Relative(9), source: Relative(42) }, Store { destination_pointer: Relative(38), source: Direct(32840) }, Jump { location: 15065 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(42) }, Jump { location: 2140 }, Load { destination: Relative(2), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(43), op: LessThan, bit_size: U32, lhs: Relative(1), rhs: Relative(2) }, JumpIf { condition: Relative(43), location: 15072 }, Jump { location: 15095 }, Load { destination: Relative(2), source_pointer: Relative(38) }, Load { destination: Relative(43), source_pointer: Relative(42) }, Load { destination: Relative(46), source_pointer: Relative(44) }, Load { destination: Relative(47), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(1) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(1) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryFieldOp { destination: Relative(50), op: Add, lhs: Relative(48), rhs: Relative(49) }, Mov { destination: Direct(32771), source: Relative(43) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(48), source: Direct(32773) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(1) }, Store { destination_pointer: Relative(51), source: Relative(50) }, Store { destination_pointer: Relative(38), source: Relative(2) }, Store { destination_pointer: Relative(42), source: Relative(48) }, Store { destination_pointer: Relative(44), source: Relative(46) }, Store { destination_pointer: Relative(45), source: Relative(47) }, Jump { location: 15095 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(32841) }, Mov { destination: Relative(1), source: Relative(2) }, Jump { location: 2104 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Load { destination: Relative(46), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(47) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(47) }, Load { destination: Relative(45), source_pointer: Relative(51) }, Load { destination: Relative(47), source_pointer: Relative(44) }, Not { destination: Relative(50), source: Relative(45), bit_size: U1 }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U1, lhs: Relative(50), rhs: Relative(46) }, BinaryIntOp { destination: Relative(46), op: Mul, bit_size: U1, lhs: Relative(47), rhs: Relative(45) }, JumpIf { condition: Relative(46), location: 15120 }, Jump { location: 15225 }, Load { destination: Relative(46), source_pointer: Relative(38) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 15126 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(46) }, Mov { destination: Relative(46), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(5) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, Load { destination: Relative(51), source_pointer: Relative(38) }, Const { destination: Relative(52), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(53), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, Not { destination: Relative(53), source: Relative(53), bit_size: U1 }, JumpIf { condition: Relative(53), location: 15140 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(51) }, Load { destination: Relative(51), source_pointer: Relative(43) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 15148 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(51) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(54), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(55), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(56), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(58) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Mov { destination: Relative(59), source: Relative(58) }, Store { destination_pointer: Relative(59), source: Relative(48) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Direct(32839) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(59), rhs: Direct(2) }, Store { destination_pointer: Relative(59), source: Direct(32839) }, Store { destination_pointer: Relative(51), source: Relative(57) }, Store { destination_pointer: Relative(54), source: Relative(43) }, Store { destination_pointer: Relative(55), source: Direct(32841) }, Store { destination_pointer: Relative(56), source: Relative(5) }, Mov { destination: Relative(45), source: Direct(32838) }, Jump { location: 15175 }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(45), rhs: Direct(32837) }, JumpIf { condition: Relative(47), location: 15293 }, Jump { location: 15178 }, Load { destination: Relative(47), source_pointer: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(54) }, Load { destination: Relative(53), source_pointer: Relative(55) }, Load { destination: Relative(57), source_pointer: Relative(52) }, Const { destination: Relative(58), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(59), op: Equals, bit_size: U32, lhs: Relative(58), rhs: Relative(57) }, Not { destination: Relative(59), source: Relative(59), bit_size: U1 }, JumpIf { condition: Relative(59), location: 15187 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, Store { destination_pointer: Relative(52), source: Relative(57) }, Mov { destination: Relative(57), source: Direct(1) }, Const { destination: Relative(59), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(59) }, IndirectConst { destination_pointer: Relative(57), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Const { destination: Relative(60), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(59), size: Relative(60) }, output: HeapArray { pointer: Relative(61), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(51), source: Relative(47) }, Store { destination_pointer: Relative(54), source: Relative(57) }, Store { destination_pointer: Relative(55), source: Relative(53) }, Store { destination_pointer: Relative(56), source: Direct(32840) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(57), rhs: Direct(32841) }, Load { destination: Relative(47), source_pointer: Relative(51) }, Cast { destination: Relative(52), source: Relative(47), bit_size: Integer(U32) }, Cast { destination: Relative(51), source: Relative(52), bit_size: Field }, Cast { destination: Relative(47), source: Relative(51), bit_size: Integer(U32) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(51), source: Relative(5) }, Mov { destination: Relative(45), source: Direct(32838) }, Jump { location: 15211 }, BinaryIntOp { destination: Relative(52), op: LessThan, bit_size: U32, lhs: Relative(45), rhs: Relative(11) }, JumpIf { condition: Relative(52), location: 15228 }, Jump { location: 15214 }, Load { destination: Relative(45), source_pointer: Relative(46) }, Load { destination: Relative(46), source_pointer: Relative(50) }, JumpIf { condition: Relative(45), location: 15220 }, Jump { location: 15218 }, Store { destination_pointer: Relative(44), source: Relative(5) }, Jump { location: 15225 }, BinaryFieldOp { destination: Relative(45), op: Equals, lhs: Relative(49), rhs: Relative(46) }, JumpIf { condition: Relative(45), location: 15225 }, Jump { location: 15223 }, Store { destination_pointer: Relative(44), source: Relative(5) }, Jump { location: 15225 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, Mov { destination: Relative(42), source: Relative(45) }, Jump { location: 2063 }, Load { destination: Relative(52), source_pointer: Relative(51) }, JumpIf { condition: Relative(52), location: 15290 }, Jump { location: 15231 }, Load { destination: Relative(52), source_pointer: Relative(38) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 15237 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(52) }, BinaryIntOp { destination: Relative(52), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Relative(45) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(55), rhs: Relative(45) }, JumpIf { condition: Relative(54), location: 15247 }, BinaryIntOp { destination: Relative(57), op: Div, bit_size: U32, lhs: Relative(52), rhs: Relative(45) }, BinaryIntOp { destination: Relative(56), op: Equals, bit_size: U32, lhs: Relative(57), rhs: Relative(45) }, JumpIf { condition: Relative(56), location: 15247 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(52) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(45), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 15251 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(52), op: Div, bit_size: U32, lhs: Relative(54), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(52) }, BinaryIntOp { destination: Relative(55), op: LessThanEquals, bit_size: U32, lhs: Relative(47), rhs: Relative(54) }, JumpIf { condition: Relative(55), location: 15256 }, Call { location: 17854 }, Const { destination: Relative(55), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(56), op: Div, bit_size: U32, lhs: Relative(54), rhs: Relative(55) }, BinaryIntOp { destination: Relative(57), op: Mul, bit_size: U32, lhs: Relative(56), rhs: Relative(55) }, BinaryIntOp { destination: Relative(52), op: Sub, bit_size: U32, lhs: Relative(54), rhs: Relative(57) }, BinaryIntOp { destination: Relative(54), op: LessThan, bit_size: U32, lhs: Relative(52), rhs: Relative(11) }, JumpIf { condition: Relative(54), location: 15263 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U32, lhs: Relative(52), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(54) }, Load { destination: Relative(52), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(57), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(57), rhs: Relative(55) }, Load { destination: Relative(56), source_pointer: Relative(58) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(55) }, Load { destination: Relative(57), source_pointer: Relative(59) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(58), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Relative(55) }, Load { destination: Relative(54), source_pointer: Relative(59) }, Not { destination: Relative(55), source: Relative(54), bit_size: U1 }, BinaryIntOp { destination: Relative(54), op: Mul, bit_size: U1, lhs: Relative(55), rhs: Relative(52) }, JumpIf { condition: Relative(54), location: 15283 }, Jump { location: 15290 }, BinaryFieldOp { destination: Relative(52), op: Equals, lhs: Relative(56), rhs: Relative(48) }, JumpIf { condition: Relative(52), location: 15286 }, Jump { location: 15290 }, Store { destination_pointer: Relative(46), source: Direct(32840) }, Store { destination_pointer: Relative(50), source: Relative(57) }, Store { destination_pointer: Relative(51), source: Direct(32840) }, Jump { location: 15290 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Relative(45), source: Relative(52) }, Jump { location: 15211 }, Load { destination: Relative(47), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(52), op: LessThan, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, JumpIf { condition: Relative(52), location: 15297 }, Jump { location: 15320 }, Load { destination: Relative(47), source_pointer: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(54) }, Load { destination: Relative(53), source_pointer: Relative(55) }, Load { destination: Relative(57), source_pointer: Relative(56) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(45) }, Load { destination: Relative(58), source_pointer: Relative(60) }, BinaryIntOp { destination: Relative(60), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(60), rhs: Relative(45) }, Load { destination: Relative(59), source_pointer: Relative(61) }, BinaryFieldOp { destination: Relative(60), op: Add, lhs: Relative(58), rhs: Relative(59) }, Mov { destination: Direct(32771), source: Relative(52) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(58), source: Direct(32773) }, BinaryIntOp { destination: Relative(59), op: Add, bit_size: U32, lhs: Relative(58), rhs: Direct(2) }, BinaryIntOp { destination: Relative(61), op: Add, bit_size: U32, lhs: Relative(59), rhs: Relative(45) }, Store { destination_pointer: Relative(61), source: Relative(60) }, Store { destination_pointer: Relative(51), source: Relative(47) }, Store { destination_pointer: Relative(54), source: Relative(58) }, Store { destination_pointer: Relative(55), source: Relative(53) }, Store { destination_pointer: Relative(56), source: Relative(57) }, Jump { location: 15320 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Relative(45), source: Relative(47) }, Jump { location: 15175 }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Load { destination: Relative(44), source_pointer: Relative(46) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Load { destination: Relative(43), source_pointer: Relative(47) }, Load { destination: Relative(45), source_pointer: Relative(8) }, Load { destination: Relative(46), source_pointer: Relative(7) }, Load { destination: Relative(47), source_pointer: Relative(45) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(47) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 15339 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Mul, bit_size: U32, lhs: Relative(46), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(47), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(46) }, JumpIf { condition: Relative(49), location: 15346 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(46), op: LessThan, bit_size: U32, lhs: Relative(47), rhs: Relative(35) }, JumpIf { condition: Relative(46), location: 15349 }, Call { location: 17476 }, Load { destination: Relative(46), source_pointer: Relative(45) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 15355 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(46) }, Load { destination: Relative(45), source_pointer: Relative(38) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 15363 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(49), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, IndirectConst { destination_pointer: Relative(52), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(54), source: Relative(44) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Direct(32839) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Direct(32839) }, Store { destination_pointer: Relative(45), source: Relative(52) }, Store { destination_pointer: Relative(49), source: Relative(38) }, Store { destination_pointer: Relative(50), source: Direct(32841) }, Store { destination_pointer: Relative(51), source: Relative(5) }, Mov { destination: Relative(42), source: Direct(32838) }, Jump { location: 15390 }, BinaryIntOp { destination: Relative(46), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, JumpIf { condition: Relative(46), location: 15784 }, Jump { location: 15393 }, Load { destination: Relative(46), source_pointer: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(49) }, Load { destination: Relative(48), source_pointer: Relative(50) }, Load { destination: Relative(52), source_pointer: Relative(47) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 15402 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(52) }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(52), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(54), size: Relative(55) }, output: HeapArray { pointer: Relative(56), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(45), source: Relative(46) }, Store { destination_pointer: Relative(49), source: Relative(52) }, Store { destination_pointer: Relative(50), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Direct(32840) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32841) }, Load { destination: Relative(45), source_pointer: Relative(46) }, Cast { destination: Relative(47), source: Relative(45), bit_size: Integer(U32) }, Cast { destination: Relative(46), source: Relative(47), bit_size: Field }, Cast { destination: Relative(45), source: Relative(46), bit_size: Integer(U32) }, Mov { destination: Relative(46), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(5) }, Mov { destination: Relative(42), source: Direct(32838) }, Jump { location: 15426 }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(11) }, JumpIf { condition: Relative(47), location: 15672 }, Jump { location: 15429 }, Load { destination: Relative(45), source_pointer: Relative(10) }, Load { destination: Relative(46), source_pointer: Relative(9) }, Load { destination: Relative(47), source_pointer: Relative(45) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(47) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 15437 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Mul, bit_size: U32, lhs: Relative(46), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(50), op: Div, bit_size: U32, lhs: Relative(47), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(46) }, JumpIf { condition: Relative(49), location: 15444 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(46), op: LessThan, bit_size: U32, lhs: Relative(47), rhs: Relative(35) }, JumpIf { condition: Relative(46), location: 15447 }, Call { location: 17476 }, Load { destination: Relative(46), source_pointer: Relative(45) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 15453 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(46) }, Load { destination: Relative(45), source_pointer: Relative(38) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 15461 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(45) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(49), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, IndirectConst { destination_pointer: Relative(52), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(54), source: Relative(44) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Direct(32839) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Direct(32839) }, Store { destination_pointer: Relative(45), source: Relative(52) }, Store { destination_pointer: Relative(49), source: Relative(38) }, Store { destination_pointer: Relative(50), source: Direct(32841) }, Store { destination_pointer: Relative(51), source: Relative(5) }, Mov { destination: Relative(42), source: Direct(32838) }, Jump { location: 15488 }, BinaryIntOp { destination: Relative(46), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, JumpIf { condition: Relative(46), location: 15642 }, Jump { location: 15491 }, Load { destination: Relative(46), source_pointer: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(49) }, Load { destination: Relative(48), source_pointer: Relative(50) }, Load { destination: Relative(52), source_pointer: Relative(47) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 15500 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(52) }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(52), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(54), size: Relative(55) }, output: HeapArray { pointer: Relative(56), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(45), source: Relative(46) }, Store { destination_pointer: Relative(49), source: Relative(52) }, Store { destination_pointer: Relative(50), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Direct(32840) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32841) }, Load { destination: Relative(45), source_pointer: Relative(46) }, Cast { destination: Relative(47), source: Relative(45), bit_size: Integer(U32) }, Cast { destination: Relative(46), source: Relative(47), bit_size: Field }, Cast { destination: Relative(45), source: Relative(46), bit_size: Integer(U32) }, Mov { destination: Relative(46), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(5) }, Mov { destination: Relative(42), source: Direct(32838) }, Jump { location: 15524 }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(11) }, JumpIf { condition: Relative(47), location: 15530 }, Jump { location: 15527 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(42) }, Jump { location: 1981 }, Load { destination: Relative(47), source_pointer: Relative(46) }, JumpIf { condition: Relative(47), location: 15639 }, Jump { location: 15533 }, Load { destination: Relative(47), source_pointer: Relative(10) }, Load { destination: Relative(48), source_pointer: Relative(47) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 15540 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Relative(42) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(42) }, JumpIf { condition: Relative(50), location: 15550 }, BinaryIntOp { destination: Relative(53), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(42) }, JumpIf { condition: Relative(52), location: 15550 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(42), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 15554 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(50), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(48) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(45), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 15559 }, Call { location: 17854 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(52), op: Div, bit_size: U32, lhs: Relative(50), rhs: Relative(51) }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Sub, bit_size: U32, lhs: Relative(50), rhs: Relative(53) }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(11) }, JumpIf { condition: Relative(50), location: 15566 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Load { destination: Relative(48), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Load { destination: Relative(54), source_pointer: Relative(56) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Not { destination: Relative(53), source: Relative(48), bit_size: U1 }, BinaryIntOp { destination: Relative(48), op: Or, bit_size: U1, lhs: Relative(54), rhs: Relative(53) }, JumpIf { condition: Relative(48), location: 15590 }, Jump { location: 15585 }, BinaryFieldOp { destination: Relative(48), op: Equals, lhs: Relative(52), rhs: Relative(44) }, JumpIf { condition: Relative(48), location: 15588 }, Jump { location: 15600 }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Jump { location: 15600 }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Load { destination: Relative(48), source_pointer: Relative(10) }, Load { destination: Relative(49), source_pointer: Relative(9) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(49), rhs: Relative(52) }, JumpIf { condition: Relative(53), location: 15597 }, Call { location: 17854 }, Store { destination_pointer: Relative(10), source: Relative(48) }, Store { destination_pointer: Relative(9), source: Relative(52) }, Jump { location: 15600 }, Load { destination: Relative(48), source_pointer: Relative(47) }, JumpIf { condition: Relative(48), location: 15603 }, Jump { location: 15639 }, Load { destination: Relative(47), source_pointer: Relative(10) }, Load { destination: Relative(48), source_pointer: Relative(9) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Store { destination_pointer: Relative(53), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(49) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(44) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Store { destination_pointer: Relative(52), source: Relative(43) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(47) }, Store { destination_pointer: Relative(52), source: Relative(5) }, Store { destination_pointer: Relative(10), source: Relative(49) }, Store { destination_pointer: Relative(9), source: Relative(48) }, Store { destination_pointer: Relative(46), source: Direct(32840) }, Jump { location: 15639 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, Mov { destination: Relative(42), source: Relative(47) }, Jump { location: 15524 }, Load { destination: Relative(46), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(46) }, JumpIf { condition: Relative(47), location: 15646 }, Jump { location: 15669 }, Load { destination: Relative(46), source_pointer: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(49) }, Load { destination: Relative(48), source_pointer: Relative(50) }, Load { destination: Relative(52), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(42) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryFieldOp { destination: Relative(55), op: Add, lhs: Relative(53), rhs: Relative(54) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Store { destination_pointer: Relative(56), source: Relative(55) }, Store { destination_pointer: Relative(45), source: Relative(46) }, Store { destination_pointer: Relative(49), source: Relative(53) }, Store { destination_pointer: Relative(50), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(52) }, Jump { location: 15669 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, Mov { destination: Relative(42), source: Relative(46) }, Jump { location: 15488 }, Load { destination: Relative(47), source_pointer: Relative(46) }, JumpIf { condition: Relative(47), location: 15781 }, Jump { location: 15675 }, Load { destination: Relative(47), source_pointer: Relative(8) }, Load { destination: Relative(48), source_pointer: Relative(47) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 15682 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Relative(42) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(51), rhs: Relative(42) }, JumpIf { condition: Relative(50), location: 15692 }, BinaryIntOp { destination: Relative(53), op: Div, bit_size: U32, lhs: Relative(48), rhs: Relative(42) }, BinaryIntOp { destination: Relative(52), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(42) }, JumpIf { condition: Relative(52), location: 15692 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(48) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(42), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 15696 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(50), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(48) }, BinaryIntOp { destination: Relative(51), op: LessThanEquals, bit_size: U32, lhs: Relative(45), rhs: Relative(50) }, JumpIf { condition: Relative(51), location: 15701 }, Call { location: 17854 }, Const { destination: Relative(51), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(52), op: Div, bit_size: U32, lhs: Relative(50), rhs: Relative(51) }, BinaryIntOp { destination: Relative(53), op: Mul, bit_size: U32, lhs: Relative(52), rhs: Relative(51) }, BinaryIntOp { destination: Relative(48), op: Sub, bit_size: U32, lhs: Relative(50), rhs: Relative(53) }, BinaryIntOp { destination: Relative(50), op: LessThan, bit_size: U32, lhs: Relative(48), rhs: Relative(11) }, JumpIf { condition: Relative(50), location: 15708 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(50), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, Load { destination: Relative(48), source_pointer: Relative(52) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Relative(51) }, Load { destination: Relative(52), source_pointer: Relative(54) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(53) }, Load { destination: Relative(54), source_pointer: Relative(56) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Not { destination: Relative(53), source: Relative(48), bit_size: U1 }, BinaryIntOp { destination: Relative(48), op: Or, bit_size: U1, lhs: Relative(54), rhs: Relative(53) }, JumpIf { condition: Relative(48), location: 15732 }, Jump { location: 15727 }, BinaryFieldOp { destination: Relative(48), op: Equals, lhs: Relative(52), rhs: Relative(44) }, JumpIf { condition: Relative(48), location: 15730 }, Jump { location: 15742 }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Jump { location: 15742 }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Load { destination: Relative(48), source_pointer: Relative(8) }, Load { destination: Relative(49), source_pointer: Relative(7) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(53), op: LessThanEquals, bit_size: U32, lhs: Relative(49), rhs: Relative(52) }, JumpIf { condition: Relative(53), location: 15739 }, Call { location: 17854 }, Store { destination_pointer: Relative(8), source: Relative(48) }, Store { destination_pointer: Relative(7), source: Relative(52) }, Jump { location: 15742 }, Load { destination: Relative(48), source_pointer: Relative(47) }, JumpIf { condition: Relative(48), location: 15745 }, Jump { location: 15781 }, Load { destination: Relative(47), source_pointer: Relative(8) }, Load { destination: Relative(48), source_pointer: Relative(7) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Store { destination_pointer: Relative(53), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(49) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(51) }, Store { destination_pointer: Relative(52), source: Relative(44) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(51), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(50), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Store { destination_pointer: Relative(52), source: Relative(43) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(50) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(47) }, Store { destination_pointer: Relative(52), source: Relative(5) }, Store { destination_pointer: Relative(8), source: Relative(49) }, Store { destination_pointer: Relative(7), source: Relative(48) }, Store { destination_pointer: Relative(46), source: Direct(32840) }, Jump { location: 15781 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, Mov { destination: Relative(42), source: Relative(47) }, Jump { location: 15426 }, Load { destination: Relative(46), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(46) }, JumpIf { condition: Relative(47), location: 15788 }, Jump { location: 15811 }, Load { destination: Relative(46), source_pointer: Relative(45) }, Load { destination: Relative(47), source_pointer: Relative(49) }, Load { destination: Relative(48), source_pointer: Relative(50) }, Load { destination: Relative(52), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(42) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryFieldOp { destination: Relative(55), op: Add, lhs: Relative(53), rhs: Relative(54) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(42) }, Store { destination_pointer: Relative(56), source: Relative(55) }, Store { destination_pointer: Relative(45), source: Relative(46) }, Store { destination_pointer: Relative(49), source: Relative(53) }, Store { destination_pointer: Relative(50), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(52) }, Jump { location: 15811 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, Mov { destination: Relative(42), source: Relative(46) }, Jump { location: 15390 }, BinaryIntOp { destination: Relative(38), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(38) }, Load { destination: Relative(43), source_pointer: Relative(45) }, Load { destination: Relative(38), source_pointer: Relative(9) }, Load { destination: Relative(44), source_pointer: Relative(38) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(46), source: Relative(46), bit_size: U1 }, JumpIf { condition: Relative(46), location: 15825 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Load { destination: Relative(46), source_pointer: Relative(38) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Not { destination: Relative(48), source: Relative(48), bit_size: U1 }, JumpIf { condition: Relative(48), location: 15836 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(46) }, Load { destination: Relative(46), source_pointer: Relative(7) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(46) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 15844 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(46) }, Mov { destination: Relative(46), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(49), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(50), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(51), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(53) }, IndirectConst { destination_pointer: Relative(52), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Mov { destination: Relative(54), source: Relative(53) }, Store { destination_pointer: Relative(54), source: Relative(43) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Direct(32839) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(54), rhs: Direct(2) }, Store { destination_pointer: Relative(54), source: Direct(32839) }, Store { destination_pointer: Relative(46), source: Relative(52) }, Store { destination_pointer: Relative(49), source: Relative(7) }, Store { destination_pointer: Relative(50), source: Direct(32841) }, Store { destination_pointer: Relative(51), source: Relative(5) }, Mov { destination: Relative(8), source: Direct(32838) }, Jump { location: 15871 }, BinaryIntOp { destination: Relative(45), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Direct(32837) }, JumpIf { condition: Relative(45), location: 15995 }, Jump { location: 15874 }, Load { destination: Relative(45), source_pointer: Relative(46) }, Load { destination: Relative(47), source_pointer: Relative(49) }, Load { destination: Relative(48), source_pointer: Relative(50) }, Load { destination: Relative(52), source_pointer: Relative(47) }, Const { destination: Relative(53), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(54), op: Equals, bit_size: U32, lhs: Relative(53), rhs: Relative(52) }, Not { destination: Relative(54), source: Relative(54), bit_size: U1 }, JumpIf { condition: Relative(54), location: 15883 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, Store { destination_pointer: Relative(47), source: Relative(52) }, Mov { destination: Relative(52), source: Direct(1) }, Const { destination: Relative(54), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(54) }, IndirectConst { destination_pointer: Relative(52), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Const { destination: Relative(55), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(54), size: Relative(55) }, output: HeapArray { pointer: Relative(56), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(46), source: Relative(45) }, Store { destination_pointer: Relative(49), source: Relative(52) }, Store { destination_pointer: Relative(50), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Direct(32840) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(52), rhs: Direct(32841) }, Load { destination: Relative(45), source_pointer: Relative(46) }, Cast { destination: Relative(47), source: Relative(45), bit_size: Integer(U32) }, Cast { destination: Relative(46), source: Relative(47), bit_size: Field }, Cast { destination: Relative(45), source: Relative(46), bit_size: Integer(U32) }, Mov { destination: Relative(46), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Relative(5) }, Mov { destination: Relative(8), source: Direct(32838) }, Jump { location: 15907 }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Relative(11) }, JumpIf { condition: Relative(47), location: 15935 }, Jump { location: 15910 }, Load { destination: Relative(8), source_pointer: Relative(44) }, JumpIf { condition: Relative(8), location: 15932 }, Const { destination: Relative(38), bit_size: Integer(U32), value: 38 }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 38 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, Mov { destination: Relative(45), source: Relative(44) }, IndirectConst { destination_pointer: Relative(45), bit_size: Integer(U64), value: 9862881900111276825 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 35 }, Mov { destination: Direct(32771), source: Relative(46) }, Mov { destination: Direct(32772), source: Relative(45) }, Mov { destination: Direct(32773), source: Relative(47) }, Call { location: 23 }, Const { destination: Relative(46), bit_size: Integer(U32), value: 35 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(46) }, Store { destination_pointer: Relative(45), source: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Store { destination_pointer: Relative(45), source: Relative(43) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, Trap { revert_data: HeapVector { pointer: Relative(44), size: Relative(38) } }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 1726 }, Load { destination: Relative(47), source_pointer: Relative(46) }, JumpIf { condition: Relative(47), location: 15992 }, Jump { location: 15938 }, Load { destination: Relative(47), source_pointer: Relative(38) }, Const { destination: Relative(48), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(48), rhs: Relative(47) }, Not { destination: Relative(49), source: Relative(49), bit_size: U1 }, JumpIf { condition: Relative(49), location: 15944 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Mul, bit_size: U32, lhs: Relative(8), rhs: Relative(8) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(49), op: Equals, bit_size: U32, lhs: Relative(50), rhs: Relative(8) }, JumpIf { condition: Relative(49), location: 15954 }, BinaryIntOp { destination: Relative(52), op: Div, bit_size: U32, lhs: Relative(47), rhs: Relative(8) }, BinaryIntOp { destination: Relative(51), op: Equals, bit_size: U32, lhs: Relative(52), rhs: Relative(8) }, JumpIf { condition: Relative(51), location: 15954 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(47) }, BinaryIntOp { destination: Relative(50), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(49) }, JumpIf { condition: Relative(50), location: 15958 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(49), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(47) }, BinaryIntOp { destination: Relative(50), op: LessThanEquals, bit_size: U32, lhs: Relative(45), rhs: Relative(49) }, JumpIf { condition: Relative(50), location: 15963 }, Call { location: 17854 }, Const { destination: Relative(50), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(51), op: Div, bit_size: U32, lhs: Relative(49), rhs: Relative(50) }, BinaryIntOp { destination: Relative(52), op: Mul, bit_size: U32, lhs: Relative(51), rhs: Relative(50) }, BinaryIntOp { destination: Relative(47), op: Sub, bit_size: U32, lhs: Relative(49), rhs: Relative(52) }, BinaryIntOp { destination: Relative(49), op: LessThan, bit_size: U32, lhs: Relative(47), rhs: Relative(11) }, JumpIf { condition: Relative(49), location: 15970 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(49), op: Mul, bit_size: U32, lhs: Relative(47), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(49) }, Load { destination: Relative(47), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Load { destination: Relative(51), source_pointer: Relative(53) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(53), op: Add, bit_size: U32, lhs: Relative(52), rhs: Relative(50) }, Load { destination: Relative(49), source_pointer: Relative(53) }, Not { destination: Relative(50), source: Relative(49), bit_size: U1 }, BinaryIntOp { destination: Relative(49), op: Mul, bit_size: U1, lhs: Relative(50), rhs: Relative(47) }, JumpIf { condition: Relative(49), location: 15986 }, Jump { location: 15992 }, BinaryFieldOp { destination: Relative(47), op: Equals, lhs: Relative(51), rhs: Relative(43) }, JumpIf { condition: Relative(47), location: 15989 }, Jump { location: 15992 }, Store { destination_pointer: Relative(44), source: Direct(32840) }, Store { destination_pointer: Relative(46), source: Direct(32840) }, Jump { location: 15992 }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32841) }, Mov { destination: Relative(8), source: Relative(47) }, Jump { location: 15907 }, Load { destination: Relative(45), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(47), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Relative(45) }, JumpIf { condition: Relative(47), location: 15999 }, Jump { location: 16022 }, Load { destination: Relative(45), source_pointer: Relative(46) }, Load { destination: Relative(47), source_pointer: Relative(49) }, Load { destination: Relative(48), source_pointer: Relative(50) }, Load { destination: Relative(52), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(8) }, Load { destination: Relative(53), source_pointer: Relative(55) }, BinaryIntOp { destination: Relative(55), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(55), rhs: Relative(8) }, Load { destination: Relative(54), source_pointer: Relative(56) }, BinaryFieldOp { destination: Relative(55), op: Add, lhs: Relative(53), rhs: Relative(54) }, Mov { destination: Direct(32771), source: Relative(47) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(53), source: Direct(32773) }, BinaryIntOp { destination: Relative(54), op: Add, bit_size: U32, lhs: Relative(53), rhs: Direct(2) }, BinaryIntOp { destination: Relative(56), op: Add, bit_size: U32, lhs: Relative(54), rhs: Relative(8) }, Store { destination_pointer: Relative(56), source: Relative(55) }, Store { destination_pointer: Relative(46), source: Relative(45) }, Store { destination_pointer: Relative(49), source: Relative(53) }, Store { destination_pointer: Relative(50), source: Relative(48) }, Store { destination_pointer: Relative(51), source: Relative(52) }, Jump { location: 16022 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32841) }, Mov { destination: Relative(8), source: Relative(45) }, Jump { location: 15871 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(36) }, Load { destination: Relative(38), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(1), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(41) }, Load { destination: Relative(36), source_pointer: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(9) }, Load { destination: Relative(42), source_pointer: Relative(10) }, Load { destination: Relative(43), source_pointer: Relative(41) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 16041 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(43) }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(46), op: Div, bit_size: U32, lhs: Relative(43), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(42) }, JumpIf { condition: Relative(45), location: 16048 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(43), rhs: Relative(35) }, JumpIf { condition: Relative(42), location: 16051 }, Call { location: 17476 }, Load { destination: Relative(42), source_pointer: Relative(41) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(42) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 16057 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(42) }, Load { destination: Relative(41), source_pointer: Relative(7) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(41) }, Not { destination: Relative(45), source: Relative(45), bit_size: U1 }, JumpIf { condition: Relative(45), location: 16065 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(7), source: Relative(41) }, Mov { destination: Relative(41), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(45), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(46), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(47), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(49) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Mov { destination: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(50), source: Relative(38) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(50), rhs: Direct(2) }, Store { destination_pointer: Relative(50), source: Direct(32839) }, Store { destination_pointer: Relative(41), source: Relative(48) }, Store { destination_pointer: Relative(45), source: Relative(7) }, Store { destination_pointer: Relative(46), source: Direct(32841) }, Store { destination_pointer: Relative(47), source: Relative(5) }, Mov { destination: Relative(8), source: Direct(32838) }, Jump { location: 16092 }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Direct(32837) }, JumpIf { condition: Relative(42), location: 16246 }, Jump { location: 16095 }, Load { destination: Relative(42), source_pointer: Relative(41) }, Load { destination: Relative(43), source_pointer: Relative(45) }, Load { destination: Relative(44), source_pointer: Relative(46) }, Load { destination: Relative(48), source_pointer: Relative(43) }, Const { destination: Relative(49), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(50), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(48) }, Not { destination: Relative(50), source: Relative(50), bit_size: U1 }, JumpIf { condition: Relative(50), location: 16104 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(48) }, Mov { destination: Relative(48), source: Direct(1) }, Const { destination: Relative(50), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(50) }, IndirectConst { destination_pointer: Relative(48), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, Const { destination: Relative(51), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(50), size: Relative(51) }, output: HeapArray { pointer: Relative(52), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(41), source: Relative(42) }, Store { destination_pointer: Relative(45), source: Relative(48) }, Store { destination_pointer: Relative(46), source: Relative(44) }, Store { destination_pointer: Relative(47), source: Direct(32840) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(48), rhs: Direct(32841) }, Load { destination: Relative(41), source_pointer: Relative(42) }, Cast { destination: Relative(43), source: Relative(41), bit_size: Integer(U32) }, Cast { destination: Relative(42), source: Relative(43), bit_size: Field }, Cast { destination: Relative(41), source: Relative(42), bit_size: Integer(U32) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(42), source: Relative(5) }, Mov { destination: Relative(8), source: Direct(32838) }, Jump { location: 16128 }, BinaryIntOp { destination: Relative(43), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Relative(11) }, JumpIf { condition: Relative(43), location: 16134 }, Jump { location: 16131 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 1610 }, Load { destination: Relative(43), source_pointer: Relative(42) }, JumpIf { condition: Relative(43), location: 16243 }, Jump { location: 16137 }, Load { destination: Relative(43), source_pointer: Relative(9) }, Load { destination: Relative(44), source_pointer: Relative(43) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(46), source: Relative(46), bit_size: U1 }, JumpIf { condition: Relative(46), location: 16144 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(44) }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(8), rhs: Relative(8) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(8) }, JumpIf { condition: Relative(46), location: 16154 }, BinaryIntOp { destination: Relative(49), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(8) }, BinaryIntOp { destination: Relative(48), op: Equals, bit_size: U32, lhs: Relative(49), rhs: Relative(8) }, JumpIf { condition: Relative(48), location: 16154 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(44) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(46) }, JumpIf { condition: Relative(47), location: 16158 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(46), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(44) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(41), rhs: Relative(46) }, JumpIf { condition: Relative(47), location: 16163 }, Call { location: 17854 }, Const { destination: Relative(47), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(48), op: Div, bit_size: U32, lhs: Relative(46), rhs: Relative(47) }, BinaryIntOp { destination: Relative(49), op: Mul, bit_size: U32, lhs: Relative(48), rhs: Relative(47) }, BinaryIntOp { destination: Relative(44), op: Sub, bit_size: U32, lhs: Relative(46), rhs: Relative(49) }, BinaryIntOp { destination: Relative(46), op: LessThan, bit_size: U32, lhs: Relative(44), rhs: Relative(11) }, JumpIf { condition: Relative(46), location: 16170 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(46), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(46) }, Load { destination: Relative(44), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(49) }, Load { destination: Relative(50), source_pointer: Relative(52) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(43), source: Relative(5) }, Not { destination: Relative(49), source: Relative(44), bit_size: U1 }, BinaryIntOp { destination: Relative(44), op: Or, bit_size: U1, lhs: Relative(50), rhs: Relative(49) }, JumpIf { condition: Relative(44), location: 16194 }, Jump { location: 16189 }, BinaryFieldOp { destination: Relative(44), op: Equals, lhs: Relative(48), rhs: Relative(38) }, JumpIf { condition: Relative(44), location: 16192 }, Jump { location: 16204 }, Store { destination_pointer: Relative(43), source: Direct(32840) }, Jump { location: 16204 }, Store { destination_pointer: Relative(43), source: Direct(32840) }, Load { destination: Relative(44), source_pointer: Relative(9) }, Load { destination: Relative(45), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(49), op: LessThanEquals, bit_size: U32, lhs: Relative(45), rhs: Relative(48) }, JumpIf { condition: Relative(49), location: 16201 }, Call { location: 17854 }, Store { destination_pointer: Relative(9), source: Relative(44) }, Store { destination_pointer: Relative(10), source: Relative(48) }, Jump { location: 16204 }, Load { destination: Relative(44), source_pointer: Relative(43) }, JumpIf { condition: Relative(44), location: 16207 }, Jump { location: 16243 }, Load { destination: Relative(43), source_pointer: Relative(9) }, Load { destination: Relative(44), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(43) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(46) }, Store { destination_pointer: Relative(49), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(45) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(43), source: Direct(32773) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(47) }, Store { destination_pointer: Relative(48), source: Relative(38) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(43) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(46), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Store { destination_pointer: Relative(48), source: Relative(36) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(46) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(43) }, Store { destination_pointer: Relative(48), source: Relative(5) }, Store { destination_pointer: Relative(9), source: Relative(45) }, Store { destination_pointer: Relative(10), source: Relative(44) }, Store { destination_pointer: Relative(42), source: Direct(32840) }, Jump { location: 16243 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32841) }, Mov { destination: Relative(8), source: Relative(43) }, Jump { location: 16128 }, Load { destination: Relative(42), source_pointer: Relative(46) }, BinaryIntOp { destination: Relative(43), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Relative(42) }, JumpIf { condition: Relative(43), location: 16250 }, Jump { location: 16273 }, Load { destination: Relative(42), source_pointer: Relative(41) }, Load { destination: Relative(43), source_pointer: Relative(45) }, Load { destination: Relative(44), source_pointer: Relative(46) }, Load { destination: Relative(48), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(8) }, Load { destination: Relative(49), source_pointer: Relative(51) }, BinaryIntOp { destination: Relative(51), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(51), rhs: Relative(8) }, Load { destination: Relative(50), source_pointer: Relative(52) }, BinaryFieldOp { destination: Relative(51), op: Add, lhs: Relative(49), rhs: Relative(50) }, Mov { destination: Direct(32771), source: Relative(43) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(49), source: Direct(32773) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Direct(2) }, BinaryIntOp { destination: Relative(52), op: Add, bit_size: U32, lhs: Relative(50), rhs: Relative(8) }, Store { destination_pointer: Relative(52), source: Relative(51) }, Store { destination_pointer: Relative(41), source: Relative(42) }, Store { destination_pointer: Relative(45), source: Relative(49) }, Store { destination_pointer: Relative(46), source: Relative(44) }, Store { destination_pointer: Relative(47), source: Relative(48) }, Jump { location: 16273 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32841) }, Mov { destination: Relative(8), source: Relative(42) }, Jump { location: 16092 }, Load { destination: Relative(41), source_pointer: Relative(37) }, JumpIf { condition: Relative(41), location: 16338 }, Jump { location: 16279 }, Load { destination: Relative(41), source_pointer: Relative(8) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(41) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 16285 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(41) }, BinaryIntOp { destination: Relative(41), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(2) }, JumpIf { condition: Relative(43), location: 16295 }, BinaryIntOp { destination: Relative(46), op: Div, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(2) }, JumpIf { condition: Relative(45), location: 16295 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(41) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(43) }, JumpIf { condition: Relative(44), location: 16299 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(41), op: Div, bit_size: U32, lhs: Relative(43), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(41) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(36), rhs: Relative(43) }, JumpIf { condition: Relative(44), location: 16304 }, Call { location: 17854 }, Const { destination: Relative(44), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(43), rhs: Relative(44) }, BinaryIntOp { destination: Relative(46), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, BinaryIntOp { destination: Relative(41), op: Sub, bit_size: U32, lhs: Relative(43), rhs: Relative(46) }, BinaryIntOp { destination: Relative(43), op: LessThan, bit_size: U32, lhs: Relative(41), rhs: Relative(11) }, JumpIf { condition: Relative(43), location: 16311 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(41), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(46), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(43), source_pointer: Relative(48) }, Not { destination: Relative(44), source: Relative(43), bit_size: U1 }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U1, lhs: Relative(44), rhs: Relative(41) }, JumpIf { condition: Relative(43), location: 16331 }, Jump { location: 16338 }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(45), rhs: Relative(7) }, JumpIf { condition: Relative(41), location: 16334 }, Jump { location: 16338 }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Store { destination_pointer: Relative(34), source: Relative(46) }, Store { destination_pointer: Relative(37), source: Direct(32840) }, Jump { location: 16338 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(41) }, Jump { location: 1383 }, Load { destination: Relative(36), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(36) }, JumpIf { condition: Relative(37), location: 16345 }, Jump { location: 16368 }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(37), source_pointer: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(44) }, Load { destination: Relative(46), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(2) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryFieldOp { destination: Relative(49), op: Add, lhs: Relative(47), rhs: Relative(48) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Store { destination_pointer: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(43), source: Relative(47) }, Store { destination_pointer: Relative(44), source: Relative(41) }, Store { destination_pointer: Relative(45), source: Relative(46) }, Jump { location: 16368 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(36) }, Jump { location: 1347 }, Load { destination: Relative(37), source_pointer: Relative(10) }, JumpIf { condition: Relative(37), location: 16480 }, Jump { location: 16374 }, Load { destination: Relative(37), source_pointer: Relative(34) }, Load { destination: Relative(41), source_pointer: Relative(37) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(41) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 16381 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(41) }, BinaryIntOp { destination: Relative(41), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(2) }, JumpIf { condition: Relative(43), location: 16391 }, BinaryIntOp { destination: Relative(46), op: Div, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(2) }, JumpIf { condition: Relative(45), location: 16391 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(41) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(43) }, JumpIf { condition: Relative(44), location: 16395 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(41), op: Div, bit_size: U32, lhs: Relative(43), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(41) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(43) }, JumpIf { condition: Relative(44), location: 16400 }, Call { location: 17854 }, Const { destination: Relative(44), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(43), rhs: Relative(44) }, BinaryIntOp { destination: Relative(46), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, BinaryIntOp { destination: Relative(41), op: Sub, bit_size: U32, lhs: Relative(43), rhs: Relative(46) }, BinaryIntOp { destination: Relative(43), op: LessThan, bit_size: U32, lhs: Relative(41), rhs: Relative(11) }, JumpIf { condition: Relative(43), location: 16407 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(41), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(46) }, Load { destination: Relative(47), source_pointer: Relative(49) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(5) }, Not { destination: Relative(46), source: Relative(41), bit_size: U1 }, BinaryIntOp { destination: Relative(41), op: Or, bit_size: U1, lhs: Relative(47), rhs: Relative(46) }, JumpIf { condition: Relative(41), location: 16431 }, Jump { location: 16426 }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(45), rhs: Relative(7) }, JumpIf { condition: Relative(41), location: 16429 }, Jump { location: 16441 }, Store { destination_pointer: Relative(37), source: Direct(32840) }, Jump { location: 16441 }, Store { destination_pointer: Relative(37), source: Direct(32840) }, Load { destination: Relative(41), source_pointer: Relative(34) }, Load { destination: Relative(42), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(46), op: LessThanEquals, bit_size: U32, lhs: Relative(42), rhs: Relative(45) }, JumpIf { condition: Relative(46), location: 16438 }, Call { location: 17854 }, Store { destination_pointer: Relative(34), source: Relative(41) }, Store { destination_pointer: Relative(36), source: Relative(45) }, Jump { location: 16441 }, Load { destination: Relative(41), source_pointer: Relative(37) }, JumpIf { condition: Relative(41), location: 16444 }, Jump { location: 16480 }, Load { destination: Relative(37), source_pointer: Relative(34) }, Load { destination: Relative(41), source_pointer: Relative(36) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Store { destination_pointer: Relative(46), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(44) }, Store { destination_pointer: Relative(45), source: Relative(7) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(43), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Store { destination_pointer: Relative(45), source: Relative(9) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(43) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(37) }, Store { destination_pointer: Relative(45), source: Relative(5) }, Store { destination_pointer: Relative(34), source: Relative(42) }, Store { destination_pointer: Relative(36), source: Relative(41) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Jump { location: 16480 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(37) }, Jump { location: 1279 }, Load { destination: Relative(8), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(37), location: 16487 }, Jump { location: 16510 }, Load { destination: Relative(8), source_pointer: Relative(10) }, Load { destination: Relative(37), source_pointer: Relative(42) }, Load { destination: Relative(41), source_pointer: Relative(43) }, Load { destination: Relative(45), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(2) }, Load { destination: Relative(46), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryFieldOp { destination: Relative(48), op: Add, lhs: Relative(46), rhs: Relative(47) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(46), source: Direct(32773) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(2) }, Store { destination_pointer: Relative(49), source: Relative(48) }, Store { destination_pointer: Relative(10), source: Relative(8) }, Store { destination_pointer: Relative(42), source: Relative(46) }, Store { destination_pointer: Relative(43), source: Relative(41) }, Store { destination_pointer: Relative(44), source: Relative(45) }, Jump { location: 16510 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 1243 }, Load { destination: Relative(41), source_pointer: Relative(37) }, JumpIf { condition: Relative(41), location: 16622 }, Jump { location: 16516 }, Load { destination: Relative(41), source_pointer: Relative(34) }, Load { destination: Relative(42), source_pointer: Relative(41) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(42) }, Not { destination: Relative(44), source: Relative(44), bit_size: U1 }, JumpIf { condition: Relative(44), location: 16523 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(2) }, JumpIf { condition: Relative(44), location: 16533 }, BinaryIntOp { destination: Relative(47), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(2) }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(47), rhs: Relative(2) }, JumpIf { condition: Relative(46), location: 16533 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(42) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 16537 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(42), op: Div, bit_size: U32, lhs: Relative(44), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(42) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(10), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 16542 }, Call { location: 17854 }, Const { destination: Relative(45), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(46), op: Div, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, BinaryIntOp { destination: Relative(47), op: Mul, bit_size: U32, lhs: Relative(46), rhs: Relative(45) }, BinaryIntOp { destination: Relative(42), op: Sub, bit_size: U32, lhs: Relative(44), rhs: Relative(47) }, BinaryIntOp { destination: Relative(44), op: LessThan, bit_size: U32, lhs: Relative(42), rhs: Relative(11) }, JumpIf { condition: Relative(44), location: 16549 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(44), op: Mul, bit_size: U32, lhs: Relative(42), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Load { destination: Relative(42), source_pointer: Relative(46) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Load { destination: Relative(46), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(47) }, Load { destination: Relative(48), source_pointer: Relative(50) }, Mov { destination: Relative(41), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(41), source: Relative(5) }, Not { destination: Relative(47), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(42), op: Or, bit_size: U1, lhs: Relative(48), rhs: Relative(47) }, JumpIf { condition: Relative(42), location: 16573 }, Jump { location: 16568 }, BinaryFieldOp { destination: Relative(42), op: Equals, lhs: Relative(46), rhs: Relative(7) }, JumpIf { condition: Relative(42), location: 16571 }, Jump { location: 16583 }, Store { destination_pointer: Relative(41), source: Direct(32840) }, Jump { location: 16583 }, Store { destination_pointer: Relative(41), source: Direct(32840) }, Load { destination: Relative(42), source_pointer: Relative(34) }, Load { destination: Relative(43), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(47), op: LessThanEquals, bit_size: U32, lhs: Relative(43), rhs: Relative(46) }, JumpIf { condition: Relative(47), location: 16580 }, Call { location: 17854 }, Store { destination_pointer: Relative(34), source: Relative(42) }, Store { destination_pointer: Relative(36), source: Relative(46) }, Jump { location: 16583 }, Load { destination: Relative(42), source_pointer: Relative(41) }, JumpIf { condition: Relative(42), location: 16586 }, Jump { location: 16622 }, Load { destination: Relative(41), source_pointer: Relative(34) }, Load { destination: Relative(42), source_pointer: Relative(36) }, Mov { destination: Direct(32771), source: Relative(41) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(43), source: Direct(32773) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(44) }, Store { destination_pointer: Relative(47), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(43) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(41), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(45) }, Store { destination_pointer: Relative(46), source: Relative(7) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(41) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(44), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Store { destination_pointer: Relative(46), source: Relative(8) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(44) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(43), source: Direct(32773) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(41) }, Store { destination_pointer: Relative(46), source: Relative(5) }, Store { destination_pointer: Relative(34), source: Relative(43) }, Store { destination_pointer: Relative(36), source: Relative(42) }, Store { destination_pointer: Relative(37), source: Direct(32840) }, Jump { location: 16622 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(41) }, Jump { location: 1176 }, Load { destination: Relative(10), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(41), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, JumpIf { condition: Relative(41), location: 16629 }, Jump { location: 16652 }, Load { destination: Relative(10), source_pointer: Relative(37) }, Load { destination: Relative(41), source_pointer: Relative(42) }, Load { destination: Relative(45), source_pointer: Relative(43) }, Load { destination: Relative(46), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(2) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryFieldOp { destination: Relative(49), op: Add, lhs: Relative(47), rhs: Relative(48) }, Mov { destination: Direct(32771), source: Relative(41) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Store { destination_pointer: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(37), source: Relative(10) }, Store { destination_pointer: Relative(42), source: Relative(47) }, Store { destination_pointer: Relative(43), source: Relative(45) }, Store { destination_pointer: Relative(44), source: Relative(46) }, Jump { location: 16652 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 1140 }, Load { destination: Relative(41), source_pointer: Relative(37) }, JumpIf { condition: Relative(41), location: 16717 }, Jump { location: 16658 }, Load { destination: Relative(41), source_pointer: Relative(8) }, Const { destination: Relative(42), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(41) }, Not { destination: Relative(43), source: Relative(43), bit_size: U1 }, JumpIf { condition: Relative(43), location: 16664 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(41) }, BinaryIntOp { destination: Relative(41), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(44), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(43), op: Equals, bit_size: U32, lhs: Relative(44), rhs: Relative(2) }, JumpIf { condition: Relative(43), location: 16674 }, BinaryIntOp { destination: Relative(46), op: Div, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, BinaryIntOp { destination: Relative(45), op: Equals, bit_size: U32, lhs: Relative(46), rhs: Relative(2) }, JumpIf { condition: Relative(45), location: 16674 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(41) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(43) }, JumpIf { condition: Relative(44), location: 16678 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(41), op: Div, bit_size: U32, lhs: Relative(43), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(41) }, BinaryIntOp { destination: Relative(44), op: LessThanEquals, bit_size: U32, lhs: Relative(36), rhs: Relative(43) }, JumpIf { condition: Relative(44), location: 16683 }, Call { location: 17854 }, Const { destination: Relative(44), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(43), rhs: Relative(44) }, BinaryIntOp { destination: Relative(46), op: Mul, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, BinaryIntOp { destination: Relative(41), op: Sub, bit_size: U32, lhs: Relative(43), rhs: Relative(46) }, BinaryIntOp { destination: Relative(43), op: LessThan, bit_size: U32, lhs: Relative(41), rhs: Relative(11) }, JumpIf { condition: Relative(43), location: 16690 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U32, lhs: Relative(41), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(44) }, Load { destination: Relative(45), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(46), source_pointer: Relative(48) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(44) }, Load { destination: Relative(43), source_pointer: Relative(48) }, Not { destination: Relative(44), source: Relative(43), bit_size: U1 }, BinaryIntOp { destination: Relative(43), op: Mul, bit_size: U1, lhs: Relative(44), rhs: Relative(41) }, JumpIf { condition: Relative(43), location: 16710 }, Jump { location: 16717 }, BinaryFieldOp { destination: Relative(41), op: Equals, lhs: Relative(45), rhs: Relative(4) }, JumpIf { condition: Relative(41), location: 16713 }, Jump { location: 16717 }, Store { destination_pointer: Relative(9), source: Direct(32840) }, Store { destination_pointer: Relative(10), source: Relative(46) }, Store { destination_pointer: Relative(37), source: Direct(32840) }, Jump { location: 16717 }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(41) }, Jump { location: 981 }, Load { destination: Relative(36), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(36) }, JumpIf { condition: Relative(37), location: 16724 }, Jump { location: 16747 }, Load { destination: Relative(36), source_pointer: Relative(42) }, Load { destination: Relative(37), source_pointer: Relative(43) }, Load { destination: Relative(41), source_pointer: Relative(44) }, Load { destination: Relative(46), source_pointer: Relative(45) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Load { destination: Relative(47), source_pointer: Relative(49) }, BinaryIntOp { destination: Relative(49), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(49), rhs: Relative(2) }, Load { destination: Relative(48), source_pointer: Relative(50) }, BinaryFieldOp { destination: Relative(49), op: Add, lhs: Relative(47), rhs: Relative(48) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(47), source: Direct(32773) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Direct(2) }, BinaryIntOp { destination: Relative(50), op: Add, bit_size: U32, lhs: Relative(48), rhs: Relative(2) }, Store { destination_pointer: Relative(50), source: Relative(49) }, Store { destination_pointer: Relative(42), source: Relative(36) }, Store { destination_pointer: Relative(43), source: Relative(47) }, Store { destination_pointer: Relative(44), source: Relative(41) }, Store { destination_pointer: Relative(45), source: Relative(46) }, Jump { location: 16747 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(36) }, Jump { location: 945 }, Load { destination: Relative(37), source_pointer: Relative(9) }, Load { destination: Relative(38), source_pointer: Relative(10) }, Load { destination: Relative(39), source_pointer: Relative(37) }, Const { destination: Relative(40), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(39) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 16758 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(39) }, BinaryIntOp { destination: Relative(39), op: Mul, bit_size: U32, lhs: Relative(38), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(42), op: Div, bit_size: U32, lhs: Relative(39), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(42), rhs: Relative(38) }, JumpIf { condition: Relative(41), location: 16765 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(39), rhs: Relative(35) }, JumpIf { condition: Relative(38), location: 16768 }, Call { location: 17476 }, Load { destination: Relative(38), source_pointer: Relative(37) }, Const { destination: Relative(39), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(38) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 16774 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, Store { destination_pointer: Relative(37), source: Relative(38) }, Load { destination: Relative(37), source_pointer: Relative(8) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(41), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(37) }, Not { destination: Relative(41), source: Relative(41), bit_size: U1 }, JumpIf { condition: Relative(41), location: 16782 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, Store { destination_pointer: Relative(8), source: Relative(37) }, Mov { destination: Relative(37), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(41), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(42), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(43), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(45) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Mov { destination: Relative(46), source: Relative(45) }, Store { destination_pointer: Relative(46), source: Relative(4) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Direct(32839) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(46), rhs: Direct(2) }, Store { destination_pointer: Relative(46), source: Direct(32839) }, Store { destination_pointer: Relative(37), source: Relative(44) }, Store { destination_pointer: Relative(41), source: Relative(8) }, Store { destination_pointer: Relative(42), source: Direct(32841) }, Store { destination_pointer: Relative(43), source: Relative(5) }, Mov { destination: Relative(36), source: Direct(32838) }, Jump { location: 16809 }, BinaryIntOp { destination: Relative(38), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Direct(32837) }, JumpIf { condition: Relative(38), location: 16963 }, Jump { location: 16812 }, Load { destination: Relative(38), source_pointer: Relative(37) }, Load { destination: Relative(39), source_pointer: Relative(41) }, Load { destination: Relative(40), source_pointer: Relative(42) }, Load { destination: Relative(44), source_pointer: Relative(39) }, Const { destination: Relative(45), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(46), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(44) }, Not { destination: Relative(46), source: Relative(46), bit_size: U1 }, JumpIf { condition: Relative(46), location: 16821 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(44) }, Mov { destination: Relative(44), source: Direct(1) }, Const { destination: Relative(46), bit_size: Integer(U32), value: 5 }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Relative(46) }, IndirectConst { destination_pointer: Relative(44), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, Const { destination: Relative(47), bit_size: Integer(U32), value: 4 }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(2) }, BlackBox(Poseidon2Permutation { message: HeapVector { pointer: Relative(46), size: Relative(47) }, output: HeapArray { pointer: Relative(48), size: 4 }, len: Direct(32836) }), Store { destination_pointer: Relative(37), source: Relative(38) }, Store { destination_pointer: Relative(41), source: Relative(44) }, Store { destination_pointer: Relative(42), source: Relative(40) }, Store { destination_pointer: Relative(43), source: Direct(32840) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(44), rhs: Direct(32841) }, Load { destination: Relative(37), source_pointer: Relative(38) }, Cast { destination: Relative(39), source: Relative(37), bit_size: Integer(U32) }, Cast { destination: Relative(38), source: Relative(39), bit_size: Field }, Cast { destination: Relative(37), source: Relative(38), bit_size: Integer(U32) }, Mov { destination: Relative(38), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(38), source: Relative(5) }, Mov { destination: Relative(36), source: Direct(32838) }, Jump { location: 16845 }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(11) }, JumpIf { condition: Relative(39), location: 16851 }, Jump { location: 16848 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(36) }, Jump { location: 776 }, Load { destination: Relative(39), source_pointer: Relative(38) }, JumpIf { condition: Relative(39), location: 16960 }, Jump { location: 16854 }, Load { destination: Relative(39), source_pointer: Relative(9) }, Load { destination: Relative(40), source_pointer: Relative(39) }, Const { destination: Relative(41), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(41), rhs: Relative(40) }, Not { destination: Relative(42), source: Relative(42), bit_size: U1 }, JumpIf { condition: Relative(42), location: 16861 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(40) }, BinaryIntOp { destination: Relative(40), op: Mul, bit_size: U32, lhs: Relative(36), rhs: Relative(36) }, Const { destination: Relative(43), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(42), op: Equals, bit_size: U32, lhs: Relative(43), rhs: Relative(36) }, JumpIf { condition: Relative(42), location: 16871 }, BinaryIntOp { destination: Relative(45), op: Div, bit_size: U32, lhs: Relative(40), rhs: Relative(36) }, BinaryIntOp { destination: Relative(44), op: Equals, bit_size: U32, lhs: Relative(45), rhs: Relative(36) }, JumpIf { condition: Relative(44), location: 16871 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(36), rhs: Relative(40) }, BinaryIntOp { destination: Relative(43), op: LessThanEquals, bit_size: U32, lhs: Relative(36), rhs: Relative(42) }, JumpIf { condition: Relative(43), location: 16875 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(40), op: Div, bit_size: U32, lhs: Relative(42), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(40) }, BinaryIntOp { destination: Relative(43), op: LessThanEquals, bit_size: U32, lhs: Relative(37), rhs: Relative(42) }, JumpIf { condition: Relative(43), location: 16880 }, Call { location: 17854 }, Const { destination: Relative(43), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(44), op: Div, bit_size: U32, lhs: Relative(42), rhs: Relative(43) }, BinaryIntOp { destination: Relative(45), op: Mul, bit_size: U32, lhs: Relative(44), rhs: Relative(43) }, BinaryIntOp { destination: Relative(40), op: Sub, bit_size: U32, lhs: Relative(42), rhs: Relative(45) }, BinaryIntOp { destination: Relative(42), op: LessThan, bit_size: U32, lhs: Relative(40), rhs: Relative(11) }, JumpIf { condition: Relative(42), location: 16887 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(42), op: Mul, bit_size: U32, lhs: Relative(40), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(42) }, Load { destination: Relative(40), source_pointer: Relative(44) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Relative(43) }, Load { destination: Relative(44), source_pointer: Relative(46) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(45) }, Load { destination: Relative(46), source_pointer: Relative(48) }, Mov { destination: Relative(39), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(39), source: Relative(5) }, Not { destination: Relative(45), source: Relative(40), bit_size: U1 }, BinaryIntOp { destination: Relative(40), op: Or, bit_size: U1, lhs: Relative(46), rhs: Relative(45) }, JumpIf { condition: Relative(40), location: 16911 }, Jump { location: 16906 }, BinaryFieldOp { destination: Relative(40), op: Equals, lhs: Relative(44), rhs: Relative(4) }, JumpIf { condition: Relative(40), location: 16909 }, Jump { location: 16921 }, Store { destination_pointer: Relative(39), source: Direct(32840) }, Jump { location: 16921 }, Store { destination_pointer: Relative(39), source: Direct(32840) }, Load { destination: Relative(40), source_pointer: Relative(9) }, Load { destination: Relative(41), source_pointer: Relative(10) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(45), op: LessThanEquals, bit_size: U32, lhs: Relative(41), rhs: Relative(44) }, JumpIf { condition: Relative(45), location: 16918 }, Call { location: 17854 }, Store { destination_pointer: Relative(9), source: Relative(40) }, Store { destination_pointer: Relative(10), source: Relative(44) }, Jump { location: 16921 }, Load { destination: Relative(40), source_pointer: Relative(39) }, JumpIf { condition: Relative(40), location: 16924 }, Jump { location: 16960 }, Load { destination: Relative(39), source_pointer: Relative(9) }, Load { destination: Relative(40), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(41), source: Direct(32773) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(45), op: Add, bit_size: U32, lhs: Relative(44), rhs: Relative(42) }, Store { destination_pointer: Relative(45), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(41) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(39), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(43) }, Store { destination_pointer: Relative(44), source: Relative(4) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(43), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(42), source: Direct(32773) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(41) }, Store { destination_pointer: Relative(44), source: Relative(7) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(42) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(41), source: Direct(32773) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(39) }, Store { destination_pointer: Relative(44), source: Relative(5) }, Store { destination_pointer: Relative(9), source: Relative(41) }, Store { destination_pointer: Relative(10), source: Relative(40) }, Store { destination_pointer: Relative(38), source: Direct(32840) }, Jump { location: 16960 }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32841) }, Mov { destination: Relative(36), source: Relative(39) }, Jump { location: 16845 }, Load { destination: Relative(38), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(39), op: LessThan, bit_size: U32, lhs: Relative(36), rhs: Relative(38) }, JumpIf { condition: Relative(39), location: 16967 }, Jump { location: 16990 }, Load { destination: Relative(38), source_pointer: Relative(37) }, Load { destination: Relative(39), source_pointer: Relative(41) }, Load { destination: Relative(40), source_pointer: Relative(42) }, Load { destination: Relative(44), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(39), rhs: Direct(2) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(36) }, Load { destination: Relative(45), source_pointer: Relative(47) }, BinaryIntOp { destination: Relative(47), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(47), rhs: Relative(36) }, Load { destination: Relative(46), source_pointer: Relative(48) }, BinaryFieldOp { destination: Relative(47), op: Add, lhs: Relative(45), rhs: Relative(46) }, Mov { destination: Direct(32771), source: Relative(39) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(45), source: Direct(32773) }, BinaryIntOp { destination: Relative(46), op: Add, bit_size: U32, lhs: Relative(45), rhs: Direct(2) }, BinaryIntOp { destination: Relative(48), op: Add, bit_size: U32, lhs: Relative(46), rhs: Relative(36) }, Store { destination_pointer: Relative(48), source: Relative(47) }, Store { destination_pointer: Relative(37), source: Relative(38) }, Store { destination_pointer: Relative(41), source: Relative(45) }, Store { destination_pointer: Relative(42), source: Relative(40) }, Store { destination_pointer: Relative(43), source: Relative(44) }, Jump { location: 16990 }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32841) }, Mov { destination: Relative(36), source: Relative(38) }, Jump { location: 16809 }, Load { destination: Relative(10), source_pointer: Relative(9) }, JumpIf { condition: Relative(10), location: 17050 }, Jump { location: 16996 }, Load { destination: Relative(10), source_pointer: Relative(4) }, Const { destination: Relative(35), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(35), rhs: Relative(10) }, Not { destination: Relative(36), source: Relative(36), bit_size: U1 }, JumpIf { condition: Relative(36), location: 17002 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, Store { destination_pointer: Relative(4), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(37), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(36), op: Equals, bit_size: U32, lhs: Relative(37), rhs: Relative(2) }, JumpIf { condition: Relative(36), location: 17012 }, BinaryIntOp { destination: Relative(39), op: Div, bit_size: U32, lhs: Relative(10), rhs: Relative(2) }, BinaryIntOp { destination: Relative(38), op: Equals, bit_size: U32, lhs: Relative(39), rhs: Relative(2) }, JumpIf { condition: Relative(38), location: 17012 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(10) }, BinaryIntOp { destination: Relative(37), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(36) }, JumpIf { condition: Relative(37), location: 17016 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(10), op: Div, bit_size: U32, lhs: Relative(36), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(36), op: Add, bit_size: U32, lhs: Relative(8), rhs: Relative(10) }, BinaryIntOp { destination: Relative(37), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(36) }, JumpIf { condition: Relative(37), location: 17021 }, Call { location: 17854 }, Const { destination: Relative(37), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(38), op: Div, bit_size: U32, lhs: Relative(36), rhs: Relative(37) }, BinaryIntOp { destination: Relative(39), op: Mul, bit_size: U32, lhs: Relative(38), rhs: Relative(37) }, BinaryIntOp { destination: Relative(10), op: Sub, bit_size: U32, lhs: Relative(36), rhs: Relative(39) }, BinaryIntOp { destination: Relative(36), op: LessThan, bit_size: U32, lhs: Relative(10), rhs: Relative(11) }, JumpIf { condition: Relative(36), location: 17028 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U32, lhs: Relative(10), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Relative(36) }, Load { destination: Relative(10), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(37) }, Load { destination: Relative(38), source_pointer: Relative(40) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(36), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(39), rhs: Relative(37) }, Load { destination: Relative(36), source_pointer: Relative(40) }, Not { destination: Relative(37), source: Relative(36), bit_size: U1 }, BinaryIntOp { destination: Relative(36), op: Mul, bit_size: U1, lhs: Relative(37), rhs: Relative(10) }, JumpIf { condition: Relative(36), location: 17044 }, Jump { location: 17050 }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(38), rhs: Relative(3) }, JumpIf { condition: Relative(10), location: 17047 }, Jump { location: 17050 }, Store { destination_pointer: Relative(7), source: Direct(32840) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, Jump { location: 17050 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 666 }, Load { destination: Relative(8), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(9), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(8) }, JumpIf { condition: Relative(9), location: 17057 }, Jump { location: 17080 }, Load { destination: Relative(8), source_pointer: Relative(35) }, Load { destination: Relative(9), source_pointer: Relative(36) }, Load { destination: Relative(10), source_pointer: Relative(37) }, Load { destination: Relative(39), source_pointer: Relative(38) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, Load { destination: Relative(40), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(2) }, Load { destination: Relative(41), source_pointer: Relative(43) }, BinaryFieldOp { destination: Relative(42), op: Add, lhs: Relative(40), rhs: Relative(41) }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, Store { destination_pointer: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(35), source: Relative(8) }, Store { destination_pointer: Relative(36), source: Relative(40) }, Store { destination_pointer: Relative(37), source: Relative(10) }, Store { destination_pointer: Relative(38), source: Relative(39) }, Jump { location: 17080 }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(8) }, Jump { location: 630 }, Load { destination: Relative(10), source_pointer: Relative(9) }, JumpIf { condition: Relative(10), location: 17182 }, Jump { location: 17086 }, Load { destination: Relative(10), source_pointer: Relative(7) }, Load { destination: Relative(35), source_pointer: Relative(10) }, Const { destination: Relative(36), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(36), rhs: Relative(35) }, Not { destination: Relative(37), source: Relative(37), bit_size: U1 }, JumpIf { condition: Relative(37), location: 17093 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, Store { destination_pointer: Relative(10), source: Relative(35) }, BinaryIntOp { destination: Relative(35), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(38), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(37), op: Equals, bit_size: U32, lhs: Relative(38), rhs: Relative(2) }, JumpIf { condition: Relative(37), location: 17103 }, BinaryIntOp { destination: Relative(40), op: Div, bit_size: U32, lhs: Relative(35), rhs: Relative(2) }, BinaryIntOp { destination: Relative(39), op: Equals, bit_size: U32, lhs: Relative(40), rhs: Relative(2) }, JumpIf { condition: Relative(39), location: 17103 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(35) }, BinaryIntOp { destination: Relative(38), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(37) }, JumpIf { condition: Relative(38), location: 17107 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(35), op: Div, bit_size: U32, lhs: Relative(37), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(4), rhs: Relative(35) }, BinaryIntOp { destination: Relative(38), op: LessThanEquals, bit_size: U32, lhs: Relative(4), rhs: Relative(37) }, JumpIf { condition: Relative(38), location: 17112 }, Call { location: 17854 }, Const { destination: Relative(38), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(39), op: Div, bit_size: U32, lhs: Relative(37), rhs: Relative(38) }, BinaryIntOp { destination: Relative(40), op: Mul, bit_size: U32, lhs: Relative(39), rhs: Relative(38) }, BinaryIntOp { destination: Relative(35), op: Sub, bit_size: U32, lhs: Relative(37), rhs: Relative(40) }, BinaryIntOp { destination: Relative(37), op: LessThan, bit_size: U32, lhs: Relative(35), rhs: Relative(11) }, JumpIf { condition: Relative(37), location: 17119 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(37), op: Mul, bit_size: U32, lhs: Relative(35), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(37) }, Load { destination: Relative(35), source_pointer: Relative(39) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Relative(38) }, Load { destination: Relative(39), source_pointer: Relative(41) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(40) }, Load { destination: Relative(41), source_pointer: Relative(43) }, BinaryIntOp { destination: Relative(40), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(44), op: Add, bit_size: U32, lhs: Relative(43), rhs: Relative(40) }, Load { destination: Relative(42), source_pointer: Relative(44) }, Not { destination: Relative(10), source: Relative(42), bit_size: U1 }, BinaryIntOp { destination: Relative(40), op: Mul, bit_size: U1, lhs: Relative(10), rhs: Relative(35) }, JumpIf { condition: Relative(40), location: 17139 }, Jump { location: 17182 }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(39), rhs: Relative(3) }, JumpIf { condition: Relative(10), location: 17142 }, Jump { location: 17182 }, Load { destination: Relative(10), source_pointer: Relative(7) }, Load { destination: Relative(36), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(37) }, Store { destination_pointer: Relative(43), source: Relative(35) }, Mov { destination: Direct(32771), source: Relative(40) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(10), source: Direct(32773) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(37), op: Add, bit_size: U32, lhs: Relative(35), rhs: Relative(38) }, Store { destination_pointer: Relative(37), source: Relative(39) }, BinaryIntOp { destination: Relative(35), op: Add, bit_size: U32, lhs: Relative(38), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(37), source: Direct(32773) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(37), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(35) }, Store { destination_pointer: Relative(39), source: Relative(41) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(37) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(35), source: Direct(32773) }, BinaryIntOp { destination: Relative(38), op: Add, bit_size: U32, lhs: Relative(35), rhs: Direct(2) }, BinaryIntOp { destination: Relative(39), op: Add, bit_size: U32, lhs: Relative(38), rhs: Relative(10) }, Store { destination_pointer: Relative(39), source: Direct(32840) }, BinaryIntOp { destination: Relative(10), op: Sub, bit_size: U32, lhs: Relative(36), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(37), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(36) }, JumpIf { condition: Relative(37), location: 17178 }, Call { location: 17882 }, Store { destination_pointer: Relative(7), source: Relative(35) }, Store { destination_pointer: Relative(8), source: Relative(10) }, Store { destination_pointer: Relative(9), source: Direct(32840) }, Jump { location: 17182 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(10) }, Jump { location: 565 }, Load { destination: Relative(4), source_pointer: Relative(36) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(4) }, JumpIf { condition: Relative(10), location: 17189 }, Jump { location: 17212 }, Load { destination: Relative(4), source_pointer: Relative(9) }, Load { destination: Relative(10), source_pointer: Relative(35) }, Load { destination: Relative(38), source_pointer: Relative(36) }, Load { destination: Relative(39), source_pointer: Relative(37) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, Load { destination: Relative(40), source_pointer: Relative(42) }, BinaryIntOp { destination: Relative(42), op: Add, bit_size: U32, lhs: Relative(4), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(42), rhs: Relative(2) }, Load { destination: Relative(41), source_pointer: Relative(43) }, BinaryFieldOp { destination: Relative(42), op: Add, lhs: Relative(40), rhs: Relative(41) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(40), source: Direct(32773) }, BinaryIntOp { destination: Relative(41), op: Add, bit_size: U32, lhs: Relative(40), rhs: Direct(2) }, BinaryIntOp { destination: Relative(43), op: Add, bit_size: U32, lhs: Relative(41), rhs: Relative(2) }, Store { destination_pointer: Relative(43), source: Relative(42) }, Store { destination_pointer: Relative(9), source: Relative(4) }, Store { destination_pointer: Relative(35), source: Relative(40) }, Store { destination_pointer: Relative(36), source: Relative(38) }, Store { destination_pointer: Relative(37), source: Relative(39) }, Jump { location: 17212 }, BinaryIntOp { destination: Relative(4), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(4) }, Jump { location: 529 }, Load { destination: Relative(15), source_pointer: Relative(13) }, JumpIf { condition: Relative(15), location: 17277 }, Jump { location: 17218 }, Load { destination: Relative(15), source_pointer: Relative(9) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Not { destination: Relative(17), source: Relative(17), bit_size: U1 }, JumpIf { condition: Relative(17), location: 17224 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, Store { destination_pointer: Relative(9), source: Relative(15) }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, JumpIf { condition: Relative(17), location: 17234 }, BinaryIntOp { destination: Relative(20), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(2) }, BinaryIntOp { destination: Relative(19), op: Equals, bit_size: U32, lhs: Relative(20), rhs: Relative(2) }, JumpIf { condition: Relative(19), location: 17234 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 17238 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(15), op: Div, bit_size: U32, lhs: Relative(17), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(15) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(12), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 17243 }, Call { location: 17854 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(19), op: Div, bit_size: U32, lhs: Relative(17), rhs: Relative(18) }, BinaryIntOp { destination: Relative(20), op: Mul, bit_size: U32, lhs: Relative(19), rhs: Relative(18) }, BinaryIntOp { destination: Relative(15), op: Sub, bit_size: U32, lhs: Relative(17), rhs: Relative(20) }, BinaryIntOp { destination: Relative(17), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Relative(11) }, JumpIf { condition: Relative(17), location: 17250 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U32, lhs: Relative(15), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(17) }, Load { destination: Relative(15), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, Load { destination: Relative(20), source_pointer: Relative(22) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(18) }, Load { destination: Relative(17), source_pointer: Relative(22) }, Not { destination: Relative(18), source: Relative(17), bit_size: U1 }, BinaryIntOp { destination: Relative(17), op: Mul, bit_size: U1, lhs: Relative(18), rhs: Relative(15) }, JumpIf { condition: Relative(17), location: 17270 }, Jump { location: 17277 }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(19), rhs: Relative(3) }, JumpIf { condition: Relative(15), location: 17273 }, Jump { location: 17277 }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Store { destination_pointer: Relative(14), source: Relative(20) }, Store { destination_pointer: Relative(13), source: Direct(32840) }, Jump { location: 17277 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(15) }, Jump { location: 327 }, Load { destination: Relative(12), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(12) }, JumpIf { condition: Relative(13), location: 17284 }, Jump { location: 17307 }, Load { destination: Relative(12), source_pointer: Relative(17) }, Load { destination: Relative(13), source_pointer: Relative(18) }, Load { destination: Relative(15), source_pointer: Relative(19) }, Load { destination: Relative(16), source_pointer: Relative(20) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(2) }, Load { destination: Relative(21), source_pointer: Relative(23) }, BinaryIntOp { destination: Relative(23), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(23), rhs: Relative(2) }, Load { destination: Relative(22), source_pointer: Relative(24) }, BinaryFieldOp { destination: Relative(23), op: Add, lhs: Relative(21), rhs: Relative(22) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(21), source: Direct(32773) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Direct(2) }, BinaryIntOp { destination: Relative(24), op: Add, bit_size: U32, lhs: Relative(22), rhs: Relative(2) }, Store { destination_pointer: Relative(24), source: Relative(23) }, Store { destination_pointer: Relative(17), source: Relative(12) }, Store { destination_pointer: Relative(18), source: Relative(21) }, Store { destination_pointer: Relative(19), source: Relative(15) }, Store { destination_pointer: Relative(20), source: Relative(16) }, Jump { location: 17307 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 291 }, Load { destination: Relative(12), source_pointer: Relative(10) }, JumpIf { condition: Relative(12), location: 17419 }, Jump { location: 17313 }, Load { destination: Relative(12), source_pointer: Relative(7) }, Load { destination: Relative(13), source_pointer: Relative(12) }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(14), rhs: Relative(13) }, Not { destination: Relative(15), source: Relative(15), bit_size: U1 }, JumpIf { condition: Relative(15), location: 17320 }, Call { location: 17458 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(13) }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U32, lhs: Relative(2), rhs: Relative(2) }, Const { destination: Relative(16), bit_size: Integer(U32), value: 0 }, BinaryIntOp { destination: Relative(15), op: Equals, bit_size: U32, lhs: Relative(16), rhs: Relative(2) }, JumpIf { condition: Relative(15), location: 17330 }, BinaryIntOp { destination: Relative(18), op: Div, bit_size: U32, lhs: Relative(13), rhs: Relative(2) }, BinaryIntOp { destination: Relative(17), op: Equals, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, JumpIf { condition: Relative(17), location: 17330 }, Call { location: 17473 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(2), rhs: Relative(13) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(2), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 17334 }, Call { location: 17854 }, BinaryIntOp { destination: Relative(13), op: Div, bit_size: U32, lhs: Relative(15), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(13) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(9), rhs: Relative(15) }, JumpIf { condition: Relative(16), location: 17339 }, Call { location: 17854 }, Const { destination: Relative(16), bit_size: Integer(U32), value: 8 }, BinaryIntOp { destination: Relative(17), op: Div, bit_size: U32, lhs: Relative(15), rhs: Relative(16) }, BinaryIntOp { destination: Relative(18), op: Mul, bit_size: U32, lhs: Relative(17), rhs: Relative(16) }, BinaryIntOp { destination: Relative(13), op: Sub, bit_size: U32, lhs: Relative(15), rhs: Relative(18) }, BinaryIntOp { destination: Relative(15), op: LessThan, bit_size: U32, lhs: Relative(13), rhs: Relative(11) }, JumpIf { condition: Relative(15), location: 17346 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U32, lhs: Relative(13), rhs: Direct(32836) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(15) }, Load { destination: Relative(13), source_pointer: Relative(17) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(16) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Mov { destination: Relative(12), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(12), source: Relative(5) }, Not { destination: Relative(18), source: Relative(13), bit_size: U1 }, BinaryIntOp { destination: Relative(13), op: Or, bit_size: U1, lhs: Relative(19), rhs: Relative(18) }, JumpIf { condition: Relative(13), location: 17370 }, Jump { location: 17365 }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(17), rhs: Relative(3) }, JumpIf { condition: Relative(13), location: 17368 }, Jump { location: 17380 }, Store { destination_pointer: Relative(12), source: Direct(32840) }, Jump { location: 17380 }, Store { destination_pointer: Relative(12), source: Direct(32840) }, Load { destination: Relative(13), source_pointer: Relative(7) }, Load { destination: Relative(14), source_pointer: Relative(8) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(18), op: LessThanEquals, bit_size: U32, lhs: Relative(14), rhs: Relative(17) }, JumpIf { condition: Relative(18), location: 17377 }, Call { location: 17854 }, Store { destination_pointer: Relative(7), source: Relative(13) }, Store { destination_pointer: Relative(8), source: Relative(17) }, Jump { location: 17380 }, Load { destination: Relative(13), source_pointer: Relative(12) }, JumpIf { condition: Relative(13), location: 17383 }, Jump { location: 17419 }, Load { destination: Relative(12), source_pointer: Relative(7) }, Load { destination: Relative(13), source_pointer: Relative(8) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Store { destination_pointer: Relative(18), source: Direct(32840) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(12), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(16) }, Store { destination_pointer: Relative(17), source: Relative(3) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(16), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(12) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(14) }, Store { destination_pointer: Relative(17), source: Relative(4) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(32841) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 33 }, Call { location: 17860 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(12) }, Store { destination_pointer: Relative(17), source: Relative(5) }, Store { destination_pointer: Relative(7), source: Relative(14) }, Store { destination_pointer: Relative(8), source: Relative(13) }, Store { destination_pointer: Relative(10), source: Direct(32840) }, Jump { location: 17419 }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(12) }, Jump { location: 215 }, Load { destination: Relative(9), source_pointer: Relative(13) }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(9) }, JumpIf { condition: Relative(10), location: 17426 }, Jump { location: 17449 }, Load { destination: Relative(9), source_pointer: Relative(11) }, Load { destination: Relative(10), source_pointer: Relative(12) }, Load { destination: Relative(15), source_pointer: Relative(13) }, Load { destination: Relative(16), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(2) }, Load { destination: Relative(18), source_pointer: Relative(20) }, BinaryFieldOp { destination: Relative(19), op: Add, lhs: Relative(17), rhs: Relative(18) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 5 }, Call { location: 17860 }, Mov { destination: Relative(17), source: Direct(32773) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(2) }, Store { destination_pointer: Relative(20), source: Relative(19) }, Store { destination_pointer: Relative(11), source: Relative(9) }, Store { destination_pointer: Relative(12), source: Relative(17) }, Store { destination_pointer: Relative(13), source: Relative(15) }, Store { destination_pointer: Relative(14), source: Relative(16) }, Jump { location: 17449 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(2), rhs: Direct(32841) }, Mov { destination: Relative(2), source: Relative(9) }, Jump { location: 178 }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 30720 }, BinaryIntOp { destination: Direct(32771), op: LessThan, bit_size: U32, lhs: Direct(0), rhs: Direct(32772) }, JumpIf { condition: Direct(32771), location: 17457 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17843811134343075018 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12049594436772143978 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 9417307514377997680 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 12632160011611521689 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14479745468926698352 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 11665340019033496436 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 7233212735005103307 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16850003084350092401 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 17677620431177272765 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 1359149291226868540 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16567169223151679177 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 6895136539169241630 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 955212737754845985 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 15583592523844085222 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16954218183513903507 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Call { location: 17452 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 17504 }, Jump { location: 17579 }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, Const { destination: Relative(8), bit_size: Field, value: 31 }, BinaryFieldOp { destination: Relative(9), op: Equals, lhs: Relative(4), rhs: Relative(8) }, BinaryFieldOp { destination: Relative(8), op: Equals, lhs: Relative(4), rhs: Direct(32844) }, BinaryFieldOp { destination: Relative(10), op: Equals, lhs: Relative(4), rhs: Direct(32845) }, BinaryFieldOp { destination: Relative(11), op: Equals, lhs: Relative(4), rhs: Direct(32847) }, BinaryFieldOp { destination: Relative(12), op: Equals, lhs: Relative(4), rhs: Direct(32848) }, Const { destination: Relative(13), bit_size: Field, value: 174 }, Mov { destination: Relative(5), source: Relative(2) }, Jump { location: 17517 }, BinaryIntOp { destination: Relative(14), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(14), location: 17580 }, Jump { location: 17520 }, Load { destination: Relative(5), source_pointer: Relative(1) }, Load { destination: Relative(8), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(8), rhs: Direct(32837) }, JumpIf { condition: Relative(6), location: 17525 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(8) }, Load { destination: Relative(6), source_pointer: Relative(10) }, JumpIf { condition: Relative(7), location: 17530 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(9), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Relative(3) }, Load { destination: Relative(7), source_pointer: Relative(10) }, Mov { destination: Direct(32771), source: Relative(5) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 17860 }, Mov { destination: Relative(9), source: Direct(32773) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(10), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(7) }, Mov { destination: Direct(32771), source: Relative(9) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 17860 }, Mov { destination: Relative(5), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(3) }, Store { destination_pointer: Relative(10), source: Relative(6) }, Store { destination_pointer: Relative(1), source: Relative(5) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(8) }, JumpIf { condition: Relative(5), location: 17551 }, Jump { location: 17565 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U32, lhs: Relative(8), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(8) }, JumpIf { condition: Relative(6), location: 17555 }, Call { location: 17882 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 9 }, Mov { destination: Relative(9), source: Direct(0) }, Mov { destination: Relative(10), source: Relative(1) }, Mov { destination: Relative(11), source: Relative(2) }, Mov { destination: Relative(12), source: Relative(5) }, Mov { destination: Relative(13), source: Relative(4) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(6) }, Call { location: 17500 }, Mov { destination: Direct(0), source: Relative(0) }, Jump { location: 17565 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Relative(8), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 17569 }, Call { location: 17854 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 6 }, Mov { destination: Relative(6), source: Direct(0) }, Mov { destination: Relative(7), source: Relative(1) }, Mov { destination: Relative(8), source: Relative(2) }, Mov { destination: Relative(9), source: Relative(3) }, Mov { destination: Relative(10), source: Relative(4) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(5) }, Call { location: 17500 }, Mov { destination: Direct(0), source: Relative(0) }, Jump { location: 17579 }, Return, Load { destination: Relative(15), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Direct(32837) }, JumpIf { condition: Relative(16), location: 17584 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(5) }, Load { destination: Relative(16), source_pointer: Relative(18) }, JumpIf { condition: Relative(7), location: 17589 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(3) }, Load { destination: Relative(17), source_pointer: Relative(19) }, JumpIf { condition: Relative(9), location: 17619 }, Jump { location: 17594 }, BinaryFieldOp { destination: Relative(15), op: LessThan, lhs: Relative(16), rhs: Relative(17) }, JumpIf { condition: Relative(8), location: 17617 }, Jump { location: 17597 }, JumpIf { condition: Relative(10), location: 17615 }, Jump { location: 17599 }, JumpIf { condition: Relative(11), location: 17613 }, Jump { location: 17601 }, JumpIf { condition: Relative(12), location: 17611 }, Jump { location: 17603 }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(4), rhs: Relative(13) }, JumpIf { condition: Relative(15), location: 17607 }, Const { destination: Relative(18), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(18) } }, BinaryFieldOp { destination: Relative(15), op: Mul, lhs: Relative(16), rhs: Relative(17) }, BinaryFieldOp { destination: Relative(16), op: Equals, lhs: Relative(15), rhs: Direct(32843) }, Mov { destination: Relative(14), source: Relative(16) }, Jump { location: 17626 }, Mov { destination: Relative(14), source: Relative(15) }, Jump { location: 17626 }, Mov { destination: Relative(14), source: Relative(15) }, Jump { location: 17626 }, Mov { destination: Relative(14), source: Relative(15) }, Jump { location: 17626 }, Mov { destination: Relative(14), source: Relative(15) }, Jump { location: 17626 }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(16), rhs: Direct(32839) }, Not { destination: Relative(16), source: Relative(15), bit_size: U1 }, BinaryFieldOp { destination: Relative(15), op: Equals, lhs: Relative(17), rhs: Direct(32839) }, Not { destination: Relative(17), source: Relative(15), bit_size: U1 }, BinaryIntOp { destination: Relative(15), op: Mul, bit_size: U1, lhs: Relative(16), rhs: Relative(17) }, Mov { destination: Relative(14), source: Relative(15) }, Jump { location: 17626 }, JumpIf { condition: Relative(14), location: 17628 }, Jump { location: 17660 }, Load { destination: Relative(14), source_pointer: Relative(1) }, Load { destination: Relative(15), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(16), op: LessThan, bit_size: U32, lhs: Relative(15), rhs: Direct(32837) }, JumpIf { condition: Relative(16), location: 17633 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(5) }, Load { destination: Relative(17), source_pointer: Relative(19) }, Mov { destination: Direct(32771), source: Relative(14) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 17860 }, Mov { destination: Relative(18), source: Direct(32773) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Direct(2) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(19), rhs: Relative(15) }, Store { destination_pointer: Relative(20), source: Relative(17) }, Mov { destination: Direct(32771), source: Relative(18) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 4 }, Call { location: 17860 }, Mov { destination: Relative(14), source: Direct(32773) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(14), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(5) }, Store { destination_pointer: Relative(19), source: Relative(16) }, Store { destination_pointer: Relative(1), source: Relative(14) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(16), op: LessThanEquals, bit_size: U32, lhs: Relative(15), rhs: Relative(14) }, JumpIf { condition: Relative(16), location: 17658 }, Call { location: 17854 }, Store { destination_pointer: Relative(6), source: Relative(14) }, Jump { location: 17660 }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32841) }, Mov { destination: Relative(5), source: Relative(14) }, Jump { location: 17517 }, Call { location: 17452 }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Relative(2), rhs: Relative(3) }, JumpIf { condition: Relative(5), location: 17667 }, Jump { location: 17760 }, Mov { destination: Relative(6), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(2) }, Store { destination_pointer: Relative(6), source: Relative(2) }, BinaryIntOp { destination: Relative(7), op: LessThan, bit_size: U32, lhs: Relative(3), rhs: Direct(32837) }, BinaryIntOp { destination: Relative(8), op: Mul, bit_size: U32, lhs: Relative(3), rhs: Direct(32842) }, BinaryFieldOp { destination: Relative(9), op: Equals, lhs: Relative(4), rhs: Direct(32846) }, Mov { destination: Relative(5), source: Relative(2) }, Jump { location: 17675 }, BinaryIntOp { destination: Relative(10), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Relative(3) }, JumpIf { condition: Relative(10), location: 17761 }, Jump { location: 17678 }, Load { destination: Relative(5), source_pointer: Relative(1) }, Load { destination: Relative(9), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(6), op: LessThan, bit_size: U32, lhs: Relative(9), rhs: Direct(32837) }, JumpIf { condition: Relative(6), location: 17683 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(6), op: Mul, bit_size: U32, lhs: Relative(9), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(11), rhs: Relative(6) }, Load { destination: Relative(10), source_pointer: Relative(12) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(11) }, Load { destination: Relative(12), source_pointer: Relative(14) }, JumpIf { condition: Relative(7), location: 17693 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(8) }, Load { destination: Relative(7), source_pointer: Relative(14) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(8), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Load { destination: Relative(14), source_pointer: Relative(16) }, Mov { destination: Direct(32771), source: Relative(5) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(15), source: Direct(32773) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(16), rhs: Relative(6) }, Store { destination_pointer: Relative(17), source: Relative(7) }, Mov { destination: Direct(32771), source: Relative(15) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(5), source: Direct(32773) }, BinaryIntOp { destination: Relative(6), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Relative(11) }, Store { destination_pointer: Relative(7), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(5) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(6), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(6), rhs: Direct(2) }, BinaryIntOp { destination: Relative(11), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(8) }, Store { destination_pointer: Relative(11), source: Relative(10) }, Mov { destination: Direct(32771), source: Relative(6) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(5), source: Direct(32773) }, BinaryIntOp { destination: Relative(7), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(2) }, BinaryIntOp { destination: Relative(8), op: Add, bit_size: U32, lhs: Relative(7), rhs: Relative(13) }, Store { destination_pointer: Relative(8), source: Relative(12) }, Store { destination_pointer: Relative(1), source: Relative(5) }, BinaryIntOp { destination: Relative(5), op: LessThan, bit_size: U32, lhs: Direct(32838), rhs: Relative(9) }, JumpIf { condition: Relative(5), location: 17732 }, Jump { location: 17746 }, BinaryIntOp { destination: Relative(5), op: Sub, bit_size: U32, lhs: Relative(9), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(6), op: LessThanEquals, bit_size: U32, lhs: Direct(32841), rhs: Relative(9) }, JumpIf { condition: Relative(6), location: 17736 }, Call { location: 17882 }, Const { destination: Relative(6), bit_size: Integer(U32), value: 10 }, Mov { destination: Relative(10), source: Direct(0) }, Mov { destination: Relative(11), source: Relative(1) }, Mov { destination: Relative(12), source: Relative(2) }, Mov { destination: Relative(13), source: Relative(5) }, Mov { destination: Relative(14), source: Relative(4) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(6) }, Call { location: 17663 }, Mov { destination: Direct(0), source: Relative(0) }, Jump { location: 17746 }, BinaryIntOp { destination: Relative(2), op: Add, bit_size: U32, lhs: Relative(9), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(5), op: LessThanEquals, bit_size: U32, lhs: Relative(9), rhs: Relative(2) }, JumpIf { condition: Relative(5), location: 17750 }, Call { location: 17854 }, Const { destination: Relative(5), bit_size: Integer(U32), value: 6 }, Mov { destination: Relative(6), source: Direct(0) }, Mov { destination: Relative(7), source: Relative(1) }, Mov { destination: Relative(8), source: Relative(2) }, Mov { destination: Relative(9), source: Relative(3) }, Mov { destination: Relative(10), source: Relative(4) }, BinaryIntOp { destination: Direct(0), op: Add, bit_size: U32, lhs: Direct(0), rhs: Relative(5) }, Call { location: 17663 }, Mov { destination: Direct(0), source: Relative(0) }, Jump { location: 17760 }, Return, Load { destination: Relative(11), source_pointer: Relative(1) }, BinaryIntOp { destination: Relative(12), op: LessThan, bit_size: U32, lhs: Relative(5), rhs: Direct(32837) }, JumpIf { condition: Relative(12), location: 17765 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(12), op: Mul, bit_size: U32, lhs: Relative(5), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(14), rhs: Relative(12) }, Load { destination: Relative(13), source_pointer: Relative(15) }, JumpIf { condition: Relative(7), location: 17771 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(8) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryFieldOp { destination: Relative(11), op: LessThan, lhs: Relative(13), rhs: Relative(14) }, JumpIf { condition: Relative(9), location: 17783 }, Jump { location: 17777 }, BinaryFieldOp { destination: Relative(13), op: Equals, lhs: Relative(4), rhs: Direct(32849) }, JumpIf { condition: Relative(13), location: 17781 }, Const { destination: Relative(14), bit_size: Integer(U32), value: 0 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Relative(14) } }, Mov { destination: Relative(10), source: Relative(11) }, Jump { location: 17785 }, Mov { destination: Relative(10), source: Relative(11) }, Jump { location: 17785 }, JumpIf { condition: Relative(10), location: 17787 }, Jump { location: 17842 }, Load { destination: Relative(10), source_pointer: Relative(1) }, Load { destination: Relative(11), source_pointer: Relative(6) }, BinaryIntOp { destination: Relative(13), op: LessThan, bit_size: U32, lhs: Relative(11), rhs: Direct(32837) }, JumpIf { condition: Relative(13), location: 17792 }, Call { location: 17857 }, BinaryIntOp { destination: Relative(13), op: Mul, bit_size: U32, lhs: Relative(11), rhs: Direct(32842) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(16), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(13) }, Load { destination: Relative(14), source_pointer: Relative(16) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(17), rhs: Relative(15) }, Load { destination: Relative(16), source_pointer: Relative(18) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(19), op: Add, bit_size: U32, lhs: Relative(18), rhs: Relative(12) }, Load { destination: Relative(17), source_pointer: Relative(19) }, BinaryIntOp { destination: Relative(18), op: Add, bit_size: U32, lhs: Relative(12), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(20), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Relative(18) }, Load { destination: Relative(19), source_pointer: Relative(21) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(20), source: Direct(32773) }, BinaryIntOp { destination: Relative(21), op: Add, bit_size: U32, lhs: Relative(20), rhs: Direct(2) }, BinaryIntOp { destination: Relative(22), op: Add, bit_size: U32, lhs: Relative(21), rhs: Relative(13) }, Store { destination_pointer: Relative(22), source: Relative(17) }, Mov { destination: Direct(32771), source: Relative(20) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(10), source: Direct(32773) }, BinaryIntOp { destination: Relative(13), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(13), rhs: Relative(15) }, Store { destination_pointer: Relative(17), source: Relative(19) }, Mov { destination: Direct(32771), source: Relative(10) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(13), source: Direct(32773) }, BinaryIntOp { destination: Relative(15), op: Add, bit_size: U32, lhs: Relative(13), rhs: Direct(2) }, BinaryIntOp { destination: Relative(17), op: Add, bit_size: U32, lhs: Relative(15), rhs: Relative(12) }, Store { destination_pointer: Relative(17), source: Relative(14) }, Mov { destination: Direct(32771), source: Relative(13) }, Const { destination: Direct(32772), bit_size: Integer(U32), value: 7 }, Call { location: 17860 }, Mov { destination: Relative(10), source: Direct(32773) }, BinaryIntOp { destination: Relative(12), op: Add, bit_size: U32, lhs: Relative(10), rhs: Direct(2) }, BinaryIntOp { destination: Relative(14), op: Add, bit_size: U32, lhs: Relative(12), rhs: Relative(18) }, Store { destination_pointer: Relative(14), source: Relative(16) }, Store { destination_pointer: Relative(1), source: Relative(10) }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(11), rhs: Direct(32841) }, BinaryIntOp { destination: Relative(12), op: LessThanEquals, bit_size: U32, lhs: Relative(11), rhs: Relative(10) }, JumpIf { condition: Relative(12), location: 17840 }, Call { location: 17854 }, Store { destination_pointer: Relative(6), source: Relative(10) }, Jump { location: 17842 }, BinaryIntOp { destination: Relative(10), op: Add, bit_size: U32, lhs: Relative(5), rhs: Direct(32841) }, Mov { destination: Relative(5), source: Relative(10) }, Jump { location: 17675 }, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 16291778408346427203 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 3078107792722303059 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 10951819287827820458 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5019202896831570965 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 14225679739041873922 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, Load { destination: Direct(32774), source_pointer: Direct(32771) }, BinaryIntOp { destination: Direct(32775), op: Equals, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, JumpIf { condition: Direct(32775), location: 17864 }, Jump { location: 17866 }, Mov { destination: Direct(32773), source: Direct(32771) }, Jump { location: 17881 }, Mov { destination: Direct(32773), source: Direct(1) }, BinaryIntOp { destination: Direct(1), op: Add, bit_size: U32, lhs: Direct(1), rhs: Direct(32772) }, BinaryIntOp { destination: Direct(32777), op: Add, bit_size: U32, lhs: Direct(32771), rhs: Direct(32772) }, Mov { destination: Direct(32778), source: Direct(32771) }, Mov { destination: Direct(32779), source: Direct(32773) }, BinaryIntOp { destination: Direct(32780), op: Equals, bit_size: U32, lhs: Direct(32778), rhs: Direct(32777) }, JumpIf { condition: Direct(32780), location: 17878 }, Load { destination: Direct(32776), source_pointer: Direct(32778) }, Store { destination_pointer: Direct(32779), source: Direct(32776) }, BinaryIntOp { destination: Direct(32778), op: Add, bit_size: U32, lhs: Direct(32778), rhs: Direct(2) }, BinaryIntOp { destination: Direct(32779), op: Add, bit_size: U32, lhs: Direct(32779), rhs: Direct(2) }, Jump { location: 17871 }, IndirectConst { destination_pointer: Direct(32773), bit_size: Integer(U32), value: 1 }, BinaryIntOp { destination: Direct(32774), op: Sub, bit_size: U32, lhs: Direct(32774), rhs: Direct(2) }, Jump { location: 17881 }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 2920182694213909827 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return, IndirectConst { destination_pointer: Direct(1), bit_size: Integer(U64), value: 5727012404371710682 }, Trap { revert_data: HeapVector { pointer: Direct(1), size: Direct(2) } }, Return]",
    ""
  ],
  "debug_symbols": "",
  "file_map": {
    "3": {
      "source": "use crate::cmp::{Eq, Ord};\nuse crate::convert::From;\nuse crate::runtime::is_unconstrained;\n\nmod check_shuffle;\nmod quicksort;\n\nimpl<T, let N: u32> [T; N] {\n    /// Returns the length of this array.\n    ///\n    /// ```noir\n    /// fn len(self) -> Field\n    /// ```\n    ///\n    /// example\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let array = [42, 42];\n    ///     assert(array.len() == 2);\n    /// }\n    /// ```\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Returns this array as a slice.\n    ///\n    /// ```noir\n    /// let array = [1, 2];\n    /// let slice = array.as_slice();\n    /// assert_eq(slice, &[1, 2]);\n    /// ```\n    #[builtin(as_slice)]\n    pub fn as_slice(self) -> [T] {}\n\n    /// Applies a function to each element of this array, returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.map(|a| a * 2);\n    /// assert_eq(b, [2, 4, 6]);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array along with its index,\n    /// returning a new array containing the mapped elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let b = a.mapi(|i, a| i + a * 2);\n    /// assert_eq(b, [2, 5, 8]);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> [U; N] {\n        let uninitialized = crate::mem::zeroed();\n        let mut ret = [uninitialized; N];\n\n        for i in 0..self.len() {\n            ret[i] = f(i, self[i]);\n        }\n\n        ret\n    }\n\n    /// Applies a function to each element of this array.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// let mut i = 0;\n    /// a.for_each(|x| {\n    ///     b[i] = x;\n    ///     i += 1;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        for i in 0..self.len() {\n            f(self[i]);\n        }\n    }\n\n    /// Applies a function to each element of this array along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// let a = [1, 2, 3];\n    /// let mut b = [0; 3];\n    /// a.for_eachi(|i, x| {\n    ///     b[i] = x;\n    /// });\n    /// assert_eq(a, b);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        for i in 0..self.len() {\n            f(i, self[i]);\n        }\n    }\n\n    /// Applies a function to each element of the array, returning the final accumulated value. The first\n    /// parameter is the initial value.\n    ///\n    /// This is a left fold, so the given function will be applied to the accumulator and first element of\n    /// the array, then the second, and so on. For a given call the expected result would be equivalent to:\n    ///\n    /// ```rust\n    /// let a1 = [1];\n    /// let a2 = [1, 2];\n    /// let a3 = [1, 2, 3];\n    ///\n    /// let f = |a, b| a - b;\n    /// a1.fold(10, f); //=> f(10, 1)\n    /// a2.fold(10, f); //=> f(f(10, 1), 2)\n    /// a3.fold(10, f); //=> f(f(f(10, 1), 2), 3)\n    ///\n    /// assert_eq(a3.fold(10, f), 10 - 1 - 2 - 3);\n    /// ```\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    /// Same as fold, but uses the first element as the starting element.\n    ///\n    /// Requires the input array to be non-empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [1, 2, 3, 4];\n    ///     let reduced = arr.reduce(|a, b| a + b);\n    ///     assert(reduced == 10);\n    /// }\n    /// ```\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    /// Returns true if all the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 2];\n    ///     let all = arr.all(|a| a == 2);\n    ///     assert(all);\n    /// }\n    /// ```\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    /// Returns true if any of the elements in this array satisfy the given predicate.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr = [2, 2, 2, 2, 5];\n    ///     let any = arr.any(|a| a == 5);\n    ///     assert(any);\n    /// }\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n\n    /// Concatenates this array with another array.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn main() {\n    ///     let arr1 = [1, 2, 3, 4];\n    ///     let arr2 = [6, 7, 8, 9, 10, 11];\n    ///     let concatenated_arr = arr1.concat(arr2);\n    ///     assert(concatenated_arr == [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    /// }\n    /// ```\n    pub fn concat<let M: u32>(self, array2: [T; M]) -> [T; N + M] {\n        let mut result = [crate::mem::zeroed(); N + M];\n        for i in 0..N {\n            result[i] = self[i];\n        }\n        for i in 0..M {\n            result[i + N] = array2[i];\n        }\n        result\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Ord + Eq,\n{\n    /// Returns a new sorted array. The original array remains untouched. Notice that this function will\n    /// only work for arrays of fields or integers, not for any arbitrary type. This is because the sorting\n    /// logic it uses internally is optimized specifically for these values. If you need a sort function to\n    /// sort any type, you should use the `sort_via` function.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32];\n    ///     let sorted = arr.sort();\n    ///     assert(sorted == [32, 42]);\n    /// }\n    /// ```\n    pub fn sort(self) -> Self {\n        self.sort_via(|a, b| a <= b)\n    }\n}\n\nimpl<T, let N: u32> [T; N]\nwhere\n    T: Eq,\n{\n    /// Returns a new sorted array by sorting it with a custom comparison function.\n    /// The original array remains untouched.\n    /// The ordering function must return true if the first argument should be sorted to be before the second argument or is equal to the second argument.\n    ///\n    /// Using this method with an operator like `<` that does not return `true` for equal values will result in an assertion failure for arrays with equal elements.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let arr = [42, 32]\n    ///     let sorted_ascending = arr.sort_via(|a, b| a <= b);\n    ///     assert(sorted_ascending == [32, 42]); // verifies\n    ///\n    ///     let sorted_descending = arr.sort_via(|a, b| a >= b);\n    ///     assert(sorted_descending == [32, 42]); // does not verify\n    /// }\n    /// ```\n    pub fn sort_via<Env>(self, ordering: fn[Env](T, T) -> bool) -> Self {\n        // Safety: `sorted` array is checked to be:\n        // a. a permutation of `input`'s elements\n        // b. satisfying the predicate `ordering`\n        unsafe {\n            let sorted = quicksort::quicksort(self, ordering);\n\n            if !is_unconstrained() {\n                for i in 0..N - 1 {\n                    assert(\n                        ordering(sorted[i], sorted[i + 1]),\n                        \"Array has not been sorted correctly according to `ordering`.\",\n                    );\n                }\n                check_shuffle::check_shuffle(self, sorted);\n            }\n            sorted\n        }\n    }\n}\n\nimpl<let N: u32> [u8; N] {\n    /// Converts a byte array of type `[u8; N]` to a string. Note that this performs no UTF-8 validation -\n    /// the given array is interpreted as-is as a string.\n    ///\n    /// Example:\n    ///\n    /// ```rust\n    /// fn main() {\n    ///     let hi = [104, 105].as_str_unchecked();\n    ///     assert_eq(hi, \"hi\");\n    /// }\n    /// ```\n    #[builtin(array_as_str_unchecked)]\n    pub fn as_str_unchecked(self) -> str<N> {}\n}\n\nimpl<let N: u32> From<str<N>> for [u8; N] {\n    /// Returns an array of the string bytes.\n    fn from(s: str<N>) -> Self {\n        s.as_bytes()\n    }\n}\n\nmod test {\n    #[test]\n    fn map_empty() {\n        assert_eq([].map(|x| x + 1), []);\n    }\n\n    #[test]\n    fn mapi_empty() {\n        assert_eq([].mapi(|i, x| i * x + 1), []);\n    }\n\n    #[test]\n    fn for_each_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_each(|_x| assert(false));\n    }\n\n    #[test]\n    fn for_eachi_empty() {\n        let empty_array: [Field; 0] = [];\n        empty_array.for_eachi(|_i, _x| assert(false));\n    }\n\n    #[test]\n    fn map_example() {\n        let a = [1, 2, 3];\n        let b = a.map(|a| a * 2);\n        assert_eq(b, [2, 4, 6]);\n    }\n\n    #[test]\n    fn mapi_example() {\n        let a = [1, 2, 3];\n        let b = a.mapi(|i, a| i + a * 2);\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn for_each_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        let mut i = 0;\n        let i_ref = &mut i;\n        a.for_each(|x| {\n            b_ref[*i_ref] = x * 2;\n            *i_ref += 1;\n        });\n        assert_eq(b, [2, 4, 6]);\n        assert_eq(i, 3);\n    }\n\n    #[test]\n    fn for_eachi_example() {\n        let a = [1, 2, 3];\n        let mut b = [0, 0, 0];\n        let b_ref = &mut b;\n        a.for_eachi(|i, a| { b_ref[i] = i + a * 2; });\n        assert_eq(b, [2, 5, 8]);\n    }\n\n    #[test]\n    fn concat() {\n        let arr1 = [1, 2, 3, 4];\n        let arr2 = [6, 7, 8, 9, 10, 11];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1, 2, 3, 4, 6, 7, 8, 9, 10, 11]);\n    }\n\n    #[test]\n    fn concat_zero_length_with_something() {\n        let arr1 = [];\n        let arr2 = [1];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_something_with_zero_length() {\n        let arr1 = [1];\n        let arr2 = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, [1]);\n    }\n\n    #[test]\n    fn concat_zero_lengths() {\n        let arr1: [Field; 0] = [];\n        let arr2: [Field; 0] = [];\n        let concatenated_arr = arr1.concat(arr2);\n        assert_eq(concatenated_arr, []);\n    }\n}\n",
      "path": "std/array/mod.nr"
    },
    "4": {
      "source": "unconstrained fn partition<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) -> u32 {\n    let pivot = high;\n    let mut i = low;\n    for j in low..high {\n        if (sortfn(arr[j], arr[pivot])) {\n            let temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i += 1;\n        }\n    }\n    let temp = arr[i];\n    arr[i] = arr[pivot];\n    arr[pivot] = temp;\n    i\n}\n\nunconstrained fn quicksort_recursive<T, Env, let N: u32>(\n    arr: &mut [T; N],\n    low: u32,\n    high: u32,\n    sortfn: fn[Env](T, T) -> bool,\n) {\n    if low < high {\n        let pivot_index = partition(arr, low, high, sortfn);\n        if pivot_index > 0 {\n            quicksort_recursive(arr, low, pivot_index - 1, sortfn);\n        }\n        quicksort_recursive(arr, pivot_index + 1, high, sortfn);\n    }\n}\n\npub(crate) unconstrained fn quicksort<T, Env, let N: u32>(\n    _arr: [T; N],\n    sortfn: fn[Env](T, T) -> bool,\n) -> [T; N] {\n    let mut arr: [T; N] = _arr;\n    if arr.len() <= 1 {} else {\n        quicksort_recursive(&mut arr, 0, arr.len() - 1, sortfn);\n    }\n    arr\n}\n",
      "path": "std/array/quicksort.nr"
    },
    "5": {
      "source": "use crate::meta::derive_via;\n\n#[derive_via(derive_eq)]\n// docs:start:eq-trait\npub trait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\n// docs:start:derive_eq\ncomptime fn derive_eq(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn eq(_self: Self, _other: Self) -> bool };\n    let for_each_field = |name| quote { (_self.$name == _other.$name) };\n    let body = |fields| {\n        if s.fields_as_written().len() == 0 {\n            quote { true }\n        } else {\n            fields\n        }\n    };\n    crate::meta::make_trait_impl(\n        s,\n        quote { Eq },\n        signature,\n        for_each_field,\n        quote { & },\n        body,\n    )\n}\n// docs:end:derive_eq\n\nimpl Eq for Field {\n    fn eq(self, other: Field) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for u128 {\n    fn eq(self, other: u128) -> bool {\n        self == other\n    }\n}\nimpl Eq for u64 {\n    fn eq(self, other: u64) -> bool {\n        self == other\n    }\n}\nimpl Eq for u32 {\n    fn eq(self, other: u32) -> bool {\n        self == other\n    }\n}\nimpl Eq for u16 {\n    fn eq(self, other: u16) -> bool {\n        self == other\n    }\n}\nimpl Eq for u8 {\n    fn eq(self, other: u8) -> bool {\n        self == other\n    }\n}\nimpl Eq for u1 {\n    fn eq(self, other: u1) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for i8 {\n    fn eq(self, other: i8) -> bool {\n        self == other\n    }\n}\nimpl Eq for i16 {\n    fn eq(self, other: i16) -> bool {\n        self == other\n    }\n}\nimpl Eq for i32 {\n    fn eq(self, other: i32) -> bool {\n        self == other\n    }\n}\nimpl Eq for i64 {\n    fn eq(self, other: i64) -> bool {\n        self == other\n    }\n}\n\nimpl Eq for () {\n    fn eq(_self: Self, _other: ()) -> bool {\n        true\n    }\n}\nimpl Eq for bool {\n    fn eq(self, other: bool) -> bool {\n        self == other\n    }\n}\n\nimpl<T, let N: u32> Eq for [T; N]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T]\nwhere\n    T: Eq,\n{\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0..self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B)\nwhere\n    A: Eq,\n    B: Eq,\n{\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n{\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n{\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E)\nwhere\n    A: Eq,\n    B: Eq,\n    C: Eq,\n    D: Eq,\n    E: Eq,\n{\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0)\n            & self.1.eq(other.1)\n            & self.2.eq(other.2)\n            & self.3.eq(other.3)\n            & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\npub struct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n#[derive_via(derive_ord)]\n// docs:start:ord-trait\npub trait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// docs:start:derive_ord\ncomptime fn derive_ord(s: TypeDefinition) -> Quoted {\n    let signature = quote { fn cmp(_self: Self, _other: Self) -> std::cmp::Ordering };\n    let for_each_field = |name| quote {\n        if result == std::cmp::Ordering::equal() {\n            result = _self.$name.cmp(_other.$name);\n        }\n    };\n    let body = |fields| quote {\n        let mut result = std::cmp::Ordering::equal();\n        $fields\n        result\n    };\n    crate::meta::make_trait_impl(s, quote { Ord }, signature, for_each_field, quote {}, body)\n}\n// docs:end:derive_ord\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u128 {\n    fn cmp(self, other: u128) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u16 {\n    fn cmp(self, other: u16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i16 {\n    fn cmp(self, other: i16) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else if other {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T]\nwhere\n    T: Ord,\n{\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0..self.len() {\n            if result == Ordering::equal() {\n                result = self[i].cmp(other[i]);\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B)\nwhere\n    A: Ord,\n    B: Ord,\n{\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n{\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n{\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E)\nwhere\n    A: Ord,\n    B: Ord,\n    C: Ord,\n    D: Ord,\n    E: Ord,\n{\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v1\n    } else {\n        v2\n    }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T\nwhere\n    T: Ord,\n{\n    if v1 > v2 {\n        v2\n    } else {\n        v1\n    }\n}\n\nmod cmp_tests {\n    use crate::cmp::{max, min};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n",
      "path": "std/cmp.nr"
    },
    "6": {
      "source": "use crate::{cmp::Eq, convert::From, runtime::is_unconstrained, static_assert};\n\n/// A `BoundedVec<T, MaxLen>` is a growable storage similar to a `Vec<T>` except that it\n/// is bounded with a maximum possible length. Unlike `Vec`, `BoundedVec` is not implemented\n/// via slices and thus is not subject to the same restrictions slices are (notably, nested\n/// slices - and thus nested vectors as well - are disallowed).\n///\n/// Since a BoundedVec is backed by a normal array under the hood, growing the BoundedVec by\n/// pushing an additional element is also more efficient - the length only needs to be increased\n/// by one.\n///\n/// For these reasons `BoundedVec<T, N>` should generally be preferred over `Vec<T>` when there\n/// is a reasonable maximum bound that can be placed on the vector.\n///\n/// Example:\n///\n/// ```noir\n/// let mut vector: BoundedVec<Field, 10> = BoundedVec::new();\n/// for i in 0..5 {\n///     vector.push(i);\n/// }\n/// assert(vector.len() == 5);\n/// assert(vector.max_len() == 10);\n/// ```\npub struct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    /// Creates a new, empty vector of length zero.\n    ///\n    /// Since this container is backed by an array internally, it still needs an initial value\n    /// to give each element. To resolve this, each element is zeroed internally. This value\n    /// is guaranteed to be inaccessible unless `get_unchecked` is used.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_vector: BoundedVec<Field, 10> = BoundedVec::new();\n    /// assert(empty_vector.len() == 0);\n    /// ```\n    ///\n    /// Note that whenever calling `new` the maximum length of the vector should always be specified\n    /// via a type signature:\n    ///\n    /// ```noir\n    /// fn good() -> BoundedVec<Field, 10> {\n    ///     // Ok! MaxLen is specified with a type annotation\n    ///     let v1: BoundedVec<Field, 3> = BoundedVec::new();\n    ///     let v2 = BoundedVec::new();\n    ///\n    ///     // Ok! MaxLen is known from the type of `good`'s return value\n    ///     v2\n    /// }\n    ///\n    /// fn bad() {\n    ///     // Error: Type annotation needed\n    ///     // The compiler can't infer `MaxLen` from the following code:\n    ///     let mut v3 = BoundedVec::new();\n    ///     v3.push(5);\n    /// }\n    /// ```\n    ///\n    /// This defaulting of `MaxLen` (and numeric generics in general) to zero may change in future noir versions\n    /// but for now make sure to use type annotations when using bounded vectors. Otherwise, you will receive a\n    /// constraint failure at runtime when the vec is pushed to.\n    pub fn new() -> Self {\n        let zeroed = crate::mem::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this\n    /// will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     let last = v.get(v.len() - 1);\n    ///     assert(first != last);\n    /// }\n    /// ```\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len, \"Attempted to read past end of BoundedVec\");\n        self.get_unchecked(index)\n    }\n\n    /// Retrieves an element from the vector at the given index, starting from zero, without\n    /// performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element,\n    /// it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn sum_of_first_three<let N: u32>(v: BoundedVec<u32, N>) -> u32 {\n    ///     // Always ensure the length is larger than the largest\n    ///     // index passed to get_unchecked\n    ///     assert(v.len() > 2);\n    ///     let first = v.get_unchecked(0);\n    ///     let second = v.get_unchecked(1);\n    ///     let third = v.get_unchecked(2);\n    ///     first + second + third\n    /// }\n    /// ```\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero.\n    ///\n    /// If the given index is equal to or greater than the length of the vector, this will issue a constraint failure.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn foo<let N: u32>(v: BoundedVec<u32, N>) {\n    ///     let first = v.get(0);\n    ///     assert(first != 42);\n    ///     v.set(0, 42);\n    ///     let new_first = v.get(0);\n    ///     assert(new_first == 42);\n    /// }\n    /// ```\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Writes an element to the vector at the given index, starting from zero, without performing a bounds check.\n    ///\n    /// Since this function does not perform a bounds check on length before accessing the element, it is unsafe! Use at your own risk!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn set_unchecked_example() {\n    ///     let mut vec: BoundedVec<u32, 5> = BoundedVec::new();\n    ///     vec.extend_from_array([1, 2]);\n    ///\n    ///     // Here we're safely writing within the valid range of `vec`\n    ///     // `vec` now has the value [42, 2]\n    ///     vec.set_unchecked(0, 42);\n    ///\n    ///     // We can then safely read this value back out of `vec`.\n    ///     // Notice that we use the checked version of `get` which would prevent reading unsafe values.\n    ///     assert_eq(vec.get(0), 42);\n    ///\n    ///     // We've now written past the end of `vec`.\n    ///     // As this index is still within the maximum potential length of `v`,\n    ///     // it won't cause a constraint failure.\n    ///     vec.set_unchecked(2, 42);\n    ///     println(vec);\n    ///\n    ///     // This will write past the end of the maximum potential length of `vec`,\n    ///     // it will then trigger a constraint failure.\n    ///     vec.set_unchecked(5, 42);\n    ///     println(vec);\n    /// }\n    /// ```\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    /// Pushes an element to the end of the vector. This increases the length\n    /// of the vector by one.\n    ///\n    /// Panics if the new length of the vector will be greater than the max length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    ///\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// // Panics with failed assertion \"push out of bounds\"\n    /// v.push(3);\n    /// ```\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    /// Returns the current length of this vector\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 4> = BoundedVec::new();\n    /// assert(v.len() == 0);\n    ///\n    /// v.push(100);\n    /// assert(v.len() == 1);\n    ///\n    /// v.push(200);\n    /// v.push(300);\n    /// v.push(400);\n    /// assert(v.len() == 4);\n    ///\n    /// let _ = v.pop();\n    /// let _ = v.pop();\n    /// assert(v.len() == 2);\n    /// ```\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    /// Returns the maximum length of this vector. This is always\n    /// equal to the `MaxLen` parameter this vector was initialized with.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.max_len() == 5);\n    /// v.push(10);\n    /// assert(v.max_len() == 5);\n    /// ```\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    /// Returns the internal array within this vector.\n    ///\n    /// Since arrays in Noir are immutable, mutating the returned storage array will not mutate\n    /// the storage held internally by this vector.\n    ///\n    /// Note that uninitialized elements may be zeroed out!\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 5> = BoundedVec::new();\n    ///\n    /// assert(v.storage() == [0, 0, 0, 0, 0]);\n    ///\n    /// v.push(57);\n    /// assert(v.storage() == [57, 0, 0, 0, 0]);\n    /// ```\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    /// Pushes each element from the given array to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_array([2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the given slice to this vector.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut vec: BoundedVec<Field, 3> = BoundedVec::new();\n    /// vec.extend_from_slice(&[2, 4]);\n    ///\n    /// assert(vec.len == 2);\n    /// assert(vec.get(0) == 2);\n    /// assert(vec.get(1) == 4);\n    /// ```\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    /// Pushes each element from the other vector to this vector. The length of\n    /// the other vector is left unchanged.\n    ///\n    /// Panics if pushing each element would cause the length of this vector\n    /// to exceed the maximum length.\n    ///\n    /// ```noir\n    /// let mut v1: BoundedVec<Field, 5> = BoundedVec::new();\n    /// let mut v2: BoundedVec<Field, 7> = BoundedVec::new();\n    ///\n    /// v2.extend_from_array([1, 2, 3]);\n    /// v1.extend_from_bounded_vec(v2);\n    ///\n    /// assert(v1.storage() == [1, 2, 3, 0, 0]);\n    /// assert(v2.storage() == [1, 2, 3, 0, 0, 0, 0]);\n    /// ```\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        if is_unconstrained() {\n            for i in 0..append_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        } else {\n            let mut exceeded_len = false;\n            for i in 0..Len {\n                exceeded_len |= i == append_len;\n                if !exceeded_len {\n                    self.storage[self.len + i] = vec.get_unchecked(i);\n                }\n            }\n        }\n        self.len = new_len;\n    }\n\n    /// Creates a new vector, populating it with values derived from an array input.\n    /// The maximum length of the vector is determined based on the type signature.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array([1, 2, 3])\n    /// ```\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        static_assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    /// Pops the element at the end of the vector. This will decrease the length\n    /// of the vector by one.\n    ///\n    /// Panics if the vector is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<Field, 2> = BoundedVec::new();\n    /// v.push(1);\n    /// v.push(2);\n    ///\n    /// let two = v.pop();\n    /// let one = v.pop();\n    ///\n    /// assert(two == 2);\n    /// assert(one == 1);\n    ///\n    /// // error: cannot pop from an empty vector\n    /// let _ = v.pop();\n    /// ```\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::mem::zeroed();\n        elem\n    }\n\n    /// Returns true if the given predicate returns true for any element\n    /// in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut v: BoundedVec<u32, 3> = BoundedVec::new();\n    /// v.extend_from_array([2, 4, 6]);\n    ///\n    /// let all_even = !v.any(|elem: u32| elem % 2 != 0);\n    /// assert(all_even);\n    /// ```\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        if is_unconstrained() {\n            for i in 0..self.len {\n                ret |= predicate(self.storage[i]);\n            }\n        } else {\n            let mut ret = false;\n            let mut exceeded_len = false;\n            for i in 0..MaxLen {\n                exceeded_len |= i == self.len;\n                if !exceeded_len {\n                    ret |= predicate(self.storage[i]);\n                }\n            }\n        }\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.map(|value| value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Creates a new vector of equal size by calling a closure on each element\n    /// in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let result = vec.mapi(|i, value| i + value * 2);\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn mapi<U, Env>(self, f: fn[Env](u32, T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                ret.storage[i] = f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    ret.storage[i] = f(i, self.get_unchecked(i));\n                }\n            }\n        }\n\n        ret\n    }\n\n    /// Calls a closure on each element in this vector.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_each(|value| result.push(value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 4, 6, 8]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_each<Env>(self, f: fn[Env](T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Calls a closure on each element in this vector, along with its index.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n    /// let mut result = BoundedVec::<u32, 4>::new();\n    /// vec.for_eachi(|i, value| result.push(i + value * 2));\n    ///\n    /// let expected = BoundedVec::from_array([2, 5, 8, 11]);\n    /// assert_eq(result, expected);\n    /// ```\n    pub fn for_eachi<Env>(self, f: fn[Env](u32, T) -> ()) {\n        if is_unconstrained() {\n            for i in 0..self.len() {\n                f(i, self.get_unchecked(i));\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i < self.len() {\n                    f(i, self.get_unchecked(i));\n                }\n            }\n        }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function will zero out any elements at or past index `len` of `array`.\n    /// This incurs an extra runtime cost of O(MaxLen). If you are sure your array is\n    /// zeroed after that index, you can use `from_parts_unchecked` to remove the extra loop.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    /// ```\n    pub fn from_parts(mut array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        let zeroed = crate::mem::zeroed();\n\n        if is_unconstrained() {\n            for i in len..MaxLen {\n                array[i] = zeroed;\n            }\n        } else {\n            for i in 0..MaxLen {\n                if i >= len {\n                    array[i] = zeroed;\n                }\n            }\n        }\n\n        BoundedVec { storage: array, len }\n    }\n\n    /// Creates a new BoundedVec from the given array and length.\n    /// The given length must be less than or equal to the length of the array.\n    ///\n    /// This function is unsafe because it expects all elements past the `len` index\n    /// of `array` to be zeroed, but does not check for this internally. Use `from_parts`\n    /// for a safe version of this function which does zero out any indices past the\n    /// given length. Invalidating this assumption can notably cause `BoundedVec::eq`\n    /// to give incorrect results since it will check even elements past `len`.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n    /// assert_eq(vec.len(), 3);\n    ///\n    /// // invalid use!\n    /// let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n    /// let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n    ///\n    /// // both vecs have length 3 so we'd expect them to be equal, but this\n    /// // fails because elements past the length are still checked in eq\n    /// assert_eq(vec1, vec2); // fails\n    /// ```\n    pub fn from_parts_unchecked(array: [T; MaxLen], len: u32) -> Self {\n        assert(len <= MaxLen);\n        BoundedVec { storage: array, len }\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        if self.len == other.len {\n            self.storage == other.storage\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen> {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n\n    mod get {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test(should_fail_with = \"Attempted to read past end of BoundedVec\")]\n        fn panics_when_reading_elements_past_end_of_vec() {\n            let vec: BoundedVec<Field, 5> = BoundedVec::new();\n\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod mapi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-mapi-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| i + value * 2);\n            // docs:end:bounded-vec-mapi-example\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.mapi(|i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.mapi(|_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_each {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // map in terms of for_each\n        fn for_each_map<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_each(|x| output_ref.push(f(x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-each-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_each(|value| { *acc_ref += value; });\n            // docs:end:bounded-vec-for-each-example\n            assert_eq(acc, 6);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| value * 2);\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_each_map(vec, |value| (value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_each_map(vec, |value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod for_eachi {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        // mapi in terms of for_eachi\n        fn for_eachi_mapi<T, U, Env, let MaxLen: u32>(\n            input: BoundedVec<T, MaxLen>,\n            f: fn[Env](u32, T) -> U,\n        ) -> BoundedVec<U, MaxLen> {\n            let mut output = BoundedVec::<U, MaxLen>::new();\n            let output_ref = &mut output;\n            input.for_eachi(|i, x| output_ref.push(f(i, x)));\n            output\n        }\n\n        #[test]\n        fn smoke_test() {\n            let mut acc = 0;\n            let acc_ref = &mut acc;\n            // docs:start:bounded-vec-for-eachi-example\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([1, 2, 3]);\n            vec.for_eachi(|i, value| { *acc_ref += i * value; });\n            // docs:end:bounded-vec-for-eachi-example\n\n            // 0 * 1 + 1 * 2 + 2 * 3\n            assert_eq(acc, 8);\n        }\n\n        #[test]\n        fn applies_function_correctly() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| i + value * 2);\n            let expected = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = for_eachi_mapi(vec, |i, value| (i + value * 2) as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 5, 8, 11]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = for_eachi_mapi(vec, |_, value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.get_unchecked(2), 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n            assert_eq(bounded_vec.get(2), 3);\n        }\n\n        #[test(should_fail_with = \"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n        use crate::convert::From;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.get(0), 1);\n            assert_eq(bounded_vec.get(1), 2);\n        }\n    }\n\n    mod trait_eq {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty_equality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n            assert_eq(bounded_vec1, bounded_vec2);\n        }\n\n        #[test]\n        fn inequality() {\n            let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n            let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n            bounded_vec1.push(1);\n            bounded_vec2.push(2);\n\n            assert(bounded_vec1 != bounded_vec2);\n        }\n    }\n\n    mod from_parts {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn from_parts() {\n            // docs:start:from-parts\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // Any elements past the given length are zeroed out, so these\n            // two BoundedVecs will be completely equal\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts([1, 2, 3, 2], 3);\n            assert_eq(vec1, vec2);\n            // docs:end:from-parts\n        }\n\n        #[test]\n        fn from_parts_unchecked() {\n            // docs:start:from-parts-unchecked\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 0], 3);\n            assert_eq(vec.len(), 3);\n\n            // invalid use!\n            let vec1: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 1], 3);\n            let vec2: BoundedVec<u32, 4> = BoundedVec::from_parts_unchecked([1, 2, 3, 2], 3);\n\n            // both vecs have length 3 so we'd expect them to be equal, but this\n            // fails because elements past the length are still checked in eq\n            assert(vec1 != vec2);\n            // docs:end:from-parts-unchecked\n        }\n    }\n}\n",
      "path": "std/collections/bounded_vec.nr"
    },
    "7": {
      "source": "use crate::cmp::Eq;\nuse crate::collections::bounded_vec::BoundedVec;\nuse crate::default::Default;\nuse crate::hash::{BuildHasher, Hash, Hasher};\nuse crate::option::Option;\n\n// We use load factor alpha_max = 0.75.\n// Upon exceeding it, assert will fail in order to inform the user\n// about performance degradation, so that he can adjust the capacity.\nglobal MAX_LOAD_FACTOR_NUMERATOR: u32 = 3;\nglobal MAX_LOAD_FACTOR_DEN0MINATOR: u32 = 4;\n\n/// `HashMap<Key, Value, MaxLen, Hasher>` is used to efficiently store and look up key-value pairs.\n///\n/// `HashMap` is a bounded type which can store anywhere from zero to `MaxLen` total elements.\n/// Note that due to hash collisions, the actual maximum number of elements stored by any particular\n/// hashmap is likely lower than `MaxLen`. This is true even with cryptographic hash functions since\n/// every hash value will be performed modulo `MaxLen`.\n///\n/// Example:\n///\n/// ```noir\n/// // Create a mapping from Fields to u32s with a maximum length of 12\n/// // using a poseidon2 hasher\n/// use std::hash::poseidon2::Poseidon2Hasher;\n/// let mut map: HashMap<Field, u32, 12, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n///\n/// map.insert(1, 2);\n/// map.insert(3, 4);\n///\n/// let two = map.get(1).unwrap();\n/// ```\npub struct HashMap<K, V, let N: u32, B> {\n    _table: [Slot<K, V>; N],\n\n    /// Amount of valid elements in the map.\n    _len: u32,\n\n    _build_hasher: B,\n}\n\n// Data unit in the HashMap table.\n// In case Noir adds support for enums in the future, this\n// should be refactored to have three states:\n// 1. (key, value)\n// 2. (empty)\n// 3. (deleted)\nstruct Slot<K, V> {\n    _key_value: Option<(K, V)>,\n    _is_deleted: bool,\n}\n\nimpl<K, V> Default for Slot<K, V> {\n    fn default() -> Self {\n        Slot { _key_value: Option::none(), _is_deleted: false }\n    }\n}\n\nimpl<K, V> Slot<K, V> {\n    fn is_valid(self) -> bool {\n        !self._is_deleted & self._key_value.is_some()\n    }\n\n    fn is_available(self) -> bool {\n        self._is_deleted | self._key_value.is_none()\n    }\n\n    fn key_value(self) -> Option<(K, V)> {\n        self._key_value\n    }\n\n    fn key_value_unchecked(self) -> (K, V) {\n        self._key_value.unwrap_unchecked()\n    }\n\n    fn set(&mut self, key: K, value: V) {\n        self._key_value = Option::some((key, value));\n        self._is_deleted = false;\n    }\n\n    // Shall not override `_key_value` with Option::none(),\n    // because we must be able to differentiate empty\n    // and deleted slots for lookup.\n    fn mark_deleted(&mut self) {\n        self._is_deleted = true;\n    }\n}\n\n// While conducting lookup, we iterate attempt from 0 to N - 1 due to heuristic,\n// that if we have went that far without finding desired,\n// it is very unlikely to be after - performance will be heavily degraded.\nimpl<K, V, let N: u32, B> HashMap<K, V, N, B> {\n    /// Creates a hashmap with an existing `BuildHasher`. This can be used to ensure multiple\n    /// hashmaps are created with the same hasher instance.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::with_hasher(my_hasher);\n    /// assert(hashmap.is_empty());\n    /// ```\n    // docs:start:with_hasher\n    pub fn with_hasher<H>(_build_hasher: B) -> Self\n    where\n        B: BuildHasher<H>,\n    {\n        // docs:end:with_hasher\n        let _table = [Slot::default(); N];\n        let _len = 0;\n        Self { _table, _len, _build_hasher }\n    }\n\n    /// Clears the hashmap, removing all key-value pairs from it.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(!map.is_empty());\n    /// map.clear();\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:clear\n    pub fn clear(&mut self) {\n        // docs:end:clear\n        self._table = [Slot::default(); N];\n        self._len = 0;\n    }\n\n    /// Returns `true` if the hashmap contains the given key. Unlike `get`, this will not also return\n    /// the value associated with the key.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// if map.contains_key(7) {\n    ///     let value = map.get(7);\n    ///     assert(value.is_some());\n    /// } else {\n    ///     println(\"No value for key 7!\");\n    /// }\n    /// ```\n    // docs:start:contains_key\n    pub fn contains_key<H>(self, key: K) -> bool\n    where\n        K: Hash + Eq,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:contains_key\n        self.get(key).is_some()\n    }\n\n    /// Returns `true` if the length of the hash map is empty.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// assert(map.is_empty());\n    ///\n    /// map.insert(1, 2);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(1);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:is_empty\n    pub fn is_empty(self) -> bool {\n        // docs:end:is_empty\n        self._len == 0\n    }\n\n    /// Returns a vector of each key-value pair present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let entries = map.entries();\n    ///\n    /// // The length of a hashmap may not be compile-time known, so we\n    /// // need to loop over its capacity instead\n    /// for i in 0..map.capacity() {\n    ///     if i < entries.len() {\n    ///         let (key, value) = entries.get(i);\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:entries\n    pub fn entries(self) -> BoundedVec<(K, V), N> {\n        // docs:end:entries\n        let mut entries = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                // SAFETY: slot.is_valid() should ensure there is a valid key-value pairing here\n                let key_value = slot.key_value().unwrap_unchecked();\n                entries.push(key_value);\n            }\n        }\n\n        let self_len = self._len;\n        let entries_len = entries.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {entries_len}.\";\n        assert(entries.len() == self._len, msg);\n\n        entries\n    }\n\n    /// Returns a vector of each key present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let keys = map.keys();\n    ///\n    /// for i in 0..keys.max_len() {\n    ///     if i < keys.len() {\n    ///         let key = keys.get_unchecked(i);\n    ///         let value = map.get(key).unwrap_unchecked();\n    ///         println(f\"{key} -> {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:keys\n    pub fn keys(self) -> BoundedVec<K, N> {\n        // docs:end:keys\n        let mut keys = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (key, _) = slot.key_value_unchecked();\n                keys.push(key);\n            }\n        }\n\n        let self_len = self._len;\n        let keys_len = keys.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {keys_len}.\";\n        assert(keys.len() == self._len, msg);\n\n        keys\n    }\n\n    /// Returns a vector of each value present in the hashmap.\n    ///\n    /// The length of the returned vector is always equal to the length of the hashmap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let values = map.values();\n    ///\n    /// for i in 0..values.max_len() {\n    ///     if i < values.len() {\n    ///         let value = values.get_unchecked(i);\n    ///         println(f\"Found value {value}\");\n    ///     }\n    /// }\n    /// ```\n    // docs:start:values\n    pub fn values(self) -> BoundedVec<V, N> {\n        // docs:end:values\n        let mut values = BoundedVec::new();\n\n        for slot in self._table {\n            if slot.is_valid() {\n                let (_, value) = slot.key_value_unchecked();\n                values.push(value);\n            }\n        }\n\n        let self_len = self._len;\n        let values_len = values.len();\n        let msg =\n            f\"Amount of valid elements should have been {self_len} times, but got {values_len}.\";\n        assert(values.len() == self._len, msg);\n\n        values\n    }\n\n    /// Iterates through each key-value pair of the HashMap, setting each key-value pair to the\n    /// result returned from the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If this is not desired, use `iter_values_mut` if only values need to be mutated,\n    /// or `entries` if neither keys nor values need to be mutated.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Add 1 to each key in the map, and double the value associated with that key.\n    /// map.iter_mut(|k, v| (k + 1, v * 2));\n    /// ```\n    // docs:start:iter_mut\n    pub fn iter_mut<H>(&mut self, f: fn(K, V) -> (K, V))\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = f(entry.0, entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, mutating each key to the result returned from\n    /// the given function.\n    ///\n    /// Note that since keys can be mutated, the HashMap needs to be rebuilt as it is iterated\n    /// through. If only iteration is desired and the keys are not intended to be mutated,\n    /// prefer using `entries` instead.\n    ///\n    /// The iteration order is left unspecified. As a result, if two keys are mutated to become\n    /// equal, which of the two values that will be present for the key in the resulting map is also unspecified.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Double each key, leaving the value associated with that key untouched\n    /// map.iter_keys_mut(|k| k * 2);\n    /// ```\n    // docs:start:iter_keys_mut\n    pub fn iter_keys_mut<H>(&mut self, f: fn(K) -> K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:iter_keys_mut\n        let mut entries = self.entries();\n        let mut new_map = HashMap::with_hasher(self._build_hasher);\n\n        for i in 0..N {\n            if i < self._len {\n                let entry = entries.get_unchecked(i);\n                let (key, value) = (f(entry.0), entry.1);\n                new_map.insert(key, value);\n            }\n        }\n\n        self._table = new_map._table;\n    }\n\n    /// Iterates through the HashMap, applying the given function to each value and mutating the\n    /// value to equal the result. This function is more efficient than `iter_mut` and `iter_keys_mut`\n    /// because the keys are untouched and the underlying hashmap thus does not need to be reordered.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // Halve each value\n    /// map.iter_values_mut(|v| v / 2);\n    /// ```\n    // docs:start:iter_values_mut\n    pub fn iter_values_mut(&mut self, f: fn(V) -> V) {\n        // docs:end:iter_values_mut\n        for i in 0..N {\n            let mut slot = self._table[i];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                slot.set(key, f(value));\n                self._table[i] = slot;\n            }\n        }\n    }\n\n    /// Retains only the key-value pairs for which the given function returns true.\n    /// Any key-value pairs for which the function returns false will be removed from the map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// map.retain(|k, v| (k != 0) & (v != 0));\n    /// ```\n    // docs:start:retain\n    pub fn retain(&mut self, f: fn(K, V) -> bool) {\n        // docs:end:retain\n        for index in 0..N {\n            let mut slot = self._table[index];\n            if slot.is_valid() {\n                let (key, value) = slot.key_value_unchecked();\n                if !f(key, value) {\n                    slot.mark_deleted();\n                    self._len -= 1;\n                    self._table[index] = slot;\n                }\n            }\n        }\n    }\n\n    /// Returns the current length of this hash map.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// // This is equivalent to checking map.is_empty()\n    /// assert(map.len() == 0);\n    ///\n    /// map.insert(1, 2);\n    /// map.insert(3, 4);\n    /// map.insert(5, 6);\n    /// assert(map.len() == 3);\n    ///\n    /// // 3 was already present as a key in the hash map, so the length is unchanged\n    /// map.insert(3, 7);\n    /// assert(map.len() == 3);\n    ///\n    /// map.remove(1);\n    /// assert(map.len() == 2);\n    /// ```\n    // docs:start:len\n    pub fn len(self) -> u32 {\n        // docs:end:len\n        self._len\n    }\n\n    /// Returns the maximum capacity of this hashmap. This is always equal to the capacity\n    /// specified in the hashmap's type.\n    ///\n    /// Unlike hashmaps in general purpose programming languages, hashmaps in Noir have a\n    /// static capacity that does not increase as the map grows larger. Thus, this capacity\n    /// is also the maximum possible element count that can be inserted into the hashmap.\n    /// Due to hash collisions (modulo the hashmap length), it is likely the actual maximum\n    /// element count will be lower than the full capacity.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(empty_map.len() == 0);\n    /// assert(empty_map.capacity() == 42);\n    /// ```\n    // docs:start:capacity\n    pub fn capacity(_self: Self) -> u32 {\n        // docs:end:capacity\n        N\n    }\n\n    /// Retrieves a value from the hashmap, returning `Option::none()` if it was not found.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// fn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    ///     let x = map.get(12);\n    ///\n    ///     if x.is_some() {\n    ///         assert(x.unwrap() == 42);\n    ///     }\n    /// }\n    /// ```\n    // docs:start:get\n    pub fn get<H>(self, key: K) -> Option<V>\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:get\n        let mut result = Option::none();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, value) = slot.key_value_unchecked();\n                    if current_key == key {\n                        result = Option::some(value);\n                        should_break = true;\n                    }\n                }\n            }\n        }\n\n        result\n    }\n\n    /// Inserts a new key-value pair into the map. If the key was already in the map, its\n    /// previous value will be overridden with the newly provided one.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(map.len() == 1);\n    /// ```\n    // docs:start:insert\n    pub fn insert<H>(&mut self, key: K, value: V)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:insert\n        self.assert_load_factor();\n\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n                let mut insert = false;\n\n                // Either marked as deleted or has unset key-value.\n                if slot.is_available() {\n                    insert = true;\n                    self._len += 1;\n                } else {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        insert = true;\n                    }\n                }\n\n                if insert {\n                    slot.set(key, value);\n                    self._table[index] = slot;\n                    should_break = true;\n                }\n            }\n        }\n    }\n\n    /// Removes the given key-value pair from the map. If the key was not already present\n    /// in the map, this does nothing.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// map.insert(12, 42);\n    /// assert(!map.is_empty());\n    ///\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    ///\n    /// // If a key was not present in the map, remove does nothing\n    /// map.remove(12);\n    /// assert(map.is_empty());\n    /// ```\n    // docs:start:remove\n    pub fn remove<H>(&mut self, key: K)\n    where\n        K: Eq + Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        // docs:end:remove\n        let hash = self.hash(key);\n        let mut should_break = false;\n\n        for attempt in 0..N {\n            if !should_break {\n                let index = self.quadratic_probe(hash, attempt as u32);\n                let mut slot = self._table[index];\n\n                // Not marked as deleted and has key-value.\n                if slot.is_valid() {\n                    let (current_key, _) = slot.key_value_unchecked();\n                    if current_key == key {\n                        slot.mark_deleted();\n                        self._table[index] = slot;\n                        self._len -= 1;\n                        should_break = true;\n                    }\n                }\n            }\n        }\n    }\n\n    // Apply HashMap's hasher onto key to obtain pre-hash for probing.\n    fn hash<H>(self, key: K) -> u32\n    where\n        K: Hash,\n        B: BuildHasher<H>,\n        H: Hasher,\n    {\n        let mut hasher = self._build_hasher.build_hasher();\n        key.hash(&mut hasher);\n        hasher.finish() as u32\n    }\n\n    // Probing scheme: quadratic function.\n    // We use 0.5 constant near variadic attempt and attempt^2 monomials.\n    // This ensures good uniformity of distribution for table sizes\n    // equal to prime numbers or powers of two.\n    fn quadratic_probe(_self: Self, hash: u32, attempt: u32) -> u32 {\n        (hash + (attempt + attempt * attempt) / 2) % N\n    }\n\n    // Amount of elements in the table in relation to available slots exceeds alpha_max.\n    // To avoid a comparatively more expensive division operation\n    // we conduct cross-multiplication instead.\n    // n / m >= MAX_LOAD_FACTOR_NUMERATOR / MAX_LOAD_FACTOR_DEN0MINATOR\n    // n * MAX_LOAD_FACTOR_DEN0MINATOR >= m * MAX_LOAD_FACTOR_NUMERATOR\n    fn assert_load_factor(self) {\n        let lhs = self._len * MAX_LOAD_FACTOR_DEN0MINATOR;\n        let rhs = self._table.len() * MAX_LOAD_FACTOR_NUMERATOR;\n        let exceeded = lhs >= rhs;\n        assert(!exceeded, \"Load factor is exceeded, consider increasing the capacity.\");\n    }\n}\n\n// Equality class on HashMap has to test that they have\n// equal sets of key-value entries,\n// thus one is a subset of the other and vice versa.\n// docs:start:eq\nimpl<K, V, let N: u32, B, H> Eq for HashMap<K, V, N, B>\nwhere\n    K: Eq + Hash,\n    V: Eq,\n    B: BuildHasher<H>,\n    H: Hasher,\n{\n    /// Checks if two HashMaps are equal.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    ///\n    /// map1.insert(1, 2);\n    /// map1.insert(3, 4);\n    ///\n    /// map2.insert(3, 4);\n    /// map2.insert(1, 2);\n    ///\n    /// assert(map1 == map2);\n    /// ```\n    fn eq(self, other: HashMap<K, V, N, B>) -> bool {\n        // docs:end:eq\n        let mut equal = false;\n\n        if self.len() == other.len() {\n            equal = true;\n            for slot in self._table {\n                // Not marked as deleted and has key-value.\n                if equal & slot.is_valid() {\n                    let (key, value) = slot.key_value_unchecked();\n                    let other_value = other.get(key);\n\n                    if other_value.is_none() {\n                        equal = false;\n                    } else {\n                        let other_value = other_value.unwrap_unchecked();\n                        if value != other_value {\n                            equal = false;\n                        }\n                    }\n                }\n            }\n        }\n\n        equal\n    }\n}\n\n// docs:start:default\nimpl<K, V, let N: u32, B, H> Default for HashMap<K, V, N, B>\nwhere\n    B: BuildHasher<H> + Default,\n    H: Hasher + Default,\n{\n    /// Constructs an empty HashMap.\n    ///\n    /// Example:\n    ///\n    /// ```noir\n    /// let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    /// assert(hashmap.is_empty());\n    /// ```\n    fn default() -> Self {\n        // docs:end:default\n        let _build_hasher = B::default();\n        let map: HashMap<K, V, N, B> = HashMap::with_hasher(_build_hasher);\n        map\n    }\n}\n",
      "path": "std/collections/map.nr"
    },
    "17": {
      "source": "use crate::field::field_less_than;\nuse crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\npub(crate) global TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    // Here's we're taking advantage of truncating 128 bit limbs from the input field\n    // and then subtracting them from the input such the field division is equivalent to integer division.\n    let low = (x as u128) as Field;\n    let high = (x - low) / TWO_POW_128;\n\n    (low, high)\n}\n\npub(crate) unconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nunconstrained fn lte_hint(x: Field, y: Field) -> bool {\n    if x == y {\n        true\n    } else {\n        field_less_than(x, y)\n    }\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    // Safety: borrow is enforced to be boolean due to its type.\n    // if borrow is 0, it asserts that (alo > blo && ahi >= bhi)\n    // if borrow is 1, it asserts that (alo <= blo && ahi > bhi)\n    unsafe {\n        let borrow = lte_hint(alo, blo);\n\n        let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n        let rhi = ahi - bhi - (borrow as Field);\n\n        rlo.assert_max_bit_size::<128>();\n        rhi.assert_max_bit_size::<128>();\n    }\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Safety: decomposition is properly checked below\n        unsafe {\n            // Take hints of the decomposition\n            let (xlo, xhi) = decompose_hint(x);\n\n            // Range check the limbs\n            xlo.assert_max_bit_size::<128>();\n            xhi.assert_max_bit_size::<128>();\n\n            // Check that the decomposition is correct\n            assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n            // Assert that the decomposition of P is greater than the decomposition of x\n            assert_gt_limbs((PLO, PHI), (xlo, xhi));\n            (xlo, xhi)\n        }\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(\n            // Safety: already unconstrained\n            unsafe { field_less_than(b, a) },\n        );\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unsafe in unconstrained\n        unsafe {\n            field_less_than(b, a)\n        }\n    } else if a == b {\n        false\n    } else {\n        // Safety: Take a hint of the comparison and verify it\n        unsafe {\n            if field_less_than(a, b) {\n                assert_gt(b, a);\n                false\n            } else {\n                assert_gt(a, b);\n                true\n            }\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{assert_gt, decompose, gt, lte_hint, PHI, PLO, TWO_POW_128};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_lte_hint() {\n        assert(lte_hint(0, 1));\n        assert(lte_hint(0, 0x100));\n        assert(lte_hint(0x100, TWO_POW_128 - 1));\n        assert(!lte_hint(0 - 1, 0));\n\n        assert(lte_hint(0, 0));\n        assert(lte_hint(0x100, 0x100));\n        assert(lte_hint(0 - 1, 0 - 1));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n",
      "path": "std/field/bn254.nr"
    },
    "18": {
      "source": "pub mod bn254;\nuse crate::{runtime::is_unconstrained, static_assert};\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    /// Asserts that `self` can be represented in `bit_size` bits.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^{bit_size}`.\n    // docs:start:assert_max_bit_size\n    pub fn assert_max_bit_size<let BIT_SIZE: u32>(self) {\n        // docs:end:assert_max_bit_size\n        static_assert(\n            BIT_SIZE < modulus_num_bits() as u32,\n            \"BIT_SIZE must be less than modulus_num_bits\",\n        );\n        self.__assert_max_bit_size(BIT_SIZE);\n    }\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_le_bits)]\n    fn _to_le_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// Values of `N` equal to or greater than the number of bits necessary to represent the `Field` modulus\n    /// (e.g. 254 for the BN254 field) allow for multiple bit decompositions. This is due to how the `Field` will\n    /// wrap around due to overflow when verifying the decomposition.\n    #[builtin(to_be_bits)]\n    fn _to_be_bits<let N: u32>(self: Self) -> [u1; N] {}\n\n    /// Decomposes `self` into its little endian bit decomposition as a `[u1; N]` array.\n    /// This slice will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_le_bits\n    pub fn to_le_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_le_bits\n        let bits = self._to_le_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[N - 1 - i] != p[N - 1 - i]) {\n                        assert(p[N - 1 - i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its big endian bit decomposition as a `[u1; N]` array.\n    /// This array will be zero padded should not all bits be necessary to represent `self`.\n    ///\n    /// # Failures\n    /// Causes a constraint failure for `Field` values exceeding `2^N` as the resulting slice will not\n    /// be able to represent the original `Field`.\n    ///\n    /// # Safety\n    /// The bit decomposition returned is canonical and is guaranteed to not overflow the modulus.\n    // docs:start:to_be_bits\n    pub fn to_be_bits<let N: u32>(self: Self) -> [u1; N] {\n        // docs:end:to_be_bits\n        let bits = self._to_be_bits();\n\n        if !is_unconstrained() {\n            // Ensure that the decomposition does not overflow the modulus\n            let p = modulus_be_bits();\n            assert(bits.len() <= p.len());\n            let mut ok = bits.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bits[i] != p[i]) {\n                        assert(p[i] == 1);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bits\n    }\n\n    /// Decomposes `self` into its little endian byte decomposition as a `[u8;N]` array\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_le_bytes\n    pub fn to_le_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_le_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_le_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_le_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[N - 1 - i] != p[N - 1 - i]) {\n                        assert(bytes[N - 1 - i] < p[N - 1 - i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    /// Decomposes `self` into its big endian byte decomposition as a `[u8;N]` array of length required to represent the field modulus\n    /// This array will be zero padded should not all bytes be necessary to represent `self`.\n    ///\n    /// # Failures\n    ///  The length N of the array must be big enough to contain all the bytes of the 'self',\n    ///  and no more than the number of bytes required to represent the field modulus\n    ///\n    /// # Safety\n    /// The result is ensured to be the canonical decomposition of the field element\n    // docs:start:to_be_bytes\n    pub fn to_be_bytes<let N: u32>(self: Self) -> [u8; N] {\n        // docs:end:to_be_bytes\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        // Compute the byte decomposition\n        let bytes = self.to_be_radix(256);\n\n        if !is_unconstrained() {\n            // Ensure that the byte decomposition does not overflow the modulus\n            let p = modulus_be_bytes();\n            assert(bytes.len() <= p.len());\n            let mut ok = bytes.len() != p.len();\n            for i in 0..N {\n                if !ok {\n                    if (bytes[i] != p[i]) {\n                        assert(bytes[i] < p[i]);\n                        ok = true;\n                    }\n                }\n            }\n            assert(ok);\n        }\n        bytes\n    }\n\n    // docs:start:to_le_radix\n    pub fn to_le_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            static_assert(1 < radix, \"radix must be greater than 1\");\n            static_assert(radix <= 256, \"radix must be less than or equal to 256\");\n            static_assert(radix & (radix - 1) == 0, \"radix must be a power of 2\");\n        }\n        self.__to_le_radix(radix)\n    }\n    // docs:end:to_le_radix\n\n    // docs:start:to_be_radix\n    pub fn to_be_radix<let N: u32>(self: Self, radix: u32) -> [u8; N] {\n        // Brillig does not need an immediate radix\n        if !crate::runtime::is_unconstrained() {\n            crate::assert_constant(radix);\n        }\n        self.__to_be_radix(radix)\n    }\n    // docs:end:to_be_radix\n\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // `_radix` must be less than 256\n    #[builtin(to_be_radix)]\n    fn __to_be_radix<let N: u32>(self, radix: u32) -> [u8; N] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b: [u1; 32] = exponent.to_le_bits();\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32 - i] as Field) * (r * self) + (1 - b[32 - i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x `elem` {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n    /// Convert a little endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_le_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        static_assert(\n            N <= modulus_le_bytes().len(),\n            \"N must be less than or equal to modulus_le_bytes().len()\",\n        );\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n\n    /// Convert a big endian byte array to a field element.\n    /// If the provided byte array overflows the field modulus then the Field will silently wrap around.\n    pub fn from_be_bytes<let N: u32>(bytes: [u8; N]) -> Field {\n        let mut v = 1;\n        let mut result = 0;\n\n        for i in 0..N {\n            result += (bytes[N - 1 - i] as Field) * v;\n            v = v * 256;\n        }\n        result\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub comptime fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub comptime fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub comptime fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub comptime fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub comptime fn modulus_le_bytes() -> [u8] {}\n\n/// An unconstrained only built in to efficiently compare fields.\n#[builtin(field_less_than)]\nunconstrained fn __field_less_than(x: Field, y: Field) -> bool {}\n\npub(crate) unconstrained fn field_less_than(x: Field, y: Field) -> bool {\n    __field_less_than(x, y)\n}\n\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    if is_unconstrained() {\n        // Safety: unconstrained context\n        unsafe {\n            field_less_than(x, y)\n        }\n    } else {\n        let x_bytes: [u8; 32] = x.to_le_bytes();\n        let y_bytes: [u8; 32] = y.to_le_bytes();\n        let mut x_is_lt = false;\n        let mut done = false;\n        for i in 0..32 {\n            if (!done) {\n                let x_byte = x_bytes[32 - 1 - i] as u8;\n                let y_byte = y_bytes[32 - 1 - i] as u8;\n                let bytes_match = x_byte == y_byte;\n                if !bytes_match {\n                    x_is_lt = x_byte < y_byte;\n                    done = true;\n                }\n            }\n        }\n        x_is_lt\n    }\n}\n\nmod tests {\n    use crate::{panic::panic, runtime};\n    use super::field_less_than;\n\n    #[test]\n    // docs:start:to_be_bits_example\n    fn test_to_be_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_be_bits();\n        assert_eq(bits, [0, 0, 0, 0, 0, 0, 1, 0]);\n    }\n    // docs:end:to_be_bits_example\n\n    #[test]\n    // docs:start:to_le_bits_example\n    fn test_to_le_bits() {\n        let field = 2;\n        let bits: [u1; 8] = field.to_le_bits();\n        assert_eq(bits, [0, 1, 0, 0, 0, 0, 0, 0]);\n    }\n    // docs:end:to_le_bits_example\n\n    #[test]\n    // docs:start:to_be_bytes_example\n    fn test_to_be_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_be_bytes();\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 0, 2]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_bytes_example\n\n    #[test]\n    // docs:start:to_le_bytes_example\n    fn test_to_le_bytes() {\n        let field = 2;\n        let bytes: [u8; 8] = field.to_le_bytes();\n        assert_eq(bytes, [2, 0, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_bytes_example\n\n    #[test]\n    // docs:start:to_be_radix_example\n    fn test_to_be_radix() {\n        // 259, in base 256, big endian, is [1, 3].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_be_radix(256);\n        assert_eq(bytes, [0, 0, 0, 0, 0, 0, 1, 3]);\n        assert_eq(Field::from_be_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_be_radix_example\n\n    #[test]\n    // docs:start:to_le_radix_example\n    fn test_to_le_radix() {\n        // 259, in base 256, little endian, is [3, 1].\n        // i.e. 3 * 256^0 + 1 * 256^1\n        let field = 259;\n\n        // The radix (in this example, 256) must be a power of 2.\n        // The length of the returned byte array can be specified to be\n        // >= the amount of space needed.\n        let bytes: [u8; 8] = field.to_le_radix(256);\n        assert_eq(bytes, [3, 1, 0, 0, 0, 0, 0, 0]);\n        assert_eq(Field::from_le_bytes::<8>(bytes), field);\n    }\n    // docs:end:to_le_radix_example\n\n    #[test(should_fail_with = \"radix must be greater than 1\")]\n    fn test_to_le_radix_1() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(1);\n        } else {\n            panic(f\"radix must be greater than 1\");\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be greater than 2\n    //#[test]\n    //fn test_to_le_radix_brillig_1() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(1);\n    //        crate::println(out);\n    //        let expected = [0; 8];\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test(should_fail_with = \"radix must be a power of 2\")]\n    fn test_to_le_radix_3() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(3);\n        } else {\n            panic(f\"radix must be a power of 2\");\n        }\n    }\n\n    #[test]\n    fn test_to_le_radix_brillig_3() {\n        // this test should only fail in constrained mode\n        if runtime::is_unconstrained() {\n            let field = 1;\n            let out: [u8; 8] = field.to_le_radix(3);\n            let mut expected = [0; 8];\n            expected[0] = 1;\n            assert(out == expected, \"unexpected result\");\n        }\n    }\n\n    #[test(should_fail_with = \"radix must be less than or equal to 256\")]\n    fn test_to_le_radix_512() {\n        // this test should only fail in constrained mode\n        if !runtime::is_unconstrained() {\n            let field = 2;\n            let _: [u8; 8] = field.to_le_radix(512);\n        } else {\n            panic(f\"radix must be less than or equal to 256\")\n        }\n    }\n\n    // TODO: Update this test to account for the Brillig restriction that the radix must be less than 512\n    //#[test]\n    //fn test_to_le_radix_brillig_512() {\n    //    // this test should only fail in constrained mode\n    //    if runtime::is_unconstrained() {\n    //        let field = 1;\n    //        let out: [u8; 8] = field.to_le_radix(512);\n    //        let mut expected = [0; 8];\n    //        expected[0] = 1;\n    //        assert(out == expected, \"unexpected result\");\n    //    }\n    //}\n\n    #[test]\n    unconstrained fn test_field_less_than() {\n        assert(field_less_than(0, 1));\n        assert(field_less_than(0, 0x100));\n        assert(field_less_than(0x100, 0 - 1));\n        assert(!field_less_than(0 - 1, 0));\n    }\n}\n",
      "path": "std/field/mod.nr"
    },
    "20": {
      "source": "use crate::default::Default;\nuse crate::hash::Hasher;\n\ncomptime global RATE: u32 = 3;\n\npub(crate) struct Poseidon2 {\n    cache: [Field; 3],\n    state: [Field; 4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub(crate) fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        Poseidon2::hash_internal(input, message_size, message_size != N)\n    }\n\n    pub(crate) fn new(iv: Field) -> Poseidon2 {\n        let mut result =\n            Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) {\n        // add the cache into sponge state\n        for i in 0..RATE {\n            // We effectively zero-pad the cache by only adding to the state\n            // cache that is less than the specified `cache_size`\n            if i < self.cache_size {\n                self.state[i] += self.cache[i];\n            }\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n    }\n\n    fn absorb(&mut self, input: Field) {\n        assert(!self.squeeze_mode);\n        if self.cache_size == RATE {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        assert(!self.squeeze_mode);\n        // If we're in absorb mode, apply sponge permutation to compress the cache.\n        self.perform_duplex();\n        self.squeeze_mode = true;\n\n        // Pop one item off the top of the permutation and return it.\n        self.state[0]\n    }\n\n    fn hash_internal<let N: u32>(\n        input: [Field; N],\n        in_len: u32,\n        is_variable_length: bool,\n    ) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv: Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\npub(crate) struct Poseidon2Hasher {\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv: Field = (self._state.len() as Field) * 18446744073709551616; // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field) {\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher { _state: &[] }\n    }\n}\n",
      "path": "std/hash/poseidon2.nr"
    },
    "22": {
      "source": "pub mod hash;\npub mod aes128;\npub mod array;\npub mod slice;\npub mod ecdsa_secp256k1;\npub mod ecdsa_secp256r1;\npub mod embedded_curve_ops;\npub mod field;\npub mod collections;\npub mod compat;\npub mod convert;\npub mod option;\npub mod string;\npub mod test;\npub mod cmp;\npub mod ops;\npub mod default;\npub mod prelude;\npub mod runtime;\npub mod meta;\npub mod append;\npub mod mem;\npub mod panic;\npub mod hint;\n\nuse convert::AsPrimitive;\n\n// Oracle calls are required to be wrapped in an unconstrained function\n// Thus, the only argument to the `println` oracle is expected to always be an ident\n#[oracle(print)]\nunconstrained fn print_oracle<T>(with_newline: bool, input: T) {}\n\nunconstrained fn print_unconstrained<T>(with_newline: bool, input: T) {\n    print_oracle(with_newline, input);\n}\n\npub fn println<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(true, input);\n    }\n}\n\npub fn print<T>(input: T) {\n    // Safety: a print statement cannot be constrained\n    unsafe {\n        print_unconstrained(false, input);\n    }\n}\n\npub fn verify_proof<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n) {\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, 0);\n}\n\npub fn verify_proof_with_type<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {\n    if !crate::runtime::is_unconstrained() {\n        crate::assert_constant(proof_type);\n    }\n    verify_proof_internal(verification_key, proof, public_inputs, key_hash, proof_type);\n}\n\n#[foreign(recursive_aggregation)]\nfn verify_proof_internal<let N: u32, let M: u32, let K: u32>(\n    verification_key: [Field; N],\n    proof: [Field; M],\n    public_inputs: [Field; K],\n    key_hash: Field,\n    proof_type: u32,\n) {}\n\n// Asserts that the given value is known at compile-time.\n// Useful for debugging for-loop bounds.\n#[builtin(assert_constant)]\npub fn assert_constant<T>(x: T) {}\n\n// Asserts that the given value is both true and known at compile-time\n#[builtin(static_assert)]\npub fn static_assert<let N: u32>(predicate: bool, message: str<N>) {}\n\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_add(y)\")]\npub fn wrapping_add<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() + y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_sub(y)\")]\npub fn wrapping_sub<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    //340282366920938463463374607431768211456 is 2^128, it is used to avoid underflow\n    AsPrimitive::as_(x.as_() + 340282366920938463463374607431768211456 - y.as_())\n}\n#[deprecated(\"wrapping operations should be done with the Wrapping traits. E.g: x.wrapping_mul(y)\")]\npub fn wrapping_mul<T>(x: T, y: T) -> T\nwhere\n    T: AsPrimitive<Field>,\n    Field: AsPrimitive<T>,\n{\n    AsPrimitive::as_(x.as_() * y.as_())\n}\n\n#[builtin(as_witness)]\npub fn as_witness(x: Field) {}\n\nmod tests {\n    use super::ops::arith::WrappingMul;\n\n    #[test(should_fail_with = \"custom message\")]\n    fn test_static_assert_custom_message() {\n        super::static_assert(1 == 2, \"custom message\");\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        let zero: u128 = 0;\n        let one: u128 = 1;\n        let two_pow_64: u128 = 0x10000000000000000;\n        let u128_max: u128 = 0xffffffffffffffffffffffffffffffff;\n\n        // 1*0==0\n        assert_eq(zero, zero.wrapping_mul(one));\n\n        // 0*1==0\n        assert_eq(zero, one.wrapping_mul(zero));\n\n        // 1*1==1\n        assert_eq(one, one.wrapping_mul(one));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(zero, zero.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(zero, two_pow_64.wrapping_mul(zero));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(two_pow_64, two_pow_64.wrapping_mul(one));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(two_pow_64, one.wrapping_mul(two_pow_64));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(zero, two_pow_64.wrapping_mul(two_pow_64));\n        // -1 * -1 == 1\n        assert_eq(one, u128_max.wrapping_mul(u128_max));\n    }\n}\n",
      "path": "std/lib.nr"
    },
    "42": {
      "source": "use crate::cmp::{Eq, Ord, Ordering};\nuse crate::default::Default;\nuse crate::hash::{Hash, Hasher};\n\npub struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::mem::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    pub fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T>\nwhere\n    T: Eq,\n{\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T>\nwhere\n    T: Hash,\n{\n    fn hash<H>(self, state: &mut H)\n    where\n        H: Hasher,\n    {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T>\nwhere\n    T: Ord,\n{\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else if other._is_some {\n            Ordering::less()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n",
      "path": "std/option.nr"
    },
    "50": {
      "source": "mod utils;\n\nuse std::collections::map::HashMap;\nuse std::hash::BuildHasherDefault;\nuse std::hash::poseidon2::Poseidon2Hasher;\n\nuse utils::cut;\n\ntype K = Field;\ntype V = Field;\n\n// It is more convenient and readable to use structs as input.\nstruct Entry {\n    key: Field,\n    value: Field,\n}\n\nglobal HASHMAP_CAP: u32 = 8;\nglobal HASHMAP_LEN: u32 = 6;\n\nglobal FIELD_CMP: fn(Field, Field) -> bool = |a: Field, b: Field| a.lt(b);\n\nglobal K_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal V_CMP: fn(Field, Field) -> bool = FIELD_CMP;\nglobal KV_CMP: fn((K, V), (K, V)) -> bool = |a: (K, V), b: (K, V)| a.0.lt(b.0);\n\nglobal ALLOCATE_HASHMAP: fn() -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> =\n    || -> HashMap<K, V, HASHMAP_CAP, BuildHasherDefault<Poseidon2Hasher>> HashMap::default();\n\nfn main(input: [Entry; HASHMAP_LEN]) {\n    test_sequential(input[0].key, input[0].value);\n    test_multiple_equal_insert(input[1].key, input[1].value);\n    test_value_override(input[2].key, input[2].value, input[3].value);\n    test_insert_and_methods(input);\n    test_hashmaps_equality(input);\n    test_retain();\n    test_iterators();\n    test_mut_iterators();\n\n    doc_tests();\n}\n\n// Insert, get, remove.\nfn test_sequential(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    hashmap.insert(key, value);\n    assert(hashmap.len() == 1, \"HashMap after one insert should have a length of 1 element.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n\n    hashmap.remove(key);\n    assert(\n        hashmap.is_empty(),\n        \"HashMap after one insert and corresponding removal should be empty.\",\n    );\n    let got = hashmap.get(key);\n    assert(got.is_none(), \"Value has been removed, but is still available (not none).\");\n}\n\n// Insert same pair several times.\nfn test_multiple_equal_insert(key: K, value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for _ in 0..HASHMAP_LEN {\n        hashmap.insert(key, value);\n    }\n\n    let len = hashmap.len();\n    assert(len == 1, f\"HashMap length must be 1, got {len}.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(value == got, f\"Inserted {value} but got {got} for the same key.\");\n}\n\n// Override value for existing pair.\nfn test_value_override(key: K, value: V, new_value: V) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New hashmap should be empty.\");\n\n    hashmap.insert(key, value);\n    hashmap.insert(key, new_value);\n    assert(hashmap.len() == 1, \"HashMap length is invalid.\");\n\n    let got = hashmap.get(key);\n    assert(got.is_some(), \"Got none value.\");\n    let got = got.unwrap_unchecked();\n    assert(got == new_value, f\"Expected {new_value}, but got {got}.\");\n}\n\n// Insert several distinct pairs and test auxiliary methods.\nfn test_insert_and_methods(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    for entry in input {\n        hashmap.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap.len() == HASHMAP_LEN, \"hashmap.len() does not match input length.\");\n\n    for entry in input {\n        let entry_key = entry.key;\n        assert(hashmap.contains_key(entry.key), f\"Not found inserted key {entry_key}.\");\n    }\n\n    hashmap.clear();\n    assert(hashmap.is_empty(), \"HashMap after clear() should be empty.\");\n}\n\n// Insert several pairs and test retaining.\nfn test_retain() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n    assert(hashmap.is_empty(), \"New HashMap should be empty.\");\n\n    let (key, value) = (5, 11);\n    hashmap.insert(key, value);\n    let (key, value) = (2, 13);\n    hashmap.insert(key, value);\n    let (key, value) = (11, 5);\n    hashmap.insert(key, value);\n\n    let predicate = |key: K, value: V| -> bool { key * value == 55 };\n    hashmap.retain(predicate);\n\n    assert(hashmap.len() == 2, \"HashMap should have retained 2 elements.\");\n    assert(\n        hashmap.get(2).is_none(),\n        \"Pair should have been removed, since it does not match predicate.\",\n    );\n}\n\n// Equality trait check.\nfn test_hashmaps_equality(input: [Entry; HASHMAP_LEN]) {\n    let mut hashmap_1 = ALLOCATE_HASHMAP();\n    let mut hashmap_2 = ALLOCATE_HASHMAP();\n\n    for entry in input {\n        hashmap_1.insert(entry.key, entry.value);\n        hashmap_2.insert(entry.key, entry.value);\n    }\n\n    assert(hashmap_1 == hashmap_2, \"HashMaps should be equal.\");\n\n    hashmap_2.remove(input[0].key);\n\n    assert(hashmap_1 != hashmap_2, \"HashMaps should not be equal.\");\n}\n\n// Test entries, keys, values.\nfn test_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(keys == [2, 5, 11], \"Got incorrect iteration of keys.\");\n    assert(values == [3, 7, 13], \"Got incorrect iteration of values.\");\n    assert(entries == [(2, 3), (5, 7), (11, 13)], \"Got incorrect iteration of entries.\");\n}\n\n// Test mutable iteration over keys, values and entries.\nfn test_mut_iterators() {\n    let mut hashmap = ALLOCATE_HASHMAP();\n\n    hashmap.insert(2, 3);\n    hashmap.insert(5, 7);\n    hashmap.insert(11, 13);\n\n    let f = |k: K| -> K { k * 3 };\n    hashmap.iter_keys_mut(f);\n\n    let f = |v: V| -> V { v * 5 };\n    hashmap.iter_values_mut(f);\n\n    let keys: [K; 3] = cut(hashmap.keys()).sort_via(K_CMP);\n    let values: [V; 3] = cut(hashmap.values()).sort_via(V_CMP);\n\n    assert(keys == [6, 15, 33], f\"Got incorrect iteration of keys: {keys}\");\n    assert(values == [15, 35, 65], \"Got incorrect iteration of values.\");\n\n    let f = |k: K, v: V| -> (K, V) { (k * 2, v * 2) };\n    hashmap.iter_mut(f);\n\n    let entries: [(K, V); 3] = cut(hashmap.entries()).sort_via(KV_CMP);\n\n    assert(entries == [(12, 30), (30, 70), (66, 130)], \"Got incorrect iteration of entries.\");\n}\n\n// docs:start:type_alias\ntype MyMap = HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>>;\n// docs:end:type_alias\n\n/// Tests examples from the stdlib hashmap documentation\nfn doc_tests() {\n    // docs:start:default_example\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    assert(hashmap.is_empty());\n    // docs:end:default_example\n    // docs:start:with_hasher_example\n    let my_hasher: BuildHasherDefault<Poseidon2Hasher> = Default::default();\n    let hashmap: HashMap<u8, u32, 10, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::with_hasher(my_hasher);\n    assert(hashmap.is_empty());\n    // docs:end:with_hasher_example\n    // docs:start:insert_example\n    let mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    map.insert(12, 42);\n    assert(map.len() == 1);\n    // docs:end:insert_example\n    get_example(map);\n\n    // docs:start:remove_example\n    map.remove(12);\n    assert(map.is_empty());\n\n    // If a key was not present in the map, remove does nothing\n    map.remove(12);\n    assert(map.is_empty());\n    // docs:end:remove_example\n    // docs:start:is_empty_example\n    assert(map.is_empty());\n\n    map.insert(1, 2);\n    assert(!map.is_empty());\n\n    map.remove(1);\n    assert(map.is_empty());\n    // docs:end:is_empty_example\n    // docs:start:len_example\n    // This is equivalent to checking map.is_empty()\n    assert(map.len() == 0);\n\n    map.insert(1, 2);\n    map.insert(3, 4);\n    map.insert(5, 6);\n    assert(map.len() == 3);\n\n    // 3 was already present as a key in the hash map, so the length is unchanged\n    map.insert(3, 7);\n    assert(map.len() == 3);\n\n    map.remove(1);\n    assert(map.len() == 2);\n    // docs:end:len_example\n    // docs:start:capacity_example\n    let empty_map: HashMap<Field, Field, 42, BuildHasherDefault<Poseidon2Hasher>> =\n        HashMap::default();\n    assert(empty_map.len() == 0);\n    assert(empty_map.capacity() == 42);\n    // docs:end:capacity_example\n    // docs:start:clear_example\n    assert(!map.is_empty());\n    map.clear();\n    assert(map.is_empty());\n    // docs:end:clear_example\n    // docs:start:contains_key_example\n    if map.contains_key(7) {\n        let value = map.get(7);\n        assert(value.is_some());\n    } else {\n        println(\"No value for key 7!\");\n    }\n    // docs:end:contains_key_example\n    entries_examples(map);\n    iter_examples(map);\n\n    // docs:start:retain_example\n    map.retain(|k, v| (k != 0) & (v != 0));\n    // docs:end:retain_example\n    // docs:start:eq_example\n    let mut map1: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n    let mut map2: HashMap<Field, u64, 4, BuildHasherDefault<Poseidon2Hasher>> = HashMap::default();\n\n    map1.insert(1, 2);\n    map1.insert(3, 4);\n\n    map2.insert(3, 4);\n    map2.insert(1, 2);\n\n    assert(map1 == map2);\n    // docs:end:eq_example\n}\n\n// docs:start:get_example\nfn get_example(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    let x = map.get(12);\n\n    if x.is_some() {\n        assert(x.unwrap() == 42);\n    }\n}\n// docs:end:get_example\n\nfn entries_examples(map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:entries_example\n    let entries = map.entries();\n\n    // The length of a hashmap may not be compile-time known, so we\n    // need to loop over its capacity instead\n    for i in 0..map.capacity() {\n        if i < entries.len() {\n            let (key, value) = entries.get(i);\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:entries_example\n    // docs:start:keys_example\n    let keys = map.keys();\n\n    for i in 0..keys.max_len() {\n        if i < keys.len() {\n            let key = keys.get_unchecked(i);\n            let value = map.get(key).unwrap_unchecked();\n            println(f\"{key} -> {value}\");\n        }\n    }\n    // docs:end:keys_example\n    // docs:start:values_example\n    let values = map.values();\n\n    for i in 0..values.max_len() {\n        if i < values.len() {\n            let value = values.get_unchecked(i);\n            println(f\"Found value {value}\");\n        }\n    }\n    // docs:end:values_example\n}\n\nfn iter_examples(mut map: HashMap<Field, Field, 5, BuildHasherDefault<Poseidon2Hasher>>) {\n    // docs:start:iter_mut_example\n    // Add 1 to each key in the map, and double the value associated with that key.\n    map.iter_mut(|k, v| (k + 1, v * 2));\n    // docs:end:iter_mut_example\n    // docs:start:iter_keys_mut_example\n    // Double each key, leaving the value associated with that key untouched\n    map.iter_keys_mut(|k| k * 2);\n    // docs:end:iter_keys_mut_example\n    // docs:start:iter_values_mut_example\n    // Halve each value\n    map.iter_values_mut(|v| v / 2);\n    // docs:end:iter_values_mut_example\n}\n",
      "path": ""
    },
    "51": {
      "source": "// Compile-time: cuts the M first elements from the BoundedVec<T, N>.\npub(crate) fn cut<T, let N: u32, let M: u32>(input: BoundedVec<T, N>) -> [T; M] {\n    assert(M < N, \"M should be less than N.\");\n\n    let mut new = BoundedVec::new();\n    for i in 0..M {\n        new.push(input.get(i));\n    }\n    new.storage()\n}\n",
      "path": ""
    }
  },
  "names": [
    "main"
  ],
  "brillig_names": [
    "main"
  ]
}
